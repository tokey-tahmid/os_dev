
cosc562.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080010000 <_memory_start>:
    80010000:	fe22                	sd	s0,312(sp)
    80010002:	f1ca                	sd	s2,224(sp)
    80010004:	0bee                	slli	s7,s7,0x1b
    80010006:	dead                	beqz	a3,8000ff80 <i+0x8000ff60>
    80010008:	4bd0                	lw	a2,20(a5)
    8001000a:	8001                	c.srli64	s0
	...

0000000080010102 <copy_from>:
*/
unsigned long copy_from(void *dst, 
                        const struct page_table *from_table, 
                        const void *from, 
                        unsigned long size)
{
    80010102:	7119                	addi	sp,sp,-128
    80010104:	fc86                	sd	ra,120(sp)
    80010106:	f8a2                	sd	s0,112(sp)
    80010108:	0100                	addi	s0,sp,128
    8001010a:	f8a43c23          	sd	a0,-104(s0)
    8001010e:	f8b43823          	sd	a1,-112(s0)
    80010112:	f8c43423          	sd	a2,-120(s0)
    80010116:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    8001011a:	fe043423          	sd	zero,-24(s0)

    unsigned long src_start_addr = (unsigned long)from;
    8001011e:	f8843783          	ld	a5,-120(s0)
    80010122:	fcf43423          	sd	a5,-56(s0)
    unsigned long src_end_addr = (unsigned long)from+size;
    80010126:	f8843783          	ld	a5,-120(s0)
    8001012a:	f8043703          	ld	a4,-128(s0)
    8001012e:	97ba                	add	a5,a5,a4
    80010130:	fcf43023          	sd	a5,-64(s0)
    unsigned long src_first_page = ALIGN_DOWN_POT(src_start_addr, PAGE_SIZE_4K);
    80010134:	fc843703          	ld	a4,-56(s0)
    80010138:	77fd                	lui	a5,0xfffff
    8001013a:	8ff9                	and	a5,a5,a4
    8001013c:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    80010140:	fb843783          	ld	a5,-72(s0)
    80010144:	fef43023          	sd	a5,-32(s0)
    80010148:	a06d                	j	800101f2 <copy_from+0xf0>
        void *physical_address = (void*)mmu_translate(from_table, i);
    8001014a:	fe043583          	ld	a1,-32(s0)
    8001014e:	f9043503          	ld	a0,-112(s0)
    80010152:	7ae020ef          	jal	ra,80012900 <mmu_translate>
    80010156:	87aa                	mv	a5,a0
    80010158:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    8001015c:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == src_start_addr;
    80010160:	fe043703          	ld	a4,-32(s0)
    80010164:	fc843783          	ld	a5,-56(s0)
    80010168:	40f707b3          	sub	a5,a4,a5
    8001016c:	0017b793          	seqz	a5,a5
    80010170:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    80010174:	faf44783          	lbu	a5,-81(s0)
    80010178:	0ff7f793          	andi	a5,a5,255
    8001017c:	cb81                	beqz	a5,8001018c <copy_from+0x8a>
            offset = src_start_addr % PAGE_SIZE_4K;
    8001017e:	fc843703          	ld	a4,-56(s0)
    80010182:	6785                	lui	a5,0x1
    80010184:	17fd                	addi	a5,a5,-1
    80010186:	8ff9                	and	a5,a5,a4
    80010188:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    8001018c:	6785                	lui	a5,0x1
    8001018e:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > src_end_addr) {
    80010192:	fe043703          	ld	a4,-32(s0)
    80010196:	6785                	lui	a5,0x1
    80010198:	97ba                	add	a5,a5,a4
    8001019a:	fc043703          	ld	a4,-64(s0)
    8001019e:	00f77a63          	bgeu	a4,a5,800101b2 <copy_from+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = src_end_addr - i;
    800101a2:	fc043703          	ld	a4,-64(s0)
    800101a6:	fe043783          	ld	a5,-32(s0)
    800101aa:	40f707b3          	sub	a5,a4,a5
    800101ae:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(dst + bytes_copied, physical_address + offset, bytes_to_copy_from_page);
    800101b2:	f9843703          	ld	a4,-104(s0)
    800101b6:	fe843783          	ld	a5,-24(s0)
    800101ba:	00f706b3          	add	a3,a4,a5
    800101be:	fb043703          	ld	a4,-80(s0)
    800101c2:	fd843783          	ld	a5,-40(s0)
    800101c6:	97ba                	add	a5,a5,a4
    800101c8:	fd043703          	ld	a4,-48(s0)
    800101cc:	2701                	sext.w	a4,a4
    800101ce:	863a                	mv	a2,a4
    800101d0:	85be                	mv	a1,a5
    800101d2:	8536                	mv	a0,a3
    800101d4:	2d0050ef          	jal	ra,800154a4 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800101d8:	fe843703          	ld	a4,-24(s0)
    800101dc:	fd043783          	ld	a5,-48(s0)
    800101e0:	97ba                	add	a5,a5,a4
    800101e2:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    800101e6:	fe043703          	ld	a4,-32(s0)
    800101ea:	6785                	lui	a5,0x1
    800101ec:	97ba                	add	a5,a5,a4
    800101ee:	fef43023          	sd	a5,-32(s0)
    800101f2:	fe043703          	ld	a4,-32(s0)
    800101f6:	fc043783          	ld	a5,-64(s0)
    800101fa:	f4f768e3          	bltu	a4,a5,8001014a <copy_from+0x48>
    }

    return bytes_copied;
    800101fe:	fe843783          	ld	a5,-24(s0)
}
    80010202:	853e                	mv	a0,a5
    80010204:	70e6                	ld	ra,120(sp)
    80010206:	7446                	ld	s0,112(sp)
    80010208:	6109                	addi	sp,sp,128
    8001020a:	8082                	ret

000000008001020c <copy_to>:
*/
unsigned long copy_to(void *to, 
                      const struct page_table *to_table, 
                      const void *src, 
                      unsigned long size)
{
    8001020c:	7119                	addi	sp,sp,-128
    8001020e:	fc86                	sd	ra,120(sp)
    80010210:	f8a2                	sd	s0,112(sp)
    80010212:	0100                	addi	s0,sp,128
    80010214:	f8a43c23          	sd	a0,-104(s0)
    80010218:	f8b43823          	sd	a1,-112(s0)
    8001021c:	f8c43423          	sd	a2,-120(s0)
    80010220:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    80010224:	fe043423          	sd	zero,-24(s0)

    unsigned long dst_start_addr = (unsigned long)to;
    80010228:	f9843783          	ld	a5,-104(s0)
    8001022c:	fcf43423          	sd	a5,-56(s0)
    unsigned long dst_end_addr = (unsigned long)to+size;
    80010230:	f9843783          	ld	a5,-104(s0)
    80010234:	f8043703          	ld	a4,-128(s0)
    80010238:	97ba                	add	a5,a5,a4
    8001023a:	fcf43023          	sd	a5,-64(s0)
    unsigned long dst_first_page = ALIGN_DOWN_POT(dst_start_addr, PAGE_SIZE_4K);
    8001023e:	fc843703          	ld	a4,-56(s0)
    80010242:	77fd                	lui	a5,0xfffff
    80010244:	8ff9                	and	a5,a5,a4
    80010246:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    8001024a:	fb843783          	ld	a5,-72(s0)
    8001024e:	fef43023          	sd	a5,-32(s0)
    80010252:	a06d                	j	800102fc <copy_to+0xf0>
        void *physical_address = (void*)mmu_translate(to_table, i);
    80010254:	fe043583          	ld	a1,-32(s0)
    80010258:	f9043503          	ld	a0,-112(s0)
    8001025c:	6a4020ef          	jal	ra,80012900 <mmu_translate>
    80010260:	87aa                	mv	a5,a0
    80010262:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    80010266:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == dst_start_addr;
    8001026a:	fe043703          	ld	a4,-32(s0)
    8001026e:	fc843783          	ld	a5,-56(s0)
    80010272:	40f707b3          	sub	a5,a4,a5
    80010276:	0017b793          	seqz	a5,a5
    8001027a:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    8001027e:	faf44783          	lbu	a5,-81(s0)
    80010282:	0ff7f793          	andi	a5,a5,255
    80010286:	cb81                	beqz	a5,80010296 <copy_to+0x8a>
            offset = dst_start_addr % PAGE_SIZE_4K;
    80010288:	fc843703          	ld	a4,-56(s0)
    8001028c:	6785                	lui	a5,0x1
    8001028e:	17fd                	addi	a5,a5,-1
    80010290:	8ff9                	and	a5,a5,a4
    80010292:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    80010296:	6785                	lui	a5,0x1
    80010298:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > dst_end_addr) {
    8001029c:	fe043703          	ld	a4,-32(s0)
    800102a0:	6785                	lui	a5,0x1
    800102a2:	97ba                	add	a5,a5,a4
    800102a4:	fc043703          	ld	a4,-64(s0)
    800102a8:	00f77a63          	bgeu	a4,a5,800102bc <copy_to+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = dst_end_addr - i;
    800102ac:	fc043703          	ld	a4,-64(s0)
    800102b0:	fe043783          	ld	a5,-32(s0)
    800102b4:	40f707b3          	sub	a5,a4,a5
    800102b8:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(physical_address + offset, src + bytes_copied, bytes_to_copy_from_page);
    800102bc:	fb043703          	ld	a4,-80(s0)
    800102c0:	fd843783          	ld	a5,-40(s0)
    800102c4:	00f706b3          	add	a3,a4,a5
    800102c8:	f8843703          	ld	a4,-120(s0)
    800102cc:	fe843783          	ld	a5,-24(s0)
    800102d0:	97ba                	add	a5,a5,a4
    800102d2:	fd043703          	ld	a4,-48(s0)
    800102d6:	2701                	sext.w	a4,a4
    800102d8:	863a                	mv	a2,a4
    800102da:	85be                	mv	a1,a5
    800102dc:	8536                	mv	a0,a3
    800102de:	1c6050ef          	jal	ra,800154a4 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800102e2:	fe843703          	ld	a4,-24(s0)
    800102e6:	fd043783          	ld	a5,-48(s0)
    800102ea:	97ba                	add	a5,a5,a4
    800102ec:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    800102f0:	fe043703          	ld	a4,-32(s0)
    800102f4:	6785                	lui	a5,0x1
    800102f6:	97ba                	add	a5,a5,a4
    800102f8:	fef43023          	sd	a5,-32(s0)
    800102fc:	fe043703          	ld	a4,-32(s0)
    80010300:	fc043783          	ld	a5,-64(s0)
    80010304:	f4f768e3          	bltu	a4,a5,80010254 <copy_to+0x48>
    }

    return bytes_copied;
    80010308:	fe843783          	ld	a5,-24(s0)
    8001030c:	853e                	mv	a0,a5
    8001030e:	70e6                	ld	ra,120(sp)
    80010310:	7446                	ld	s0,112(sp)
    80010312:	6109                	addi	sp,sp,128
    80010314:	8082                	ret

0000000080010316 <syscall_exit>:
    (void)hart;         \
    (void)epc;          \
    (void)scratch

SYSCALL(exit)
{
    80010316:	7179                	addi	sp,sp,-48
    80010318:	f422                	sd	s0,40(sp)
    8001031a:	1800                	addi	s0,sp,48
    8001031c:	87aa                	mv	a5,a0
    8001031e:	feb43023          	sd	a1,-32(s0)
    80010322:	fcc43c23          	sd	a2,-40(s0)
    80010326:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Kill the current process on this HART and schedule the next
    // one.
}
    8001032a:	0001                	nop
    8001032c:	7422                	ld	s0,40(sp)
    8001032e:	6145                	addi	sp,sp,48
    80010330:	8082                	ret

0000000080010332 <syscall_putchar>:

SYSCALL(putchar)
{
    80010332:	7179                	addi	sp,sp,-48
    80010334:	f406                	sd	ra,40(sp)
    80010336:	f022                	sd	s0,32(sp)
    80010338:	1800                	addi	s0,sp,48
    8001033a:	87aa                	mv	a5,a0
    8001033c:	feb43023          	sd	a1,-32(s0)
    80010340:	fcc43c23          	sd	a2,-40(s0)
    80010344:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    sbi_putchar(XREG(A0));
    80010348:	fd843783          	ld	a5,-40(s0)
    8001034c:	05078793          	addi	a5,a5,80 # 1050 <i+0x1030>
    80010350:	639c                	ld	a5,0(a5)
    80010352:	0ff7f793          	andi	a5,a5,255
    80010356:	853e                	mv	a0,a5
    80010358:	3af030ef          	jal	ra,80013f06 <sbi_putchar>
}
    8001035c:	0001                	nop
    8001035e:	70a2                	ld	ra,40(sp)
    80010360:	7402                	ld	s0,32(sp)
    80010362:	6145                	addi	sp,sp,48
    80010364:	8082                	ret

0000000080010366 <syscall_getchar>:

SYSCALL(getchar)
{
    80010366:	7179                	addi	sp,sp,-48
    80010368:	f406                	sd	ra,40(sp)
    8001036a:	f022                	sd	s0,32(sp)
    8001036c:	1800                	addi	s0,sp,48
    8001036e:	87aa                	mv	a5,a0
    80010370:	feb43023          	sd	a1,-32(s0)
    80010374:	fcc43c23          	sd	a2,-40(s0)
    80010378:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    XREG(A0) = sbi_getchar();
    8001037c:	3ad030ef          	jal	ra,80013f28 <sbi_getchar>
    80010380:	87aa                	mv	a5,a0
    80010382:	873e                	mv	a4,a5
    80010384:	fd843783          	ld	a5,-40(s0)
    80010388:	05078793          	addi	a5,a5,80
    8001038c:	e398                	sd	a4,0(a5)
}
    8001038e:	0001                	nop
    80010390:	70a2                	ld	ra,40(sp)
    80010392:	7402                	ld	s0,32(sp)
    80010394:	6145                	addi	sp,sp,48
    80010396:	8082                	ret

0000000080010398 <syscall_yield>:

SYSCALL(yield)
{
    80010398:	7179                	addi	sp,sp,-48
    8001039a:	f422                	sd	s0,40(sp)
    8001039c:	1800                	addi	s0,sp,48
    8001039e:	87aa                	mv	a5,a0
    800103a0:	feb43023          	sd	a1,-32(s0)
    800103a4:	fcc43c23          	sd	a2,-40(s0)
    800103a8:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // sched_invoke(hart);
}
    800103ac:	0001                	nop
    800103ae:	7422                	ld	s0,40(sp)
    800103b0:	6145                	addi	sp,sp,48
    800103b2:	8082                	ret

00000000800103b4 <syscall_sleep>:

SYSCALL(sleep)
{
    800103b4:	7179                	addi	sp,sp,-48
    800103b6:	f422                	sd	s0,40(sp)
    800103b8:	1800                	addi	s0,sp,48
    800103ba:	87aa                	mv	a5,a0
    800103bc:	feb43023          	sd	a1,-32(s0)
    800103c0:	fcc43c23          	sd	a2,-40(s0)
    800103c4:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Sleep the process. VIRT_TIMER_FREQ is 10MHz, divided by 1000, we get 10KHz
    //     p->sleep_until = sbi_get_time() + XREG(A0) * VIRT_TIMER_FREQ / 1000;
    //     p->state = PS_SLEEPING;
}
    800103c8:	0001                	nop
    800103ca:	7422                	ld	s0,40(sp)
    800103cc:	6145                	addi	sp,sp,48
    800103ce:	8082                	ret

00000000800103d0 <syscall_events>:

SYSCALL(events)
{
    800103d0:	7179                	addi	sp,sp,-48
    800103d2:	f422                	sd	s0,40(sp)
    800103d4:	1800                	addi	s0,sp,48
    800103d6:	87aa                	mv	a5,a0
    800103d8:	feb43023          	sd	a1,-32(s0)
    800103dc:	fcc43c23          	sd	a2,-40(s0)
    800103e0:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    
}
    800103e4:	0001                	nop
    800103e6:	7422                	ld	s0,40(sp)
    800103e8:	6145                	addi	sp,sp,48
    800103ea:	8082                	ret

00000000800103ec <syscall_handle>:

static const int NUM_SYSCALLS = sizeof(SYSCALLS) / sizeof(SYSCALLS[0]);

// We get here from the trap.c if this is an ECALL from U-MODE
void syscall_handle(int hart, uint64_t epc, int64_t *scratch)
{
    800103ec:	7179                	addi	sp,sp,-48
    800103ee:	f406                	sd	ra,40(sp)
    800103f0:	f022                	sd	s0,32(sp)
    800103f2:	1800                	addi	s0,sp,48
    800103f4:	87aa                	mv	a5,a0
    800103f6:	feb43023          	sd	a1,-32(s0)
    800103fa:	fcc43c23          	sd	a2,-40(s0)
    800103fe:	fef42623          	sw	a5,-20(s0)
    // Sched invoke will save sepc, so we want it to resume
    // 4 bytes ahead, which will be the next instruction.
    CSR_WRITE("sepc", epc + 4);
    80010402:	fe043783          	ld	a5,-32(s0)
    80010406:	0791                	addi	a5,a5,4
    80010408:	14179073          	csrw	sepc,a5

    if (XREG(A7) >= NUM_SYSCALLS || SYSCALLS[XREG(A7)] == NULL) {
    8001040c:	fd843783          	ld	a5,-40(s0)
    80010410:	08878793          	addi	a5,a5,136
    80010414:	639c                	ld	a5,0(a5)
    80010416:	4719                	li	a4,6
    80010418:	00e7df63          	bge	a5,a4,80010436 <syscall_handle+0x4a>
    8001041c:	fd843783          	ld	a5,-40(s0)
    80010420:	08878793          	addi	a5,a5,136
    80010424:	639c                	ld	a5,0(a5)
    80010426:	00009717          	auipc	a4,0x9
    8001042a:	bda70713          	addi	a4,a4,-1062 # 80019000 <SYSCALLS>
    8001042e:	078e                	slli	a5,a5,0x3
    80010430:	97ba                	add	a5,a5,a4
    80010432:	639c                	ld	a5,0(a5)
    80010434:	eb81                	bnez	a5,80010444 <syscall_handle+0x58>
        // Invalid syscall
        XREG(A0) = -EINVAL;
    80010436:	fd843783          	ld	a5,-40(s0)
    8001043a:	05078793          	addi	a5,a5,80
    8001043e:	5729                	li	a4,-22
    80010440:	e398                	sd	a4,0(a5)
    80010442:	a035                	j	8001046e <syscall_handle+0x82>
    }
    else {
        SYSCALL_EXEC(XREG(A7));
    80010444:	fd843783          	ld	a5,-40(s0)
    80010448:	08878793          	addi	a5,a5,136
    8001044c:	639c                	ld	a5,0(a5)
    8001044e:	00009717          	auipc	a4,0x9
    80010452:	bb270713          	addi	a4,a4,-1102 # 80019000 <SYSCALLS>
    80010456:	078e                	slli	a5,a5,0x3
    80010458:	97ba                	add	a5,a5,a4
    8001045a:	6398                	ld	a4,0(a5)
    8001045c:	fec42783          	lw	a5,-20(s0)
    80010460:	fd843603          	ld	a2,-40(s0)
    80010464:	fe043583          	ld	a1,-32(s0)
    80010468:	853e                	mv	a0,a5
    8001046a:	9702                	jalr	a4
    }
}
    8001046c:	0001                	nop
    8001046e:	0001                	nop
    80010470:	70a2                	ld	ra,40(sp)
    80010472:	7402                	ld	s0,32(sp)
    80010474:	6145                	addi	sp,sp,48
    80010476:	8082                	ret

0000000080010478 <_putchar>:
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>

#include "sbi.h"
void _putchar(char c) { sbi_putchar(c); }
    80010478:	1101                	addi	sp,sp,-32
    8001047a:	ec06                	sd	ra,24(sp)
    8001047c:	e822                	sd	s0,16(sp)
    8001047e:	1000                	addi	s0,sp,32
    80010480:	87aa                	mv	a5,a0
    80010482:	fef407a3          	sb	a5,-17(s0)
    80010486:	fef44783          	lbu	a5,-17(s0)
    8001048a:	853e                	mv	a0,a5
    8001048c:	27b030ef          	jal	ra,80013f06 <sbi_putchar>
    80010490:	0001                	nop
    80010492:	60e2                	ld	ra,24(sp)
    80010494:	6442                	ld	s0,16(sp)
    80010496:	6105                	addi	sp,sp,32
    80010498:	8082                	ret

000000008001049a <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void *buffer, size_t idx,
                               size_t maxlen)
{
    8001049a:	7179                	addi	sp,sp,-48
    8001049c:	f422                	sd	s0,40(sp)
    8001049e:	1800                	addi	s0,sp,48
    800104a0:	87aa                	mv	a5,a0
    800104a2:	feb43023          	sd	a1,-32(s0)
    800104a6:	fcc43c23          	sd	a2,-40(s0)
    800104aa:	fcd43823          	sd	a3,-48(s0)
    800104ae:	fef407a3          	sb	a5,-17(s0)
    if (idx < maxlen) {
    800104b2:	fd843703          	ld	a4,-40(s0)
    800104b6:	fd043783          	ld	a5,-48(s0)
    800104ba:	00f77b63          	bgeu	a4,a5,800104d0 <_out_buffer+0x36>
        ((char *)buffer)[idx] = character;
    800104be:	fe043703          	ld	a4,-32(s0)
    800104c2:	fd843783          	ld	a5,-40(s0)
    800104c6:	97ba                	add	a5,a5,a4
    800104c8:	fef44703          	lbu	a4,-17(s0)
    800104cc:	00e78023          	sb	a4,0(a5)
    }
}
    800104d0:	0001                	nop
    800104d2:	7422                	ld	s0,40(sp)
    800104d4:	6145                	addi	sp,sp,48
    800104d6:	8082                	ret

00000000800104d8 <_out_null>:

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    800104d8:	7179                	addi	sp,sp,-48
    800104da:	f422                	sd	s0,40(sp)
    800104dc:	1800                	addi	s0,sp,48
    800104de:	87aa                	mv	a5,a0
    800104e0:	feb43023          	sd	a1,-32(s0)
    800104e4:	fcc43c23          	sd	a2,-40(s0)
    800104e8:	fcd43823          	sd	a3,-48(s0)
    800104ec:	fef407a3          	sb	a5,-17(s0)
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
    800104f0:	0001                	nop
    800104f2:	7422                	ld	s0,40(sp)
    800104f4:	6145                	addi	sp,sp,48
    800104f6:	8082                	ret

00000000800104f8 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    800104f8:	7179                	addi	sp,sp,-48
    800104fa:	f406                	sd	ra,40(sp)
    800104fc:	f022                	sd	s0,32(sp)
    800104fe:	1800                	addi	s0,sp,48
    80010500:	87aa                	mv	a5,a0
    80010502:	feb43023          	sd	a1,-32(s0)
    80010506:	fcc43c23          	sd	a2,-40(s0)
    8001050a:	fcd43823          	sd	a3,-48(s0)
    8001050e:	fef407a3          	sb	a5,-17(s0)
    (void)buffer;
    (void)idx;
    (void)maxlen;
    if (character) {
    80010512:	fef44783          	lbu	a5,-17(s0)
    80010516:	0ff7f793          	andi	a5,a5,255
    8001051a:	c791                	beqz	a5,80010526 <_out_char+0x2e>
        _putchar(character);
    8001051c:	fef44783          	lbu	a5,-17(s0)
    80010520:	853e                	mv	a0,a5
    80010522:	f57ff0ef          	jal	ra,80010478 <_putchar>
    }
}
    80010526:	0001                	nop
    80010528:	70a2                	ld	ra,40(sp)
    8001052a:	7402                	ld	s0,32(sp)
    8001052c:	6145                	addi	sp,sp,48
    8001052e:	8082                	ret

0000000080010530 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx,
                            size_t maxlen)
{
    80010530:	7179                	addi	sp,sp,-48
    80010532:	f406                	sd	ra,40(sp)
    80010534:	f022                	sd	s0,32(sp)
    80010536:	1800                	addi	s0,sp,48
    80010538:	87aa                	mv	a5,a0
    8001053a:	feb43023          	sd	a1,-32(s0)
    8001053e:	fcc43c23          	sd	a2,-40(s0)
    80010542:	fcd43823          	sd	a3,-48(s0)
    80010546:	fef407a3          	sb	a5,-17(s0)
    (void)idx;
    (void)maxlen;
    if (character) {
    8001054a:	fef44783          	lbu	a5,-17(s0)
    8001054e:	0ff7f793          	andi	a5,a5,255
    80010552:	cf81                	beqz	a5,8001056a <_out_fct+0x3a>
        // buffer is the output fct pointer
        ((out_fct_wrap_type *)buffer)
            ->fct(character, ((out_fct_wrap_type *)buffer)->arg);
    80010554:	fe043783          	ld	a5,-32(s0)
    80010558:	6394                	ld	a3,0(a5)
        ((out_fct_wrap_type *)buffer)
    8001055a:	fe043783          	ld	a5,-32(s0)
    8001055e:	6798                	ld	a4,8(a5)
    80010560:	fef44783          	lbu	a5,-17(s0)
    80010564:	85ba                	mv	a1,a4
    80010566:	853e                	mv	a0,a5
    80010568:	9682                	jalr	a3
    }
}
    8001056a:	0001                	nop
    8001056c:	70a2                	ld	ra,40(sp)
    8001056e:	7402                	ld	s0,32(sp)
    80010570:	6145                	addi	sp,sp,48
    80010572:	8082                	ret

0000000080010574 <_strnlen_s>:

// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by
// 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize)
{
    80010574:	7179                	addi	sp,sp,-48
    80010576:	f422                	sd	s0,40(sp)
    80010578:	1800                	addi	s0,sp,48
    8001057a:	fca43c23          	sd	a0,-40(s0)
    8001057e:	fcb43823          	sd	a1,-48(s0)
    const char *s;
    for (s = str; *s && maxsize--; ++s)
    80010582:	fd843783          	ld	a5,-40(s0)
    80010586:	fef43423          	sd	a5,-24(s0)
    8001058a:	a031                	j	80010596 <_strnlen_s+0x22>
    8001058c:	fe843783          	ld	a5,-24(s0)
    80010590:	0785                	addi	a5,a5,1
    80010592:	fef43423          	sd	a5,-24(s0)
    80010596:	fe843783          	ld	a5,-24(s0)
    8001059a:	0007c783          	lbu	a5,0(a5)
    8001059e:	cb81                	beqz	a5,800105ae <_strnlen_s+0x3a>
    800105a0:	fd043783          	ld	a5,-48(s0)
    800105a4:	fff78713          	addi	a4,a5,-1
    800105a8:	fce43823          	sd	a4,-48(s0)
    800105ac:	f3e5                	bnez	a5,8001058c <_strnlen_s+0x18>
        ;
    return (unsigned int)(s - str);
    800105ae:	fe843703          	ld	a4,-24(s0)
    800105b2:	fd843783          	ld	a5,-40(s0)
    800105b6:	40f707b3          	sub	a5,a4,a5
    800105ba:	2781                	sext.w	a5,a5
}
    800105bc:	853e                	mv	a0,a5
    800105be:	7422                	ld	s0,40(sp)
    800105c0:	6145                	addi	sp,sp,48
    800105c2:	8082                	ret

00000000800105c4 <_is_digit>:

// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
    800105c4:	1101                	addi	sp,sp,-32
    800105c6:	ec22                	sd	s0,24(sp)
    800105c8:	1000                	addi	s0,sp,32
    800105ca:	87aa                	mv	a5,a0
    800105cc:	fef407a3          	sb	a5,-17(s0)
    800105d0:	fef44783          	lbu	a5,-17(s0)
    800105d4:	0ff7f713          	andi	a4,a5,255
    800105d8:	02f00793          	li	a5,47
    800105dc:	00e7fc63          	bgeu	a5,a4,800105f4 <_is_digit+0x30>
    800105e0:	fef44783          	lbu	a5,-17(s0)
    800105e4:	0ff7f713          	andi	a4,a5,255
    800105e8:	03900793          	li	a5,57
    800105ec:	00e7e463          	bltu	a5,a4,800105f4 <_is_digit+0x30>
    800105f0:	4785                	li	a5,1
    800105f2:	a011                	j	800105f6 <_is_digit+0x32>
    800105f4:	4781                	li	a5,0
    800105f6:	8b85                	andi	a5,a5,1
    800105f8:	0ff7f793          	andi	a5,a5,255
    800105fc:	853e                	mv	a0,a5
    800105fe:	6462                	ld	s0,24(sp)
    80010600:	6105                	addi	sp,sp,32
    80010602:	8082                	ret

0000000080010604 <_atoi>:

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str)
{
    80010604:	7179                	addi	sp,sp,-48
    80010606:	f406                	sd	ra,40(sp)
    80010608:	f022                	sd	s0,32(sp)
    8001060a:	1800                	addi	s0,sp,48
    8001060c:	fca43c23          	sd	a0,-40(s0)
    unsigned int i = 0U;
    80010610:	fe042623          	sw	zero,-20(s0)
    while (_is_digit(**str)) {
    80010614:	a825                	j	8001064c <_atoi+0x48>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
    80010616:	fec42703          	lw	a4,-20(s0)
    8001061a:	87ba                	mv	a5,a4
    8001061c:	0027979b          	slliw	a5,a5,0x2
    80010620:	9fb9                	addw	a5,a5,a4
    80010622:	0017979b          	slliw	a5,a5,0x1
    80010626:	0007871b          	sext.w	a4,a5
    8001062a:	fd843783          	ld	a5,-40(s0)
    8001062e:	639c                	ld	a5,0(a5)
    80010630:	00178613          	addi	a2,a5,1
    80010634:	fd843683          	ld	a3,-40(s0)
    80010638:	e290                	sd	a2,0(a3)
    8001063a:	0007c783          	lbu	a5,0(a5)
    8001063e:	2781                	sext.w	a5,a5
    80010640:	9fb9                	addw	a5,a5,a4
    80010642:	2781                	sext.w	a5,a5
    80010644:	fd07879b          	addiw	a5,a5,-48
    80010648:	fef42623          	sw	a5,-20(s0)
    while (_is_digit(**str)) {
    8001064c:	fd843783          	ld	a5,-40(s0)
    80010650:	639c                	ld	a5,0(a5)
    80010652:	0007c783          	lbu	a5,0(a5)
    80010656:	853e                	mv	a0,a5
    80010658:	f6dff0ef          	jal	ra,800105c4 <_is_digit>
    8001065c:	87aa                	mv	a5,a0
    8001065e:	ffc5                	bnez	a5,80010616 <_atoi+0x12>
    }
    return i;
    80010660:	fec42783          	lw	a5,-20(s0)
}
    80010664:	853e                	mv	a0,a5
    80010666:	70a2                	ld	ra,40(sp)
    80010668:	7402                	ld	s0,32(sp)
    8001066a:	6145                	addi	sp,sp,48
    8001066c:	8082                	ret

000000008001066e <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx,
                       size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags)
{
    8001066e:	711d                	addi	sp,sp,-96
    80010670:	ec86                	sd	ra,88(sp)
    80010672:	e8a2                	sd	s0,80(sp)
    80010674:	1080                	addi	s0,sp,96
    80010676:	fca43c23          	sd	a0,-40(s0)
    8001067a:	fcb43823          	sd	a1,-48(s0)
    8001067e:	fcc43423          	sd	a2,-56(s0)
    80010682:	fcd43023          	sd	a3,-64(s0)
    80010686:	fae43c23          	sd	a4,-72(s0)
    8001068a:	faf43823          	sd	a5,-80(s0)
    8001068e:	87c2                	mv	a5,a6
    80010690:	8746                	mv	a4,a7
    80010692:	faf42623          	sw	a5,-84(s0)
    80010696:	87ba                	mv	a5,a4
    80010698:	faf42423          	sw	a5,-88(s0)
    const size_t start_idx = idx;
    8001069c:	fc843783          	ld	a5,-56(s0)
    800106a0:	fef43023          	sd	a5,-32(s0)

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    800106a4:	fa842783          	lw	a5,-88(s0)
    800106a8:	8b89                	andi	a5,a5,2
    800106aa:	2781                	sext.w	a5,a5
    800106ac:	e3c9                	bnez	a5,8001072e <_out_rev+0xc0>
    800106ae:	fa842783          	lw	a5,-88(s0)
    800106b2:	8b85                	andi	a5,a5,1
    800106b4:	2781                	sext.w	a5,a5
    800106b6:	efa5                	bnez	a5,8001072e <_out_rev+0xc0>
        for (size_t i = len; i < width; i++) {
    800106b8:	fb043783          	ld	a5,-80(s0)
    800106bc:	fef43423          	sd	a5,-24(s0)
    800106c0:	a035                	j	800106ec <_out_rev+0x7e>
            out(' ', buffer, idx++, maxlen);
    800106c2:	fc843783          	ld	a5,-56(s0)
    800106c6:	00178713          	addi	a4,a5,1
    800106ca:	fce43423          	sd	a4,-56(s0)
    800106ce:	fd843703          	ld	a4,-40(s0)
    800106d2:	fc043683          	ld	a3,-64(s0)
    800106d6:	863e                	mv	a2,a5
    800106d8:	fd043583          	ld	a1,-48(s0)
    800106dc:	02000513          	li	a0,32
    800106e0:	9702                	jalr	a4
        for (size_t i = len; i < width; i++) {
    800106e2:	fe843783          	ld	a5,-24(s0)
    800106e6:	0785                	addi	a5,a5,1
    800106e8:	fef43423          	sd	a5,-24(s0)
    800106ec:	fac46783          	lwu	a5,-84(s0)
    800106f0:	fe843703          	ld	a4,-24(s0)
    800106f4:	fcf767e3          	bltu	a4,a5,800106c2 <_out_rev+0x54>
        }
    }

    // reverse string
    while (len) {
    800106f8:	a81d                	j	8001072e <_out_rev+0xc0>
        out(buf[--len], buffer, idx++, maxlen);
    800106fa:	fb043783          	ld	a5,-80(s0)
    800106fe:	17fd                	addi	a5,a5,-1
    80010700:	faf43823          	sd	a5,-80(s0)
    80010704:	fb843703          	ld	a4,-72(s0)
    80010708:	fb043783          	ld	a5,-80(s0)
    8001070c:	97ba                	add	a5,a5,a4
    8001070e:	0007c503          	lbu	a0,0(a5)
    80010712:	fc843783          	ld	a5,-56(s0)
    80010716:	00178713          	addi	a4,a5,1
    8001071a:	fce43423          	sd	a4,-56(s0)
    8001071e:	fd843703          	ld	a4,-40(s0)
    80010722:	fc043683          	ld	a3,-64(s0)
    80010726:	863e                	mv	a2,a5
    80010728:	fd043583          	ld	a1,-48(s0)
    8001072c:	9702                	jalr	a4
    while (len) {
    8001072e:	fb043783          	ld	a5,-80(s0)
    80010732:	f7e1                	bnez	a5,800106fa <_out_rev+0x8c>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
    80010734:	fa842783          	lw	a5,-88(s0)
    80010738:	8b89                	andi	a5,a5,2
    8001073a:	2781                	sext.w	a5,a5
    8001073c:	cb9d                	beqz	a5,80010772 <_out_rev+0x104>
        while (idx - start_idx < width) {
    8001073e:	a00d                	j	80010760 <_out_rev+0xf2>
            out(' ', buffer, idx++, maxlen);
    80010740:	fc843783          	ld	a5,-56(s0)
    80010744:	00178713          	addi	a4,a5,1
    80010748:	fce43423          	sd	a4,-56(s0)
    8001074c:	fd843703          	ld	a4,-40(s0)
    80010750:	fc043683          	ld	a3,-64(s0)
    80010754:	863e                	mv	a2,a5
    80010756:	fd043583          	ld	a1,-48(s0)
    8001075a:	02000513          	li	a0,32
    8001075e:	9702                	jalr	a4
        while (idx - start_idx < width) {
    80010760:	fc843703          	ld	a4,-56(s0)
    80010764:	fe043783          	ld	a5,-32(s0)
    80010768:	8f1d                	sub	a4,a4,a5
    8001076a:	fac46783          	lwu	a5,-84(s0)
    8001076e:	fcf769e3          	bltu	a4,a5,80010740 <_out_rev+0xd2>
        }
    }

    return idx;
    80010772:	fc843783          	ld	a5,-56(s0)
}
    80010776:	853e                	mv	a0,a5
    80010778:	60e6                	ld	ra,88(sp)
    8001077a:	6446                	ld	s0,80(sp)
    8001077c:	6125                	addi	sp,sp,96
    8001077e:	8082                	ret

0000000080010780 <_ntoa_format>:
// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx,
                           size_t maxlen, char *buf, size_t len, bool negative,
                           unsigned int base, unsigned int prec,
                           unsigned int width, unsigned int flags)
{
    80010780:	715d                	addi	sp,sp,-80
    80010782:	e486                	sd	ra,72(sp)
    80010784:	e0a2                	sd	s0,64(sp)
    80010786:	0880                	addi	s0,sp,80
    80010788:	fea43423          	sd	a0,-24(s0)
    8001078c:	feb43023          	sd	a1,-32(s0)
    80010790:	fcc43c23          	sd	a2,-40(s0)
    80010794:	fcd43823          	sd	a3,-48(s0)
    80010798:	fce43423          	sd	a4,-56(s0)
    8001079c:	fcf43023          	sd	a5,-64(s0)
    800107a0:	87c2                	mv	a5,a6
    800107a2:	8746                	mv	a4,a7
    800107a4:	faf40fa3          	sb	a5,-65(s0)
    800107a8:	87ba                	mv	a5,a4
    800107aa:	faf42c23          	sw	a5,-72(s0)
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
    800107ae:	481c                	lw	a5,16(s0)
    800107b0:	8b89                	andi	a5,a5,2
    800107b2:	2781                	sext.w	a5,a5
    800107b4:	ebd1                	bnez	a5,80010848 <_ntoa_format+0xc8>
        if (width && (flags & FLAGS_ZEROPAD) &&
    800107b6:	441c                	lw	a5,8(s0)
    800107b8:	2781                	sext.w	a5,a5
    800107ba:	cf9d                	beqz	a5,800107f8 <_ntoa_format+0x78>
    800107bc:	481c                	lw	a5,16(s0)
    800107be:	8b85                	andi	a5,a5,1
    800107c0:	2781                	sext.w	a5,a5
    800107c2:	cb9d                	beqz	a5,800107f8 <_ntoa_format+0x78>
    800107c4:	fbf44783          	lbu	a5,-65(s0)
    800107c8:	0ff7f793          	andi	a5,a5,255
    800107cc:	e789                	bnez	a5,800107d6 <_ntoa_format+0x56>
            (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    800107ce:	481c                	lw	a5,16(s0)
    800107d0:	8bb1                	andi	a5,a5,12
    800107d2:	2781                	sext.w	a5,a5
    800107d4:	c395                	beqz	a5,800107f8 <_ntoa_format+0x78>
            width--;
    800107d6:	441c                	lw	a5,8(s0)
    800107d8:	37fd                	addiw	a5,a5,-1
    800107da:	c41c                	sw	a5,8(s0)
        }
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    800107dc:	a831                	j	800107f8 <_ntoa_format+0x78>
            buf[len++] = '0';
    800107de:	fc043783          	ld	a5,-64(s0)
    800107e2:	00178713          	addi	a4,a5,1
    800107e6:	fce43023          	sd	a4,-64(s0)
    800107ea:	fc843703          	ld	a4,-56(s0)
    800107ee:	97ba                	add	a5,a5,a4
    800107f0:	03000713          	li	a4,48
    800107f4:	00e78023          	sb	a4,0(a5)
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    800107f8:	00046783          	lwu	a5,0(s0)
    800107fc:	fc043703          	ld	a4,-64(s0)
    80010800:	02f77563          	bgeu	a4,a5,8001082a <_ntoa_format+0xaa>
    80010804:	fc043703          	ld	a4,-64(s0)
    80010808:	47fd                	li	a5,31
    8001080a:	fce7fae3          	bgeu	a5,a4,800107de <_ntoa_format+0x5e>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    8001080e:	a831                	j	8001082a <_ntoa_format+0xaa>
               (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
    80010810:	fc043783          	ld	a5,-64(s0)
    80010814:	00178713          	addi	a4,a5,1
    80010818:	fce43023          	sd	a4,-64(s0)
    8001081c:	fc843703          	ld	a4,-56(s0)
    80010820:	97ba                	add	a5,a5,a4
    80010822:	03000713          	li	a4,48
    80010826:	00e78023          	sb	a4,0(a5)
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    8001082a:	481c                	lw	a5,16(s0)
    8001082c:	8b85                	andi	a5,a5,1
    8001082e:	2781                	sext.w	a5,a5
    80010830:	cf81                	beqz	a5,80010848 <_ntoa_format+0xc8>
    80010832:	00846783          	lwu	a5,8(s0)
    80010836:	fc043703          	ld	a4,-64(s0)
    8001083a:	00f77763          	bgeu	a4,a5,80010848 <_ntoa_format+0xc8>
    8001083e:	fc043703          	ld	a4,-64(s0)
    80010842:	47fd                	li	a5,31
    80010844:	fce7f6e3          	bgeu	a5,a4,80010810 <_ntoa_format+0x90>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
    80010848:	481c                	lw	a5,16(s0)
    8001084a:	8bc1                	andi	a5,a5,16
    8001084c:	2781                	sext.w	a5,a5
    8001084e:	12078363          	beqz	a5,80010974 <_ntoa_format+0x1f4>
        if (!(flags & FLAGS_PRECISION) && len &&
    80010852:	481c                	lw	a5,16(s0)
    80010854:	4007f793          	andi	a5,a5,1024
    80010858:	2781                	sext.w	a5,a5
    8001085a:	e7a1                	bnez	a5,800108a2 <_ntoa_format+0x122>
    8001085c:	fc043783          	ld	a5,-64(s0)
    80010860:	c3a9                	beqz	a5,800108a2 <_ntoa_format+0x122>
            ((len == prec) || (len == width))) {
    80010862:	00046783          	lwu	a5,0(s0)
        if (!(flags & FLAGS_PRECISION) && len &&
    80010866:	fc043703          	ld	a4,-64(s0)
    8001086a:	00f70863          	beq	a4,a5,8001087a <_ntoa_format+0xfa>
            ((len == prec) || (len == width))) {
    8001086e:	00846783          	lwu	a5,8(s0)
    80010872:	fc043703          	ld	a4,-64(s0)
    80010876:	02f71663          	bne	a4,a5,800108a2 <_ntoa_format+0x122>
            len--;
    8001087a:	fc043783          	ld	a5,-64(s0)
    8001087e:	17fd                	addi	a5,a5,-1
    80010880:	fcf43023          	sd	a5,-64(s0)
            if (len && (base == 16U)) {
    80010884:	fc043783          	ld	a5,-64(s0)
    80010888:	cf89                	beqz	a5,800108a2 <_ntoa_format+0x122>
    8001088a:	fb842783          	lw	a5,-72(s0)
    8001088e:	0007871b          	sext.w	a4,a5
    80010892:	47c1                	li	a5,16
    80010894:	00f71763          	bne	a4,a5,800108a2 <_ntoa_format+0x122>
                len--;
    80010898:	fc043783          	ld	a5,-64(s0)
    8001089c:	17fd                	addi	a5,a5,-1
    8001089e:	fcf43023          	sd	a5,-64(s0)
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) &&
    800108a2:	fb842783          	lw	a5,-72(s0)
    800108a6:	0007871b          	sext.w	a4,a5
    800108aa:	47c1                	li	a5,16
    800108ac:	02f71a63          	bne	a4,a5,800108e0 <_ntoa_format+0x160>
    800108b0:	481c                	lw	a5,16(s0)
    800108b2:	0207f793          	andi	a5,a5,32
    800108b6:	2781                	sext.w	a5,a5
    800108b8:	e785                	bnez	a5,800108e0 <_ntoa_format+0x160>
    800108ba:	fc043703          	ld	a4,-64(s0)
    800108be:	47fd                	li	a5,31
    800108c0:	02e7e063          	bltu	a5,a4,800108e0 <_ntoa_format+0x160>
            (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'x';
    800108c4:	fc043783          	ld	a5,-64(s0)
    800108c8:	00178713          	addi	a4,a5,1
    800108cc:	fce43023          	sd	a4,-64(s0)
    800108d0:	fc843703          	ld	a4,-56(s0)
    800108d4:	97ba                	add	a5,a5,a4
    800108d6:	07800713          	li	a4,120
    800108da:	00e78023          	sb	a4,0(a5)
    800108de:	a88d                	j	80010950 <_ntoa_format+0x1d0>
        }
        else if ((base == 16U) && (flags & FLAGS_UPPERCASE) &&
    800108e0:	fb842783          	lw	a5,-72(s0)
    800108e4:	0007871b          	sext.w	a4,a5
    800108e8:	47c1                	li	a5,16
    800108ea:	02f71a63          	bne	a4,a5,8001091e <_ntoa_format+0x19e>
    800108ee:	481c                	lw	a5,16(s0)
    800108f0:	0207f793          	andi	a5,a5,32
    800108f4:	2781                	sext.w	a5,a5
    800108f6:	c785                	beqz	a5,8001091e <_ntoa_format+0x19e>
    800108f8:	fc043703          	ld	a4,-64(s0)
    800108fc:	47fd                	li	a5,31
    800108fe:	02e7e063          	bltu	a5,a4,8001091e <_ntoa_format+0x19e>
                 (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
    80010902:	fc043783          	ld	a5,-64(s0)
    80010906:	00178713          	addi	a4,a5,1
    8001090a:	fce43023          	sd	a4,-64(s0)
    8001090e:	fc843703          	ld	a4,-56(s0)
    80010912:	97ba                	add	a5,a5,a4
    80010914:	05800713          	li	a4,88
    80010918:	00e78023          	sb	a4,0(a5)
    8001091c:	a815                	j	80010950 <_ntoa_format+0x1d0>
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    8001091e:	fb842783          	lw	a5,-72(s0)
    80010922:	0007871b          	sext.w	a4,a5
    80010926:	4789                	li	a5,2
    80010928:	02f71463          	bne	a4,a5,80010950 <_ntoa_format+0x1d0>
    8001092c:	fc043703          	ld	a4,-64(s0)
    80010930:	47fd                	li	a5,31
    80010932:	00e7ef63          	bltu	a5,a4,80010950 <_ntoa_format+0x1d0>
            buf[len++] = 'b';
    80010936:	fc043783          	ld	a5,-64(s0)
    8001093a:	00178713          	addi	a4,a5,1
    8001093e:	fce43023          	sd	a4,-64(s0)
    80010942:	fc843703          	ld	a4,-56(s0)
    80010946:	97ba                	add	a5,a5,a4
    80010948:	06200713          	li	a4,98
    8001094c:	00e78023          	sb	a4,0(a5)
        }
        if (len < PRINTF_NTOA_BUFFER_SIZE) {
    80010950:	fc043703          	ld	a4,-64(s0)
    80010954:	47fd                	li	a5,31
    80010956:	00e7ef63          	bltu	a5,a4,80010974 <_ntoa_format+0x1f4>
            buf[len++] = '0';
    8001095a:	fc043783          	ld	a5,-64(s0)
    8001095e:	00178713          	addi	a4,a5,1
    80010962:	fce43023          	sd	a4,-64(s0)
    80010966:	fc843703          	ld	a4,-56(s0)
    8001096a:	97ba                	add	a5,a5,a4
    8001096c:	03000713          	li	a4,48
    80010970:	00e78023          	sb	a4,0(a5)
        }
    }

    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    80010974:	fc043703          	ld	a4,-64(s0)
    80010978:	47fd                	li	a5,31
    8001097a:	06e7e863          	bltu	a5,a4,800109ea <_ntoa_format+0x26a>
        if (negative) {
    8001097e:	fbf44783          	lbu	a5,-65(s0)
    80010982:	0ff7f793          	andi	a5,a5,255
    80010986:	cf99                	beqz	a5,800109a4 <_ntoa_format+0x224>
            buf[len++] = '-';
    80010988:	fc043783          	ld	a5,-64(s0)
    8001098c:	00178713          	addi	a4,a5,1
    80010990:	fce43023          	sd	a4,-64(s0)
    80010994:	fc843703          	ld	a4,-56(s0)
    80010998:	97ba                	add	a5,a5,a4
    8001099a:	02d00713          	li	a4,45
    8001099e:	00e78023          	sb	a4,0(a5)
    800109a2:	a0a1                	j	800109ea <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_PLUS) {
    800109a4:	481c                	lw	a5,16(s0)
    800109a6:	8b91                	andi	a5,a5,4
    800109a8:	2781                	sext.w	a5,a5
    800109aa:	cf99                	beqz	a5,800109c8 <_ntoa_format+0x248>
            buf[len++] = '+';  // ignore the space if the '+' exists
    800109ac:	fc043783          	ld	a5,-64(s0)
    800109b0:	00178713          	addi	a4,a5,1
    800109b4:	fce43023          	sd	a4,-64(s0)
    800109b8:	fc843703          	ld	a4,-56(s0)
    800109bc:	97ba                	add	a5,a5,a4
    800109be:	02b00713          	li	a4,43
    800109c2:	00e78023          	sb	a4,0(a5)
    800109c6:	a015                	j	800109ea <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_SPACE) {
    800109c8:	481c                	lw	a5,16(s0)
    800109ca:	8ba1                	andi	a5,a5,8
    800109cc:	2781                	sext.w	a5,a5
    800109ce:	cf91                	beqz	a5,800109ea <_ntoa_format+0x26a>
            buf[len++] = ' ';
    800109d0:	fc043783          	ld	a5,-64(s0)
    800109d4:	00178713          	addi	a4,a5,1
    800109d8:	fce43023          	sd	a4,-64(s0)
    800109dc:	fc843703          	ld	a4,-56(s0)
    800109e0:	97ba                	add	a5,a5,a4
    800109e2:	02000713          	li	a4,32
    800109e6:	00e78023          	sb	a4,0(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    800109ea:	4818                	lw	a4,16(s0)
    800109ec:	441c                	lw	a5,8(s0)
    800109ee:	88ba                	mv	a7,a4
    800109f0:	883e                	mv	a6,a5
    800109f2:	fc043783          	ld	a5,-64(s0)
    800109f6:	fc843703          	ld	a4,-56(s0)
    800109fa:	fd043683          	ld	a3,-48(s0)
    800109fe:	fd843603          	ld	a2,-40(s0)
    80010a02:	fe043583          	ld	a1,-32(s0)
    80010a06:	fe843503          	ld	a0,-24(s0)
    80010a0a:	c65ff0ef          	jal	ra,8001066e <_out_rev>
    80010a0e:	87aa                	mv	a5,a0
}
    80010a10:	853e                	mv	a0,a5
    80010a12:	60a6                	ld	ra,72(sp)
    80010a14:	6406                	ld	s0,64(sp)
    80010a16:	6161                	addi	sp,sp,80
    80010a18:	8082                	ret

0000000080010a1a <_ntoa_long>:
// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx,
                         size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec,
                         unsigned int width, unsigned int flags)
{
    80010a1a:	7135                	addi	sp,sp,-160
    80010a1c:	ed06                	sd	ra,152(sp)
    80010a1e:	e922                	sd	s0,144(sp)
    80010a20:	1100                	addi	s0,sp,160
    80010a22:	faa43c23          	sd	a0,-72(s0)
    80010a26:	fab43823          	sd	a1,-80(s0)
    80010a2a:	fac43423          	sd	a2,-88(s0)
    80010a2e:	fad43023          	sd	a3,-96(s0)
    80010a32:	f8e43c23          	sd	a4,-104(s0)
    80010a36:	f9043423          	sd	a6,-120(s0)
    80010a3a:	8746                	mv	a4,a7
    80010a3c:	f8f40ba3          	sb	a5,-105(s0)
    80010a40:	87ba                	mv	a5,a4
    80010a42:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    80010a46:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    80010a4a:	f9843783          	ld	a5,-104(s0)
    80010a4e:	e781                	bnez	a5,80010a56 <_ntoa_long+0x3c>
        flags &= ~FLAGS_HASH;
    80010a50:	441c                	lw	a5,8(s0)
    80010a52:	9bbd                	andi	a5,a5,-17
    80010a54:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    80010a56:	441c                	lw	a5,8(s0)
    80010a58:	4007f793          	andi	a5,a5,1024
    80010a5c:	2781                	sext.w	a5,a5
    80010a5e:	c781                	beqz	a5,80010a66 <_ntoa_long+0x4c>
    80010a60:	f9843783          	ld	a5,-104(s0)
    80010a64:	c7c1                	beqz	a5,80010aec <_ntoa_long+0xd2>
        do {
            const char digit = (char)(value % base);
    80010a66:	f9843703          	ld	a4,-104(s0)
    80010a6a:	f8843783          	ld	a5,-120(s0)
    80010a6e:	02f777b3          	remu	a5,a4,a5
    80010a72:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    80010a76:	fe744783          	lbu	a5,-25(s0)
    80010a7a:	0ff7f713          	andi	a4,a5,255
    80010a7e:	47a5                	li	a5,9
    80010a80:	00e7e963          	bltu	a5,a4,80010a92 <_ntoa_long+0x78>
    80010a84:	fe744783          	lbu	a5,-25(s0)
    80010a88:	0307879b          	addiw	a5,a5,48
    80010a8c:	0ff7f793          	andi	a5,a5,255
    80010a90:	a01d                	j	80010ab6 <_ntoa_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    80010a92:	441c                	lw	a5,8(s0)
    80010a94:	0207f793          	andi	a5,a5,32
    80010a98:	2781                	sext.w	a5,a5
    80010a9a:	c781                	beqz	a5,80010aa2 <_ntoa_long+0x88>
    80010a9c:	04100793          	li	a5,65
    80010aa0:	a019                	j	80010aa6 <_ntoa_long+0x8c>
    80010aa2:	06100793          	li	a5,97
    80010aa6:	fe744703          	lbu	a4,-25(s0)
    80010aaa:	9fb9                	addw	a5,a5,a4
    80010aac:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    80010ab0:	37d9                	addiw	a5,a5,-10
    80010ab2:	0ff7f793          	andi	a5,a5,255
    80010ab6:	fe843703          	ld	a4,-24(s0)
    80010aba:	00170693          	addi	a3,a4,1
    80010abe:	fed43423          	sd	a3,-24(s0)
    80010ac2:	ff040693          	addi	a3,s0,-16
    80010ac6:	9736                	add	a4,a4,a3
    80010ac8:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    80010acc:	f9843703          	ld	a4,-104(s0)
    80010ad0:	f8843783          	ld	a5,-120(s0)
    80010ad4:	02f757b3          	divu	a5,a4,a5
    80010ad8:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    80010adc:	f9843783          	ld	a5,-104(s0)
    80010ae0:	c791                	beqz	a5,80010aec <_ntoa_long+0xd2>
    80010ae2:	fe843703          	ld	a4,-24(s0)
    80010ae6:	47fd                	li	a5,31
    80010ae8:	f6e7ffe3          	bgeu	a5,a4,80010a66 <_ntoa_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    80010aec:	f8843783          	ld	a5,-120(s0)
    80010af0:	0007861b          	sext.w	a2,a5
    80010af4:	f9744683          	lbu	a3,-105(s0)
    80010af8:	fc040713          	addi	a4,s0,-64
    80010afc:	441c                	lw	a5,8(s0)
    80010afe:	e83e                	sd	a5,16(sp)
    80010b00:	401c                	lw	a5,0(s0)
    80010b02:	e43e                	sd	a5,8(sp)
    80010b04:	f9042783          	lw	a5,-112(s0)
    80010b08:	e03e                	sd	a5,0(sp)
    80010b0a:	88b2                	mv	a7,a2
    80010b0c:	8836                	mv	a6,a3
    80010b0e:	fe843783          	ld	a5,-24(s0)
    80010b12:	fa043683          	ld	a3,-96(s0)
    80010b16:	fa843603          	ld	a2,-88(s0)
    80010b1a:	fb043583          	ld	a1,-80(s0)
    80010b1e:	fb843503          	ld	a0,-72(s0)
    80010b22:	c5fff0ef          	jal	ra,80010780 <_ntoa_format>
    80010b26:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    80010b28:	853e                	mv	a0,a5
    80010b2a:	60ea                	ld	ra,152(sp)
    80010b2c:	644a                	ld	s0,144(sp)
    80010b2e:	610d                	addi	sp,sp,160
    80010b30:	8082                	ret

0000000080010b32 <_ntoa_long_long>:
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx,
                              size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base,
                              unsigned int prec, unsigned int width,
                              unsigned int flags)
{
    80010b32:	7135                	addi	sp,sp,-160
    80010b34:	ed06                	sd	ra,152(sp)
    80010b36:	e922                	sd	s0,144(sp)
    80010b38:	1100                	addi	s0,sp,160
    80010b3a:	faa43c23          	sd	a0,-72(s0)
    80010b3e:	fab43823          	sd	a1,-80(s0)
    80010b42:	fac43423          	sd	a2,-88(s0)
    80010b46:	fad43023          	sd	a3,-96(s0)
    80010b4a:	f8e43c23          	sd	a4,-104(s0)
    80010b4e:	f9043423          	sd	a6,-120(s0)
    80010b52:	8746                	mv	a4,a7
    80010b54:	f8f40ba3          	sb	a5,-105(s0)
    80010b58:	87ba                	mv	a5,a4
    80010b5a:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    80010b5e:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    80010b62:	f9843783          	ld	a5,-104(s0)
    80010b66:	e781                	bnez	a5,80010b6e <_ntoa_long_long+0x3c>
        flags &= ~FLAGS_HASH;
    80010b68:	441c                	lw	a5,8(s0)
    80010b6a:	9bbd                	andi	a5,a5,-17
    80010b6c:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    80010b6e:	441c                	lw	a5,8(s0)
    80010b70:	4007f793          	andi	a5,a5,1024
    80010b74:	2781                	sext.w	a5,a5
    80010b76:	c781                	beqz	a5,80010b7e <_ntoa_long_long+0x4c>
    80010b78:	f9843783          	ld	a5,-104(s0)
    80010b7c:	c7c1                	beqz	a5,80010c04 <_ntoa_long_long+0xd2>
        do {
            const char digit = (char)(value % base);
    80010b7e:	f9843703          	ld	a4,-104(s0)
    80010b82:	f8843783          	ld	a5,-120(s0)
    80010b86:	02f777b3          	remu	a5,a4,a5
    80010b8a:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    80010b8e:	fe744783          	lbu	a5,-25(s0)
    80010b92:	0ff7f713          	andi	a4,a5,255
    80010b96:	47a5                	li	a5,9
    80010b98:	00e7e963          	bltu	a5,a4,80010baa <_ntoa_long_long+0x78>
    80010b9c:	fe744783          	lbu	a5,-25(s0)
    80010ba0:	0307879b          	addiw	a5,a5,48
    80010ba4:	0ff7f793          	andi	a5,a5,255
    80010ba8:	a01d                	j	80010bce <_ntoa_long_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    80010baa:	441c                	lw	a5,8(s0)
    80010bac:	0207f793          	andi	a5,a5,32
    80010bb0:	2781                	sext.w	a5,a5
    80010bb2:	c781                	beqz	a5,80010bba <_ntoa_long_long+0x88>
    80010bb4:	04100793          	li	a5,65
    80010bb8:	a019                	j	80010bbe <_ntoa_long_long+0x8c>
    80010bba:	06100793          	li	a5,97
    80010bbe:	fe744703          	lbu	a4,-25(s0)
    80010bc2:	9fb9                	addw	a5,a5,a4
    80010bc4:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    80010bc8:	37d9                	addiw	a5,a5,-10
    80010bca:	0ff7f793          	andi	a5,a5,255
    80010bce:	fe843703          	ld	a4,-24(s0)
    80010bd2:	00170693          	addi	a3,a4,1
    80010bd6:	fed43423          	sd	a3,-24(s0)
    80010bda:	ff040693          	addi	a3,s0,-16
    80010bde:	9736                	add	a4,a4,a3
    80010be0:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    80010be4:	f9843703          	ld	a4,-104(s0)
    80010be8:	f8843783          	ld	a5,-120(s0)
    80010bec:	02f757b3          	divu	a5,a4,a5
    80010bf0:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    80010bf4:	f9843783          	ld	a5,-104(s0)
    80010bf8:	c791                	beqz	a5,80010c04 <_ntoa_long_long+0xd2>
    80010bfa:	fe843703          	ld	a4,-24(s0)
    80010bfe:	47fd                	li	a5,31
    80010c00:	f6e7ffe3          	bgeu	a5,a4,80010b7e <_ntoa_long_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    80010c04:	f8843783          	ld	a5,-120(s0)
    80010c08:	0007861b          	sext.w	a2,a5
    80010c0c:	f9744683          	lbu	a3,-105(s0)
    80010c10:	fc040713          	addi	a4,s0,-64
    80010c14:	441c                	lw	a5,8(s0)
    80010c16:	e83e                	sd	a5,16(sp)
    80010c18:	401c                	lw	a5,0(s0)
    80010c1a:	e43e                	sd	a5,8(sp)
    80010c1c:	f9042783          	lw	a5,-112(s0)
    80010c20:	e03e                	sd	a5,0(sp)
    80010c22:	88b2                	mv	a7,a2
    80010c24:	8836                	mv	a6,a3
    80010c26:	fe843783          	ld	a5,-24(s0)
    80010c2a:	fa043683          	ld	a3,-96(s0)
    80010c2e:	fa843603          	ld	a2,-88(s0)
    80010c32:	fb043583          	ld	a1,-80(s0)
    80010c36:	fb843503          	ld	a0,-72(s0)
    80010c3a:	b47ff0ef          	jal	ra,80010780 <_ntoa_format>
    80010c3e:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    80010c40:	853e                	mv	a0,a5
    80010c42:	60ea                	ld	ra,152(sp)
    80010c44:	644a                	ld	s0,144(sp)
    80010c46:	610d                	addi	sp,sp,160
    80010c48:	8082                	ret

0000000080010c4a <_ftoa>:

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    80010c4a:	7135                	addi	sp,sp,-160
    80010c4c:	ed06                	sd	ra,152(sp)
    80010c4e:	e922                	sd	s0,144(sp)
    80010c50:	1100                	addi	s0,sp,160
    80010c52:	f8a43c23          	sd	a0,-104(s0)
    80010c56:	f8b43823          	sd	a1,-112(s0)
    80010c5a:	f8c43423          	sd	a2,-120(s0)
    80010c5e:	f8d43023          	sd	a3,-128(s0)
    80010c62:	f6a43c27          	fsd	fa0,-136(s0)
    80010c66:	863a                	mv	a2,a4
    80010c68:	86be                	mv	a3,a5
    80010c6a:	8742                	mv	a4,a6
    80010c6c:	87b2                	mv	a5,a2
    80010c6e:	f6f42a23          	sw	a5,-140(s0)
    80010c72:	87b6                	mv	a5,a3
    80010c74:	f6f42823          	sw	a5,-144(s0)
    80010c78:	87ba                	mv	a5,a4
    80010c7a:	f6f42623          	sw	a5,-148(s0)
    char buf[PRINTF_FTOA_BUFFER_SIZE];
    size_t len                  = 0U;
    80010c7e:	fe043423          	sd	zero,-24(s0)
    double diff                 = 0.0;
    80010c82:	fc043423          	sd	zero,-56(s0)
    static const double pow10[] = {1,         10,        100,     1000,
                                   10000,     100000,    1000000, 10000000,
                                   100000000, 1000000000};

    // test for special values
    if (value != value)
    80010c86:	f7843707          	fld	fa4,-136(s0)
    80010c8a:	f7843787          	fld	fa5,-136(s0)
    80010c8e:	a2f727d3          	feq.d	a5,fa4,fa5
    80010c92:	eb85                	bnez	a5,80010cc2 <_ftoa+0x78>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    80010c94:	f6c42703          	lw	a4,-148(s0)
    80010c98:	f7042783          	lw	a5,-144(s0)
    80010c9c:	88ba                	mv	a7,a4
    80010c9e:	883e                	mv	a6,a5
    80010ca0:	478d                	li	a5,3
    80010ca2:	00008717          	auipc	a4,0x8
    80010ca6:	38e70713          	addi	a4,a4,910 # 80019030 <SYSCALLS+0x30>
    80010caa:	f8043683          	ld	a3,-128(s0)
    80010cae:	f8843603          	ld	a2,-120(s0)
    80010cb2:	f9043583          	ld	a1,-112(s0)
    80010cb6:	f9843503          	ld	a0,-104(s0)
    80010cba:	9b5ff0ef          	jal	ra,8001066e <_out_rev>
    80010cbe:	87aa                	mv	a5,a0
    80010cc0:	a1f1                	j	8001118c <_ftoa+0x542>
    if (value < -DBL_MAX)
    80010cc2:	f7843707          	fld	fa4,-136(s0)
    80010cc6:	00008797          	auipc	a5,0x8
    80010cca:	5ba78793          	addi	a5,a5,1466 # 80019280 <pow10.0+0x50>
    80010cce:	239c                	fld	fa5,0(a5)
    80010cd0:	a2f717d3          	flt.d	a5,fa4,fa5
    80010cd4:	cb85                	beqz	a5,80010d04 <_ftoa+0xba>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    80010cd6:	f6c42703          	lw	a4,-148(s0)
    80010cda:	f7042783          	lw	a5,-144(s0)
    80010cde:	88ba                	mv	a7,a4
    80010ce0:	883e                	mv	a6,a5
    80010ce2:	4791                	li	a5,4
    80010ce4:	00008717          	auipc	a4,0x8
    80010ce8:	35470713          	addi	a4,a4,852 # 80019038 <SYSCALLS+0x38>
    80010cec:	f8043683          	ld	a3,-128(s0)
    80010cf0:	f8843603          	ld	a2,-120(s0)
    80010cf4:	f9043583          	ld	a1,-112(s0)
    80010cf8:	f9843503          	ld	a0,-104(s0)
    80010cfc:	973ff0ef          	jal	ra,8001066e <_out_rev>
    80010d00:	87aa                	mv	a5,a0
    80010d02:	a169                	j	8001118c <_ftoa+0x542>
    if (value > DBL_MAX)
    80010d04:	f7843707          	fld	fa4,-136(s0)
    80010d08:	00008797          	auipc	a5,0x8
    80010d0c:	58078793          	addi	a5,a5,1408 # 80019288 <pow10.0+0x58>
    80010d10:	239c                	fld	fa5,0(a5)
    80010d12:	a2e797d3          	flt.d	a5,fa5,fa4
    80010d16:	cba9                	beqz	a5,80010d68 <_ftoa+0x11e>
        return _out_rev(out, buffer, idx, maxlen,
                        (flags & FLAGS_PLUS) ? "fni+" : "fni",
    80010d18:	f6c42783          	lw	a5,-148(s0)
    80010d1c:	8b91                	andi	a5,a5,4
    80010d1e:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    80010d20:	c791                	beqz	a5,80010d2c <_ftoa+0xe2>
    80010d22:	00008717          	auipc	a4,0x8
    80010d26:	31e70713          	addi	a4,a4,798 # 80019040 <SYSCALLS+0x40>
    80010d2a:	a029                	j	80010d34 <_ftoa+0xea>
    80010d2c:	00008717          	auipc	a4,0x8
    80010d30:	31c70713          	addi	a4,a4,796 # 80019048 <SYSCALLS+0x48>
                        (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    80010d34:	f6c42783          	lw	a5,-148(s0)
    80010d38:	8b91                	andi	a5,a5,4
    80010d3a:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    80010d3c:	c399                	beqz	a5,80010d42 <_ftoa+0xf8>
    80010d3e:	4791                	li	a5,4
    80010d40:	a011                	j	80010d44 <_ftoa+0xfa>
    80010d42:	478d                	li	a5,3
    80010d44:	f6c42603          	lw	a2,-148(s0)
    80010d48:	f7042683          	lw	a3,-144(s0)
    80010d4c:	88b2                	mv	a7,a2
    80010d4e:	8836                	mv	a6,a3
    80010d50:	f8043683          	ld	a3,-128(s0)
    80010d54:	f8843603          	ld	a2,-120(s0)
    80010d58:	f9043583          	ld	a1,-112(s0)
    80010d5c:	f9843503          	ld	a0,-104(s0)
    80010d60:	90fff0ef          	jal	ra,8001066e <_out_rev>
    80010d64:	87aa                	mv	a5,a0
    80010d66:	a11d                	j	8001118c <_ftoa+0x542>

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which
    // could be 100s of characters overflowing your buffers == bad
    if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    80010d68:	f7843707          	fld	fa4,-136(s0)
    80010d6c:	00008797          	auipc	a5,0x8
    80010d70:	52478793          	addi	a5,a5,1316 # 80019290 <pow10.0+0x60>
    80010d74:	239c                	fld	fa5,0(a5)
    80010d76:	a2e797d3          	flt.d	a5,fa5,fa4
    80010d7a:	eb99                	bnez	a5,80010d90 <_ftoa+0x146>
    80010d7c:	f7843707          	fld	fa4,-136(s0)
    80010d80:	00008797          	auipc	a5,0x8
    80010d84:	51878793          	addi	a5,a5,1304 # 80019298 <pow10.0+0x68>
    80010d88:	239c                	fld	fa5,0(a5)
    80010d8a:	a2f717d3          	flt.d	a5,fa4,fa5
    80010d8e:	c795                	beqz	a5,80010dba <_ftoa+0x170>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    80010d90:	f6c42683          	lw	a3,-148(s0)
    80010d94:	f7042783          	lw	a5,-144(s0)
    80010d98:	f7442703          	lw	a4,-140(s0)
    80010d9c:	8836                	mv	a6,a3
    80010d9e:	f7843507          	fld	fa0,-136(s0)
    80010da2:	f8043683          	ld	a3,-128(s0)
    80010da6:	f8843603          	ld	a2,-120(s0)
    80010daa:	f9043583          	ld	a1,-112(s0)
    80010dae:	f9843503          	ld	a0,-104(s0)
    80010db2:	3e4000ef          	jal	ra,80011196 <_etoa>
    80010db6:	87aa                	mv	a5,a0
    80010db8:	aed1                	j	8001118c <_ftoa+0x542>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
    80010dba:	fe0403a3          	sb	zero,-25(s0)
    if (value < 0) {
    80010dbe:	f7843787          	fld	fa5,-136(s0)
    80010dc2:	f2000753          	fmv.d.x	fa4,zero
    80010dc6:	a2e797d3          	flt.d	a5,fa5,fa4
    80010dca:	cf81                	beqz	a5,80010de2 <_ftoa+0x198>
        negative = true;
    80010dcc:	4785                	li	a5,1
    80010dce:	fef403a3          	sb	a5,-25(s0)
        value    = 0 - value;
    80010dd2:	f2000753          	fmv.d.x	fa4,zero
    80010dd6:	f7843787          	fld	fa5,-136(s0)
    80010dda:	0af777d3          	fsub.d	fa5,fa4,fa5
    80010dde:	f6f43c27          	fsd	fa5,-136(s0)
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
    80010de2:	f6c42783          	lw	a5,-148(s0)
    80010de6:	4007f793          	andi	a5,a5,1024
    80010dea:	2781                	sext.w	a5,a5
    80010dec:	e79d                	bnez	a5,80010e1a <_ftoa+0x1d0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    80010dee:	4799                	li	a5,6
    80010df0:	f6f42a23          	sw	a5,-140(s0)
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    80010df4:	a01d                	j	80010e1a <_ftoa+0x1d0>
        buf[len++] = '0';
    80010df6:	fe843783          	ld	a5,-24(s0)
    80010dfa:	00178713          	addi	a4,a5,1
    80010dfe:	fee43423          	sd	a4,-24(s0)
    80010e02:	ff040713          	addi	a4,s0,-16
    80010e06:	97ba                	add	a5,a5,a4
    80010e08:	03000713          	li	a4,48
    80010e0c:	fae78823          	sb	a4,-80(a5)
        prec--;
    80010e10:	f7442783          	lw	a5,-140(s0)
    80010e14:	37fd                	addiw	a5,a5,-1
    80010e16:	f6f42a23          	sw	a5,-140(s0)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    80010e1a:	fe843703          	ld	a4,-24(s0)
    80010e1e:	47fd                	li	a5,31
    80010e20:	00e7e963          	bltu	a5,a4,80010e32 <_ftoa+0x1e8>
    80010e24:	f7442783          	lw	a5,-140(s0)
    80010e28:	0007871b          	sext.w	a4,a5
    80010e2c:	47a5                	li	a5,9
    80010e2e:	fce7e4e3          	bltu	a5,a4,80010df6 <_ftoa+0x1ac>
    }

    int whole          = (int)value;
    80010e32:	f7843787          	fld	fa5,-136(s0)
    80010e36:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80010e3a:	fef42023          	sw	a5,-32(s0)
    double tmp         = (value - whole) * pow10[prec];
    80010e3e:	fe042783          	lw	a5,-32(s0)
    80010e42:	d20787d3          	fcvt.d.w	fa5,a5
    80010e46:	f7843707          	fld	fa4,-136(s0)
    80010e4a:	0af77753          	fsub.d	fa4,fa4,fa5
    80010e4e:	00008717          	auipc	a4,0x8
    80010e52:	3e270713          	addi	a4,a4,994 # 80019230 <pow10.0>
    80010e56:	f7446783          	lwu	a5,-140(s0)
    80010e5a:	078e                	slli	a5,a5,0x3
    80010e5c:	97ba                	add	a5,a5,a4
    80010e5e:	239c                	fld	fa5,0(a5)
    80010e60:	12f777d3          	fmul.d	fa5,fa4,fa5
    80010e64:	fcf43027          	fsd	fa5,-64(s0)
    unsigned long frac = (unsigned long)tmp;
    80010e68:	fc043787          	fld	fa5,-64(s0)
    80010e6c:	c23797d3          	fcvt.lu.d	a5,fa5,rtz
    80010e70:	fcf43c23          	sd	a5,-40(s0)
    diff               = tmp - frac;
    80010e74:	fd843783          	ld	a5,-40(s0)
    80010e78:	d237f7d3          	fcvt.d.lu	fa5,a5
    80010e7c:	fc043707          	fld	fa4,-64(s0)
    80010e80:	0af777d3          	fsub.d	fa5,fa4,fa5
    80010e84:	fcf43427          	fsd	fa5,-56(s0)

    if (diff > 0.5) {
    80010e88:	fc843707          	fld	fa4,-56(s0)
    80010e8c:	00008797          	auipc	a5,0x8
    80010e90:	41478793          	addi	a5,a5,1044 # 800192a0 <pow10.0+0x70>
    80010e94:	239c                	fld	fa5,0(a5)
    80010e96:	a2e797d3          	flt.d	a5,fa5,fa4
    80010e9a:	cf95                	beqz	a5,80010ed6 <_ftoa+0x28c>
        ++frac;
    80010e9c:	fd843783          	ld	a5,-40(s0)
    80010ea0:	0785                	addi	a5,a5,1
    80010ea2:	fcf43c23          	sd	a5,-40(s0)
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
    80010ea6:	fd843783          	ld	a5,-40(s0)
    80010eaa:	d237f753          	fcvt.d.lu	fa4,a5
    80010eae:	00008717          	auipc	a4,0x8
    80010eb2:	38270713          	addi	a4,a4,898 # 80019230 <pow10.0>
    80010eb6:	f7446783          	lwu	a5,-140(s0)
    80010eba:	078e                	slli	a5,a5,0x3
    80010ebc:	97ba                	add	a5,a5,a4
    80010ebe:	239c                	fld	fa5,0(a5)
    80010ec0:	a2e787d3          	fle.d	a5,fa5,fa4
    80010ec4:	cf9d                	beqz	a5,80010f02 <_ftoa+0x2b8>
            frac = 0;
    80010ec6:	fc043c23          	sd	zero,-40(s0)
            ++whole;
    80010eca:	fe042783          	lw	a5,-32(s0)
    80010ece:	2785                	addiw	a5,a5,1
    80010ed0:	fef42023          	sw	a5,-32(s0)
    80010ed4:	a03d                	j	80010f02 <_ftoa+0x2b8>
        }
    }
    else if (diff < 0.5) {
    80010ed6:	fc843707          	fld	fa4,-56(s0)
    80010eda:	00008797          	auipc	a5,0x8
    80010ede:	3c678793          	addi	a5,a5,966 # 800192a0 <pow10.0+0x70>
    80010ee2:	239c                	fld	fa5,0(a5)
    80010ee4:	a2f717d3          	flt.d	a5,fa4,fa5
    80010ee8:	ef89                	bnez	a5,80010f02 <_ftoa+0x2b8>
    }
    else if ((frac == 0U) || (frac & 1U)) {
    80010eea:	fd843783          	ld	a5,-40(s0)
    80010eee:	c789                	beqz	a5,80010ef8 <_ftoa+0x2ae>
    80010ef0:	fd843783          	ld	a5,-40(s0)
    80010ef4:	8b85                	andi	a5,a5,1
    80010ef6:	c791                	beqz	a5,80010f02 <_ftoa+0x2b8>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
    80010ef8:	fd843783          	ld	a5,-40(s0)
    80010efc:	0785                	addi	a5,a5,1
    80010efe:	fcf43c23          	sd	a5,-40(s0)
    }

    if (prec == 0U) {
    80010f02:	f7442783          	lw	a5,-140(s0)
    80010f06:	2781                	sext.w	a5,a5
    80010f08:	e3bd                	bnez	a5,80010f6e <_ftoa+0x324>
        diff = value - (double)whole;
    80010f0a:	fe042783          	lw	a5,-32(s0)
    80010f0e:	d20787d3          	fcvt.d.w	fa5,a5
    80010f12:	f7843707          	fld	fa4,-136(s0)
    80010f16:	0af777d3          	fsub.d	fa5,fa4,fa5
    80010f1a:	fcf43427          	fsd	fa5,-56(s0)
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    80010f1e:	fc843707          	fld	fa4,-56(s0)
    80010f22:	00008797          	auipc	a5,0x8
    80010f26:	37e78793          	addi	a5,a5,894 # 800192a0 <pow10.0+0x70>
    80010f2a:	239c                	fld	fa5,0(a5)
    80010f2c:	a2f717d3          	flt.d	a5,fa4,fa5
    80010f30:	00f037b3          	snez	a5,a5
    80010f34:	0ff7f793          	andi	a5,a5,255
    80010f38:	0017c793          	xori	a5,a5,1
    80010f3c:	0ff7f793          	andi	a5,a5,255
    80010f40:	eb99                	bnez	a5,80010f56 <_ftoa+0x30c>
    80010f42:	fc843707          	fld	fa4,-56(s0)
    80010f46:	00008797          	auipc	a5,0x8
    80010f4a:	35a78793          	addi	a5,a5,858 # 800192a0 <pow10.0+0x70>
    80010f4e:	239c                	fld	fa5,0(a5)
    80010f50:	a2e797d3          	flt.d	a5,fa5,fa4
    80010f54:	cbf1                	beqz	a5,80011028 <_ftoa+0x3de>
    80010f56:	fe042783          	lw	a5,-32(s0)
    80010f5a:	8b85                	andi	a5,a5,1
    80010f5c:	2781                	sext.w	a5,a5
    80010f5e:	10078863          	beqz	a5,8001106e <_ftoa+0x424>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
    80010f62:	fe042783          	lw	a5,-32(s0)
    80010f66:	2785                	addiw	a5,a5,1
    80010f68:	fef42023          	sw	a5,-32(s0)
    80010f6c:	a209                	j	8001106e <_ftoa+0x424>
        }
    }
    else {
        unsigned int count = prec;
    80010f6e:	f7442783          	lw	a5,-140(s0)
    80010f72:	fcf42a23          	sw	a5,-44(s0)
        // now do fractional part, as an unsigned number
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80010f76:	a0b1                	j	80010fc2 <_ftoa+0x378>
            --count;
    80010f78:	fd442783          	lw	a5,-44(s0)
    80010f7c:	37fd                	addiw	a5,a5,-1
    80010f7e:	fcf42a23          	sw	a5,-44(s0)
            buf[len++] = (char)(48U + (frac % 10U));
    80010f82:	fd843703          	ld	a4,-40(s0)
    80010f86:	47a9                	li	a5,10
    80010f88:	02f777b3          	remu	a5,a4,a5
    80010f8c:	0ff7f713          	andi	a4,a5,255
    80010f90:	fe843783          	ld	a5,-24(s0)
    80010f94:	00178693          	addi	a3,a5,1
    80010f98:	fed43423          	sd	a3,-24(s0)
    80010f9c:	0307071b          	addiw	a4,a4,48
    80010fa0:	0ff77713          	andi	a4,a4,255
    80010fa4:	ff040693          	addi	a3,s0,-16
    80010fa8:	97b6                	add	a5,a5,a3
    80010faa:	fae78823          	sb	a4,-80(a5)
            if (!(frac /= 10U)) {
    80010fae:	fd843703          	ld	a4,-40(s0)
    80010fb2:	47a9                	li	a5,10
    80010fb4:	02f757b3          	divu	a5,a4,a5
    80010fb8:	fcf43c23          	sd	a5,-40(s0)
    80010fbc:	fd843783          	ld	a5,-40(s0)
    80010fc0:	c799                	beqz	a5,80010fce <_ftoa+0x384>
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80010fc2:	fe843703          	ld	a4,-24(s0)
    80010fc6:	47fd                	li	a5,31
    80010fc8:	fae7f8e3          	bgeu	a5,a4,80010f78 <_ftoa+0x32e>
    80010fcc:	a005                	j	80010fec <_ftoa+0x3a2>
                break;
    80010fce:	0001                	nop
            }
        }
        // add extra 0s
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    80010fd0:	a831                	j	80010fec <_ftoa+0x3a2>
            buf[len++] = '0';
    80010fd2:	fe843783          	ld	a5,-24(s0)
    80010fd6:	00178713          	addi	a4,a5,1
    80010fda:	fee43423          	sd	a4,-24(s0)
    80010fde:	ff040713          	addi	a4,s0,-16
    80010fe2:	97ba                	add	a5,a5,a4
    80010fe4:	03000713          	li	a4,48
    80010fe8:	fae78823          	sb	a4,-80(a5)
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    80010fec:	fe843703          	ld	a4,-24(s0)
    80010ff0:	47fd                	li	a5,31
    80010ff2:	00e7e963          	bltu	a5,a4,80011004 <_ftoa+0x3ba>
    80010ff6:	fd442783          	lw	a5,-44(s0)
    80010ffa:	fff7871b          	addiw	a4,a5,-1
    80010ffe:	fce42a23          	sw	a4,-44(s0)
    80011002:	fbe1                	bnez	a5,80010fd2 <_ftoa+0x388>
        }
        if (len < PRINTF_FTOA_BUFFER_SIZE) {
    80011004:	fe843703          	ld	a4,-24(s0)
    80011008:	47fd                	li	a5,31
    8001100a:	06e7e263          	bltu	a5,a4,8001106e <_ftoa+0x424>
            // add decimal
            buf[len++] = '.';
    8001100e:	fe843783          	ld	a5,-24(s0)
    80011012:	00178713          	addi	a4,a5,1
    80011016:	fee43423          	sd	a4,-24(s0)
    8001101a:	ff040713          	addi	a4,s0,-16
    8001101e:	97ba                	add	a5,a5,a4
    80011020:	02e00713          	li	a4,46
    80011024:	fae78823          	sb	a4,-80(a5)
        }
    }

    // do whole part, number is reversed
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80011028:	a099                	j	8001106e <_ftoa+0x424>
        buf[len++] = (char)(48 + (whole % 10));
    8001102a:	fe042703          	lw	a4,-32(s0)
    8001102e:	47a9                	li	a5,10
    80011030:	02f767bb          	remw	a5,a4,a5
    80011034:	2781                	sext.w	a5,a5
    80011036:	0ff7f713          	andi	a4,a5,255
    8001103a:	fe843783          	ld	a5,-24(s0)
    8001103e:	00178693          	addi	a3,a5,1
    80011042:	fed43423          	sd	a3,-24(s0)
    80011046:	0307071b          	addiw	a4,a4,48
    8001104a:	0ff77713          	andi	a4,a4,255
    8001104e:	ff040693          	addi	a3,s0,-16
    80011052:	97b6                	add	a5,a5,a3
    80011054:	fae78823          	sb	a4,-80(a5)
        if (!(whole /= 10)) {
    80011058:	fe042703          	lw	a4,-32(s0)
    8001105c:	47a9                	li	a5,10
    8001105e:	02f747bb          	divw	a5,a4,a5
    80011062:	fef42023          	sw	a5,-32(s0)
    80011066:	fe042783          	lw	a5,-32(s0)
    8001106a:	2781                	sext.w	a5,a5
    8001106c:	c799                	beqz	a5,8001107a <_ftoa+0x430>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    8001106e:	fe843703          	ld	a4,-24(s0)
    80011072:	47fd                	li	a5,31
    80011074:	fae7fbe3          	bgeu	a5,a4,8001102a <_ftoa+0x3e0>
    80011078:	a011                	j	8001107c <_ftoa+0x432>
            break;
    8001107a:	0001                	nop
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    8001107c:	f6c42783          	lw	a5,-148(s0)
    80011080:	8b89                	andi	a5,a5,2
    80011082:	2781                	sext.w	a5,a5
    80011084:	e3b5                	bnez	a5,800110e8 <_ftoa+0x49e>
    80011086:	f6c42783          	lw	a5,-148(s0)
    8001108a:	8b85                	andi	a5,a5,1
    8001108c:	2781                	sext.w	a5,a5
    8001108e:	cfa9                	beqz	a5,800110e8 <_ftoa+0x49e>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    80011090:	f7042783          	lw	a5,-144(s0)
    80011094:	2781                	sext.w	a5,a5
    80011096:	cf95                	beqz	a5,800110d2 <_ftoa+0x488>
    80011098:	fe744783          	lbu	a5,-25(s0)
    8001109c:	0ff7f793          	andi	a5,a5,255
    800110a0:	e791                	bnez	a5,800110ac <_ftoa+0x462>
    800110a2:	f6c42783          	lw	a5,-148(s0)
    800110a6:	8bb1                	andi	a5,a5,12
    800110a8:	2781                	sext.w	a5,a5
    800110aa:	c785                	beqz	a5,800110d2 <_ftoa+0x488>
            width--;
    800110ac:	f7042783          	lw	a5,-144(s0)
    800110b0:	37fd                	addiw	a5,a5,-1
    800110b2:	f6f42823          	sw	a5,-144(s0)
        }
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    800110b6:	a831                	j	800110d2 <_ftoa+0x488>
            buf[len++] = '0';
    800110b8:	fe843783          	ld	a5,-24(s0)
    800110bc:	00178713          	addi	a4,a5,1
    800110c0:	fee43423          	sd	a4,-24(s0)
    800110c4:	ff040713          	addi	a4,s0,-16
    800110c8:	97ba                	add	a5,a5,a4
    800110ca:	03000713          	li	a4,48
    800110ce:	fae78823          	sb	a4,-80(a5)
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    800110d2:	f7046783          	lwu	a5,-144(s0)
    800110d6:	fe843703          	ld	a4,-24(s0)
    800110da:	00f77763          	bgeu	a4,a5,800110e8 <_ftoa+0x49e>
    800110de:	fe843703          	ld	a4,-24(s0)
    800110e2:	47fd                	li	a5,31
    800110e4:	fce7fae3          	bgeu	a5,a4,800110b8 <_ftoa+0x46e>
        }
    }

    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    800110e8:	fe843703          	ld	a4,-24(s0)
    800110ec:	47fd                	li	a5,31
    800110ee:	06e7ea63          	bltu	a5,a4,80011162 <_ftoa+0x518>
        if (negative) {
    800110f2:	fe744783          	lbu	a5,-25(s0)
    800110f6:	0ff7f793          	andi	a5,a5,255
    800110fa:	cf99                	beqz	a5,80011118 <_ftoa+0x4ce>
            buf[len++] = '-';
    800110fc:	fe843783          	ld	a5,-24(s0)
    80011100:	00178713          	addi	a4,a5,1
    80011104:	fee43423          	sd	a4,-24(s0)
    80011108:	ff040713          	addi	a4,s0,-16
    8001110c:	97ba                	add	a5,a5,a4
    8001110e:	02d00713          	li	a4,45
    80011112:	fae78823          	sb	a4,-80(a5)
    80011116:	a0b1                	j	80011162 <_ftoa+0x518>
        }
        else if (flags & FLAGS_PLUS) {
    80011118:	f6c42783          	lw	a5,-148(s0)
    8001111c:	8b91                	andi	a5,a5,4
    8001111e:	2781                	sext.w	a5,a5
    80011120:	cf99                	beqz	a5,8001113e <_ftoa+0x4f4>
            buf[len++] = '+';  // ignore the space if the '+' exists
    80011122:	fe843783          	ld	a5,-24(s0)
    80011126:	00178713          	addi	a4,a5,1
    8001112a:	fee43423          	sd	a4,-24(s0)
    8001112e:	ff040713          	addi	a4,s0,-16
    80011132:	97ba                	add	a5,a5,a4
    80011134:	02b00713          	li	a4,43
    80011138:	fae78823          	sb	a4,-80(a5)
    8001113c:	a01d                	j	80011162 <_ftoa+0x518>
        }
        else if (flags & FLAGS_SPACE) {
    8001113e:	f6c42783          	lw	a5,-148(s0)
    80011142:	8ba1                	andi	a5,a5,8
    80011144:	2781                	sext.w	a5,a5
    80011146:	cf91                	beqz	a5,80011162 <_ftoa+0x518>
            buf[len++] = ' ';
    80011148:	fe843783          	ld	a5,-24(s0)
    8001114c:	00178713          	addi	a4,a5,1
    80011150:	fee43423          	sd	a4,-24(s0)
    80011154:	ff040713          	addi	a4,s0,-16
    80011158:	97ba                	add	a5,a5,a4
    8001115a:	02000713          	li	a4,32
    8001115e:	fae78823          	sb	a4,-80(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    80011162:	f6c42683          	lw	a3,-148(s0)
    80011166:	f7042783          	lw	a5,-144(s0)
    8001116a:	fa040713          	addi	a4,s0,-96
    8001116e:	88b6                	mv	a7,a3
    80011170:	883e                	mv	a6,a5
    80011172:	fe843783          	ld	a5,-24(s0)
    80011176:	f8043683          	ld	a3,-128(s0)
    8001117a:	f8843603          	ld	a2,-120(s0)
    8001117e:	f9043583          	ld	a1,-112(s0)
    80011182:	f9843503          	ld	a0,-104(s0)
    80011186:	ce8ff0ef          	jal	ra,8001066e <_out_rev>
    8001118a:	87aa                	mv	a5,a0
}
    8001118c:	853e                	mv	a0,a5
    8001118e:	60ea                	ld	ra,152(sp)
    80011190:	644a                	ld	s0,144(sp)
    80011192:	610d                	addi	sp,sp,160
    80011194:	8082                	ret

0000000080011196 <_etoa>:
// internal ftoa variant for exponential floating-point type, contributed by
// Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    80011196:	7135                	addi	sp,sp,-160
    80011198:	ed06                	sd	ra,152(sp)
    8001119a:	e922                	sd	s0,144(sp)
    8001119c:	1100                	addi	s0,sp,160
    8001119e:	faa43423          	sd	a0,-88(s0)
    800111a2:	fab43023          	sd	a1,-96(s0)
    800111a6:	f8c43c23          	sd	a2,-104(s0)
    800111aa:	f8d43823          	sd	a3,-112(s0)
    800111ae:	f8a43427          	fsd	fa0,-120(s0)
    800111b2:	863a                	mv	a2,a4
    800111b4:	86be                	mv	a3,a5
    800111b6:	8742                	mv	a4,a6
    800111b8:	87b2                	mv	a5,a2
    800111ba:	f8f42223          	sw	a5,-124(s0)
    800111be:	87b6                	mv	a5,a3
    800111c0:	f8f42023          	sw	a5,-128(s0)
    800111c4:	87ba                	mv	a5,a4
    800111c6:	f6f42e23          	sw	a5,-132(s0)
    // check for NaN and special values
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    800111ca:	f8843707          	fld	fa4,-120(s0)
    800111ce:	f8843787          	fld	fa5,-120(s0)
    800111d2:	a2f727d3          	feq.d	a5,fa4,fa5
    800111d6:	c78d                	beqz	a5,80011200 <_etoa+0x6a>
    800111d8:	f8843707          	fld	fa4,-120(s0)
    800111dc:	00008797          	auipc	a5,0x8
    800111e0:	0ac78793          	addi	a5,a5,172 # 80019288 <pow10.0+0x58>
    800111e4:	239c                	fld	fa5,0(a5)
    800111e6:	a2e797d3          	flt.d	a5,fa5,fa4
    800111ea:	eb99                	bnez	a5,80011200 <_etoa+0x6a>
    800111ec:	f8843707          	fld	fa4,-120(s0)
    800111f0:	00008797          	auipc	a5,0x8
    800111f4:	09078793          	addi	a5,a5,144 # 80019280 <pow10.0+0x50>
    800111f8:	239c                	fld	fa5,0(a5)
    800111fa:	a2f717d3          	flt.d	a5,fa4,fa5
    800111fe:	c795                	beqz	a5,8001122a <_etoa+0x94>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    80011200:	f7c42683          	lw	a3,-132(s0)
    80011204:	f8042783          	lw	a5,-128(s0)
    80011208:	f8442703          	lw	a4,-124(s0)
    8001120c:	8836                	mv	a6,a3
    8001120e:	f8843507          	fld	fa0,-120(s0)
    80011212:	f9043683          	ld	a3,-112(s0)
    80011216:	f9843603          	ld	a2,-104(s0)
    8001121a:	fa043583          	ld	a1,-96(s0)
    8001121e:	fa843503          	ld	a0,-88(s0)
    80011222:	a29ff0ef          	jal	ra,80010c4a <_ftoa>
    80011226:	87aa                	mv	a5,a0
    80011228:	a11d                	j	8001164e <_etoa+0x4b8>
    }

    // determine the sign
    const bool negative = value < 0;
    8001122a:	f8843787          	fld	fa5,-120(s0)
    8001122e:	f2000753          	fmv.d.x	fa4,zero
    80011232:	a2e797d3          	flt.d	a5,fa5,fa4
    80011236:	00f037b3          	snez	a5,a5
    8001123a:	fef401a3          	sb	a5,-29(s0)
    if (negative) {
    8001123e:	fe344783          	lbu	a5,-29(s0)
    80011242:	0ff7f793          	andi	a5,a5,255
    80011246:	c799                	beqz	a5,80011254 <_etoa+0xbe>
        value = -value;
    80011248:	f8843787          	fld	fa5,-120(s0)
    8001124c:	22f797d3          	fneg.d	fa5,fa5
    80011250:	f8f43427          	fsd	fa5,-120(s0)
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
    80011254:	f7c42783          	lw	a5,-132(s0)
    80011258:	4007f793          	andi	a5,a5,1024
    8001125c:	2781                	sext.w	a5,a5
    8001125e:	e781                	bnez	a5,80011266 <_etoa+0xd0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    80011260:	4799                	li	a5,6
    80011262:	f8f42223          	sw	a5,-124(s0)
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F   = value;
    80011266:	f8843787          	fld	fa5,-120(s0)
    8001126a:	faf43c27          	fsd	fa5,-72(s0)
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;  // effectively log2
    8001126e:	fb843783          	ld	a5,-72(s0)
    80011272:	93d1                	srli	a5,a5,0x34
    80011274:	2781                	sext.w	a5,a5
    80011276:	7ff7f793          	andi	a5,a5,2047
    8001127a:	2781                	sext.w	a5,a5
    8001127c:	c017879b          	addiw	a5,a5,-1023
    80011280:	fcf42e23          	sw	a5,-36(s0)
    conv.U   = (conv.U & ((1ULL << 52U) - 1U)) |
    80011284:	fb843703          	ld	a4,-72(s0)
    80011288:	57fd                	li	a5,-1
    8001128a:	83b1                	srli	a5,a5,0xc
    8001128c:	8f7d                	and	a4,a4,a5
    8001128e:	3ff00793          	li	a5,1023
    80011292:	17d2                	slli	a5,a5,0x34
    80011294:	8fd9                	or	a5,a5,a4
    80011296:	faf43c23          	sd	a5,-72(s0)
             (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    // now approximate log10 from the log2 integer part and an expansion of ln
    // around 1.5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    8001129a:	fdc42783          	lw	a5,-36(s0)
    8001129e:	d2078753          	fcvt.d.w	fa4,a5
    800112a2:	00008797          	auipc	a5,0x8
    800112a6:	00678793          	addi	a5,a5,6 # 800192a8 <pow10.0+0x78>
    800112aa:	239c                	fld	fa5,0(a5)
    800112ac:	12f77753          	fmul.d	fa4,fa4,fa5
    800112b0:	00008797          	auipc	a5,0x8
    800112b4:	00078793          	mv	a5,a5
    800112b8:	239c                	fld	fa5,0(a5)
    800112ba:	02f77753          	fadd.d	fa4,fa4,fa5
                       (conv.F - 1.5) * 0.289529654602168);
    800112be:	fb843687          	fld	fa3,-72(s0)
    800112c2:	00008797          	auipc	a5,0x8
    800112c6:	ff678793          	addi	a5,a5,-10 # 800192b8 <pow10.0+0x88>
    800112ca:	239c                	fld	fa5,0(a5)
    800112cc:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    800112d0:	00008797          	auipc	a5,0x8
    800112d4:	ff078793          	addi	a5,a5,-16 # 800192c0 <pow10.0+0x90>
    800112d8:	239c                	fld	fa5,0(a5)
    800112da:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    800112de:	02f777d3          	fadd.d	fa5,fa4,fa5
    800112e2:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    800112e6:	fef42623          	sw	a5,-20(s0)
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2            = (int)(expval * 3.321928094887362 + 0.5);
    800112ea:	fec42783          	lw	a5,-20(s0)
    800112ee:	d2078753          	fcvt.d.w	fa4,a5
    800112f2:	00008797          	auipc	a5,0x8
    800112f6:	fd678793          	addi	a5,a5,-42 # 800192c8 <pow10.0+0x98>
    800112fa:	239c                	fld	fa5,0(a5)
    800112fc:	12f77753          	fmul.d	fa4,fa4,fa5
    80011300:	00008797          	auipc	a5,0x8
    80011304:	fa078793          	addi	a5,a5,-96 # 800192a0 <pow10.0+0x70>
    80011308:	239c                	fld	fa5,0(a5)
    8001130a:	02f777d3          	fadd.d	fa5,fa4,fa5
    8001130e:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80011312:	fcf42e23          	sw	a5,-36(s0)
    const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    80011316:	fec42783          	lw	a5,-20(s0)
    8001131a:	d2078753          	fcvt.d.w	fa4,a5
    8001131e:	00008797          	auipc	a5,0x8
    80011322:	fb278793          	addi	a5,a5,-78 # 800192d0 <pow10.0+0xa0>
    80011326:	239c                	fld	fa5,0(a5)
    80011328:	12f77753          	fmul.d	fa4,fa4,fa5
    8001132c:	fdc42783          	lw	a5,-36(s0)
    80011330:	d20786d3          	fcvt.d.w	fa3,a5
    80011334:	00008797          	auipc	a5,0x8
    80011338:	fa478793          	addi	a5,a5,-92 # 800192d8 <pow10.0+0xa8>
    8001133c:	239c                	fld	fa5,0(a5)
    8001133e:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    80011342:	0af777d3          	fsub.d	fa5,fa4,fa5
    80011346:	fcf43827          	fsd	fa5,-48(s0)
    const double z2 = z * z;
    8001134a:	fd043787          	fld	fa5,-48(s0)
    8001134e:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    80011352:	fcf43427          	fsd	fa5,-56(s0)
    conv.U          = (uint64_t)(exp2 + 1023) << 52U;
    80011356:	fdc42783          	lw	a5,-36(s0)
    8001135a:	3ff7879b          	addiw	a5,a5,1023
    8001135e:	2781                	sext.w	a5,a5
    80011360:	17d2                	slli	a5,a5,0x34
    80011362:	faf43c23          	sd	a5,-72(s0)
    // compute exp(z) using continued fractions, see
    // https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    80011366:	fb843707          	fld	fa4,-72(s0)
    8001136a:	fd043787          	fld	fa5,-48(s0)
    8001136e:	02f7f6d3          	fadd.d	fa3,fa5,fa5
    80011372:	00008797          	auipc	a5,0x8
    80011376:	f6e78793          	addi	a5,a5,-146 # 800192e0 <pow10.0+0xb0>
    8001137a:	2390                	fld	fa2,0(a5)
    8001137c:	fd043787          	fld	fa5,-48(s0)
    80011380:	0af67653          	fsub.d	fa2,fa2,fa5
    80011384:	fc843587          	fld	fa1,-56(s0)
    80011388:	00008797          	auipc	a5,0x8
    8001138c:	f6078793          	addi	a5,a5,-160 # 800192e8 <pow10.0+0xb8>
    80011390:	239c                	fld	fa5,0(a5)
    80011392:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    80011396:	00008797          	auipc	a5,0x8
    8001139a:	f5a78793          	addi	a5,a5,-166 # 800192f0 <pow10.0+0xc0>
    8001139e:	239c                	fld	fa5,0(a5)
    800113a0:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    800113a4:	fc843587          	fld	fa1,-56(s0)
    800113a8:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    800113ac:	00008797          	auipc	a5,0x8
    800113b0:	f4c78793          	addi	a5,a5,-180 # 800192f8 <pow10.0+0xc8>
    800113b4:	239c                	fld	fa5,0(a5)
    800113b6:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    800113ba:	fc843587          	fld	fa1,-56(s0)
    800113be:	1af5f7d3          	fdiv.d	fa5,fa1,fa5
    800113c2:	02f677d3          	fadd.d	fa5,fa2,fa5
    800113c6:	1af6f6d3          	fdiv.d	fa3,fa3,fa5
    800113ca:	00008797          	auipc	a5,0x8
    800113ce:	f3678793          	addi	a5,a5,-202 # 80019300 <pow10.0+0xd0>
    800113d2:	239c                	fld	fa5,0(a5)
    800113d4:	02f6f7d3          	fadd.d	fa5,fa3,fa5
    800113d8:	12f777d3          	fmul.d	fa5,fa4,fa5
    800113dc:	faf43c27          	fsd	fa5,-72(s0)
    // correct for rounding errors
    if (value < conv.F) {
    800113e0:	fb843787          	fld	fa5,-72(s0)
    800113e4:	f8843707          	fld	fa4,-120(s0)
    800113e8:	a2f717d3          	flt.d	a5,fa4,fa5
    800113ec:	c38d                	beqz	a5,8001140e <_etoa+0x278>
        expval--;
    800113ee:	fec42783          	lw	a5,-20(s0)
    800113f2:	37fd                	addiw	a5,a5,-1
    800113f4:	fef42623          	sw	a5,-20(s0)
        conv.F /= 10;
    800113f8:	fb843707          	fld	fa4,-72(s0)
    800113fc:	00008797          	auipc	a5,0x8
    80011400:	ef478793          	addi	a5,a5,-268 # 800192f0 <pow10.0+0xc0>
    80011404:	239c                	fld	fa5,0(a5)
    80011406:	1af777d3          	fdiv.d	fa5,fa4,fa5
    8001140a:	faf43c27          	fsd	fa5,-72(s0)
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside
    // 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    8001140e:	fec42783          	lw	a5,-20(s0)
    80011412:	0007871b          	sext.w	a4,a5
    80011416:	06300793          	li	a5,99
    8001141a:	00e7cc63          	blt	a5,a4,80011432 <_etoa+0x29c>
    8001141e:	fec42783          	lw	a5,-20(s0)
    80011422:	0007871b          	sext.w	a4,a5
    80011426:	f9d00793          	li	a5,-99
    8001142a:	00f74463          	blt	a4,a5,80011432 <_etoa+0x29c>
    8001142e:	4791                	li	a5,4
    80011430:	a011                	j	80011434 <_etoa+0x29e>
    80011432:	4795                	li	a5,5
    80011434:	fef42423          	sw	a5,-24(s0)

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
    80011438:	f7c42703          	lw	a4,-132(s0)
    8001143c:	6785                	lui	a5,0x1
    8001143e:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    80011442:	8ff9                	and	a5,a5,a4
    80011444:	2781                	sext.w	a5,a5
    80011446:	c7c1                	beqz	a5,800114ce <_etoa+0x338>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
    80011448:	f8843707          	fld	fa4,-120(s0)
    8001144c:	00008797          	auipc	a5,0x8
    80011450:	ebc78793          	addi	a5,a5,-324 # 80019308 <pow10.0+0xd8>
    80011454:	239c                	fld	fa5,0(a5)
    80011456:	a2e787d3          	fle.d	a5,fa5,fa4
    8001145a:	cbb9                	beqz	a5,800114b0 <_etoa+0x31a>
    8001145c:	f8843707          	fld	fa4,-120(s0)
    80011460:	00008797          	auipc	a5,0x8
    80011464:	eb078793          	addi	a5,a5,-336 # 80019310 <pow10.0+0xe0>
    80011468:	239c                	fld	fa5,0(a5)
    8001146a:	a2f717d3          	flt.d	a5,fa4,fa5
    8001146e:	c3a9                	beqz	a5,800114b0 <_etoa+0x31a>
            if ((int)prec > expval) {
    80011470:	f8442703          	lw	a4,-124(s0)
    80011474:	fec42783          	lw	a5,-20(s0)
    80011478:	2781                	sext.w	a5,a5
    8001147a:	00e7de63          	bge	a5,a4,80011496 <_etoa+0x300>
                prec = (unsigned)((int)prec - expval - 1);
    8001147e:	f8442703          	lw	a4,-124(s0)
    80011482:	fec42783          	lw	a5,-20(s0)
    80011486:	40f707bb          	subw	a5,a4,a5
    8001148a:	2781                	sext.w	a5,a5
    8001148c:	37fd                	addiw	a5,a5,-1
    8001148e:	2781                	sext.w	a5,a5
    80011490:	f8f42223          	sw	a5,-124(s0)
    80011494:	a019                	j	8001149a <_etoa+0x304>
            }
            else {
                prec = 0;
    80011496:	f8042223          	sw	zero,-124(s0)
            }
            flags |= FLAGS_PRECISION;  // make sure _ftoa respects precision
    8001149a:	f7c42783          	lw	a5,-132(s0)
    8001149e:	4007e793          	ori	a5,a5,1024
    800114a2:	f6f42e23          	sw	a5,-132(s0)
            // no characters in exponent
            minwidth = 0U;
    800114a6:	fe042423          	sw	zero,-24(s0)
            expval   = 0;
    800114aa:	fe042623          	sw	zero,-20(s0)
    800114ae:	a005                	j	800114ce <_etoa+0x338>
        }
        else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    800114b0:	f8442783          	lw	a5,-124(s0)
    800114b4:	2781                	sext.w	a5,a5
    800114b6:	cf81                	beqz	a5,800114ce <_etoa+0x338>
    800114b8:	f7c42783          	lw	a5,-132(s0)
    800114bc:	4007f793          	andi	a5,a5,1024
    800114c0:	2781                	sext.w	a5,a5
    800114c2:	c791                	beqz	a5,800114ce <_etoa+0x338>
                --prec;
    800114c4:	f8442783          	lw	a5,-124(s0)
    800114c8:	37fd                	addiw	a5,a5,-1
    800114ca:	f8f42223          	sw	a5,-124(s0)
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
    800114ce:	f8042783          	lw	a5,-128(s0)
    800114d2:	fef42223          	sw	a5,-28(s0)
    if (width > minwidth) {
    800114d6:	f8042703          	lw	a4,-128(s0)
    800114da:	fe842783          	lw	a5,-24(s0)
    800114de:	2701                	sext.w	a4,a4
    800114e0:	2781                	sext.w	a5,a5
    800114e2:	00e7fb63          	bgeu	a5,a4,800114f8 <_etoa+0x362>
        // we didn't fall-back so subtract the characters required for the
        // exponent
        fwidth -= minwidth;
    800114e6:	fe442703          	lw	a4,-28(s0)
    800114ea:	fe842783          	lw	a5,-24(s0)
    800114ee:	40f707bb          	subw	a5,a4,a5
    800114f2:	fef42223          	sw	a5,-28(s0)
    800114f6:	a019                	j	800114fc <_etoa+0x366>
    }
    else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
    800114f8:	fe042223          	sw	zero,-28(s0)
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
    800114fc:	f7c42783          	lw	a5,-132(s0)
    80011500:	8b89                	andi	a5,a5,2
    80011502:	2781                	sext.w	a5,a5
    80011504:	c799                	beqz	a5,80011512 <_etoa+0x37c>
    80011506:	fe842783          	lw	a5,-24(s0)
    8001150a:	2781                	sext.w	a5,a5
    8001150c:	c399                	beqz	a5,80011512 <_etoa+0x37c>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
    8001150e:	fe042223          	sw	zero,-28(s0)
    }

    // rescale the float value
    if (expval) {
    80011512:	fec42783          	lw	a5,-20(s0)
    80011516:	2781                	sext.w	a5,a5
    80011518:	cb89                	beqz	a5,8001152a <_etoa+0x394>
        value /= conv.F;
    8001151a:	fb843787          	fld	fa5,-72(s0)
    8001151e:	f8843707          	fld	fa4,-120(s0)
    80011522:	1af777d3          	fdiv.d	fa5,fa4,fa5
    80011526:	f8f43427          	fsd	fa5,-120(s0)
    }

    // output the floating part
    const size_t start_idx = idx;
    8001152a:	f9843783          	ld	a5,-104(s0)
    8001152e:	fcf43023          	sd	a5,-64(s0)
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec,
    80011532:	fe344783          	lbu	a5,-29(s0)
    80011536:	0ff7f793          	andi	a5,a5,255
    8001153a:	c791                	beqz	a5,80011546 <_etoa+0x3b0>
    8001153c:	f8843787          	fld	fa5,-120(s0)
    80011540:	22f797d3          	fneg.d	fa5,fa5
    80011544:	a019                	j	8001154a <_etoa+0x3b4>
    80011546:	f8843787          	fld	fa5,-120(s0)
    8001154a:	f7c42703          	lw	a4,-132(s0)
    8001154e:	77fd                	lui	a5,0xfffff
    80011550:	7ff78793          	addi	a5,a5,2047 # fffffffffffff7ff <_heap_end+0xffffffff77fef7ff>
    80011554:	8ff9                	and	a5,a5,a4
    80011556:	0007869b          	sext.w	a3,a5
    8001155a:	fe442783          	lw	a5,-28(s0)
    8001155e:	f8442703          	lw	a4,-124(s0)
    80011562:	8836                	mv	a6,a3
    80011564:	22f78553          	fmv.d	fa0,fa5
    80011568:	f9043683          	ld	a3,-112(s0)
    8001156c:	f9843603          	ld	a2,-104(s0)
    80011570:	fa043583          	ld	a1,-96(s0)
    80011574:	fa843503          	ld	a0,-88(s0)
    80011578:	ed2ff0ef          	jal	ra,80010c4a <_ftoa>
    8001157c:	f8a43c23          	sd	a0,-104(s0)
                fwidth, flags & ~FLAGS_ADAPT_EXP);

    // output the exponent part
    if (minwidth) {
    80011580:	fe842783          	lw	a5,-24(s0)
    80011584:	2781                	sext.w	a5,a5
    80011586:	c3f1                	beqz	a5,8001164a <_etoa+0x4b4>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    80011588:	f7c42783          	lw	a5,-132(s0)
    8001158c:	0207f793          	andi	a5,a5,32
    80011590:	2781                	sext.w	a5,a5
    80011592:	c781                	beqz	a5,8001159a <_etoa+0x404>
    80011594:	04500793          	li	a5,69
    80011598:	a019                	j	8001159e <_etoa+0x408>
    8001159a:	06500793          	li	a5,101
    8001159e:	f9843703          	ld	a4,-104(s0)
    800115a2:	00170693          	addi	a3,a4,1
    800115a6:	f8d43c23          	sd	a3,-104(s0)
    800115aa:	fa843803          	ld	a6,-88(s0)
    800115ae:	f9043683          	ld	a3,-112(s0)
    800115b2:	863a                	mv	a2,a4
    800115b4:	fa043583          	ld	a1,-96(s0)
    800115b8:	853e                	mv	a0,a5
    800115ba:	9802                	jalr	a6
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen,
                         (expval < 0) ? -expval : expval, expval < 0, 10, 0,
    800115bc:	fec42783          	lw	a5,-20(s0)
    800115c0:	41f7d79b          	sraiw	a5,a5,0x1f
    800115c4:	fec42703          	lw	a4,-20(s0)
    800115c8:	8f3d                	xor	a4,a4,a5
    800115ca:	40f707bb          	subw	a5,a4,a5
    800115ce:	2781                	sext.w	a5,a5
        idx = _ntoa_long(out, buffer, idx, maxlen,
    800115d0:	863e                	mv	a2,a5
    800115d2:	fec42783          	lw	a5,-20(s0)
    800115d6:	01f7d79b          	srliw	a5,a5,0x1f
    800115da:	0ff7f693          	andi	a3,a5,255
    800115de:	fe842783          	lw	a5,-24(s0)
    800115e2:	37fd                	addiw	a5,a5,-1
    800115e4:	2781                	sext.w	a5,a5
    800115e6:	4715                	li	a4,5
    800115e8:	e43a                	sd	a4,8(sp)
    800115ea:	e03e                	sd	a5,0(sp)
    800115ec:	4881                	li	a7,0
    800115ee:	4829                	li	a6,10
    800115f0:	87b6                	mv	a5,a3
    800115f2:	8732                	mv	a4,a2
    800115f4:	f9043683          	ld	a3,-112(s0)
    800115f8:	f9843603          	ld	a2,-104(s0)
    800115fc:	fa043583          	ld	a1,-96(s0)
    80011600:	fa843503          	ld	a0,-88(s0)
    80011604:	c16ff0ef          	jal	ra,80010a1a <_ntoa_long>
    80011608:	f8a43c23          	sd	a0,-104(s0)
                         minwidth - 1, FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
    8001160c:	f7c42783          	lw	a5,-132(s0)
    80011610:	8b89                	andi	a5,a5,2
    80011612:	2781                	sext.w	a5,a5
    80011614:	cb9d                	beqz	a5,8001164a <_etoa+0x4b4>
            while (idx - start_idx < width)
    80011616:	a00d                	j	80011638 <_etoa+0x4a2>
                out(' ', buffer, idx++, maxlen);
    80011618:	f9843783          	ld	a5,-104(s0)
    8001161c:	00178713          	addi	a4,a5,1
    80011620:	f8e43c23          	sd	a4,-104(s0)
    80011624:	fa843703          	ld	a4,-88(s0)
    80011628:	f9043683          	ld	a3,-112(s0)
    8001162c:	863e                	mv	a2,a5
    8001162e:	fa043583          	ld	a1,-96(s0)
    80011632:	02000513          	li	a0,32
    80011636:	9702                	jalr	a4
            while (idx - start_idx < width)
    80011638:	f9843703          	ld	a4,-104(s0)
    8001163c:	fc043783          	ld	a5,-64(s0)
    80011640:	8f1d                	sub	a4,a4,a5
    80011642:	f8046783          	lwu	a5,-128(s0)
    80011646:	fcf769e3          	bltu	a4,a5,80011618 <_etoa+0x482>
        }
    }
    return idx;
    8001164a:	f9843783          	ld	a5,-104(s0)
}
    8001164e:	853e                	mv	a0,a5
    80011650:	60ea                	ld	ra,152(sp)
    80011652:	644a                	ld	s0,144(sp)
    80011654:	610d                	addi	sp,sp,160
    80011656:	8082                	ret

0000000080011658 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen,
                      const char *format, va_list va)
{
    80011658:	7135                	addi	sp,sp,-160
    8001165a:	ed06                	sd	ra,152(sp)
    8001165c:	e922                	sd	s0,144(sp)
    8001165e:	1100                	addi	s0,sp,160
    80011660:	f8a43c23          	sd	a0,-104(s0)
    80011664:	f8b43823          	sd	a1,-112(s0)
    80011668:	f8c43423          	sd	a2,-120(s0)
    8001166c:	f8d43023          	sd	a3,-128(s0)
    80011670:	f6e43c23          	sd	a4,-136(s0)
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
    80011674:	fc043c23          	sd	zero,-40(s0)

    if (!buffer) {
    80011678:	f9043783          	ld	a5,-112(s0)
    8001167c:	380792e3          	bnez	a5,80012200 <_vsnprintf+0xba8>
        // use null output function
        out = _out_null;
    80011680:	fffff797          	auipc	a5,0xfffff
    80011684:	e5878793          	addi	a5,a5,-424 # 800104d8 <_out_null>
    80011688:	f8f43c23          	sd	a5,-104(s0)
    }

    while (*format) {
    8001168c:	3750006f          	j	80012200 <_vsnprintf+0xba8>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
    80011690:	f8043783          	ld	a5,-128(s0)
    80011694:	0007c783          	lbu	a5,0(a5)
    80011698:	873e                	mv	a4,a5
    8001169a:	02500793          	li	a5,37
    8001169e:	02f70b63          	beq	a4,a5,800116d4 <_vsnprintf+0x7c>
            // no
            out(*format, buffer, idx++, maxlen);
    800116a2:	f8043783          	ld	a5,-128(s0)
    800116a6:	0007c503          	lbu	a0,0(a5)
    800116aa:	fd843783          	ld	a5,-40(s0)
    800116ae:	00178713          	addi	a4,a5,1
    800116b2:	fce43c23          	sd	a4,-40(s0)
    800116b6:	f9843703          	ld	a4,-104(s0)
    800116ba:	f8843683          	ld	a3,-120(s0)
    800116be:	863e                	mv	a2,a5
    800116c0:	f9043583          	ld	a1,-112(s0)
    800116c4:	9702                	jalr	a4
            format++;
    800116c6:	f8043783          	ld	a5,-128(s0)
    800116ca:	0785                	addi	a5,a5,1
    800116cc:	f8f43023          	sd	a5,-128(s0)
            continue;
    800116d0:	3310006f          	j	80012200 <_vsnprintf+0xba8>
        }
        else {
            // yes, evaluate it
            format++;
    800116d4:	f8043783          	ld	a5,-128(s0)
    800116d8:	0785                	addi	a5,a5,1
    800116da:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate flags
        flags = 0U;
    800116de:	fe042623          	sw	zero,-20(s0)
        do {
            switch (*format) {
    800116e2:	f8043783          	ld	a5,-128(s0)
    800116e6:	0007c783          	lbu	a5,0(a5)
    800116ea:	2781                	sext.w	a5,a5
    800116ec:	fe07869b          	addiw	a3,a5,-32
    800116f0:	0006871b          	sext.w	a4,a3
    800116f4:	47c1                	li	a5,16
    800116f6:	0ce7e063          	bltu	a5,a4,800117b6 <_vsnprintf+0x15e>
    800116fa:	02069793          	slli	a5,a3,0x20
    800116fe:	9381                	srli	a5,a5,0x20
    80011700:	00279713          	slli	a4,a5,0x2
    80011704:	00008797          	auipc	a5,0x8
    80011708:	94878793          	addi	a5,a5,-1720 # 8001904c <SYSCALLS+0x4c>
    8001170c:	97ba                	add	a5,a5,a4
    8001170e:	439c                	lw	a5,0(a5)
    80011710:	0007871b          	sext.w	a4,a5
    80011714:	00008797          	auipc	a5,0x8
    80011718:	93878793          	addi	a5,a5,-1736 # 8001904c <SYSCALLS+0x4c>
    8001171c:	97ba                	add	a5,a5,a4
    8001171e:	8782                	jr	a5
                case '0':
                    flags |= FLAGS_ZEROPAD;
    80011720:	fec42783          	lw	a5,-20(s0)
    80011724:	0017e793          	ori	a5,a5,1
    80011728:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001172c:	f8043783          	ld	a5,-128(s0)
    80011730:	0785                	addi	a5,a5,1
    80011732:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011736:	4785                	li	a5,1
    80011738:	fef42023          	sw	a5,-32(s0)
                    break;
    8001173c:	a041                	j	800117bc <_vsnprintf+0x164>
                case '-':
                    flags |= FLAGS_LEFT;
    8001173e:	fec42783          	lw	a5,-20(s0)
    80011742:	0027e793          	ori	a5,a5,2
    80011746:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001174a:	f8043783          	ld	a5,-128(s0)
    8001174e:	0785                	addi	a5,a5,1
    80011750:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011754:	4785                	li	a5,1
    80011756:	fef42023          	sw	a5,-32(s0)
                    break;
    8001175a:	a08d                	j	800117bc <_vsnprintf+0x164>
                case '+':
                    flags |= FLAGS_PLUS;
    8001175c:	fec42783          	lw	a5,-20(s0)
    80011760:	0047e793          	ori	a5,a5,4
    80011764:	fef42623          	sw	a5,-20(s0)
                    format++;
    80011768:	f8043783          	ld	a5,-128(s0)
    8001176c:	0785                	addi	a5,a5,1
    8001176e:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011772:	4785                	li	a5,1
    80011774:	fef42023          	sw	a5,-32(s0)
                    break;
    80011778:	a091                	j	800117bc <_vsnprintf+0x164>
                case ' ':
                    flags |= FLAGS_SPACE;
    8001177a:	fec42783          	lw	a5,-20(s0)
    8001177e:	0087e793          	ori	a5,a5,8
    80011782:	fef42623          	sw	a5,-20(s0)
                    format++;
    80011786:	f8043783          	ld	a5,-128(s0)
    8001178a:	0785                	addi	a5,a5,1
    8001178c:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011790:	4785                	li	a5,1
    80011792:	fef42023          	sw	a5,-32(s0)
                    break;
    80011796:	a01d                	j	800117bc <_vsnprintf+0x164>
                case '#':
                    flags |= FLAGS_HASH;
    80011798:	fec42783          	lw	a5,-20(s0)
    8001179c:	0107e793          	ori	a5,a5,16
    800117a0:	fef42623          	sw	a5,-20(s0)
                    format++;
    800117a4:	f8043783          	ld	a5,-128(s0)
    800117a8:	0785                	addi	a5,a5,1
    800117aa:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    800117ae:	4785                	li	a5,1
    800117b0:	fef42023          	sw	a5,-32(s0)
                    break;
    800117b4:	a021                	j	800117bc <_vsnprintf+0x164>
                default:
                    n = 0U;
    800117b6:	fe042023          	sw	zero,-32(s0)
                    break;
    800117ba:	0001                	nop
            }
        } while (n);
    800117bc:	fe042783          	lw	a5,-32(s0)
    800117c0:	2781                	sext.w	a5,a5
    800117c2:	f385                	bnez	a5,800116e2 <_vsnprintf+0x8a>

        // evaluate width field
        width = 0U;
    800117c4:	fe042423          	sw	zero,-24(s0)
        if (_is_digit(*format)) {
    800117c8:	f8043783          	ld	a5,-128(s0)
    800117cc:	0007c783          	lbu	a5,0(a5)
    800117d0:	853e                	mv	a0,a5
    800117d2:	df3fe0ef          	jal	ra,800105c4 <_is_digit>
    800117d6:	87aa                	mv	a5,a0
    800117d8:	cb91                	beqz	a5,800117ec <_vsnprintf+0x194>
            width = _atoi(&format);
    800117da:	f8040793          	addi	a5,s0,-128
    800117de:	853e                	mv	a0,a5
    800117e0:	e25fe0ef          	jal	ra,80010604 <_atoi>
    800117e4:	87aa                	mv	a5,a0
    800117e6:	fef42423          	sw	a5,-24(s0)
    800117ea:	a8b9                	j	80011848 <_vsnprintf+0x1f0>
        }
        else if (*format == '*') {
    800117ec:	f8043783          	ld	a5,-128(s0)
    800117f0:	0007c783          	lbu	a5,0(a5)
    800117f4:	873e                	mv	a4,a5
    800117f6:	02a00793          	li	a5,42
    800117fa:	04f71763          	bne	a4,a5,80011848 <_vsnprintf+0x1f0>
            const int w = va_arg(va, int);
    800117fe:	f7843783          	ld	a5,-136(s0)
    80011802:	00878713          	addi	a4,a5,8
    80011806:	f6e43c23          	sd	a4,-136(s0)
    8001180a:	439c                	lw	a5,0(a5)
    8001180c:	fcf42023          	sw	a5,-64(s0)
            if (w < 0) {
    80011810:	fc042783          	lw	a5,-64(s0)
    80011814:	2781                	sext.w	a5,a5
    80011816:	0207d063          	bgez	a5,80011836 <_vsnprintf+0x1de>
                flags |= FLAGS_LEFT;  // reverse padding
    8001181a:	fec42783          	lw	a5,-20(s0)
    8001181e:	0027e793          	ori	a5,a5,2
    80011822:	fef42623          	sw	a5,-20(s0)
                width = (unsigned int)-w;
    80011826:	fc042783          	lw	a5,-64(s0)
    8001182a:	40f007bb          	negw	a5,a5
    8001182e:	2781                	sext.w	a5,a5
    80011830:	fef42423          	sw	a5,-24(s0)
    80011834:	a029                	j	8001183e <_vsnprintf+0x1e6>
            }
            else {
                width = (unsigned int)w;
    80011836:	fc042783          	lw	a5,-64(s0)
    8001183a:	fef42423          	sw	a5,-24(s0)
            }
            format++;
    8001183e:	f8043783          	ld	a5,-128(s0)
    80011842:	0785                	addi	a5,a5,1
    80011844:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate precision field
        precision = 0U;
    80011848:	fe042223          	sw	zero,-28(s0)
        if (*format == '.') {
    8001184c:	f8043783          	ld	a5,-128(s0)
    80011850:	0007c783          	lbu	a5,0(a5)
    80011854:	873e                	mv	a4,a5
    80011856:	02e00793          	li	a5,46
    8001185a:	08f71063          	bne	a4,a5,800118da <_vsnprintf+0x282>
            flags |= FLAGS_PRECISION;
    8001185e:	fec42783          	lw	a5,-20(s0)
    80011862:	4007e793          	ori	a5,a5,1024
    80011866:	fef42623          	sw	a5,-20(s0)
            format++;
    8001186a:	f8043783          	ld	a5,-128(s0)
    8001186e:	0785                	addi	a5,a5,1
    80011870:	f8f43023          	sd	a5,-128(s0)
            if (_is_digit(*format)) {
    80011874:	f8043783          	ld	a5,-128(s0)
    80011878:	0007c783          	lbu	a5,0(a5)
    8001187c:	853e                	mv	a0,a5
    8001187e:	d47fe0ef          	jal	ra,800105c4 <_is_digit>
    80011882:	87aa                	mv	a5,a0
    80011884:	cb91                	beqz	a5,80011898 <_vsnprintf+0x240>
                precision = _atoi(&format);
    80011886:	f8040793          	addi	a5,s0,-128
    8001188a:	853e                	mv	a0,a5
    8001188c:	d79fe0ef          	jal	ra,80010604 <_atoi>
    80011890:	87aa                	mv	a5,a0
    80011892:	fef42223          	sw	a5,-28(s0)
    80011896:	a091                	j	800118da <_vsnprintf+0x282>
            }
            else if (*format == '*') {
    80011898:	f8043783          	ld	a5,-128(s0)
    8001189c:	0007c783          	lbu	a5,0(a5)
    800118a0:	873e                	mv	a4,a5
    800118a2:	02a00793          	li	a5,42
    800118a6:	02f71a63          	bne	a4,a5,800118da <_vsnprintf+0x282>
                const int prec = (int)va_arg(va, int);
    800118aa:	f7843783          	ld	a5,-136(s0)
    800118ae:	00878713          	addi	a4,a5,8
    800118b2:	f6e43c23          	sd	a4,-136(s0)
    800118b6:	439c                	lw	a5,0(a5)
    800118b8:	faf42e23          	sw	a5,-68(s0)
                precision      = prec > 0 ? (unsigned int)prec : 0U;
    800118bc:	fbc42783          	lw	a5,-68(s0)
    800118c0:	0007871b          	sext.w	a4,a5
    800118c4:	00075363          	bgez	a4,800118ca <_vsnprintf+0x272>
    800118c8:	4781                	li	a5,0
    800118ca:	2781                	sext.w	a5,a5
    800118cc:	fef42223          	sw	a5,-28(s0)
                format++;
    800118d0:	f8043783          	ld	a5,-128(s0)
    800118d4:	0785                	addi	a5,a5,1
    800118d6:	f8f43023          	sd	a5,-128(s0)
            }
        }

        // evaluate length field
        switch (*format) {
    800118da:	f8043783          	ld	a5,-128(s0)
    800118de:	0007c783          	lbu	a5,0(a5)
    800118e2:	2781                	sext.w	a5,a5
    800118e4:	f987869b          	addiw	a3,a5,-104
    800118e8:	0006871b          	sext.w	a4,a3
    800118ec:	47c9                	li	a5,18
    800118ee:	0ee7e963          	bltu	a5,a4,800119e0 <_vsnprintf+0x388>
    800118f2:	02069793          	slli	a5,a3,0x20
    800118f6:	9381                	srli	a5,a5,0x20
    800118f8:	00279713          	slli	a4,a5,0x2
    800118fc:	00007797          	auipc	a5,0x7
    80011900:	79478793          	addi	a5,a5,1940 # 80019090 <SYSCALLS+0x90>
    80011904:	97ba                	add	a5,a5,a4
    80011906:	439c                	lw	a5,0(a5)
    80011908:	0007871b          	sext.w	a4,a5
    8001190c:	00007797          	auipc	a5,0x7
    80011910:	78478793          	addi	a5,a5,1924 # 80019090 <SYSCALLS+0x90>
    80011914:	97ba                	add	a5,a5,a4
    80011916:	8782                	jr	a5
            case 'l':
                flags |= FLAGS_LONG;
    80011918:	fec42783          	lw	a5,-20(s0)
    8001191c:	1007e793          	ori	a5,a5,256
    80011920:	fef42623          	sw	a5,-20(s0)
                format++;
    80011924:	f8043783          	ld	a5,-128(s0)
    80011928:	0785                	addi	a5,a5,1
    8001192a:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'l') {
    8001192e:	f8043783          	ld	a5,-128(s0)
    80011932:	0007c783          	lbu	a5,0(a5)
    80011936:	873e                	mv	a4,a5
    80011938:	06c00793          	li	a5,108
    8001193c:	0af71463          	bne	a4,a5,800119e4 <_vsnprintf+0x38c>
                    flags |= FLAGS_LONG_LONG;
    80011940:	fec42783          	lw	a5,-20(s0)
    80011944:	2007e793          	ori	a5,a5,512
    80011948:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001194c:	f8043783          	ld	a5,-128(s0)
    80011950:	0785                	addi	a5,a5,1
    80011952:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    80011956:	a079                	j	800119e4 <_vsnprintf+0x38c>
            case 'h':
                flags |= FLAGS_SHORT;
    80011958:	fec42783          	lw	a5,-20(s0)
    8001195c:	0807e793          	ori	a5,a5,128
    80011960:	fef42623          	sw	a5,-20(s0)
                format++;
    80011964:	f8043783          	ld	a5,-128(s0)
    80011968:	0785                	addi	a5,a5,1
    8001196a:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'h') {
    8001196e:	f8043783          	ld	a5,-128(s0)
    80011972:	0007c783          	lbu	a5,0(a5)
    80011976:	873e                	mv	a4,a5
    80011978:	06800793          	li	a5,104
    8001197c:	06f71663          	bne	a4,a5,800119e8 <_vsnprintf+0x390>
                    flags |= FLAGS_CHAR;
    80011980:	fec42783          	lw	a5,-20(s0)
    80011984:	0407e793          	ori	a5,a5,64
    80011988:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001198c:	f8043783          	ld	a5,-128(s0)
    80011990:	0785                	addi	a5,a5,1
    80011992:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    80011996:	a889                	j	800119e8 <_vsnprintf+0x390>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
            case 't':
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG
    80011998:	fec42783          	lw	a5,-20(s0)
    8001199c:	1007e793          	ori	a5,a5,256
    800119a0:	fef42623          	sw	a5,-20(s0)
                                                            : FLAGS_LONG_LONG);
                format++;
    800119a4:	f8043783          	ld	a5,-128(s0)
    800119a8:	0785                	addi	a5,a5,1
    800119aa:	f8f43023          	sd	a5,-128(s0)
                break;
    800119ae:	a835                	j	800119ea <_vsnprintf+0x392>
#endif
            case 'j':
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG
    800119b0:	fec42783          	lw	a5,-20(s0)
    800119b4:	1007e793          	ori	a5,a5,256
    800119b8:	fef42623          	sw	a5,-20(s0)
                                                           : FLAGS_LONG_LONG);
                format++;
    800119bc:	f8043783          	ld	a5,-128(s0)
    800119c0:	0785                	addi	a5,a5,1
    800119c2:	f8f43023          	sd	a5,-128(s0)
                break;
    800119c6:	a015                	j	800119ea <_vsnprintf+0x392>
            case 'z':
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG
    800119c8:	fec42783          	lw	a5,-20(s0)
    800119cc:	1007e793          	ori	a5,a5,256
    800119d0:	fef42623          	sw	a5,-20(s0)
                                                         : FLAGS_LONG_LONG);
                format++;
    800119d4:	f8043783          	ld	a5,-128(s0)
    800119d8:	0785                	addi	a5,a5,1
    800119da:	f8f43023          	sd	a5,-128(s0)
                break;
    800119de:	a031                	j	800119ea <_vsnprintf+0x392>
            default:
                break;
    800119e0:	0001                	nop
    800119e2:	a021                	j	800119ea <_vsnprintf+0x392>
                break;
    800119e4:	0001                	nop
    800119e6:	a011                	j	800119ea <_vsnprintf+0x392>
                break;
    800119e8:	0001                	nop
        }

        // evaluate specifier
        switch (*format) {
    800119ea:	f8043783          	ld	a5,-128(s0)
    800119ee:	0007c783          	lbu	a5,0(a5)
    800119f2:	2781                	sext.w	a5,a5
    800119f4:	fdb7869b          	addiw	a3,a5,-37
    800119f8:	0006871b          	sext.w	a4,a3
    800119fc:	05300793          	li	a5,83
    80011a00:	7ce7e863          	bltu	a5,a4,800121d0 <_vsnprintf+0xb78>
    80011a04:	02069793          	slli	a5,a3,0x20
    80011a08:	9381                	srli	a5,a5,0x20
    80011a0a:	00279713          	slli	a4,a5,0x2
    80011a0e:	00007797          	auipc	a5,0x7
    80011a12:	6ce78793          	addi	a5,a5,1742 # 800190dc <SYSCALLS+0xdc>
    80011a16:	97ba                	add	a5,a5,a4
    80011a18:	439c                	lw	a5,0(a5)
    80011a1a:	0007871b          	sext.w	a4,a5
    80011a1e:	00007797          	auipc	a5,0x7
    80011a22:	6be78793          	addi	a5,a5,1726 # 800190dc <SYSCALLS+0xdc>
    80011a26:	97ba                	add	a5,a5,a4
    80011a28:	8782                	jr	a5
            case 'X':
            case 'o':
            case 'b': {
                // set the base
                unsigned int base;
                if (*format == 'x' || *format == 'X') {
    80011a2a:	f8043783          	ld	a5,-128(s0)
    80011a2e:	0007c783          	lbu	a5,0(a5)
    80011a32:	873e                	mv	a4,a5
    80011a34:	07800793          	li	a5,120
    80011a38:	00f70b63          	beq	a4,a5,80011a4e <_vsnprintf+0x3f6>
    80011a3c:	f8043783          	ld	a5,-128(s0)
    80011a40:	0007c783          	lbu	a5,0(a5)
    80011a44:	873e                	mv	a4,a5
    80011a46:	05800793          	li	a5,88
    80011a4a:	00f71663          	bne	a4,a5,80011a56 <_vsnprintf+0x3fe>
                    base = 16U;
    80011a4e:	47c1                	li	a5,16
    80011a50:	fcf42a23          	sw	a5,-44(s0)
    80011a54:	a099                	j	80011a9a <_vsnprintf+0x442>
                }
                else if (*format == 'o') {
    80011a56:	f8043783          	ld	a5,-128(s0)
    80011a5a:	0007c783          	lbu	a5,0(a5)
    80011a5e:	873e                	mv	a4,a5
    80011a60:	06f00793          	li	a5,111
    80011a64:	00f71663          	bne	a4,a5,80011a70 <_vsnprintf+0x418>
                    base = 8U;
    80011a68:	47a1                	li	a5,8
    80011a6a:	fcf42a23          	sw	a5,-44(s0)
    80011a6e:	a035                	j	80011a9a <_vsnprintf+0x442>
                }
                else if (*format == 'b') {
    80011a70:	f8043783          	ld	a5,-128(s0)
    80011a74:	0007c783          	lbu	a5,0(a5)
    80011a78:	873e                	mv	a4,a5
    80011a7a:	06200793          	li	a5,98
    80011a7e:	00f71663          	bne	a4,a5,80011a8a <_vsnprintf+0x432>
                    base = 2U;
    80011a82:	4789                	li	a5,2
    80011a84:	fcf42a23          	sw	a5,-44(s0)
    80011a88:	a809                	j	80011a9a <_vsnprintf+0x442>
                }
                else {
                    base = 10U;
    80011a8a:	47a9                	li	a5,10
    80011a8c:	fcf42a23          	sw	a5,-44(s0)
                    flags &= ~FLAGS_HASH;  // no hash for dec format
    80011a90:	fec42783          	lw	a5,-20(s0)
    80011a94:	9bbd                	andi	a5,a5,-17
    80011a96:	fef42623          	sw	a5,-20(s0)
                }
                // uppercase
                if (*format == 'X') {
    80011a9a:	f8043783          	ld	a5,-128(s0)
    80011a9e:	0007c783          	lbu	a5,0(a5)
    80011aa2:	873e                	mv	a4,a5
    80011aa4:	05800793          	li	a5,88
    80011aa8:	00f71863          	bne	a4,a5,80011ab8 <_vsnprintf+0x460>
                    flags |= FLAGS_UPPERCASE;
    80011aac:	fec42783          	lw	a5,-20(s0)
    80011ab0:	0207e793          	ori	a5,a5,32
    80011ab4:	fef42623          	sw	a5,-20(s0)
                }

                // no plus or space flag for u, x, X, o, b
                if ((*format != 'i') && (*format != 'd')) {
    80011ab8:	f8043783          	ld	a5,-128(s0)
    80011abc:	0007c783          	lbu	a5,0(a5)
    80011ac0:	873e                	mv	a4,a5
    80011ac2:	06900793          	li	a5,105
    80011ac6:	02f70063          	beq	a4,a5,80011ae6 <_vsnprintf+0x48e>
    80011aca:	f8043783          	ld	a5,-128(s0)
    80011ace:	0007c783          	lbu	a5,0(a5)
    80011ad2:	873e                	mv	a4,a5
    80011ad4:	06400793          	li	a5,100
    80011ad8:	00f70763          	beq	a4,a5,80011ae6 <_vsnprintf+0x48e>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    80011adc:	fec42783          	lw	a5,-20(s0)
    80011ae0:	9bcd                	andi	a5,a5,-13
    80011ae2:	fef42623          	sw	a5,-20(s0)
                }

                // ignore '0' flag when precision is given
                if (flags & FLAGS_PRECISION) {
    80011ae6:	fec42783          	lw	a5,-20(s0)
    80011aea:	4007f793          	andi	a5,a5,1024
    80011aee:	2781                	sext.w	a5,a5
    80011af0:	c791                	beqz	a5,80011afc <_vsnprintf+0x4a4>
                    flags &= ~FLAGS_ZEROPAD;
    80011af2:	fec42783          	lw	a5,-20(s0)
    80011af6:	9bf9                	andi	a5,a5,-2
    80011af8:	fef42623          	sw	a5,-20(s0)
                }

                // convert the integer
                if ((*format == 'i') || (*format == 'd')) {
    80011afc:	f8043783          	ld	a5,-128(s0)
    80011b00:	0007c783          	lbu	a5,0(a5)
    80011b04:	873e                	mv	a4,a5
    80011b06:	06900793          	li	a5,105
    80011b0a:	00f70b63          	beq	a4,a5,80011b20 <_vsnprintf+0x4c8>
    80011b0e:	f8043783          	ld	a5,-128(s0)
    80011b12:	0007c783          	lbu	a5,0(a5)
    80011b16:	873e                	mv	a4,a5
    80011b18:	06400793          	li	a5,100
    80011b1c:	18f71d63          	bne	a4,a5,80011cb6 <_vsnprintf+0x65e>
                    // signed
                    if (flags & FLAGS_LONG_LONG) {
    80011b20:	fec42783          	lw	a5,-20(s0)
    80011b24:	2007f793          	andi	a5,a5,512
    80011b28:	2781                	sext.w	a5,a5
    80011b2a:	c3bd                	beqz	a5,80011b90 <_vsnprintf+0x538>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        const long long value = va_arg(va, long long);
    80011b2c:	f7843783          	ld	a5,-136(s0)
    80011b30:	00878713          	addi	a4,a5,8
    80011b34:	f6e43c23          	sd	a4,-136(s0)
    80011b38:	639c                	ld	a5,0(a5)
    80011b3a:	faf43023          	sd	a5,-96(s0)
                        idx                   = _ntoa_long_long(
                                              out, buffer, idx, maxlen,
                                              (unsigned long long)(value > 0 ? value : 0 - value),
    80011b3e:	fa043783          	ld	a5,-96(s0)
    80011b42:	43f7d713          	srai	a4,a5,0x3f
    80011b46:	fa043783          	ld	a5,-96(s0)
    80011b4a:	8fb9                	xor	a5,a5,a4
    80011b4c:	8f99                	sub	a5,a5,a4
                        idx                   = _ntoa_long_long(
    80011b4e:	85be                	mv	a1,a5
    80011b50:	fa043783          	ld	a5,-96(s0)
    80011b54:	93fd                	srli	a5,a5,0x3f
    80011b56:	0ff7f713          	andi	a4,a5,255
    80011b5a:	fd446683          	lwu	a3,-44(s0)
    80011b5e:	fe442603          	lw	a2,-28(s0)
    80011b62:	fec42783          	lw	a5,-20(s0)
    80011b66:	e43e                	sd	a5,8(sp)
    80011b68:	fe842783          	lw	a5,-24(s0)
    80011b6c:	e03e                	sd	a5,0(sp)
    80011b6e:	88b2                	mv	a7,a2
    80011b70:	8836                	mv	a6,a3
    80011b72:	87ba                	mv	a5,a4
    80011b74:	872e                	mv	a4,a1
    80011b76:	f8843683          	ld	a3,-120(s0)
    80011b7a:	fd843603          	ld	a2,-40(s0)
    80011b7e:	f9043583          	ld	a1,-112(s0)
    80011b82:	f9843503          	ld	a0,-104(s0)
    80011b86:	fadfe0ef          	jal	ra,80010b32 <_ntoa_long_long>
    80011b8a:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80011b8e:	ac89                	j	80011de0 <_vsnprintf+0x788>
                                              value < 0, base, precision, width, flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    80011b90:	fec42783          	lw	a5,-20(s0)
    80011b94:	1007f793          	andi	a5,a5,256
    80011b98:	2781                	sext.w	a5,a5
    80011b9a:	c3bd                	beqz	a5,80011c00 <_vsnprintf+0x5a8>
                        const long value = va_arg(va, long);
    80011b9c:	f7843783          	ld	a5,-136(s0)
    80011ba0:	00878713          	addi	a4,a5,8
    80011ba4:	f6e43c23          	sd	a4,-136(s0)
    80011ba8:	639c                	ld	a5,0(a5)
    80011baa:	faf43423          	sd	a5,-88(s0)
                        idx              = _ntoa_long(
                                         out, buffer, idx, maxlen,
                                         (unsigned long)(value > 0 ? value : 0 - value),
    80011bae:	fa843783          	ld	a5,-88(s0)
    80011bb2:	43f7d713          	srai	a4,a5,0x3f
    80011bb6:	fa843783          	ld	a5,-88(s0)
    80011bba:	8fb9                	xor	a5,a5,a4
    80011bbc:	8f99                	sub	a5,a5,a4
                        idx              = _ntoa_long(
    80011bbe:	85be                	mv	a1,a5
    80011bc0:	fa843783          	ld	a5,-88(s0)
    80011bc4:	93fd                	srli	a5,a5,0x3f
    80011bc6:	0ff7f713          	andi	a4,a5,255
    80011bca:	fd446683          	lwu	a3,-44(s0)
    80011bce:	fe442603          	lw	a2,-28(s0)
    80011bd2:	fec42783          	lw	a5,-20(s0)
    80011bd6:	e43e                	sd	a5,8(sp)
    80011bd8:	fe842783          	lw	a5,-24(s0)
    80011bdc:	e03e                	sd	a5,0(sp)
    80011bde:	88b2                	mv	a7,a2
    80011be0:	8836                	mv	a6,a3
    80011be2:	87ba                	mv	a5,a4
    80011be4:	872e                	mv	a4,a1
    80011be6:	f8843683          	ld	a3,-120(s0)
    80011bea:	fd843603          	ld	a2,-40(s0)
    80011bee:	f9043583          	ld	a1,-112(s0)
    80011bf2:	f9843503          	ld	a0,-104(s0)
    80011bf6:	e25fe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011bfa:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80011bfe:	a2cd                	j	80011de0 <_vsnprintf+0x788>
                                         value < 0, base, precision, width, flags);
                    }
                    else {
                        const int value =
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    80011c00:	fec42783          	lw	a5,-20(s0)
    80011c04:	0407f793          	andi	a5,a5,64
    80011c08:	2781                	sext.w	a5,a5
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80011c0a:	cf81                	beqz	a5,80011c22 <_vsnprintf+0x5ca>
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    80011c0c:	f7843783          	ld	a5,-136(s0)
    80011c10:	00878713          	addi	a4,a5,8
    80011c14:	f6e43c23          	sd	a4,-136(s0)
    80011c18:	439c                	lw	a5,0(a5)
    80011c1a:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80011c1e:	2781                	sext.w	a5,a5
    80011c20:	a81d                	j	80011c56 <_vsnprintf+0x5fe>
    80011c22:	fec42783          	lw	a5,-20(s0)
    80011c26:	0807f793          	andi	a5,a5,128
    80011c2a:	2781                	sext.w	a5,a5
                                                    : va_arg(va, int);
    80011c2c:	cf91                	beqz	a5,80011c48 <_vsnprintf+0x5f0>
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80011c2e:	f7843783          	ld	a5,-136(s0)
    80011c32:	00878713          	addi	a4,a5,8
    80011c36:	f6e43c23          	sd	a4,-136(s0)
    80011c3a:	439c                	lw	a5,0(a5)
    80011c3c:	0107979b          	slliw	a5,a5,0x10
    80011c40:	4107d79b          	sraiw	a5,a5,0x10
                                                    : va_arg(va, int);
    80011c44:	2781                	sext.w	a5,a5
    80011c46:	a801                	j	80011c56 <_vsnprintf+0x5fe>
    80011c48:	f7843783          	ld	a5,-136(s0)
    80011c4c:	00878713          	addi	a4,a5,8
    80011c50:	f6e43c23          	sd	a4,-136(s0)
    80011c54:	439c                	lw	a5,0(a5)
                        const int value =
    80011c56:	faf42823          	sw	a5,-80(s0)
                        idx = _ntoa_long(
                            out, buffer, idx, maxlen,
                            (unsigned int)(value > 0 ? value : 0 - value),
    80011c5a:	fb042783          	lw	a5,-80(s0)
    80011c5e:	41f7d79b          	sraiw	a5,a5,0x1f
    80011c62:	fb042703          	lw	a4,-80(s0)
    80011c66:	8f3d                	xor	a4,a4,a5
    80011c68:	40f707bb          	subw	a5,a4,a5
    80011c6c:	2781                	sext.w	a5,a5
    80011c6e:	2781                	sext.w	a5,a5
                        idx = _ntoa_long(
    80011c70:	02079713          	slli	a4,a5,0x20
    80011c74:	9301                	srli	a4,a4,0x20
    80011c76:	fb042783          	lw	a5,-80(s0)
    80011c7a:	01f7d79b          	srliw	a5,a5,0x1f
    80011c7e:	0ff7f693          	andi	a3,a5,255
    80011c82:	fd446603          	lwu	a2,-44(s0)
    80011c86:	fe442583          	lw	a1,-28(s0)
    80011c8a:	fec42783          	lw	a5,-20(s0)
    80011c8e:	e43e                	sd	a5,8(sp)
    80011c90:	fe842783          	lw	a5,-24(s0)
    80011c94:	e03e                	sd	a5,0(sp)
    80011c96:	88ae                	mv	a7,a1
    80011c98:	8832                	mv	a6,a2
    80011c9a:	87b6                	mv	a5,a3
    80011c9c:	f8843683          	ld	a3,-120(s0)
    80011ca0:	fd843603          	ld	a2,-40(s0)
    80011ca4:	f9043583          	ld	a1,-112(s0)
    80011ca8:	f9843503          	ld	a0,-104(s0)
    80011cac:	d6ffe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011cb0:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80011cb4:	a235                	j	80011de0 <_vsnprintf+0x788>
                            value < 0, base, precision, width, flags);
                    }
                }
                else {
                    // unsigned
                    if (flags & FLAGS_LONG_LONG) {
    80011cb6:	fec42783          	lw	a5,-20(s0)
    80011cba:	2007f793          	andi	a5,a5,512
    80011cbe:	2781                	sext.w	a5,a5
    80011cc0:	c3b1                	beqz	a5,80011d04 <_vsnprintf+0x6ac>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
    80011cc2:	f7843783          	ld	a5,-136(s0)
    80011cc6:	00878713          	addi	a4,a5,8
    80011cca:	f6e43c23          	sd	a4,-136(s0)
    80011cce:	6398                	ld	a4,0(a5)
    80011cd0:	fd446683          	lwu	a3,-44(s0)
    80011cd4:	fe442603          	lw	a2,-28(s0)
    80011cd8:	fec42783          	lw	a5,-20(s0)
    80011cdc:	e43e                	sd	a5,8(sp)
    80011cde:	fe842783          	lw	a5,-24(s0)
    80011ce2:	e03e                	sd	a5,0(sp)
    80011ce4:	88b2                	mv	a7,a2
    80011ce6:	8836                	mv	a6,a3
    80011ce8:	4781                	li	a5,0
    80011cea:	f8843683          	ld	a3,-120(s0)
    80011cee:	fd843603          	ld	a2,-40(s0)
    80011cf2:	f9043583          	ld	a1,-112(s0)
    80011cf6:	f9843503          	ld	a0,-104(s0)
    80011cfa:	e39fe0ef          	jal	ra,80010b32 <_ntoa_long_long>
    80011cfe:	fca43c23          	sd	a0,-40(s0)
    80011d02:	a8f9                	j	80011de0 <_vsnprintf+0x788>
                                              va_arg(va, unsigned long long),
                                              false, base, precision, width,
                                              flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    80011d04:	fec42783          	lw	a5,-20(s0)
    80011d08:	1007f793          	andi	a5,a5,256
    80011d0c:	2781                	sext.w	a5,a5
    80011d0e:	c3b1                	beqz	a5,80011d52 <_vsnprintf+0x6fa>
                        idx = _ntoa_long(out, buffer, idx, maxlen,
    80011d10:	f7843783          	ld	a5,-136(s0)
    80011d14:	00878713          	addi	a4,a5,8
    80011d18:	f6e43c23          	sd	a4,-136(s0)
    80011d1c:	6398                	ld	a4,0(a5)
    80011d1e:	fd446683          	lwu	a3,-44(s0)
    80011d22:	fe442603          	lw	a2,-28(s0)
    80011d26:	fec42783          	lw	a5,-20(s0)
    80011d2a:	e43e                	sd	a5,8(sp)
    80011d2c:	fe842783          	lw	a5,-24(s0)
    80011d30:	e03e                	sd	a5,0(sp)
    80011d32:	88b2                	mv	a7,a2
    80011d34:	8836                	mv	a6,a3
    80011d36:	4781                	li	a5,0
    80011d38:	f8843683          	ld	a3,-120(s0)
    80011d3c:	fd843603          	ld	a2,-40(s0)
    80011d40:	f9043583          	ld	a1,-112(s0)
    80011d44:	f9843503          	ld	a0,-104(s0)
    80011d48:	cd3fe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011d4c:	fca43c23          	sd	a0,-40(s0)
    80011d50:	a841                	j	80011de0 <_vsnprintf+0x788>
                                         va_arg(va, unsigned long), false, base,
                                         precision, width, flags);
                    }
                    else {
                        const unsigned int value =
                            (flags & FLAGS_CHAR)
    80011d52:	fec42783          	lw	a5,-20(s0)
    80011d56:	0407f793          	andi	a5,a5,64
    80011d5a:	2781                	sext.w	a5,a5
                                ? (unsigned char)va_arg(va, unsigned int)
                            : (flags & FLAGS_SHORT)
    80011d5c:	cf81                	beqz	a5,80011d74 <_vsnprintf+0x71c>
                                ? (unsigned char)va_arg(va, unsigned int)
    80011d5e:	f7843783          	ld	a5,-136(s0)
    80011d62:	00878713          	addi	a4,a5,8
    80011d66:	f6e43c23          	sd	a4,-136(s0)
    80011d6a:	439c                	lw	a5,0(a5)
    80011d6c:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT)
    80011d70:	2781                	sext.w	a5,a5
    80011d72:	a815                	j	80011da6 <_vsnprintf+0x74e>
    80011d74:	fec42783          	lw	a5,-20(s0)
    80011d78:	0807f793          	andi	a5,a5,128
    80011d7c:	2781                	sext.w	a5,a5
                                ? (unsigned short int)va_arg(va, unsigned int)
                                : va_arg(va, unsigned int);
    80011d7e:	cf81                	beqz	a5,80011d96 <_vsnprintf+0x73e>
                                ? (unsigned short int)va_arg(va, unsigned int)
    80011d80:	f7843783          	ld	a5,-136(s0)
    80011d84:	00878713          	addi	a4,a5,8
    80011d88:	f6e43c23          	sd	a4,-136(s0)
    80011d8c:	439c                	lw	a5,0(a5)
    80011d8e:	17c2                	slli	a5,a5,0x30
    80011d90:	93c1                	srli	a5,a5,0x30
                                : va_arg(va, unsigned int);
    80011d92:	2781                	sext.w	a5,a5
    80011d94:	a801                	j	80011da4 <_vsnprintf+0x74c>
    80011d96:	f7843783          	ld	a5,-136(s0)
    80011d9a:	00878713          	addi	a4,a5,8
    80011d9e:	f6e43c23          	sd	a4,-136(s0)
    80011da2:	439c                	lw	a5,0(a5)
                            : (flags & FLAGS_SHORT)
    80011da4:	2781                	sext.w	a5,a5
                        const unsigned int value =
    80011da6:	faf42a23          	sw	a5,-76(s0)
                        idx = _ntoa_long(out, buffer, idx, maxlen, value, false,
    80011daa:	fb446703          	lwu	a4,-76(s0)
    80011dae:	fd446683          	lwu	a3,-44(s0)
    80011db2:	fe442603          	lw	a2,-28(s0)
    80011db6:	fec42783          	lw	a5,-20(s0)
    80011dba:	e43e                	sd	a5,8(sp)
    80011dbc:	fe842783          	lw	a5,-24(s0)
    80011dc0:	e03e                	sd	a5,0(sp)
    80011dc2:	88b2                	mv	a7,a2
    80011dc4:	8836                	mv	a6,a3
    80011dc6:	4781                	li	a5,0
    80011dc8:	f8843683          	ld	a3,-120(s0)
    80011dcc:	fd843603          	ld	a2,-40(s0)
    80011dd0:	f9043583          	ld	a1,-112(s0)
    80011dd4:	f9843503          	ld	a0,-104(s0)
    80011dd8:	c43fe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011ddc:	fca43c23          	sd	a0,-40(s0)
                                         base, precision, width, flags);
                    }
                }
                format++;
    80011de0:	f8043783          	ld	a5,-128(s0)
    80011de4:	0785                	addi	a5,a5,1
    80011de6:	f8f43023          	sd	a5,-128(s0)
                break;
    80011dea:	a919                	j	80012200 <_vsnprintf+0xba8>
            }
#if defined(PRINTF_SUPPORT_FLOAT)
            case 'f':
            case 'F':
                if (*format == 'F')
    80011dec:	f8043783          	ld	a5,-128(s0)
    80011df0:	0007c783          	lbu	a5,0(a5)
    80011df4:	873e                	mv	a4,a5
    80011df6:	04600793          	li	a5,70
    80011dfa:	00f71863          	bne	a4,a5,80011e0a <_vsnprintf+0x7b2>
                    flags |= FLAGS_UPPERCASE;
    80011dfe:	fec42783          	lw	a5,-20(s0)
    80011e02:	0207e793          	ori	a5,a5,32
    80011e06:	fef42623          	sw	a5,-20(s0)
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double),
    80011e0a:	f7843783          	ld	a5,-136(s0)
    80011e0e:	00878713          	addi	a4,a5,8
    80011e12:	f6e43c23          	sd	a4,-136(s0)
    80011e16:	239c                	fld	fa5,0(a5)
    80011e18:	fec42683          	lw	a3,-20(s0)
    80011e1c:	fe842783          	lw	a5,-24(s0)
    80011e20:	fe442703          	lw	a4,-28(s0)
    80011e24:	8836                	mv	a6,a3
    80011e26:	22f78553          	fmv.d	fa0,fa5
    80011e2a:	f8843683          	ld	a3,-120(s0)
    80011e2e:	fd843603          	ld	a2,-40(s0)
    80011e32:	f9043583          	ld	a1,-112(s0)
    80011e36:	f9843503          	ld	a0,-104(s0)
    80011e3a:	e11fe0ef          	jal	ra,80010c4a <_ftoa>
    80011e3e:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    80011e42:	f8043783          	ld	a5,-128(s0)
    80011e46:	0785                	addi	a5,a5,1
    80011e48:	f8f43023          	sd	a5,-128(s0)
                break;
    80011e4c:	ae55                	j	80012200 <_vsnprintf+0xba8>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
            case 'e':
            case 'E':
            case 'g':
            case 'G':
                if ((*format == 'g') || (*format == 'G'))
    80011e4e:	f8043783          	ld	a5,-128(s0)
    80011e52:	0007c783          	lbu	a5,0(a5)
    80011e56:	873e                	mv	a4,a5
    80011e58:	06700793          	li	a5,103
    80011e5c:	00f70b63          	beq	a4,a5,80011e72 <_vsnprintf+0x81a>
    80011e60:	f8043783          	ld	a5,-128(s0)
    80011e64:	0007c783          	lbu	a5,0(a5)
    80011e68:	873e                	mv	a4,a5
    80011e6a:	04700793          	li	a5,71
    80011e6e:	00f71a63          	bne	a4,a5,80011e82 <_vsnprintf+0x82a>
                    flags |= FLAGS_ADAPT_EXP;
    80011e72:	fec42703          	lw	a4,-20(s0)
    80011e76:	6785                	lui	a5,0x1
    80011e78:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    80011e7c:	8fd9                	or	a5,a5,a4
    80011e7e:	fef42623          	sw	a5,-20(s0)
                if ((*format == 'E') || (*format == 'G'))
    80011e82:	f8043783          	ld	a5,-128(s0)
    80011e86:	0007c783          	lbu	a5,0(a5)
    80011e8a:	873e                	mv	a4,a5
    80011e8c:	04500793          	li	a5,69
    80011e90:	00f70b63          	beq	a4,a5,80011ea6 <_vsnprintf+0x84e>
    80011e94:	f8043783          	ld	a5,-128(s0)
    80011e98:	0007c783          	lbu	a5,0(a5)
    80011e9c:	873e                	mv	a4,a5
    80011e9e:	04700793          	li	a5,71
    80011ea2:	00f71863          	bne	a4,a5,80011eb2 <_vsnprintf+0x85a>
                    flags |= FLAGS_UPPERCASE;
    80011ea6:	fec42783          	lw	a5,-20(s0)
    80011eaa:	0207e793          	ori	a5,a5,32
    80011eae:	fef42623          	sw	a5,-20(s0)
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double),
    80011eb2:	f7843783          	ld	a5,-136(s0)
    80011eb6:	00878713          	addi	a4,a5,8
    80011eba:	f6e43c23          	sd	a4,-136(s0)
    80011ebe:	239c                	fld	fa5,0(a5)
    80011ec0:	fec42683          	lw	a3,-20(s0)
    80011ec4:	fe842783          	lw	a5,-24(s0)
    80011ec8:	fe442703          	lw	a4,-28(s0)
    80011ecc:	8836                	mv	a6,a3
    80011ece:	22f78553          	fmv.d	fa0,fa5
    80011ed2:	f8843683          	ld	a3,-120(s0)
    80011ed6:	fd843603          	ld	a2,-40(s0)
    80011eda:	f9043583          	ld	a1,-112(s0)
    80011ede:	f9843503          	ld	a0,-104(s0)
    80011ee2:	ab4ff0ef          	jal	ra,80011196 <_etoa>
    80011ee6:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    80011eea:	f8043783          	ld	a5,-128(s0)
    80011eee:	0785                	addi	a5,a5,1
    80011ef0:	f8f43023          	sd	a5,-128(s0)
                break;
    80011ef4:	a631                	j	80012200 <_vsnprintf+0xba8>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
            case 'c': {
                unsigned int l = 1U;
    80011ef6:	4785                	li	a5,1
    80011ef8:	fcf42823          	sw	a5,-48(s0)
                // pre padding
                if (!(flags & FLAGS_LEFT)) {
    80011efc:	fec42783          	lw	a5,-20(s0)
    80011f00:	8b89                	andi	a5,a5,2
    80011f02:	2781                	sext.w	a5,a5
    80011f04:	ef8d                	bnez	a5,80011f3e <_vsnprintf+0x8e6>
                    while (l++ < width) {
    80011f06:	a00d                	j	80011f28 <_vsnprintf+0x8d0>
                        out(' ', buffer, idx++, maxlen);
    80011f08:	fd843783          	ld	a5,-40(s0)
    80011f0c:	00178713          	addi	a4,a5,1
    80011f10:	fce43c23          	sd	a4,-40(s0)
    80011f14:	f9843703          	ld	a4,-104(s0)
    80011f18:	f8843683          	ld	a3,-120(s0)
    80011f1c:	863e                	mv	a2,a5
    80011f1e:	f9043583          	ld	a1,-112(s0)
    80011f22:	02000513          	li	a0,32
    80011f26:	9702                	jalr	a4
                    while (l++ < width) {
    80011f28:	fd042783          	lw	a5,-48(s0)
    80011f2c:	0017871b          	addiw	a4,a5,1
    80011f30:	fce42823          	sw	a4,-48(s0)
    80011f34:	fe842703          	lw	a4,-24(s0)
    80011f38:	2701                	sext.w	a4,a4
    80011f3a:	fce7e7e3          	bltu	a5,a4,80011f08 <_vsnprintf+0x8b0>
                    }
                }
                // char output
                out((char)va_arg(va, int), buffer, idx++, maxlen);
    80011f3e:	f7843783          	ld	a5,-136(s0)
    80011f42:	00878713          	addi	a4,a5,8
    80011f46:	f6e43c23          	sd	a4,-136(s0)
    80011f4a:	439c                	lw	a5,0(a5)
    80011f4c:	0ff7f513          	andi	a0,a5,255
    80011f50:	fd843783          	ld	a5,-40(s0)
    80011f54:	00178713          	addi	a4,a5,1
    80011f58:	fce43c23          	sd	a4,-40(s0)
    80011f5c:	f9843703          	ld	a4,-104(s0)
    80011f60:	f8843683          	ld	a3,-120(s0)
    80011f64:	863e                	mv	a2,a5
    80011f66:	f9043583          	ld	a1,-112(s0)
    80011f6a:	9702                	jalr	a4
                // post padding
                if (flags & FLAGS_LEFT) {
    80011f6c:	fec42783          	lw	a5,-20(s0)
    80011f70:	8b89                	andi	a5,a5,2
    80011f72:	2781                	sext.w	a5,a5
    80011f74:	cf8d                	beqz	a5,80011fae <_vsnprintf+0x956>
                    while (l++ < width) {
    80011f76:	a00d                	j	80011f98 <_vsnprintf+0x940>
                        out(' ', buffer, idx++, maxlen);
    80011f78:	fd843783          	ld	a5,-40(s0)
    80011f7c:	00178713          	addi	a4,a5,1
    80011f80:	fce43c23          	sd	a4,-40(s0)
    80011f84:	f9843703          	ld	a4,-104(s0)
    80011f88:	f8843683          	ld	a3,-120(s0)
    80011f8c:	863e                	mv	a2,a5
    80011f8e:	f9043583          	ld	a1,-112(s0)
    80011f92:	02000513          	li	a0,32
    80011f96:	9702                	jalr	a4
                    while (l++ < width) {
    80011f98:	fd042783          	lw	a5,-48(s0)
    80011f9c:	0017871b          	addiw	a4,a5,1
    80011fa0:	fce42823          	sw	a4,-48(s0)
    80011fa4:	fe842703          	lw	a4,-24(s0)
    80011fa8:	2701                	sext.w	a4,a4
    80011faa:	fce7e7e3          	bltu	a5,a4,80011f78 <_vsnprintf+0x920>
                    }
                }
                format++;
    80011fae:	f8043783          	ld	a5,-128(s0)
    80011fb2:	0785                	addi	a5,a5,1
    80011fb4:	f8f43023          	sd	a5,-128(s0)
                break;
    80011fb8:	a4a1                	j	80012200 <_vsnprintf+0xba8>
            }

            case 's': {
                const char *p = va_arg(va, char *);
    80011fba:	f7843783          	ld	a5,-136(s0)
    80011fbe:	00878713          	addi	a4,a5,8
    80011fc2:	f6e43c23          	sd	a4,-136(s0)
    80011fc6:	639c                	ld	a5,0(a5)
    80011fc8:	fcf43423          	sd	a5,-56(s0)
                unsigned int l =
                    _strnlen_s(p, precision ? precision : (size_t)-1);
    80011fcc:	fe442783          	lw	a5,-28(s0)
    80011fd0:	2781                	sext.w	a5,a5
    80011fd2:	c781                	beqz	a5,80011fda <_vsnprintf+0x982>
    80011fd4:	fe446783          	lwu	a5,-28(s0)
    80011fd8:	a011                	j	80011fdc <_vsnprintf+0x984>
    80011fda:	57fd                	li	a5,-1
    80011fdc:	85be                	mv	a1,a5
    80011fde:	fc843503          	ld	a0,-56(s0)
    80011fe2:	d92fe0ef          	jal	ra,80010574 <_strnlen_s>
    80011fe6:	87aa                	mv	a5,a0
    80011fe8:	fcf42223          	sw	a5,-60(s0)
                // pre padding
                if (flags & FLAGS_PRECISION) {
    80011fec:	fec42783          	lw	a5,-20(s0)
    80011ff0:	4007f793          	andi	a5,a5,1024
    80011ff4:	2781                	sext.w	a5,a5
    80011ff6:	cf91                	beqz	a5,80012012 <_vsnprintf+0x9ba>
                    l = (l < precision ? l : precision);
    80011ff8:	fc442603          	lw	a2,-60(s0)
    80011ffc:	fe442783          	lw	a5,-28(s0)
    80012000:	0007869b          	sext.w	a3,a5
    80012004:	0006071b          	sext.w	a4,a2
    80012008:	00d77363          	bgeu	a4,a3,8001200e <_vsnprintf+0x9b6>
    8001200c:	87b2                	mv	a5,a2
    8001200e:	fcf42223          	sw	a5,-60(s0)
                }
                if (!(flags & FLAGS_LEFT)) {
    80012012:	fec42783          	lw	a5,-20(s0)
    80012016:	8b89                	andi	a5,a5,2
    80012018:	2781                	sext.w	a5,a5
    8001201a:	e7a5                	bnez	a5,80012082 <_vsnprintf+0xa2a>
                    while (l++ < width) {
    8001201c:	a00d                	j	8001203e <_vsnprintf+0x9e6>
                        out(' ', buffer, idx++, maxlen);
    8001201e:	fd843783          	ld	a5,-40(s0)
    80012022:	00178713          	addi	a4,a5,1
    80012026:	fce43c23          	sd	a4,-40(s0)
    8001202a:	f9843703          	ld	a4,-104(s0)
    8001202e:	f8843683          	ld	a3,-120(s0)
    80012032:	863e                	mv	a2,a5
    80012034:	f9043583          	ld	a1,-112(s0)
    80012038:	02000513          	li	a0,32
    8001203c:	9702                	jalr	a4
                    while (l++ < width) {
    8001203e:	fc442783          	lw	a5,-60(s0)
    80012042:	0017871b          	addiw	a4,a5,1
    80012046:	fce42223          	sw	a4,-60(s0)
    8001204a:	fe842703          	lw	a4,-24(s0)
    8001204e:	2701                	sext.w	a4,a4
    80012050:	fce7e7e3          	bltu	a5,a4,8001201e <_vsnprintf+0x9c6>
                    }
                }
                // string output
                while ((*p != 0) &&
    80012054:	a03d                	j	80012082 <_vsnprintf+0xa2a>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
                    out(*(p++), buffer, idx++, maxlen);
    80012056:	fc843783          	ld	a5,-56(s0)
    8001205a:	00178713          	addi	a4,a5,1
    8001205e:	fce43423          	sd	a4,-56(s0)
    80012062:	0007c503          	lbu	a0,0(a5)
    80012066:	fd843783          	ld	a5,-40(s0)
    8001206a:	00178713          	addi	a4,a5,1
    8001206e:	fce43c23          	sd	a4,-40(s0)
    80012072:	f9843703          	ld	a4,-104(s0)
    80012076:	f8843683          	ld	a3,-120(s0)
    8001207a:	863e                	mv	a2,a5
    8001207c:	f9043583          	ld	a1,-112(s0)
    80012080:	9702                	jalr	a4
                while ((*p != 0) &&
    80012082:	fc843783          	ld	a5,-56(s0)
    80012086:	0007c783          	lbu	a5,0(a5)
    8001208a:	cf91                	beqz	a5,800120a6 <_vsnprintf+0xa4e>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    8001208c:	fec42783          	lw	a5,-20(s0)
    80012090:	4007f793          	andi	a5,a5,1024
    80012094:	2781                	sext.w	a5,a5
                while ((*p != 0) &&
    80012096:	d3e1                	beqz	a5,80012056 <_vsnprintf+0x9fe>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    80012098:	fe442783          	lw	a5,-28(s0)
    8001209c:	fff7871b          	addiw	a4,a5,-1
    800120a0:	fee42223          	sw	a4,-28(s0)
    800120a4:	fbcd                	bnez	a5,80012056 <_vsnprintf+0x9fe>
                }
                // post padding
                if (flags & FLAGS_LEFT) {
    800120a6:	fec42783          	lw	a5,-20(s0)
    800120aa:	8b89                	andi	a5,a5,2
    800120ac:	2781                	sext.w	a5,a5
    800120ae:	cf8d                	beqz	a5,800120e8 <_vsnprintf+0xa90>
                    while (l++ < width) {
    800120b0:	a00d                	j	800120d2 <_vsnprintf+0xa7a>
                        out(' ', buffer, idx++, maxlen);
    800120b2:	fd843783          	ld	a5,-40(s0)
    800120b6:	00178713          	addi	a4,a5,1
    800120ba:	fce43c23          	sd	a4,-40(s0)
    800120be:	f9843703          	ld	a4,-104(s0)
    800120c2:	f8843683          	ld	a3,-120(s0)
    800120c6:	863e                	mv	a2,a5
    800120c8:	f9043583          	ld	a1,-112(s0)
    800120cc:	02000513          	li	a0,32
    800120d0:	9702                	jalr	a4
                    while (l++ < width) {
    800120d2:	fc442783          	lw	a5,-60(s0)
    800120d6:	0017871b          	addiw	a4,a5,1
    800120da:	fce42223          	sw	a4,-60(s0)
    800120de:	fe842703          	lw	a4,-24(s0)
    800120e2:	2701                	sext.w	a4,a4
    800120e4:	fce7e7e3          	bltu	a5,a4,800120b2 <_vsnprintf+0xa5a>
                    }
                }
                format++;
    800120e8:	f8043783          	ld	a5,-128(s0)
    800120ec:	0785                	addi	a5,a5,1
    800120ee:	f8f43023          	sd	a5,-128(s0)
                break;
    800120f2:	a239                	j	80012200 <_vsnprintf+0xba8>
            }

            case 'p': {
                width = sizeof(void *) * 2U;
    800120f4:	47c1                	li	a5,16
    800120f6:	fef42423          	sw	a5,-24(s0)
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    800120fa:	fec42783          	lw	a5,-20(s0)
    800120fe:	0217e793          	ori	a5,a5,33
    80012102:	fef42623          	sw	a5,-20(s0)
#if defined(PRINTF_SUPPORT_LONG_LONG)
                const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    80012106:	4785                	li	a5,1
    80012108:	faf40da3          	sb	a5,-69(s0)
                if (is_ll) {
    8001210c:	fbb44783          	lbu	a5,-69(s0)
    80012110:	0ff7f793          	andi	a5,a5,255
    80012114:	c3b1                	beqz	a5,80012158 <_vsnprintf+0xb00>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                          (uintptr_t)va_arg(va, void *), false,
    80012116:	f7843783          	ld	a5,-136(s0)
    8001211a:	00878713          	addi	a4,a5,8
    8001211e:	f6e43c23          	sd	a4,-136(s0)
    80012122:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
    80012124:	86be                	mv	a3,a5
    80012126:	fe442703          	lw	a4,-28(s0)
    8001212a:	fec42783          	lw	a5,-20(s0)
    8001212e:	e43e                	sd	a5,8(sp)
    80012130:	fe842783          	lw	a5,-24(s0)
    80012134:	e03e                	sd	a5,0(sp)
    80012136:	88ba                	mv	a7,a4
    80012138:	4841                	li	a6,16
    8001213a:	4781                	li	a5,0
    8001213c:	8736                	mv	a4,a3
    8001213e:	f8843683          	ld	a3,-120(s0)
    80012142:	fd843603          	ld	a2,-40(s0)
    80012146:	f9043583          	ld	a1,-112(s0)
    8001214a:	f9843503          	ld	a0,-104(s0)
    8001214e:	9e5fe0ef          	jal	ra,80010b32 <_ntoa_long_long>
    80012152:	fca43c23          	sd	a0,-40(s0)
    80012156:	a089                	j	80012198 <_vsnprintf+0xb40>
                }
                else {
#endif
                    idx = _ntoa_long(
                        out, buffer, idx, maxlen,
                        (unsigned long)((uintptr_t)va_arg(va, void *)), false,
    80012158:	f7843783          	ld	a5,-136(s0)
    8001215c:	00878713          	addi	a4,a5,8
    80012160:	f6e43c23          	sd	a4,-136(s0)
    80012164:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long(
    80012166:	86be                	mv	a3,a5
    80012168:	fe442703          	lw	a4,-28(s0)
    8001216c:	fec42783          	lw	a5,-20(s0)
    80012170:	e43e                	sd	a5,8(sp)
    80012172:	fe842783          	lw	a5,-24(s0)
    80012176:	e03e                	sd	a5,0(sp)
    80012178:	88ba                	mv	a7,a4
    8001217a:	4841                	li	a6,16
    8001217c:	4781                	li	a5,0
    8001217e:	8736                	mv	a4,a3
    80012180:	f8843683          	ld	a3,-120(s0)
    80012184:	fd843603          	ld	a2,-40(s0)
    80012188:	f9043583          	ld	a1,-112(s0)
    8001218c:	f9843503          	ld	a0,-104(s0)
    80012190:	88bfe0ef          	jal	ra,80010a1a <_ntoa_long>
    80012194:	fca43c23          	sd	a0,-40(s0)
                        16U, precision, width, flags);
#if defined(PRINTF_SUPPORT_LONG_LONG)
                }
#endif
                format++;
    80012198:	f8043783          	ld	a5,-128(s0)
    8001219c:	0785                	addi	a5,a5,1
    8001219e:	f8f43023          	sd	a5,-128(s0)
                break;
    800121a2:	a8b9                	j	80012200 <_vsnprintf+0xba8>
            }

            case '%':
                out('%', buffer, idx++, maxlen);
    800121a4:	fd843783          	ld	a5,-40(s0)
    800121a8:	00178713          	addi	a4,a5,1
    800121ac:	fce43c23          	sd	a4,-40(s0)
    800121b0:	f9843703          	ld	a4,-104(s0)
    800121b4:	f8843683          	ld	a3,-120(s0)
    800121b8:	863e                	mv	a2,a5
    800121ba:	f9043583          	ld	a1,-112(s0)
    800121be:	02500513          	li	a0,37
    800121c2:	9702                	jalr	a4
                format++;
    800121c4:	f8043783          	ld	a5,-128(s0)
    800121c8:	0785                	addi	a5,a5,1
    800121ca:	f8f43023          	sd	a5,-128(s0)
                break;
    800121ce:	a80d                	j	80012200 <_vsnprintf+0xba8>

            default:
                out(*format, buffer, idx++, maxlen);
    800121d0:	f8043783          	ld	a5,-128(s0)
    800121d4:	0007c503          	lbu	a0,0(a5)
    800121d8:	fd843783          	ld	a5,-40(s0)
    800121dc:	00178713          	addi	a4,a5,1
    800121e0:	fce43c23          	sd	a4,-40(s0)
    800121e4:	f9843703          	ld	a4,-104(s0)
    800121e8:	f8843683          	ld	a3,-120(s0)
    800121ec:	863e                	mv	a2,a5
    800121ee:	f9043583          	ld	a1,-112(s0)
    800121f2:	9702                	jalr	a4
                format++;
    800121f4:	f8043783          	ld	a5,-128(s0)
    800121f8:	0785                	addi	a5,a5,1
    800121fa:	f8f43023          	sd	a5,-128(s0)
                break;
    800121fe:	0001                	nop
    while (*format) {
    80012200:	f8043783          	ld	a5,-128(s0)
    80012204:	0007c783          	lbu	a5,0(a5)
    80012208:	c8079463          	bnez	a5,80011690 <_vsnprintf+0x38>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    8001220c:	fd843703          	ld	a4,-40(s0)
    80012210:	f8843783          	ld	a5,-120(s0)
    80012214:	00f76663          	bltu	a4,a5,80012220 <_vsnprintf+0xbc8>
    80012218:	f8843783          	ld	a5,-120(s0)
    8001221c:	17fd                	addi	a5,a5,-1
    8001221e:	a019                	j	80012224 <_vsnprintf+0xbcc>
    80012220:	fd843783          	ld	a5,-40(s0)
    80012224:	f9843703          	ld	a4,-104(s0)
    80012228:	f8843683          	ld	a3,-120(s0)
    8001222c:	863e                	mv	a2,a5
    8001222e:	f9043583          	ld	a1,-112(s0)
    80012232:	4501                	li	a0,0
    80012234:	9702                	jalr	a4

    // return written chars without terminating \0
    return (int)idx;
    80012236:	fd843783          	ld	a5,-40(s0)
    8001223a:	2781                	sext.w	a5,a5
}
    8001223c:	853e                	mv	a0,a5
    8001223e:	60ea                	ld	ra,152(sp)
    80012240:	644a                	ld	s0,144(sp)
    80012242:	610d                	addi	sp,sp,160
    80012244:	8082                	ret

0000000080012246 <printf>:

///////////////////////////////////////////////////////////////////////////////

int printf(const char *format, ...)
{
    80012246:	7119                	addi	sp,sp,-128
    80012248:	fc06                	sd	ra,56(sp)
    8001224a:	f822                	sd	s0,48(sp)
    8001224c:	0080                	addi	s0,sp,64
    8001224e:	fca43423          	sd	a0,-56(s0)
    80012252:	e40c                	sd	a1,8(s0)
    80012254:	e810                	sd	a2,16(s0)
    80012256:	ec14                	sd	a3,24(s0)
    80012258:	f018                	sd	a4,32(s0)
    8001225a:	f41c                	sd	a5,40(s0)
    8001225c:	03043823          	sd	a6,48(s0)
    80012260:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, format);
    80012264:	04040793          	addi	a5,s0,64
    80012268:	fcf43023          	sd	a5,-64(s0)
    8001226c:	fc043783          	ld	a5,-64(s0)
    80012270:	fc878793          	addi	a5,a5,-56
    80012274:	fef43023          	sd	a5,-32(s0)
    char buffer[1];
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80012278:	fe043703          	ld	a4,-32(s0)
    8001227c:	fd840793          	addi	a5,s0,-40
    80012280:	fc843683          	ld	a3,-56(s0)
    80012284:	567d                	li	a2,-1
    80012286:	85be                	mv	a1,a5
    80012288:	ffffe517          	auipc	a0,0xffffe
    8001228c:	27050513          	addi	a0,a0,624 # 800104f8 <_out_char>
    80012290:	bc8ff0ef          	jal	ra,80011658 <_vsnprintf>
    80012294:	87aa                	mv	a5,a0
    80012296:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    8001229a:	fec42783          	lw	a5,-20(s0)
}
    8001229e:	853e                	mv	a0,a5
    800122a0:	70e2                	ld	ra,56(sp)
    800122a2:	7442                	ld	s0,48(sp)
    800122a4:	6109                	addi	sp,sp,128
    800122a6:	8082                	ret

00000000800122a8 <sprintf>:

int sprintf(char *buffer, const char *format, ...)
{
    800122a8:	7159                	addi	sp,sp,-112
    800122aa:	fc06                	sd	ra,56(sp)
    800122ac:	f822                	sd	s0,48(sp)
    800122ae:	0080                	addi	s0,sp,64
    800122b0:	fca43c23          	sd	a0,-40(s0)
    800122b4:	fcb43823          	sd	a1,-48(s0)
    800122b8:	e010                	sd	a2,0(s0)
    800122ba:	e414                	sd	a3,8(s0)
    800122bc:	e818                	sd	a4,16(s0)
    800122be:	ec1c                	sd	a5,24(s0)
    800122c0:	03043023          	sd	a6,32(s0)
    800122c4:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    800122c8:	03040793          	addi	a5,s0,48
    800122cc:	fcf43423          	sd	a5,-56(s0)
    800122d0:	fc843783          	ld	a5,-56(s0)
    800122d4:	fd078793          	addi	a5,a5,-48
    800122d8:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    800122dc:	fe043783          	ld	a5,-32(s0)
    800122e0:	873e                	mv	a4,a5
    800122e2:	fd043683          	ld	a3,-48(s0)
    800122e6:	567d                	li	a2,-1
    800122e8:	fd843583          	ld	a1,-40(s0)
    800122ec:	ffffe517          	auipc	a0,0xffffe
    800122f0:	1ae50513          	addi	a0,a0,430 # 8001049a <_out_buffer>
    800122f4:	b64ff0ef          	jal	ra,80011658 <_vsnprintf>
    800122f8:	87aa                	mv	a5,a0
    800122fa:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    800122fe:	fec42783          	lw	a5,-20(s0)
}
    80012302:	853e                	mv	a0,a5
    80012304:	70e2                	ld	ra,56(sp)
    80012306:	7442                	ld	s0,48(sp)
    80012308:	6165                	addi	sp,sp,112
    8001230a:	8082                	ret

000000008001230c <snprintf>:

int snprintf(char *buffer, size_t count, const char *format, ...)
{
    8001230c:	7159                	addi	sp,sp,-112
    8001230e:	fc06                	sd	ra,56(sp)
    80012310:	f822                	sd	s0,48(sp)
    80012312:	0080                	addi	s0,sp,64
    80012314:	fca43c23          	sd	a0,-40(s0)
    80012318:	fcb43823          	sd	a1,-48(s0)
    8001231c:	fcc43423          	sd	a2,-56(s0)
    80012320:	e414                	sd	a3,8(s0)
    80012322:	e818                	sd	a4,16(s0)
    80012324:	ec1c                	sd	a5,24(s0)
    80012326:	03043023          	sd	a6,32(s0)
    8001232a:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    8001232e:	03040793          	addi	a5,s0,48
    80012332:	fcf43023          	sd	a5,-64(s0)
    80012336:	fc043783          	ld	a5,-64(s0)
    8001233a:	fd878793          	addi	a5,a5,-40
    8001233e:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    80012342:	fe043783          	ld	a5,-32(s0)
    80012346:	873e                	mv	a4,a5
    80012348:	fc843683          	ld	a3,-56(s0)
    8001234c:	fd043603          	ld	a2,-48(s0)
    80012350:	fd843583          	ld	a1,-40(s0)
    80012354:	ffffe517          	auipc	a0,0xffffe
    80012358:	14650513          	addi	a0,a0,326 # 8001049a <_out_buffer>
    8001235c:	afcff0ef          	jal	ra,80011658 <_vsnprintf>
    80012360:	87aa                	mv	a5,a0
    80012362:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    80012366:	fec42783          	lw	a5,-20(s0)
}
    8001236a:	853e                	mv	a0,a5
    8001236c:	70e2                	ld	ra,56(sp)
    8001236e:	7442                	ld	s0,48(sp)
    80012370:	6165                	addi	sp,sp,112
    80012372:	8082                	ret

0000000080012374 <vprintf_>:

int vprintf_(const char *format, va_list va)
{
    80012374:	7179                	addi	sp,sp,-48
    80012376:	f406                	sd	ra,40(sp)
    80012378:	f022                	sd	s0,32(sp)
    8001237a:	1800                	addi	s0,sp,48
    8001237c:	fca43c23          	sd	a0,-40(s0)
    80012380:	fcb43823          	sd	a1,-48(s0)
    char buffer[1];
    return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80012384:	fe840793          	addi	a5,s0,-24
    80012388:	fd043703          	ld	a4,-48(s0)
    8001238c:	fd843683          	ld	a3,-40(s0)
    80012390:	567d                	li	a2,-1
    80012392:	85be                	mv	a1,a5
    80012394:	ffffe517          	auipc	a0,0xffffe
    80012398:	16450513          	addi	a0,a0,356 # 800104f8 <_out_char>
    8001239c:	abcff0ef          	jal	ra,80011658 <_vsnprintf>
    800123a0:	87aa                	mv	a5,a0
}
    800123a2:	853e                	mv	a0,a5
    800123a4:	70a2                	ld	ra,40(sp)
    800123a6:	7402                	ld	s0,32(sp)
    800123a8:	6145                	addi	sp,sp,48
    800123aa:	8082                	ret

00000000800123ac <vsnprintf_>:

int vsnprintf_(char *buffer, size_t count, const char *format, va_list va)
{
    800123ac:	7179                	addi	sp,sp,-48
    800123ae:	f406                	sd	ra,40(sp)
    800123b0:	f022                	sd	s0,32(sp)
    800123b2:	1800                	addi	s0,sp,48
    800123b4:	fea43423          	sd	a0,-24(s0)
    800123b8:	feb43023          	sd	a1,-32(s0)
    800123bc:	fcc43c23          	sd	a2,-40(s0)
    800123c0:	fcd43823          	sd	a3,-48(s0)
    return _vsnprintf(_out_buffer, buffer, count, format, va);
    800123c4:	fd043703          	ld	a4,-48(s0)
    800123c8:	fd843683          	ld	a3,-40(s0)
    800123cc:	fe043603          	ld	a2,-32(s0)
    800123d0:	fe843583          	ld	a1,-24(s0)
    800123d4:	ffffe517          	auipc	a0,0xffffe
    800123d8:	0c650513          	addi	a0,a0,198 # 8001049a <_out_buffer>
    800123dc:	a7cff0ef          	jal	ra,80011658 <_vsnprintf>
    800123e0:	87aa                	mv	a5,a0
}
    800123e2:	853e                	mv	a0,a5
    800123e4:	70a2                	ld	ra,40(sp)
    800123e6:	7402                	ld	s0,32(sp)
    800123e8:	6145                	addi	sp,sp,48
    800123ea:	8082                	ret

00000000800123ec <fctprintf>:

int fctprintf(void (*out)(char character, void *arg), void *arg,
              const char *format, ...)
{
    800123ec:	7119                	addi	sp,sp,-128
    800123ee:	e486                	sd	ra,72(sp)
    800123f0:	e0a2                	sd	s0,64(sp)
    800123f2:	0880                	addi	s0,sp,80
    800123f4:	fca43423          	sd	a0,-56(s0)
    800123f8:	fcb43023          	sd	a1,-64(s0)
    800123fc:	fac43c23          	sd	a2,-72(s0)
    80012400:	e414                	sd	a3,8(s0)
    80012402:	e818                	sd	a4,16(s0)
    80012404:	ec1c                	sd	a5,24(s0)
    80012406:	03043023          	sd	a6,32(s0)
    8001240a:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    8001240e:	03040793          	addi	a5,s0,48
    80012412:	faf43823          	sd	a5,-80(s0)
    80012416:	fb043783          	ld	a5,-80(s0)
    8001241a:	fd878793          	addi	a5,a5,-40
    8001241e:	fef43023          	sd	a5,-32(s0)
    const out_fct_wrap_type out_fct_wrap = {out, arg};
    80012422:	fc843783          	ld	a5,-56(s0)
    80012426:	fcf43823          	sd	a5,-48(s0)
    8001242a:	fc043783          	ld	a5,-64(s0)
    8001242e:	fcf43c23          	sd	a5,-40(s0)
    const int ret = _vsnprintf(_out_fct, (char *)(uintptr_t)&out_fct_wrap,
    80012432:	fe043703          	ld	a4,-32(s0)
    80012436:	fd040793          	addi	a5,s0,-48
    8001243a:	fb843683          	ld	a3,-72(s0)
    8001243e:	567d                	li	a2,-1
    80012440:	85be                	mv	a1,a5
    80012442:	ffffe517          	auipc	a0,0xffffe
    80012446:	0ee50513          	addi	a0,a0,238 # 80010530 <_out_fct>
    8001244a:	a0eff0ef          	jal	ra,80011658 <_vsnprintf>
    8001244e:	87aa                	mv	a5,a0
    80012450:	fef42623          	sw	a5,-20(s0)
                               (size_t)-1, format, va);
    va_end(va);
    return ret;
    80012454:	fec42783          	lw	a5,-20(s0)
}
    80012458:	853e                	mv	a0,a5
    8001245a:	60a6                	ld	ra,72(sp)
    8001245c:	6406                	ld	s0,64(sp)
    8001245e:	6109                	addi	sp,sp,128
    80012460:	8082                	ret

0000000080012462 <c_trap_handler>:
// From src/syscall.c
void syscall_handle(int hart, uint64_t epc, int64_t *scratch);

// Called from asm/spawn.S: _spawn_trap
void c_trap_handler(void)
{
    80012462:	7139                	addi	sp,sp,-64
    80012464:	fc06                	sd	ra,56(sp)
    80012466:	f822                	sd	s0,48(sp)
    80012468:	0080                	addi	s0,sp,64
    unsigned long cause;
    long *scratch;
    unsigned long epc;
    unsigned long tval;
    CSR_READ(cause, "scause");
    8001246a:	142027f3          	csrr	a5,scause
    8001246e:	fef43423          	sd	a5,-24(s0)
    CSR_READ(scratch, "sscratch");
    80012472:	140027f3          	csrr	a5,sscratch
    80012476:	fef43023          	sd	a5,-32(s0)
    CSR_READ(epc, "sepc");
    8001247a:	141027f3          	csrr	a5,sepc
    8001247e:	fcf43c23          	sd	a5,-40(s0)
    CSR_READ(tval, "stval");
    80012482:	143027f3          	csrr	a5,stval
    80012486:	fcf43823          	sd	a5,-48(s0)
    
    int hart = sbi_whoami();
    8001248a:	413010ef          	jal	ra,8001409c <sbi_whoami>
    8001248e:	87aa                	mv	a5,a0
    80012490:	fcf42623          	sw	a5,-52(s0)

    if (SCAUSE_IS_ASYNC(cause)) {
    80012494:	fe843783          	ld	a5,-24(s0)
    80012498:	0407d563          	bgez	a5,800124e2 <c_trap_handler+0x80>
        cause = SCAUSE_NUM(cause);
    8001249c:	fe843783          	ld	a5,-24(s0)
    800124a0:	0ff7f793          	andi	a5,a5,255
    800124a4:	fef43423          	sd	a5,-24(s0)
        switch (cause) {
    800124a8:	fe843703          	ld	a4,-24(s0)
    800124ac:	4795                	li	a5,5
    800124ae:	00f70863          	beq	a4,a5,800124be <c_trap_handler+0x5c>
    800124b2:	fe843703          	ld	a4,-24(s0)
    800124b6:	47a5                	li	a5,9
    800124b8:	00f70663          	beq	a4,a5,800124c4 <c_trap_handler+0x62>
    800124bc:	a811                	j	800124d0 <c_trap_handler+0x6e>
            case CAUSE_STIP:
                // Ack timer will reset the timer to INFINITE
                // In src/sbi.c
                sbi_ack_timer();
    800124be:	3a9010ef          	jal	ra,80014066 <sbi_ack_timer>
                // We typically invoke our scheduler if we get a timer
                // sched_invoke(hart);
                break;
    800124c2:	a08d                	j	80012524 <c_trap_handler+0xc2>
            case CAUSE_SEIP:
                // Forward to src/plic.c
                plic_handle_irq(hart);
    800124c4:	fcc42783          	lw	a5,-52(s0)
    800124c8:	853e                	mv	a0,a5
    800124ca:	687010ef          	jal	ra,80014350 <plic_handle_irq>
                break;
    800124ce:	a899                	j	80012524 <c_trap_handler+0xc2>
            default:
                debugf("Unhandled Asynchronous interrupt %ld\n", cause);
    800124d0:	fe843583          	ld	a1,-24(s0)
    800124d4:	00007517          	auipc	a0,0x7
    800124d8:	e4450513          	addi	a0,a0,-444 # 80019318 <pow10.0+0xe8>
    800124dc:	113010ef          	jal	ra,80013dee <debugf>
                break;
    800124e0:	a091                	j	80012524 <c_trap_handler+0xc2>
        }
    }
    else {
        switch (cause) {
    800124e2:	fe843703          	ld	a4,-24(s0)
    800124e6:	47a1                	li	a5,8
    800124e8:	00f71c63          	bne	a4,a5,80012500 <c_trap_handler+0x9e>
            case CAUSE_ECALL_U_MODE:  // ECALL U-Mode
                // Forward to src/syscall.c
                syscall_handle(hart, epc, scratch);
    800124ec:	fcc42783          	lw	a5,-52(s0)
    800124f0:	fe043603          	ld	a2,-32(s0)
    800124f4:	fd843583          	ld	a1,-40(s0)
    800124f8:	853e                	mv	a0,a5
    800124fa:	ef3fd0ef          	jal	ra,800103ec <syscall_handle>
                break;
    800124fe:	a01d                	j	80012524 <c_trap_handler+0xc2>
            default:
                debugf(
    80012500:	fcc42783          	lw	a5,-52(s0)
    80012504:	873e                	mv	a4,a5
    80012506:	fd043683          	ld	a3,-48(s0)
    8001250a:	fd843603          	ld	a2,-40(s0)
    8001250e:	fe843583          	ld	a1,-24(s0)
    80012512:	00007517          	auipc	a0,0x7
    80012516:	e2e50513          	addi	a0,a0,-466 # 80019340 <pow10.0+0x110>
    8001251a:	0d5010ef          	jal	ra,80013dee <debugf>
                    "Unhandled Synchronous interrupt %ld @ 0x%08lx [0x%08lx]. "
                    "Hanging hart %d\n",
                    cause, epc, tval, hart);
                WFI_LOOP();
    8001251e:	10500073          	wfi
    80012522:	bff5                	j	8001251e <c_trap_handler+0xbc>
                break;
        }
    }
}
    80012524:	0001                	nop
    80012526:	70e2                	ld	ra,56(sp)
    80012528:	7442                	ld	s0,48(sp)
    8001252a:	6121                	addi	sp,sp,64
    8001252c:	8082                	ret

000000008001252e <pci_init>:
#include <pci.h>

void pci_init(void)
{
    8001252e:	1141                	addi	sp,sp,-16
    80012530:	e422                	sd	s0,8(sp)
    80012532:	0800                	addi	s0,sp,16
    // Initialize and enumerate all PCI bridges and devices.

    // This should forward all virtio devices to the virtio drivers.
}
    80012534:	0001                	nop
    80012536:	6422                	ld	s0,8(sp)
    80012538:	0141                	addi	sp,sp,16
    8001253a:	8082                	ret

000000008001253c <pci_dispatch_irq>:

void pci_dispatch_irq(int irq)
{
    8001253c:	1101                	addi	sp,sp,-32
    8001253e:	ec22                	sd	s0,24(sp)
    80012540:	1000                	addi	s0,sp,32
    80012542:	87aa                	mv	a5,a0
    80012544:	fef42623          	sw	a5,-20(s0)
    (void)irq;

    // An IRQ came from the PLIC, but recall PCI devices
    // share IRQs. So, you need to check the ISR register
    // of potential virtio devices.
}
    80012548:	0001                	nop
    8001254a:	6462                	ld	s0,24(sp)
    8001254c:	6105                	addi	sp,sp,32
    8001254e:	8082                	ret

0000000080012550 <mutex_trylock>:
#include <config.h>
#include <lock.h>
#include <compiler.h>

bool mutex_trylock(Mutex *mutex)
{
    80012550:	7179                	addi	sp,sp,-48
    80012552:	f422                	sd	s0,40(sp)
    80012554:	1800                	addi	s0,sp,48
    80012556:	fca43c23          	sd	a0,-40(s0)
    int old;
    asm volatile("amoswap.w.aq %0, %1, (%2)" : "=r"(old) : "r"(MUTEX_LOCKED), "r"(mutex));
    8001255a:	4785                	li	a5,1
    8001255c:	fd843703          	ld	a4,-40(s0)
    80012560:	0cf727af          	amoswap.w.aq	a5,a5,(a4)
    80012564:	fef42623          	sw	a5,-20(s0)
    // If old == MUTEX_LOCKED, that means the mutex was already
    // locked when we tried to lock it. That means we didn't acquire
    // it.
    return old != MUTEX_LOCKED;
    80012568:	fec42783          	lw	a5,-20(s0)
    8001256c:	0007871b          	sext.w	a4,a5
    80012570:	4785                	li	a5,1
    80012572:	40f707b3          	sub	a5,a4,a5
    80012576:	00f037b3          	snez	a5,a5
    8001257a:	0ff7f793          	andi	a5,a5,255
}
    8001257e:	853e                	mv	a0,a5
    80012580:	7422                	ld	s0,40(sp)
    80012582:	6145                	addi	sp,sp,48
    80012584:	8082                	ret

0000000080012586 <mutex_spinlock>:

void mutex_spinlock(Mutex *mutex)
{
    80012586:	1101                	addi	sp,sp,-32
    80012588:	ec06                	sd	ra,24(sp)
    8001258a:	e822                	sd	s0,16(sp)
    8001258c:	1000                	addi	s0,sp,32
    8001258e:	fea43423          	sd	a0,-24(s0)
    while (!mutex_trylock(mutex))
    80012592:	0001                	nop
    80012594:	fe843503          	ld	a0,-24(s0)
    80012598:	fb9ff0ef          	jal	ra,80012550 <mutex_trylock>
    8001259c:	87aa                	mv	a5,a0
    8001259e:	0017c793          	xori	a5,a5,1
    800125a2:	0ff7f793          	andi	a5,a5,255
    800125a6:	f7fd                	bnez	a5,80012594 <mutex_spinlock+0xe>
        ;
}
    800125a8:	0001                	nop
    800125aa:	0001                	nop
    800125ac:	60e2                	ld	ra,24(sp)
    800125ae:	6442                	ld	s0,16(sp)
    800125b0:	6105                	addi	sp,sp,32
    800125b2:	8082                	ret

00000000800125b4 <mutex_unlock>:

void mutex_unlock(Mutex *mutex)
{
    800125b4:	1101                	addi	sp,sp,-32
    800125b6:	ec22                	sd	s0,24(sp)
    800125b8:	1000                	addi	s0,sp,32
    800125ba:	fea43423          	sd	a0,-24(s0)
    asm volatile("amoswap.w.rl zero, zero, (%0)" : : "r"(mutex));
    800125be:	fe843783          	ld	a5,-24(s0)
    800125c2:	0a07a02f          	amoswap.w.rl	zero,zero,(a5)
}
    800125c6:	0001                	nop
    800125c8:	6462                	ld	s0,24(sp)
    800125ca:	6105                	addi	sp,sp,32
    800125cc:	8082                	ret

00000000800125ce <mmu_table_create>:
#define ADDR_1_BIT   21
#define ADDR_2_BIT   30


struct page_table *mmu_table_create(void)
{
    800125ce:	1141                	addi	sp,sp,-16
    800125d0:	e406                	sd	ra,8(sp)
    800125d2:	e022                	sd	s0,0(sp)
    800125d4:	0800                	addi	s0,sp,16
    return page_zalloc();
    800125d6:	4505                	li	a0,1
    800125d8:	3ec020ef          	jal	ra,800149c4 <page_znalloc>
    800125dc:	87aa                	mv	a5,a0
}
    800125de:	853e                	mv	a0,a5
    800125e0:	60a2                	ld	ra,8(sp)
    800125e2:	6402                	ld	s0,0(sp)
    800125e4:	0141                	addi	sp,sp,16
    800125e6:	8082                	ret

00000000800125e8 <is_valid>:

// Check the valid bit of a page table entry.
static inline bool is_valid(unsigned long pte)
{
    800125e8:	1101                	addi	sp,sp,-32
    800125ea:	ec22                	sd	s0,24(sp)
    800125ec:	1000                	addi	s0,sp,32
    800125ee:	fea43423          	sd	a0,-24(s0)
    return pte & 1UL;
    800125f2:	fe843783          	ld	a5,-24(s0)
    800125f6:	8b85                	andi	a5,a5,1
    800125f8:	00f037b3          	snez	a5,a5
    800125fc:	0ff7f793          	andi	a5,a5,255
}
    80012600:	853e                	mv	a0,a5
    80012602:	6462                	ld	s0,24(sp)
    80012604:	6105                	addi	sp,sp,32
    80012606:	8082                	ret

0000000080012608 <mmu_map>:
{
    return (pte & 0xE) != 0;
}

bool mmu_map(struct page_table *tab, uint64_t vaddr, uint64_t paddr, uint8_t lvl, uint64_t bits)
{
    80012608:	7135                	addi	sp,sp,-160
    8001260a:	ed06                	sd	ra,152(sp)
    8001260c:	e922                	sd	s0,144(sp)
    8001260e:	1100                	addi	s0,sp,160
    80012610:	f8a43423          	sd	a0,-120(s0)
    80012614:	f8b43023          	sd	a1,-128(s0)
    80012618:	f6c43c23          	sd	a2,-136(s0)
    8001261c:	87b6                	mv	a5,a3
    8001261e:	f6e43423          	sd	a4,-152(s0)
    80012622:	f6f40ba3          	sb	a5,-137(s0)
    if (tab == NULL || lvl > MMU_LEVEL_1G || (bits & 0xE) == 0) {
    80012626:	f8843783          	ld	a5,-120(s0)
    8001262a:	cf81                	beqz	a5,80012642 <mmu_map+0x3a>
    8001262c:	f7744783          	lbu	a5,-137(s0)
    80012630:	0ff7f713          	andi	a4,a5,255
    80012634:	4789                	li	a5,2
    80012636:	00e7e663          	bltu	a5,a4,80012642 <mmu_map+0x3a>
    8001263a:	f6843783          	ld	a5,-152(s0)
    8001263e:	8bb9                	andi	a5,a5,14
    80012640:	eb89                	bnez	a5,80012652 <mmu_map+0x4a>
        debugf("mmu_map: invalid argument");
    80012642:	00007517          	auipc	a0,0x7
    80012646:	d4e50513          	addi	a0,a0,-690 # 80019390 <pow10.0+0x160>
    8001264a:	7a4010ef          	jal	ra,80013dee <debugf>
        return false;
    8001264e:	4781                	li	a5,0
    80012650:	a425                	j	80012878 <mmu_map+0x270>
    }

    debugf("mmu_map: vaddr == 0x%08lx\n", vaddr);
    80012652:	f8043583          	ld	a1,-128(s0)
    80012656:	00007517          	auipc	a0,0x7
    8001265a:	d5a50513          	addi	a0,a0,-678 # 800193b0 <pow10.0+0x180>
    8001265e:	790010ef          	jal	ra,80013dee <debugf>
    debugf("mmu_map: paddr == 0x%08lx\n", paddr);
    80012662:	f7843583          	ld	a1,-136(s0)
    80012666:	00007517          	auipc	a0,0x7
    8001266a:	d6a50513          	addi	a0,a0,-662 # 800193d0 <pow10.0+0x1a0>
    8001266e:	780010ef          	jal	ra,80013dee <debugf>

    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    80012672:	f8043783          	ld	a5,-128(s0)
    80012676:	83b1                	srli	a5,a5,0xc
    80012678:	1ff7f793          	andi	a5,a5,511
    8001267c:	faf43823          	sd	a5,-80(s0)
    80012680:	f8043783          	ld	a5,-128(s0)
    80012684:	83d5                	srli	a5,a5,0x15
    80012686:	1ff7f793          	andi	a5,a5,511
    8001268a:	faf43c23          	sd	a5,-72(s0)
                            (vaddr >> ADDR_2_BIT) & 0x1FF};
    8001268e:	f8043783          	ld	a5,-128(s0)
    80012692:	83f9                	srli	a5,a5,0x1e
    80012694:	1ff7f793          	andi	a5,a5,511
    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    80012698:	fcf43023          	sd	a5,-64(s0)
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    8001269c:	f7843783          	ld	a5,-136(s0)
    800126a0:	83b1                	srli	a5,a5,0xc
    800126a2:	1ff7f793          	andi	a5,a5,511
    800126a6:	f8f43c23          	sd	a5,-104(s0)
    800126aa:	f7843783          	ld	a5,-136(s0)
    800126ae:	83d5                	srli	a5,a5,0x15
    800126b0:	1ff7f793          	andi	a5,a5,511
    800126b4:	faf43023          	sd	a5,-96(s0)
                            (paddr >> ADDR_2_BIT) & 0x3FFFFFF};
    800126b8:	f7843783          	ld	a5,-136(s0)
    800126bc:	01e7d713          	srli	a4,a5,0x1e
    800126c0:	040007b7          	lui	a5,0x4000
    800126c4:	17fd                	addi	a5,a5,-1
    800126c6:	8ff9                	and	a5,a5,a4
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    800126c8:	faf43423          	sd	a5,-88(s0)

    int i;
    struct page_table *pt = tab;
    800126cc:	f8843783          	ld	a5,-120(s0)
    800126d0:	fef43023          	sd	a5,-32(s0)

    for (i = MMU_LEVEL_1G; i > lvl; i -= 1) {
    800126d4:	4789                	li	a5,2
    800126d6:	fef42623          	sw	a5,-20(s0)
    800126da:	a211                	j	800127de <mmu_map+0x1d6>
        unsigned long pte = pt->entries[vpn[i]];
    800126dc:	fec42783          	lw	a5,-20(s0)
    800126e0:	078e                	slli	a5,a5,0x3
    800126e2:	ff040713          	addi	a4,s0,-16
    800126e6:	97ba                	add	a5,a5,a4
    800126e8:	fc07b783          	ld	a5,-64(a5) # 3ffffc0 <i+0x3ffffa0>
    800126ec:	fe043703          	ld	a4,-32(s0)
    800126f0:	078e                	slli	a5,a5,0x3
    800126f2:	97ba                	add	a5,a5,a4
    800126f4:	639c                	ld	a5,0(a5)
    800126f6:	fcf43823          	sd	a5,-48(s0)

        if (!is_valid(pte)) {
    800126fa:	fd043503          	ld	a0,-48(s0)
    800126fe:	eebff0ef          	jal	ra,800125e8 <is_valid>
    80012702:	87aa                	mv	a5,a0
    80012704:	0017c793          	xori	a5,a5,1
    80012708:	0ff7f793          	andi	a5,a5,255
    8001270c:	c3cd                	beqz	a5,800127ae <mmu_map+0x1a6>
            debugf("mmu_map: entry %d in page table at 0x%08lx is invalid\n", vpn[i], pt);
    8001270e:	fec42783          	lw	a5,-20(s0)
    80012712:	078e                	slli	a5,a5,0x3
    80012714:	ff040713          	addi	a4,s0,-16
    80012718:	97ba                	add	a5,a5,a4
    8001271a:	fc07b783          	ld	a5,-64(a5)
    8001271e:	fe043603          	ld	a2,-32(s0)
    80012722:	85be                	mv	a1,a5
    80012724:	00007517          	auipc	a0,0x7
    80012728:	ccc50513          	addi	a0,a0,-820 # 800193f0 <pow10.0+0x1c0>
    8001272c:	6c2010ef          	jal	ra,80013dee <debugf>
            struct page_table *new_pt = mmu_table_create();
    80012730:	e9fff0ef          	jal	ra,800125ce <mmu_table_create>
    80012734:	fca43423          	sd	a0,-56(s0)
            if (new_pt == NULL) {
    80012738:	fc843783          	ld	a5,-56(s0)
    8001273c:	eb89                	bnez	a5,8001274e <mmu_map+0x146>
                debugf("mmu_map: mmu_table_create returned null");
    8001273e:	00007517          	auipc	a0,0x7
    80012742:	cea50513          	addi	a0,a0,-790 # 80019428 <pow10.0+0x1f8>
    80012746:	6a8010ef          	jal	ra,80013dee <debugf>
                return false;
    8001274a:	4781                	li	a5,0
    8001274c:	a235                	j	80012878 <mmu_map+0x270>
            }
            debugf("mmu_map: create a new page table at 0x%08lx\n", new_pt);
    8001274e:	fc843583          	ld	a1,-56(s0)
    80012752:	00007517          	auipc	a0,0x7
    80012756:	cfe50513          	addi	a0,a0,-770 # 80019450 <pow10.0+0x220>
    8001275a:	694010ef          	jal	ra,80013dee <debugf>
            pt->entries[vpn[i]] = (unsigned long)new_pt >> 2 | PB_VALID;
    8001275e:	fc843783          	ld	a5,-56(s0)
    80012762:	0027d713          	srli	a4,a5,0x2
    80012766:	fec42783          	lw	a5,-20(s0)
    8001276a:	078e                	slli	a5,a5,0x3
    8001276c:	ff040693          	addi	a3,s0,-16
    80012770:	97b6                	add	a5,a5,a3
    80012772:	fc07b783          	ld	a5,-64(a5)
    80012776:	00176713          	ori	a4,a4,1
    8001277a:	fe043683          	ld	a3,-32(s0)
    8001277e:	078e                	slli	a5,a5,0x3
    80012780:	97b6                	add	a5,a5,a3
    80012782:	e398                	sd	a4,0(a5)
            debugf("mmu_map: set entry %d in page table at 0x%08lx as lvl %d branch to 0x%08lx\n", vpn[i], pt, i, new_pt);
    80012784:	fec42783          	lw	a5,-20(s0)
    80012788:	078e                	slli	a5,a5,0x3
    8001278a:	ff040713          	addi	a4,s0,-16
    8001278e:	97ba                	add	a5,a5,a4
    80012790:	fc07b783          	ld	a5,-64(a5)
    80012794:	fec42683          	lw	a3,-20(s0)
    80012798:	fc843703          	ld	a4,-56(s0)
    8001279c:	fe043603          	ld	a2,-32(s0)
    800127a0:	85be                	mv	a1,a5
    800127a2:	00007517          	auipc	a0,0x7
    800127a6:	cde50513          	addi	a0,a0,-802 # 80019480 <pow10.0+0x250>
    800127aa:	644010ef          	jal	ra,80013dee <debugf>
        }
        pt = (struct page_table*)((pt->entries[vpn[i]] & ~0x3FF) << 2);
    800127ae:	fec42783          	lw	a5,-20(s0)
    800127b2:	078e                	slli	a5,a5,0x3
    800127b4:	ff040713          	addi	a4,s0,-16
    800127b8:	97ba                	add	a5,a5,a4
    800127ba:	fc07b783          	ld	a5,-64(a5)
    800127be:	fe043703          	ld	a4,-32(s0)
    800127c2:	078e                	slli	a5,a5,0x3
    800127c4:	97ba                	add	a5,a5,a4
    800127c6:	639c                	ld	a5,0(a5)
    800127c8:	00279713          	slli	a4,a5,0x2
    800127cc:	77fd                	lui	a5,0xfffff
    800127ce:	8ff9                	and	a5,a5,a4
    800127d0:	fef43023          	sd	a5,-32(s0)
    for (i = MMU_LEVEL_1G; i > lvl; i -= 1) {
    800127d4:	fec42783          	lw	a5,-20(s0)
    800127d8:	37fd                	addiw	a5,a5,-1
    800127da:	fef42623          	sw	a5,-20(s0)
    800127de:	f7744783          	lbu	a5,-137(s0)
    800127e2:	0007871b          	sext.w	a4,a5
    800127e6:	fec42783          	lw	a5,-20(s0)
    800127ea:	2781                	sext.w	a5,a5
    800127ec:	eef748e3          	blt	a4,a5,800126dc <mmu_map+0xd4>
    }

    unsigned long ppn_leaf = ppn[2] << PTE_PPN2_BIT |
    800127f0:	fa843783          	ld	a5,-88(s0)
    800127f4:	01c79713          	slli	a4,a5,0x1c
                             ppn[1] << PTE_PPN1_BIT |
    800127f8:	fa043783          	ld	a5,-96(s0)
    800127fc:	07ce                	slli	a5,a5,0x13
    unsigned long ppn_leaf = ppn[2] << PTE_PPN2_BIT |
    800127fe:	8f5d                	or	a4,a4,a5
                             ppn[0] << PTE_PPN0_BIT;
    80012800:	f9843783          	ld	a5,-104(s0)
    80012804:	07aa                	slli	a5,a5,0xa
    unsigned long ppn_leaf = ppn[2] << PTE_PPN2_BIT |
    80012806:	8fd9                	or	a5,a5,a4
    80012808:	fcf43c23          	sd	a5,-40(s0)
    
    debugf("mmu_map: ppn_leaf == 0x%x\n", (ppn_leaf << 2));
    8001280c:	fd843783          	ld	a5,-40(s0)
    80012810:	078a                	slli	a5,a5,0x2
    80012812:	85be                	mv	a1,a5
    80012814:	00007517          	auipc	a0,0x7
    80012818:	cbc50513          	addi	a0,a0,-836 # 800194d0 <pow10.0+0x2a0>
    8001281c:	5d2010ef          	jal	ra,80013dee <debugf>
    pt->entries[vpn[i]] = ppn_leaf | bits | PB_VALID;
    80012820:	fd843703          	ld	a4,-40(s0)
    80012824:	f6843783          	ld	a5,-152(s0)
    80012828:	8f5d                	or	a4,a4,a5
    8001282a:	fec42783          	lw	a5,-20(s0)
    8001282e:	078e                	slli	a5,a5,0x3
    80012830:	ff040693          	addi	a3,s0,-16
    80012834:	97b6                	add	a5,a5,a3
    80012836:	fc07b783          	ld	a5,-64(a5) # ffffffffffffefc0 <_heap_end+0xffffffff77feefc0>
    8001283a:	00176713          	ori	a4,a4,1
    8001283e:	fe043683          	ld	a3,-32(s0)
    80012842:	078e                	slli	a5,a5,0x3
    80012844:	97b6                	add	a5,a5,a3
    80012846:	e398                	sd	a4,0(a5)
    debugf("mmu_map: set entry %d in page table at 0x%08lx as lvl %d leaf to 0x%08lx\n", vpn[i], pt, i, ppn_leaf << 2);
    80012848:	fec42783          	lw	a5,-20(s0)
    8001284c:	078e                	slli	a5,a5,0x3
    8001284e:	ff040713          	addi	a4,s0,-16
    80012852:	97ba                	add	a5,a5,a4
    80012854:	fc07b583          	ld	a1,-64(a5)
    80012858:	fd843783          	ld	a5,-40(s0)
    8001285c:	00279713          	slli	a4,a5,0x2
    80012860:	fec42783          	lw	a5,-20(s0)
    80012864:	86be                	mv	a3,a5
    80012866:	fe043603          	ld	a2,-32(s0)
    8001286a:	00007517          	auipc	a0,0x7
    8001286e:	c8650513          	addi	a0,a0,-890 # 800194f0 <pow10.0+0x2c0>
    80012872:	57c010ef          	jal	ra,80013dee <debugf>
    return true;
    80012876:	4785                	li	a5,1
}
    80012878:	853e                	mv	a0,a5
    8001287a:	60ea                	ld	ra,152(sp)
    8001287c:	644a                	ld	s0,144(sp)
    8001287e:	610d                	addi	sp,sp,160
    80012880:	8082                	ret

0000000080012882 <mmu_free>:

void mmu_free(struct page_table *tab) 
{ 
    80012882:	7179                	addi	sp,sp,-48
    80012884:	f406                	sd	ra,40(sp)
    80012886:	f022                	sd	s0,32(sp)
    80012888:	1800                	addi	s0,sp,48
    8001288a:	fca43c23          	sd	a0,-40(s0)
    uint64_t entry; 
    int i; 

    if (tab == NULL) { 
    8001288e:	fd843783          	ld	a5,-40(s0)
    80012892:	c3b5                	beqz	a5,800128f6 <mmu_free+0x74>
        return; 
    } 

    for (i = 0; i < (PAGE_SIZE / 8); i += 1) { 
    80012894:	fe042623          	sw	zero,-20(s0)
    80012898:	a091                	j	800128dc <mmu_free+0x5a>
        entry = tab->entries[i]; 
    8001289a:	fd843703          	ld	a4,-40(s0)
    8001289e:	fec42783          	lw	a5,-20(s0)
    800128a2:	078e                	slli	a5,a5,0x3
    800128a4:	97ba                	add	a5,a5,a4
    800128a6:	639c                	ld	a5,0(a5)
    800128a8:	fef43023          	sd	a5,-32(s0)
        if (entry & PB_VALID) {
    800128ac:	fe043783          	ld	a5,-32(s0)
    800128b0:	8b85                	andi	a5,a5,1
    800128b2:	cb81                	beqz	a5,800128c2 <mmu_free+0x40>
            mmu_free((struct page_table *)(entry & ~0xFFF)); // Recurse into the next level
    800128b4:	fe043703          	ld	a4,-32(s0)
    800128b8:	77fd                	lui	a5,0xfffff
    800128ba:	8ff9                	and	a5,a5,a4
    800128bc:	853e                	mv	a0,a5
    800128be:	fc5ff0ef          	jal	ra,80012882 <mmu_free>
        }
        tab->entries[i] = 0; 
    800128c2:	fd843703          	ld	a4,-40(s0)
    800128c6:	fec42783          	lw	a5,-20(s0)
    800128ca:	078e                	slli	a5,a5,0x3
    800128cc:	97ba                	add	a5,a5,a4
    800128ce:	0007b023          	sd	zero,0(a5) # fffffffffffff000 <_heap_end+0xffffffff77fef000>
    for (i = 0; i < (PAGE_SIZE / 8); i += 1) { 
    800128d2:	fec42783          	lw	a5,-20(s0)
    800128d6:	2785                	addiw	a5,a5,1
    800128d8:	fef42623          	sw	a5,-20(s0)
    800128dc:	fec42783          	lw	a5,-20(s0)
    800128e0:	0007871b          	sext.w	a4,a5
    800128e4:	1ff00793          	li	a5,511
    800128e8:	fae7d9e3          	bge	a5,a4,8001289a <mmu_free+0x18>
    } 

    page_free(tab); 
    800128ec:	fd843503          	ld	a0,-40(s0)
    800128f0:	128020ef          	jal	ra,80014a18 <page_free>
    800128f4:	a011                	j	800128f8 <mmu_free+0x76>
        return; 
    800128f6:	0001                	nop
}
    800128f8:	70a2                	ld	ra,40(sp)
    800128fa:	7402                	ld	s0,32(sp)
    800128fc:	6145                	addi	sp,sp,48
    800128fe:	8082                	ret

0000000080012900 <mmu_translate>:

uint64_t mmu_translate(const struct page_table *tab, uint64_t vaddr) 
{ 
    80012900:	715d                	addi	sp,sp,-80
    80012902:	e4a2                	sd	s0,72(sp)
    80012904:	0880                	addi	s0,sp,80
    80012906:	faa43c23          	sd	a0,-72(s0)
    8001290a:	fab43823          	sd	a1,-80(s0)
    int i; 

    if (tab == NULL) { 
    8001290e:	fb843783          	ld	a5,-72(s0)
    80012912:	e399                	bnez	a5,80012918 <mmu_translate+0x18>
        return MMU_TRANSLATE_PAGE_FAULT; 
    80012914:	57fd                	li	a5,-1
    80012916:	a84d                	j	800129c8 <mmu_translate+0xc8>
    } 

    // Extract the virtual page numbers
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    80012918:	fb043783          	ld	a5,-80(s0)
    8001291c:	83b1                	srli	a5,a5,0xc
    8001291e:	1ff7f793          	andi	a5,a5,511
    80012922:	fcf43423          	sd	a5,-56(s0)
                      (vaddr >> ADDR_1_BIT) & 0x1FF, 
    80012926:	fb043783          	ld	a5,-80(s0)
    8001292a:	83d5                	srli	a5,a5,0x15
    8001292c:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    80012930:	fcf43823          	sd	a5,-48(s0)
                      (vaddr >> ADDR_2_BIT) & 0x1FF};
    80012934:	fb043783          	ld	a5,-80(s0)
    80012938:	83f9                	srli	a5,a5,0x1e
    8001293a:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    8001293e:	fcf43c23          	sd	a5,-40(s0)

    // Traverse the page table hierarchy using the virtual page numbers
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    80012942:	4789                	li	a5,2
    80012944:	fef42623          	sw	a5,-20(s0)
    80012948:	a881                	j	80012998 <mmu_translate+0x98>
        if (!(tab->entries[vpn[i]] & PB_VALID)) {
    8001294a:	fec42783          	lw	a5,-20(s0)
    8001294e:	078e                	slli	a5,a5,0x3
    80012950:	ff040713          	addi	a4,s0,-16
    80012954:	97ba                	add	a5,a5,a4
    80012956:	fd87b783          	ld	a5,-40(a5)
    8001295a:	fb843703          	ld	a4,-72(s0)
    8001295e:	078e                	slli	a5,a5,0x3
    80012960:	97ba                	add	a5,a5,a4
    80012962:	639c                	ld	a5,0(a5)
    80012964:	8b85                	andi	a5,a5,1
    80012966:	e399                	bnez	a5,8001296c <mmu_translate+0x6c>
            return MMU_TRANSLATE_PAGE_FAULT; // Entry is not valid
    80012968:	57fd                	li	a5,-1
    8001296a:	a8b9                	j	800129c8 <mmu_translate+0xc8>
        }
        tab = (struct page_table *)(tab->entries[vpn[i]] & ~0xFFF);
    8001296c:	fec42783          	lw	a5,-20(s0)
    80012970:	078e                	slli	a5,a5,0x3
    80012972:	ff040713          	addi	a4,s0,-16
    80012976:	97ba                	add	a5,a5,a4
    80012978:	fd87b783          	ld	a5,-40(a5)
    8001297c:	fb843703          	ld	a4,-72(s0)
    80012980:	078e                	slli	a5,a5,0x3
    80012982:	97ba                	add	a5,a5,a4
    80012984:	6398                	ld	a4,0(a5)
    80012986:	77fd                	lui	a5,0xfffff
    80012988:	8ff9                	and	a5,a5,a4
    8001298a:	faf43c23          	sd	a5,-72(s0)
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    8001298e:	fec42783          	lw	a5,-20(s0)
    80012992:	37fd                	addiw	a5,a5,-1
    80012994:	fef42623          	sw	a5,-20(s0)
    80012998:	fec42783          	lw	a5,-20(s0)
    8001299c:	2781                	sext.w	a5,a5
    8001299e:	fa07d6e3          	bgez	a5,8001294a <mmu_translate+0x4a>
    }

    // Extract the physical address from the final page table entry
    uint64_t paddr = tab->entries[vpn[MMU_LEVEL_4K]] & ~0xFFF;
    800129a2:	fc843783          	ld	a5,-56(s0)
    800129a6:	fb843703          	ld	a4,-72(s0)
    800129aa:	078e                	slli	a5,a5,0x3
    800129ac:	97ba                	add	a5,a5,a4
    800129ae:	6398                	ld	a4,0(a5)
    800129b0:	77fd                	lui	a5,0xfffff
    800129b2:	8ff9                	and	a5,a5,a4
    800129b4:	fef43023          	sd	a5,-32(s0)
    return paddr | (vaddr & (PAGE_SIZE - 1)); // Combine with the offset within the page
    800129b8:	fb043703          	ld	a4,-80(s0)
    800129bc:	6785                	lui	a5,0x1
    800129be:	17fd                	addi	a5,a5,-1
    800129c0:	8f7d                	and	a4,a4,a5
    800129c2:	fe043783          	ld	a5,-32(s0)
    800129c6:	8fd9                	or	a5,a5,a4
} 
    800129c8:	853e                	mv	a0,a5
    800129ca:	6426                	ld	s0,72(sp)
    800129cc:	6161                	addi	sp,sp,80
    800129ce:	8082                	ret

00000000800129d0 <mmu_map_range>:
                       uint64_t start_virt, 
                       uint64_t end_virt, 
                       uint64_t start_phys,
                       uint8_t lvl, 
                       uint64_t bits)
{
    800129d0:	711d                	addi	sp,sp,-96
    800129d2:	ec86                	sd	ra,88(sp)
    800129d4:	e8a2                	sd	s0,80(sp)
    800129d6:	1080                	addi	s0,sp,96
    800129d8:	fca43423          	sd	a0,-56(s0)
    800129dc:	fcb43023          	sd	a1,-64(s0)
    800129e0:	fac43c23          	sd	a2,-72(s0)
    800129e4:	fad43823          	sd	a3,-80(s0)
    800129e8:	faf43023          	sd	a5,-96(s0)
    800129ec:	87ba                	mv	a5,a4
    800129ee:	faf407a3          	sb	a5,-81(s0)
    start_virt            = ALIGN_DOWN_POT(start_virt, PAGE_SIZE_AT_LVL(lvl));
    800129f2:	faf44783          	lbu	a5,-81(s0)
    800129f6:	2781                	sext.w	a5,a5
    800129f8:	873e                	mv	a4,a5
    800129fa:	87ba                	mv	a5,a4
    800129fc:	0037979b          	slliw	a5,a5,0x3
    80012a00:	9fb9                	addw	a5,a5,a4
    80012a02:	2781                	sext.w	a5,a5
    80012a04:	27b1                	addiw	a5,a5,12
    80012a06:	2781                	sext.w	a5,a5
    80012a08:	4705                	li	a4,1
    80012a0a:	00f717bb          	sllw	a5,a4,a5
    80012a0e:	2781                	sext.w	a5,a5
    80012a10:	40f007bb          	negw	a5,a5
    80012a14:	2781                	sext.w	a5,a5
    80012a16:	873e                	mv	a4,a5
    80012a18:	fc043783          	ld	a5,-64(s0)
    80012a1c:	8ff9                	and	a5,a5,a4
    80012a1e:	fcf43023          	sd	a5,-64(s0)
    end_virt              = ALIGN_UP_POT(end_virt, PAGE_SIZE_AT_LVL(lvl));
    80012a22:	faf44783          	lbu	a5,-81(s0)
    80012a26:	2781                	sext.w	a5,a5
    80012a28:	873e                	mv	a4,a5
    80012a2a:	87ba                	mv	a5,a4
    80012a2c:	0037979b          	slliw	a5,a5,0x3
    80012a30:	9fb9                	addw	a5,a5,a4
    80012a32:	2781                	sext.w	a5,a5
    80012a34:	27b1                	addiw	a5,a5,12
    80012a36:	2781                	sext.w	a5,a5
    80012a38:	4705                	li	a4,1
    80012a3a:	00f717bb          	sllw	a5,a4,a5
    80012a3e:	2781                	sext.w	a5,a5
    80012a40:	873e                	mv	a4,a5
    80012a42:	fb843783          	ld	a5,-72(s0)
    80012a46:	97ba                	add	a5,a5,a4
    80012a48:	fff78713          	addi	a4,a5,-1 # fff <i+0xfdf>
    80012a4c:	faf44783          	lbu	a5,-81(s0)
    80012a50:	2781                	sext.w	a5,a5
    80012a52:	86be                	mv	a3,a5
    80012a54:	87b6                	mv	a5,a3
    80012a56:	0037979b          	slliw	a5,a5,0x3
    80012a5a:	9fb5                	addw	a5,a5,a3
    80012a5c:	2781                	sext.w	a5,a5
    80012a5e:	27b1                	addiw	a5,a5,12
    80012a60:	2781                	sext.w	a5,a5
    80012a62:	4685                	li	a3,1
    80012a64:	00f697bb          	sllw	a5,a3,a5
    80012a68:	2781                	sext.w	a5,a5
    80012a6a:	40f007bb          	negw	a5,a5
    80012a6e:	2781                	sext.w	a5,a5
    80012a70:	8ff9                	and	a5,a5,a4
    80012a72:	faf43c23          	sd	a5,-72(s0)
    uint64_t num_bytes    = end_virt - start_virt;
    80012a76:	fb843703          	ld	a4,-72(s0)
    80012a7a:	fc043783          	ld	a5,-64(s0)
    80012a7e:	40f707b3          	sub	a5,a4,a5
    80012a82:	fcf43c23          	sd	a5,-40(s0)
    debugf("mmu_map_range: mapping = %d bytes\n", num_bytes);
    80012a86:	fd843583          	ld	a1,-40(s0)
    80012a8a:	00007517          	auipc	a0,0x7
    80012a8e:	ab650513          	addi	a0,a0,-1354 # 80019540 <pow10.0+0x310>
    80012a92:	35c010ef          	jal	ra,80013dee <debugf>
    uint64_t pages_mapped = 0;
    80012a96:	fe043423          	sd	zero,-24(s0)

    uint64_t i;
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    80012a9a:	fe043023          	sd	zero,-32(s0)
    80012a9e:	a0ad                	j	80012b08 <mmu_map_range+0x138>
        if (!mmu_map(tab, start_virt + i, start_phys + i, lvl, bits)) {
    80012aa0:	fc043703          	ld	a4,-64(s0)
    80012aa4:	fe043783          	ld	a5,-32(s0)
    80012aa8:	00f705b3          	add	a1,a4,a5
    80012aac:	fb043703          	ld	a4,-80(s0)
    80012ab0:	fe043783          	ld	a5,-32(s0)
    80012ab4:	97ba                	add	a5,a5,a4
    80012ab6:	faf44683          	lbu	a3,-81(s0)
    80012aba:	fa043703          	ld	a4,-96(s0)
    80012abe:	863e                	mv	a2,a5
    80012ac0:	fc843503          	ld	a0,-56(s0)
    80012ac4:	b45ff0ef          	jal	ra,80012608 <mmu_map>
    80012ac8:	87aa                	mv	a5,a0
    80012aca:	0017c793          	xori	a5,a5,1
    80012ace:	0ff7f793          	andi	a5,a5,255
    80012ad2:	e3b1                	bnez	a5,80012b16 <mmu_map_range+0x146>
            break;
        }
        pages_mapped += 1;
    80012ad4:	fe843783          	ld	a5,-24(s0)
    80012ad8:	0785                	addi	a5,a5,1
    80012ada:	fef43423          	sd	a5,-24(s0)
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    80012ade:	faf44783          	lbu	a5,-81(s0)
    80012ae2:	2781                	sext.w	a5,a5
    80012ae4:	873e                	mv	a4,a5
    80012ae6:	87ba                	mv	a5,a4
    80012ae8:	0037979b          	slliw	a5,a5,0x3
    80012aec:	9fb9                	addw	a5,a5,a4
    80012aee:	2781                	sext.w	a5,a5
    80012af0:	27b1                	addiw	a5,a5,12
    80012af2:	2781                	sext.w	a5,a5
    80012af4:	4705                	li	a4,1
    80012af6:	00f717bb          	sllw	a5,a4,a5
    80012afa:	2781                	sext.w	a5,a5
    80012afc:	873e                	mv	a4,a5
    80012afe:	fe043783          	ld	a5,-32(s0)
    80012b02:	97ba                	add	a5,a5,a4
    80012b04:	fef43023          	sd	a5,-32(s0)
    80012b08:	fe043703          	ld	a4,-32(s0)
    80012b0c:	fd843783          	ld	a5,-40(s0)
    80012b10:	f8f768e3          	bltu	a4,a5,80012aa0 <mmu_map_range+0xd0>
    80012b14:	a011                	j	80012b18 <mmu_map_range+0x148>
            break;
    80012b16:	0001                	nop
    }
    debugf("mmu_map_range: mapped %d pages\n", pages_mapped);
    80012b18:	fe843583          	ld	a1,-24(s0)
    80012b1c:	00007517          	auipc	a0,0x7
    80012b20:	a4c50513          	addi	a0,a0,-1460 # 80019568 <pow10.0+0x338>
    80012b24:	2ca010ef          	jal	ra,80013dee <debugf>
    return pages_mapped;
    80012b28:	fe843783          	ld	a5,-24(s0)
} 
    80012b2c:	853e                	mv	a0,a5
    80012b2e:	60e6                	ld	ra,88(sp)
    80012b30:	6446                	ld	s0,80(sp)
    80012b32:	6125                	addi	sp,sp,96
    80012b34:	8082                	ret

0000000080012b36 <insert_block>:
 * into free list, sorted by addr.
 * If disabled, add block has new head of
 * the free list.
 */
static void insert_block(Block *block)
{
    80012b36:	7179                	addi	sp,sp,-48
    80012b38:	f422                	sd	s0,40(sp)
    80012b3a:	1800                	addi	s0,sp,48
    80012b3c:	fca43c23          	sd	a0,-40(s0)
    Block *ptr  = heap->free;
    80012b40:	00005797          	auipc	a5,0x5
    80012b44:	4e878793          	addi	a5,a5,1256 # 80018028 <heap>
    80012b48:	639c                	ld	a5,0(a5)
    80012b4a:	639c                	ld	a5,0(a5)
    80012b4c:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80012b50:	fe043023          	sd	zero,-32(s0)
    while (ptr != NULL) {
    80012b54:	a01d                	j	80012b7a <insert_block+0x44>
        if ((size_t)block->addr <= (size_t)ptr->addr) {
    80012b56:	fd843783          	ld	a5,-40(s0)
    80012b5a:	639c                	ld	a5,0(a5)
    80012b5c:	873e                	mv	a4,a5
    80012b5e:	fe843783          	ld	a5,-24(s0)
    80012b62:	639c                	ld	a5,0(a5)
    80012b64:	00e7ff63          	bgeu	a5,a4,80012b82 <insert_block+0x4c>
            break;
        }
        prev = ptr;
    80012b68:	fe843783          	ld	a5,-24(s0)
    80012b6c:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    80012b70:	fe843783          	ld	a5,-24(s0)
    80012b74:	679c                	ld	a5,8(a5)
    80012b76:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80012b7a:	fe843783          	ld	a5,-24(s0)
    80012b7e:	ffe1                	bnez	a5,80012b56 <insert_block+0x20>
    80012b80:	a011                	j	80012b84 <insert_block+0x4e>
            break;
    80012b82:	0001                	nop
    }
    if (prev != NULL) {
    80012b84:	fe043783          	ld	a5,-32(s0)
    80012b88:	c799                	beqz	a5,80012b96 <insert_block+0x60>
        prev->next = block;
    80012b8a:	fe043783          	ld	a5,-32(s0)
    80012b8e:	fd843703          	ld	a4,-40(s0)
    80012b92:	e798                	sd	a4,8(a5)
    80012b94:	a809                	j	80012ba6 <insert_block+0x70>
    }
    else {
        heap->free = block;
    80012b96:	00005797          	auipc	a5,0x5
    80012b9a:	49278793          	addi	a5,a5,1170 # 80018028 <heap>
    80012b9e:	639c                	ld	a5,0(a5)
    80012ba0:	fd843703          	ld	a4,-40(s0)
    80012ba4:	e398                	sd	a4,0(a5)
    }
    block->next = ptr;
    80012ba6:	fd843783          	ld	a5,-40(s0)
    80012baa:	fe843703          	ld	a4,-24(s0)
    80012bae:	e798                	sd	a4,8(a5)
}
    80012bb0:	0001                	nop
    80012bb2:	7422                	ld	s0,40(sp)
    80012bb4:	6145                	addi	sp,sp,48
    80012bb6:	8082                	ret

0000000080012bb8 <release_blocks>:

#ifndef TA_DISABLE_COMPACT
static void release_blocks(Block *scan, Block *to)
{
    80012bb8:	7179                	addi	sp,sp,-48
    80012bba:	f422                	sd	s0,40(sp)
    80012bbc:	1800                	addi	s0,sp,48
    80012bbe:	fca43c23          	sd	a0,-40(s0)
    80012bc2:	fcb43823          	sd	a1,-48(s0)
    Block *scan_next;
    while (scan != to) {
    80012bc6:	a099                	j	80012c0c <release_blocks+0x54>
        scan_next   = scan->next;
    80012bc8:	fd843783          	ld	a5,-40(s0)
    80012bcc:	679c                	ld	a5,8(a5)
    80012bce:	fef43423          	sd	a5,-24(s0)
        scan->next  = heap->fresh;
    80012bd2:	00005797          	auipc	a5,0x5
    80012bd6:	45678793          	addi	a5,a5,1110 # 80018028 <heap>
    80012bda:	639c                	ld	a5,0(a5)
    80012bdc:	6b98                	ld	a4,16(a5)
    80012bde:	fd843783          	ld	a5,-40(s0)
    80012be2:	e798                	sd	a4,8(a5)
        heap->fresh = scan;
    80012be4:	00005797          	auipc	a5,0x5
    80012be8:	44478793          	addi	a5,a5,1092 # 80018028 <heap>
    80012bec:	639c                	ld	a5,0(a5)
    80012bee:	fd843703          	ld	a4,-40(s0)
    80012bf2:	eb98                	sd	a4,16(a5)
        scan->addr  = 0;
    80012bf4:	fd843783          	ld	a5,-40(s0)
    80012bf8:	0007b023          	sd	zero,0(a5)
        scan->size  = 0;
    80012bfc:	fd843783          	ld	a5,-40(s0)
    80012c00:	0007b823          	sd	zero,16(a5)
        scan        = scan_next;
    80012c04:	fe843783          	ld	a5,-24(s0)
    80012c08:	fcf43c23          	sd	a5,-40(s0)
    while (scan != to) {
    80012c0c:	fd843703          	ld	a4,-40(s0)
    80012c10:	fd043783          	ld	a5,-48(s0)
    80012c14:	faf71ae3          	bne	a4,a5,80012bc8 <release_blocks+0x10>
    }
}
    80012c18:	0001                	nop
    80012c1a:	0001                	nop
    80012c1c:	7422                	ld	s0,40(sp)
    80012c1e:	6145                	addi	sp,sp,48
    80012c20:	8082                	ret

0000000080012c22 <compact>:

static void compact()
{
    80012c22:	7139                	addi	sp,sp,-64
    80012c24:	fc06                	sd	ra,56(sp)
    80012c26:	f822                	sd	s0,48(sp)
    80012c28:	0080                	addi	s0,sp,64
    Block *ptr = heap->free;
    80012c2a:	00005797          	auipc	a5,0x5
    80012c2e:	3fe78793          	addi	a5,a5,1022 # 80018028 <heap>
    80012c32:	639c                	ld	a5,0(a5)
    80012c34:	639c                	ld	a5,0(a5)
    80012c36:	fef43423          	sd	a5,-24(s0)
    Block *prev;
    Block *scan;
    while (ptr != NULL) {
    80012c3a:	a075                	j	80012ce6 <compact+0xc4>
        prev = ptr;
    80012c3c:	fe843783          	ld	a5,-24(s0)
    80012c40:	fef43023          	sd	a5,-32(s0)
        scan = ptr->next;
    80012c44:	fe843783          	ld	a5,-24(s0)
    80012c48:	679c                	ld	a5,8(a5)
    80012c4a:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    80012c4e:	a811                	j	80012c62 <compact+0x40>
            prev = scan;
    80012c50:	fd843783          	ld	a5,-40(s0)
    80012c54:	fef43023          	sd	a5,-32(s0)
            scan = scan->next;
    80012c58:	fd843783          	ld	a5,-40(s0)
    80012c5c:	679c                	ld	a5,8(a5)
    80012c5e:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    80012c62:	fd843783          	ld	a5,-40(s0)
    80012c66:	cf91                	beqz	a5,80012c82 <compact+0x60>
    80012c68:	fe043783          	ld	a5,-32(s0)
    80012c6c:	639c                	ld	a5,0(a5)
    80012c6e:	873e                	mv	a4,a5
    80012c70:	fe043783          	ld	a5,-32(s0)
    80012c74:	6b9c                	ld	a5,16(a5)
    80012c76:	97ba                	add	a5,a5,a4
    80012c78:	fd843703          	ld	a4,-40(s0)
    80012c7c:	6318                	ld	a4,0(a4)
    80012c7e:	fce789e3          	beq	a5,a4,80012c50 <compact+0x2e>
        }
        if (prev != ptr) {
    80012c82:	fe043703          	ld	a4,-32(s0)
    80012c86:	fe843783          	ld	a5,-24(s0)
    80012c8a:	04f70963          	beq	a4,a5,80012cdc <compact+0xba>
            size_t new_size = (size_t)prev->addr - (size_t)ptr->addr + prev->size;
    80012c8e:	fe043783          	ld	a5,-32(s0)
    80012c92:	639c                	ld	a5,0(a5)
    80012c94:	873e                	mv	a4,a5
    80012c96:	fe843783          	ld	a5,-24(s0)
    80012c9a:	639c                	ld	a5,0(a5)
    80012c9c:	8f1d                	sub	a4,a4,a5
    80012c9e:	fe043783          	ld	a5,-32(s0)
    80012ca2:	6b9c                	ld	a5,16(a5)
    80012ca4:	97ba                	add	a5,a5,a4
    80012ca6:	fcf43823          	sd	a5,-48(s0)
            ptr->size       = new_size;
    80012caa:	fe843783          	ld	a5,-24(s0)
    80012cae:	fd043703          	ld	a4,-48(s0)
    80012cb2:	eb98                	sd	a4,16(a5)
            Block *next     = prev->next;
    80012cb4:	fe043783          	ld	a5,-32(s0)
    80012cb8:	679c                	ld	a5,8(a5)
    80012cba:	fcf43423          	sd	a5,-56(s0)
            // make merged blocks available
            release_blocks(ptr->next, prev->next);
    80012cbe:	fe843783          	ld	a5,-24(s0)
    80012cc2:	6798                	ld	a4,8(a5)
    80012cc4:	fe043783          	ld	a5,-32(s0)
    80012cc8:	679c                	ld	a5,8(a5)
    80012cca:	85be                	mv	a1,a5
    80012ccc:	853a                	mv	a0,a4
    80012cce:	eebff0ef          	jal	ra,80012bb8 <release_blocks>
            // relink
            ptr->next = next;
    80012cd2:	fe843783          	ld	a5,-24(s0)
    80012cd6:	fc843703          	ld	a4,-56(s0)
    80012cda:	e798                	sd	a4,8(a5)
        }
        ptr = ptr->next;
    80012cdc:	fe843783          	ld	a5,-24(s0)
    80012ce0:	679c                	ld	a5,8(a5)
    80012ce2:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80012ce6:	fe843783          	ld	a5,-24(s0)
    80012cea:	fba9                	bnez	a5,80012c3c <compact+0x1a>
    }
}
    80012cec:	0001                	nop
    80012cee:	0001                	nop
    80012cf0:	70e2                	ld	ra,56(sp)
    80012cf2:	7442                	ld	s0,48(sp)
    80012cf4:	6121                	addi	sp,sp,64
    80012cf6:	8082                	ret

0000000080012cf8 <init>:
#endif

static bool init(const void *base, const void *limit, const size_t heap_blocks,
                 const size_t split_thresh, const size_t alignment)
{
    80012cf8:	715d                	addi	sp,sp,-80
    80012cfa:	e4a2                	sd	s0,72(sp)
    80012cfc:	0880                	addi	s0,sp,80
    80012cfe:	fca43c23          	sd	a0,-40(s0)
    80012d02:	fcb43823          	sd	a1,-48(s0)
    80012d06:	fcc43423          	sd	a2,-56(s0)
    80012d0a:	fcd43023          	sd	a3,-64(s0)
    80012d0e:	fae43c23          	sd	a4,-72(s0)
    heap              = (Heap *)base;
    80012d12:	00005797          	auipc	a5,0x5
    80012d16:	31678793          	addi	a5,a5,790 # 80018028 <heap>
    80012d1a:	fd843703          	ld	a4,-40(s0)
    80012d1e:	e398                	sd	a4,0(a5)
    heap_limit        = limit;
    80012d20:	00005797          	auipc	a5,0x5
    80012d24:	31078793          	addi	a5,a5,784 # 80018030 <heap_limit>
    80012d28:	fd043703          	ld	a4,-48(s0)
    80012d2c:	e398                	sd	a4,0(a5)
    heap_split_thresh = split_thresh;
    80012d2e:	00005797          	auipc	a5,0x5
    80012d32:	30a78793          	addi	a5,a5,778 # 80018038 <heap_split_thresh>
    80012d36:	fc043703          	ld	a4,-64(s0)
    80012d3a:	e398                	sd	a4,0(a5)
    heap_alignment    = alignment;
    80012d3c:	00005797          	auipc	a5,0x5
    80012d40:	30478793          	addi	a5,a5,772 # 80018040 <heap_alignment>
    80012d44:	fb843703          	ld	a4,-72(s0)
    80012d48:	e398                	sd	a4,0(a5)
    heap_max_blocks   = heap_blocks;
    80012d4a:	00005797          	auipc	a5,0x5
    80012d4e:	2fe78793          	addi	a5,a5,766 # 80018048 <heap_max_blocks>
    80012d52:	fc843703          	ld	a4,-56(s0)
    80012d56:	e398                	sd	a4,0(a5)

    heap->free        = NULL;
    80012d58:	00005797          	auipc	a5,0x5
    80012d5c:	2d078793          	addi	a5,a5,720 # 80018028 <heap>
    80012d60:	639c                	ld	a5,0(a5)
    80012d62:	0007b023          	sd	zero,0(a5)
    heap->used        = NULL;
    80012d66:	00005797          	auipc	a5,0x5
    80012d6a:	2c278793          	addi	a5,a5,706 # 80018028 <heap>
    80012d6e:	639c                	ld	a5,0(a5)
    80012d70:	0007b423          	sd	zero,8(a5)
    heap->fresh       = (Block *)(heap + 1);
    80012d74:	00005797          	auipc	a5,0x5
    80012d78:	2b478793          	addi	a5,a5,692 # 80018028 <heap>
    80012d7c:	6398                	ld	a4,0(a5)
    80012d7e:	00005797          	auipc	a5,0x5
    80012d82:	2aa78793          	addi	a5,a5,682 # 80018028 <heap>
    80012d86:	639c                	ld	a5,0(a5)
    80012d88:	02070713          	addi	a4,a4,32
    80012d8c:	eb98                	sd	a4,16(a5)
    heap->top         = (size_t)(heap->fresh + heap_blocks);
    80012d8e:	00005797          	auipc	a5,0x5
    80012d92:	29a78793          	addi	a5,a5,666 # 80018028 <heap>
    80012d96:	639c                	ld	a5,0(a5)
    80012d98:	6b94                	ld	a3,16(a5)
    80012d9a:	fc843703          	ld	a4,-56(s0)
    80012d9e:	87ba                	mv	a5,a4
    80012da0:	0786                	slli	a5,a5,0x1
    80012da2:	97ba                	add	a5,a5,a4
    80012da4:	078e                	slli	a5,a5,0x3
    80012da6:	00f68733          	add	a4,a3,a5
    80012daa:	00005797          	auipc	a5,0x5
    80012dae:	27e78793          	addi	a5,a5,638 # 80018028 <heap>
    80012db2:	639c                	ld	a5,0(a5)
    80012db4:	ef98                	sd	a4,24(a5)

    Block *block      = heap->fresh;
    80012db6:	00005797          	auipc	a5,0x5
    80012dba:	27278793          	addi	a5,a5,626 # 80018028 <heap>
    80012dbe:	639c                	ld	a5,0(a5)
    80012dc0:	6b9c                	ld	a5,16(a5)
    80012dc2:	fef43423          	sd	a5,-24(s0)
    size_t i          = heap_max_blocks - 1;
    80012dc6:	00005797          	auipc	a5,0x5
    80012dca:	28278793          	addi	a5,a5,642 # 80018048 <heap_max_blocks>
    80012dce:	639c                	ld	a5,0(a5)
    80012dd0:	17fd                	addi	a5,a5,-1
    80012dd2:	fef43023          	sd	a5,-32(s0)
    while (i--) {
    80012dd6:	a829                	j	80012df0 <init+0xf8>
        block->next = block + 1;
    80012dd8:	fe843783          	ld	a5,-24(s0)
    80012ddc:	01878713          	addi	a4,a5,24
    80012de0:	fe843783          	ld	a5,-24(s0)
    80012de4:	e798                	sd	a4,8(a5)
        block++;
    80012de6:	fe843783          	ld	a5,-24(s0)
    80012dea:	07e1                	addi	a5,a5,24
    80012dec:	fef43423          	sd	a5,-24(s0)
    while (i--) {
    80012df0:	fe043783          	ld	a5,-32(s0)
    80012df4:	fff78713          	addi	a4,a5,-1
    80012df8:	fee43023          	sd	a4,-32(s0)
    80012dfc:	fff1                	bnez	a5,80012dd8 <init+0xe0>
    }
    block->next = NULL;
    80012dfe:	fe843783          	ld	a5,-24(s0)
    80012e02:	0007b423          	sd	zero,8(a5)
    return true;
    80012e06:	4785                	li	a5,1
}
    80012e08:	853e                	mv	a0,a5
    80012e0a:	6426                	ld	s0,72(sp)
    80012e0c:	6161                	addi	sp,sp,80
    80012e0e:	8082                	ret

0000000080012e10 <free>:

static bool free(const void *free)
{
    80012e10:	7179                	addi	sp,sp,-48
    80012e12:	f406                	sd	ra,40(sp)
    80012e14:	f022                	sd	s0,32(sp)
    80012e16:	1800                	addi	s0,sp,48
    80012e18:	fca43c23          	sd	a0,-40(s0)
    Block *block = heap->used;
    80012e1c:	00005797          	auipc	a5,0x5
    80012e20:	20c78793          	addi	a5,a5,524 # 80018028 <heap>
    80012e24:	639c                	ld	a5,0(a5)
    80012e26:	679c                	ld	a5,8(a5)
    80012e28:	fef43423          	sd	a5,-24(s0)
    Block *prev  = NULL;
    80012e2c:	fe043023          	sd	zero,-32(s0)
    while (block != NULL) {
    80012e30:	a8a1                	j	80012e88 <free+0x78>
        if (free == block->addr) {
    80012e32:	fe843783          	ld	a5,-24(s0)
    80012e36:	639c                	ld	a5,0(a5)
    80012e38:	fd843703          	ld	a4,-40(s0)
    80012e3c:	02f71d63          	bne	a4,a5,80012e76 <free+0x66>
            if (prev) {
    80012e40:	fe043783          	ld	a5,-32(s0)
    80012e44:	cb81                	beqz	a5,80012e54 <free+0x44>
                prev->next = block->next;
    80012e46:	fe843783          	ld	a5,-24(s0)
    80012e4a:	6798                	ld	a4,8(a5)
    80012e4c:	fe043783          	ld	a5,-32(s0)
    80012e50:	e798                	sd	a4,8(a5)
    80012e52:	a811                	j	80012e66 <free+0x56>
            }
            else {
                heap->used = block->next;
    80012e54:	00005797          	auipc	a5,0x5
    80012e58:	1d478793          	addi	a5,a5,468 # 80018028 <heap>
    80012e5c:	639c                	ld	a5,0(a5)
    80012e5e:	fe843703          	ld	a4,-24(s0)
    80012e62:	6718                	ld	a4,8(a4)
    80012e64:	e798                	sd	a4,8(a5)
            }
            insert_block(block);
    80012e66:	fe843503          	ld	a0,-24(s0)
    80012e6a:	ccdff0ef          	jal	ra,80012b36 <insert_block>
            compact();
    80012e6e:	db5ff0ef          	jal	ra,80012c22 <compact>
            return true;
    80012e72:	4785                	li	a5,1
    80012e74:	a831                	j	80012e90 <free+0x80>
        }
        prev  = block;
    80012e76:	fe843783          	ld	a5,-24(s0)
    80012e7a:	fef43023          	sd	a5,-32(s0)
        block = block->next;
    80012e7e:	fe843783          	ld	a5,-24(s0)
    80012e82:	679c                	ld	a5,8(a5)
    80012e84:	fef43423          	sd	a5,-24(s0)
    while (block != NULL) {
    80012e88:	fe843783          	ld	a5,-24(s0)
    80012e8c:	f3dd                	bnez	a5,80012e32 <free+0x22>
    }
    return false;
    80012e8e:	4781                	li	a5,0
}
    80012e90:	853e                	mv	a0,a5
    80012e92:	70a2                	ld	ra,40(sp)
    80012e94:	7402                	ld	s0,32(sp)
    80012e96:	6145                	addi	sp,sp,48
    80012e98:	8082                	ret

0000000080012e9a <alloc_block>:

static Block *alloc_block(size_t num)
{
    80012e9a:	711d                	addi	sp,sp,-96
    80012e9c:	ec86                	sd	ra,88(sp)
    80012e9e:	e8a2                	sd	s0,80(sp)
    80012ea0:	1080                	addi	s0,sp,96
    80012ea2:	faa43423          	sd	a0,-88(s0)
    Block *ptr  = heap->free;
    80012ea6:	00005797          	auipc	a5,0x5
    80012eaa:	18278793          	addi	a5,a5,386 # 80018028 <heap>
    80012eae:	639c                	ld	a5,0(a5)
    80012eb0:	639c                	ld	a5,0(a5)
    80012eb2:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80012eb6:	fe043023          	sd	zero,-32(s0)
    size_t top  = heap->top;
    80012eba:	00005797          	auipc	a5,0x5
    80012ebe:	16e78793          	addi	a5,a5,366 # 80018028 <heap>
    80012ec2:	639c                	ld	a5,0(a5)
    80012ec4:	6f9c                	ld	a5,24(a5)
    80012ec6:	fcf43c23          	sd	a5,-40(s0)
    num         = (num + heap_alignment - 1) & -heap_alignment;
    80012eca:	00005797          	auipc	a5,0x5
    80012ece:	17678793          	addi	a5,a5,374 # 80018040 <heap_alignment>
    80012ed2:	6398                	ld	a4,0(a5)
    80012ed4:	fa843783          	ld	a5,-88(s0)
    80012ed8:	97ba                	add	a5,a5,a4
    80012eda:	fff78713          	addi	a4,a5,-1
    80012ede:	00005797          	auipc	a5,0x5
    80012ee2:	16278793          	addi	a5,a5,354 # 80018040 <heap_alignment>
    80012ee6:	639c                	ld	a5,0(a5)
    80012ee8:	40f007b3          	neg	a5,a5
    80012eec:	8ff9                	and	a5,a5,a4
    80012eee:	faf43423          	sd	a5,-88(s0)
    while (ptr != NULL) {
    80012ef2:	a2bd                	j	80013060 <alloc_block+0x1c6>
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80012ef4:	fe843783          	ld	a5,-24(s0)
    80012ef8:	639c                	ld	a5,0(a5)
    80012efa:	873e                	mv	a4,a5
    80012efc:	fe843783          	ld	a5,-24(s0)
    80012f00:	6b9c                	ld	a5,16(a5)
    80012f02:	97ba                	add	a5,a5,a4
    80012f04:	fd843703          	ld	a4,-40(s0)
    80012f08:	02e7e263          	bltu	a5,a4,80012f2c <alloc_block+0x92>
                           ((size_t)ptr->addr + num <= (size_t)heap_limit);
    80012f0c:	fe843783          	ld	a5,-24(s0)
    80012f10:	639c                	ld	a5,0(a5)
    80012f12:	873e                	mv	a4,a5
    80012f14:	fa843783          	ld	a5,-88(s0)
    80012f18:	97ba                	add	a5,a5,a4
    80012f1a:	00005717          	auipc	a4,0x5
    80012f1e:	11670713          	addi	a4,a4,278 # 80018030 <heap_limit>
    80012f22:	6318                	ld	a4,0(a4)
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80012f24:	00f76463          	bltu	a4,a5,80012f2c <alloc_block+0x92>
    80012f28:	4785                	li	a5,1
    80012f2a:	a011                	j	80012f2e <alloc_block+0x94>
    80012f2c:	4781                	li	a5,0
    80012f2e:	fcf42623          	sw	a5,-52(s0)
        if (is_top || ptr->size >= num) {
    80012f32:	fcc42783          	lw	a5,-52(s0)
    80012f36:	2781                	sext.w	a5,a5
    80012f38:	eb81                	bnez	a5,80012f48 <alloc_block+0xae>
    80012f3a:	fe843783          	ld	a5,-24(s0)
    80012f3e:	6b9c                	ld	a5,16(a5)
    80012f40:	fa843703          	ld	a4,-88(s0)
    80012f44:	10e7e563          	bltu	a5,a4,8001304e <alloc_block+0x1b4>
            if (prev != NULL) {
    80012f48:	fe043783          	ld	a5,-32(s0)
    80012f4c:	cb81                	beqz	a5,80012f5c <alloc_block+0xc2>
                prev->next = ptr->next;
    80012f4e:	fe843783          	ld	a5,-24(s0)
    80012f52:	6798                	ld	a4,8(a5)
    80012f54:	fe043783          	ld	a5,-32(s0)
    80012f58:	e798                	sd	a4,8(a5)
    80012f5a:	a811                	j	80012f6e <alloc_block+0xd4>
            }
            else {
                heap->free = ptr->next;
    80012f5c:	00005797          	auipc	a5,0x5
    80012f60:	0cc78793          	addi	a5,a5,204 # 80018028 <heap>
    80012f64:	639c                	ld	a5,0(a5)
    80012f66:	fe843703          	ld	a4,-24(s0)
    80012f6a:	6718                	ld	a4,8(a4)
    80012f6c:	e398                	sd	a4,0(a5)
            }
            ptr->next  = heap->used;
    80012f6e:	00005797          	auipc	a5,0x5
    80012f72:	0ba78793          	addi	a5,a5,186 # 80018028 <heap>
    80012f76:	639c                	ld	a5,0(a5)
    80012f78:	6798                	ld	a4,8(a5)
    80012f7a:	fe843783          	ld	a5,-24(s0)
    80012f7e:	e798                	sd	a4,8(a5)
            heap->used = ptr;
    80012f80:	00005797          	auipc	a5,0x5
    80012f84:	0a878793          	addi	a5,a5,168 # 80018028 <heap>
    80012f88:	639c                	ld	a5,0(a5)
    80012f8a:	fe843703          	ld	a4,-24(s0)
    80012f8e:	e798                	sd	a4,8(a5)
            if (is_top) {
    80012f90:	fcc42783          	lw	a5,-52(s0)
    80012f94:	2781                	sext.w	a5,a5
    80012f96:	c785                	beqz	a5,80012fbe <alloc_block+0x124>
                ptr->size = num;
    80012f98:	fe843783          	ld	a5,-24(s0)
    80012f9c:	fa843703          	ld	a4,-88(s0)
    80012fa0:	eb98                	sd	a4,16(a5)
                heap->top = (size_t)ptr->addr + num;
    80012fa2:	fe843783          	ld	a5,-24(s0)
    80012fa6:	639c                	ld	a5,0(a5)
    80012fa8:	86be                	mv	a3,a5
    80012faa:	00005797          	auipc	a5,0x5
    80012fae:	07e78793          	addi	a5,a5,126 # 80018028 <heap>
    80012fb2:	639c                	ld	a5,0(a5)
    80012fb4:	fa843703          	ld	a4,-88(s0)
    80012fb8:	9736                	add	a4,a4,a3
    80012fba:	ef98                	sd	a4,24(a5)
    80012fbc:	a071                	j	80013048 <alloc_block+0x1ae>
            }
            else if (heap->fresh != NULL) {
    80012fbe:	00005797          	auipc	a5,0x5
    80012fc2:	06a78793          	addi	a5,a5,106 # 80018028 <heap>
    80012fc6:	639c                	ld	a5,0(a5)
    80012fc8:	6b9c                	ld	a5,16(a5)
    80012fca:	cfbd                	beqz	a5,80013048 <alloc_block+0x1ae>
                size_t excess = ptr->size - num;
    80012fcc:	fe843783          	ld	a5,-24(s0)
    80012fd0:	6b98                	ld	a4,16(a5)
    80012fd2:	fa843783          	ld	a5,-88(s0)
    80012fd6:	40f707b3          	sub	a5,a4,a5
    80012fda:	fcf43023          	sd	a5,-64(s0)
                if (excess >= heap_split_thresh) {
    80012fde:	00005797          	auipc	a5,0x5
    80012fe2:	05a78793          	addi	a5,a5,90 # 80018038 <heap_split_thresh>
    80012fe6:	639c                	ld	a5,0(a5)
    80012fe8:	fc043703          	ld	a4,-64(s0)
    80012fec:	04f76e63          	bltu	a4,a5,80013048 <alloc_block+0x1ae>
                    ptr->size    = num;
    80012ff0:	fe843783          	ld	a5,-24(s0)
    80012ff4:	fa843703          	ld	a4,-88(s0)
    80012ff8:	eb98                	sd	a4,16(a5)
                    Block *split = heap->fresh;
    80012ffa:	00005797          	auipc	a5,0x5
    80012ffe:	02e78793          	addi	a5,a5,46 # 80018028 <heap>
    80013002:	639c                	ld	a5,0(a5)
    80013004:	6b9c                	ld	a5,16(a5)
    80013006:	faf43c23          	sd	a5,-72(s0)
                    heap->fresh  = split->next;
    8001300a:	00005797          	auipc	a5,0x5
    8001300e:	01e78793          	addi	a5,a5,30 # 80018028 <heap>
    80013012:	639c                	ld	a5,0(a5)
    80013014:	fb843703          	ld	a4,-72(s0)
    80013018:	6718                	ld	a4,8(a4)
    8001301a:	eb98                	sd	a4,16(a5)
                    split->addr  = (void *)((size_t)ptr->addr + num);
    8001301c:	fe843783          	ld	a5,-24(s0)
    80013020:	639c                	ld	a5,0(a5)
    80013022:	873e                	mv	a4,a5
    80013024:	fa843783          	ld	a5,-88(s0)
    80013028:	97ba                	add	a5,a5,a4
    8001302a:	873e                	mv	a4,a5
    8001302c:	fb843783          	ld	a5,-72(s0)
    80013030:	e398                	sd	a4,0(a5)
                    split->size  = excess;
    80013032:	fb843783          	ld	a5,-72(s0)
    80013036:	fc043703          	ld	a4,-64(s0)
    8001303a:	eb98                	sd	a4,16(a5)
                    insert_block(split);
    8001303c:	fb843503          	ld	a0,-72(s0)
    80013040:	af7ff0ef          	jal	ra,80012b36 <insert_block>
                    compact();
    80013044:	bdfff0ef          	jal	ra,80012c22 <compact>
                }
            }
            return ptr;
    80013048:	fe843783          	ld	a5,-24(s0)
    8001304c:	a875                	j	80013108 <alloc_block+0x26e>
        }
        prev = ptr;
    8001304e:	fe843783          	ld	a5,-24(s0)
    80013052:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    80013056:	fe843783          	ld	a5,-24(s0)
    8001305a:	679c                	ld	a5,8(a5)
    8001305c:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80013060:	fe843783          	ld	a5,-24(s0)
    80013064:	e80798e3          	bnez	a5,80012ef4 <alloc_block+0x5a>
    }
    // no matching free blocks
    // see if any other blocks available
    size_t new_top = top + num;
    80013068:	fd843703          	ld	a4,-40(s0)
    8001306c:	fa843783          	ld	a5,-88(s0)
    80013070:	97ba                	add	a5,a5,a4
    80013072:	fcf43823          	sd	a5,-48(s0)
    if (heap->fresh != NULL && new_top <= (size_t)heap_limit) {
    80013076:	00005797          	auipc	a5,0x5
    8001307a:	fb278793          	addi	a5,a5,-78 # 80018028 <heap>
    8001307e:	639c                	ld	a5,0(a5)
    80013080:	6b9c                	ld	a5,16(a5)
    80013082:	c3d1                	beqz	a5,80013106 <alloc_block+0x26c>
    80013084:	00005797          	auipc	a5,0x5
    80013088:	fac78793          	addi	a5,a5,-84 # 80018030 <heap_limit>
    8001308c:	639c                	ld	a5,0(a5)
    8001308e:	873e                	mv	a4,a5
    80013090:	fd043783          	ld	a5,-48(s0)
    80013094:	06f76963          	bltu	a4,a5,80013106 <alloc_block+0x26c>
        ptr         = heap->fresh;
    80013098:	00005797          	auipc	a5,0x5
    8001309c:	f9078793          	addi	a5,a5,-112 # 80018028 <heap>
    800130a0:	639c                	ld	a5,0(a5)
    800130a2:	6b9c                	ld	a5,16(a5)
    800130a4:	fef43423          	sd	a5,-24(s0)
        heap->fresh = ptr->next;
    800130a8:	00005797          	auipc	a5,0x5
    800130ac:	f8078793          	addi	a5,a5,-128 # 80018028 <heap>
    800130b0:	639c                	ld	a5,0(a5)
    800130b2:	fe843703          	ld	a4,-24(s0)
    800130b6:	6718                	ld	a4,8(a4)
    800130b8:	eb98                	sd	a4,16(a5)
        ptr->addr   = (void *)top;
    800130ba:	fd843703          	ld	a4,-40(s0)
    800130be:	fe843783          	ld	a5,-24(s0)
    800130c2:	e398                	sd	a4,0(a5)
        ptr->next   = heap->used;
    800130c4:	00005797          	auipc	a5,0x5
    800130c8:	f6478793          	addi	a5,a5,-156 # 80018028 <heap>
    800130cc:	639c                	ld	a5,0(a5)
    800130ce:	6798                	ld	a4,8(a5)
    800130d0:	fe843783          	ld	a5,-24(s0)
    800130d4:	e798                	sd	a4,8(a5)
        ptr->size   = num;
    800130d6:	fe843783          	ld	a5,-24(s0)
    800130da:	fa843703          	ld	a4,-88(s0)
    800130de:	eb98                	sd	a4,16(a5)
        heap->used  = ptr;
    800130e0:	00005797          	auipc	a5,0x5
    800130e4:	f4878793          	addi	a5,a5,-184 # 80018028 <heap>
    800130e8:	639c                	ld	a5,0(a5)
    800130ea:	fe843703          	ld	a4,-24(s0)
    800130ee:	e798                	sd	a4,8(a5)
        heap->top   = new_top;
    800130f0:	00005797          	auipc	a5,0x5
    800130f4:	f3878793          	addi	a5,a5,-200 # 80018028 <heap>
    800130f8:	639c                	ld	a5,0(a5)
    800130fa:	fd043703          	ld	a4,-48(s0)
    800130fe:	ef98                	sd	a4,24(a5)
        return ptr;
    80013100:	fe843783          	ld	a5,-24(s0)
    80013104:	a011                	j	80013108 <alloc_block+0x26e>
    }
    return NULL;
    80013106:	4781                	li	a5,0
}
    80013108:	853e                	mv	a0,a5
    8001310a:	60e6                	ld	ra,88(sp)
    8001310c:	6446                	ld	s0,80(sp)
    8001310e:	6125                	addi	sp,sp,96
    80013110:	8082                	ret

0000000080013112 <alloc>:

static void *alloc(size_t num)
{
    80013112:	7179                	addi	sp,sp,-48
    80013114:	f406                	sd	ra,40(sp)
    80013116:	f022                	sd	s0,32(sp)
    80013118:	1800                	addi	s0,sp,48
    8001311a:	fca43c23          	sd	a0,-40(s0)
    Block *block = alloc_block(num);
    8001311e:	fd843503          	ld	a0,-40(s0)
    80013122:	d79ff0ef          	jal	ra,80012e9a <alloc_block>
    80013126:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    8001312a:	fe843783          	ld	a5,-24(s0)
    8001312e:	c789                	beqz	a5,80013138 <alloc+0x26>
        return block->addr;
    80013130:	fe843783          	ld	a5,-24(s0)
    80013134:	639c                	ld	a5,0(a5)
    80013136:	a011                	j	8001313a <alloc+0x28>
    }
    return NULL;
    80013138:	4781                	li	a5,0
}
    8001313a:	853e                	mv	a0,a5
    8001313c:	70a2                	ld	ra,40(sp)
    8001313e:	7402                	ld	s0,32(sp)
    80013140:	6145                	addi	sp,sp,48
    80013142:	8082                	ret

0000000080013144 <calloc>:

static void *calloc(size_t num, size_t size)
{
    80013144:	7179                	addi	sp,sp,-48
    80013146:	f406                	sd	ra,40(sp)
    80013148:	f022                	sd	s0,32(sp)
    8001314a:	1800                	addi	s0,sp,48
    8001314c:	fca43c23          	sd	a0,-40(s0)
    80013150:	fcb43823          	sd	a1,-48(s0)
    num *= size;
    80013154:	fd843703          	ld	a4,-40(s0)
    80013158:	fd043783          	ld	a5,-48(s0)
    8001315c:	02f707b3          	mul	a5,a4,a5
    80013160:	fcf43c23          	sd	a5,-40(s0)
    Block *block = alloc_block(num);
    80013164:	fd843503          	ld	a0,-40(s0)
    80013168:	d33ff0ef          	jal	ra,80012e9a <alloc_block>
    8001316c:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    80013170:	fe843783          	ld	a5,-24(s0)
    80013174:	c385                	beqz	a5,80013194 <calloc+0x50>
        memset(block->addr, 0, num);
    80013176:	fe843783          	ld	a5,-24(s0)
    8001317a:	639c                	ld	a5,0(a5)
    8001317c:	fd843703          	ld	a4,-40(s0)
    80013180:	2701                	sext.w	a4,a4
    80013182:	863a                	mv	a2,a4
    80013184:	4581                	li	a1,0
    80013186:	853e                	mv	a0,a5
    80013188:	21a020ef          	jal	ra,800153a2 <memset>
        return block->addr;
    8001318c:	fe843783          	ld	a5,-24(s0)
    80013190:	639c                	ld	a5,0(a5)
    80013192:	a011                	j	80013196 <calloc+0x52>
    }
    return NULL;
    80013194:	4781                	li	a5,0
}
    80013196:	853e                	mv	a0,a5
    80013198:	70a2                	ld	ra,40(sp)
    8001319a:	7402                	ld	s0,32(sp)
    8001319c:	6145                	addi	sp,sp,48
    8001319e:	8082                	ret

00000000800131a0 <count_blocks>:

static size_t count_blocks(Block *ptr)
{
    800131a0:	7179                	addi	sp,sp,-48
    800131a2:	f422                	sd	s0,40(sp)
    800131a4:	1800                	addi	s0,sp,48
    800131a6:	fca43c23          	sd	a0,-40(s0)
    size_t num = 0;
    800131aa:	fe043423          	sd	zero,-24(s0)
    while (ptr != NULL) {
    800131ae:	a819                	j	800131c4 <count_blocks+0x24>
        num++;
    800131b0:	fe843783          	ld	a5,-24(s0)
    800131b4:	0785                	addi	a5,a5,1
    800131b6:	fef43423          	sd	a5,-24(s0)
        ptr = ptr->next;
    800131ba:	fd843783          	ld	a5,-40(s0)
    800131be:	679c                	ld	a5,8(a5)
    800131c0:	fcf43c23          	sd	a5,-40(s0)
    while (ptr != NULL) {
    800131c4:	fd843783          	ld	a5,-40(s0)
    800131c8:	f7e5                	bnez	a5,800131b0 <count_blocks+0x10>
    }
    return num;
    800131ca:	fe843783          	ld	a5,-24(s0)
}
    800131ce:	853e                	mv	a0,a5
    800131d0:	7422                	ld	s0,40(sp)
    800131d2:	6145                	addi	sp,sp,48
    800131d4:	8082                	ret

00000000800131d6 <heap_num_free>:
static size_t heap_num_free()
{
    800131d6:	1141                	addi	sp,sp,-16
    800131d8:	e406                	sd	ra,8(sp)
    800131da:	e022                	sd	s0,0(sp)
    800131dc:	0800                	addi	s0,sp,16
    return count_blocks(heap->free);
    800131de:	00005797          	auipc	a5,0x5
    800131e2:	e4a78793          	addi	a5,a5,-438 # 80018028 <heap>
    800131e6:	639c                	ld	a5,0(a5)
    800131e8:	639c                	ld	a5,0(a5)
    800131ea:	853e                	mv	a0,a5
    800131ec:	fb5ff0ef          	jal	ra,800131a0 <count_blocks>
    800131f0:	87aa                	mv	a5,a0
}
    800131f2:	853e                	mv	a0,a5
    800131f4:	60a2                	ld	ra,8(sp)
    800131f6:	6402                	ld	s0,0(sp)
    800131f8:	0141                	addi	sp,sp,16
    800131fa:	8082                	ret

00000000800131fc <heap_num_used>:
static size_t heap_num_used()
{
    800131fc:	1141                	addi	sp,sp,-16
    800131fe:	e406                	sd	ra,8(sp)
    80013200:	e022                	sd	s0,0(sp)
    80013202:	0800                	addi	s0,sp,16
    return count_blocks(heap->used);
    80013204:	00005797          	auipc	a5,0x5
    80013208:	e2478793          	addi	a5,a5,-476 # 80018028 <heap>
    8001320c:	639c                	ld	a5,0(a5)
    8001320e:	679c                	ld	a5,8(a5)
    80013210:	853e                	mv	a0,a5
    80013212:	f8fff0ef          	jal	ra,800131a0 <count_blocks>
    80013216:	87aa                	mv	a5,a0
}
    80013218:	853e                	mv	a0,a5
    8001321a:	60a2                	ld	ra,8(sp)
    8001321c:	6402                	ld	s0,0(sp)
    8001321e:	0141                	addi	sp,sp,16
    80013220:	8082                	ret

0000000080013222 <heap_num_fresh>:
static size_t heap_num_fresh()
{
    80013222:	1141                	addi	sp,sp,-16
    80013224:	e406                	sd	ra,8(sp)
    80013226:	e022                	sd	s0,0(sp)
    80013228:	0800                	addi	s0,sp,16
    return count_blocks(heap->fresh);
    8001322a:	00005797          	auipc	a5,0x5
    8001322e:	dfe78793          	addi	a5,a5,-514 # 80018028 <heap>
    80013232:	639c                	ld	a5,0(a5)
    80013234:	6b9c                	ld	a5,16(a5)
    80013236:	853e                	mv	a0,a5
    80013238:	f69ff0ef          	jal	ra,800131a0 <count_blocks>
    8001323c:	87aa                	mv	a5,a0
}
    8001323e:	853e                	mv	a0,a5
    80013240:	60a2                	ld	ra,8(sp)
    80013242:	6402                	ld	s0,0(sp)
    80013244:	0141                	addi	sp,sp,16
    80013246:	8082                	ret

0000000080013248 <heap_check>:
static bool heap_check()
{
    80013248:	1101                	addi	sp,sp,-32
    8001324a:	ec06                	sd	ra,24(sp)
    8001324c:	e822                	sd	s0,16(sp)
    8001324e:	e426                	sd	s1,8(sp)
    80013250:	1000                	addi	s0,sp,32
    return heap_max_blocks == heap_num_free() + heap_num_used() + heap_num_fresh();
    80013252:	f85ff0ef          	jal	ra,800131d6 <heap_num_free>
    80013256:	84aa                	mv	s1,a0
    80013258:	fa5ff0ef          	jal	ra,800131fc <heap_num_used>
    8001325c:	87aa                	mv	a5,a0
    8001325e:	94be                	add	s1,s1,a5
    80013260:	fc3ff0ef          	jal	ra,80013222 <heap_num_fresh>
    80013264:	87aa                	mv	a5,a0
    80013266:	00f48733          	add	a4,s1,a5
    8001326a:	00005797          	auipc	a5,0x5
    8001326e:	dde78793          	addi	a5,a5,-546 # 80018048 <heap_max_blocks>
    80013272:	639c                	ld	a5,0(a5)
    80013274:	40f707b3          	sub	a5,a4,a5
    80013278:	0017b793          	seqz	a5,a5
    8001327c:	0ff7f793          	andi	a5,a5,255
}
    80013280:	853e                	mv	a0,a5
    80013282:	60e2                	ld	ra,24(sp)
    80013284:	6442                	ld	s0,16(sp)
    80013286:	64a2                	ld	s1,8(sp)
    80013288:	6105                	addi	sp,sp,32
    8001328a:	8082                	ret

000000008001328c <heap_print_stats>:

void heap_print_stats(void)
{
    8001328c:	7179                	addi	sp,sp,-48
    8001328e:	f406                	sd	ra,40(sp)
    80013290:	f022                	sd	s0,32(sp)
    80013292:	ec26                	sd	s1,24(sp)
    80013294:	e84a                	sd	s2,16(sp)
    80013296:	e44e                	sd	s3,8(sp)
    80013298:	1800                	addi	s0,sp,48
    debugf(
    8001329a:	f3dff0ef          	jal	ra,800131d6 <heap_num_free>
    8001329e:	84aa                	mv	s1,a0
    800132a0:	f5dff0ef          	jal	ra,800131fc <heap_num_used>
    800132a4:	892a                	mv	s2,a0
    800132a6:	f7dff0ef          	jal	ra,80013222 <heap_num_fresh>
    800132aa:	89aa                	mv	s3,a0
        "HEAP\n~~~~\nFree blocks:    %lu\nUsed blocks:    %lu\nFresh blocks:   %lu\nHeap "
        "check:     %s\n",
        heap_num_free(), heap_num_used(), heap_num_fresh(), heap_check() ? "good" : "bad");
    800132ac:	f9dff0ef          	jal	ra,80013248 <heap_check>
    800132b0:	87aa                	mv	a5,a0
    debugf(
    800132b2:	c791                	beqz	a5,800132be <heap_print_stats+0x32>
    800132b4:	00006797          	auipc	a5,0x6
    800132b8:	2d478793          	addi	a5,a5,724 # 80019588 <pow10.0+0x358>
    800132bc:	a029                	j	800132c6 <heap_print_stats+0x3a>
    800132be:	00006797          	auipc	a5,0x6
    800132c2:	2d278793          	addi	a5,a5,722 # 80019590 <pow10.0+0x360>
    800132c6:	873e                	mv	a4,a5
    800132c8:	86ce                	mv	a3,s3
    800132ca:	864a                	mv	a2,s2
    800132cc:	85a6                	mv	a1,s1
    800132ce:	00006517          	auipc	a0,0x6
    800132d2:	2ca50513          	addi	a0,a0,714 # 80019598 <pow10.0+0x368>
    800132d6:	319000ef          	jal	ra,80013dee <debugf>
}
    800132da:	0001                	nop
    800132dc:	70a2                	ld	ra,40(sp)
    800132de:	7402                	ld	s0,32(sp)
    800132e0:	64e2                	ld	s1,24(sp)
    800132e2:	6942                	ld	s2,16(sp)
    800132e4:	69a2                	ld	s3,8(sp)
    800132e6:	6145                	addi	sp,sp,48
    800132e8:	8082                	ret

00000000800132ea <kmalloc>:
void *kmalloc(size_t sz)
{
    800132ea:	1101                	addi	sp,sp,-32
    800132ec:	ec06                	sd	ra,24(sp)
    800132ee:	e822                	sd	s0,16(sp)
    800132f0:	1000                	addi	s0,sp,32
    800132f2:	fea43423          	sd	a0,-24(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kmalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
    return alloc(sz);
    800132f6:	fe843503          	ld	a0,-24(s0)
    800132fa:	e19ff0ef          	jal	ra,80013112 <alloc>
    800132fe:	87aa                	mv	a5,a0
}
    80013300:	853e                	mv	a0,a5
    80013302:	60e2                	ld	ra,24(sp)
    80013304:	6442                	ld	s0,16(sp)
    80013306:	6105                	addi	sp,sp,32
    80013308:	8082                	ret

000000008001330a <kcalloc>:
void *kcalloc(size_t n, size_t sz)
{
    8001330a:	1101                	addi	sp,sp,-32
    8001330c:	ec06                	sd	ra,24(sp)
    8001330e:	e822                	sd	s0,16(sp)
    80013310:	1000                	addi	s0,sp,32
    80013312:	fea43423          	sd	a0,-24(s0)
    80013316:	feb43023          	sd	a1,-32(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kcalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
    return calloc(n, sz);
    8001331a:	fe043583          	ld	a1,-32(s0)
    8001331e:	fe843503          	ld	a0,-24(s0)
    80013322:	e23ff0ef          	jal	ra,80013144 <calloc>
    80013326:	87aa                	mv	a5,a0
}
    80013328:	853e                	mv	a0,a5
    8001332a:	60e2                	ld	ra,24(sp)
    8001332c:	6442                	ld	s0,16(sp)
    8001332e:	6105                	addi	sp,sp,32
    80013330:	8082                	ret

0000000080013332 <kfree>:
void kfree(void *m)
{
    80013332:	1101                	addi	sp,sp,-32
    80013334:	ec06                	sd	ra,24(sp)
    80013336:	e822                	sd	s0,16(sp)
    80013338:	1000                	addi	s0,sp,32
    8001333a:	fea43423          	sd	a0,-24(s0)
    if (m != NULL) {
    8001333e:	fe843783          	ld	a5,-24(s0)
    80013342:	c789                	beqz	a5,8001334c <kfree+0x1a>
        free(m);
    80013344:	fe843503          	ld	a0,-24(s0)
    80013348:	ac9ff0ef          	jal	ra,80012e10 <free>
    }
#ifdef DEBUG_KMALLOC
    debugf("[kfree]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
}
    8001334c:	0001                	nop
    8001334e:	60e2                	ld	ra,24(sp)
    80013350:	6442                	ld	s0,16(sp)
    80013352:	6105                	addi	sp,sp,32
    80013354:	8082                	ret

0000000080013356 <heap_init>:

void heap_init(void)
{
    80013356:	1101                	addi	sp,sp,-32
    80013358:	ec06                	sd	ra,24(sp)
    8001335a:	e822                	sd	s0,16(sp)
    8001335c:	1000                	addi	s0,sp,32
#ifdef DEBUG_HEAP
    debugf("[heap_init]: Prior to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
           page_count_free());
#endif
    void *start = page_znalloc(KERNEL_HEAP_PAGES);
    8001335e:	6505                	lui	a0,0x1
    80013360:	664010ef          	jal	ra,800149c4 <page_znalloc>
    80013364:	fea43423          	sd	a0,-24(s0)
    debugf("[heap_init]: Heap start at 0x%08lx\n", start);
    debugf("[heap_init]: After to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
           page_count_free());
#endif

    mmu_map_range(kernel_mmu_table, KERNEL_HEAP_START_VADDR, KERNEL_HEAP_END_VADDR, (uint64_t)start,
    80013368:	00005797          	auipc	a5,0x5
    8001336c:	c9878793          	addi	a5,a5,-872 # 80018000 <kernel_mmu_table>
    80013370:	6388                	ld	a0,0(a5)
    80013372:	fe843683          	ld	a3,-24(s0)
    80013376:	4799                	li	a5,6
    80013378:	4701                	li	a4,0
    8001337a:	00e08637          	lui	a2,0xe08
    8001337e:	7f760613          	addi	a2,a2,2039 # e087f7 <i+0xe087d7>
    80013382:	0636                	slli	a2,a2,0xd
    80013384:	00e085b7          	lui	a1,0xe08
    80013388:	15dd                	addi	a1,a1,-9
    8001338a:	05b6                	slli	a1,a1,0xd
    8001338c:	e44ff0ef          	jal	ra,800129d0 <mmu_map_range>
                  MMU_LEVEL_4K, PB_READ | PB_WRITE);
    init((void *)KERNEL_HEAP_START_VADDR, (void *)KERNEL_HEAP_END_VADDR, KERNEL_HEAP_PAGES / 4, 16,
    80013390:	4721                	li	a4,8
    80013392:	46c1                	li	a3,16
    80013394:	40000613          	li	a2,1024
    80013398:	00e087b7          	lui	a5,0xe08
    8001339c:	7f778793          	addi	a5,a5,2039 # e087f7 <i+0xe087d7>
    800133a0:	00d79593          	slli	a1,a5,0xd
    800133a4:	00e087b7          	lui	a5,0xe08
    800133a8:	17dd                	addi	a5,a5,-9
    800133aa:	00d79513          	slli	a0,a5,0xd
    800133ae:	94bff0ef          	jal	ra,80012cf8 <init>
         8);

}
    800133b2:	0001                	nop
    800133b4:	60e2                	ld	ra,24(sp)
    800133b6:	6442                	ld	s0,16(sp)
    800133b8:	6105                	addi	sp,sp,32
    800133ba:	8082                	ret

00000000800133bc <init_systems>:
// the kernel.
// Defined in src/include/mmu.h
struct page_table *kernel_mmu_table;

static void init_systems(void)
{
    800133bc:	1101                	addi	sp,sp,-32
    800133be:	ec06                	sd	ra,24(sp)
    800133c0:	e822                	sd	s0,16(sp)
    800133c2:	1000                	addi	s0,sp,32
    void plic_init(void);
    plic_init();
    800133c4:	7c7000ef          	jal	ra,8001438a <plic_init>
    void page_init(void);
    page_init();
    800133c8:	298010ef          	jal	ra,80014660 <page_init>

#ifdef USE_MMU
    struct page_table *pt = mmu_table_create();
    800133cc:	a02ff0ef          	jal	ra,800125ce <mmu_table_create>
    800133d0:	fea43423          	sd	a0,-24(s0)
    kernel_mmu_table = pt;
    800133d4:	00005797          	auipc	a5,0x5
    800133d8:	c2c78793          	addi	a5,a5,-980 # 80018000 <kernel_mmu_table>
    800133dc:	fe843703          	ld	a4,-24(s0)
    800133e0:	e398                	sd	a4,0(a5)
    // Map memory segments for our kernel
    mmu_map_range(pt, sym_start(text), sym_end(heap), sym_start(text), MMU_LEVEL_1G,
    800133e2:	ffffd597          	auipc	a1,0xffffd
    800133e6:	c1e58593          	addi	a1,a1,-994 # 80010000 <_memory_start>
    800133ea:	07ffd617          	auipc	a2,0x7ffd
    800133ee:	c1660613          	addi	a2,a2,-1002 # 88010000 <_heap_end>
    800133f2:	ffffd697          	auipc	a3,0xffffd
    800133f6:	c0e68693          	addi	a3,a3,-1010 # 80010000 <_memory_start>
    800133fa:	47b9                	li	a5,14
    800133fc:	4709                	li	a4,2
    800133fe:	fe843503          	ld	a0,-24(s0)
    80013402:	dceff0ef          	jal	ra,800129d0 <mmu_map_range>
                  PB_READ | PB_WRITE | PB_EXECUTE);
    // PLIC
    mmu_map_range(pt, 0x0C000000, 0x0C2FFFFF, 0x0C000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    80013406:	4799                	li	a5,6
    80013408:	4705                	li	a4,1
    8001340a:	0c0006b7          	lui	a3,0xc000
    8001340e:	0c300637          	lui	a2,0xc300
    80013412:	167d                	addi	a2,a2,-1
    80013414:	0c0005b7          	lui	a1,0xc000
    80013418:	fe843503          	ld	a0,-24(s0)
    8001341c:	db4ff0ef          	jal	ra,800129d0 <mmu_map_range>
    // PCIe ECAM
    mmu_map_range(pt, 0x30000000, 0x30FFFFFF, 0x30000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    80013420:	4799                	li	a5,6
    80013422:	4705                	li	a4,1
    80013424:	300006b7          	lui	a3,0x30000
    80013428:	31000637          	lui	a2,0x31000
    8001342c:	167d                	addi	a2,a2,-1
    8001342e:	300005b7          	lui	a1,0x30000
    80013432:	fe843503          	ld	a0,-24(s0)
    80013436:	d9aff0ef          	jal	ra,800129d0 <mmu_map_range>
    // PCIe MMIO
    mmu_map_range(pt, 0x40000000, 0x4FFFFFFF, 0x40000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    8001343a:	4799                	li	a5,6
    8001343c:	4705                	li	a4,1
    8001343e:	400006b7          	lui	a3,0x40000
    80013442:	50000637          	lui	a2,0x50000
    80013446:	167d                	addi	a2,a2,-1
    80013448:	400005b7          	lui	a1,0x40000
    8001344c:	fe843503          	ld	a0,-24(s0)
    80013450:	d80ff0ef          	jal	ra,800129d0 <mmu_map_range>

    // TODO: turn on the MMU when you've written the src/mmu.c functions
    CSR_WRITE("satp", SATP_KERNEL); 
    80013454:	00005797          	auipc	a5,0x5
    80013458:	bac78793          	addi	a5,a5,-1108 # 80018000 <kernel_mmu_table>
    8001345c:	639c                	ld	a5,0(a5)
    8001345e:	00c7d713          	srli	a4,a5,0xc
    80013462:	57fd                	li	a5,-1
    80013464:	83d1                	srli	a5,a5,0x14
    80013466:	8f7d                	and	a4,a4,a5
    80013468:	8ffff7b7          	lui	a5,0x8ffff
    8001346c:	1782                	slli	a5,a5,0x20
    8001346e:	8fd9                	or	a5,a5,a4
    80013470:	18079073          	csrw	satp,a5
    SFENCE_ALL();
    80013474:	12000073          	sfence.vma
    void *kcalloc(uint64_t elem, uint64_t size);
    void kfree(void *ptr);
    void util_connect_galloc(void *(*malloc)(uint64_t size),
                             void *(*calloc)(uint64_t elem, uint64_t size),
                             void (*free)(void *ptr));
    util_connect_galloc(kmalloc, kcalloc, kfree);
    80013478:	00000617          	auipc	a2,0x0
    8001347c:	eba60613          	addi	a2,a2,-326 # 80013332 <kfree>
    80013480:	00000597          	auipc	a1,0x0
    80013484:	e8a58593          	addi	a1,a1,-374 # 8001330a <kcalloc>
    80013488:	00000517          	auipc	a0,0x0
    8001348c:	e6250513          	addi	a0,a0,-414 # 800132ea <kmalloc>
    80013490:	069010ef          	jal	ra,80014cf8 <util_connect_galloc>
    heap_init();
    80013494:	ec3ff0ef          	jal	ra,80013356 <heap_init>
    pci_init();
#endif
#ifdef USE_VIRTIO
    virtio_init();
#endif
}
    80013498:	0001                	nop
    8001349a:	60e2                	ld	ra,24(sp)
    8001349c:	6442                	ld	s0,16(sp)
    8001349e:	6105                	addi	sp,sp,32
    800134a0:	8082                	ret

00000000800134a2 <main>:
static const char *hart_status_values[] = {"NOT PRESENT", "STOPPED", "STARTING", "RUNNING"};
#ifdef RUN_INTERNAL_CONSOLE
static void console(void);
#endif
void main(unsigned int hart)
{
    800134a2:	7179                	addi	sp,sp,-48
    800134a4:	f406                	sd	ra,40(sp)
    800134a6:	f022                	sd	s0,32(sp)
    800134a8:	1800                	addi	s0,sp,48
    800134aa:	87aa                	mv	a5,a0
    800134ac:	fcf42e23          	sw	a5,-36(s0)
    // Initialize the page allocator
    // Allocate and zero the kernel's page table.

    // Kind of neat to see our memory mappings to ensure they make sense.
    logf(LOG_INFO, "[[ MEMORY MAPPINGS ]]\n");
    800134b0:	00006597          	auipc	a1,0x6
    800134b4:	17858593          	addi	a1,a1,376 # 80019628 <pow10.0+0x3f8>
    800134b8:	4511                	li	a0,4
    800134ba:	0d7000ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  [TEXT]  : 0x%08lx -> 0x%08lx\n", sym_start(text), sym_end(text));
    800134be:	ffffd797          	auipc	a5,0xffffd
    800134c2:	b4278793          	addi	a5,a5,-1214 # 80010000 <_memory_start>
    800134c6:	00003717          	auipc	a4,0x3
    800134ca:	40c70713          	addi	a4,a4,1036 # 800168d2 <_text_end>
    800134ce:	86ba                	mv	a3,a4
    800134d0:	863e                	mv	a2,a5
    800134d2:	00006597          	auipc	a1,0x6
    800134d6:	16e58593          	addi	a1,a1,366 # 80019640 <pow10.0+0x410>
    800134da:	4511                	li	a0,4
    800134dc:	0b5000ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  [BSS]   : 0x%08lx -> 0x%08lx\n", sym_start(bss), sym_end(bss));
    800134e0:	00005797          	auipc	a5,0x5
    800134e4:	b2078793          	addi	a5,a5,-1248 # 80018000 <kernel_mmu_table>
    800134e8:	00005717          	auipc	a4,0x5
    800134ec:	b7070713          	addi	a4,a4,-1168 # 80018058 <_bss_end>
    800134f0:	86ba                	mv	a3,a4
    800134f2:	863e                	mv	a2,a5
    800134f4:	00006597          	auipc	a1,0x6
    800134f8:	16c58593          	addi	a1,a1,364 # 80019660 <pow10.0+0x430>
    800134fc:	4511                	li	a0,4
    800134fe:	093000ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  [RODATA]: 0x%08lx -> 0x%08lx\n", sym_start(rodata), sym_end(rodata));
    80013502:	00006797          	auipc	a5,0x6
    80013506:	afe78793          	addi	a5,a5,-1282 # 80019000 <SYSCALLS>
    8001350a:	00007717          	auipc	a4,0x7
    8001350e:	e9070713          	addi	a4,a4,-368 # 8001a39a <_rodata_end>
    80013512:	86ba                	mv	a3,a4
    80013514:	863e                	mv	a2,a5
    80013516:	00006597          	auipc	a1,0x6
    8001351a:	16a58593          	addi	a1,a1,362 # 80019680 <pow10.0+0x450>
    8001351e:	4511                	li	a0,4
    80013520:	071000ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  [DATA]  : 0x%08lx -> 0x%08lx\n", sym_start(data), sym_end(data));
    80013524:	00008797          	auipc	a5,0x8
    80013528:	adc78793          	addi	a5,a5,-1316 # 8001b000 <k_log_level>
    8001352c:	00008717          	auipc	a4,0x8
    80013530:	afc70713          	addi	a4,a4,-1284 # 8001b028 <_data_end>
    80013534:	86ba                	mv	a3,a4
    80013536:	863e                	mv	a2,a5
    80013538:	00006597          	auipc	a1,0x6
    8001353c:	16858593          	addi	a1,a1,360 # 800196a0 <pow10.0+0x470>
    80013540:	4511                	li	a0,4
    80013542:	04f000ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  [STACK] : 0x%08lx -> 0x%08lx\n", sym_start(stack), sym_end(stack));
    80013546:	00009797          	auipc	a5,0x9
    8001354a:	aba78793          	addi	a5,a5,-1350 # 8001c000 <_stack_start>
    8001354e:	00011717          	auipc	a4,0x11
    80013552:	ab270713          	addi	a4,a4,-1358 # 80024000 <_heap_start>
    80013556:	86ba                	mv	a3,a4
    80013558:	863e                	mv	a2,a5
    8001355a:	00006597          	auipc	a1,0x6
    8001355e:	16658593          	addi	a1,a1,358 # 800196c0 <pow10.0+0x490>
    80013562:	4511                	li	a0,4
    80013564:	02d000ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  [HEAP]  : 0x%08lx -> 0x%08lx\n", sym_start(heap), sym_end(heap));
    80013568:	00011797          	auipc	a5,0x11
    8001356c:	a9878793          	addi	a5,a5,-1384 # 80024000 <_heap_start>
    80013570:	07ffd717          	auipc	a4,0x7ffd
    80013574:	a9070713          	addi	a4,a4,-1392 # 88010000 <_heap_end>
    80013578:	86ba                	mv	a3,a4
    8001357a:	863e                	mv	a2,a5
    8001357c:	00006597          	auipc	a1,0x6
    80013580:	16458593          	addi	a1,a1,356 # 800196e0 <pow10.0+0x4b0>
    80013584:	4511                	li	a0,4
    80013586:	00b000ef          	jal	ra,80013d90 <logf>

    logf(LOG_INFO, "[[ HART MAPPINGS ]]\n");
    8001358a:	00006597          	auipc	a1,0x6
    8001358e:	17658593          	addi	a1,a1,374 # 80019700 <pow10.0+0x4d0>
    80013592:	4511                	li	a0,4
    80013594:	7fc000ef          	jal	ra,80013d90 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80013598:	fe042623          	sw	zero,-20(s0)
    8001359c:	a8bd                	j	8001361a <main+0x178>
        if (i == hart) {
    8001359e:	fec42703          	lw	a4,-20(s0)
    800135a2:	fdc42783          	lw	a5,-36(s0)
    800135a6:	2701                	sext.w	a4,a4
    800135a8:	2781                	sext.w	a5,a5
    800135aa:	02f71b63          	bne	a4,a5,800135e0 <main+0x13e>
            logf(LOG_INFO, "  [HART#%d]: %s (this HART).\n", i, hart_status_values[sbi_hart_get_status(i)]);
    800135ae:	fec42783          	lw	a5,-20(s0)
    800135b2:	853e                	mv	a0,a5
    800135b4:	195000ef          	jal	ra,80013f48 <sbi_hart_get_status>
    800135b8:	87aa                	mv	a5,a0
    800135ba:	00008717          	auipc	a4,0x8
    800135be:	a4e70713          	addi	a4,a4,-1458 # 8001b008 <hart_status_values>
    800135c2:	078e                	slli	a5,a5,0x3
    800135c4:	97ba                	add	a5,a5,a4
    800135c6:	6398                	ld	a4,0(a5)
    800135c8:	fec42783          	lw	a5,-20(s0)
    800135cc:	86ba                	mv	a3,a4
    800135ce:	863e                	mv	a2,a5
    800135d0:	00006597          	auipc	a1,0x6
    800135d4:	14858593          	addi	a1,a1,328 # 80019718 <pow10.0+0x4e8>
    800135d8:	4511                	li	a0,4
    800135da:	7b6000ef          	jal	ra,80013d90 <logf>
    800135de:	a80d                	j	80013610 <main+0x16e>
        }
        else {
            logf(LOG_INFO, "  [HART#%d]: %s.\n", i, hart_status_values[sbi_hart_get_status(i)]);
    800135e0:	fec42783          	lw	a5,-20(s0)
    800135e4:	853e                	mv	a0,a5
    800135e6:	163000ef          	jal	ra,80013f48 <sbi_hart_get_status>
    800135ea:	87aa                	mv	a5,a0
    800135ec:	00008717          	auipc	a4,0x8
    800135f0:	a1c70713          	addi	a4,a4,-1508 # 8001b008 <hart_status_values>
    800135f4:	078e                	slli	a5,a5,0x3
    800135f6:	97ba                	add	a5,a5,a4
    800135f8:	6398                	ld	a4,0(a5)
    800135fa:	fec42783          	lw	a5,-20(s0)
    800135fe:	86ba                	mv	a3,a4
    80013600:	863e                	mv	a2,a5
    80013602:	00006597          	auipc	a1,0x6
    80013606:	13658593          	addi	a1,a1,310 # 80019738 <pow10.0+0x508>
    8001360a:	4511                	li	a0,4
    8001360c:	784000ef          	jal	ra,80013d90 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80013610:	fec42783          	lw	a5,-20(s0)
    80013614:	2785                	addiw	a5,a5,1
    80013616:	fef42623          	sw	a5,-20(s0)
    8001361a:	fec42783          	lw	a5,-20(s0)
    8001361e:	0007871b          	sext.w	a4,a5
    80013622:	478d                	li	a5,3
    80013624:	f6e7fde3          	bgeu	a5,a4,8001359e <main+0xfc>
        }
    }

    // Initialize all submodules here, including PCI, VirtIO, Heap, etc.
    // Many will require the MMU, so write those functions first.
    init_systems();
    80013628:	d95ff0ef          	jal	ra,800133bc <init_systems>

    // Now that all submodules are initialized, you need to schedule the init process
    // and the idle processes for each HART.
    logf(LOG_INFO, "Congratulations! You made it to the OS! Going back to sleep.\n");
    8001362c:	00006597          	auipc	a1,0x6
    80013630:	12458593          	addi	a1,a1,292 # 80019750 <pow10.0+0x520>
    80013634:	4511                	li	a0,4
    80013636:	75a000ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, 
    8001363a:	00006597          	auipc	a1,0x6
    8001363e:	15658593          	addi	a1,a1,342 # 80019790 <pow10.0+0x560>
    80013642:	4511                	li	a0,4
    80013644:	74c000ef          	jal	ra,80013d90 <logf>
        "The logf function in the OS uses sbi_putchar(), so this means ECALLs from S-mode are "
        "working!\n");
    logf(LOG_INFO, 
    80013648:	00006597          	auipc	a1,0x6
    8001364c:	1a858593          	addi	a1,a1,424 # 800197f0 <pow10.0+0x5c0>
    80013650:	4511                	li	a0,4
    80013652:	73e000ef          	jal	ra,80013d90 <logf>
    // Below is just a little shell that demonstrates the sbi_getchar and
    // how the console works.

    // This is defined above main()
#ifdef RUN_INTERNAL_CONSOLE
    console();
    80013656:	004000ef          	jal	ra,8001365a <console>

000000008001365a <console>:
#endif
}

#ifdef RUN_INTERNAL_CONSOLE
ATTR_NORET static void console(void)
{
    8001365a:	7179                	addi	sp,sp,-48
    8001365c:	f406                	sd	ra,40(sp)
    8001365e:	f022                	sd	s0,32(sp)
    80013660:	1800                	addi	s0,sp,48
    const int BUFFER_SIZE = 56;
    80013662:	03800313          	li	t1,56
    80013666:	fe642423          	sw	t1,-24(s0)
    int at                = 0;
    8001366a:	fe042623          	sw	zero,-20(s0)
    char input[BUFFER_SIZE];
    8001366e:	fe842303          	lw	t1,-24(s0)
    80013672:	137d                	addi	t1,t1,-1
    80013674:	fe643023          	sd	t1,-32(s0)
    80013678:	fe842303          	lw	t1,-24(s0)
    8001367c:	881a                	mv	a6,t1
    8001367e:	4881                	li	a7,0
    80013680:	03d85313          	srli	t1,a6,0x3d
    80013684:	00389693          	slli	a3,a7,0x3
    80013688:	00d366b3          	or	a3,t1,a3
    8001368c:	00381613          	slli	a2,a6,0x3
    80013690:	fe842683          	lw	a3,-24(s0)
    80013694:	8536                	mv	a0,a3
    80013696:	4581                	li	a1,0
    80013698:	03d55693          	srli	a3,a0,0x3d
    8001369c:	00359793          	slli	a5,a1,0x3
    800136a0:	8fd5                	or	a5,a5,a3
    800136a2:	00351713          	slli	a4,a0,0x3
    800136a6:	fe842783          	lw	a5,-24(s0)
    800136aa:	07bd                	addi	a5,a5,15
    800136ac:	8391                	srli	a5,a5,0x4
    800136ae:	0792                	slli	a5,a5,0x4
    800136b0:	40f10133          	sub	sp,sp,a5
    800136b4:	878a                	mv	a5,sp
    800136b6:	00078793          	mv	a5,a5
    800136ba:	fcf43c23          	sd	a5,-40(s0)
    logf(LOG_TEXT, "> ");
    800136be:	00006597          	auipc	a1,0x6
    800136c2:	19258593          	addi	a1,a1,402 # 80019850 <pow10.0+0x620>
    800136c6:	4541                	li	a0,16
    800136c8:	6c8000ef          	jal	ra,80013d90 <logf>
    do {
        char c;
        // Recall that sbi_getchar() will return -1, 0xff, 255
        // if the receiver is empty.
        if ((c = sbi_getchar()) != 0xff) {
    800136cc:	05d000ef          	jal	ra,80013f28 <sbi_getchar>
    800136d0:	87aa                	mv	a5,a0
    800136d2:	fcf40ba3          	sb	a5,-41(s0)
    800136d6:	fd744783          	lbu	a5,-41(s0)
    800136da:	0ff7f713          	andi	a4,a5,255
    800136de:	0ff00793          	li	a5,255
    800136e2:	22f70263          	beq	a4,a5,80013906 <console+0x2ac>
            if (c == '\r' || c == '\n') {
    800136e6:	fd744783          	lbu	a5,-41(s0)
    800136ea:	0ff7f713          	andi	a4,a5,255
    800136ee:	47b5                	li	a5,13
    800136f0:	00f70963          	beq	a4,a5,80013702 <console+0xa8>
    800136f4:	fd744783          	lbu	a5,-41(s0)
    800136f8:	0ff7f713          	andi	a4,a5,255
    800136fc:	47a9                	li	a5,10
    800136fe:	0cf71c63          	bne	a4,a5,800137d6 <console+0x17c>
                if (at > 0) {
    80013702:	fec42783          	lw	a5,-20(s0)
    80013706:	2781                	sext.w	a5,a5
    80013708:	0af05f63          	blez	a5,800137c6 <console+0x16c>
                    input[at] = '\0';
    8001370c:	fd843703          	ld	a4,-40(s0)
    80013710:	fec42783          	lw	a5,-20(s0)
    80013714:	97ba                	add	a5,a5,a4
    80013716:	00078023          	sb	zero,0(a5)
                    if (!strcmp(input, "quit")) {
    8001371a:	00006597          	auipc	a1,0x6
    8001371e:	13e58593          	addi	a1,a1,318 # 80019858 <pow10.0+0x628>
    80013722:	fd843503          	ld	a0,-40(s0)
    80013726:	10c020ef          	jal	ra,80015832 <strcmp>
    8001372a:	87aa                	mv	a5,a0
    8001372c:	eb99                	bnez	a5,80013742 <console+0xe8>
                        logf(LOG_TEXT, "\nShutting down...\n\n");
    8001372e:	00006597          	auipc	a1,0x6
    80013732:	13258593          	addi	a1,a1,306 # 80019860 <pow10.0+0x630>
    80013736:	4541                	li	a0,16
    80013738:	658000ef          	jal	ra,80013d90 <logf>
                        sbi_poweroff();
    8001373c:	09d000ef          	jal	ra,80013fd8 <sbi_poweroff>
    80013740:	a049                	j	800137c2 <console+0x168>
                    }
                    else if (!strcmp(input, "fatal")) {
    80013742:	00006597          	auipc	a1,0x6
    80013746:	13658593          	addi	a1,a1,310 # 80019878 <pow10.0+0x648>
    8001374a:	fd843503          	ld	a0,-40(s0)
    8001374e:	0e4020ef          	jal	ra,80015832 <strcmp>
    80013752:	87aa                	mv	a5,a0
    80013754:	eb95                	bnez	a5,80013788 <console+0x12e>
                        logf(LOG_TEXT, "\n");
    80013756:	00006597          	auipc	a1,0x6
    8001375a:	12a58593          	addi	a1,a1,298 # 80019880 <pow10.0+0x650>
    8001375e:	4541                	li	a0,16
    80013760:	630000ef          	jal	ra,80013d90 <logf>
                        fatalf("Testing fatal error @ %lu.\nHanging HART...\n", sbi_rtc_get_time());
    80013764:	119000ef          	jal	ra,8001407c <sbi_rtc_get_time>
    80013768:	87aa                	mv	a5,a0
    8001376a:	85be                	mv	a1,a5
    8001376c:	00006517          	auipc	a0,0x6
    80013770:	11c50513          	addi	a0,a0,284 # 80019888 <pow10.0+0x658>
    80013774:	6d0000ef          	jal	ra,80013e44 <fatalf>
                        logf(LOG_ERROR, "If I get here, fatal didn't work :'(.\n");
    80013778:	00006597          	auipc	a1,0x6
    8001377c:	14058593          	addi	a1,a1,320 # 800198b8 <pow10.0+0x688>
    80013780:	4505                	li	a0,1
    80013782:	60e000ef          	jal	ra,80013d90 <logf>
    80013786:	a835                	j	800137c2 <console+0x168>
                    }
                    else if (!strcmp(input, "heap")) {
    80013788:	00006597          	auipc	a1,0x6
    8001378c:	15858593          	addi	a1,a1,344 # 800198e0 <pow10.0+0x6b0>
    80013790:	fd843503          	ld	a0,-40(s0)
    80013794:	09e020ef          	jal	ra,80015832 <strcmp>
    80013798:	87aa                	mv	a5,a0
    8001379a:	eb99                	bnez	a5,800137b0 <console+0x156>
                        logf(LOG_TEXT, "\n");
    8001379c:	00006597          	auipc	a1,0x6
    800137a0:	0e458593          	addi	a1,a1,228 # 80019880 <pow10.0+0x650>
    800137a4:	4541                	li	a0,16
    800137a6:	5ea000ef          	jal	ra,80013d90 <logf>
                        void heap_print_stats(void);
                        heap_print_stats();
    800137aa:	ae3ff0ef          	jal	ra,8001328c <heap_print_stats>
    800137ae:	a811                	j	800137c2 <console+0x168>
                    }
                    else {
                        logf(LOG_TEXT, "\nUnknown command '%s'\n", input);
    800137b0:	fd843603          	ld	a2,-40(s0)
    800137b4:	00006597          	auipc	a1,0x6
    800137b8:	13458593          	addi	a1,a1,308 # 800198e8 <pow10.0+0x6b8>
    800137bc:	4541                	li	a0,16
    800137be:	5d2000ef          	jal	ra,80013d90 <logf>
                    }
                    at = 0;
    800137c2:	fe042623          	sw	zero,-20(s0)
                }
                logf(LOG_TEXT, "\n> ");
    800137c6:	00006597          	auipc	a1,0x6
    800137ca:	13a58593          	addi	a1,a1,314 # 80019900 <pow10.0+0x6d0>
    800137ce:	4541                	li	a0,16
    800137d0:	5c0000ef          	jal	ra,80013d90 <logf>
    800137d4:	aa2d                	j	8001390e <console+0x2b4>
            }
            else if (c == 127) {
    800137d6:	fd744783          	lbu	a5,-41(s0)
    800137da:	0ff7f713          	andi	a4,a5,255
    800137de:	07f00793          	li	a5,127
    800137e2:	02f71463          	bne	a4,a5,8001380a <console+0x1b0>
                // BACKSPACE
                if (at > 0) {
    800137e6:	fec42783          	lw	a5,-20(s0)
    800137ea:	2781                	sext.w	a5,a5
    800137ec:	eef050e3          	blez	a5,800136cc <console+0x72>
                    logf(LOG_TEXT, "\b \b");
    800137f0:	00006597          	auipc	a1,0x6
    800137f4:	11858593          	addi	a1,a1,280 # 80019908 <pow10.0+0x6d8>
    800137f8:	4541                	li	a0,16
    800137fa:	596000ef          	jal	ra,80013d90 <logf>
                    at -= 1;
    800137fe:	fec42783          	lw	a5,-20(s0)
    80013802:	37fd                	addiw	a5,a5,-1
    80013804:	fef42623          	sw	a5,-20(s0)
    80013808:	b5d1                	j	800136cc <console+0x72>
                }
            }
            else if (c == 0x1B) {
    8001380a:	fd744783          	lbu	a5,-41(s0)
    8001380e:	0ff7f713          	andi	a4,a5,255
    80013812:	47ed                	li	a5,27
    80013814:	0af71663          	bne	a4,a5,800138c0 <console+0x266>
                // Escape sequence
                char esc1 = sbi_getchar();
    80013818:	710000ef          	jal	ra,80013f28 <sbi_getchar>
    8001381c:	87aa                	mv	a5,a0
    8001381e:	fcf40b23          	sb	a5,-42(s0)
                char esc2 = sbi_getchar();
    80013822:	706000ef          	jal	ra,80013f28 <sbi_getchar>
    80013826:	87aa                	mv	a5,a0
    80013828:	fcf40aa3          	sb	a5,-43(s0)
                if (esc1 == 0x5B) {
    8001382c:	fd644783          	lbu	a5,-42(s0)
    80013830:	0ff7f713          	andi	a4,a5,255
    80013834:	05b00793          	li	a5,91
    80013838:	0cf71a63          	bne	a4,a5,8001390c <console+0x2b2>
                    switch (esc2) {
    8001383c:	fd544783          	lbu	a5,-43(s0)
    80013840:	2781                	sext.w	a5,a5
    80013842:	86be                	mv	a3,a5
    80013844:	04400713          	li	a4,68
    80013848:	06e68463          	beq	a3,a4,800138b0 <console+0x256>
    8001384c:	86be                	mv	a3,a5
    8001384e:	04400713          	li	a4,68
    80013852:	e6d74de3          	blt	a4,a3,800136cc <console+0x72>
    80013856:	86be                	mv	a3,a5
    80013858:	04300713          	li	a4,67
    8001385c:	04e68263          	beq	a3,a4,800138a0 <console+0x246>
    80013860:	86be                	mv	a3,a5
    80013862:	04300713          	li	a4,67
    80013866:	e6d743e3          	blt	a4,a3,800136cc <console+0x72>
    8001386a:	86be                	mv	a3,a5
    8001386c:	04100713          	li	a4,65
    80013870:	00e68863          	beq	a3,a4,80013880 <console+0x226>
    80013874:	873e                	mv	a4,a5
    80013876:	04200793          	li	a5,66
    8001387a:	00f70b63          	beq	a4,a5,80013890 <console+0x236>
    8001387e:	a841                	j	8001390e <console+0x2b4>
                        case 0x41:
                            logf(LOG_INFO, "UP\n");
    80013880:	00006597          	auipc	a1,0x6
    80013884:	09058593          	addi	a1,a1,144 # 80019910 <pow10.0+0x6e0>
    80013888:	4511                	li	a0,4
    8001388a:	506000ef          	jal	ra,80013d90 <logf>
                            break;
    8001388e:	a041                	j	8001390e <console+0x2b4>
                        case 0x42:
                            logf(LOG_INFO, "DOWN\n");
    80013890:	00006597          	auipc	a1,0x6
    80013894:	08858593          	addi	a1,a1,136 # 80019918 <pow10.0+0x6e8>
    80013898:	4511                	li	a0,4
    8001389a:	4f6000ef          	jal	ra,80013d90 <logf>
                            break;
    8001389e:	a885                	j	8001390e <console+0x2b4>
                        case 0x43:
                            logf(LOG_INFO, "RIGHT\n");
    800138a0:	00006597          	auipc	a1,0x6
    800138a4:	08058593          	addi	a1,a1,128 # 80019920 <pow10.0+0x6f0>
    800138a8:	4511                	li	a0,4
    800138aa:	4e6000ef          	jal	ra,80013d90 <logf>
                            break;
    800138ae:	a085                	j	8001390e <console+0x2b4>
                        case 0x44:
                            logf(LOG_INFO, "LEFT\n");
    800138b0:	00006597          	auipc	a1,0x6
    800138b4:	07858593          	addi	a1,a1,120 # 80019928 <pow10.0+0x6f8>
    800138b8:	4511                	li	a0,4
    800138ba:	4d6000ef          	jal	ra,80013d90 <logf>
                            break;
    800138be:	a881                	j	8001390e <console+0x2b4>
                    }
                }
            }
            else {
                if (at < (BUFFER_SIZE - 1)) {
    800138c0:	fe842783          	lw	a5,-24(s0)
    800138c4:	37fd                	addiw	a5,a5,-1
    800138c6:	0007871b          	sext.w	a4,a5
    800138ca:	fec42783          	lw	a5,-20(s0)
    800138ce:	2781                	sext.w	a5,a5
    800138d0:	dee7dee3          	bge	a5,a4,800136cc <console+0x72>
                    input[at++] = c;
    800138d4:	fec42783          	lw	a5,-20(s0)
    800138d8:	0017871b          	addiw	a4,a5,1
    800138dc:	fee42623          	sw	a4,-20(s0)
    800138e0:	fd843703          	ld	a4,-40(s0)
    800138e4:	97ba                	add	a5,a5,a4
    800138e6:	fd744703          	lbu	a4,-41(s0)
    800138ea:	00e78023          	sb	a4,0(a5)
                    logf(LOG_TEXT, "%c", c);
    800138ee:	fd744783          	lbu	a5,-41(s0)
    800138f2:	2781                	sext.w	a5,a5
    800138f4:	863e                	mv	a2,a5
    800138f6:	00006597          	auipc	a1,0x6
    800138fa:	03a58593          	addi	a1,a1,58 # 80019930 <pow10.0+0x700>
    800138fe:	4541                	li	a0,16
    80013900:	490000ef          	jal	ra,80013d90 <logf>
    80013904:	b3e1                	j	800136cc <console+0x72>
            }
        }
        else {
            // We can WFI here since interrupts are enabled
            // for the UART.
            WFI();
    80013906:	10500073          	wfi
    8001390a:	b3c9                	j	800136cc <console+0x72>
                }
    8001390c:	0001                	nop
    do {
    8001390e:	bb7d                	j	800136cc <console+0x72>

0000000080013910 <process_new>:
#define STACK_PAGES 2
#define STACK_SIZE  (STACK_PAGES * PAGE_SIZE)
#define STACK_TOP   0xfffffffc0ffee000UL

struct process *process_new(process_mode mode)
{
    80013910:	715d                	addi	sp,sp,-80
    80013912:	e486                	sd	ra,72(sp)
    80013914:	e0a2                	sd	s0,64(sp)
    80013916:	0880                	addi	s0,sp,80
    80013918:	87aa                	mv	a5,a0
    8001391a:	faf42e23          	sw	a5,-68(s0)
    struct process *p       = (struct process *)kzalloc(sizeof(*p));
    8001391e:	29000593          	li	a1,656
    80013922:	4505                	li	a0,1
    80013924:	9e7ff0ef          	jal	ra,8001330a <kcalloc>
    80013928:	fea43023          	sd	a0,-32(s0)

    p->hart                 = -1U;
    8001392c:	fe043783          	ld	a5,-32(s0)
    80013930:	577d                	li	a4,-1
    80013932:	c3d8                	sw	a4,4(a5)
    p->ptable               = mmu_table_create();
    80013934:	c9bfe0ef          	jal	ra,800125ce <mmu_table_create>
    80013938:	872a                	mv	a4,a0
    8001393a:	fe043783          	ld	a5,-32(s0)
    8001393e:	26e7bc23          	sd	a4,632(a5)
    p->state                = PS_WAITING;
    80013942:	fe043783          	ld	a5,-32(s0)
    80013946:	4705                	li	a4,1
    80013948:	c7d8                	sw	a4,12(a5)
    // p->pid               = fill_in_with_unique_pid

    // Set the trap frame and create all necessary structures.
    // p->frame.sepc = filled_in_by_ELF_loader
    p->frame.sstatus        = SSTATUS_SPP_BOOL(mode) | SSTATUS_FS_INITIAL | SSTATUS_SPIE;
    8001394a:	fbc42783          	lw	a5,-68(s0)
    8001394e:	2781                	sext.w	a5,a5
    80013950:	c789                	beqz	a5,8001395a <process_new+0x4a>
    80013952:	6789                	lui	a5,0x2
    80013954:	12078793          	addi	a5,a5,288 # 2120 <i+0x2100>
    80013958:	a021                	j	80013960 <process_new+0x50>
    8001395a:	6789                	lui	a5,0x2
    8001395c:	02078793          	addi	a5,a5,32 # 2020 <i+0x2000>
    80013960:	fe043703          	ld	a4,-32(s0)
    80013964:	24f73023          	sd	a5,576(a4)
    p->frame.sie            = SIE_SEIE | SIE_SSIE | SIE_STIE;
    80013968:	fe043783          	ld	a5,-32(s0)
    8001396c:	22200713          	li	a4,546
    80013970:	24e7b423          	sd	a4,584(a5)
    p->frame.satp           = SATP(p->ptable, p->pid);
    80013974:	fe043783          	ld	a5,-32(s0)
    80013978:	2787b783          	ld	a5,632(a5)
    8001397c:	00c7d713          	srli	a4,a5,0xc
    80013980:	57fd                	li	a5,-1
    80013982:	83d1                	srli	a5,a5,0x14
    80013984:	8f7d                	and	a4,a4,a5
    80013986:	fe043783          	ld	a5,-32(s0)
    8001398a:	0007d783          	lhu	a5,0(a5)
    8001398e:	17b2                	slli	a5,a5,0x2c
    80013990:	8f5d                	or	a4,a4,a5
    80013992:	57fd                	li	a5,-1
    80013994:	17fe                	slli	a5,a5,0x3f
    80013996:	8f5d                	or	a4,a4,a5
    80013998:	fe043783          	ld	a5,-32(s0)
    8001399c:	24e7b823          	sd	a4,592(a5)
    p->frame.sscratch       = (unsigned long)&p->frame;
    800139a0:	fe043783          	ld	a5,-32(s0)
    800139a4:	03878793          	addi	a5,a5,56
    800139a8:	873e                	mv	a4,a5
    800139aa:	fe043783          	ld	a5,-32(s0)
    800139ae:	24e7bc23          	sd	a4,600(a5)
    p->frame.stvec          = trampoline_trap_start;
    800139b2:	00007797          	auipc	a5,0x7
    800139b6:	9d078793          	addi	a5,a5,-1584 # 8001a382 <trampoline_trap_start>
    800139ba:	6398                	ld	a4,0(a5)
    800139bc:	fe043783          	ld	a5,-32(s0)
    800139c0:	26e7b023          	sd	a4,608(a5)
    p->frame.trap_satp      = SATP_KERNEL;
    800139c4:	00004797          	auipc	a5,0x4
    800139c8:	63c78793          	addi	a5,a5,1596 # 80018000 <kernel_mmu_table>
    800139cc:	639c                	ld	a5,0(a5)
    800139ce:	00c7d713          	srli	a4,a5,0xc
    800139d2:	57fd                	li	a5,-1
    800139d4:	83d1                	srli	a5,a5,0x14
    800139d6:	8f7d                	and	a4,a4,a5
    800139d8:	8ffff7b7          	lui	a5,0x8ffff
    800139dc:	1782                	slli	a5,a5,0x20
    800139de:	8f5d                	or	a4,a4,a5
    800139e0:	fe043783          	ld	a5,-32(s0)
    800139e4:	26e7b423          	sd	a4,616(a5) # ffffffff8ffff268 <_heap_end+0xffffffff07fef268>
    // p->frame.trap_stack = filled_in_by_SCHEDULER

    p->fds = vector_new_with_capacity(5);
    800139e8:	4515                	li	a0,5
    800139ea:	47c020ef          	jal	ra,80015e66 <vector_new_with_capacity>
    800139ee:	872a                	mv	a4,a0
    800139f0:	fe043783          	ld	a5,-32(s0)
    800139f4:	28e7b423          	sd	a4,648(a5)
    p->pages = list_new();
    800139f8:	36e010ef          	jal	ra,80014d66 <list_new>
    800139fc:	872a                	mv	a4,a0
    800139fe:	fe043783          	ld	a5,-32(s0)
    80013a02:	28e7b023          	sd	a4,640(a5)

    // We need to keep track of the stack itself in the kernel, so we can free it
    // later, but the user process will interact with the stack via the SP register.
    p->frame.xregs[XREG_SP] = STACK_TOP + STACK_SIZE;
    80013a06:	fe043783          	ld	a5,-32(s0)
    80013a0a:	c0fff737          	lui	a4,0xc0fff
    80013a0e:	0712                	slli	a4,a4,0x4
    80013a10:	e7b8                	sd	a4,72(a5)
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    80013a12:	fe043423          	sd	zero,-24(s0)
    80013a16:	a085                	j	80013a76 <process_new+0x166>
        void *stack = page_zalloc();
    80013a18:	4505                	li	a0,1
    80013a1a:	7ab000ef          	jal	ra,800149c4 <page_znalloc>
    80013a1e:	fca43423          	sd	a0,-56(s0)
        list_add_ptr(p->pages, stack);
    80013a22:	fe043783          	ld	a5,-32(s0)
    80013a26:	2807b783          	ld	a5,640(a5)
    80013a2a:	fc843703          	ld	a4,-56(s0)
    80013a2e:	85ba                	mv	a1,a4
    80013a30:	853e                	mv	a0,a5
    80013a32:	364010ef          	jal	ra,80014d96 <list_add>
        mmu_map(p->ptable, STACK_TOP + PAGE_SIZE * i, (unsigned long)stack,
    80013a36:	fe043783          	ld	a5,-32(s0)
    80013a3a:	2787b503          	ld	a0,632(a5)
    80013a3e:	fe843783          	ld	a5,-24(s0)
    80013a42:	00c79713          	slli	a4,a5,0xc
    80013a46:	ffe087b7          	lui	a5,0xffe08
    80013a4a:	17dd                	addi	a5,a5,-9
    80013a4c:	07b6                	slli	a5,a5,0xd
    80013a4e:	00f705b3          	add	a1,a4,a5
    80013a52:	fc843603          	ld	a2,-56(s0)
    80013a56:	fbc42783          	lw	a5,-68(s0)
    80013a5a:	2781                	sext.w	a5,a5
    80013a5c:	e399                	bnez	a5,80013a62 <process_new+0x152>
    80013a5e:	47c1                	li	a5,16
    80013a60:	a011                	j	80013a64 <process_new+0x154>
    80013a62:	4799                	li	a5,6
    80013a64:	873e                	mv	a4,a5
    80013a66:	4681                	li	a3,0
    80013a68:	ba1fe0ef          	jal	ra,80012608 <mmu_map>
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    80013a6c:	fe843783          	ld	a5,-24(s0)
    80013a70:	0785                	addi	a5,a5,1
    80013a72:	fef43423          	sd	a5,-24(s0)
    80013a76:	fe843703          	ld	a4,-24(s0)
    80013a7a:	4785                	li	a5,1
    80013a7c:	f8e7fee3          	bgeu	a5,a4,80013a18 <process_new+0x108>
    }

    // We need to map certain kernel portions into the user's page table. Notice
    // that the PB_USER is NOT set, but it needs to be there because we need to execute
    // the trap/start instructions while using the user's page table until we change SATP.
    unsigned long trans_trampoline_start = mmu_translate(kernel_mmu_table, trampoline_thread_start);
    80013a80:	00004797          	auipc	a5,0x4
    80013a84:	58078793          	addi	a5,a5,1408 # 80018000 <kernel_mmu_table>
    80013a88:	6398                	ld	a4,0(a5)
    80013a8a:	00007797          	auipc	a5,0x7
    80013a8e:	8e078793          	addi	a5,a5,-1824 # 8001a36a <trampoline_thread_start>
    80013a92:	639c                	ld	a5,0(a5)
    80013a94:	85be                	mv	a1,a5
    80013a96:	853a                	mv	a0,a4
    80013a98:	e69fe0ef          	jal	ra,80012900 <mmu_translate>
    80013a9c:	fca43c23          	sd	a0,-40(s0)
    unsigned long trans_trampoline_trap  = mmu_translate(kernel_mmu_table, trampoline_trap_start);
    80013aa0:	00004797          	auipc	a5,0x4
    80013aa4:	56078793          	addi	a5,a5,1376 # 80018000 <kernel_mmu_table>
    80013aa8:	6398                	ld	a4,0(a5)
    80013aaa:	00007797          	auipc	a5,0x7
    80013aae:	8d878793          	addi	a5,a5,-1832 # 8001a382 <trampoline_trap_start>
    80013ab2:	639c                	ld	a5,0(a5)
    80013ab4:	85be                	mv	a1,a5
    80013ab6:	853a                	mv	a0,a4
    80013ab8:	e49fe0ef          	jal	ra,80012900 <mmu_translate>
    80013abc:	fca43823          	sd	a0,-48(s0)
    mmu_map(p->ptable, trampoline_thread_start, trans_trampoline_start, MMU_LEVEL_4K,
    80013ac0:	fe043783          	ld	a5,-32(s0)
    80013ac4:	2787b503          	ld	a0,632(a5)
    80013ac8:	00007797          	auipc	a5,0x7
    80013acc:	8a278793          	addi	a5,a5,-1886 # 8001a36a <trampoline_thread_start>
    80013ad0:	639c                	ld	a5,0(a5)
    80013ad2:	4729                	li	a4,10
    80013ad4:	4681                	li	a3,0
    80013ad6:	fd843603          	ld	a2,-40(s0)
    80013ada:	85be                	mv	a1,a5
    80013adc:	b2dfe0ef          	jal	ra,80012608 <mmu_map>
            PB_READ | PB_EXECUTE);
    mmu_map(p->ptable, trampoline_trap_start, trans_trampoline_trap, MMU_LEVEL_4K,
    80013ae0:	fe043783          	ld	a5,-32(s0)
    80013ae4:	2787b503          	ld	a0,632(a5)
    80013ae8:	00007797          	auipc	a5,0x7
    80013aec:	89a78793          	addi	a5,a5,-1894 # 8001a382 <trampoline_trap_start>
    80013af0:	639c                	ld	a5,0(a5)
    80013af2:	4729                	li	a4,10
    80013af4:	4681                	li	a3,0
    80013af6:	fd043603          	ld	a2,-48(s0)
    80013afa:	85be                	mv	a1,a5
    80013afc:	b0dfe0ef          	jal	ra,80012608 <mmu_map>
            PB_READ | PB_EXECUTE);

    SFENCE_ASID(p->pid);
    80013b00:	fe043783          	ld	a5,-32(s0)
    80013b04:	0007d783          	lhu	a5,0(a5)
    80013b08:	12f00073          	sfence.vma	zero,a5

    return p;
    80013b0c:	fe043783          	ld	a5,-32(s0)
}
    80013b10:	853e                	mv	a0,a5
    80013b12:	60a6                	ld	ra,72(sp)
    80013b14:	6406                	ld	s0,64(sp)
    80013b16:	6161                	addi	sp,sp,80
    80013b18:	8082                	ret

0000000080013b1a <process_free>:

int process_free(struct process *p)
{
    80013b1a:	7179                	addi	sp,sp,-48
    80013b1c:	f406                	sd	ra,40(sp)
    80013b1e:	f022                	sd	s0,32(sp)
    80013b20:	1800                	addi	s0,sp,48
    80013b22:	fca43c23          	sd	a0,-40(s0)
    struct ListElem *e;
    unsigned int i;

    if (!p || !ON_HART_NONE(p)) {
    80013b26:	fd843783          	ld	a5,-40(s0)
    80013b2a:	cb81                	beqz	a5,80013b3a <process_free+0x20>
    80013b2c:	fd843783          	ld	a5,-40(s0)
    80013b30:	43dc                	lw	a5,4(a5)
    80013b32:	873e                	mv	a4,a5
    80013b34:	57fd                	li	a5,-1
    80013b36:	00f70463          	beq	a4,a5,80013b3e <process_free+0x24>
        // Process is invalid or running somewhere, or this is stale.
        return -1;
    80013b3a:	57fd                	li	a5,-1
    80013b3c:	a8d1                	j	80013c10 <process_free+0xf6>
    }

    // Free all resources allocated to the process.

    if (p->ptable) {
    80013b3e:	fd843783          	ld	a5,-40(s0)
    80013b42:	2787b783          	ld	a5,632(a5)
    80013b46:	cf91                	beqz	a5,80013b62 <process_free+0x48>
        mmu_free(p->ptable);
    80013b48:	fd843783          	ld	a5,-40(s0)
    80013b4c:	2787b783          	ld	a5,632(a5)
    80013b50:	853e                	mv	a0,a5
    80013b52:	d31fe0ef          	jal	ra,80012882 <mmu_free>
        SFENCE_ASID(p->pid);
    80013b56:	fd843783          	ld	a5,-40(s0)
    80013b5a:	0007d783          	lhu	a5,0(a5)
    80013b5e:	12f00073          	sfence.vma	zero,a5
    }

    if (p->pages) {
    80013b62:	fd843783          	ld	a5,-40(s0)
    80013b66:	2807b783          	ld	a5,640(a5)
    80013b6a:	cbb9                	beqz	a5,80013bc0 <process_free+0xa6>
        list_for_each(p->pages, e) {
    80013b6c:	fd843783          	ld	a5,-40(s0)
    80013b70:	2807b783          	ld	a5,640(a5)
    80013b74:	853e                	mv	a0,a5
    80013b76:	640010ef          	jal	ra,800151b6 <list_elem_start_ascending>
    80013b7a:	fea43423          	sd	a0,-24(s0)
    80013b7e:	a839                	j	80013b9c <process_free+0x82>
            page_free(list_elem_value_ptr(e));
    80013b80:	fe843503          	ld	a0,-24(s0)
    80013b84:	692010ef          	jal	ra,80015216 <list_elem_value>
    80013b88:	87aa                	mv	a5,a0
    80013b8a:	853e                	mv	a0,a5
    80013b8c:	68d000ef          	jal	ra,80014a18 <page_free>
        list_for_each(p->pages, e) {
    80013b90:	fe843503          	ld	a0,-24(s0)
    80013b94:	66a010ef          	jal	ra,800151fe <list_elem_prev>
    80013b98:	fea43423          	sd	a0,-24(s0)
    80013b9c:	fd843783          	ld	a5,-40(s0)
    80013ba0:	2807b783          	ld	a5,640(a5)
    80013ba4:	fe843583          	ld	a1,-24(s0)
    80013ba8:	853e                	mv	a0,a5
    80013baa:	57e010ef          	jal	ra,80015128 <list_elem_valid>
    80013bae:	87aa                	mv	a5,a0
    80013bb0:	fbe1                	bnez	a5,80013b80 <process_free+0x66>
        }
        list_free(p->pages);
    80013bb2:	fd843783          	ld	a5,-40(s0)
    80013bb6:	2807b783          	ld	a5,640(a5)
    80013bba:	853e                	mv	a0,a5
    80013bbc:	514010ef          	jal	ra,800150d0 <list_free>
    }

    if (p->fds) {
    80013bc0:	fd843783          	ld	a5,-40(s0)
    80013bc4:	2887b783          	ld	a5,648(a5)
    80013bc8:	cf9d                	beqz	a5,80013c06 <process_free+0xec>
        for (i = 0;i < vector_size(p->fds);i += 1) {
    80013bca:	fe042223          	sw	zero,-28(s0)
    80013bce:	a031                	j	80013bda <process_free+0xc0>
    80013bd0:	fe442783          	lw	a5,-28(s0)
    80013bd4:	2785                	addiw	a5,a5,1
    80013bd6:	fef42223          	sw	a5,-28(s0)
    80013bda:	fd843783          	ld	a5,-40(s0)
    80013bde:	2887b783          	ld	a5,648(a5)
    80013be2:	853e                	mv	a0,a5
    80013be4:	371020ef          	jal	ra,80016754 <vector_size>
    80013be8:	87aa                	mv	a5,a0
    80013bea:	0007871b          	sext.w	a4,a5
    80013bee:	fe442783          	lw	a5,-28(s0)
    80013bf2:	2781                	sext.w	a5,a5
    80013bf4:	fce7eee3          	bltu	a5,a4,80013bd0 <process_free+0xb6>
            // Clean up any file descriptor stuff here.
        }
        vector_free(p->fds);
    80013bf8:	fd843783          	ld	a5,-40(s0)
    80013bfc:	2887b783          	ld	a5,648(a5)
    80013c00:	853e                	mv	a0,a5
    80013c02:	383020ef          	jal	ra,80016784 <vector_free>
    }
    

    kfree(p);
    80013c06:	fd843503          	ld	a0,-40(s0)
    80013c0a:	f28ff0ef          	jal	ra,80013332 <kfree>

    return 0;
    80013c0e:	4781                	li	a5,0
}
    80013c10:	853e                	mv	a0,a5
    80013c12:	70a2                	ld	ra,40(sp)
    80013c14:	7402                	ld	s0,32(sp)
    80013c16:	6145                	addi	sp,sp,48
    80013c18:	8082                	ret

0000000080013c1a <process_run>:

bool process_run(struct process *p, unsigned int hart)
{
    80013c1a:	7179                	addi	sp,sp,-48
    80013c1c:	f406                	sd	ra,40(sp)
    80013c1e:	f022                	sd	s0,32(sp)
    80013c20:	1800                	addi	s0,sp,48
    80013c22:	fca43c23          	sd	a0,-40(s0)
    80013c26:	87ae                	mv	a5,a1
    80013c28:	fcf42a23          	sw	a5,-44(s0)
    void process_asm_run(void *frame_addr);
    unsigned int me = sbi_whoami();
    80013c2c:	470000ef          	jal	ra,8001409c <sbi_whoami>
    80013c30:	87aa                	mv	a5,a0
    80013c32:	fef42623          	sw	a5,-20(s0)

    if (me == hart) {
    80013c36:	fec42703          	lw	a4,-20(s0)
    80013c3a:	fd442783          	lw	a5,-44(s0)
    80013c3e:	2701                	sext.w	a4,a4
    80013c40:	2781                	sext.w	a5,a5
    80013c42:	00f71b63          	bne	a4,a5,80013c58 <process_run+0x3e>
        process_asm_run(&p->frame);
    80013c46:	fd843783          	ld	a5,-40(s0)
    80013c4a:	03878793          	addi	a5,a5,56
    80013c4e:	853e                	mv	a0,a5
    80013c50:	7d5000ef          	jal	ra,80014c24 <process_asm_run>
        // process_asm_run should not return, but if it does
        // something went wrong.
        return false;
    80013c54:	4781                	li	a5,0
    80013c56:	a815                	j	80013c8a <process_run+0x70>
    }

    return sbi_hart_start(hart, trampoline_thread_start, (unsigned long)&p->frame, p->frame.satp);
    80013c58:	00006797          	auipc	a5,0x6
    80013c5c:	71278793          	addi	a5,a5,1810 # 8001a36a <trampoline_thread_start>
    80013c60:	6398                	ld	a4,0(a5)
    80013c62:	fd843783          	ld	a5,-40(s0)
    80013c66:	03878793          	addi	a5,a5,56
    80013c6a:	863e                	mv	a2,a5
    80013c6c:	fd843783          	ld	a5,-40(s0)
    80013c70:	2507b683          	ld	a3,592(a5)
    80013c74:	fd442783          	lw	a5,-44(s0)
    80013c78:	85ba                	mv	a1,a4
    80013c7a:	853e                	mv	a0,a5
    80013c7c:	2f8000ef          	jal	ra,80013f74 <sbi_hart_start>
    80013c80:	87aa                	mv	a5,a0
    80013c82:	00f037b3          	snez	a5,a5
    80013c86:	0ff7f793          	andi	a5,a5,255
}
    80013c8a:	853e                	mv	a0,a5
    80013c8c:	70a2                	ld	ra,40(sp)
    80013c8e:	7402                	ld	s0,32(sp)
    80013c90:	6145                	addi	sp,sp,48
    80013c92:	8082                	ret

0000000080013c94 <lgprefix>:
#include <stdarg.h>
#include <csr.h>

static int k_log_level = 0xFFF;

static const char *lgprefix(log_type lt) {
    80013c94:	1101                	addi	sp,sp,-32
    80013c96:	ec22                	sd	s0,24(sp)
    80013c98:	1000                	addi	s0,sp,32
    80013c9a:	87aa                	mv	a5,a0
    80013c9c:	fef42623          	sw	a5,-20(s0)
    switch (lt) {
    80013ca0:	fec42783          	lw	a5,-20(s0)
    80013ca4:	0007871b          	sext.w	a4,a5
    80013ca8:	47a1                	li	a5,8
    80013caa:	06f70463          	beq	a4,a5,80013d12 <lgprefix+0x7e>
    80013cae:	fec42783          	lw	a5,-20(s0)
    80013cb2:	0007871b          	sext.w	a4,a5
    80013cb6:	47a1                	li	a5,8
    80013cb8:	06e7e263          	bltu	a5,a4,80013d1c <lgprefix+0x88>
    80013cbc:	fec42783          	lw	a5,-20(s0)
    80013cc0:	0007871b          	sext.w	a4,a5
    80013cc4:	4791                	li	a5,4
    80013cc6:	02f70c63          	beq	a4,a5,80013cfe <lgprefix+0x6a>
    80013cca:	fec42783          	lw	a5,-20(s0)
    80013cce:	0007871b          	sext.w	a4,a5
    80013cd2:	4791                	li	a5,4
    80013cd4:	04e7e463          	bltu	a5,a4,80013d1c <lgprefix+0x88>
    80013cd8:	fec42783          	lw	a5,-20(s0)
    80013cdc:	0007871b          	sext.w	a4,a5
    80013ce0:	4785                	li	a5,1
    80013ce2:	02f70363          	beq	a4,a5,80013d08 <lgprefix+0x74>
    80013ce6:	fec42783          	lw	a5,-20(s0)
    80013cea:	0007871b          	sext.w	a4,a5
    80013cee:	4789                	li	a5,2
    80013cf0:	02f71663          	bne	a4,a5,80013d1c <lgprefix+0x88>
        case LOG_DEBUG:
            return "[DEBUG]: ";
    80013cf4:	00006797          	auipc	a5,0x6
    80013cf8:	c4478793          	addi	a5,a5,-956 # 80019938 <pow10.0+0x708>
    80013cfc:	a025                	j	80013d24 <lgprefix+0x90>
        case LOG_INFO:
            return "[INFO]: ";
    80013cfe:	00006797          	auipc	a5,0x6
    80013d02:	c4a78793          	addi	a5,a5,-950 # 80019948 <pow10.0+0x718>
    80013d06:	a839                	j	80013d24 <lgprefix+0x90>
        case LOG_ERROR:
            return "[ERROR]: ";
    80013d08:	00006797          	auipc	a5,0x6
    80013d0c:	c5078793          	addi	a5,a5,-944 # 80019958 <pow10.0+0x728>
    80013d10:	a811                	j	80013d24 <lgprefix+0x90>
        case LOG_FATAL:
            return "[FATAL]: ";
    80013d12:	00006797          	auipc	a5,0x6
    80013d16:	c5678793          	addi	a5,a5,-938 # 80019968 <pow10.0+0x738>
    80013d1a:	a029                	j	80013d24 <lgprefix+0x90>
        default:
            return "";
    80013d1c:	00006797          	auipc	a5,0x6
    80013d20:	c5c78793          	addi	a5,a5,-932 # 80019978 <pow10.0+0x748>
    }
}
    80013d24:	853e                	mv	a0,a5
    80013d26:	6462                	ld	s0,24(sp)
    80013d28:	6105                	addi	sp,sp,32
    80013d2a:	8082                	ret

0000000080013d2c <vlogf>:

static int vlogf(log_type lt, const char *fmt, va_list args)
{
    80013d2c:	7179                	addi	sp,sp,-48
    80013d2e:	f406                	sd	ra,40(sp)
    80013d30:	f022                	sd	s0,32(sp)
    80013d32:	1800                	addi	s0,sp,48
    80013d34:	87aa                	mv	a5,a0
    80013d36:	feb43023          	sd	a1,-32(s0)
    80013d3a:	fcc43c23          	sd	a2,-40(s0)
    80013d3e:	fef42623          	sw	a5,-20(s0)
    if (!(lt & k_log_level)) {
    80013d42:	00007797          	auipc	a5,0x7
    80013d46:	2be78793          	addi	a5,a5,702 # 8001b000 <k_log_level>
    80013d4a:	439c                	lw	a5,0(a5)
    80013d4c:	0007871b          	sext.w	a4,a5
    80013d50:	fec42783          	lw	a5,-20(s0)
    80013d54:	8ff9                	and	a5,a5,a4
    80013d56:	2781                	sext.w	a5,a5
    80013d58:	e399                	bnez	a5,80013d5e <vlogf+0x32>
        return 0;
    80013d5a:	4781                	li	a5,0
    80013d5c:	a02d                	j	80013d86 <vlogf+0x5a>
    }
    int printf(const char *fmt, ...);
    printf("%s", lgprefix(lt));
    80013d5e:	fec42783          	lw	a5,-20(s0)
    80013d62:	853e                	mv	a0,a5
    80013d64:	f31ff0ef          	jal	ra,80013c94 <lgprefix>
    80013d68:	87aa                	mv	a5,a0
    80013d6a:	85be                	mv	a1,a5
    80013d6c:	00006517          	auipc	a0,0x6
    80013d70:	c1450513          	addi	a0,a0,-1004 # 80019980 <pow10.0+0x750>
    80013d74:	cd2fe0ef          	jal	ra,80012246 <printf>
    int vprintf_(const char *format, va_list va);
    return vprintf_(fmt, args);
    80013d78:	fd843583          	ld	a1,-40(s0)
    80013d7c:	fe043503          	ld	a0,-32(s0)
    80013d80:	df4fe0ef          	jal	ra,80012374 <vprintf_>
    80013d84:	87aa                	mv	a5,a0
}
    80013d86:	853e                	mv	a0,a5
    80013d88:	70a2                	ld	ra,40(sp)
    80013d8a:	7402                	ld	s0,32(sp)
    80013d8c:	6145                	addi	sp,sp,48
    80013d8e:	8082                	ret

0000000080013d90 <logf>:

int logf(log_type lt, const char *fmt, ...)
{
    80013d90:	7159                	addi	sp,sp,-112
    80013d92:	fc06                	sd	ra,56(sp)
    80013d94:	f822                	sd	s0,48(sp)
    80013d96:	0080                	addi	s0,sp,64
    80013d98:	fcb43823          	sd	a1,-48(s0)
    80013d9c:	e010                	sd	a2,0(s0)
    80013d9e:	e414                	sd	a3,8(s0)
    80013da0:	e818                	sd	a4,16(s0)
    80013da2:	ec1c                	sd	a5,24(s0)
    80013da4:	03043023          	sd	a6,32(s0)
    80013da8:	03143423          	sd	a7,40(s0)
    80013dac:	87aa                	mv	a5,a0
    80013dae:	fcf42e23          	sw	a5,-36(s0)
    va_list va;
    va_start(va, fmt);
    80013db2:	03040793          	addi	a5,s0,48
    80013db6:	fcf43423          	sd	a5,-56(s0)
    80013dba:	fc843783          	ld	a5,-56(s0)
    80013dbe:	fd078793          	addi	a5,a5,-48
    80013dc2:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(lt, fmt, va);
    80013dc6:	fe043703          	ld	a4,-32(s0)
    80013dca:	fdc42783          	lw	a5,-36(s0)
    80013dce:	863a                	mv	a2,a4
    80013dd0:	fd043583          	ld	a1,-48(s0)
    80013dd4:	853e                	mv	a0,a5
    80013dd6:	f57ff0ef          	jal	ra,80013d2c <vlogf>
    80013dda:	87aa                	mv	a5,a0
    80013ddc:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80013de0:	fec42783          	lw	a5,-20(s0)
}
    80013de4:	853e                	mv	a0,a5
    80013de6:	70e2                	ld	ra,56(sp)
    80013de8:	7442                	ld	s0,48(sp)
    80013dea:	6165                	addi	sp,sp,112
    80013dec:	8082                	ret

0000000080013dee <debugf>:

int debugf(const char *fmt, ...)
{
    80013dee:	7159                	addi	sp,sp,-112
    80013df0:	f406                	sd	ra,40(sp)
    80013df2:	f022                	sd	s0,32(sp)
    80013df4:	1800                	addi	s0,sp,48
    80013df6:	fca43c23          	sd	a0,-40(s0)
    80013dfa:	e40c                	sd	a1,8(s0)
    80013dfc:	e810                	sd	a2,16(s0)
    80013dfe:	ec14                	sd	a3,24(s0)
    80013e00:	f018                	sd	a4,32(s0)
    80013e02:	f41c                	sd	a5,40(s0)
    80013e04:	03043823          	sd	a6,48(s0)
    80013e08:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80013e0c:	04040793          	addi	a5,s0,64
    80013e10:	fcf43823          	sd	a5,-48(s0)
    80013e14:	fd043783          	ld	a5,-48(s0)
    80013e18:	fc878793          	addi	a5,a5,-56
    80013e1c:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(LOG_DEBUG, fmt, va);
    80013e20:	fe043783          	ld	a5,-32(s0)
    80013e24:	863e                	mv	a2,a5
    80013e26:	fd843583          	ld	a1,-40(s0)
    80013e2a:	4509                	li	a0,2
    80013e2c:	f01ff0ef          	jal	ra,80013d2c <vlogf>
    80013e30:	87aa                	mv	a5,a0
    80013e32:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80013e36:	fec42783          	lw	a5,-20(s0)
}
    80013e3a:	853e                	mv	a0,a5
    80013e3c:	70a2                	ld	ra,40(sp)
    80013e3e:	7402                	ld	s0,32(sp)
    80013e40:	6165                	addi	sp,sp,112
    80013e42:	8082                	ret

0000000080013e44 <fatalf>:

ATTR_NORET void fatalf(const char *fmt, ...)
{
    80013e44:	7159                	addi	sp,sp,-112
    80013e46:	f406                	sd	ra,40(sp)
    80013e48:	f022                	sd	s0,32(sp)
    80013e4a:	1800                	addi	s0,sp,48
    80013e4c:	fca43c23          	sd	a0,-40(s0)
    80013e50:	e40c                	sd	a1,8(s0)
    80013e52:	e810                	sd	a2,16(s0)
    80013e54:	ec14                	sd	a3,24(s0)
    80013e56:	f018                	sd	a4,32(s0)
    80013e58:	f41c                	sd	a5,40(s0)
    80013e5a:	03043823          	sd	a6,48(s0)
    80013e5e:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80013e62:	04040793          	addi	a5,s0,64
    80013e66:	fcf43823          	sd	a5,-48(s0)
    80013e6a:	fd043783          	ld	a5,-48(s0)
    80013e6e:	fc878793          	addi	a5,a5,-56
    80013e72:	fef43423          	sd	a5,-24(s0)
    vlogf(LOG_FATAL, fmt, va);
    80013e76:	fe843783          	ld	a5,-24(s0)
    80013e7a:	863e                	mv	a2,a5
    80013e7c:	fd843583          	ld	a1,-40(s0)
    80013e80:	4521                	li	a0,8
    80013e82:	eabff0ef          	jal	ra,80013d2c <vlogf>
    va_end(va);

    CSR_CLEAR("sstatus");
    80013e86:	10001073          	csrw	sstatus,zero
    WFI_LOOP();
    80013e8a:	10500073          	wfi
    80013e8e:	bff5                	j	80013e8a <fatalf+0x46>

0000000080013e90 <klogset>:
}

void klogset(log_type lt)
{
    80013e90:	1101                	addi	sp,sp,-32
    80013e92:	ec22                	sd	s0,24(sp)
    80013e94:	1000                	addi	s0,sp,32
    80013e96:	87aa                	mv	a5,a0
    80013e98:	fef42623          	sw	a5,-20(s0)
    k_log_level |= lt;
    80013e9c:	00007797          	auipc	a5,0x7
    80013ea0:	16478793          	addi	a5,a5,356 # 8001b000 <k_log_level>
    80013ea4:	439c                	lw	a5,0(a5)
    80013ea6:	0007871b          	sext.w	a4,a5
    80013eaa:	fec42783          	lw	a5,-20(s0)
    80013eae:	8fd9                	or	a5,a5,a4
    80013eb0:	2781                	sext.w	a5,a5
    80013eb2:	0007871b          	sext.w	a4,a5
    80013eb6:	00007797          	auipc	a5,0x7
    80013eba:	14a78793          	addi	a5,a5,330 # 8001b000 <k_log_level>
    80013ebe:	c398                	sw	a4,0(a5)
}
    80013ec0:	0001                	nop
    80013ec2:	6462                	ld	s0,24(sp)
    80013ec4:	6105                	addi	sp,sp,32
    80013ec6:	8082                	ret

0000000080013ec8 <klogclear>:

void klogclear(log_type lt)
{
    80013ec8:	1101                	addi	sp,sp,-32
    80013eca:	ec22                	sd	s0,24(sp)
    80013ecc:	1000                	addi	s0,sp,32
    80013ece:	87aa                	mv	a5,a0
    80013ed0:	fef42623          	sw	a5,-20(s0)
    k_log_level &= ~lt;
    80013ed4:	fec42783          	lw	a5,-20(s0)
    80013ed8:	fff7c793          	not	a5,a5
    80013edc:	0007871b          	sext.w	a4,a5
    80013ee0:	00007797          	auipc	a5,0x7
    80013ee4:	12078793          	addi	a5,a5,288 # 8001b000 <k_log_level>
    80013ee8:	439c                	lw	a5,0(a5)
    80013eea:	2781                	sext.w	a5,a5
    80013eec:	8ff9                	and	a5,a5,a4
    80013eee:	2781                	sext.w	a5,a5
    80013ef0:	0007871b          	sext.w	a4,a5
    80013ef4:	00007797          	auipc	a5,0x7
    80013ef8:	10c78793          	addi	a5,a5,268 # 8001b000 <k_log_level>
    80013efc:	c398                	sw	a4,0(a5)
}
    80013efe:	0001                	nop
    80013f00:	6462                	ld	s0,24(sp)
    80013f02:	6105                	addi	sp,sp,32
    80013f04:	8082                	ret

0000000080013f06 <sbi_putchar>:
#include <compiler.h>
#include <config.h>
#include <sbi.h>

void sbi_putchar(char c)
{
    80013f06:	1101                	addi	sp,sp,-32
    80013f08:	ec22                	sd	s0,24(sp)
    80013f0a:	1000                	addi	s0,sp,32
    80013f0c:	87aa                	mv	a5,a0
    80013f0e:	fef407a3          	sb	a5,-17(s0)
    asm volatile("mv a7, %0\nmv a0, %1\necall" ::"r"(SBI_SVCALL_PUTCHAR), "r"(c) : "a7", "a0");
    80013f12:	47a5                	li	a5,9
    80013f14:	fef44703          	lbu	a4,-17(s0)
    80013f18:	88be                	mv	a7,a5
    80013f1a:	853a                	mv	a0,a4
    80013f1c:	00000073          	ecall
}
    80013f20:	0001                	nop
    80013f22:	6462                	ld	s0,24(sp)
    80013f24:	6105                	addi	sp,sp,32
    80013f26:	8082                	ret

0000000080013f28 <sbi_getchar>:

char sbi_getchar(void)
{
    80013f28:	1101                	addi	sp,sp,-32
    80013f2a:	ec22                	sd	s0,24(sp)
    80013f2c:	1000                	addi	s0,sp,32
    char c;
    asm volatile("mv a7, %1\necall\nmv %0, a0\n" : "=r"(c) : "r"(SBI_SVCALL_GETCHAR) : "a7", "a0");
    80013f2e:	47a9                	li	a5,10
    80013f30:	88be                	mv	a7,a5
    80013f32:	00000073          	ecall
    80013f36:	87aa                	mv	a5,a0
    80013f38:	fef407a3          	sb	a5,-17(s0)
    return c;
    80013f3c:	fef44783          	lbu	a5,-17(s0)
}
    80013f40:	853e                	mv	a0,a5
    80013f42:	6462                	ld	s0,24(sp)
    80013f44:	6105                	addi	sp,sp,32
    80013f46:	8082                	ret

0000000080013f48 <sbi_hart_get_status>:

int sbi_hart_get_status(unsigned int hart)
{
    80013f48:	7179                	addi	sp,sp,-48
    80013f4a:	f422                	sd	s0,40(sp)
    80013f4c:	1800                	addi	s0,sp,48
    80013f4e:	87aa                	mv	a5,a0
    80013f50:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\necall\nmv %0, a0\n"
    80013f54:	4785                	li	a5,1
    80013f56:	fdc42703          	lw	a4,-36(s0)
    80013f5a:	88be                	mv	a7,a5
    80013f5c:	853a                	mv	a0,a4
    80013f5e:	00000073          	ecall
    80013f62:	87aa                	mv	a5,a0
    80013f64:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_STATUS), "r"(hart)
                 : "a0", "a7");
    return stat;
    80013f68:	fec42783          	lw	a5,-20(s0)
}
    80013f6c:	853e                	mv	a0,a5
    80013f6e:	7422                	ld	s0,40(sp)
    80013f70:	6145                	addi	sp,sp,48
    80013f72:	8082                	ret

0000000080013f74 <sbi_hart_start>:

int sbi_hart_start(unsigned int hart, unsigned long target, unsigned long scratch, unsigned long satp)
{
    80013f74:	7139                	addi	sp,sp,-64
    80013f76:	fc22                	sd	s0,56(sp)
    80013f78:	0080                	addi	s0,sp,64
    80013f7a:	87aa                	mv	a5,a0
    80013f7c:	fcb43823          	sd	a1,-48(s0)
    80013f80:	fcc43423          	sd	a2,-56(s0)
    80013f84:	fcd43023          	sd	a3,-64(s0)
    80013f88:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\nmv a1, %3\nmv a2, %4\nmv a3, %5\necall\nmv %0, a0\n"
    80013f8c:	4789                	li	a5,2
    80013f8e:	fdc42703          	lw	a4,-36(s0)
    80013f92:	fd043683          	ld	a3,-48(s0)
    80013f96:	fc843803          	ld	a6,-56(s0)
    80013f9a:	fc043303          	ld	t1,-64(s0)
    80013f9e:	88be                	mv	a7,a5
    80013fa0:	853a                	mv	a0,a4
    80013fa2:	85b6                	mv	a1,a3
    80013fa4:	8642                	mv	a2,a6
    80013fa6:	869a                	mv	a3,t1
    80013fa8:	00000073          	ecall
    80013fac:	87aa                	mv	a5,a0
    80013fae:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_START), "r"(hart), "r"(target), "r"(scratch), "r"(satp)
                 : "a0", "a1", "a2", "a7");
    return stat;
    80013fb2:	fec42783          	lw	a5,-20(s0)
}
    80013fb6:	853e                	mv	a0,a5
    80013fb8:	7462                	ld	s0,56(sp)
    80013fba:	6121                	addi	sp,sp,64
    80013fbc:	8082                	ret

0000000080013fbe <sbi_hart_stop>:

void sbi_hart_stop(void)
{
    80013fbe:	1141                	addi	sp,sp,-16
    80013fc0:	e422                	sd	s0,8(sp)
    80013fc2:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall\nwfi" : : "r"(SBI_SVCALL_HART_STOP) : "a0", "a7");
    80013fc4:	478d                	li	a5,3
    80013fc6:	88be                	mv	a7,a5
    80013fc8:	00000073          	ecall
    80013fcc:	10500073          	wfi
}
    80013fd0:	0001                	nop
    80013fd2:	6422                	ld	s0,8(sp)
    80013fd4:	0141                	addi	sp,sp,16
    80013fd6:	8082                	ret

0000000080013fd8 <sbi_poweroff>:

void sbi_poweroff(void)
{
    80013fd8:	1141                	addi	sp,sp,-16
    80013fda:	e422                	sd	s0,8(sp)
    80013fdc:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" : : "r"(SBI_SVCALL_POWEROFF) : "a0", "a7");
    80013fde:	47b1                	li	a5,12
    80013fe0:	88be                	mv	a7,a5
    80013fe2:	00000073          	ecall
}
    80013fe6:	0001                	nop
    80013fe8:	6422                	ld	s0,8(sp)
    80013fea:	0141                	addi	sp,sp,16
    80013fec:	8082                	ret

0000000080013fee <sbi_get_time>:

unsigned long sbi_get_time(void)
{
    80013fee:	1101                	addi	sp,sp,-32
    80013ff0:	ec22                	sd	s0,24(sp)
    80013ff2:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_GET_TIME) : "a0", "a7");
    80013ff4:	4791                	li	a5,4
    80013ff6:	88be                	mv	a7,a5
    80013ff8:	00000073          	ecall
    80013ffc:	87aa                	mv	a5,a0
    80013ffe:	fef43423          	sd	a5,-24(s0)
    return ret;
    80014002:	fe843783          	ld	a5,-24(s0)
}
    80014006:	853e                	mv	a0,a5
    80014008:	6462                	ld	s0,24(sp)
    8001400a:	6105                	addi	sp,sp,32
    8001400c:	8082                	ret

000000008001400e <sbi_set_timer>:

void sbi_set_timer(unsigned int hart, unsigned long val)
{
    8001400e:	1101                	addi	sp,sp,-32
    80014010:	ec22                	sd	s0,24(sp)
    80014012:	1000                	addi	s0,sp,32
    80014014:	87aa                	mv	a5,a0
    80014016:	feb43023          	sd	a1,-32(s0)
    8001401a:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_SET_TIMECMP), "r"(hart),
    8001401e:	4795                	li	a5,5
    80014020:	fec42703          	lw	a4,-20(s0)
    80014024:	fe043683          	ld	a3,-32(s0)
    80014028:	88be                	mv	a7,a5
    8001402a:	853a                	mv	a0,a4
    8001402c:	85b6                	mv	a1,a3
    8001402e:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    80014032:	0001                	nop
    80014034:	6462                	ld	s0,24(sp)
    80014036:	6105                	addi	sp,sp,32
    80014038:	8082                	ret

000000008001403a <sbi_add_timer>:

void sbi_add_timer(unsigned int hart, unsigned long val)
{
    8001403a:	1101                	addi	sp,sp,-32
    8001403c:	ec22                	sd	s0,24(sp)
    8001403e:	1000                	addi	s0,sp,32
    80014040:	87aa                	mv	a5,a0
    80014042:	feb43023          	sd	a1,-32(s0)
    80014046:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_ADD_TIMECMP), "r"(hart),
    8001404a:	4799                	li	a5,6
    8001404c:	fec42703          	lw	a4,-20(s0)
    80014050:	fe043683          	ld	a3,-32(s0)
    80014054:	88be                	mv	a7,a5
    80014056:	853a                	mv	a0,a4
    80014058:	85b6                	mv	a1,a3
    8001405a:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    8001405e:	0001                	nop
    80014060:	6462                	ld	s0,24(sp)
    80014062:	6105                	addi	sp,sp,32
    80014064:	8082                	ret

0000000080014066 <sbi_ack_timer>:

void sbi_ack_timer(void)
{
    80014066:	1141                	addi	sp,sp,-16
    80014068:	e422                	sd	s0,8(sp)
    8001406a:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" ::"r"(SBI_SVCALL_ACK_TIMER) : "a7");
    8001406c:	479d                	li	a5,7
    8001406e:	88be                	mv	a7,a5
    80014070:	00000073          	ecall
}
    80014074:	0001                	nop
    80014076:	6422                	ld	s0,8(sp)
    80014078:	0141                	addi	sp,sp,16
    8001407a:	8082                	ret

000000008001407c <sbi_rtc_get_time>:

unsigned long sbi_rtc_get_time(void)
{
    8001407c:	1101                	addi	sp,sp,-32
    8001407e:	ec22                	sd	s0,24(sp)
    80014080:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0"
    80014082:	47a1                	li	a5,8
    80014084:	88be                	mv	a7,a5
    80014086:	00000073          	ecall
    8001408a:	87aa                	mv	a5,a0
    8001408c:	fef43423          	sd	a5,-24(s0)
                 : "=r"(ret)
                 : "r"(SBI_SVCALL_RTC_GET_TIME)
                 : "a0", "a7");
    return ret;
    80014090:	fe843783          	ld	a5,-24(s0)
}
    80014094:	853e                	mv	a0,a5
    80014096:	6462                	ld	s0,24(sp)
    80014098:	6105                	addi	sp,sp,32
    8001409a:	8082                	ret

000000008001409c <sbi_whoami>:

int sbi_whoami(void)
{
    8001409c:	1101                	addi	sp,sp,-32
    8001409e:	ec22                	sd	s0,24(sp)
    800140a0:	1000                	addi	s0,sp,32
    int ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_WHOAMI) : "a0", "a7");
    800140a2:	47ad                	li	a5,11
    800140a4:	88be                	mv	a7,a5
    800140a6:	00000073          	ecall
    800140aa:	87aa                	mv	a5,a0
    800140ac:	fef42623          	sw	a5,-20(s0)
    return ret;
    800140b0:	fec42783          	lw	a5,-20(s0)
}
    800140b4:	853e                	mv	a0,a5
    800140b6:	6462                	ld	s0,24(sp)
    800140b8:	6105                	addi	sp,sp,32
    800140ba:	8082                	ret

00000000800140bc <sbi_num_harts>:

int sbi_num_harts(void)
{
    800140bc:	1101                	addi	sp,sp,-32
    800140be:	ec06                	sd	ra,24(sp)
    800140c0:	e822                	sd	s0,16(sp)
    800140c2:	1000                	addi	s0,sp,32
    unsigned int i;
    int num_harts = 0;
    800140c4:	fe042423          	sw	zero,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    800140c8:	fe042623          	sw	zero,-20(s0)
    800140cc:	a015                	j	800140f0 <sbi_num_harts+0x34>
        if (sbi_hart_get_status(i) != 0) {
    800140ce:	fec42783          	lw	a5,-20(s0)
    800140d2:	853e                	mv	a0,a5
    800140d4:	e75ff0ef          	jal	ra,80013f48 <sbi_hart_get_status>
    800140d8:	87aa                	mv	a5,a0
    800140da:	c791                	beqz	a5,800140e6 <sbi_num_harts+0x2a>
            num_harts += 1;
    800140dc:	fe842783          	lw	a5,-24(s0)
    800140e0:	2785                	addiw	a5,a5,1
    800140e2:	fef42423          	sw	a5,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    800140e6:	fec42783          	lw	a5,-20(s0)
    800140ea:	2785                	addiw	a5,a5,1
    800140ec:	fef42623          	sw	a5,-20(s0)
    800140f0:	fec42783          	lw	a5,-20(s0)
    800140f4:	0007871b          	sext.w	a4,a5
    800140f8:	478d                	li	a5,3
    800140fa:	fce7fae3          	bgeu	a5,a4,800140ce <sbi_num_harts+0x12>
        }
    }
    return num_harts;
    800140fe:	fe842783          	lw	a5,-24(s0)
}
    80014102:	853e                	mv	a0,a5
    80014104:	60e2                	ld	ra,24(sp)
    80014106:	6442                	ld	s0,16(sp)
    80014108:	6105                	addi	sp,sp,32
    8001410a:	8082                	ret

000000008001410c <plic_set_priority>:
#define PLIC_PCI_INTB 33
#define PLIC_PCI_INTC 34
#define PLIC_PCI_INTD 35

void plic_set_priority(int interrupt_id, char priority)
{
    8001410c:	7179                	addi	sp,sp,-48
    8001410e:	f422                	sd	s0,40(sp)
    80014110:	1800                	addi	s0,sp,48
    80014112:	87aa                	mv	a5,a0
    80014114:	872e                	mv	a4,a1
    80014116:	fcf42e23          	sw	a5,-36(s0)
    8001411a:	87ba                	mv	a5,a4
    8001411c:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_PRIORITY(interrupt_id);
    80014120:	fdc42783          	lw	a5,-36(s0)
    80014124:	0027979b          	slliw	a5,a5,0x2
    80014128:	2781                	sext.w	a5,a5
    8001412a:	873e                	mv	a4,a5
    8001412c:	0c0007b7          	lui	a5,0xc000
    80014130:	97ba                	add	a5,a5,a4
    80014132:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    80014136:	fdb44783          	lbu	a5,-37(s0)
    8001413a:	2781                	sext.w	a5,a5
    8001413c:	8b9d                	andi	a5,a5,7
    8001413e:	0007871b          	sext.w	a4,a5
    80014142:	fe843783          	ld	a5,-24(s0)
    80014146:	c398                	sw	a4,0(a5)
}
    80014148:	0001                	nop
    8001414a:	7422                	ld	s0,40(sp)
    8001414c:	6145                	addi	sp,sp,48
    8001414e:	8082                	ret

0000000080014150 <plic_set_threshold>:
void plic_set_threshold(int hart, char priority)
{
    80014150:	7179                	addi	sp,sp,-48
    80014152:	f422                	sd	s0,40(sp)
    80014154:	1800                	addi	s0,sp,48
    80014156:	87aa                	mv	a5,a0
    80014158:	872e                	mv	a4,a1
    8001415a:	fcf42e23          	sw	a5,-36(s0)
    8001415e:	87ba                	mv	a5,a4
    80014160:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_THRESHOLD(hart, PLIC_MODE_SUPERVISOR);
    80014164:	fdc42783          	lw	a5,-36(s0)
    80014168:	0017979b          	slliw	a5,a5,0x1
    8001416c:	2781                	sext.w	a5,a5
    8001416e:	2785                	addiw	a5,a5,1
    80014170:	2781                	sext.w	a5,a5
    80014172:	00c7979b          	slliw	a5,a5,0xc
    80014176:	2781                	sext.w	a5,a5
    80014178:	873e                	mv	a4,a5
    8001417a:	0c2007b7          	lui	a5,0xc200
    8001417e:	97ba                	add	a5,a5,a4
    80014180:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    80014184:	fdb44783          	lbu	a5,-37(s0)
    80014188:	2781                	sext.w	a5,a5
    8001418a:	8b9d                	andi	a5,a5,7
    8001418c:	0007871b          	sext.w	a4,a5
    80014190:	fe843783          	ld	a5,-24(s0)
    80014194:	c398                	sw	a4,0(a5)
}
    80014196:	0001                	nop
    80014198:	7422                	ld	s0,40(sp)
    8001419a:	6145                	addi	sp,sp,48
    8001419c:	8082                	ret

000000008001419e <plic_enable>:
void plic_enable(int hart, int interrupt_id)
{
    8001419e:	7179                	addi	sp,sp,-48
    800141a0:	f422                	sd	s0,40(sp)
    800141a2:	1800                	addi	s0,sp,48
    800141a4:	87aa                	mv	a5,a0
    800141a6:	872e                	mv	a4,a1
    800141a8:	fcf42e23          	sw	a5,-36(s0)
    800141ac:	87ba                	mv	a5,a4
    800141ae:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    800141b2:	fdc42783          	lw	a5,-36(s0)
    800141b6:	0017979b          	slliw	a5,a5,0x1
    800141ba:	2781                	sext.w	a5,a5
    800141bc:	2785                	addiw	a5,a5,1
    800141be:	2781                	sext.w	a5,a5
    800141c0:	0077979b          	slliw	a5,a5,0x7
    800141c4:	2781                	sext.w	a5,a5
    800141c6:	873e                	mv	a4,a5
    800141c8:	0c0027b7          	lui	a5,0xc002
    800141cc:	97ba                	add	a5,a5,a4
    800141ce:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] |= 1UL << (interrupt_id % 32);
    800141d2:	fd842783          	lw	a5,-40(s0)
    800141d6:	41f7d71b          	sraiw	a4,a5,0x1f
    800141da:	01b7571b          	srliw	a4,a4,0x1b
    800141de:	9fb9                	addw	a5,a5,a4
    800141e0:	4057d79b          	sraiw	a5,a5,0x5
    800141e4:	0007869b          	sext.w	a3,a5
    800141e8:	87b6                	mv	a5,a3
    800141ea:	078a                	slli	a5,a5,0x2
    800141ec:	fe843703          	ld	a4,-24(s0)
    800141f0:	97ba                	add	a5,a5,a4
    800141f2:	438c                	lw	a1,0(a5)
    800141f4:	fd842703          	lw	a4,-40(s0)
    800141f8:	41f7579b          	sraiw	a5,a4,0x1f
    800141fc:	01b7d79b          	srliw	a5,a5,0x1b
    80014200:	9f3d                	addw	a4,a4,a5
    80014202:	8b7d                	andi	a4,a4,31
    80014204:	40f707bb          	subw	a5,a4,a5
    80014208:	2781                	sext.w	a5,a5
    8001420a:	873e                	mv	a4,a5
    8001420c:	4785                	li	a5,1
    8001420e:	00e797b3          	sll	a5,a5,a4
    80014212:	0007861b          	sext.w	a2,a5
    80014216:	87b6                	mv	a5,a3
    80014218:	078a                	slli	a5,a5,0x2
    8001421a:	fe843703          	ld	a4,-24(s0)
    8001421e:	97ba                	add	a5,a5,a4
    80014220:	86ae                	mv	a3,a1
    80014222:	8732                	mv	a4,a2
    80014224:	8f55                	or	a4,a4,a3
    80014226:	2701                	sext.w	a4,a4
    80014228:	c398                	sw	a4,0(a5)
}
    8001422a:	0001                	nop
    8001422c:	7422                	ld	s0,40(sp)
    8001422e:	6145                	addi	sp,sp,48
    80014230:	8082                	ret

0000000080014232 <plic_disable>:
void plic_disable(int hart, int interrupt_id)
{
    80014232:	7179                	addi	sp,sp,-48
    80014234:	f422                	sd	s0,40(sp)
    80014236:	1800                	addi	s0,sp,48
    80014238:	87aa                	mv	a5,a0
    8001423a:	872e                	mv	a4,a1
    8001423c:	fcf42e23          	sw	a5,-36(s0)
    80014240:	87ba                	mv	a5,a4
    80014242:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    80014246:	fdc42783          	lw	a5,-36(s0)
    8001424a:	0017979b          	slliw	a5,a5,0x1
    8001424e:	2781                	sext.w	a5,a5
    80014250:	2785                	addiw	a5,a5,1
    80014252:	2781                	sext.w	a5,a5
    80014254:	0077979b          	slliw	a5,a5,0x7
    80014258:	2781                	sext.w	a5,a5
    8001425a:	873e                	mv	a4,a5
    8001425c:	0c0027b7          	lui	a5,0xc002
    80014260:	97ba                	add	a5,a5,a4
    80014262:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] &= ~(1UL << (interrupt_id % 32));
    80014266:	fd842783          	lw	a5,-40(s0)
    8001426a:	41f7d71b          	sraiw	a4,a5,0x1f
    8001426e:	01b7571b          	srliw	a4,a4,0x1b
    80014272:	9fb9                	addw	a5,a5,a4
    80014274:	4057d79b          	sraiw	a5,a5,0x5
    80014278:	0007869b          	sext.w	a3,a5
    8001427c:	87b6                	mv	a5,a3
    8001427e:	078a                	slli	a5,a5,0x2
    80014280:	fe843703          	ld	a4,-24(s0)
    80014284:	97ba                	add	a5,a5,a4
    80014286:	438c                	lw	a1,0(a5)
    80014288:	fd842703          	lw	a4,-40(s0)
    8001428c:	41f7579b          	sraiw	a5,a4,0x1f
    80014290:	01b7d79b          	srliw	a5,a5,0x1b
    80014294:	9f3d                	addw	a4,a4,a5
    80014296:	8b7d                	andi	a4,a4,31
    80014298:	40f707bb          	subw	a5,a4,a5
    8001429c:	2781                	sext.w	a5,a5
    8001429e:	873e                	mv	a4,a5
    800142a0:	4785                	li	a5,1
    800142a2:	00e797b3          	sll	a5,a5,a4
    800142a6:	2781                	sext.w	a5,a5
    800142a8:	fff7c793          	not	a5,a5
    800142ac:	0007861b          	sext.w	a2,a5
    800142b0:	87b6                	mv	a5,a3
    800142b2:	078a                	slli	a5,a5,0x2
    800142b4:	fe843703          	ld	a4,-24(s0)
    800142b8:	97ba                	add	a5,a5,a4
    800142ba:	86ae                	mv	a3,a1
    800142bc:	8732                	mv	a4,a2
    800142be:	8f75                	and	a4,a4,a3
    800142c0:	2701                	sext.w	a4,a4
    800142c2:	c398                	sw	a4,0(a5)
}
    800142c4:	0001                	nop
    800142c6:	7422                	ld	s0,40(sp)
    800142c8:	6145                	addi	sp,sp,48
    800142ca:	8082                	ret

00000000800142cc <plic_claim>:
uint32_t plic_claim(int hart)
{
    800142cc:	7179                	addi	sp,sp,-48
    800142ce:	f422                	sd	s0,40(sp)
    800142d0:	1800                	addi	s0,sp,48
    800142d2:	87aa                	mv	a5,a0
    800142d4:	fcf42e23          	sw	a5,-36(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    800142d8:	fdc42783          	lw	a5,-36(s0)
    800142dc:	0017979b          	slliw	a5,a5,0x1
    800142e0:	2781                	sext.w	a5,a5
    800142e2:	2785                	addiw	a5,a5,1
    800142e4:	2781                	sext.w	a5,a5
    800142e6:	00c7979b          	slliw	a5,a5,0xc
    800142ea:	2781                	sext.w	a5,a5
    800142ec:	873e                	mv	a4,a5
    800142ee:	0c2007b7          	lui	a5,0xc200
    800142f2:	0791                	addi	a5,a5,4
    800142f4:	97ba                	add	a5,a5,a4
    800142f6:	fef43423          	sd	a5,-24(s0)
    return *base;
    800142fa:	fe843783          	ld	a5,-24(s0)
    800142fe:	439c                	lw	a5,0(a5)
}
    80014300:	853e                	mv	a0,a5
    80014302:	7422                	ld	s0,40(sp)
    80014304:	6145                	addi	sp,sp,48
    80014306:	8082                	ret

0000000080014308 <plic_complete>:
void plic_complete(int hart, int id)
{
    80014308:	7179                	addi	sp,sp,-48
    8001430a:	f422                	sd	s0,40(sp)
    8001430c:	1800                	addi	s0,sp,48
    8001430e:	87aa                	mv	a5,a0
    80014310:	872e                	mv	a4,a1
    80014312:	fcf42e23          	sw	a5,-36(s0)
    80014316:	87ba                	mv	a5,a4
    80014318:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    8001431c:	fdc42783          	lw	a5,-36(s0)
    80014320:	0017979b          	slliw	a5,a5,0x1
    80014324:	2781                	sext.w	a5,a5
    80014326:	2785                	addiw	a5,a5,1
    80014328:	2781                	sext.w	a5,a5
    8001432a:	00c7979b          	slliw	a5,a5,0xc
    8001432e:	2781                	sext.w	a5,a5
    80014330:	873e                	mv	a4,a5
    80014332:	0c2007b7          	lui	a5,0xc200
    80014336:	0791                	addi	a5,a5,4
    80014338:	97ba                	add	a5,a5,a4
    8001433a:	fef43423          	sd	a5,-24(s0)
    *base          = id;
    8001433e:	fd842703          	lw	a4,-40(s0)
    80014342:	fe843783          	ld	a5,-24(s0)
    80014346:	c398                	sw	a4,0(a5)
}
    80014348:	0001                	nop
    8001434a:	7422                	ld	s0,40(sp)
    8001434c:	6145                	addi	sp,sp,48
    8001434e:	8082                	ret

0000000080014350 <plic_handle_irq>:

void plic_handle_irq(int hart)
{
    80014350:	7179                	addi	sp,sp,-48
    80014352:	f406                	sd	ra,40(sp)
    80014354:	f022                	sd	s0,32(sp)
    80014356:	1800                	addi	s0,sp,48
    80014358:	87aa                	mv	a5,a0
    8001435a:	fcf42e23          	sw	a5,-36(s0)
    int irq = plic_claim(hart);
    8001435e:	fdc42783          	lw	a5,-36(s0)
    80014362:	853e                	mv	a0,a5
    80014364:	f69ff0ef          	jal	ra,800142cc <plic_claim>
    80014368:	87aa                	mv	a5,a0
    8001436a:	2781                	sext.w	a5,a5
    8001436c:	fef42623          	sw	a5,-20(s0)
            pci_dispatch_irq(irq);
#endif
            break;
    }

    plic_complete(hart, irq);
    80014370:	fec42703          	lw	a4,-20(s0)
    80014374:	fdc42783          	lw	a5,-36(s0)
    80014378:	85ba                	mv	a1,a4
    8001437a:	853e                	mv	a0,a5
    8001437c:	f8dff0ef          	jal	ra,80014308 <plic_complete>
}
    80014380:	0001                	nop
    80014382:	70a2                	ld	ra,40(sp)
    80014384:	7402                	ld	s0,32(sp)
    80014386:	6145                	addi	sp,sp,48
    80014388:	8082                	ret

000000008001438a <plic_init>:

void plic_init(void)
{
    8001438a:	1141                	addi	sp,sp,-16
    8001438c:	e406                	sd	ra,8(sp)
    8001438e:	e022                	sd	s0,0(sp)
    80014390:	0800                	addi	s0,sp,16
    plic_enable(0, PLIC_PCI_INTA);
    80014392:	02000593          	li	a1,32
    80014396:	4501                	li	a0,0
    80014398:	e07ff0ef          	jal	ra,8001419e <plic_enable>
    plic_enable(0, PLIC_PCI_INTB);
    8001439c:	02100593          	li	a1,33
    800143a0:	4501                	li	a0,0
    800143a2:	dfdff0ef          	jal	ra,8001419e <plic_enable>
    plic_enable(0, PLIC_PCI_INTC);
    800143a6:	02200593          	li	a1,34
    800143aa:	4501                	li	a0,0
    800143ac:	df3ff0ef          	jal	ra,8001419e <plic_enable>
    plic_enable(0, PLIC_PCI_INTD);
    800143b0:	02300593          	li	a1,35
    800143b4:	4501                	li	a0,0
    800143b6:	de9ff0ef          	jal	ra,8001419e <plic_enable>

    plic_set_threshold(0, 1);
    800143ba:	4585                	li	a1,1
    800143bc:	4501                	li	a0,0
    800143be:	d93ff0ef          	jal	ra,80014150 <plic_set_threshold>

    plic_set_priority(PLIC_PCI_INTA, 3);
    800143c2:	458d                	li	a1,3
    800143c4:	02000513          	li	a0,32
    800143c8:	d45ff0ef          	jal	ra,8001410c <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTB, 3);
    800143cc:	458d                	li	a1,3
    800143ce:	02100513          	li	a0,33
    800143d2:	d3bff0ef          	jal	ra,8001410c <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTC, 3);
    800143d6:	458d                	li	a1,3
    800143d8:	02200513          	li	a0,34
    800143dc:	d31ff0ef          	jal	ra,8001410c <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTD, 3);
    800143e0:	458d                	li	a1,3
    800143e2:	02300513          	li	a0,35
    800143e6:	d27ff0ef          	jal	ra,8001410c <plic_set_priority>
}
    800143ea:	0001                	nop
    800143ec:	60a2                	ld	ra,8(sp)
    800143ee:	6402                	ld	s0,0(sp)
    800143f0:	0141                	addi	sp,sp,16
    800143f2:	8082                	ret

00000000800143f4 <set_taken>:

static uint8_t *bookkeeping;  // Pointer to the bookkeeping area

// For some reason, the macros didn't work for me, so I used the static functions like Marz said and it works.
static void set_taken(uint64_t index)
{
    800143f4:	1101                	addi	sp,sp,-32
    800143f6:	ec22                	sd	s0,24(sp)
    800143f8:	1000                	addi	s0,sp,32
    800143fa:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2));
    800143fe:	00004797          	auipc	a5,0x4
    80014402:	c5278793          	addi	a5,a5,-942 # 80018050 <bookkeeping>
    80014406:	6398                	ld	a4,0(a5)
    80014408:	fe843783          	ld	a5,-24(s0)
    8001440c:	8389                	srli	a5,a5,0x2
    8001440e:	973e                	add	a4,a4,a5
    80014410:	00074703          	lbu	a4,0(a4) # ffffffffc0fff000 <_heap_end+0xffffffff38fef000>
    80014414:	0187169b          	slliw	a3,a4,0x18
    80014418:	4186d69b          	sraiw	a3,a3,0x18
    8001441c:	fe843703          	ld	a4,-24(s0)
    80014420:	2701                	sext.w	a4,a4
    80014422:	8b0d                	andi	a4,a4,3
    80014424:	2701                	sext.w	a4,a4
    80014426:	0017171b          	slliw	a4,a4,0x1
    8001442a:	2701                	sext.w	a4,a4
    8001442c:	4605                	li	a2,1
    8001442e:	00e6173b          	sllw	a4,a2,a4
    80014432:	2701                	sext.w	a4,a4
    80014434:	0187171b          	slliw	a4,a4,0x18
    80014438:	4187571b          	sraiw	a4,a4,0x18
    8001443c:	8f55                	or	a4,a4,a3
    8001443e:	0187169b          	slliw	a3,a4,0x18
    80014442:	4186d69b          	sraiw	a3,a3,0x18
    80014446:	00004717          	auipc	a4,0x4
    8001444a:	c0a70713          	addi	a4,a4,-1014 # 80018050 <bookkeeping>
    8001444e:	6318                	ld	a4,0(a4)
    80014450:	97ba                	add	a5,a5,a4
    80014452:	0ff6f713          	andi	a4,a3,255
    80014456:	00e78023          	sb	a4,0(a5)
}
    8001445a:	0001                	nop
    8001445c:	6462                	ld	s0,24(sp)
    8001445e:	6105                	addi	sp,sp,32
    80014460:	8082                	ret

0000000080014462 <clear_taken>:

static void clear_taken(uint64_t index)
{
    80014462:	1101                	addi	sp,sp,-32
    80014464:	ec22                	sd	s0,24(sp)
    80014466:	1000                	addi	s0,sp,32
    80014468:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2));
    8001446c:	00004797          	auipc	a5,0x4
    80014470:	be478793          	addi	a5,a5,-1052 # 80018050 <bookkeeping>
    80014474:	6398                	ld	a4,0(a5)
    80014476:	fe843783          	ld	a5,-24(s0)
    8001447a:	8389                	srli	a5,a5,0x2
    8001447c:	973e                	add	a4,a4,a5
    8001447e:	00074703          	lbu	a4,0(a4)
    80014482:	0187169b          	slliw	a3,a4,0x18
    80014486:	4186d69b          	sraiw	a3,a3,0x18
    8001448a:	fe843703          	ld	a4,-24(s0)
    8001448e:	2701                	sext.w	a4,a4
    80014490:	8b0d                	andi	a4,a4,3
    80014492:	2701                	sext.w	a4,a4
    80014494:	0017171b          	slliw	a4,a4,0x1
    80014498:	2701                	sext.w	a4,a4
    8001449a:	4605                	li	a2,1
    8001449c:	00e6173b          	sllw	a4,a2,a4
    800144a0:	2701                	sext.w	a4,a4
    800144a2:	0187171b          	slliw	a4,a4,0x18
    800144a6:	4187571b          	sraiw	a4,a4,0x18
    800144aa:	fff74713          	not	a4,a4
    800144ae:	0187171b          	slliw	a4,a4,0x18
    800144b2:	4187571b          	sraiw	a4,a4,0x18
    800144b6:	8f75                	and	a4,a4,a3
    800144b8:	0187169b          	slliw	a3,a4,0x18
    800144bc:	4186d69b          	sraiw	a3,a3,0x18
    800144c0:	00004717          	auipc	a4,0x4
    800144c4:	b9070713          	addi	a4,a4,-1136 # 80018050 <bookkeeping>
    800144c8:	6318                	ld	a4,0(a4)
    800144ca:	97ba                	add	a5,a5,a4
    800144cc:	0ff6f713          	andi	a4,a3,255
    800144d0:	00e78023          	sb	a4,0(a5)
}
    800144d4:	0001                	nop
    800144d6:	6462                	ld	s0,24(sp)
    800144d8:	6105                	addi	sp,sp,32
    800144da:	8082                	ret

00000000800144dc <is_taken>:

static int is_taken(uint64_t index)
{
    800144dc:	1101                	addi	sp,sp,-32
    800144de:	ec22                	sd	s0,24(sp)
    800144e0:	1000                	addi	s0,sp,32
    800144e2:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2));
    800144e6:	00004797          	auipc	a5,0x4
    800144ea:	b6a78793          	addi	a5,a5,-1174 # 80018050 <bookkeeping>
    800144ee:	6398                	ld	a4,0(a5)
    800144f0:	fe843783          	ld	a5,-24(s0)
    800144f4:	8389                	srli	a5,a5,0x2
    800144f6:	97ba                	add	a5,a5,a4
    800144f8:	0007c783          	lbu	a5,0(a5)
    800144fc:	0007871b          	sext.w	a4,a5
    80014500:	fe843783          	ld	a5,-24(s0)
    80014504:	2781                	sext.w	a5,a5
    80014506:	8b8d                	andi	a5,a5,3
    80014508:	2781                	sext.w	a5,a5
    8001450a:	0017979b          	slliw	a5,a5,0x1
    8001450e:	2781                	sext.w	a5,a5
    80014510:	4685                	li	a3,1
    80014512:	00f697bb          	sllw	a5,a3,a5
    80014516:	2781                	sext.w	a5,a5
    80014518:	8ff9                	and	a5,a5,a4
    8001451a:	2781                	sext.w	a5,a5
}
    8001451c:	853e                	mv	a0,a5
    8001451e:	6462                	ld	s0,24(sp)
    80014520:	6105                	addi	sp,sp,32
    80014522:	8082                	ret

0000000080014524 <set_last>:

static void set_last(uint64_t index)
{
    80014524:	1101                	addi	sp,sp,-32
    80014526:	ec22                	sd	s0,24(sp)
    80014528:	1000                	addi	s0,sp,32
    8001452a:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2 + 1));
    8001452e:	00004797          	auipc	a5,0x4
    80014532:	b2278793          	addi	a5,a5,-1246 # 80018050 <bookkeeping>
    80014536:	6398                	ld	a4,0(a5)
    80014538:	fe843783          	ld	a5,-24(s0)
    8001453c:	8389                	srli	a5,a5,0x2
    8001453e:	973e                	add	a4,a4,a5
    80014540:	00074703          	lbu	a4,0(a4)
    80014544:	0187169b          	slliw	a3,a4,0x18
    80014548:	4186d69b          	sraiw	a3,a3,0x18
    8001454c:	fe843703          	ld	a4,-24(s0)
    80014550:	2701                	sext.w	a4,a4
    80014552:	8b0d                	andi	a4,a4,3
    80014554:	2701                	sext.w	a4,a4
    80014556:	0017171b          	slliw	a4,a4,0x1
    8001455a:	2701                	sext.w	a4,a4
    8001455c:	2705                	addiw	a4,a4,1
    8001455e:	2701                	sext.w	a4,a4
    80014560:	4605                	li	a2,1
    80014562:	00e6173b          	sllw	a4,a2,a4
    80014566:	2701                	sext.w	a4,a4
    80014568:	0187171b          	slliw	a4,a4,0x18
    8001456c:	4187571b          	sraiw	a4,a4,0x18
    80014570:	8f55                	or	a4,a4,a3
    80014572:	0187169b          	slliw	a3,a4,0x18
    80014576:	4186d69b          	sraiw	a3,a3,0x18
    8001457a:	00004717          	auipc	a4,0x4
    8001457e:	ad670713          	addi	a4,a4,-1322 # 80018050 <bookkeeping>
    80014582:	6318                	ld	a4,0(a4)
    80014584:	97ba                	add	a5,a5,a4
    80014586:	0ff6f713          	andi	a4,a3,255
    8001458a:	00e78023          	sb	a4,0(a5)
}
    8001458e:	0001                	nop
    80014590:	6462                	ld	s0,24(sp)
    80014592:	6105                	addi	sp,sp,32
    80014594:	8082                	ret

0000000080014596 <clear_last>:

static void clear_last(uint64_t index)
{
    80014596:	1101                	addi	sp,sp,-32
    80014598:	ec22                	sd	s0,24(sp)
    8001459a:	1000                	addi	s0,sp,32
    8001459c:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2 + 1));
    800145a0:	00004797          	auipc	a5,0x4
    800145a4:	ab078793          	addi	a5,a5,-1360 # 80018050 <bookkeeping>
    800145a8:	6398                	ld	a4,0(a5)
    800145aa:	fe843783          	ld	a5,-24(s0)
    800145ae:	8389                	srli	a5,a5,0x2
    800145b0:	973e                	add	a4,a4,a5
    800145b2:	00074703          	lbu	a4,0(a4)
    800145b6:	0187169b          	slliw	a3,a4,0x18
    800145ba:	4186d69b          	sraiw	a3,a3,0x18
    800145be:	fe843703          	ld	a4,-24(s0)
    800145c2:	2701                	sext.w	a4,a4
    800145c4:	8b0d                	andi	a4,a4,3
    800145c6:	2701                	sext.w	a4,a4
    800145c8:	0017171b          	slliw	a4,a4,0x1
    800145cc:	2701                	sext.w	a4,a4
    800145ce:	2705                	addiw	a4,a4,1
    800145d0:	2701                	sext.w	a4,a4
    800145d2:	4605                	li	a2,1
    800145d4:	00e6173b          	sllw	a4,a2,a4
    800145d8:	2701                	sext.w	a4,a4
    800145da:	0187171b          	slliw	a4,a4,0x18
    800145de:	4187571b          	sraiw	a4,a4,0x18
    800145e2:	fff74713          	not	a4,a4
    800145e6:	0187171b          	slliw	a4,a4,0x18
    800145ea:	4187571b          	sraiw	a4,a4,0x18
    800145ee:	8f75                	and	a4,a4,a3
    800145f0:	0187169b          	slliw	a3,a4,0x18
    800145f4:	4186d69b          	sraiw	a3,a3,0x18
    800145f8:	00004717          	auipc	a4,0x4
    800145fc:	a5870713          	addi	a4,a4,-1448 # 80018050 <bookkeeping>
    80014600:	6318                	ld	a4,0(a4)
    80014602:	97ba                	add	a5,a5,a4
    80014604:	0ff6f713          	andi	a4,a3,255
    80014608:	00e78023          	sb	a4,0(a5)
}
    8001460c:	0001                	nop
    8001460e:	6462                	ld	s0,24(sp)
    80014610:	6105                	addi	sp,sp,32
    80014612:	8082                	ret

0000000080014614 <is_last>:

static int is_last(uint64_t index)
{
    80014614:	1101                	addi	sp,sp,-32
    80014616:	ec22                	sd	s0,24(sp)
    80014618:	1000                	addi	s0,sp,32
    8001461a:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2 + 1));
    8001461e:	00004797          	auipc	a5,0x4
    80014622:	a3278793          	addi	a5,a5,-1486 # 80018050 <bookkeeping>
    80014626:	6398                	ld	a4,0(a5)
    80014628:	fe843783          	ld	a5,-24(s0)
    8001462c:	8389                	srli	a5,a5,0x2
    8001462e:	97ba                	add	a5,a5,a4
    80014630:	0007c783          	lbu	a5,0(a5)
    80014634:	0007871b          	sext.w	a4,a5
    80014638:	fe843783          	ld	a5,-24(s0)
    8001463c:	2781                	sext.w	a5,a5
    8001463e:	8b8d                	andi	a5,a5,3
    80014640:	2781                	sext.w	a5,a5
    80014642:	0017979b          	slliw	a5,a5,0x1
    80014646:	2781                	sext.w	a5,a5
    80014648:	2785                	addiw	a5,a5,1
    8001464a:	2781                	sext.w	a5,a5
    8001464c:	4685                	li	a3,1
    8001464e:	00f697bb          	sllw	a5,a3,a5
    80014652:	2781                	sext.w	a5,a5
    80014654:	8ff9                	and	a5,a5,a4
    80014656:	2781                	sext.w	a5,a5
}
    80014658:	853e                	mv	a0,a5
    8001465a:	6462                	ld	s0,24(sp)
    8001465c:	6105                	addi	sp,sp,32
    8001465e:	8082                	ret

0000000080014660 <page_init>:

void page_init(void)
{
    80014660:	1101                	addi	sp,sp,-32
    80014662:	ec06                	sd	ra,24(sp)
    80014664:	e822                	sd	s0,16(sp)
    80014666:	1000                	addi	s0,sp,32
    /* Initialize the page system. */
    bookkeeping = sym_start(heap);
    80014668:	00004797          	auipc	a5,0x4
    8001466c:	9e878793          	addi	a5,a5,-1560 # 80018050 <bookkeeping>
    80014670:	00010717          	auipc	a4,0x10
    80014674:	99070713          	addi	a4,a4,-1648 # 80024000 <_heap_start>
    80014678:	e398                	sd	a4,0(a5)
    
    // Print bookkeeping area
    mutex_spinlock(&page_lock);
    8001467a:	00004517          	auipc	a0,0x4
    8001467e:	98e50513          	addi	a0,a0,-1650 # 80018008 <page_lock>
    80014682:	f05fd0ef          	jal	ra,80012586 <mutex_spinlock>

    // Initialize the bookkeeping area
    memset(bookkeeping, 0, BK_SIZE_IN_BYTES);
    80014686:	00004797          	auipc	a5,0x4
    8001468a:	9ca78793          	addi	a5,a5,-1590 # 80018050 <bookkeeping>
    8001468e:	6394                	ld	a3,0(a5)
    80014690:	07ffc717          	auipc	a4,0x7ffc
    80014694:	97070713          	addi	a4,a4,-1680 # 88010000 <_heap_end>
    80014698:	00010797          	auipc	a5,0x10
    8001469c:	96878793          	addi	a5,a5,-1688 # 80024000 <_heap_start>
    800146a0:	40f707b3          	sub	a5,a4,a5
    800146a4:	83b9                	srli	a5,a5,0xe
    800146a6:	0007871b          	sext.w	a4,a5
    800146aa:	6785                	lui	a5,0x1
    800146ac:	37fd                	addiw	a5,a5,-1
    800146ae:	9fb9                	addw	a5,a5,a4
    800146b0:	2781                	sext.w	a5,a5
    800146b2:	0007871b          	sext.w	a4,a5
    800146b6:	77fd                	lui	a5,0xfffff
    800146b8:	8ff9                	and	a5,a5,a4
    800146ba:	2781                	sext.w	a5,a5
    800146bc:	863e                	mv	a2,a5
    800146be:	4581                	li	a1,0
    800146c0:	8536                	mv	a0,a3
    800146c2:	4e1000ef          	jal	ra,800153a2 <memset>
    // Mark the bookkeeping pages as taken
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    800146c6:	fe043423          	sd	zero,-24(s0)
    800146ca:	a811                	j	800146de <page_init+0x7e>
        set_taken(i);
    800146cc:	fe843503          	ld	a0,-24(s0)
    800146d0:	d25ff0ef          	jal	ra,800143f4 <set_taken>
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    800146d4:	fe843783          	ld	a5,-24(s0)
    800146d8:	0785                	addi	a5,a5,1
    800146da:	fef43423          	sd	a5,-24(s0)
    800146de:	07ffc717          	auipc	a4,0x7ffc
    800146e2:	92270713          	addi	a4,a4,-1758 # 88010000 <_heap_end>
    800146e6:	00010797          	auipc	a5,0x10
    800146ea:	91a78793          	addi	a5,a5,-1766 # 80024000 <_heap_start>
    800146ee:	40f707b3          	sub	a5,a4,a5
    800146f2:	00e7d713          	srli	a4,a5,0xe
    800146f6:	6785                	lui	a5,0x1
    800146f8:	17fd                	addi	a5,a5,-1
    800146fa:	97ba                	add	a5,a5,a4
    800146fc:	83b1                	srli	a5,a5,0xc
    800146fe:	fe843703          	ld	a4,-24(s0)
    80014702:	fcf765e3          	bltu	a4,a5,800146cc <page_init+0x6c>
    }
    set_last(BK_SIZE_IN_PAGES - 1);
    80014706:	07ffc717          	auipc	a4,0x7ffc
    8001470a:	8fa70713          	addi	a4,a4,-1798 # 88010000 <_heap_end>
    8001470e:	00010797          	auipc	a5,0x10
    80014712:	8f278793          	addi	a5,a5,-1806 # 80024000 <_heap_start>
    80014716:	40f707b3          	sub	a5,a4,a5
    8001471a:	00e7d713          	srli	a4,a5,0xe
    8001471e:	6785                	lui	a5,0x1
    80014720:	17fd                	addi	a5,a5,-1
    80014722:	97ba                	add	a5,a5,a4
    80014724:	83b1                	srli	a5,a5,0xc
    80014726:	17fd                	addi	a5,a5,-1
    80014728:	853e                	mv	a0,a5
    8001472a:	dfbff0ef          	jal	ra,80014524 <set_last>

    mutex_unlock(&page_lock);
    8001472e:	00004517          	auipc	a0,0x4
    80014732:	8da50513          	addi	a0,a0,-1830 # 80018008 <page_lock>
    80014736:	e7ffd0ef          	jal	ra,800125b4 <mutex_unlock>

    // Print out the bookkeeping area's contents
    logf(LOG_INFO, "Page Init: 0x%08lx -> 0x%08lx\n", bookkeeping, bookkeeping + BK_SIZE_IN_BYTES);
    8001473a:	00004797          	auipc	a5,0x4
    8001473e:	91678793          	addi	a5,a5,-1770 # 80018050 <bookkeeping>
    80014742:	6390                	ld	a2,0(a5)
    80014744:	00004797          	auipc	a5,0x4
    80014748:	90c78793          	addi	a5,a5,-1780 # 80018050 <bookkeeping>
    8001474c:	6398                	ld	a4,0(a5)
    8001474e:	07ffc697          	auipc	a3,0x7ffc
    80014752:	8b268693          	addi	a3,a3,-1870 # 88010000 <_heap_end>
    80014756:	00010797          	auipc	a5,0x10
    8001475a:	8aa78793          	addi	a5,a5,-1878 # 80024000 <_heap_start>
    8001475e:	40f687b3          	sub	a5,a3,a5
    80014762:	00e7d693          	srli	a3,a5,0xe
    80014766:	6785                	lui	a5,0x1
    80014768:	17fd                	addi	a5,a5,-1
    8001476a:	96be                	add	a3,a3,a5
    8001476c:	77fd                	lui	a5,0xfffff
    8001476e:	8ff5                	and	a5,a5,a3
    80014770:	97ba                	add	a5,a5,a4
    80014772:	86be                	mv	a3,a5
    80014774:	00005597          	auipc	a1,0x5
    80014778:	21458593          	addi	a1,a1,532 # 80019988 <pow10.0+0x758>
    8001477c:	4511                	li	a0,4
    8001477e:	e12ff0ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  Heap size: 0x%lx bytes, %lu pages\n", HEAP_SIZE_IN_BYTES, HEAP_SIZE_IN_PAGES);
    80014782:	07ffc717          	auipc	a4,0x7ffc
    80014786:	87e70713          	addi	a4,a4,-1922 # 88010000 <_heap_end>
    8001478a:	00010797          	auipc	a5,0x10
    8001478e:	87678793          	addi	a5,a5,-1930 # 80024000 <_heap_start>
    80014792:	40f70633          	sub	a2,a4,a5
    80014796:	07ffc717          	auipc	a4,0x7ffc
    8001479a:	86a70713          	addi	a4,a4,-1942 # 88010000 <_heap_end>
    8001479e:	00010797          	auipc	a5,0x10
    800147a2:	86278793          	addi	a5,a5,-1950 # 80024000 <_heap_start>
    800147a6:	40f707b3          	sub	a5,a4,a5
    800147aa:	83b1                	srli	a5,a5,0xc
    800147ac:	86be                	mv	a3,a5
    800147ae:	00005597          	auipc	a1,0x5
    800147b2:	1fa58593          	addi	a1,a1,506 # 800199a8 <pow10.0+0x778>
    800147b6:	4511                	li	a0,4
    800147b8:	dd8ff0ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  Bookkeeping size: 0x%lx bytes, %lu pages\n", BK_SIZE_IN_BYTES, BK_SIZE_IN_PAGES);
    800147bc:	07ffc717          	auipc	a4,0x7ffc
    800147c0:	84470713          	addi	a4,a4,-1980 # 88010000 <_heap_end>
    800147c4:	00010797          	auipc	a5,0x10
    800147c8:	83c78793          	addi	a5,a5,-1988 # 80024000 <_heap_start>
    800147cc:	40f707b3          	sub	a5,a4,a5
    800147d0:	00e7d713          	srli	a4,a5,0xe
    800147d4:	6785                	lui	a5,0x1
    800147d6:	17fd                	addi	a5,a5,-1
    800147d8:	973e                	add	a4,a4,a5
    800147da:	77fd                	lui	a5,0xfffff
    800147dc:	00f77633          	and	a2,a4,a5
    800147e0:	07ffc717          	auipc	a4,0x7ffc
    800147e4:	82070713          	addi	a4,a4,-2016 # 88010000 <_heap_end>
    800147e8:	00010797          	auipc	a5,0x10
    800147ec:	81878793          	addi	a5,a5,-2024 # 80024000 <_heap_start>
    800147f0:	40f707b3          	sub	a5,a4,a5
    800147f4:	00e7d713          	srli	a4,a5,0xe
    800147f8:	6785                	lui	a5,0x1
    800147fa:	17fd                	addi	a5,a5,-1
    800147fc:	97ba                	add	a5,a5,a4
    800147fe:	83b1                	srli	a5,a5,0xc
    80014800:	86be                	mv	a3,a5
    80014802:	00005597          	auipc	a1,0x5
    80014806:	1ce58593          	addi	a1,a1,462 # 800199d0 <pow10.0+0x7a0>
    8001480a:	4511                	li	a0,4
    8001480c:	d84ff0ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  Taken pages: %lu\n", page_count_taken());
    80014810:	346000ef          	jal	ra,80014b56 <page_count_taken>
    80014814:	87aa                	mv	a5,a0
    80014816:	863e                	mv	a2,a5
    80014818:	00005597          	auipc	a1,0x5
    8001481c:	1e858593          	addi	a1,a1,488 # 80019a00 <pow10.0+0x7d0>
    80014820:	4511                	li	a0,4
    80014822:	d6eff0ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  Free pages: %lu\n", page_count_free());
    80014826:	2ba000ef          	jal	ra,80014ae0 <page_count_free>
    8001482a:	87aa                	mv	a5,a0
    8001482c:	863e                	mv	a2,a5
    8001482e:	00005597          	auipc	a1,0x5
    80014832:	1ea58593          	addi	a1,a1,490 # 80019a18 <pow10.0+0x7e8>
    80014836:	4511                	li	a0,4
    80014838:	d58ff0ef          	jal	ra,80013d90 <logf>
    logf(LOG_INFO, "  Heap size: 0x%lx bytes, %lu pages\n", HEAP_SIZE_IN_BYTES, HEAP_SIZE_IN_PAGES);
    logf(LOG_INFO, "  Bookkeeping size: 0x%lx bytes, %lu pages\n", BK_SIZE_IN_BYTES, BK_SIZE_IN_PAGES);
    logf(LOG_INFO, "  Taken pages: %lu\n", page_count_taken());
    logf(LOG_INFO, "  Free pages: %lu\n", page_count_free());
    */
}
    8001483c:	0001                	nop
    8001483e:	60e2                	ld	ra,24(sp)
    80014840:	6442                	ld	s0,16(sp)
    80014842:	6105                	addi	sp,sp,32
    80014844:	8082                	ret

0000000080014846 <page_nalloc>:

void *page_nalloc(int n)
{
    80014846:	7139                	addi	sp,sp,-64
    80014848:	fc06                	sd	ra,56(sp)
    8001484a:	f822                	sd	s0,48(sp)
    8001484c:	0080                	addi	s0,sp,64
    8001484e:	87aa                	mv	a5,a0
    80014850:	fcf42623          	sw	a5,-52(s0)
    if (n <= 0) {
    80014854:	fcc42783          	lw	a5,-52(s0)
    80014858:	2781                	sext.w	a5,a5
    8001485a:	00f04463          	bgtz	a5,80014862 <page_nalloc+0x1c>
        return NULL;
    8001485e:	4781                	li	a5,0
    80014860:	aaa9                	j	800149ba <page_nalloc+0x174>
    }

    mutex_spinlock(&page_lock);
    80014862:	00003517          	auipc	a0,0x3
    80014866:	7a650513          	addi	a0,a0,1958 # 80018008 <page_lock>
    8001486a:	d1dfd0ef          	jal	ra,80012586 <mutex_spinlock>

    int start = 0;
    8001486e:	fe042623          	sw	zero,-20(s0)
    int consecutive = 0;
    80014872:	fe042423          	sw	zero,-24(s0)

    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014876:	fe043023          	sd	zero,-32(s0)
    8001487a:	aa11                	j	8001498e <page_nalloc+0x148>
        if (!is_taken(i)) {
    8001487c:	fe043503          	ld	a0,-32(s0)
    80014880:	c5dff0ef          	jal	ra,800144dc <is_taken>
    80014884:	87aa                	mv	a5,a0
    80014886:	0e079563          	bnez	a5,80014970 <page_nalloc+0x12a>
            if (consecutive == 0) {
    8001488a:	fe842783          	lw	a5,-24(s0)
    8001488e:	2781                	sext.w	a5,a5
    80014890:	e789                	bnez	a5,8001489a <page_nalloc+0x54>
                start = i;
    80014892:	fe043783          	ld	a5,-32(s0)
    80014896:	fef42623          	sw	a5,-20(s0)
            }

            consecutive++;
    8001489a:	fe842783          	lw	a5,-24(s0)
    8001489e:	2785                	addiw	a5,a5,1
    800148a0:	fef42423          	sw	a5,-24(s0)

            if (consecutive >= n) {
    800148a4:	fe842703          	lw	a4,-24(s0)
    800148a8:	fcc42783          	lw	a5,-52(s0)
    800148ac:	2701                	sext.w	a4,a4
    800148ae:	2781                	sext.w	a5,a5
    800148b0:	0cf74a63          	blt	a4,a5,80014984 <page_nalloc+0x13e>
                debugf("page_nalloc: found %d consecutive pages starting at 0x%08lx\n", n, start);
    800148b4:	fec42703          	lw	a4,-20(s0)
    800148b8:	fcc42783          	lw	a5,-52(s0)
    800148bc:	863a                	mv	a2,a4
    800148be:	85be                	mv	a1,a5
    800148c0:	00005517          	auipc	a0,0x5
    800148c4:	17050513          	addi	a0,a0,368 # 80019a30 <pow10.0+0x800>
    800148c8:	d26ff0ef          	jal	ra,80013dee <debugf>
                for (int j = 0; j < n; j++) {
    800148cc:	fc042e23          	sw	zero,-36(s0)
    800148d0:	a825                	j	80014908 <page_nalloc+0xc2>
                    debugf("page_nalloc: marking page 0x%08lx as taken\n", start + j);
    800148d2:	fec42703          	lw	a4,-20(s0)
    800148d6:	fdc42783          	lw	a5,-36(s0)
    800148da:	9fb9                	addw	a5,a5,a4
    800148dc:	2781                	sext.w	a5,a5
    800148de:	85be                	mv	a1,a5
    800148e0:	00005517          	auipc	a0,0x5
    800148e4:	19050513          	addi	a0,a0,400 # 80019a70 <pow10.0+0x840>
    800148e8:	d06ff0ef          	jal	ra,80013dee <debugf>
                    set_taken(start + j);
    800148ec:	fec42703          	lw	a4,-20(s0)
    800148f0:	fdc42783          	lw	a5,-36(s0)
    800148f4:	9fb9                	addw	a5,a5,a4
    800148f6:	2781                	sext.w	a5,a5
    800148f8:	853e                	mv	a0,a5
    800148fa:	afbff0ef          	jal	ra,800143f4 <set_taken>
                for (int j = 0; j < n; j++) {
    800148fe:	fdc42783          	lw	a5,-36(s0)
    80014902:	2785                	addiw	a5,a5,1
    80014904:	fcf42e23          	sw	a5,-36(s0)
    80014908:	fdc42703          	lw	a4,-36(s0)
    8001490c:	fcc42783          	lw	a5,-52(s0)
    80014910:	2701                	sext.w	a4,a4
    80014912:	2781                	sext.w	a5,a5
    80014914:	faf74fe3          	blt	a4,a5,800148d2 <page_nalloc+0x8c>
                }
                debugf("page_nalloc: marking page 0x%08lx as last\n", start + n - 1);
    80014918:	fec42703          	lw	a4,-20(s0)
    8001491c:	fcc42783          	lw	a5,-52(s0)
    80014920:	9fb9                	addw	a5,a5,a4
    80014922:	2781                	sext.w	a5,a5
    80014924:	37fd                	addiw	a5,a5,-1
    80014926:	2781                	sext.w	a5,a5
    80014928:	85be                	mv	a1,a5
    8001492a:	00005517          	auipc	a0,0x5
    8001492e:	17650513          	addi	a0,a0,374 # 80019aa0 <pow10.0+0x870>
    80014932:	cbcff0ef          	jal	ra,80013dee <debugf>
                set_last(start + n - 1);
    80014936:	fec42703          	lw	a4,-20(s0)
    8001493a:	fcc42783          	lw	a5,-52(s0)
    8001493e:	9fb9                	addw	a5,a5,a4
    80014940:	2781                	sext.w	a5,a5
    80014942:	37fd                	addiw	a5,a5,-1
    80014944:	2781                	sext.w	a5,a5
    80014946:	853e                	mv	a0,a5
    80014948:	bddff0ef          	jal	ra,80014524 <set_last>

                mutex_unlock(&page_lock);
    8001494c:	00003517          	auipc	a0,0x3
    80014950:	6bc50513          	addi	a0,a0,1724 # 80018008 <page_lock>
    80014954:	c61fd0ef          	jal	ra,800125b4 <mutex_unlock>
                return (void *)(bookkeeping + start * PAGE_SIZE);
    80014958:	00003797          	auipc	a5,0x3
    8001495c:	6f878793          	addi	a5,a5,1784 # 80018050 <bookkeeping>
    80014960:	639c                	ld	a5,0(a5)
    80014962:	fec42703          	lw	a4,-20(s0)
    80014966:	00c7171b          	slliw	a4,a4,0xc
    8001496a:	2701                	sext.w	a4,a4
    8001496c:	97ba                	add	a5,a5,a4
    8001496e:	a0b1                	j	800149ba <page_nalloc+0x174>
            }
        } else {
            debugf("page_nalloc: page 0x%08lx is taken\n", i);
    80014970:	fe043583          	ld	a1,-32(s0)
    80014974:	00005517          	auipc	a0,0x5
    80014978:	15c50513          	addi	a0,a0,348 # 80019ad0 <pow10.0+0x8a0>
    8001497c:	c72ff0ef          	jal	ra,80013dee <debugf>
            consecutive = 0;
    80014980:	fe042423          	sw	zero,-24(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014984:	fe043783          	ld	a5,-32(s0)
    80014988:	0785                	addi	a5,a5,1
    8001498a:	fef43023          	sd	a5,-32(s0)
    8001498e:	07ffb717          	auipc	a4,0x7ffb
    80014992:	67270713          	addi	a4,a4,1650 # 88010000 <_heap_end>
    80014996:	0000f797          	auipc	a5,0xf
    8001499a:	66a78793          	addi	a5,a5,1642 # 80024000 <_heap_start>
    8001499e:	40f707b3          	sub	a5,a4,a5
    800149a2:	83b1                	srli	a5,a5,0xc
    800149a4:	fe043703          	ld	a4,-32(s0)
    800149a8:	ecf76ae3          	bltu	a4,a5,8001487c <page_nalloc+0x36>
        }
    }

    mutex_unlock(&page_lock);
    800149ac:	00003517          	auipc	a0,0x3
    800149b0:	65c50513          	addi	a0,a0,1628 # 80018008 <page_lock>
    800149b4:	c01fd0ef          	jal	ra,800125b4 <mutex_unlock>
    return NULL;
    800149b8:	4781                	li	a5,0
}
    800149ba:	853e                	mv	a0,a5
    800149bc:	70e2                	ld	ra,56(sp)
    800149be:	7442                	ld	s0,48(sp)
    800149c0:	6121                	addi	sp,sp,64
    800149c2:	8082                	ret

00000000800149c4 <page_znalloc>:

void *page_znalloc(int n)
{
    800149c4:	7179                	addi	sp,sp,-48
    800149c6:	f406                	sd	ra,40(sp)
    800149c8:	f022                	sd	s0,32(sp)
    800149ca:	1800                	addi	s0,sp,48
    800149cc:	87aa                	mv	a5,a0
    800149ce:	fcf42e23          	sw	a5,-36(s0)
    if (n <= 0) {
    800149d2:	fdc42783          	lw	a5,-36(s0)
    800149d6:	2781                	sext.w	a5,a5
    800149d8:	00f04463          	bgtz	a5,800149e0 <page_znalloc+0x1c>
        return NULL;
    800149dc:	4781                	li	a5,0
    800149de:	a805                	j	80014a0e <page_znalloc+0x4a>
    }
    
    void *mem = page_nalloc(n);
    800149e0:	fdc42783          	lw	a5,-36(s0)
    800149e4:	853e                	mv	a0,a5
    800149e6:	e61ff0ef          	jal	ra,80014846 <page_nalloc>
    800149ea:	fea43423          	sd	a0,-24(s0)
    if (mem) {
    800149ee:	fe843783          	ld	a5,-24(s0)
    800149f2:	cf81                	beqz	a5,80014a0a <page_znalloc+0x46>
        memset(mem, 0, n * PAGE_SIZE);
    800149f4:	fdc42783          	lw	a5,-36(s0)
    800149f8:	00c7979b          	slliw	a5,a5,0xc
    800149fc:	2781                	sext.w	a5,a5
    800149fe:	863e                	mv	a2,a5
    80014a00:	4581                	li	a1,0
    80014a02:	fe843503          	ld	a0,-24(s0)
    80014a06:	19d000ef          	jal	ra,800153a2 <memset>
    }
    return mem;
    80014a0a:	fe843783          	ld	a5,-24(s0)
}
    80014a0e:	853e                	mv	a0,a5
    80014a10:	70a2                	ld	ra,40(sp)
    80014a12:	7402                	ld	s0,32(sp)
    80014a14:	6145                	addi	sp,sp,48
    80014a16:	8082                	ret

0000000080014a18 <page_free>:

void page_free(void *p)
{
    80014a18:	7179                	addi	sp,sp,-48
    80014a1a:	f406                	sd	ra,40(sp)
    80014a1c:	f022                	sd	s0,32(sp)
    80014a1e:	1800                	addi	s0,sp,48
    80014a20:	fca43c23          	sd	a0,-40(s0)
    if (p == NULL) {
    80014a24:	fd843783          	ld	a5,-40(s0)
    80014a28:	c7dd                	beqz	a5,80014ad6 <page_free+0xbe>
        return;
    }
    /* Free the page */
    uint64_t x = ((uint64_t)p - (uint64_t)bookkeeping) / PAGE_SIZE;
    80014a2a:	fd843783          	ld	a5,-40(s0)
    80014a2e:	00003717          	auipc	a4,0x3
    80014a32:	62270713          	addi	a4,a4,1570 # 80018050 <bookkeeping>
    80014a36:	6318                	ld	a4,0(a4)
    80014a38:	8f99                	sub	a5,a5,a4
    80014a3a:	83b1                	srli	a5,a5,0xc
    80014a3c:	fef43423          	sd	a5,-24(s0)
    logf(LOG_INFO, "page_free: freeing page %lu at address 0x%p\n", x, p);
    80014a40:	fd843683          	ld	a3,-40(s0)
    80014a44:	fe843603          	ld	a2,-24(s0)
    80014a48:	00005597          	auipc	a1,0x5
    80014a4c:	0b058593          	addi	a1,a1,176 # 80019af8 <pow10.0+0x8c8>
    80014a50:	4511                	li	a0,4
    80014a52:	b3eff0ef          	jal	ra,80013d90 <logf>

    mutex_spinlock(&page_lock);
    80014a56:	00003517          	auipc	a0,0x3
    80014a5a:	5b250513          	addi	a0,a0,1458 # 80018008 <page_lock>
    80014a5e:	b29fd0ef          	jal	ra,80012586 <mutex_spinlock>


    if (!is_taken(x)) {
    80014a62:	fe843503          	ld	a0,-24(s0)
    80014a66:	a77ff0ef          	jal	ra,800144dc <is_taken>
    80014a6a:	87aa                	mv	a5,a0
    80014a6c:	eb95                	bnez	a5,80014aa0 <page_free+0x88>
        logf(LOG_ERROR, "page_free: page 0x%08lx is already free!\n", x);
    80014a6e:	fe843603          	ld	a2,-24(s0)
    80014a72:	00005597          	auipc	a1,0x5
    80014a76:	0b658593          	addi	a1,a1,182 # 80019b28 <pow10.0+0x8f8>
    80014a7a:	4505                	li	a0,1
    80014a7c:	b14ff0ef          	jal	ra,80013d90 <logf>
        mutex_unlock(&page_lock);
    80014a80:	00003517          	auipc	a0,0x3
    80014a84:	58850513          	addi	a0,a0,1416 # 80018008 <page_lock>
    80014a88:	b2dfd0ef          	jal	ra,800125b4 <mutex_unlock>
        return;
    80014a8c:	a0b1                	j	80014ad8 <page_free+0xc0>
    }

    // Clear all the pages starting at the index until the last page
    while (is_taken(x) && !is_last(x)) {
        clear_taken(x);
    80014a8e:	fe843503          	ld	a0,-24(s0)
    80014a92:	9d1ff0ef          	jal	ra,80014462 <clear_taken>
        x++;
    80014a96:	fe843783          	ld	a5,-24(s0)
    80014a9a:	0785                	addi	a5,a5,1
    80014a9c:	fef43423          	sd	a5,-24(s0)
    while (is_taken(x) && !is_last(x)) {
    80014aa0:	fe843503          	ld	a0,-24(s0)
    80014aa4:	a39ff0ef          	jal	ra,800144dc <is_taken>
    80014aa8:	87aa                	mv	a5,a0
    80014aaa:	c799                	beqz	a5,80014ab8 <page_free+0xa0>
    80014aac:	fe843503          	ld	a0,-24(s0)
    80014ab0:	b65ff0ef          	jal	ra,80014614 <is_last>
    80014ab4:	87aa                	mv	a5,a0
    80014ab6:	dfe1                	beqz	a5,80014a8e <page_free+0x76>
    }
    clear_taken(x);
    80014ab8:	fe843503          	ld	a0,-24(s0)
    80014abc:	9a7ff0ef          	jal	ra,80014462 <clear_taken>
    clear_last(x);
    80014ac0:	fe843503          	ld	a0,-24(s0)
    80014ac4:	ad3ff0ef          	jal	ra,80014596 <clear_last>


    mutex_unlock(&page_lock);
    80014ac8:	00003517          	auipc	a0,0x3
    80014acc:	54050513          	addi	a0,a0,1344 # 80018008 <page_lock>
    80014ad0:	ae5fd0ef          	jal	ra,800125b4 <mutex_unlock>
    80014ad4:	a011                	j	80014ad8 <page_free+0xc0>
        return;
    80014ad6:	0001                	nop
}
    80014ad8:	70a2                	ld	ra,40(sp)
    80014ada:	7402                	ld	s0,32(sp)
    80014adc:	6145                	addi	sp,sp,48
    80014ade:	8082                	ret

0000000080014ae0 <page_count_free>:

int page_count_free(void)
{
    80014ae0:	1101                	addi	sp,sp,-32
    80014ae2:	ec06                	sd	ra,24(sp)
    80014ae4:	e822                	sd	s0,16(sp)
    80014ae6:	1000                	addi	s0,sp,32
    int ret = 0;
    80014ae8:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract taken. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract taken pages from it.
    */

    mutex_spinlock(&page_lock);
    80014aec:	00003517          	auipc	a0,0x3
    80014af0:	51c50513          	addi	a0,a0,1308 # 80018008 <page_lock>
    80014af4:	a93fd0ef          	jal	ra,80012586 <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014af8:	fe043023          	sd	zero,-32(s0)
    80014afc:	a00d                	j	80014b1e <page_count_free+0x3e>
       if (!is_taken(i)) {
    80014afe:	fe043503          	ld	a0,-32(s0)
    80014b02:	9dbff0ef          	jal	ra,800144dc <is_taken>
    80014b06:	87aa                	mv	a5,a0
    80014b08:	e791                	bnez	a5,80014b14 <page_count_free+0x34>
           ret++;
    80014b0a:	fec42783          	lw	a5,-20(s0)
    80014b0e:	2785                	addiw	a5,a5,1
    80014b10:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014b14:	fe043783          	ld	a5,-32(s0)
    80014b18:	0785                	addi	a5,a5,1
    80014b1a:	fef43023          	sd	a5,-32(s0)
    80014b1e:	07ffb717          	auipc	a4,0x7ffb
    80014b22:	4e270713          	addi	a4,a4,1250 # 88010000 <_heap_end>
    80014b26:	0000f797          	auipc	a5,0xf
    80014b2a:	4da78793          	addi	a5,a5,1242 # 80024000 <_heap_start>
    80014b2e:	40f707b3          	sub	a5,a4,a5
    80014b32:	83b1                	srli	a5,a5,0xc
    80014b34:	fe043703          	ld	a4,-32(s0)
    80014b38:	fcf763e3          	bltu	a4,a5,80014afe <page_count_free+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80014b3c:	00003517          	auipc	a0,0x3
    80014b40:	4cc50513          	addi	a0,a0,1228 # 80018008 <page_lock>
    80014b44:	a71fd0ef          	jal	ra,800125b4 <mutex_unlock>

    return ret;
    80014b48:	fec42783          	lw	a5,-20(s0)
}
    80014b4c:	853e                	mv	a0,a5
    80014b4e:	60e2                	ld	ra,24(sp)
    80014b50:	6442                	ld	s0,16(sp)
    80014b52:	6105                	addi	sp,sp,32
    80014b54:	8082                	ret

0000000080014b56 <page_count_taken>:

int page_count_taken(void)
{
    80014b56:	1101                	addi	sp,sp,-32
    80014b58:	ec06                	sd	ra,24(sp)
    80014b5a:	e822                	sd	s0,16(sp)
    80014b5c:	1000                	addi	s0,sp,32
    int ret = 0;
    80014b5e:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract free. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract free pages from it.
    */

    mutex_spinlock(&page_lock);
    80014b62:	00003517          	auipc	a0,0x3
    80014b66:	4a650513          	addi	a0,a0,1190 # 80018008 <page_lock>
    80014b6a:	a1dfd0ef          	jal	ra,80012586 <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014b6e:	fe043023          	sd	zero,-32(s0)
    80014b72:	a00d                	j	80014b94 <page_count_taken+0x3e>
       if (is_taken(i)) {
    80014b74:	fe043503          	ld	a0,-32(s0)
    80014b78:	965ff0ef          	jal	ra,800144dc <is_taken>
    80014b7c:	87aa                	mv	a5,a0
    80014b7e:	c791                	beqz	a5,80014b8a <page_count_taken+0x34>
           ret++;
    80014b80:	fec42783          	lw	a5,-20(s0)
    80014b84:	2785                	addiw	a5,a5,1
    80014b86:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014b8a:	fe043783          	ld	a5,-32(s0)
    80014b8e:	0785                	addi	a5,a5,1
    80014b90:	fef43023          	sd	a5,-32(s0)
    80014b94:	07ffb717          	auipc	a4,0x7ffb
    80014b98:	46c70713          	addi	a4,a4,1132 # 88010000 <_heap_end>
    80014b9c:	0000f797          	auipc	a5,0xf
    80014ba0:	46478793          	addi	a5,a5,1124 # 80024000 <_heap_start>
    80014ba4:	40f707b3          	sub	a5,a4,a5
    80014ba8:	83b1                	srli	a5,a5,0xc
    80014baa:	fe043703          	ld	a4,-32(s0)
    80014bae:	fcf763e3          	bltu	a4,a5,80014b74 <page_count_taken+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80014bb2:	00003517          	auipc	a0,0x3
    80014bb6:	45650513          	addi	a0,a0,1110 # 80018008 <page_lock>
    80014bba:	9fbfd0ef          	jal	ra,800125b4 <mutex_unlock>

    return ret;
    80014bbe:	fec42783          	lw	a5,-20(s0)
    80014bc2:	853e                	mv	a0,a5
    80014bc4:	60e2                	ld	ra,24(sp)
    80014bc6:	6442                	ld	s0,16(sp)
    80014bc8:	6105                	addi	sp,sp,32
    80014bca:	8082                	ret
    80014bcc:	0000                	unimp
	...

0000000080014bd0 <_start>:
.section .text
.global _start
_start:
.option push
.option norelax
	la		sp, _stack_end
    80014bd0:	0000f117          	auipc	sp,0xf
    80014bd4:	43010113          	addi	sp,sp,1072 # 80024000 <_heap_start>
	la		gp, __global_pointer$
    80014bd8:	00003197          	auipc	gp,0x3
    80014bdc:	42818193          	addi	gp,gp,1064 # 80018000 <kernel_mmu_table>
    # Unlike the SBI, we will be trap returning so that
    # we know the registers sstatus, sip, stvec, and sepc are
    # in a place where we expect them to be. We can just jump
    # into main (tail main) like the SBI, but this ensures the CSRs
    # are what we say they are instead of just assuming from the SBI.
	la		t0, main
    80014be0:	fffff297          	auipc	t0,0xfffff
    80014be4:	8c228293          	addi	t0,t0,-1854 # 800134a2 <main>
	csrw	sepc, t0
    80014be8:	14129073          	csrw	sepc,t0
	li		t0, 1 << 9
    80014bec:	20000293          	li	t0,512
	csrw	sie, t0
    80014bf0:	10429073          	csrw	sie,t0
    # 1 << 13 - FS:  in the "initial" position
    # 1 << 8  - SPP: into Supervisor Mode
    # 1 << 5  - SPIE: enable interrupts
	li		t0, (1 << 13) | (1 << 8) | (1 << 5)
    80014bf4:	6289                	lui	t0,0x2
    80014bf6:	1202829b          	addiw	t0,t0,288
	csrw	sstatus, t0
    80014bfa:	10029073          	csrw	sstatus,t0
    # Load the return address (RA) to the park. When main
    # returns, it will park the HART.
	la		ra, park
    80014bfe:	00000097          	auipc	ra,0x0
    80014c02:	01208093          	addi	ra,ra,18 # 80014c10 <park>
	csrr	a0, sscratch
    80014c06:	14002573          	csrr	a0,sscratch
	sret
    80014c0a:	10200073          	sret
    80014c0e:	0001                	nop

0000000080014c10 <park>:

.section .text
.global park
.align 4
park:
	wfi
    80014c10:	10500073          	wfi
	j	park
    80014c14:	bff5                	j	80014c10 <park>

0000000080014c16 <park_end>:
	...

0000000080014c24 <process_asm_run>:

.section .text
.global process_asm_run
process_asm_run:
    # a0 - Trap frame
    csrw    sscratch, a0
    80014c24:	14051073          	csrw	sscratch,a0
    tail    _spawn_kthread
    80014c28:	3d80206f          	j	80017000 <_spawn_kthread>

0000000080014c2c <g_kmalloc>:
void *(*__global_kmalloc)(uint64_t size);
void *(*__global_kcalloc)(uint64_t num, uint64_t size);
void (*__global_kfree)(void *ptr);

void *g_kmalloc(uint64_t size)
{
    80014c2c:	1101                	addi	sp,sp,-32
    80014c2e:	ec06                	sd	ra,24(sp)
    80014c30:	e822                	sd	s0,16(sp)
    80014c32:	1000                	addi	s0,sp,32
    80014c34:	fea43423          	sd	a0,-24(s0)
    if (__global_kmalloc == NULL) {
    80014c38:	00003797          	auipc	a5,0x3
    80014c3c:	3d878793          	addi	a5,a5,984 # 80018010 <__global_kmalloc>
    80014c40:	639c                	ld	a5,0(a5)
    80014c42:	e399                	bnez	a5,80014c48 <g_kmalloc+0x1c>
        return NULL;
    80014c44:	4781                	li	a5,0
    80014c46:	a811                	j	80014c5a <g_kmalloc+0x2e>
    }
    return __global_kmalloc(size);
    80014c48:	00003797          	auipc	a5,0x3
    80014c4c:	3c878793          	addi	a5,a5,968 # 80018010 <__global_kmalloc>
    80014c50:	639c                	ld	a5,0(a5)
    80014c52:	fe843503          	ld	a0,-24(s0)
    80014c56:	9782                	jalr	a5
    80014c58:	87aa                	mv	a5,a0
}
    80014c5a:	853e                	mv	a0,a5
    80014c5c:	60e2                	ld	ra,24(sp)
    80014c5e:	6442                	ld	s0,16(sp)
    80014c60:	6105                	addi	sp,sp,32
    80014c62:	8082                	ret

0000000080014c64 <g_kcalloc>:
void *g_kcalloc(uint64_t num, uint64_t size)
{
    80014c64:	1101                	addi	sp,sp,-32
    80014c66:	ec06                	sd	ra,24(sp)
    80014c68:	e822                	sd	s0,16(sp)
    80014c6a:	1000                	addi	s0,sp,32
    80014c6c:	fea43423          	sd	a0,-24(s0)
    80014c70:	feb43023          	sd	a1,-32(s0)
    if (__global_kcalloc == NULL) {
    80014c74:	00003797          	auipc	a5,0x3
    80014c78:	3a478793          	addi	a5,a5,932 # 80018018 <__global_kcalloc>
    80014c7c:	639c                	ld	a5,0(a5)
    80014c7e:	e399                	bnez	a5,80014c84 <g_kcalloc+0x20>
        return NULL;
    80014c80:	4781                	li	a5,0
    80014c82:	a821                	j	80014c9a <g_kcalloc+0x36>
    }
    return __global_kcalloc(num, size);
    80014c84:	00003797          	auipc	a5,0x3
    80014c88:	39478793          	addi	a5,a5,916 # 80018018 <__global_kcalloc>
    80014c8c:	639c                	ld	a5,0(a5)
    80014c8e:	fe043583          	ld	a1,-32(s0)
    80014c92:	fe843503          	ld	a0,-24(s0)
    80014c96:	9782                	jalr	a5
    80014c98:	87aa                	mv	a5,a0
}
    80014c9a:	853e                	mv	a0,a5
    80014c9c:	60e2                	ld	ra,24(sp)
    80014c9e:	6442                	ld	s0,16(sp)
    80014ca0:	6105                	addi	sp,sp,32
    80014ca2:	8082                	ret

0000000080014ca4 <g_kzalloc>:
void *g_kzalloc(uint64_t size)
{
    80014ca4:	1101                	addi	sp,sp,-32
    80014ca6:	ec06                	sd	ra,24(sp)
    80014ca8:	e822                	sd	s0,16(sp)
    80014caa:	1000                	addi	s0,sp,32
    80014cac:	fea43423          	sd	a0,-24(s0)
    return g_kcalloc(1, size);
    80014cb0:	fe843583          	ld	a1,-24(s0)
    80014cb4:	4505                	li	a0,1
    80014cb6:	fafff0ef          	jal	ra,80014c64 <g_kcalloc>
    80014cba:	87aa                	mv	a5,a0
}
    80014cbc:	853e                	mv	a0,a5
    80014cbe:	60e2                	ld	ra,24(sp)
    80014cc0:	6442                	ld	s0,16(sp)
    80014cc2:	6105                	addi	sp,sp,32
    80014cc4:	8082                	ret

0000000080014cc6 <g_kfree>:
void g_kfree(void *ptr)
{
    80014cc6:	1101                	addi	sp,sp,-32
    80014cc8:	ec06                	sd	ra,24(sp)
    80014cca:	e822                	sd	s0,16(sp)
    80014ccc:	1000                	addi	s0,sp,32
    80014cce:	fea43423          	sd	a0,-24(s0)
    if (__global_kfree != NULL) {
    80014cd2:	00003797          	auipc	a5,0x3
    80014cd6:	34e78793          	addi	a5,a5,846 # 80018020 <__global_kfree>
    80014cda:	639c                	ld	a5,0(a5)
    80014cdc:	cb89                	beqz	a5,80014cee <g_kfree+0x28>
        __global_kfree(ptr);
    80014cde:	00003797          	auipc	a5,0x3
    80014ce2:	34278793          	addi	a5,a5,834 # 80018020 <__global_kfree>
    80014ce6:	639c                	ld	a5,0(a5)
    80014ce8:	fe843503          	ld	a0,-24(s0)
    80014cec:	9782                	jalr	a5
    }
}
    80014cee:	0001                	nop
    80014cf0:	60e2                	ld	ra,24(sp)
    80014cf2:	6442                	ld	s0,16(sp)
    80014cf4:	6105                	addi	sp,sp,32
    80014cf6:	8082                	ret

0000000080014cf8 <util_connect_galloc>:

void util_connect_galloc(void *(*malloc)(uint64_t size),
                         void *(*calloc)(uint64_t elem, uint64_t size), void (*free)(void *ptr))
{
    80014cf8:	7179                	addi	sp,sp,-48
    80014cfa:	f422                	sd	s0,40(sp)
    80014cfc:	1800                	addi	s0,sp,48
    80014cfe:	fea43423          	sd	a0,-24(s0)
    80014d02:	feb43023          	sd	a1,-32(s0)
    80014d06:	fcc43c23          	sd	a2,-40(s0)
    __global_kmalloc = malloc;
    80014d0a:	00003797          	auipc	a5,0x3
    80014d0e:	30678793          	addi	a5,a5,774 # 80018010 <__global_kmalloc>
    80014d12:	fe843703          	ld	a4,-24(s0)
    80014d16:	e398                	sd	a4,0(a5)
    __global_kcalloc = calloc;
    80014d18:	00003797          	auipc	a5,0x3
    80014d1c:	30078793          	addi	a5,a5,768 # 80018018 <__global_kcalloc>
    80014d20:	fe043703          	ld	a4,-32(s0)
    80014d24:	e398                	sd	a4,0(a5)
    __global_kfree   = free;
    80014d26:	00003797          	auipc	a5,0x3
    80014d2a:	2fa78793          	addi	a5,a5,762 # 80018020 <__global_kfree>
    80014d2e:	fd843703          	ld	a4,-40(s0)
    80014d32:	e398                	sd	a4,0(a5)
}
    80014d34:	0001                	nop
    80014d36:	7422                	ld	s0,40(sp)
    80014d38:	6145                	addi	sp,sp,48
    80014d3a:	8082                	ret

0000000080014d3c <list_init>:
typedef struct List {
    ListElem head;
} List;

static List *list_init(List *lst)
{
    80014d3c:	1101                	addi	sp,sp,-32
    80014d3e:	ec22                	sd	s0,24(sp)
    80014d40:	1000                	addi	s0,sp,32
    80014d42:	fea43423          	sd	a0,-24(s0)
    lst->head.next = &lst->head;
    80014d46:	fe843703          	ld	a4,-24(s0)
    80014d4a:	fe843783          	ld	a5,-24(s0)
    80014d4e:	e798                	sd	a4,8(a5)
    lst->head.prev = &lst->head;
    80014d50:	fe843703          	ld	a4,-24(s0)
    80014d54:	fe843783          	ld	a5,-24(s0)
    80014d58:	eb98                	sd	a4,16(a5)

    return lst;
    80014d5a:	fe843783          	ld	a5,-24(s0)
}
    80014d5e:	853e                	mv	a0,a5
    80014d60:	6462                	ld	s0,24(sp)
    80014d62:	6105                	addi	sp,sp,32
    80014d64:	8082                	ret

0000000080014d66 <list_new>:

List *list_new(void)
{
    80014d66:	1101                	addi	sp,sp,-32
    80014d68:	ec06                	sd	ra,24(sp)
    80014d6a:	e822                	sd	s0,16(sp)
    80014d6c:	1000                	addi	s0,sp,32
    List *m = (List *)g_kmalloc(sizeof(List));
    80014d6e:	4561                	li	a0,24
    80014d70:	ebdff0ef          	jal	ra,80014c2c <g_kmalloc>
    80014d74:	fea43423          	sd	a0,-24(s0)
    if (m == NULL) {
    80014d78:	fe843783          	ld	a5,-24(s0)
    80014d7c:	e399                	bnez	a5,80014d82 <list_new+0x1c>
        return NULL;
    80014d7e:	4781                	li	a5,0
    80014d80:	a031                	j	80014d8c <list_new+0x26>
    }
    return list_init(m);
    80014d82:	fe843503          	ld	a0,-24(s0)
    80014d86:	fb7ff0ef          	jal	ra,80014d3c <list_init>
    80014d8a:	87aa                	mv	a5,a0
}
    80014d8c:	853e                	mv	a0,a5
    80014d8e:	60e2                	ld	ra,24(sp)
    80014d90:	6442                	ld	s0,16(sp)
    80014d92:	6105                	addi	sp,sp,32
    80014d94:	8082                	ret

0000000080014d96 <list_add>:

void list_add(List *lst, uint64_t value)
{
    80014d96:	7179                	addi	sp,sp,-48
    80014d98:	f406                	sd	ra,40(sp)
    80014d9a:	f022                	sd	s0,32(sp)
    80014d9c:	1800                	addi	s0,sp,48
    80014d9e:	fca43c23          	sd	a0,-40(s0)
    80014da2:	fcb43823          	sd	a1,-48(s0)
    ListElem *l;
    l             = (ListElem *)g_kzalloc(sizeof(ListElem));
    80014da6:	4561                	li	a0,24
    80014da8:	efdff0ef          	jal	ra,80014ca4 <g_kzalloc>
    80014dac:	fea43423          	sd	a0,-24(s0)
    l->next       = lst->head.next;
    80014db0:	fd843783          	ld	a5,-40(s0)
    80014db4:	6798                	ld	a4,8(a5)
    80014db6:	fe843783          	ld	a5,-24(s0)
    80014dba:	e798                	sd	a4,8(a5)
    l->prev       = &lst->head;
    80014dbc:	fd843703          	ld	a4,-40(s0)
    80014dc0:	fe843783          	ld	a5,-24(s0)
    80014dc4:	eb98                	sd	a4,16(a5)
    l->next->prev = l;
    80014dc6:	fe843783          	ld	a5,-24(s0)
    80014dca:	679c                	ld	a5,8(a5)
    80014dcc:	fe843703          	ld	a4,-24(s0)
    80014dd0:	eb98                	sd	a4,16(a5)
    l->prev->next = l;
    80014dd2:	fe843783          	ld	a5,-24(s0)
    80014dd6:	6b9c                	ld	a5,16(a5)
    80014dd8:	fe843703          	ld	a4,-24(s0)
    80014ddc:	e798                	sd	a4,8(a5)
    l->value      = value;
    80014dde:	fe843783          	ld	a5,-24(s0)
    80014de2:	fd043703          	ld	a4,-48(s0)
    80014de6:	e398                	sd	a4,0(a5)
}
    80014de8:	0001                	nop
    80014dea:	70a2                	ld	ra,40(sp)
    80014dec:	7402                	ld	s0,32(sp)
    80014dee:	6145                	addi	sp,sp,48
    80014df0:	8082                	ret

0000000080014df2 <list_clear>:

void list_clear(List *lst)
{
    80014df2:	7179                	addi	sp,sp,-48
    80014df4:	f406                	sd	ra,40(sp)
    80014df6:	f022                	sd	s0,32(sp)
    80014df8:	1800                	addi	s0,sp,48
    80014dfa:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014dfe:	fd843783          	ld	a5,-40(s0)
    80014e02:	679c                	ld	a5,8(a5)
    80014e04:	fef43423          	sd	a5,-24(s0)
    80014e08:	a831                	j	80014e24 <list_clear+0x32>
        n = e->next;
    80014e0a:	fe843783          	ld	a5,-24(s0)
    80014e0e:	679c                	ld	a5,8(a5)
    80014e10:	fef43023          	sd	a5,-32(s0)
        list_remove_elem(e);
    80014e14:	fe843503          	ld	a0,-24(s0)
    80014e18:	120000ef          	jal	ra,80014f38 <list_remove_elem>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014e1c:	fe043783          	ld	a5,-32(s0)
    80014e20:	fef43423          	sd	a5,-24(s0)
    80014e24:	fd843783          	ld	a5,-40(s0)
    80014e28:	fe843703          	ld	a4,-24(s0)
    80014e2c:	fcf71fe3          	bne	a4,a5,80014e0a <list_clear+0x18>
    }
}
    80014e30:	0001                	nop
    80014e32:	0001                	nop
    80014e34:	70a2                	ld	ra,40(sp)
    80014e36:	7402                	ld	s0,32(sp)
    80014e38:	6145                	addi	sp,sp,48
    80014e3a:	8082                	ret

0000000080014e3c <list_sort>:

void list_sort(List *lst, LIST_COMPARATOR_PARAM(comp))
{
    80014e3c:	7139                	addi	sp,sp,-64
    80014e3e:	fc06                	sd	ra,56(sp)
    80014e40:	f822                	sd	s0,48(sp)
    80014e42:	0080                	addi	s0,sp,64
    80014e44:	fca43423          	sd	a0,-56(s0)
    80014e48:	fcb43023          	sd	a1,-64(s0)
    ListElem *e;
    bool swapped;
    uint64_t tmp;

    do {
        swapped = false;
    80014e4c:	fe0403a3          	sb	zero,-25(s0)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80014e50:	fc843783          	ld	a5,-56(s0)
    80014e54:	6b9c                	ld	a5,16(a5)
    80014e56:	fef43423          	sd	a5,-24(s0)
    80014e5a:	a8a9                	j	80014eb4 <list_sort+0x78>
            if (!comp(e->value, e->prev->value)) {
    80014e5c:	fe843783          	ld	a5,-24(s0)
    80014e60:	6398                	ld	a4,0(a5)
    80014e62:	fe843783          	ld	a5,-24(s0)
    80014e66:	6b9c                	ld	a5,16(a5)
    80014e68:	639c                	ld	a5,0(a5)
    80014e6a:	fc043683          	ld	a3,-64(s0)
    80014e6e:	85be                	mv	a1,a5
    80014e70:	853a                	mv	a0,a4
    80014e72:	9682                	jalr	a3
    80014e74:	87aa                	mv	a5,a0
    80014e76:	0017c793          	xori	a5,a5,1
    80014e7a:	0ff7f793          	andi	a5,a5,255
    80014e7e:	c795                	beqz	a5,80014eaa <list_sort+0x6e>
                swapped        = true;
    80014e80:	4785                	li	a5,1
    80014e82:	fef403a3          	sb	a5,-25(s0)
                tmp            = e->value;
    80014e86:	fe843783          	ld	a5,-24(s0)
    80014e8a:	639c                	ld	a5,0(a5)
    80014e8c:	fcf43c23          	sd	a5,-40(s0)
                e->value       = e->prev->value;
    80014e90:	fe843783          	ld	a5,-24(s0)
    80014e94:	6b9c                	ld	a5,16(a5)
    80014e96:	6398                	ld	a4,0(a5)
    80014e98:	fe843783          	ld	a5,-24(s0)
    80014e9c:	e398                	sd	a4,0(a5)
                e->prev->value = tmp;
    80014e9e:	fe843783          	ld	a5,-24(s0)
    80014ea2:	6b9c                	ld	a5,16(a5)
    80014ea4:	fd843703          	ld	a4,-40(s0)
    80014ea8:	e398                	sd	a4,0(a5)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80014eaa:	fe843783          	ld	a5,-24(s0)
    80014eae:	6b9c                	ld	a5,16(a5)
    80014eb0:	fef43423          	sd	a5,-24(s0)
    80014eb4:	fe843783          	ld	a5,-24(s0)
    80014eb8:	6b98                	ld	a4,16(a5)
    80014eba:	fc843783          	ld	a5,-56(s0)
    80014ebe:	f8f71fe3          	bne	a4,a5,80014e5c <list_sort+0x20>
            }
        }
    } while (swapped);
    80014ec2:	fe744783          	lbu	a5,-25(s0)
    80014ec6:	0ff7f793          	andi	a5,a5,255
    80014eca:	f3c9                	bnez	a5,80014e4c <list_sort+0x10>
}
    80014ecc:	0001                	nop
    80014ece:	0001                	nop
    80014ed0:	70e2                	ld	ra,56(sp)
    80014ed2:	7442                	ld	s0,48(sp)
    80014ed4:	6121                	addi	sp,sp,64
    80014ed6:	8082                	ret

0000000080014ed8 <list_remove>:

bool list_remove(List *lst, uint64_t value)
{
    80014ed8:	7179                	addi	sp,sp,-48
    80014eda:	f406                	sd	ra,40(sp)
    80014edc:	f022                	sd	s0,32(sp)
    80014ede:	1800                	addi	s0,sp,48
    80014ee0:	fca43c23          	sd	a0,-40(s0)
    80014ee4:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(lst, e)
    80014ee8:	fd843503          	ld	a0,-40(s0)
    80014eec:	2ca000ef          	jal	ra,800151b6 <list_elem_start_ascending>
    80014ef0:	fea43423          	sd	a0,-24(s0)
    80014ef4:	a025                	j	80014f1c <list_remove+0x44>
    {
        if (e->value == value) {
    80014ef6:	fe843783          	ld	a5,-24(s0)
    80014efa:	639c                	ld	a5,0(a5)
    80014efc:	fd043703          	ld	a4,-48(s0)
    80014f00:	00f71863          	bne	a4,a5,80014f10 <list_remove+0x38>
            list_remove_elem(e);
    80014f04:	fe843503          	ld	a0,-24(s0)
    80014f08:	030000ef          	jal	ra,80014f38 <list_remove_elem>
            return true;
    80014f0c:	4785                	li	a5,1
    80014f0e:	a005                	j	80014f2e <list_remove+0x56>
    list_for_each(lst, e)
    80014f10:	fe843503          	ld	a0,-24(s0)
    80014f14:	2ea000ef          	jal	ra,800151fe <list_elem_prev>
    80014f18:	fea43423          	sd	a0,-24(s0)
    80014f1c:	fe843583          	ld	a1,-24(s0)
    80014f20:	fd843503          	ld	a0,-40(s0)
    80014f24:	204000ef          	jal	ra,80015128 <list_elem_valid>
    80014f28:	87aa                	mv	a5,a0
    80014f2a:	f7f1                	bnez	a5,80014ef6 <list_remove+0x1e>
        }
    }
    return false;
    80014f2c:	4781                	li	a5,0
}
    80014f2e:	853e                	mv	a0,a5
    80014f30:	70a2                	ld	ra,40(sp)
    80014f32:	7402                	ld	s0,32(sp)
    80014f34:	6145                	addi	sp,sp,48
    80014f36:	8082                	ret

0000000080014f38 <list_remove_elem>:

void list_remove_elem(ListElem *e)
{
    80014f38:	1101                	addi	sp,sp,-32
    80014f3a:	ec06                	sd	ra,24(sp)
    80014f3c:	e822                	sd	s0,16(sp)
    80014f3e:	1000                	addi	s0,sp,32
    80014f40:	fea43423          	sd	a0,-24(s0)
    e->next->prev = e->prev;
    80014f44:	fe843783          	ld	a5,-24(s0)
    80014f48:	679c                	ld	a5,8(a5)
    80014f4a:	fe843703          	ld	a4,-24(s0)
    80014f4e:	6b18                	ld	a4,16(a4)
    80014f50:	eb98                	sd	a4,16(a5)
    e->prev->next = e->next;
    80014f52:	fe843783          	ld	a5,-24(s0)
    80014f56:	6b9c                	ld	a5,16(a5)
    80014f58:	fe843703          	ld	a4,-24(s0)
    80014f5c:	6718                	ld	a4,8(a4)
    80014f5e:	e798                	sd	a4,8(a5)
    g_kfree(e);
    80014f60:	fe843503          	ld	a0,-24(s0)
    80014f64:	d63ff0ef          	jal	ra,80014cc6 <g_kfree>
}
    80014f68:	0001                	nop
    80014f6a:	60e2                	ld	ra,24(sp)
    80014f6c:	6442                	ld	s0,16(sp)
    80014f6e:	6105                	addi	sp,sp,32
    80014f70:	8082                	ret

0000000080014f72 <list_find_elem>:

ListElem *list_find_elem(List *l, uint64_t value)
{
    80014f72:	7179                	addi	sp,sp,-48
    80014f74:	f406                	sd	ra,40(sp)
    80014f76:	f022                	sd	s0,32(sp)
    80014f78:	1800                	addi	s0,sp,48
    80014f7a:	fca43c23          	sd	a0,-40(s0)
    80014f7e:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(l, e)
    80014f82:	fd843503          	ld	a0,-40(s0)
    80014f86:	230000ef          	jal	ra,800151b6 <list_elem_start_ascending>
    80014f8a:	fea43423          	sd	a0,-24(s0)
    80014f8e:	a00d                	j	80014fb0 <list_find_elem+0x3e>
    {
        if (e->value == value) {
    80014f90:	fe843783          	ld	a5,-24(s0)
    80014f94:	639c                	ld	a5,0(a5)
    80014f96:	fd043703          	ld	a4,-48(s0)
    80014f9a:	00f71563          	bne	a4,a5,80014fa4 <list_find_elem+0x32>
            return e;
    80014f9e:	fe843783          	ld	a5,-24(s0)
    80014fa2:	a005                	j	80014fc2 <list_find_elem+0x50>
    list_for_each(l, e)
    80014fa4:	fe843503          	ld	a0,-24(s0)
    80014fa8:	256000ef          	jal	ra,800151fe <list_elem_prev>
    80014fac:	fea43423          	sd	a0,-24(s0)
    80014fb0:	fe843583          	ld	a1,-24(s0)
    80014fb4:	fd843503          	ld	a0,-40(s0)
    80014fb8:	170000ef          	jal	ra,80015128 <list_elem_valid>
    80014fbc:	87aa                	mv	a5,a0
    80014fbe:	fbe9                	bnez	a5,80014f90 <list_find_elem+0x1e>
        }
    }
    return NULL;
    80014fc0:	4781                	li	a5,0
}
    80014fc2:	853e                	mv	a0,a5
    80014fc4:	70a2                	ld	ra,40(sp)
    80014fc6:	7402                	ld	s0,32(sp)
    80014fc8:	6145                	addi	sp,sp,48
    80014fca:	8082                	ret

0000000080014fcc <list_contains>:

bool list_contains(const List *lst, uint64_t value)
{
    80014fcc:	7179                	addi	sp,sp,-48
    80014fce:	f406                	sd	ra,40(sp)
    80014fd0:	f022                	sd	s0,32(sp)
    80014fd2:	1800                	addi	s0,sp,48
    80014fd4:	fca43c23          	sd	a0,-40(s0)
    80014fd8:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e = list_find_celem(lst, value);
    80014fdc:	fd043583          	ld	a1,-48(s0)
    80014fe0:	fd843503          	ld	a0,-40(s0)
    80014fe4:	178000ef          	jal	ra,8001515c <list_find_celem>
    80014fe8:	fea43423          	sd	a0,-24(s0)

    return e == NULL ? false : true;
    80014fec:	fe843783          	ld	a5,-24(s0)
    80014ff0:	00f037b3          	snez	a5,a5
    80014ff4:	0ff7f793          	andi	a5,a5,255
}
    80014ff8:	853e                	mv	a0,a5
    80014ffa:	70a2                	ld	ra,40(sp)
    80014ffc:	7402                	ld	s0,32(sp)
    80014ffe:	6145                	addi	sp,sp,48
    80015000:	8082                	ret

0000000080015002 <list_pop_back>:

ListElem *list_pop_back(List *l)
{
    80015002:	7179                	addi	sp,sp,-48
    80015004:	f406                	sd	ra,40(sp)
    80015006:	f022                	sd	s0,32(sp)
    80015008:	1800                	addi	s0,sp,48
    8001500a:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.next) {
    8001500e:	fd843703          	ld	a4,-40(s0)
    80015012:	fd843783          	ld	a5,-40(s0)
    80015016:	679c                	ld	a5,8(a5)
    80015018:	00f71463          	bne	a4,a5,80015020 <list_pop_back+0x1e>
        return NULL;
    8001501c:	4781                	li	a5,0
    8001501e:	a821                	j	80015036 <list_pop_back+0x34>
    }
    ListElem *e = l->head.next;
    80015020:	fd843783          	ld	a5,-40(s0)
    80015024:	679c                	ld	a5,8(a5)
    80015026:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    8001502a:	fe843503          	ld	a0,-24(s0)
    8001502e:	f0bff0ef          	jal	ra,80014f38 <list_remove_elem>
    return e;
    80015032:	fe843783          	ld	a5,-24(s0)
}
    80015036:	853e                	mv	a0,a5
    80015038:	70a2                	ld	ra,40(sp)
    8001503a:	7402                	ld	s0,32(sp)
    8001503c:	6145                	addi	sp,sp,48
    8001503e:	8082                	ret

0000000080015040 <list_pop>:

ListElem *list_pop(List *l)
{
    80015040:	7179                	addi	sp,sp,-48
    80015042:	f406                	sd	ra,40(sp)
    80015044:	f022                	sd	s0,32(sp)
    80015046:	1800                	addi	s0,sp,48
    80015048:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.prev) {
    8001504c:	fd843703          	ld	a4,-40(s0)
    80015050:	fd843783          	ld	a5,-40(s0)
    80015054:	6b9c                	ld	a5,16(a5)
    80015056:	00f71463          	bne	a4,a5,8001505e <list_pop+0x1e>
        return NULL;
    8001505a:	4781                	li	a5,0
    8001505c:	a821                	j	80015074 <list_pop+0x34>
    }
    ListElem *e = l->head.prev;
    8001505e:	fd843783          	ld	a5,-40(s0)
    80015062:	6b9c                	ld	a5,16(a5)
    80015064:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    80015068:	fe843503          	ld	a0,-24(s0)
    8001506c:	ecdff0ef          	jal	ra,80014f38 <list_remove_elem>
    return e;
    80015070:	fe843783          	ld	a5,-24(s0)
}
    80015074:	853e                	mv	a0,a5
    80015076:	70a2                	ld	ra,40(sp)
    80015078:	7402                	ld	s0,32(sp)
    8001507a:	6145                	addi	sp,sp,48
    8001507c:	8082                	ret

000000008001507e <list_size>:

uint64_t list_size(const List *lst)
{
    8001507e:	7179                	addi	sp,sp,-48
    80015080:	f406                	sd	ra,40(sp)
    80015082:	f022                	sd	s0,32(sp)
    80015084:	1800                	addi	s0,sp,48
    80015086:	fca43c23          	sd	a0,-40(s0)
    uint64_t s = 0;
    8001508a:	fe043423          	sd	zero,-24(s0)
    const ListElem *e;
    list_for_ceach(lst, e)
    8001508e:	fd843503          	ld	a0,-40(s0)
    80015092:	19c000ef          	jal	ra,8001522e <list_celem_start_ascending>
    80015096:	fea43023          	sd	a0,-32(s0)
    8001509a:	a821                	j	800150b2 <list_size+0x34>
    {
        s += 1;
    8001509c:	fe843783          	ld	a5,-24(s0)
    800150a0:	0785                	addi	a5,a5,1
    800150a2:	fef43423          	sd	a5,-24(s0)
    list_for_ceach(lst, e)
    800150a6:	fe043503          	ld	a0,-32(s0)
    800150aa:	1cc000ef          	jal	ra,80015276 <list_celem_prev>
    800150ae:	fea43023          	sd	a0,-32(s0)
    800150b2:	fe043583          	ld	a1,-32(s0)
    800150b6:	fd843503          	ld	a0,-40(s0)
    800150ba:	06e000ef          	jal	ra,80015128 <list_elem_valid>
    800150be:	87aa                	mv	a5,a0
    800150c0:	fff1                	bnez	a5,8001509c <list_size+0x1e>
    }
    return s;
    800150c2:	fe843783          	ld	a5,-24(s0)
}
    800150c6:	853e                	mv	a0,a5
    800150c8:	70a2                	ld	ra,40(sp)
    800150ca:	7402                	ld	s0,32(sp)
    800150cc:	6145                	addi	sp,sp,48
    800150ce:	8082                	ret

00000000800150d0 <list_free>:

void list_free(List *lst)
{
    800150d0:	7179                	addi	sp,sp,-48
    800150d2:	f406                	sd	ra,40(sp)
    800150d4:	f022                	sd	s0,32(sp)
    800150d6:	1800                	addi	s0,sp,48
    800150d8:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    if (lst == NULL) {
    800150dc:	fd843783          	ld	a5,-40(s0)
    800150e0:	cf9d                	beqz	a5,8001511e <list_free+0x4e>
        return;
    }
    for (e = lst->head.next; e != &lst->head; e = n) {
    800150e2:	fd843783          	ld	a5,-40(s0)
    800150e6:	679c                	ld	a5,8(a5)
    800150e8:	fef43423          	sd	a5,-24(s0)
    800150ec:	a831                	j	80015108 <list_free+0x38>
        n = e->next;
    800150ee:	fe843783          	ld	a5,-24(s0)
    800150f2:	679c                	ld	a5,8(a5)
    800150f4:	fef43023          	sd	a5,-32(s0)
        g_kfree(e);
    800150f8:	fe843503          	ld	a0,-24(s0)
    800150fc:	bcbff0ef          	jal	ra,80014cc6 <g_kfree>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80015100:	fe043783          	ld	a5,-32(s0)
    80015104:	fef43423          	sd	a5,-24(s0)
    80015108:	fd843783          	ld	a5,-40(s0)
    8001510c:	fe843703          	ld	a4,-24(s0)
    80015110:	fcf71fe3          	bne	a4,a5,800150ee <list_free+0x1e>
    }
    g_kfree(lst);
    80015114:	fd843503          	ld	a0,-40(s0)
    80015118:	bafff0ef          	jal	ra,80014cc6 <g_kfree>
    8001511c:	a011                	j	80015120 <list_free+0x50>
        return;
    8001511e:	0001                	nop
}
    80015120:	70a2                	ld	ra,40(sp)
    80015122:	7402                	ld	s0,32(sp)
    80015124:	6145                	addi	sp,sp,48
    80015126:	8082                	ret

0000000080015128 <list_elem_valid>:

bool list_elem_valid(const List *l, const ListElem *e)
{
    80015128:	1101                	addi	sp,sp,-32
    8001512a:	ec22                	sd	s0,24(sp)
    8001512c:	1000                	addi	s0,sp,32
    8001512e:	fea43423          	sd	a0,-24(s0)
    80015132:	feb43023          	sd	a1,-32(s0)
    return e != NULL && e != &l->head;
    80015136:	fe043783          	ld	a5,-32(s0)
    8001513a:	cb89                	beqz	a5,8001514c <list_elem_valid+0x24>
    8001513c:	fe843783          	ld	a5,-24(s0)
    80015140:	fe043703          	ld	a4,-32(s0)
    80015144:	00f70463          	beq	a4,a5,8001514c <list_elem_valid+0x24>
    80015148:	4785                	li	a5,1
    8001514a:	a011                	j	8001514e <list_elem_valid+0x26>
    8001514c:	4781                	li	a5,0
    8001514e:	8b85                	andi	a5,a5,1
    80015150:	0ff7f793          	andi	a5,a5,255
}
    80015154:	853e                	mv	a0,a5
    80015156:	6462                	ld	s0,24(sp)
    80015158:	6105                	addi	sp,sp,32
    8001515a:	8082                	ret

000000008001515c <list_find_celem>:

const ListElem *list_find_celem(const List *l, uint64_t value) 
{
    8001515c:	7179                	addi	sp,sp,-48
    8001515e:	f406                	sd	ra,40(sp)
    80015160:	f022                	sd	s0,32(sp)
    80015162:	1800                	addi	s0,sp,48
    80015164:	fca43c23          	sd	a0,-40(s0)
    80015168:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e;
    list_for_ceach(l, e) 
    8001516c:	fd843503          	ld	a0,-40(s0)
    80015170:	0be000ef          	jal	ra,8001522e <list_celem_start_ascending>
    80015174:	fea43423          	sd	a0,-24(s0)
    80015178:	a00d                	j	8001519a <list_find_celem+0x3e>
    {
        if (e->value == value) {
    8001517a:	fe843783          	ld	a5,-24(s0)
    8001517e:	639c                	ld	a5,0(a5)
    80015180:	fd043703          	ld	a4,-48(s0)
    80015184:	00f71563          	bne	a4,a5,8001518e <list_find_celem+0x32>
            return e;
    80015188:	fe843783          	ld	a5,-24(s0)
    8001518c:	a005                	j	800151ac <list_find_celem+0x50>
    list_for_ceach(l, e) 
    8001518e:	fe843503          	ld	a0,-24(s0)
    80015192:	0e4000ef          	jal	ra,80015276 <list_celem_prev>
    80015196:	fea43423          	sd	a0,-24(s0)
    8001519a:	fe843583          	ld	a1,-24(s0)
    8001519e:	fd843503          	ld	a0,-40(s0)
    800151a2:	f87ff0ef          	jal	ra,80015128 <list_elem_valid>
    800151a6:	87aa                	mv	a5,a0
    800151a8:	fbe9                	bnez	a5,8001517a <list_find_celem+0x1e>
        }
    }
    return NULL;
    800151aa:	4781                	li	a5,0
}
    800151ac:	853e                	mv	a0,a5
    800151ae:	70a2                	ld	ra,40(sp)
    800151b0:	7402                	ld	s0,32(sp)
    800151b2:	6145                	addi	sp,sp,48
    800151b4:	8082                	ret

00000000800151b6 <list_elem_start_ascending>:

ListElem *list_elem_start_ascending(List *l)
{
    800151b6:	1101                	addi	sp,sp,-32
    800151b8:	ec22                	sd	s0,24(sp)
    800151ba:	1000                	addi	s0,sp,32
    800151bc:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    800151c0:	fe843783          	ld	a5,-24(s0)
    800151c4:	6b9c                	ld	a5,16(a5)
}
    800151c6:	853e                	mv	a0,a5
    800151c8:	6462                	ld	s0,24(sp)
    800151ca:	6105                	addi	sp,sp,32
    800151cc:	8082                	ret

00000000800151ce <list_elem_start_descending>:

ListElem *list_elem_start_descending(List *l)
{
    800151ce:	1101                	addi	sp,sp,-32
    800151d0:	ec22                	sd	s0,24(sp)
    800151d2:	1000                	addi	s0,sp,32
    800151d4:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    800151d8:	fe843783          	ld	a5,-24(s0)
    800151dc:	679c                	ld	a5,8(a5)
}
    800151de:	853e                	mv	a0,a5
    800151e0:	6462                	ld	s0,24(sp)
    800151e2:	6105                	addi	sp,sp,32
    800151e4:	8082                	ret

00000000800151e6 <list_elem_next>:

ListElem *list_elem_next(ListElem *e)
{
    800151e6:	1101                	addi	sp,sp,-32
    800151e8:	ec22                	sd	s0,24(sp)
    800151ea:	1000                	addi	s0,sp,32
    800151ec:	fea43423          	sd	a0,-24(s0)
    return e->next;
    800151f0:	fe843783          	ld	a5,-24(s0)
    800151f4:	679c                	ld	a5,8(a5)
}
    800151f6:	853e                	mv	a0,a5
    800151f8:	6462                	ld	s0,24(sp)
    800151fa:	6105                	addi	sp,sp,32
    800151fc:	8082                	ret

00000000800151fe <list_elem_prev>:

ListElem *list_elem_prev(ListElem *e)
{
    800151fe:	1101                	addi	sp,sp,-32
    80015200:	ec22                	sd	s0,24(sp)
    80015202:	1000                	addi	s0,sp,32
    80015204:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    80015208:	fe843783          	ld	a5,-24(s0)
    8001520c:	6b9c                	ld	a5,16(a5)
}
    8001520e:	853e                	mv	a0,a5
    80015210:	6462                	ld	s0,24(sp)
    80015212:	6105                	addi	sp,sp,32
    80015214:	8082                	ret

0000000080015216 <list_elem_value>:

uint64_t list_elem_value(const ListElem *e)
{
    80015216:	1101                	addi	sp,sp,-32
    80015218:	ec22                	sd	s0,24(sp)
    8001521a:	1000                	addi	s0,sp,32
    8001521c:	fea43423          	sd	a0,-24(s0)
    return e->value;
    80015220:	fe843783          	ld	a5,-24(s0)
    80015224:	639c                	ld	a5,0(a5)
}
    80015226:	853e                	mv	a0,a5
    80015228:	6462                	ld	s0,24(sp)
    8001522a:	6105                	addi	sp,sp,32
    8001522c:	8082                	ret

000000008001522e <list_celem_start_ascending>:

const ListElem *list_celem_start_ascending(const List *l) {
    8001522e:	1101                	addi	sp,sp,-32
    80015230:	ec22                	sd	s0,24(sp)
    80015232:	1000                	addi	s0,sp,32
    80015234:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    80015238:	fe843783          	ld	a5,-24(s0)
    8001523c:	6b9c                	ld	a5,16(a5)
}
    8001523e:	853e                	mv	a0,a5
    80015240:	6462                	ld	s0,24(sp)
    80015242:	6105                	addi	sp,sp,32
    80015244:	8082                	ret

0000000080015246 <list_celem_start_descending>:
const ListElem *list_celem_start_descending(const List *l) {
    80015246:	1101                	addi	sp,sp,-32
    80015248:	ec22                	sd	s0,24(sp)
    8001524a:	1000                	addi	s0,sp,32
    8001524c:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    80015250:	fe843783          	ld	a5,-24(s0)
    80015254:	679c                	ld	a5,8(a5)
}
    80015256:	853e                	mv	a0,a5
    80015258:	6462                	ld	s0,24(sp)
    8001525a:	6105                	addi	sp,sp,32
    8001525c:	8082                	ret

000000008001525e <list_celem_next>:
const ListElem *list_celem_next(const ListElem *e) {
    8001525e:	1101                	addi	sp,sp,-32
    80015260:	ec22                	sd	s0,24(sp)
    80015262:	1000                	addi	s0,sp,32
    80015264:	fea43423          	sd	a0,-24(s0)
    return e->next;
    80015268:	fe843783          	ld	a5,-24(s0)
    8001526c:	679c                	ld	a5,8(a5)
}
    8001526e:	853e                	mv	a0,a5
    80015270:	6462                	ld	s0,24(sp)
    80015272:	6105                	addi	sp,sp,32
    80015274:	8082                	ret

0000000080015276 <list_celem_prev>:
const ListElem *list_celem_prev(const ListElem *e) {
    80015276:	1101                	addi	sp,sp,-32
    80015278:	ec22                	sd	s0,24(sp)
    8001527a:	1000                	addi	s0,sp,32
    8001527c:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    80015280:	fe843783          	ld	a5,-24(s0)
    80015284:	6b9c                	ld	a5,16(a5)
}
    80015286:	853e                	mv	a0,a5
    80015288:	6462                	ld	s0,24(sp)
    8001528a:	6105                	addi	sp,sp,32
    8001528c:	8082                	ret

000000008001528e <list_sort_signed_long_comparator_ascending>:

// Default list comparators
LIST_COMPARATOR(list_sort_signed_long_comparator_ascending)
{
    8001528e:	1101                	addi	sp,sp,-32
    80015290:	ec22                	sd	s0,24(sp)
    80015292:	1000                	addi	s0,sp,32
    80015294:	fea43423          	sd	a0,-24(s0)
    80015298:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    8001529c:	fe843703          	ld	a4,-24(s0)
    800152a0:	fe043783          	ld	a5,-32(s0)
    800152a4:	00e7a7b3          	slt	a5,a5,a4
    800152a8:	0017c793          	xori	a5,a5,1
    800152ac:	0ff7f793          	andi	a5,a5,255
}
    800152b0:	853e                	mv	a0,a5
    800152b2:	6462                	ld	s0,24(sp)
    800152b4:	6105                	addi	sp,sp,32
    800152b6:	8082                	ret

00000000800152b8 <list_sort_signed_long_comparator_descending>:
LIST_COMPARATOR(list_sort_signed_long_comparator_descending)
{
    800152b8:	1101                	addi	sp,sp,-32
    800152ba:	ec22                	sd	s0,24(sp)
    800152bc:	1000                	addi	s0,sp,32
    800152be:	fea43423          	sd	a0,-24(s0)
    800152c2:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    800152c6:	fe843703          	ld	a4,-24(s0)
    800152ca:	fe043783          	ld	a5,-32(s0)
    800152ce:	00f727b3          	slt	a5,a4,a5
    800152d2:	0017c793          	xori	a5,a5,1
    800152d6:	0ff7f793          	andi	a5,a5,255
}
    800152da:	853e                	mv	a0,a5
    800152dc:	6462                	ld	s0,24(sp)
    800152de:	6105                	addi	sp,sp,32
    800152e0:	8082                	ret

00000000800152e2 <list_sort_unsigned_long_comparator_ascending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_ascending)
{
    800152e2:	1101                	addi	sp,sp,-32
    800152e4:	ec22                	sd	s0,24(sp)
    800152e6:	1000                	addi	s0,sp,32
    800152e8:	fea43423          	sd	a0,-24(s0)
    800152ec:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    800152f0:	fe843703          	ld	a4,-24(s0)
    800152f4:	fe043783          	ld	a5,-32(s0)
    800152f8:	00e7b7b3          	sltu	a5,a5,a4
    800152fc:	0017c793          	xori	a5,a5,1
    80015300:	0ff7f793          	andi	a5,a5,255
}
    80015304:	853e                	mv	a0,a5
    80015306:	6462                	ld	s0,24(sp)
    80015308:	6105                	addi	sp,sp,32
    8001530a:	8082                	ret

000000008001530c <list_sort_unsigned_long_comparator_descending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_descending)
{
    8001530c:	1101                	addi	sp,sp,-32
    8001530e:	ec22                	sd	s0,24(sp)
    80015310:	1000                	addi	s0,sp,32
    80015312:	fea43423          	sd	a0,-24(s0)
    80015316:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    8001531a:	fe843703          	ld	a4,-24(s0)
    8001531e:	fe043783          	ld	a5,-32(s0)
    80015322:	00f737b3          	sltu	a5,a4,a5
    80015326:	0017c793          	xori	a5,a5,1
    8001532a:	0ff7f793          	andi	a5,a5,255
}
    8001532e:	853e                	mv	a0,a5
    80015330:	6462                	ld	s0,24(sp)
    80015332:	6105                	addi	sp,sp,32
    80015334:	8082                	ret

0000000080015336 <list_sort_string_comparator_ascending>:
LIST_COMPARATOR(list_sort_string_comparator_ascending)
{
    80015336:	1101                	addi	sp,sp,-32
    80015338:	ec06                	sd	ra,24(sp)
    8001533a:	e822                	sd	s0,16(sp)
    8001533c:	1000                	addi	s0,sp,32
    8001533e:	fea43423          	sd	a0,-24(s0)
    80015342:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    80015346:	fe843783          	ld	a5,-24(s0)
    8001534a:	fe043703          	ld	a4,-32(s0)
    8001534e:	85ba                	mv	a1,a4
    80015350:	853e                	mv	a0,a5
    80015352:	4e0000ef          	jal	ra,80015832 <strcmp>
    80015356:	87aa                	mv	a5,a0
    80015358:	0017a793          	slti	a5,a5,1
    8001535c:	0ff7f793          	andi	a5,a5,255
}
    80015360:	853e                	mv	a0,a5
    80015362:	60e2                	ld	ra,24(sp)
    80015364:	6442                	ld	s0,16(sp)
    80015366:	6105                	addi	sp,sp,32
    80015368:	8082                	ret

000000008001536a <list_sort_string_comparator_descending>:
LIST_COMPARATOR(list_sort_string_comparator_descending)
{
    8001536a:	1101                	addi	sp,sp,-32
    8001536c:	ec06                	sd	ra,24(sp)
    8001536e:	e822                	sd	s0,16(sp)
    80015370:	1000                	addi	s0,sp,32
    80015372:	fea43423          	sd	a0,-24(s0)
    80015376:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    8001537a:	fe843783          	ld	a5,-24(s0)
    8001537e:	fe043703          	ld	a4,-32(s0)
    80015382:	85ba                	mv	a1,a4
    80015384:	853e                	mv	a0,a5
    80015386:	4ac000ef          	jal	ra,80015832 <strcmp>
    8001538a:	87aa                	mv	a5,a0
    8001538c:	fff7c793          	not	a5,a5
    80015390:	01f7d79b          	srliw	a5,a5,0x1f
    80015394:	0ff7f793          	andi	a5,a5,255
}
    80015398:	853e                	mv	a0,a5
    8001539a:	60e2                	ld	ra,24(sp)
    8001539c:	6442                	ld	s0,16(sp)
    8001539e:	6105                	addi	sp,sp,32
    800153a0:	8082                	ret

00000000800153a2 <memset>:
#include <alloc.h>
#include <stdint.h>
#include <util.h>

void *memset(void *dst, char data, int size)
{
    800153a2:	715d                	addi	sp,sp,-80
    800153a4:	e4a2                	sd	s0,72(sp)
    800153a6:	0880                	addi	s0,sp,80
    800153a8:	faa43c23          	sd	a0,-72(s0)
    800153ac:	87ae                	mv	a5,a1
    800153ae:	8732                	mv	a4,a2
    800153b0:	faf40ba3          	sb	a5,-73(s0)
    800153b4:	87ba                	mv	a5,a4
    800153b6:	faf42823          	sw	a5,-80(s0)
    int64_t i;
    long *ldst = (long *)dst;
    800153ba:	fb843783          	ld	a5,-72(s0)
    800153be:	fef43023          	sd	a5,-32(s0)
    char *cdst;
    char l[]              = {data, data, data, data, data, data, data, data};
    800153c2:	fb744783          	lbu	a5,-73(s0)
    800153c6:	fcf40423          	sb	a5,-56(s0)
    800153ca:	fb744783          	lbu	a5,-73(s0)
    800153ce:	fcf404a3          	sb	a5,-55(s0)
    800153d2:	fb744783          	lbu	a5,-73(s0)
    800153d6:	fcf40523          	sb	a5,-54(s0)
    800153da:	fb744783          	lbu	a5,-73(s0)
    800153de:	fcf405a3          	sb	a5,-53(s0)
    800153e2:	fb744783          	lbu	a5,-73(s0)
    800153e6:	fcf40623          	sb	a5,-52(s0)
    800153ea:	fb744783          	lbu	a5,-73(s0)
    800153ee:	fcf406a3          	sb	a5,-51(s0)
    800153f2:	fb744783          	lbu	a5,-73(s0)
    800153f6:	fcf40723          	sb	a5,-50(s0)
    800153fa:	fb744783          	lbu	a5,-73(s0)
    800153fe:	fcf407a3          	sb	a5,-49(s0)

    int num_8_byte_copies = size / 8;
    80015402:	fb042783          	lw	a5,-80(s0)
    80015406:	41f7d71b          	sraiw	a4,a5,0x1f
    8001540a:	01d7571b          	srliw	a4,a4,0x1d
    8001540e:	9fb9                	addw	a5,a5,a4
    80015410:	4037d79b          	sraiw	a5,a5,0x3
    80015414:	fcf42a23          	sw	a5,-44(s0)
    int num_1_byte_copies = size % 8;
    80015418:	fb042703          	lw	a4,-80(s0)
    8001541c:	41f7579b          	sraiw	a5,a4,0x1f
    80015420:	01d7d79b          	srliw	a5,a5,0x1d
    80015424:	9f3d                	addw	a4,a4,a5
    80015426:	8b1d                	andi	a4,a4,7
    80015428:	40f707bb          	subw	a5,a4,a5
    8001542c:	fcf42823          	sw	a5,-48(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    80015430:	fe043423          	sd	zero,-24(s0)
    80015434:	a005                	j	80015454 <memset+0xb2>
        *ldst++ = *((long *)l);
    80015436:	fc840713          	addi	a4,s0,-56
    8001543a:	fe043783          	ld	a5,-32(s0)
    8001543e:	00878693          	addi	a3,a5,8
    80015442:	fed43023          	sd	a3,-32(s0)
    80015446:	6318                	ld	a4,0(a4)
    80015448:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    8001544a:	fe843783          	ld	a5,-24(s0)
    8001544e:	0785                	addi	a5,a5,1
    80015450:	fef43423          	sd	a5,-24(s0)
    80015454:	fd442783          	lw	a5,-44(s0)
    80015458:	fe843703          	ld	a4,-24(s0)
    8001545c:	fcf74de3          	blt	a4,a5,80015436 <memset+0x94>
    }

    cdst = (char *)ldst;
    80015460:	fe043783          	ld	a5,-32(s0)
    80015464:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    80015468:	fe043423          	sd	zero,-24(s0)
    8001546c:	a005                	j	8001548c <memset+0xea>
        *cdst++ = data;
    8001546e:	fd843783          	ld	a5,-40(s0)
    80015472:	00178713          	addi	a4,a5,1
    80015476:	fce43c23          	sd	a4,-40(s0)
    8001547a:	fb744703          	lbu	a4,-73(s0)
    8001547e:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    80015482:	fe843783          	ld	a5,-24(s0)
    80015486:	0785                	addi	a5,a5,1
    80015488:	fef43423          	sd	a5,-24(s0)
    8001548c:	fd042783          	lw	a5,-48(s0)
    80015490:	fe843703          	ld	a4,-24(s0)
    80015494:	fcf74de3          	blt	a4,a5,8001546e <memset+0xcc>
    }

    return dst;
    80015498:	fb843783          	ld	a5,-72(s0)
}
    8001549c:	853e                	mv	a0,a5
    8001549e:	6426                	ld	s0,72(sp)
    800154a0:	6161                	addi	sp,sp,80
    800154a2:	8082                	ret

00000000800154a4 <memcpy>:

void *memcpy(void *dst, const void *src, int size)
{
    800154a4:	711d                	addi	sp,sp,-96
    800154a6:	eca2                	sd	s0,88(sp)
    800154a8:	1080                	addi	s0,sp,96
    800154aa:	faa43c23          	sd	a0,-72(s0)
    800154ae:	fab43823          	sd	a1,-80(s0)
    800154b2:	87b2                	mv	a5,a2
    800154b4:	faf42623          	sw	a5,-84(s0)
    int i;
    char *cdst;
    const char *csrc;
    long *ldst            = (long *)dst;
    800154b8:	fb843783          	ld	a5,-72(s0)
    800154bc:	fcf43823          	sd	a5,-48(s0)
    const long *lsrc      = (long *)src;
    800154c0:	fb043783          	ld	a5,-80(s0)
    800154c4:	fcf43423          	sd	a5,-56(s0)

    int num_8_byte_copies = size / 8;
    800154c8:	fac42783          	lw	a5,-84(s0)
    800154cc:	41f7d71b          	sraiw	a4,a5,0x1f
    800154d0:	01d7571b          	srliw	a4,a4,0x1d
    800154d4:	9fb9                	addw	a5,a5,a4
    800154d6:	4037d79b          	sraiw	a5,a5,0x3
    800154da:	fcf42223          	sw	a5,-60(s0)
    int num_1_byte_copies = size % 8;
    800154de:	fac42703          	lw	a4,-84(s0)
    800154e2:	41f7579b          	sraiw	a5,a4,0x1f
    800154e6:	01d7d79b          	srliw	a5,a5,0x1d
    800154ea:	9f3d                	addw	a4,a4,a5
    800154ec:	8b1d                	andi	a4,a4,7
    800154ee:	40f707bb          	subw	a5,a4,a5
    800154f2:	fcf42023          	sw	a5,-64(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    800154f6:	fe042623          	sw	zero,-20(s0)
    800154fa:	a025                	j	80015522 <memcpy+0x7e>
        *ldst++ = *lsrc++;
    800154fc:	fc843703          	ld	a4,-56(s0)
    80015500:	00870793          	addi	a5,a4,8
    80015504:	fcf43423          	sd	a5,-56(s0)
    80015508:	fd043783          	ld	a5,-48(s0)
    8001550c:	00878693          	addi	a3,a5,8
    80015510:	fcd43823          	sd	a3,-48(s0)
    80015514:	6318                	ld	a4,0(a4)
    80015516:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    80015518:	fec42783          	lw	a5,-20(s0)
    8001551c:	2785                	addiw	a5,a5,1
    8001551e:	fef42623          	sw	a5,-20(s0)
    80015522:	fec42703          	lw	a4,-20(s0)
    80015526:	fc442783          	lw	a5,-60(s0)
    8001552a:	2701                	sext.w	a4,a4
    8001552c:	2781                	sext.w	a5,a5
    8001552e:	fcf747e3          	blt	a4,a5,800154fc <memcpy+0x58>
    }

    cdst = (char *)ldst;
    80015532:	fd043783          	ld	a5,-48(s0)
    80015536:	fef43023          	sd	a5,-32(s0)
    csrc = (char *)lsrc;
    8001553a:	fc843783          	ld	a5,-56(s0)
    8001553e:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    80015542:	fe042623          	sw	zero,-20(s0)
    80015546:	a035                	j	80015572 <memcpy+0xce>
        *cdst++ = *csrc++;
    80015548:	fd843703          	ld	a4,-40(s0)
    8001554c:	00170793          	addi	a5,a4,1
    80015550:	fcf43c23          	sd	a5,-40(s0)
    80015554:	fe043783          	ld	a5,-32(s0)
    80015558:	00178693          	addi	a3,a5,1
    8001555c:	fed43023          	sd	a3,-32(s0)
    80015560:	00074703          	lbu	a4,0(a4)
    80015564:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    80015568:	fec42783          	lw	a5,-20(s0)
    8001556c:	2785                	addiw	a5,a5,1
    8001556e:	fef42623          	sw	a5,-20(s0)
    80015572:	fec42703          	lw	a4,-20(s0)
    80015576:	fc042783          	lw	a5,-64(s0)
    8001557a:	2701                	sext.w	a4,a4
    8001557c:	2781                	sext.w	a5,a5
    8001557e:	fcf745e3          	blt	a4,a5,80015548 <memcpy+0xa4>
    }

    return dst;
    80015582:	fb843783          	ld	a5,-72(s0)
}
    80015586:	853e                	mv	a0,a5
    80015588:	6466                	ld	s0,88(sp)
    8001558a:	6125                	addi	sp,sp,96
    8001558c:	8082                	ret

000000008001558e <memmove>:

void *memmove(void *_dst, const void *_src, int n)
{
    8001558e:	7139                	addi	sp,sp,-64
    80015590:	fc22                	sd	s0,56(sp)
    80015592:	0080                	addi	s0,sp,64
    80015594:	fca43c23          	sd	a0,-40(s0)
    80015598:	fcb43823          	sd	a1,-48(s0)
    8001559c:	87b2                	mv	a5,a2
    8001559e:	fcf42623          	sw	a5,-52(s0)
    const char *src = _src;
    800155a2:	fd043783          	ld	a5,-48(s0)
    800155a6:	fef43423          	sd	a5,-24(s0)
    char *dst       = _dst;
    800155aa:	fd843783          	ld	a5,-40(s0)
    800155ae:	fef43023          	sd	a5,-32(s0)

    if (n == 0)
    800155b2:	fcc42783          	lw	a5,-52(s0)
    800155b6:	2781                	sext.w	a5,a5
    800155b8:	e781                	bnez	a5,800155c0 <memmove+0x32>
        return _dst;
    800155ba:	fd843783          	ld	a5,-40(s0)
    800155be:	a845                	j	8001566e <memmove+0xe0>

    if (src < dst && src + n > dst) {
    800155c0:	fe843703          	ld	a4,-24(s0)
    800155c4:	fe043783          	ld	a5,-32(s0)
    800155c8:	08f77c63          	bgeu	a4,a5,80015660 <memmove+0xd2>
    800155cc:	fcc42783          	lw	a5,-52(s0)
    800155d0:	fe843703          	ld	a4,-24(s0)
    800155d4:	97ba                	add	a5,a5,a4
    800155d6:	fe043703          	ld	a4,-32(s0)
    800155da:	08f77363          	bgeu	a4,a5,80015660 <memmove+0xd2>
        src += n;
    800155de:	fcc42783          	lw	a5,-52(s0)
    800155e2:	fe843703          	ld	a4,-24(s0)
    800155e6:	97ba                	add	a5,a5,a4
    800155e8:	fef43423          	sd	a5,-24(s0)
        dst += n;
    800155ec:	fcc42783          	lw	a5,-52(s0)
    800155f0:	fe043703          	ld	a4,-32(s0)
    800155f4:	97ba                	add	a5,a5,a4
    800155f6:	fef43023          	sd	a5,-32(s0)
        for (; n > 0; n -= 1) {
    800155fa:	a805                	j	8001562a <memmove+0x9c>
            *--dst = *--src;
    800155fc:	fe843783          	ld	a5,-24(s0)
    80015600:	17fd                	addi	a5,a5,-1
    80015602:	fef43423          	sd	a5,-24(s0)
    80015606:	fe043783          	ld	a5,-32(s0)
    8001560a:	17fd                	addi	a5,a5,-1
    8001560c:	fef43023          	sd	a5,-32(s0)
    80015610:	fe843783          	ld	a5,-24(s0)
    80015614:	0007c703          	lbu	a4,0(a5)
    80015618:	fe043783          	ld	a5,-32(s0)
    8001561c:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    80015620:	fcc42783          	lw	a5,-52(s0)
    80015624:	37fd                	addiw	a5,a5,-1
    80015626:	fcf42623          	sw	a5,-52(s0)
    8001562a:	fcc42783          	lw	a5,-52(s0)
    8001562e:	2781                	sext.w	a5,a5
    80015630:	fcf046e3          	bgtz	a5,800155fc <memmove+0x6e>
    if (src < dst && src + n > dst) {
    80015634:	a81d                	j	8001566a <memmove+0xdc>
        }
    }
    else {
        for (; n > 0; n -= 1) {
            *dst++ = *src++;
    80015636:	fe843703          	ld	a4,-24(s0)
    8001563a:	00170793          	addi	a5,a4,1
    8001563e:	fef43423          	sd	a5,-24(s0)
    80015642:	fe043783          	ld	a5,-32(s0)
    80015646:	00178693          	addi	a3,a5,1
    8001564a:	fed43023          	sd	a3,-32(s0)
    8001564e:	00074703          	lbu	a4,0(a4)
    80015652:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    80015656:	fcc42783          	lw	a5,-52(s0)
    8001565a:	37fd                	addiw	a5,a5,-1
    8001565c:	fcf42623          	sw	a5,-52(s0)
    80015660:	fcc42783          	lw	a5,-52(s0)
    80015664:	2781                	sext.w	a5,a5
    80015666:	fcf048e3          	bgtz	a5,80015636 <memmove+0xa8>
        }
    }

    return _dst;
    8001566a:	fd843783          	ld	a5,-40(s0)
}
    8001566e:	853e                	mv	a0,a5
    80015670:	7462                	ld	s0,56(sp)
    80015672:	6121                	addi	sp,sp,64
    80015674:	8082                	ret

0000000080015676 <memcmp>:

int memcmp(const void *haystack, const void *needle, int size)
{
    80015676:	715d                	addi	sp,sp,-80
    80015678:	e4a2                	sd	s0,72(sp)
    8001567a:	0880                	addi	s0,sp,80
    8001567c:	fca43423          	sd	a0,-56(s0)
    80015680:	fcb43023          	sd	a1,-64(s0)
    80015684:	87b2                	mv	a5,a2
    80015686:	faf42e23          	sw	a5,-68(s0)
    const char *hay  = (char *)haystack;
    8001568a:	fc843783          	ld	a5,-56(s0)
    8001568e:	fef43023          	sd	a5,-32(s0)
    const char *need = (char *)needle;
    80015692:	fc043783          	ld	a5,-64(s0)
    80015696:	fcf43c23          	sd	a5,-40(s0)
    int i;

    for (i = 0; i < (size - 1); i++) {
    8001569a:	fe042623          	sw	zero,-20(s0)
    8001569e:	a8a1                	j	800156f6 <memcmp+0x80>
        if (hay[i] != need[i]) {
    800156a0:	fec42783          	lw	a5,-20(s0)
    800156a4:	fe043703          	ld	a4,-32(s0)
    800156a8:	97ba                	add	a5,a5,a4
    800156aa:	0007c683          	lbu	a3,0(a5)
    800156ae:	fec42783          	lw	a5,-20(s0)
    800156b2:	fd843703          	ld	a4,-40(s0)
    800156b6:	97ba                	add	a5,a5,a4
    800156b8:	0007c783          	lbu	a5,0(a5)
    800156bc:	8736                	mv	a4,a3
    800156be:	02f70763          	beq	a4,a5,800156ec <memcmp+0x76>
            return hay[i] - need[i];
    800156c2:	fec42783          	lw	a5,-20(s0)
    800156c6:	fe043703          	ld	a4,-32(s0)
    800156ca:	97ba                	add	a5,a5,a4
    800156cc:	0007c783          	lbu	a5,0(a5)
    800156d0:	0007871b          	sext.w	a4,a5
    800156d4:	fec42783          	lw	a5,-20(s0)
    800156d8:	fd843683          	ld	a3,-40(s0)
    800156dc:	97b6                	add	a5,a5,a3
    800156de:	0007c783          	lbu	a5,0(a5)
    800156e2:	2781                	sext.w	a5,a5
    800156e4:	40f707bb          	subw	a5,a4,a5
    800156e8:	2781                	sext.w	a5,a5
    800156ea:	a0a1                	j	80015732 <memcmp+0xbc>
    for (i = 0; i < (size - 1); i++) {
    800156ec:	fec42783          	lw	a5,-20(s0)
    800156f0:	2785                	addiw	a5,a5,1
    800156f2:	fef42623          	sw	a5,-20(s0)
    800156f6:	fbc42783          	lw	a5,-68(s0)
    800156fa:	37fd                	addiw	a5,a5,-1
    800156fc:	0007871b          	sext.w	a4,a5
    80015700:	fec42783          	lw	a5,-20(s0)
    80015704:	2781                	sext.w	a5,a5
    80015706:	f8e7cde3          	blt	a5,a4,800156a0 <memcmp+0x2a>
        }
    }

    return hay[i] - need[i];
    8001570a:	fec42783          	lw	a5,-20(s0)
    8001570e:	fe043703          	ld	a4,-32(s0)
    80015712:	97ba                	add	a5,a5,a4
    80015714:	0007c783          	lbu	a5,0(a5)
    80015718:	0007871b          	sext.w	a4,a5
    8001571c:	fec42783          	lw	a5,-20(s0)
    80015720:	fd843683          	ld	a3,-40(s0)
    80015724:	97b6                	add	a5,a5,a3
    80015726:	0007c783          	lbu	a5,0(a5)
    8001572a:	2781                	sext.w	a5,a5
    8001572c:	40f707bb          	subw	a5,a4,a5
    80015730:	2781                	sext.w	a5,a5
}
    80015732:	853e                	mv	a0,a5
    80015734:	6426                	ld	s0,72(sp)
    80015736:	6161                	addi	sp,sp,80
    80015738:	8082                	ret

000000008001573a <atoi>:

int atoi(const char *st)
{
    8001573a:	7139                	addi	sp,sp,-64
    8001573c:	fc22                	sd	s0,56(sp)
    8001573e:	0080                	addi	s0,sp,64
    80015740:	fca43423          	sd	a0,-56(s0)
    int r = 0;
    80015744:	fe042623          	sw	zero,-20(s0)
    int p = 1;
    80015748:	4785                	li	a5,1
    8001574a:	fef42423          	sw	a5,-24(s0)
    int i;
    int l = 0;
    8001574e:	fe042023          	sw	zero,-32(s0)
    int n = 0;
    80015752:	fc042e23          	sw	zero,-36(s0)

    if (st[0] == '-') {
    80015756:	fc843783          	ld	a5,-56(s0)
    8001575a:	0007c783          	lbu	a5,0(a5)
    8001575e:	873e                	mv	a4,a5
    80015760:	02d00793          	li	a5,45
    80015764:	02f71063          	bne	a4,a5,80015784 <atoi+0x4a>
        st++;
    80015768:	fc843783          	ld	a5,-56(s0)
    8001576c:	0785                	addi	a5,a5,1
    8001576e:	fcf43423          	sd	a5,-56(s0)
        n = 1;
    80015772:	4785                	li	a5,1
    80015774:	fcf42e23          	sw	a5,-36(s0)
    }

    while (st[l] >= '0' && st[l] <= '9')
    80015778:	a031                	j	80015784 <atoi+0x4a>
        l++;
    8001577a:	fe042783          	lw	a5,-32(s0)
    8001577e:	2785                	addiw	a5,a5,1
    80015780:	fef42023          	sw	a5,-32(s0)
    while (st[l] >= '0' && st[l] <= '9')
    80015784:	fe042783          	lw	a5,-32(s0)
    80015788:	fc843703          	ld	a4,-56(s0)
    8001578c:	97ba                	add	a5,a5,a4
    8001578e:	0007c783          	lbu	a5,0(a5)
    80015792:	873e                	mv	a4,a5
    80015794:	02f00793          	li	a5,47
    80015798:	00e7fe63          	bgeu	a5,a4,800157b4 <atoi+0x7a>
    8001579c:	fe042783          	lw	a5,-32(s0)
    800157a0:	fc843703          	ld	a4,-56(s0)
    800157a4:	97ba                	add	a5,a5,a4
    800157a6:	0007c783          	lbu	a5,0(a5)
    800157aa:	873e                	mv	a4,a5
    800157ac:	03900793          	li	a5,57
    800157b0:	fce7f5e3          	bgeu	a5,a4,8001577a <atoi+0x40>

    for (i = l - 1; i >= 0; i--) {
    800157b4:	fe042783          	lw	a5,-32(s0)
    800157b8:	37fd                	addiw	a5,a5,-1
    800157ba:	fef42223          	sw	a5,-28(s0)
    800157be:	a0a9                	j	80015808 <atoi+0xce>
        r += p * (st[i] - '0');
    800157c0:	fe442783          	lw	a5,-28(s0)
    800157c4:	fc843703          	ld	a4,-56(s0)
    800157c8:	97ba                	add	a5,a5,a4
    800157ca:	0007c783          	lbu	a5,0(a5)
    800157ce:	2781                	sext.w	a5,a5
    800157d0:	fd07879b          	addiw	a5,a5,-48
    800157d4:	2781                	sext.w	a5,a5
    800157d6:	fe842703          	lw	a4,-24(s0)
    800157da:	02f707bb          	mulw	a5,a4,a5
    800157de:	2781                	sext.w	a5,a5
    800157e0:	fec42703          	lw	a4,-20(s0)
    800157e4:	9fb9                	addw	a5,a5,a4
    800157e6:	fef42623          	sw	a5,-20(s0)
        p *= 10;
    800157ea:	fe842703          	lw	a4,-24(s0)
    800157ee:	87ba                	mv	a5,a4
    800157f0:	0027979b          	slliw	a5,a5,0x2
    800157f4:	9fb9                	addw	a5,a5,a4
    800157f6:	0017979b          	slliw	a5,a5,0x1
    800157fa:	fef42423          	sw	a5,-24(s0)
    for (i = l - 1; i >= 0; i--) {
    800157fe:	fe442783          	lw	a5,-28(s0)
    80015802:	37fd                	addiw	a5,a5,-1
    80015804:	fef42223          	sw	a5,-28(s0)
    80015808:	fe442783          	lw	a5,-28(s0)
    8001580c:	2781                	sext.w	a5,a5
    8001580e:	fa07d9e3          	bgez	a5,800157c0 <atoi+0x86>
    }

    return (n ? -r : r);
    80015812:	fdc42783          	lw	a5,-36(s0)
    80015816:	2781                	sext.w	a5,a5
    80015818:	c799                	beqz	a5,80015826 <atoi+0xec>
    8001581a:	fec42783          	lw	a5,-20(s0)
    8001581e:	40f007bb          	negw	a5,a5
    80015822:	2781                	sext.w	a5,a5
    80015824:	a019                	j	8001582a <atoi+0xf0>
    80015826:	fec42783          	lw	a5,-20(s0)
}
    8001582a:	853e                	mv	a0,a5
    8001582c:	7462                	ld	s0,56(sp)
    8001582e:	6121                	addi	sp,sp,64
    80015830:	8082                	ret

0000000080015832 <strcmp>:

int strcmp(const char *l, const char *r)
{
    80015832:	7139                	addi	sp,sp,-64
    80015834:	fc22                	sd	s0,56(sp)
    80015836:	0080                	addi	s0,sp,64
    80015838:	fca43423          	sd	a0,-56(s0)
    8001583c:	fcb43023          	sd	a1,-64(s0)
    const unsigned char *s1 = (const unsigned char *)l;
    80015840:	fc843783          	ld	a5,-56(s0)
    80015844:	fef43423          	sd	a5,-24(s0)
    const unsigned char *s2 = (const unsigned char *)r;
    80015848:	fc043783          	ld	a5,-64(s0)
    8001584c:	fef43023          	sd	a5,-32(s0)
    unsigned int c1, c2;

    do {
        c1 = (unsigned char)*s1++;
    80015850:	fe843783          	ld	a5,-24(s0)
    80015854:	00178713          	addi	a4,a5,1
    80015858:	fee43423          	sd	a4,-24(s0)
    8001585c:	0007c783          	lbu	a5,0(a5)
    80015860:	fcf42e23          	sw	a5,-36(s0)
        c2 = (unsigned char)*s2++;
    80015864:	fe043783          	ld	a5,-32(s0)
    80015868:	00178713          	addi	a4,a5,1
    8001586c:	fee43023          	sd	a4,-32(s0)
    80015870:	0007c783          	lbu	a5,0(a5)
    80015874:	fcf42c23          	sw	a5,-40(s0)
        if (c1 == '\0')
    80015878:	fdc42783          	lw	a5,-36(s0)
    8001587c:	2781                	sext.w	a5,a5
    8001587e:	eb91                	bnez	a5,80015892 <strcmp+0x60>
            return c1 - c2;
    80015880:	fdc42703          	lw	a4,-36(s0)
    80015884:	fd842783          	lw	a5,-40(s0)
    80015888:	40f707bb          	subw	a5,a4,a5
    8001588c:	2781                	sext.w	a5,a5
    8001588e:	2781                	sext.w	a5,a5
    80015890:	a00d                	j	800158b2 <strcmp+0x80>
    } while (c1 == c2);
    80015892:	fdc42703          	lw	a4,-36(s0)
    80015896:	fd842783          	lw	a5,-40(s0)
    8001589a:	2701                	sext.w	a4,a4
    8001589c:	2781                	sext.w	a5,a5
    8001589e:	faf709e3          	beq	a4,a5,80015850 <strcmp+0x1e>

    return c1 - c2;
    800158a2:	fdc42703          	lw	a4,-36(s0)
    800158a6:	fd842783          	lw	a5,-40(s0)
    800158aa:	40f707bb          	subw	a5,a4,a5
    800158ae:	2781                	sext.w	a5,a5
    800158b0:	2781                	sext.w	a5,a5
}
    800158b2:	853e                	mv	a0,a5
    800158b4:	7462                	ld	s0,56(sp)
    800158b6:	6121                	addi	sp,sp,64
    800158b8:	8082                	ret

00000000800158ba <strncmp>:

int strncmp(const char *left, const char *right, int n)
{
    800158ba:	7139                	addi	sp,sp,-64
    800158bc:	fc22                	sd	s0,56(sp)
    800158be:	0080                	addi	s0,sp,64
    800158c0:	fca43c23          	sd	a0,-40(s0)
    800158c4:	fcb43823          	sd	a1,-48(s0)
    800158c8:	87b2                	mv	a5,a2
    800158ca:	fcf42623          	sw	a5,-52(s0)
    unsigned int c1 = '\0';
    800158ce:	fe042623          	sw	zero,-20(s0)
    unsigned int c2 = '\0';
    800158d2:	fe042423          	sw	zero,-24(s0)

    if (n >= 4) {
    800158d6:	fcc42783          	lw	a5,-52(s0)
    800158da:	0007871b          	sext.w	a4,a5
    800158de:	478d                	li	a5,3
    800158e0:	1ce7da63          	bge	a5,a4,80015ab4 <strncmp+0x1fa>
        int n4 = n >> 2;
    800158e4:	fcc42783          	lw	a5,-52(s0)
    800158e8:	4027d79b          	sraiw	a5,a5,0x2
    800158ec:	fef42223          	sw	a5,-28(s0)
        do {
            c1 = (unsigned char)*left++;
    800158f0:	fd843783          	ld	a5,-40(s0)
    800158f4:	00178713          	addi	a4,a5,1
    800158f8:	fce43c23          	sd	a4,-40(s0)
    800158fc:	0007c783          	lbu	a5,0(a5)
    80015900:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80015904:	fd043783          	ld	a5,-48(s0)
    80015908:	00178713          	addi	a4,a5,1
    8001590c:	fce43823          	sd	a4,-48(s0)
    80015910:	0007c783          	lbu	a5,0(a5)
    80015914:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    80015918:	fec42783          	lw	a5,-20(s0)
    8001591c:	2781                	sext.w	a5,a5
    8001591e:	cb89                	beqz	a5,80015930 <strncmp+0x76>
    80015920:	fec42703          	lw	a4,-20(s0)
    80015924:	fe842783          	lw	a5,-24(s0)
    80015928:	2701                	sext.w	a4,a4
    8001592a:	2781                	sext.w	a5,a5
    8001592c:	00f70b63          	beq	a4,a5,80015942 <strncmp+0x88>
                return c1 - c2;
    80015930:	fec42703          	lw	a4,-20(s0)
    80015934:	fe842783          	lw	a5,-24(s0)
    80015938:	40f707bb          	subw	a5,a4,a5
    8001593c:	2781                	sext.w	a5,a5
    8001593e:	2781                	sext.w	a5,a5
    80015940:	a279                	j	80015ace <strncmp+0x214>
            }

            c1 = (unsigned char)*left++;
    80015942:	fd843783          	ld	a5,-40(s0)
    80015946:	00178713          	addi	a4,a5,1
    8001594a:	fce43c23          	sd	a4,-40(s0)
    8001594e:	0007c783          	lbu	a5,0(a5)
    80015952:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80015956:	fd043783          	ld	a5,-48(s0)
    8001595a:	00178713          	addi	a4,a5,1
    8001595e:	fce43823          	sd	a4,-48(s0)
    80015962:	0007c783          	lbu	a5,0(a5)
    80015966:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    8001596a:	fec42783          	lw	a5,-20(s0)
    8001596e:	2781                	sext.w	a5,a5
    80015970:	cb89                	beqz	a5,80015982 <strncmp+0xc8>
    80015972:	fec42703          	lw	a4,-20(s0)
    80015976:	fe842783          	lw	a5,-24(s0)
    8001597a:	2701                	sext.w	a4,a4
    8001597c:	2781                	sext.w	a5,a5
    8001597e:	00f70b63          	beq	a4,a5,80015994 <strncmp+0xda>
                return c1 - c2;
    80015982:	fec42703          	lw	a4,-20(s0)
    80015986:	fe842783          	lw	a5,-24(s0)
    8001598a:	40f707bb          	subw	a5,a4,a5
    8001598e:	2781                	sext.w	a5,a5
    80015990:	2781                	sext.w	a5,a5
    80015992:	aa35                	j	80015ace <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    80015994:	fd843783          	ld	a5,-40(s0)
    80015998:	00178713          	addi	a4,a5,1
    8001599c:	fce43c23          	sd	a4,-40(s0)
    800159a0:	0007c783          	lbu	a5,0(a5)
    800159a4:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    800159a8:	fd043783          	ld	a5,-48(s0)
    800159ac:	00178713          	addi	a4,a5,1
    800159b0:	fce43823          	sd	a4,-48(s0)
    800159b4:	0007c783          	lbu	a5,0(a5)
    800159b8:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    800159bc:	fec42783          	lw	a5,-20(s0)
    800159c0:	2781                	sext.w	a5,a5
    800159c2:	cb89                	beqz	a5,800159d4 <strncmp+0x11a>
    800159c4:	fec42703          	lw	a4,-20(s0)
    800159c8:	fe842783          	lw	a5,-24(s0)
    800159cc:	2701                	sext.w	a4,a4
    800159ce:	2781                	sext.w	a5,a5
    800159d0:	00f70b63          	beq	a4,a5,800159e6 <strncmp+0x12c>
                return c1 - c2;
    800159d4:	fec42703          	lw	a4,-20(s0)
    800159d8:	fe842783          	lw	a5,-24(s0)
    800159dc:	40f707bb          	subw	a5,a4,a5
    800159e0:	2781                	sext.w	a5,a5
    800159e2:	2781                	sext.w	a5,a5
    800159e4:	a0ed                	j	80015ace <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    800159e6:	fd843783          	ld	a5,-40(s0)
    800159ea:	00178713          	addi	a4,a5,1
    800159ee:	fce43c23          	sd	a4,-40(s0)
    800159f2:	0007c783          	lbu	a5,0(a5)
    800159f6:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    800159fa:	fd043783          	ld	a5,-48(s0)
    800159fe:	00178713          	addi	a4,a5,1
    80015a02:	fce43823          	sd	a4,-48(s0)
    80015a06:	0007c783          	lbu	a5,0(a5)
    80015a0a:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    80015a0e:	fec42783          	lw	a5,-20(s0)
    80015a12:	2781                	sext.w	a5,a5
    80015a14:	cb89                	beqz	a5,80015a26 <strncmp+0x16c>
    80015a16:	fec42703          	lw	a4,-20(s0)
    80015a1a:	fe842783          	lw	a5,-24(s0)
    80015a1e:	2701                	sext.w	a4,a4
    80015a20:	2781                	sext.w	a5,a5
    80015a22:	00f70b63          	beq	a4,a5,80015a38 <strncmp+0x17e>
                return c1 - c2;
    80015a26:	fec42703          	lw	a4,-20(s0)
    80015a2a:	fe842783          	lw	a5,-24(s0)
    80015a2e:	40f707bb          	subw	a5,a4,a5
    80015a32:	2781                	sext.w	a5,a5
    80015a34:	2781                	sext.w	a5,a5
    80015a36:	a861                	j	80015ace <strncmp+0x214>
            }
        } while (--n4 > 0);
    80015a38:	fe442783          	lw	a5,-28(s0)
    80015a3c:	37fd                	addiw	a5,a5,-1
    80015a3e:	fef42223          	sw	a5,-28(s0)
    80015a42:	fe442783          	lw	a5,-28(s0)
    80015a46:	2781                	sext.w	a5,a5
    80015a48:	eaf044e3          	bgtz	a5,800158f0 <strncmp+0x36>
        n &= 3;
    80015a4c:	fcc42783          	lw	a5,-52(s0)
    80015a50:	8b8d                	andi	a5,a5,3
    80015a52:	fcf42623          	sw	a5,-52(s0)
    }

    while (n > 0) {
    80015a56:	a8b9                	j	80015ab4 <strncmp+0x1fa>
        c1 = (unsigned char)*left++;
    80015a58:	fd843783          	ld	a5,-40(s0)
    80015a5c:	00178713          	addi	a4,a5,1
    80015a60:	fce43c23          	sd	a4,-40(s0)
    80015a64:	0007c783          	lbu	a5,0(a5)
    80015a68:	fef42623          	sw	a5,-20(s0)
        c2 = (unsigned char)*right++;
    80015a6c:	fd043783          	ld	a5,-48(s0)
    80015a70:	00178713          	addi	a4,a5,1
    80015a74:	fce43823          	sd	a4,-48(s0)
    80015a78:	0007c783          	lbu	a5,0(a5)
    80015a7c:	fef42423          	sw	a5,-24(s0)
        if (c1 == '\0' || c1 != c2)
    80015a80:	fec42783          	lw	a5,-20(s0)
    80015a84:	2781                	sext.w	a5,a5
    80015a86:	cb89                	beqz	a5,80015a98 <strncmp+0x1de>
    80015a88:	fec42703          	lw	a4,-20(s0)
    80015a8c:	fe842783          	lw	a5,-24(s0)
    80015a90:	2701                	sext.w	a4,a4
    80015a92:	2781                	sext.w	a5,a5
    80015a94:	00f70b63          	beq	a4,a5,80015aaa <strncmp+0x1f0>
            return c1 - c2;
    80015a98:	fec42703          	lw	a4,-20(s0)
    80015a9c:	fe842783          	lw	a5,-24(s0)
    80015aa0:	40f707bb          	subw	a5,a4,a5
    80015aa4:	2781                	sext.w	a5,a5
    80015aa6:	2781                	sext.w	a5,a5
    80015aa8:	a01d                	j	80015ace <strncmp+0x214>
        n--;
    80015aaa:	fcc42783          	lw	a5,-52(s0)
    80015aae:	37fd                	addiw	a5,a5,-1
    80015ab0:	fcf42623          	sw	a5,-52(s0)
    while (n > 0) {
    80015ab4:	fcc42783          	lw	a5,-52(s0)
    80015ab8:	2781                	sext.w	a5,a5
    80015aba:	f8f04fe3          	bgtz	a5,80015a58 <strncmp+0x19e>
    }

    return c1 - c2;
    80015abe:	fec42703          	lw	a4,-20(s0)
    80015ac2:	fe842783          	lw	a5,-24(s0)
    80015ac6:	40f707bb          	subw	a5,a4,a5
    80015aca:	2781                	sext.w	a5,a5
    80015acc:	2781                	sext.w	a5,a5
}
    80015ace:	853e                	mv	a0,a5
    80015ad0:	7462                	ld	s0,56(sp)
    80015ad2:	6121                	addi	sp,sp,64
    80015ad4:	8082                	ret

0000000080015ad6 <strfindchr>:

int strfindchr(const char *r, char t)
{
    80015ad6:	7179                	addi	sp,sp,-48
    80015ad8:	f422                	sd	s0,40(sp)
    80015ada:	1800                	addi	s0,sp,48
    80015adc:	fca43c23          	sd	a0,-40(s0)
    80015ae0:	87ae                	mv	a5,a1
    80015ae2:	fcf40ba3          	sb	a5,-41(s0)
    int i = 0;
    80015ae6:	fe042623          	sw	zero,-20(s0)
    while (r[i] != t) {
    80015aea:	a005                	j	80015b0a <strfindchr+0x34>
        if (r[i] == '\0') {
    80015aec:	fec42783          	lw	a5,-20(s0)
    80015af0:	fd843703          	ld	a4,-40(s0)
    80015af4:	97ba                	add	a5,a5,a4
    80015af6:	0007c783          	lbu	a5,0(a5)
    80015afa:	e399                	bnez	a5,80015b00 <strfindchr+0x2a>
            return -1;
    80015afc:	57fd                	li	a5,-1
    80015afe:	a02d                	j	80015b28 <strfindchr+0x52>
        }
        i++;
    80015b00:	fec42783          	lw	a5,-20(s0)
    80015b04:	2785                	addiw	a5,a5,1
    80015b06:	fef42623          	sw	a5,-20(s0)
    while (r[i] != t) {
    80015b0a:	fec42783          	lw	a5,-20(s0)
    80015b0e:	fd843703          	ld	a4,-40(s0)
    80015b12:	97ba                	add	a5,a5,a4
    80015b14:	0007c703          	lbu	a4,0(a5)
    80015b18:	fd744783          	lbu	a5,-41(s0)
    80015b1c:	0ff7f793          	andi	a5,a5,255
    80015b20:	fce796e3          	bne	a5,a4,80015aec <strfindchr+0x16>
    }
    return i;
    80015b24:	fec42783          	lw	a5,-20(s0)
}
    80015b28:	853e                	mv	a0,a5
    80015b2a:	7422                	ld	s0,40(sp)
    80015b2c:	6145                	addi	sp,sp,48
    80015b2e:	8082                	ret

0000000080015b30 <strlen>:

int strlen(const char *s)
{
    80015b30:	7179                	addi	sp,sp,-48
    80015b32:	f422                	sd	s0,40(sp)
    80015b34:	1800                	addi	s0,sp,48
    80015b36:	fca43c23          	sd	a0,-40(s0)
    int len = 0;
    80015b3a:	fe042623          	sw	zero,-20(s0)
    while (s[len] && ++len)
    80015b3e:	0001                	nop
    80015b40:	fec42783          	lw	a5,-20(s0)
    80015b44:	fd843703          	ld	a4,-40(s0)
    80015b48:	97ba                	add	a5,a5,a4
    80015b4a:	0007c783          	lbu	a5,0(a5)
    80015b4e:	cb91                	beqz	a5,80015b62 <strlen+0x32>
    80015b50:	fec42783          	lw	a5,-20(s0)
    80015b54:	2785                	addiw	a5,a5,1
    80015b56:	fef42623          	sw	a5,-20(s0)
    80015b5a:	fec42783          	lw	a5,-20(s0)
    80015b5e:	2781                	sext.w	a5,a5
    80015b60:	f3e5                	bnez	a5,80015b40 <strlen+0x10>
        ;
    return len;
    80015b62:	fec42783          	lw	a5,-20(s0)
}
    80015b66:	853e                	mv	a0,a5
    80015b68:	7422                	ld	s0,40(sp)
    80015b6a:	6145                	addi	sp,sp,48
    80015b6c:	8082                	ret

0000000080015b6e <strcpy>:

char *strcpy(char *dest, const char *s)
{
    80015b6e:	7179                	addi	sp,sp,-48
    80015b70:	f422                	sd	s0,40(sp)
    80015b72:	1800                	addi	s0,sp,48
    80015b74:	fca43c23          	sd	a0,-40(s0)
    80015b78:	fcb43823          	sd	a1,-48(s0)
    char *o = dest;
    80015b7c:	fd843783          	ld	a5,-40(s0)
    80015b80:	fef43423          	sd	a5,-24(s0)
    while (*s) {
    80015b84:	a00d                	j	80015ba6 <strcpy+0x38>
        *dest++ = *s++;
    80015b86:	fd043703          	ld	a4,-48(s0)
    80015b8a:	00170793          	addi	a5,a4,1
    80015b8e:	fcf43823          	sd	a5,-48(s0)
    80015b92:	fd843783          	ld	a5,-40(s0)
    80015b96:	00178693          	addi	a3,a5,1
    80015b9a:	fcd43c23          	sd	a3,-40(s0)
    80015b9e:	00074703          	lbu	a4,0(a4)
    80015ba2:	00e78023          	sb	a4,0(a5)
    while (*s) {
    80015ba6:	fd043783          	ld	a5,-48(s0)
    80015baa:	0007c783          	lbu	a5,0(a5)
    80015bae:	ffe1                	bnez	a5,80015b86 <strcpy+0x18>
    }
    *dest = '\0';
    80015bb0:	fd843783          	ld	a5,-40(s0)
    80015bb4:	00078023          	sb	zero,0(a5)
    return o;
    80015bb8:	fe843783          	ld	a5,-24(s0)
}
    80015bbc:	853e                	mv	a0,a5
    80015bbe:	7422                	ld	s0,40(sp)
    80015bc0:	6145                	addi	sp,sp,48
    80015bc2:	8082                	ret

0000000080015bc4 <strncpy>:

char *strncpy(char *dest, const char *s, int n)
{
    80015bc4:	7139                	addi	sp,sp,-64
    80015bc6:	fc22                	sd	s0,56(sp)
    80015bc8:	0080                	addi	s0,sp,64
    80015bca:	fca43c23          	sd	a0,-40(s0)
    80015bce:	fcb43823          	sd	a1,-48(s0)
    80015bd2:	87b2                	mv	a5,a2
    80015bd4:	fcf42623          	sw	a5,-52(s0)
    char *o = dest;
    80015bd8:	fd843783          	ld	a5,-40(s0)
    80015bdc:	fef43423          	sd	a5,-24(s0)
    while (*s && n-- > 0) {
    80015be0:	a00d                	j	80015c02 <strncpy+0x3e>
        *dest++ = *s++;
    80015be2:	fd043703          	ld	a4,-48(s0)
    80015be6:	00170793          	addi	a5,a4,1
    80015bea:	fcf43823          	sd	a5,-48(s0)
    80015bee:	fd843783          	ld	a5,-40(s0)
    80015bf2:	00178693          	addi	a3,a5,1
    80015bf6:	fcd43c23          	sd	a3,-40(s0)
    80015bfa:	00074703          	lbu	a4,0(a4)
    80015bfe:	00e78023          	sb	a4,0(a5)
    while (*s && n-- > 0) {
    80015c02:	fd043783          	ld	a5,-48(s0)
    80015c06:	0007c783          	lbu	a5,0(a5)
    80015c0a:	cb89                	beqz	a5,80015c1c <strncpy+0x58>
    80015c0c:	fcc42783          	lw	a5,-52(s0)
    80015c10:	fff7871b          	addiw	a4,a5,-1
    80015c14:	fce42623          	sw	a4,-52(s0)
    80015c18:	fcf045e3          	bgtz	a5,80015be2 <strncpy+0x1e>
    }
    *dest = '\0';
    80015c1c:	fd843783          	ld	a5,-40(s0)
    80015c20:	00078023          	sb	zero,0(a5)
    return o;
    80015c24:	fe843783          	ld	a5,-24(s0)
}
    80015c28:	853e                	mv	a0,a5
    80015c2a:	7462                	ld	s0,56(sp)
    80015c2c:	6121                	addi	sp,sp,64
    80015c2e:	8082                	ret

0000000080015c30 <strdup>:


char *strdup(const char *src)
{
    80015c30:	7179                	addi	sp,sp,-48
    80015c32:	f406                	sd	ra,40(sp)
    80015c34:	f022                	sd	s0,32(sp)
    80015c36:	1800                	addi	s0,sp,48
    80015c38:	fca43c23          	sd	a0,-40(s0)
    int len   = strlen(src);
    80015c3c:	fd843503          	ld	a0,-40(s0)
    80015c40:	ef1ff0ef          	jal	ra,80015b30 <strlen>
    80015c44:	87aa                	mv	a5,a0
    80015c46:	fef42623          	sw	a5,-20(s0)
    char *ret = (char *)g_kmalloc(len + 1);
    80015c4a:	fec42783          	lw	a5,-20(s0)
    80015c4e:	2785                	addiw	a5,a5,1
    80015c50:	2781                	sext.w	a5,a5
    80015c52:	853e                	mv	a0,a5
    80015c54:	fd9fe0ef          	jal	ra,80014c2c <g_kmalloc>
    80015c58:	fea43023          	sd	a0,-32(s0)
    if (!ret) {
    80015c5c:	fe043783          	ld	a5,-32(s0)
    80015c60:	e399                	bnez	a5,80015c66 <strdup+0x36>
        return NULL;
    80015c62:	4781                	li	a5,0
    80015c64:	a801                	j	80015c74 <strdup+0x44>
    }
    return strcpy(ret, src);
    80015c66:	fd843583          	ld	a1,-40(s0)
    80015c6a:	fe043503          	ld	a0,-32(s0)
    80015c6e:	f01ff0ef          	jal	ra,80015b6e <strcpy>
    80015c72:	87aa                	mv	a5,a0
}
    80015c74:	853e                	mv	a0,a5
    80015c76:	70a2                	ld	ra,40(sp)
    80015c78:	7402                	ld	s0,32(sp)
    80015c7a:	6145                	addi	sp,sp,48
    80015c7c:	8082                	ret

0000000080015c7e <strstartswith>:

bool strstartswith(const char *src, const char *start)
{
    80015c7e:	7179                	addi	sp,sp,-48
    80015c80:	f406                	sd	ra,40(sp)
    80015c82:	f022                	sd	s0,32(sp)
    80015c84:	1800                	addi	s0,sp,48
    80015c86:	fca43c23          	sd	a0,-40(s0)
    80015c8a:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80015c8e:	fd843503          	ld	a0,-40(s0)
    80015c92:	e9fff0ef          	jal	ra,80015b30 <strlen>
    80015c96:	87aa                	mv	a5,a0
    80015c98:	fef42423          	sw	a5,-24(s0)
    int start_len = strlen(start);
    80015c9c:	fd043503          	ld	a0,-48(s0)
    80015ca0:	e91ff0ef          	jal	ra,80015b30 <strlen>
    80015ca4:	87aa                	mv	a5,a0
    80015ca6:	fef42223          	sw	a5,-28(s0)
    int i;
    
    if (src_len < start_len) {
    80015caa:	fe842703          	lw	a4,-24(s0)
    80015cae:	fe442783          	lw	a5,-28(s0)
    80015cb2:	2701                	sext.w	a4,a4
    80015cb4:	2781                	sext.w	a5,a5
    80015cb6:	00f75463          	bge	a4,a5,80015cbe <strstartswith+0x40>
        return false;
    80015cba:	4781                	li	a5,0
    80015cbc:	a0a9                	j	80015d06 <strstartswith+0x88>
    }

    for (i = 0;i < start_len;i++) {
    80015cbe:	fe042623          	sw	zero,-20(s0)
    80015cc2:	a80d                	j	80015cf4 <strstartswith+0x76>
        if (src[i] != start[i]) {
    80015cc4:	fec42783          	lw	a5,-20(s0)
    80015cc8:	fd843703          	ld	a4,-40(s0)
    80015ccc:	97ba                	add	a5,a5,a4
    80015cce:	0007c683          	lbu	a3,0(a5)
    80015cd2:	fec42783          	lw	a5,-20(s0)
    80015cd6:	fd043703          	ld	a4,-48(s0)
    80015cda:	97ba                	add	a5,a5,a4
    80015cdc:	0007c783          	lbu	a5,0(a5)
    80015ce0:	8736                	mv	a4,a3
    80015ce2:	00f70463          	beq	a4,a5,80015cea <strstartswith+0x6c>
            return false;
    80015ce6:	4781                	li	a5,0
    80015ce8:	a839                	j	80015d06 <strstartswith+0x88>
    for (i = 0;i < start_len;i++) {
    80015cea:	fec42783          	lw	a5,-20(s0)
    80015cee:	2785                	addiw	a5,a5,1
    80015cf0:	fef42623          	sw	a5,-20(s0)
    80015cf4:	fec42703          	lw	a4,-20(s0)
    80015cf8:	fe442783          	lw	a5,-28(s0)
    80015cfc:	2701                	sext.w	a4,a4
    80015cfe:	2781                	sext.w	a5,a5
    80015d00:	fcf742e3          	blt	a4,a5,80015cc4 <strstartswith+0x46>
        }
    }

    return true;
    80015d04:	4785                	li	a5,1
}
    80015d06:	853e                	mv	a0,a5
    80015d08:	70a2                	ld	ra,40(sp)
    80015d0a:	7402                	ld	s0,32(sp)
    80015d0c:	6145                	addi	sp,sp,48
    80015d0e:	8082                	ret

0000000080015d10 <strendswith>:

bool strendswith(const char *src, const char *end)
{
    80015d10:	7179                	addi	sp,sp,-48
    80015d12:	f406                	sd	ra,40(sp)
    80015d14:	f022                	sd	s0,32(sp)
    80015d16:	1800                	addi	s0,sp,48
    80015d18:	fca43c23          	sd	a0,-40(s0)
    80015d1c:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80015d20:	fd843503          	ld	a0,-40(s0)
    80015d24:	e0dff0ef          	jal	ra,80015b30 <strlen>
    80015d28:	87aa                	mv	a5,a0
    80015d2a:	fef42423          	sw	a5,-24(s0)
    int end_len = strlen(end);
    80015d2e:	fd043503          	ld	a0,-48(s0)
    80015d32:	dffff0ef          	jal	ra,80015b30 <strlen>
    80015d36:	87aa                	mv	a5,a0
    80015d38:	fef42223          	sw	a5,-28(s0)
    int cmp = src_len - end_len;
    80015d3c:	fe842703          	lw	a4,-24(s0)
    80015d40:	fe442783          	lw	a5,-28(s0)
    80015d44:	40f707bb          	subw	a5,a4,a5
    80015d48:	fef42023          	sw	a5,-32(s0)
    int i;
    
    if (src_len < end_len) {
    80015d4c:	fe842703          	lw	a4,-24(s0)
    80015d50:	fe442783          	lw	a5,-28(s0)
    80015d54:	2701                	sext.w	a4,a4
    80015d56:	2781                	sext.w	a5,a5
    80015d58:	00f75463          	bge	a4,a5,80015d60 <strendswith+0x50>
        return false;
    80015d5c:	4781                	li	a5,0
    80015d5e:	a891                	j	80015db2 <strendswith+0xa2>
    }

    for (i = 0;i < end_len;i++) {
    80015d60:	fe042623          	sw	zero,-20(s0)
    80015d64:	a835                	j	80015da0 <strendswith+0x90>
        if (src[i + cmp] != end[i]) {
    80015d66:	fec42703          	lw	a4,-20(s0)
    80015d6a:	fe042783          	lw	a5,-32(s0)
    80015d6e:	9fb9                	addw	a5,a5,a4
    80015d70:	2781                	sext.w	a5,a5
    80015d72:	873e                	mv	a4,a5
    80015d74:	fd843783          	ld	a5,-40(s0)
    80015d78:	97ba                	add	a5,a5,a4
    80015d7a:	0007c683          	lbu	a3,0(a5)
    80015d7e:	fec42783          	lw	a5,-20(s0)
    80015d82:	fd043703          	ld	a4,-48(s0)
    80015d86:	97ba                	add	a5,a5,a4
    80015d88:	0007c783          	lbu	a5,0(a5)
    80015d8c:	8736                	mv	a4,a3
    80015d8e:	00f70463          	beq	a4,a5,80015d96 <strendswith+0x86>
            return false;
    80015d92:	4781                	li	a5,0
    80015d94:	a839                	j	80015db2 <strendswith+0xa2>
    for (i = 0;i < end_len;i++) {
    80015d96:	fec42783          	lw	a5,-20(s0)
    80015d9a:	2785                	addiw	a5,a5,1
    80015d9c:	fef42623          	sw	a5,-20(s0)
    80015da0:	fec42703          	lw	a4,-20(s0)
    80015da4:	fe442783          	lw	a5,-28(s0)
    80015da8:	2701                	sext.w	a4,a4
    80015daa:	2781                	sext.w	a5,a5
    80015dac:	faf74de3          	blt	a4,a5,80015d66 <strendswith+0x56>
        }
    }

    return true;    
    80015db0:	4785                	li	a5,1
}
    80015db2:	853e                	mv	a0,a5
    80015db4:	70a2                	ld	ra,40(sp)
    80015db6:	7402                	ld	s0,32(sp)
    80015db8:	6145                	addi	sp,sp,48
    80015dba:	8082                	ret

0000000080015dbc <vector_init>:
    uint32_t size;
    uint32_t capacity;
    uint64_t *values;
} Vector;

static Vector *vector_init(Vector *vec) {
    80015dbc:	1101                	addi	sp,sp,-32
    80015dbe:	ec22                	sd	s0,24(sp)
    80015dc0:	1000                	addi	s0,sp,32
    80015dc2:	fea43423          	sd	a0,-24(s0)
    if (vec == NULL) {
    80015dc6:	fe843783          	ld	a5,-24(s0)
    80015dca:	e399                	bnez	a5,80015dd0 <vector_init+0x14>
        return NULL;
    80015dcc:	4781                	li	a5,0
    80015dce:	a839                	j	80015dec <vector_init+0x30>
    }
    vec->size = 0;
    80015dd0:	fe843783          	ld	a5,-24(s0)
    80015dd4:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    80015dd8:	fe843783          	ld	a5,-24(s0)
    80015ddc:	0007a223          	sw	zero,4(a5)
    vec->values = NULL;
    80015de0:	fe843783          	ld	a5,-24(s0)
    80015de4:	0007b423          	sd	zero,8(a5)
    return vec;
    80015de8:	fe843783          	ld	a5,-24(s0)
}
    80015dec:	853e                	mv	a0,a5
    80015dee:	6462                	ld	s0,24(sp)
    80015df0:	6105                	addi	sp,sp,32
    80015df2:	8082                	ret

0000000080015df4 <vector_new>:

Vector *vector_new(void) {
    80015df4:	1141                	addi	sp,sp,-16
    80015df6:	e406                	sd	ra,8(sp)
    80015df8:	e022                	sd	s0,0(sp)
    80015dfa:	0800                	addi	s0,sp,16
    return vector_init((Vector *)g_kmalloc(sizeof(Vector)));
    80015dfc:	4541                	li	a0,16
    80015dfe:	e2ffe0ef          	jal	ra,80014c2c <g_kmalloc>
    80015e02:	87aa                	mv	a5,a0
    80015e04:	853e                	mv	a0,a5
    80015e06:	fb7ff0ef          	jal	ra,80015dbc <vector_init>
    80015e0a:	87aa                	mv	a5,a0
}
    80015e0c:	853e                	mv	a0,a5
    80015e0e:	60a2                	ld	ra,8(sp)
    80015e10:	6402                	ld	s0,0(sp)
    80015e12:	0141                	addi	sp,sp,16
    80015e14:	8082                	ret

0000000080015e16 <vector_init_with_capacity>:

static Vector *vector_init_with_capacity(Vector *vec, uint32_t capacity) {
    80015e16:	1101                	addi	sp,sp,-32
    80015e18:	ec06                	sd	ra,24(sp)
    80015e1a:	e822                	sd	s0,16(sp)
    80015e1c:	1000                	addi	s0,sp,32
    80015e1e:	fea43423          	sd	a0,-24(s0)
    80015e22:	87ae                	mv	a5,a1
    80015e24:	fef42223          	sw	a5,-28(s0)
    if (vec == NULL) {
    80015e28:	fe843783          	ld	a5,-24(s0)
    80015e2c:	e399                	bnez	a5,80015e32 <vector_init_with_capacity+0x1c>
        return NULL;
    80015e2e:	4781                	li	a5,0
    80015e30:	a035                	j	80015e5c <vector_init_with_capacity+0x46>
    }
    vec->size = 0;
    80015e32:	fe843783          	ld	a5,-24(s0)
    80015e36:	0007a023          	sw	zero,0(a5)
    vec->capacity = capacity;
    80015e3a:	fe843783          	ld	a5,-24(s0)
    80015e3e:	fe442703          	lw	a4,-28(s0)
    80015e42:	c3d8                	sw	a4,4(a5)
    vec->values = (uint64_t *)g_kcalloc(capacity, sizeof(uint64_t));
    80015e44:	fe446783          	lwu	a5,-28(s0)
    80015e48:	45a1                	li	a1,8
    80015e4a:	853e                	mv	a0,a5
    80015e4c:	e19fe0ef          	jal	ra,80014c64 <g_kcalloc>
    80015e50:	872a                	mv	a4,a0
    80015e52:	fe843783          	ld	a5,-24(s0)
    80015e56:	e798                	sd	a4,8(a5)
    return vec;
    80015e58:	fe843783          	ld	a5,-24(s0)
}
    80015e5c:	853e                	mv	a0,a5
    80015e5e:	60e2                	ld	ra,24(sp)
    80015e60:	6442                	ld	s0,16(sp)
    80015e62:	6105                	addi	sp,sp,32
    80015e64:	8082                	ret

0000000080015e66 <vector_new_with_capacity>:

Vector *vector_new_with_capacity(uint32_t capacity) {
    80015e66:	1101                	addi	sp,sp,-32
    80015e68:	ec06                	sd	ra,24(sp)
    80015e6a:	e822                	sd	s0,16(sp)
    80015e6c:	1000                	addi	s0,sp,32
    80015e6e:	87aa                	mv	a5,a0
    80015e70:	fef42623          	sw	a5,-20(s0)
    return vector_init_with_capacity((Vector *)g_kmalloc(sizeof(Vector)), capacity);
    80015e74:	4541                	li	a0,16
    80015e76:	db7fe0ef          	jal	ra,80014c2c <g_kmalloc>
    80015e7a:	872a                	mv	a4,a0
    80015e7c:	fec42783          	lw	a5,-20(s0)
    80015e80:	85be                	mv	a1,a5
    80015e82:	853a                	mv	a0,a4
    80015e84:	f93ff0ef          	jal	ra,80015e16 <vector_init_with_capacity>
    80015e88:	87aa                	mv	a5,a0
}
    80015e8a:	853e                	mv	a0,a5
    80015e8c:	60e2                	ld	ra,24(sp)
    80015e8e:	6442                	ld	s0,16(sp)
    80015e90:	6105                	addi	sp,sp,32
    80015e92:	8082                	ret

0000000080015e94 <vector_push>:

void vector_push(Vector *vec, uint64_t value) {
    80015e94:	1101                	addi	sp,sp,-32
    80015e96:	ec06                	sd	ra,24(sp)
    80015e98:	e822                	sd	s0,16(sp)
    80015e9a:	1000                	addi	s0,sp,32
    80015e9c:	fea43423          	sd	a0,-24(s0)
    80015ea0:	feb43023          	sd	a1,-32(s0)
    vector_insert(vec, vec->size, value);
    80015ea4:	fe843783          	ld	a5,-24(s0)
    80015ea8:	439c                	lw	a5,0(a5)
    80015eaa:	fe043603          	ld	a2,-32(s0)
    80015eae:	85be                	mv	a1,a5
    80015eb0:	fe843503          	ld	a0,-24(s0)
    80015eb4:	00e000ef          	jal	ra,80015ec2 <vector_insert>
}
    80015eb8:	0001                	nop
    80015eba:	60e2                	ld	ra,24(sp)
    80015ebc:	6442                	ld	s0,16(sp)
    80015ebe:	6105                	addi	sp,sp,32
    80015ec0:	8082                	ret

0000000080015ec2 <vector_insert>:

void vector_insert(Vector *vec, uint32_t idx, uint64_t value) {
    80015ec2:	7139                	addi	sp,sp,-64
    80015ec4:	fc06                	sd	ra,56(sp)
    80015ec6:	f822                	sd	s0,48(sp)
    80015ec8:	0080                	addi	s0,sp,64
    80015eca:	fca43c23          	sd	a0,-40(s0)
    80015ece:	87ae                	mv	a5,a1
    80015ed0:	fcc43423          	sd	a2,-56(s0)
    80015ed4:	fcf42a23          	sw	a5,-44(s0)
    uint32_t i;
    vector_resize(vec, vec->size + 1);
    80015ed8:	fd843783          	ld	a5,-40(s0)
    80015edc:	439c                	lw	a5,0(a5)
    80015ede:	2785                	addiw	a5,a5,1
    80015ee0:	2781                	sext.w	a5,a5
    80015ee2:	85be                	mv	a1,a5
    80015ee4:	fd843503          	ld	a0,-40(s0)
    80015ee8:	214000ef          	jal	ra,800160fc <vector_resize>
    for (i = vec->size - 1;i > idx;i--) {
    80015eec:	fd843783          	ld	a5,-40(s0)
    80015ef0:	439c                	lw	a5,0(a5)
    80015ef2:	37fd                	addiw	a5,a5,-1
    80015ef4:	fef42623          	sw	a5,-20(s0)
    80015ef8:	a805                	j	80015f28 <vector_insert+0x66>
        vector_set(vec, i, vector_get_unchecked(vec, i - 1));
    80015efa:	fec42783          	lw	a5,-20(s0)
    80015efe:	37fd                	addiw	a5,a5,-1
    80015f00:	2781                	sext.w	a5,a5
    80015f02:	85be                	mv	a1,a5
    80015f04:	fd843503          	ld	a0,-40(s0)
    80015f08:	13a000ef          	jal	ra,80016042 <vector_get_unchecked>
    80015f0c:	872a                	mv	a4,a0
    80015f0e:	fec42783          	lw	a5,-20(s0)
    80015f12:	863a                	mv	a2,a4
    80015f14:	85be                	mv	a1,a5
    80015f16:	fd843503          	ld	a0,-40(s0)
    80015f1a:	094000ef          	jal	ra,80015fae <vector_set>
    for (i = vec->size - 1;i > idx;i--) {
    80015f1e:	fec42783          	lw	a5,-20(s0)
    80015f22:	37fd                	addiw	a5,a5,-1
    80015f24:	fef42623          	sw	a5,-20(s0)
    80015f28:	fec42703          	lw	a4,-20(s0)
    80015f2c:	fd442783          	lw	a5,-44(s0)
    80015f30:	2701                	sext.w	a4,a4
    80015f32:	2781                	sext.w	a5,a5
    80015f34:	fce7e3e3          	bltu	a5,a4,80015efa <vector_insert+0x38>
    }
    vector_set(vec, idx, value);
    80015f38:	fd442783          	lw	a5,-44(s0)
    80015f3c:	fc843603          	ld	a2,-56(s0)
    80015f40:	85be                	mv	a1,a5
    80015f42:	fd843503          	ld	a0,-40(s0)
    80015f46:	068000ef          	jal	ra,80015fae <vector_set>
}
    80015f4a:	0001                	nop
    80015f4c:	70e2                	ld	ra,56(sp)
    80015f4e:	7442                	ld	s0,48(sp)
    80015f50:	6121                	addi	sp,sp,64
    80015f52:	8082                	ret

0000000080015f54 <vector_find>:

int vector_find(Vector *vec, uint64_t val) {
    80015f54:	7179                	addi	sp,sp,-48
    80015f56:	f422                	sd	s0,40(sp)
    80015f58:	1800                	addi	s0,sp,48
    80015f5a:	fca43c23          	sd	a0,-40(s0)
    80015f5e:	fcb43823          	sd	a1,-48(s0)
    int i;
    for (i = 0;i < (int)vec->size;i++) {
    80015f62:	fe042623          	sw	zero,-20(s0)
    80015f66:	a02d                	j	80015f90 <vector_find+0x3c>
        if (vec->values[i] == val) {
    80015f68:	fd843783          	ld	a5,-40(s0)
    80015f6c:	6798                	ld	a4,8(a5)
    80015f6e:	fec42783          	lw	a5,-20(s0)
    80015f72:	078e                	slli	a5,a5,0x3
    80015f74:	97ba                	add	a5,a5,a4
    80015f76:	639c                	ld	a5,0(a5)
    80015f78:	fd043703          	ld	a4,-48(s0)
    80015f7c:	00f71563          	bne	a4,a5,80015f86 <vector_find+0x32>
            return i;
    80015f80:	fec42783          	lw	a5,-20(s0)
    80015f84:	a00d                	j	80015fa6 <vector_find+0x52>
    for (i = 0;i < (int)vec->size;i++) {
    80015f86:	fec42783          	lw	a5,-20(s0)
    80015f8a:	2785                	addiw	a5,a5,1
    80015f8c:	fef42623          	sw	a5,-20(s0)
    80015f90:	fd843783          	ld	a5,-40(s0)
    80015f94:	439c                	lw	a5,0(a5)
    80015f96:	0007871b          	sext.w	a4,a5
    80015f9a:	fec42783          	lw	a5,-20(s0)
    80015f9e:	2781                	sext.w	a5,a5
    80015fa0:	fce7c4e3          	blt	a5,a4,80015f68 <vector_find+0x14>
        }
    }
    return -1;
    80015fa4:	57fd                	li	a5,-1
}
    80015fa6:	853e                	mv	a0,a5
    80015fa8:	7422                	ld	s0,40(sp)
    80015faa:	6145                	addi	sp,sp,48
    80015fac:	8082                	ret

0000000080015fae <vector_set>:

bool vector_set(Vector *vec, uint32_t idx, uint64_t val) {
    80015fae:	7179                	addi	sp,sp,-48
    80015fb0:	f422                	sd	s0,40(sp)
    80015fb2:	1800                	addi	s0,sp,48
    80015fb4:	fea43423          	sd	a0,-24(s0)
    80015fb8:	87ae                	mv	a5,a1
    80015fba:	fcc43c23          	sd	a2,-40(s0)
    80015fbe:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015fc2:	fe843783          	ld	a5,-24(s0)
    80015fc6:	4398                	lw	a4,0(a5)
    80015fc8:	fe442783          	lw	a5,-28(s0)
    80015fcc:	2781                	sext.w	a5,a5
    80015fce:	00e7e463          	bltu	a5,a4,80015fd6 <vector_set+0x28>
        return false;
    80015fd2:	4781                	li	a5,0
    80015fd4:	a821                	j	80015fec <vector_set+0x3e>
    }
    vec->values[idx] = val;
    80015fd6:	fe843783          	ld	a5,-24(s0)
    80015fda:	6798                	ld	a4,8(a5)
    80015fdc:	fe446783          	lwu	a5,-28(s0)
    80015fe0:	078e                	slli	a5,a5,0x3
    80015fe2:	97ba                	add	a5,a5,a4
    80015fe4:	fd843703          	ld	a4,-40(s0)
    80015fe8:	e398                	sd	a4,0(a5)
    return true;
    80015fea:	4785                	li	a5,1
}
    80015fec:	853e                	mv	a0,a5
    80015fee:	7422                	ld	s0,40(sp)
    80015ff0:	6145                	addi	sp,sp,48
    80015ff2:	8082                	ret

0000000080015ff4 <vector_get>:

bool vector_get(Vector *vec, uint32_t idx, uint64_t *val) {
    80015ff4:	7179                	addi	sp,sp,-48
    80015ff6:	f422                	sd	s0,40(sp)
    80015ff8:	1800                	addi	s0,sp,48
    80015ffa:	fea43423          	sd	a0,-24(s0)
    80015ffe:	87ae                	mv	a5,a1
    80016000:	fcc43c23          	sd	a2,-40(s0)
    80016004:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80016008:	fe843783          	ld	a5,-24(s0)
    8001600c:	4398                	lw	a4,0(a5)
    8001600e:	fe442783          	lw	a5,-28(s0)
    80016012:	2781                	sext.w	a5,a5
    80016014:	00e7e463          	bltu	a5,a4,8001601c <vector_get+0x28>
        return false;
    80016018:	4781                	li	a5,0
    8001601a:	a005                	j	8001603a <vector_get+0x46>
    }
    if (val != NULL) {
    8001601c:	fd843783          	ld	a5,-40(s0)
    80016020:	cf81                	beqz	a5,80016038 <vector_get+0x44>
        *val = vec->values[idx];
    80016022:	fe843783          	ld	a5,-24(s0)
    80016026:	6798                	ld	a4,8(a5)
    80016028:	fe446783          	lwu	a5,-28(s0)
    8001602c:	078e                	slli	a5,a5,0x3
    8001602e:	97ba                	add	a5,a5,a4
    80016030:	6398                	ld	a4,0(a5)
    80016032:	fd843783          	ld	a5,-40(s0)
    80016036:	e398                	sd	a4,0(a5)
    }
    return true;
    80016038:	4785                	li	a5,1
}
    8001603a:	853e                	mv	a0,a5
    8001603c:	7422                	ld	s0,40(sp)
    8001603e:	6145                	addi	sp,sp,48
    80016040:	8082                	ret

0000000080016042 <vector_get_unchecked>:

uint64_t vector_get_unchecked(Vector *vec, uint32_t idx) {
    80016042:	1101                	addi	sp,sp,-32
    80016044:	ec22                	sd	s0,24(sp)
    80016046:	1000                	addi	s0,sp,32
    80016048:	fea43423          	sd	a0,-24(s0)
    8001604c:	87ae                	mv	a5,a1
    8001604e:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80016052:	fe843783          	ld	a5,-24(s0)
    80016056:	4398                	lw	a4,0(a5)
    80016058:	fe442783          	lw	a5,-28(s0)
    8001605c:	2781                	sext.w	a5,a5
    8001605e:	00e7e463          	bltu	a5,a4,80016066 <vector_get_unchecked+0x24>
        return 0;
    80016062:	4781                	li	a5,0
    80016064:	a809                	j	80016076 <vector_get_unchecked+0x34>
    }
    return vec->values[idx];
    80016066:	fe843783          	ld	a5,-24(s0)
    8001606a:	6798                	ld	a4,8(a5)
    8001606c:	fe446783          	lwu	a5,-28(s0)
    80016070:	078e                	slli	a5,a5,0x3
    80016072:	97ba                	add	a5,a5,a4
    80016074:	639c                	ld	a5,0(a5)
}
    80016076:	853e                	mv	a0,a5
    80016078:	6462                	ld	s0,24(sp)
    8001607a:	6105                	addi	sp,sp,32
    8001607c:	8082                	ret

000000008001607e <vector_resize_with_default>:


void vector_resize_with_default(Vector *vec, uint32_t new_size, uint64_t def) {
    8001607e:	7139                	addi	sp,sp,-64
    80016080:	fc06                	sd	ra,56(sp)
    80016082:	f822                	sd	s0,48(sp)
    80016084:	0080                	addi	s0,sp,64
    80016086:	fca43c23          	sd	a0,-40(s0)
    8001608a:	87ae                	mv	a5,a1
    8001608c:	fcc43423          	sd	a2,-56(s0)
    80016090:	fcf42a23          	sw	a5,-44(s0)
    uint32_t old_size = vec->size;
    80016094:	fd843783          	ld	a5,-40(s0)
    80016098:	439c                	lw	a5,0(a5)
    8001609a:	fef42423          	sw	a5,-24(s0)
    vector_resize(vec, new_size);
    8001609e:	fd442783          	lw	a5,-44(s0)
    800160a2:	85be                	mv	a1,a5
    800160a4:	fd843503          	ld	a0,-40(s0)
    800160a8:	054000ef          	jal	ra,800160fc <vector_resize>
    if (old_size < new_size) {
    800160ac:	fe842703          	lw	a4,-24(s0)
    800160b0:	fd442783          	lw	a5,-44(s0)
    800160b4:	2701                	sext.w	a4,a4
    800160b6:	2781                	sext.w	a5,a5
    800160b8:	02f77d63          	bgeu	a4,a5,800160f2 <vector_resize_with_default+0x74>
        uint32_t i;
        for (i = old_size;i < new_size;i++) {
    800160bc:	fe842783          	lw	a5,-24(s0)
    800160c0:	fef42623          	sw	a5,-20(s0)
    800160c4:	a839                	j	800160e2 <vector_resize_with_default+0x64>
            vector_set(vec, i, def);
    800160c6:	fec42783          	lw	a5,-20(s0)
    800160ca:	fc843603          	ld	a2,-56(s0)
    800160ce:	85be                	mv	a1,a5
    800160d0:	fd843503          	ld	a0,-40(s0)
    800160d4:	edbff0ef          	jal	ra,80015fae <vector_set>
        for (i = old_size;i < new_size;i++) {
    800160d8:	fec42783          	lw	a5,-20(s0)
    800160dc:	2785                	addiw	a5,a5,1
    800160de:	fef42623          	sw	a5,-20(s0)
    800160e2:	fec42703          	lw	a4,-20(s0)
    800160e6:	fd442783          	lw	a5,-44(s0)
    800160ea:	2701                	sext.w	a4,a4
    800160ec:	2781                	sext.w	a5,a5
    800160ee:	fcf76ce3          	bltu	a4,a5,800160c6 <vector_resize_with_default+0x48>
        }
    }
}
    800160f2:	0001                	nop
    800160f4:	70e2                	ld	ra,56(sp)
    800160f6:	7442                	ld	s0,48(sp)
    800160f8:	6121                	addi	sp,sp,64
    800160fa:	8082                	ret

00000000800160fc <vector_resize>:

void vector_resize(Vector *vec, uint32_t new_size) {
    800160fc:	7179                	addi	sp,sp,-48
    800160fe:	f406                	sd	ra,40(sp)
    80016100:	f022                	sd	s0,32(sp)
    80016102:	1800                	addi	s0,sp,48
    80016104:	fca43c23          	sd	a0,-40(s0)
    80016108:	87ae                	mv	a5,a1
    8001610a:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_size > vec->capacity) {
    8001610e:	fd843783          	ld	a5,-40(s0)
    80016112:	43d8                	lw	a4,4(a5)
    80016114:	fd442783          	lw	a5,-44(s0)
    80016118:	2781                	sext.w	a5,a5
    8001611a:	06f77963          	bgeu	a4,a5,8001618c <vector_resize+0x90>
        vals = (uint64_t *)g_kcalloc(new_size, sizeof(uint64_t));
    8001611e:	fd446783          	lwu	a5,-44(s0)
    80016122:	45a1                	li	a1,8
    80016124:	853e                	mv	a0,a5
    80016126:	b3ffe0ef          	jal	ra,80014c64 <g_kcalloc>
    8001612a:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    8001612e:	fe042623          	sw	zero,-20(s0)
    80016132:	a02d                	j	8001615c <vector_resize+0x60>
            vals[i] = vec->values[i];
    80016134:	fd843783          	ld	a5,-40(s0)
    80016138:	6798                	ld	a4,8(a5)
    8001613a:	fec46783          	lwu	a5,-20(s0)
    8001613e:	078e                	slli	a5,a5,0x3
    80016140:	973e                	add	a4,a4,a5
    80016142:	fec46783          	lwu	a5,-20(s0)
    80016146:	078e                	slli	a5,a5,0x3
    80016148:	fe043683          	ld	a3,-32(s0)
    8001614c:	97b6                	add	a5,a5,a3
    8001614e:	6318                	ld	a4,0(a4)
    80016150:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80016152:	fec42783          	lw	a5,-20(s0)
    80016156:	2785                	addiw	a5,a5,1
    80016158:	fef42623          	sw	a5,-20(s0)
    8001615c:	fd843783          	ld	a5,-40(s0)
    80016160:	4398                	lw	a4,0(a5)
    80016162:	fec42783          	lw	a5,-20(s0)
    80016166:	2781                	sext.w	a5,a5
    80016168:	fce7e6e3          	bltu	a5,a4,80016134 <vector_resize+0x38>
        }
        g_kfree(vec->values);
    8001616c:	fd843783          	ld	a5,-40(s0)
    80016170:	679c                	ld	a5,8(a5)
    80016172:	853e                	mv	a0,a5
    80016174:	b53fe0ef          	jal	ra,80014cc6 <g_kfree>
        vec->values = vals;
    80016178:	fd843783          	ld	a5,-40(s0)
    8001617c:	fe043703          	ld	a4,-32(s0)
    80016180:	e798                	sd	a4,8(a5)
        vec->capacity = new_size;
    80016182:	fd843783          	ld	a5,-40(s0)
    80016186:	fd442703          	lw	a4,-44(s0)
    8001618a:	c3d8                	sw	a4,4(a5)
    }        
    vec->size = new_size;    
    8001618c:	fd843783          	ld	a5,-40(s0)
    80016190:	fd442703          	lw	a4,-44(s0)
    80016194:	c398                	sw	a4,0(a5)
}
    80016196:	0001                	nop
    80016198:	70a2                	ld	ra,40(sp)
    8001619a:	7402                	ld	s0,32(sp)
    8001619c:	6145                	addi	sp,sp,48
    8001619e:	8082                	ret

00000000800161a0 <vector_reserve>:

void vector_reserve(Vector *vec, uint32_t new_capacity) {
    800161a0:	7179                	addi	sp,sp,-48
    800161a2:	f406                	sd	ra,40(sp)
    800161a4:	f022                	sd	s0,32(sp)
    800161a6:	1800                	addi	s0,sp,48
    800161a8:	fca43c23          	sd	a0,-40(s0)
    800161ac:	87ae                	mv	a5,a1
    800161ae:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_capacity > vec->capacity) {
    800161b2:	fd843783          	ld	a5,-40(s0)
    800161b6:	43d8                	lw	a4,4(a5)
    800161b8:	fd442783          	lw	a5,-44(s0)
    800161bc:	2781                	sext.w	a5,a5
    800161be:	06f77a63          	bgeu	a4,a5,80016232 <vector_reserve+0x92>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    800161c2:	fd446783          	lwu	a5,-44(s0)
    800161c6:	45a1                	li	a1,8
    800161c8:	853e                	mv	a0,a5
    800161ca:	a9bfe0ef          	jal	ra,80014c64 <g_kcalloc>
    800161ce:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    800161d2:	fe042623          	sw	zero,-20(s0)
    800161d6:	a02d                	j	80016200 <vector_reserve+0x60>
            vals[i] = vec->values[i];
    800161d8:	fd843783          	ld	a5,-40(s0)
    800161dc:	6798                	ld	a4,8(a5)
    800161de:	fec46783          	lwu	a5,-20(s0)
    800161e2:	078e                	slli	a5,a5,0x3
    800161e4:	973e                	add	a4,a4,a5
    800161e6:	fec46783          	lwu	a5,-20(s0)
    800161ea:	078e                	slli	a5,a5,0x3
    800161ec:	fe043683          	ld	a3,-32(s0)
    800161f0:	97b6                	add	a5,a5,a3
    800161f2:	6318                	ld	a4,0(a4)
    800161f4:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    800161f6:	fec42783          	lw	a5,-20(s0)
    800161fa:	2785                	addiw	a5,a5,1
    800161fc:	fef42623          	sw	a5,-20(s0)
    80016200:	fd843783          	ld	a5,-40(s0)
    80016204:	4398                	lw	a4,0(a5)
    80016206:	fec42783          	lw	a5,-20(s0)
    8001620a:	2781                	sext.w	a5,a5
    8001620c:	fce7e6e3          	bltu	a5,a4,800161d8 <vector_reserve+0x38>
        }
        g_kfree(vec->values);
    80016210:	fd843783          	ld	a5,-40(s0)
    80016214:	679c                	ld	a5,8(a5)
    80016216:	853e                	mv	a0,a5
    80016218:	aaffe0ef          	jal	ra,80014cc6 <g_kfree>
        vec->values = vals;
    8001621c:	fd843783          	ld	a5,-40(s0)
    80016220:	fe043703          	ld	a4,-32(s0)
    80016224:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    80016226:	fd843783          	ld	a5,-40(s0)
    8001622a:	fd442703          	lw	a4,-44(s0)
    8001622e:	c3d8                	sw	a4,4(a5)
        }
        g_kfree(vec->values);
        vec->values = vals;
        vec->capacity = new_capacity;
    }
}
    80016230:	a04d                	j	800162d2 <vector_reserve+0x132>
    else if (new_capacity > 0 && new_capacity < vec->capacity) {
    80016232:	fd442783          	lw	a5,-44(s0)
    80016236:	2781                	sext.w	a5,a5
    80016238:	cfc9                	beqz	a5,800162d2 <vector_reserve+0x132>
    8001623a:	fd843783          	ld	a5,-40(s0)
    8001623e:	43d8                	lw	a4,4(a5)
    80016240:	fd442783          	lw	a5,-44(s0)
    80016244:	2781                	sext.w	a5,a5
    80016246:	08e7f663          	bgeu	a5,a4,800162d2 <vector_reserve+0x132>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    8001624a:	fd446783          	lwu	a5,-44(s0)
    8001624e:	45a1                	li	a1,8
    80016250:	853e                	mv	a0,a5
    80016252:	a13fe0ef          	jal	ra,80014c64 <g_kcalloc>
    80016256:	fea43023          	sd	a0,-32(s0)
        if (new_capacity < vec->size) {
    8001625a:	fd843783          	ld	a5,-40(s0)
    8001625e:	4398                	lw	a4,0(a5)
    80016260:	fd442783          	lw	a5,-44(s0)
    80016264:	2781                	sext.w	a5,a5
    80016266:	00e7f763          	bgeu	a5,a4,80016274 <vector_reserve+0xd4>
            vec->size = new_capacity;
    8001626a:	fd843783          	ld	a5,-40(s0)
    8001626e:	fd442703          	lw	a4,-44(s0)
    80016272:	c398                	sw	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80016274:	fe042623          	sw	zero,-20(s0)
    80016278:	a02d                	j	800162a2 <vector_reserve+0x102>
            vals[i] = vec->values[i];
    8001627a:	fd843783          	ld	a5,-40(s0)
    8001627e:	6798                	ld	a4,8(a5)
    80016280:	fec46783          	lwu	a5,-20(s0)
    80016284:	078e                	slli	a5,a5,0x3
    80016286:	973e                	add	a4,a4,a5
    80016288:	fec46783          	lwu	a5,-20(s0)
    8001628c:	078e                	slli	a5,a5,0x3
    8001628e:	fe043683          	ld	a3,-32(s0)
    80016292:	97b6                	add	a5,a5,a3
    80016294:	6318                	ld	a4,0(a4)
    80016296:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80016298:	fec42783          	lw	a5,-20(s0)
    8001629c:	2785                	addiw	a5,a5,1
    8001629e:	fef42623          	sw	a5,-20(s0)
    800162a2:	fd843783          	ld	a5,-40(s0)
    800162a6:	4398                	lw	a4,0(a5)
    800162a8:	fec42783          	lw	a5,-20(s0)
    800162ac:	2781                	sext.w	a5,a5
    800162ae:	fce7e6e3          	bltu	a5,a4,8001627a <vector_reserve+0xda>
        g_kfree(vec->values);
    800162b2:	fd843783          	ld	a5,-40(s0)
    800162b6:	679c                	ld	a5,8(a5)
    800162b8:	853e                	mv	a0,a5
    800162ba:	a0dfe0ef          	jal	ra,80014cc6 <g_kfree>
        vec->values = vals;
    800162be:	fd843783          	ld	a5,-40(s0)
    800162c2:	fe043703          	ld	a4,-32(s0)
    800162c6:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    800162c8:	fd843783          	ld	a5,-40(s0)
    800162cc:	fd442703          	lw	a4,-44(s0)
    800162d0:	c3d8                	sw	a4,4(a5)
}
    800162d2:	0001                	nop
    800162d4:	70a2                	ld	ra,40(sp)
    800162d6:	7402                	ld	s0,32(sp)
    800162d8:	6145                	addi	sp,sp,48
    800162da:	8082                	ret

00000000800162dc <vector_remove>:

bool vector_remove(Vector *vec, uint32_t idx) {
    800162dc:	1101                	addi	sp,sp,-32
    800162de:	ec22                	sd	s0,24(sp)
    800162e0:	1000                	addi	s0,sp,32
    800162e2:	fea43423          	sd	a0,-24(s0)
    800162e6:	87ae                	mv	a5,a1
    800162e8:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    800162ec:	fe843783          	ld	a5,-24(s0)
    800162f0:	4398                	lw	a4,0(a5)
    800162f2:	fe442783          	lw	a5,-28(s0)
    800162f6:	2781                	sext.w	a5,a5
    800162f8:	00e7e463          	bltu	a5,a4,80016300 <vector_remove+0x24>
        return false;
    800162fc:	4781                	li	a5,0
    800162fe:	a8a9                	j	80016358 <vector_remove+0x7c>
    }
    vec->size -= 1;
    80016300:	fe843783          	ld	a5,-24(s0)
    80016304:	439c                	lw	a5,0(a5)
    80016306:	37fd                	addiw	a5,a5,-1
    80016308:	0007871b          	sext.w	a4,a5
    8001630c:	fe843783          	ld	a5,-24(s0)
    80016310:	c398                	sw	a4,0(a5)
    for (;idx < vec->size;idx++) {
    80016312:	a815                	j	80016346 <vector_remove+0x6a>
        vec->values[idx] = vec->values[idx + 1];
    80016314:	fe843783          	ld	a5,-24(s0)
    80016318:	6798                	ld	a4,8(a5)
    8001631a:	fe442783          	lw	a5,-28(s0)
    8001631e:	2785                	addiw	a5,a5,1
    80016320:	2781                	sext.w	a5,a5
    80016322:	1782                	slli	a5,a5,0x20
    80016324:	9381                	srli	a5,a5,0x20
    80016326:	078e                	slli	a5,a5,0x3
    80016328:	973e                	add	a4,a4,a5
    8001632a:	fe843783          	ld	a5,-24(s0)
    8001632e:	6794                	ld	a3,8(a5)
    80016330:	fe446783          	lwu	a5,-28(s0)
    80016334:	078e                	slli	a5,a5,0x3
    80016336:	97b6                	add	a5,a5,a3
    80016338:	6318                	ld	a4,0(a4)
    8001633a:	e398                	sd	a4,0(a5)
    for (;idx < vec->size;idx++) {
    8001633c:	fe442783          	lw	a5,-28(s0)
    80016340:	2785                	addiw	a5,a5,1
    80016342:	fef42223          	sw	a5,-28(s0)
    80016346:	fe843783          	ld	a5,-24(s0)
    8001634a:	4398                	lw	a4,0(a5)
    8001634c:	fe442783          	lw	a5,-28(s0)
    80016350:	2781                	sext.w	a5,a5
    80016352:	fce7e1e3          	bltu	a5,a4,80016314 <vector_remove+0x38>
    }
    return true;
    80016356:	4785                	li	a5,1
}
    80016358:	853e                	mv	a0,a5
    8001635a:	6462                	ld	s0,24(sp)
    8001635c:	6105                	addi	sp,sp,32
    8001635e:	8082                	ret

0000000080016360 <vector_remove_value>:

bool vector_remove_value(Vector *vec, uint64_t val) {
    80016360:	7179                	addi	sp,sp,-48
    80016362:	f406                	sd	ra,40(sp)
    80016364:	f022                	sd	s0,32(sp)
    80016366:	1800                	addi	s0,sp,48
    80016368:	fca43c23          	sd	a0,-40(s0)
    8001636c:	fcb43823          	sd	a1,-48(s0)
    uint32_t i;
    for (i = 0;i < vec->size;i++) {
    80016370:	fe042623          	sw	zero,-20(s0)
    80016374:	a81d                	j	800163aa <vector_remove_value+0x4a>
        if (vec->values[i] == val) {
    80016376:	fd843783          	ld	a5,-40(s0)
    8001637a:	6798                	ld	a4,8(a5)
    8001637c:	fec46783          	lwu	a5,-20(s0)
    80016380:	078e                	slli	a5,a5,0x3
    80016382:	97ba                	add	a5,a5,a4
    80016384:	639c                	ld	a5,0(a5)
    80016386:	fd043703          	ld	a4,-48(s0)
    8001638a:	00f71b63          	bne	a4,a5,800163a0 <vector_remove_value+0x40>
            vector_remove(vec, i);
    8001638e:	fec42783          	lw	a5,-20(s0)
    80016392:	85be                	mv	a1,a5
    80016394:	fd843503          	ld	a0,-40(s0)
    80016398:	f45ff0ef          	jal	ra,800162dc <vector_remove>
            return true;
    8001639c:	4785                	li	a5,1
    8001639e:	a839                	j	800163bc <vector_remove_value+0x5c>
    for (i = 0;i < vec->size;i++) {
    800163a0:	fec42783          	lw	a5,-20(s0)
    800163a4:	2785                	addiw	a5,a5,1
    800163a6:	fef42623          	sw	a5,-20(s0)
    800163aa:	fd843783          	ld	a5,-40(s0)
    800163ae:	4398                	lw	a4,0(a5)
    800163b0:	fec42783          	lw	a5,-20(s0)
    800163b4:	2781                	sext.w	a5,a5
    800163b6:	fce7e0e3          	bltu	a5,a4,80016376 <vector_remove_value+0x16>
        }
    }
    return false;
    800163ba:	4781                	li	a5,0
}
    800163bc:	853e                	mv	a0,a5
    800163be:	70a2                	ld	ra,40(sp)
    800163c0:	7402                	ld	s0,32(sp)
    800163c2:	6145                	addi	sp,sp,48
    800163c4:	8082                	ret

00000000800163c6 <vector_clear>:

void vector_clear(Vector *vec) {
    800163c6:	1101                	addi	sp,sp,-32
    800163c8:	ec06                	sd	ra,24(sp)
    800163ca:	e822                	sd	s0,16(sp)
    800163cc:	1000                	addi	s0,sp,32
    800163ce:	fea43423          	sd	a0,-24(s0)
    vector_resize(vec, 0);
    800163d2:	4581                	li	a1,0
    800163d4:	fe843503          	ld	a0,-24(s0)
    800163d8:	d25ff0ef          	jal	ra,800160fc <vector_resize>
}
    800163dc:	0001                	nop
    800163de:	60e2                	ld	ra,24(sp)
    800163e0:	6442                	ld	s0,16(sp)
    800163e2:	6105                	addi	sp,sp,32
    800163e4:	8082                	ret

00000000800163e6 <vector_binsearch_ascending>:

int vector_binsearch_ascending(struct Vector *vec, uint64_t key) {
    800163e6:	7179                	addi	sp,sp,-48
    800163e8:	f406                	sd	ra,40(sp)
    800163ea:	f022                	sd	s0,32(sp)
    800163ec:	1800                	addi	s0,sp,48
    800163ee:	fca43c23          	sd	a0,-40(s0)
    800163f2:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    800163f6:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec);
    800163fa:	fd843503          	ld	a0,-40(s0)
    800163fe:	356000ef          	jal	ra,80016754 <vector_size>
    80016402:	87aa                	mv	a5,a0
    80016404:	2781                	sext.w	a5,a5
    80016406:	fef42423          	sw	a5,-24(s0)

    while (low < high) {
    8001640a:	a0ad                	j	80016474 <vector_binsearch_ascending+0x8e>
        int mid = (low + high) / 2;
    8001640c:	fec42703          	lw	a4,-20(s0)
    80016410:	fe842783          	lw	a5,-24(s0)
    80016414:	9fb9                	addw	a5,a5,a4
    80016416:	2781                	sext.w	a5,a5
    80016418:	01f7d71b          	srliw	a4,a5,0x1f
    8001641c:	9fb9                	addw	a5,a5,a4
    8001641e:	4017d79b          	sraiw	a5,a5,0x1
    80016422:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) > key) {
    80016426:	fe442783          	lw	a5,-28(s0)
    8001642a:	85be                	mv	a1,a5
    8001642c:	fd843503          	ld	a0,-40(s0)
    80016430:	c13ff0ef          	jal	ra,80016042 <vector_get_unchecked>
    80016434:	872a                	mv	a4,a0
    80016436:	fd043783          	ld	a5,-48(s0)
    8001643a:	00e7f863          	bgeu	a5,a4,8001644a <vector_binsearch_ascending+0x64>
            high = mid - 1;
    8001643e:	fe442783          	lw	a5,-28(s0)
    80016442:	37fd                	addiw	a5,a5,-1
    80016444:	fef42423          	sw	a5,-24(s0)
    80016448:	a035                	j	80016474 <vector_binsearch_ascending+0x8e>
        }
        else if (vector_get_unchecked(vec, mid) < key) {
    8001644a:	fe442783          	lw	a5,-28(s0)
    8001644e:	85be                	mv	a1,a5
    80016450:	fd843503          	ld	a0,-40(s0)
    80016454:	befff0ef          	jal	ra,80016042 <vector_get_unchecked>
    80016458:	872a                	mv	a4,a0
    8001645a:	fd043783          	ld	a5,-48(s0)
    8001645e:	00f77863          	bgeu	a4,a5,8001646e <vector_binsearch_ascending+0x88>
            low = mid + 1;
    80016462:	fe442783          	lw	a5,-28(s0)
    80016466:	2785                	addiw	a5,a5,1
    80016468:	fef42623          	sw	a5,-20(s0)
    8001646c:	a021                	j	80016474 <vector_binsearch_ascending+0x8e>
        }
        else {
            return mid;
    8001646e:	fe442783          	lw	a5,-28(s0)
    80016472:	a811                	j	80016486 <vector_binsearch_ascending+0xa0>
    while (low < high) {
    80016474:	fec42703          	lw	a4,-20(s0)
    80016478:	fe842783          	lw	a5,-24(s0)
    8001647c:	2701                	sext.w	a4,a4
    8001647e:	2781                	sext.w	a5,a5
    80016480:	f8f746e3          	blt	a4,a5,8001640c <vector_binsearch_ascending+0x26>
        }
    }
    return -1;
    80016484:	57fd                	li	a5,-1
}
    80016486:	853e                	mv	a0,a5
    80016488:	70a2                	ld	ra,40(sp)
    8001648a:	7402                	ld	s0,32(sp)
    8001648c:	6145                	addi	sp,sp,48
    8001648e:	8082                	ret

0000000080016490 <vector_binsearch_descending>:

int vector_binsearch_descending(struct Vector *vec, uint64_t key) {
    80016490:	7179                	addi	sp,sp,-48
    80016492:	f406                	sd	ra,40(sp)
    80016494:	f022                	sd	s0,32(sp)
    80016496:	1800                	addi	s0,sp,48
    80016498:	fca43c23          	sd	a0,-40(s0)
    8001649c:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    800164a0:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec) - 1;
    800164a4:	fd843503          	ld	a0,-40(s0)
    800164a8:	2ac000ef          	jal	ra,80016754 <vector_size>
    800164ac:	87aa                	mv	a5,a0
    800164ae:	2781                	sext.w	a5,a5
    800164b0:	37fd                	addiw	a5,a5,-1
    800164b2:	2781                	sext.w	a5,a5
    800164b4:	fef42423          	sw	a5,-24(s0)

    while (low <= high) {
    800164b8:	a0ad                	j	80016522 <vector_binsearch_descending+0x92>
        int mid = (low + high) / 2;
    800164ba:	fec42703          	lw	a4,-20(s0)
    800164be:	fe842783          	lw	a5,-24(s0)
    800164c2:	9fb9                	addw	a5,a5,a4
    800164c4:	2781                	sext.w	a5,a5
    800164c6:	01f7d71b          	srliw	a4,a5,0x1f
    800164ca:	9fb9                	addw	a5,a5,a4
    800164cc:	4017d79b          	sraiw	a5,a5,0x1
    800164d0:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) < key) {
    800164d4:	fe442783          	lw	a5,-28(s0)
    800164d8:	85be                	mv	a1,a5
    800164da:	fd843503          	ld	a0,-40(s0)
    800164de:	b65ff0ef          	jal	ra,80016042 <vector_get_unchecked>
    800164e2:	872a                	mv	a4,a0
    800164e4:	fd043783          	ld	a5,-48(s0)
    800164e8:	00f77863          	bgeu	a4,a5,800164f8 <vector_binsearch_descending+0x68>
            high = mid - 1;
    800164ec:	fe442783          	lw	a5,-28(s0)
    800164f0:	37fd                	addiw	a5,a5,-1
    800164f2:	fef42423          	sw	a5,-24(s0)
    800164f6:	a035                	j	80016522 <vector_binsearch_descending+0x92>
        }
        else if (vector_get_unchecked(vec, mid) > key) {
    800164f8:	fe442783          	lw	a5,-28(s0)
    800164fc:	85be                	mv	a1,a5
    800164fe:	fd843503          	ld	a0,-40(s0)
    80016502:	b41ff0ef          	jal	ra,80016042 <vector_get_unchecked>
    80016506:	872a                	mv	a4,a0
    80016508:	fd043783          	ld	a5,-48(s0)
    8001650c:	00e7f863          	bgeu	a5,a4,8001651c <vector_binsearch_descending+0x8c>
            low = mid + 1;
    80016510:	fe442783          	lw	a5,-28(s0)
    80016514:	2785                	addiw	a5,a5,1
    80016516:	fef42623          	sw	a5,-20(s0)
    8001651a:	a021                	j	80016522 <vector_binsearch_descending+0x92>
        }
        else {
            return mid;
    8001651c:	fe442783          	lw	a5,-28(s0)
    80016520:	a811                	j	80016534 <vector_binsearch_descending+0xa4>
    while (low <= high) {
    80016522:	fec42703          	lw	a4,-20(s0)
    80016526:	fe842783          	lw	a5,-24(s0)
    8001652a:	2701                	sext.w	a4,a4
    8001652c:	2781                	sext.w	a5,a5
    8001652e:	f8e7d6e3          	bge	a5,a4,800164ba <vector_binsearch_descending+0x2a>
        }
    }
    return -1;
    80016532:	57fd                	li	a5,-1
}
    80016534:	853e                	mv	a0,a5
    80016536:	70a2                	ld	ra,40(sp)
    80016538:	7402                	ld	s0,32(sp)
    8001653a:	6145                	addi	sp,sp,48
    8001653c:	8082                	ret

000000008001653e <vector_sort>:

void vector_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    8001653e:	1101                	addi	sp,sp,-32
    80016540:	ec06                	sd	ra,24(sp)
    80016542:	e822                	sd	s0,16(sp)
    80016544:	1000                	addi	s0,sp,32
    80016546:	fea43423          	sd	a0,-24(s0)
    8001654a:	feb43023          	sd	a1,-32(s0)
    vector_insertion_sort(vec, comp);
    8001654e:	fe043583          	ld	a1,-32(s0)
    80016552:	fe843503          	ld	a0,-24(s0)
    80016556:	10e000ef          	jal	ra,80016664 <vector_insertion_sort>
}
    8001655a:	0001                	nop
    8001655c:	60e2                	ld	ra,24(sp)
    8001655e:	6442                	ld	s0,16(sp)
    80016560:	6105                	addi	sp,sp,32
    80016562:	8082                	ret

0000000080016564 <vector_selection_sort>:

void vector_selection_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    80016564:	715d                	addi	sp,sp,-80
    80016566:	e486                	sd	ra,72(sp)
    80016568:	e0a2                	sd	s0,64(sp)
    8001656a:	fc26                	sd	s1,56(sp)
    8001656c:	0880                	addi	s0,sp,80
    8001656e:	faa43c23          	sd	a0,-72(s0)
    80016572:	fab43823          	sd	a1,-80(s0)
    uint32_t i;
    uint32_t j;
    uint32_t min_idx;
    uint64_t tmp;

    for (i = 0;i < vector_size(vec);i++) {
    80016576:	fc042e23          	sw	zero,-36(s0)
    8001657a:	a0d1                	j	8001663e <vector_selection_sort+0xda>
        min_idx = i;
    8001657c:	fdc42783          	lw	a5,-36(s0)
    80016580:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    80016584:	fdc42783          	lw	a5,-36(s0)
    80016588:	2785                	addiw	a5,a5,1
    8001658a:	fcf42c23          	sw	a5,-40(s0)
    8001658e:	a0a9                	j	800165d8 <vector_selection_sort+0x74>
            if (!comp(vector_get_unchecked(vec, min_idx), vector_get_unchecked(vec, j))) {
    80016590:	fd442783          	lw	a5,-44(s0)
    80016594:	85be                	mv	a1,a5
    80016596:	fb843503          	ld	a0,-72(s0)
    8001659a:	aa9ff0ef          	jal	ra,80016042 <vector_get_unchecked>
    8001659e:	84aa                	mv	s1,a0
    800165a0:	fd842783          	lw	a5,-40(s0)
    800165a4:	85be                	mv	a1,a5
    800165a6:	fb843503          	ld	a0,-72(s0)
    800165aa:	a99ff0ef          	jal	ra,80016042 <vector_get_unchecked>
    800165ae:	87aa                	mv	a5,a0
    800165b0:	fb043703          	ld	a4,-80(s0)
    800165b4:	85be                	mv	a1,a5
    800165b6:	8526                	mv	a0,s1
    800165b8:	9702                	jalr	a4
    800165ba:	87aa                	mv	a5,a0
    800165bc:	0017c793          	xori	a5,a5,1
    800165c0:	0ff7f793          	andi	a5,a5,255
    800165c4:	c789                	beqz	a5,800165ce <vector_selection_sort+0x6a>
                min_idx = j;
    800165c6:	fd842783          	lw	a5,-40(s0)
    800165ca:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    800165ce:	fd842783          	lw	a5,-40(s0)
    800165d2:	2785                	addiw	a5,a5,1
    800165d4:	fcf42c23          	sw	a5,-40(s0)
    800165d8:	fb843503          	ld	a0,-72(s0)
    800165dc:	178000ef          	jal	ra,80016754 <vector_size>
    800165e0:	87aa                	mv	a5,a0
    800165e2:	0007871b          	sext.w	a4,a5
    800165e6:	fd842783          	lw	a5,-40(s0)
    800165ea:	2781                	sext.w	a5,a5
    800165ec:	fae7e2e3          	bltu	a5,a4,80016590 <vector_selection_sort+0x2c>
            }
        }
        tmp = vector_get_unchecked(vec, i);
    800165f0:	fdc42783          	lw	a5,-36(s0)
    800165f4:	85be                	mv	a1,a5
    800165f6:	fb843503          	ld	a0,-72(s0)
    800165fa:	a49ff0ef          	jal	ra,80016042 <vector_get_unchecked>
    800165fe:	fca43423          	sd	a0,-56(s0)
        vector_set(vec, i, vector_get_unchecked(vec, min_idx));
    80016602:	fd442783          	lw	a5,-44(s0)
    80016606:	85be                	mv	a1,a5
    80016608:	fb843503          	ld	a0,-72(s0)
    8001660c:	a37ff0ef          	jal	ra,80016042 <vector_get_unchecked>
    80016610:	872a                	mv	a4,a0
    80016612:	fdc42783          	lw	a5,-36(s0)
    80016616:	863a                	mv	a2,a4
    80016618:	85be                	mv	a1,a5
    8001661a:	fb843503          	ld	a0,-72(s0)
    8001661e:	991ff0ef          	jal	ra,80015fae <vector_set>
        vector_set(vec, min_idx, tmp);
    80016622:	fd442783          	lw	a5,-44(s0)
    80016626:	fc843603          	ld	a2,-56(s0)
    8001662a:	85be                	mv	a1,a5
    8001662c:	fb843503          	ld	a0,-72(s0)
    80016630:	97fff0ef          	jal	ra,80015fae <vector_set>
    for (i = 0;i < vector_size(vec);i++) {
    80016634:	fdc42783          	lw	a5,-36(s0)
    80016638:	2785                	addiw	a5,a5,1
    8001663a:	fcf42e23          	sw	a5,-36(s0)
    8001663e:	fb843503          	ld	a0,-72(s0)
    80016642:	112000ef          	jal	ra,80016754 <vector_size>
    80016646:	87aa                	mv	a5,a0
    80016648:	0007871b          	sext.w	a4,a5
    8001664c:	fdc42783          	lw	a5,-36(s0)
    80016650:	2781                	sext.w	a5,a5
    80016652:	f2e7e5e3          	bltu	a5,a4,8001657c <vector_selection_sort+0x18>
    }
}
    80016656:	0001                	nop
    80016658:	0001                	nop
    8001665a:	60a6                	ld	ra,72(sp)
    8001665c:	6406                	ld	s0,64(sp)
    8001665e:	74e2                	ld	s1,56(sp)
    80016660:	6161                	addi	sp,sp,80
    80016662:	8082                	ret

0000000080016664 <vector_insertion_sort>:

void vector_insertion_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    80016664:	715d                	addi	sp,sp,-80
    80016666:	e486                	sd	ra,72(sp)
    80016668:	e0a2                	sd	s0,64(sp)
    8001666a:	fc26                	sd	s1,56(sp)
    8001666c:	0880                	addi	s0,sp,80
    8001666e:	faa43c23          	sd	a0,-72(s0)
    80016672:	fab43823          	sd	a1,-80(s0)
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    80016676:	4785                	li	a5,1
    80016678:	fcf42e23          	sw	a5,-36(s0)
    8001667c:	a84d                	j	8001672e <vector_insertion_sort+0xca>
        uint32_t j = i;
    8001667e:	fdc42783          	lw	a5,-36(s0)
    80016682:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    80016686:	a8b1                	j	800166e2 <vector_insertion_sort+0x7e>
            uint64_t left = vector_get_unchecked(vec, j - 1);
    80016688:	fd842783          	lw	a5,-40(s0)
    8001668c:	37fd                	addiw	a5,a5,-1
    8001668e:	2781                	sext.w	a5,a5
    80016690:	85be                	mv	a1,a5
    80016692:	fb843503          	ld	a0,-72(s0)
    80016696:	9adff0ef          	jal	ra,80016042 <vector_get_unchecked>
    8001669a:	fca43823          	sd	a0,-48(s0)
            uint64_t right = vector_get_unchecked(vec, j);
    8001669e:	fd842783          	lw	a5,-40(s0)
    800166a2:	85be                	mv	a1,a5
    800166a4:	fb843503          	ld	a0,-72(s0)
    800166a8:	99bff0ef          	jal	ra,80016042 <vector_get_unchecked>
    800166ac:	fca43423          	sd	a0,-56(s0)

            vector_set(vec, j, left);
    800166b0:	fd842783          	lw	a5,-40(s0)
    800166b4:	fd043603          	ld	a2,-48(s0)
    800166b8:	85be                	mv	a1,a5
    800166ba:	fb843503          	ld	a0,-72(s0)
    800166be:	8f1ff0ef          	jal	ra,80015fae <vector_set>
            vector_set(vec, j - 1, right);
    800166c2:	fd842783          	lw	a5,-40(s0)
    800166c6:	37fd                	addiw	a5,a5,-1
    800166c8:	2781                	sext.w	a5,a5
    800166ca:	fc843603          	ld	a2,-56(s0)
    800166ce:	85be                	mv	a1,a5
    800166d0:	fb843503          	ld	a0,-72(s0)
    800166d4:	8dbff0ef          	jal	ra,80015fae <vector_set>

            j -= 1;
    800166d8:	fd842783          	lw	a5,-40(s0)
    800166dc:	37fd                	addiw	a5,a5,-1
    800166de:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    800166e2:	fd842783          	lw	a5,-40(s0)
    800166e6:	2781                	sext.w	a5,a5
    800166e8:	cf95                	beqz	a5,80016724 <vector_insertion_sort+0xc0>
    800166ea:	fd842783          	lw	a5,-40(s0)
    800166ee:	37fd                	addiw	a5,a5,-1
    800166f0:	2781                	sext.w	a5,a5
    800166f2:	85be                	mv	a1,a5
    800166f4:	fb843503          	ld	a0,-72(s0)
    800166f8:	94bff0ef          	jal	ra,80016042 <vector_get_unchecked>
    800166fc:	84aa                	mv	s1,a0
    800166fe:	fd842783          	lw	a5,-40(s0)
    80016702:	85be                	mv	a1,a5
    80016704:	fb843503          	ld	a0,-72(s0)
    80016708:	93bff0ef          	jal	ra,80016042 <vector_get_unchecked>
    8001670c:	87aa                	mv	a5,a0
    8001670e:	fb043703          	ld	a4,-80(s0)
    80016712:	85be                	mv	a1,a5
    80016714:	8526                	mv	a0,s1
    80016716:	9702                	jalr	a4
    80016718:	87aa                	mv	a5,a0
    8001671a:	0017c793          	xori	a5,a5,1
    8001671e:	0ff7f793          	andi	a5,a5,255
    80016722:	f3bd                	bnez	a5,80016688 <vector_insertion_sort+0x24>
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    80016724:	fdc42783          	lw	a5,-36(s0)
    80016728:	2785                	addiw	a5,a5,1
    8001672a:	fcf42e23          	sw	a5,-36(s0)
    8001672e:	fb843503          	ld	a0,-72(s0)
    80016732:	022000ef          	jal	ra,80016754 <vector_size>
    80016736:	87aa                	mv	a5,a0
    80016738:	0007871b          	sext.w	a4,a5
    8001673c:	fdc42783          	lw	a5,-36(s0)
    80016740:	2781                	sext.w	a5,a5
    80016742:	f2e7eee3          	bltu	a5,a4,8001667e <vector_insertion_sort+0x1a>
        }
    }
}
    80016746:	0001                	nop
    80016748:	0001                	nop
    8001674a:	60a6                	ld	ra,72(sp)
    8001674c:	6406                	ld	s0,64(sp)
    8001674e:	74e2                	ld	s1,56(sp)
    80016750:	6161                	addi	sp,sp,80
    80016752:	8082                	ret

0000000080016754 <vector_size>:

uint32_t vector_size(Vector *vec) {
    80016754:	1101                	addi	sp,sp,-32
    80016756:	ec22                	sd	s0,24(sp)
    80016758:	1000                	addi	s0,sp,32
    8001675a:	fea43423          	sd	a0,-24(s0)
    return vec->size;
    8001675e:	fe843783          	ld	a5,-24(s0)
    80016762:	439c                	lw	a5,0(a5)
}
    80016764:	853e                	mv	a0,a5
    80016766:	6462                	ld	s0,24(sp)
    80016768:	6105                	addi	sp,sp,32
    8001676a:	8082                	ret

000000008001676c <vector_capacity>:

uint32_t vector_capacity(Vector *vec) {
    8001676c:	1101                	addi	sp,sp,-32
    8001676e:	ec22                	sd	s0,24(sp)
    80016770:	1000                	addi	s0,sp,32
    80016772:	fea43423          	sd	a0,-24(s0)
    return vec->capacity;
    80016776:	fe843783          	ld	a5,-24(s0)
    8001677a:	43dc                	lw	a5,4(a5)
}
    8001677c:	853e                	mv	a0,a5
    8001677e:	6462                	ld	s0,24(sp)
    80016780:	6105                	addi	sp,sp,32
    80016782:	8082                	ret

0000000080016784 <vector_free>:

void vector_free(Vector *vec) {
    80016784:	1101                	addi	sp,sp,-32
    80016786:	ec06                	sd	ra,24(sp)
    80016788:	e822                	sd	s0,16(sp)
    8001678a:	1000                	addi	s0,sp,32
    8001678c:	fea43423          	sd	a0,-24(s0)
    g_kfree(vec->values);
    80016790:	fe843783          	ld	a5,-24(s0)
    80016794:	679c                	ld	a5,8(a5)
    80016796:	853e                	mv	a0,a5
    80016798:	d2efe0ef          	jal	ra,80014cc6 <g_kfree>
    vec->size = 0;
    8001679c:	fe843783          	ld	a5,-24(s0)
    800167a0:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    800167a4:	fe843783          	ld	a5,-24(s0)
    800167a8:	0007a223          	sw	zero,4(a5)
    g_kfree(vec);
    800167ac:	fe843503          	ld	a0,-24(s0)
    800167b0:	d16fe0ef          	jal	ra,80014cc6 <g_kfree>
}
    800167b4:	0001                	nop
    800167b6:	60e2                	ld	ra,24(sp)
    800167b8:	6442                	ld	s0,16(sp)
    800167ba:	6105                	addi	sp,sp,32
    800167bc:	8082                	ret

00000000800167be <vector_sort_signed_long_comparator_ascending>:

VECTOR_COMPARATOR(vector_sort_signed_long_comparator_ascending) {
    800167be:	1101                	addi	sp,sp,-32
    800167c0:	ec22                	sd	s0,24(sp)
    800167c2:	1000                	addi	s0,sp,32
    800167c4:	fea43423          	sd	a0,-24(s0)
    800167c8:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    800167cc:	fe843703          	ld	a4,-24(s0)
    800167d0:	fe043783          	ld	a5,-32(s0)
    800167d4:	00e7a7b3          	slt	a5,a5,a4
    800167d8:	0017c793          	xori	a5,a5,1
    800167dc:	0ff7f793          	andi	a5,a5,255
}
    800167e0:	853e                	mv	a0,a5
    800167e2:	6462                	ld	s0,24(sp)
    800167e4:	6105                	addi	sp,sp,32
    800167e6:	8082                	ret

00000000800167e8 <vector_sort_signed_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_signed_long_comparator_descending) {
    800167e8:	1101                	addi	sp,sp,-32
    800167ea:	ec22                	sd	s0,24(sp)
    800167ec:	1000                	addi	s0,sp,32
    800167ee:	fea43423          	sd	a0,-24(s0)
    800167f2:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    800167f6:	fe843703          	ld	a4,-24(s0)
    800167fa:	fe043783          	ld	a5,-32(s0)
    800167fe:	00f727b3          	slt	a5,a4,a5
    80016802:	0017c793          	xori	a5,a5,1
    80016806:	0ff7f793          	andi	a5,a5,255
}
    8001680a:	853e                	mv	a0,a5
    8001680c:	6462                	ld	s0,24(sp)
    8001680e:	6105                	addi	sp,sp,32
    80016810:	8082                	ret

0000000080016812 <vector_sort_unsigned_long_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_ascending) {
    80016812:	1101                	addi	sp,sp,-32
    80016814:	ec22                	sd	s0,24(sp)
    80016816:	1000                	addi	s0,sp,32
    80016818:	fea43423          	sd	a0,-24(s0)
    8001681c:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    80016820:	fe843703          	ld	a4,-24(s0)
    80016824:	fe043783          	ld	a5,-32(s0)
    80016828:	00e7b7b3          	sltu	a5,a5,a4
    8001682c:	0017c793          	xori	a5,a5,1
    80016830:	0ff7f793          	andi	a5,a5,255
}
    80016834:	853e                	mv	a0,a5
    80016836:	6462                	ld	s0,24(sp)
    80016838:	6105                	addi	sp,sp,32
    8001683a:	8082                	ret

000000008001683c <vector_sort_unsigned_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_descending) {
    8001683c:	1101                	addi	sp,sp,-32
    8001683e:	ec22                	sd	s0,24(sp)
    80016840:	1000                	addi	s0,sp,32
    80016842:	fea43423          	sd	a0,-24(s0)
    80016846:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    8001684a:	fe843703          	ld	a4,-24(s0)
    8001684e:	fe043783          	ld	a5,-32(s0)
    80016852:	00f737b3          	sltu	a5,a4,a5
    80016856:	0017c793          	xori	a5,a5,1
    8001685a:	0ff7f793          	andi	a5,a5,255
}
    8001685e:	853e                	mv	a0,a5
    80016860:	6462                	ld	s0,24(sp)
    80016862:	6105                	addi	sp,sp,32
    80016864:	8082                	ret

0000000080016866 <vector_sort_string_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_ascending) {
    80016866:	1101                	addi	sp,sp,-32
    80016868:	ec06                	sd	ra,24(sp)
    8001686a:	e822                	sd	s0,16(sp)
    8001686c:	1000                	addi	s0,sp,32
    8001686e:	fea43423          	sd	a0,-24(s0)
    80016872:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    80016876:	fe843783          	ld	a5,-24(s0)
    8001687a:	fe043703          	ld	a4,-32(s0)
    8001687e:	85ba                	mv	a1,a4
    80016880:	853e                	mv	a0,a5
    80016882:	fb1fe0ef          	jal	ra,80015832 <strcmp>
    80016886:	87aa                	mv	a5,a0
    80016888:	0017a793          	slti	a5,a5,1
    8001688c:	0ff7f793          	andi	a5,a5,255
}
    80016890:	853e                	mv	a0,a5
    80016892:	60e2                	ld	ra,24(sp)
    80016894:	6442                	ld	s0,16(sp)
    80016896:	6105                	addi	sp,sp,32
    80016898:	8082                	ret

000000008001689a <vector_sort_string_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_descending) {
    8001689a:	1101                	addi	sp,sp,-32
    8001689c:	ec06                	sd	ra,24(sp)
    8001689e:	e822                	sd	s0,16(sp)
    800168a0:	1000                	addi	s0,sp,32
    800168a2:	fea43423          	sd	a0,-24(s0)
    800168a6:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    800168aa:	fe843783          	ld	a5,-24(s0)
    800168ae:	fe043703          	ld	a4,-32(s0)
    800168b2:	85ba                	mv	a1,a4
    800168b4:	853e                	mv	a0,a5
    800168b6:	f7dfe0ef          	jal	ra,80015832 <strcmp>
    800168ba:	87aa                	mv	a5,a0
    800168bc:	fff7c793          	not	a5,a5
    800168c0:	01f7d79b          	srliw	a5,a5,0x1f
    800168c4:	0ff7f793          	andi	a5,a5,255
}
    800168c8:	853e                	mv	a0,a5
    800168ca:	60e2                	ld	ra,24(sp)
    800168cc:	6442                	ld	s0,16(sp)
    800168ce:	6105                	addi	sp,sp,32
    800168d0:	8082                	ret
