
cosc562.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080010000 <_memory_start>:
    80010000:	fe22                	sd	s0,312(sp)
    80010002:	f1ca                	sd	s2,224(sp)
    80010004:	0bee                	slli	s7,s7,0x1b
    80010006:	dead                	beqz	a3,8000ff80 <i+0x8000ff60>
    80010008:	4b40                	lw	s0,20(a4)
    8001000a:	8001                	c.srli64	s0
	...

0000000080010102 <copy_from>:
*/
unsigned long copy_from(void *dst, 
                        const struct page_table *from_table, 
                        const void *from, 
                        unsigned long size)
{
    80010102:	7119                	addi	sp,sp,-128
    80010104:	fc86                	sd	ra,120(sp)
    80010106:	f8a2                	sd	s0,112(sp)
    80010108:	0100                	addi	s0,sp,128
    8001010a:	f8a43c23          	sd	a0,-104(s0)
    8001010e:	f8b43823          	sd	a1,-112(s0)
    80010112:	f8c43423          	sd	a2,-120(s0)
    80010116:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    8001011a:	fe043423          	sd	zero,-24(s0)

    unsigned long src_start_addr = (unsigned long)from;
    8001011e:	f8843783          	ld	a5,-120(s0)
    80010122:	fcf43423          	sd	a5,-56(s0)
    unsigned long src_end_addr = (unsigned long)from+size;
    80010126:	f8843783          	ld	a5,-120(s0)
    8001012a:	f8043703          	ld	a4,-128(s0)
    8001012e:	97ba                	add	a5,a5,a4
    80010130:	fcf43023          	sd	a5,-64(s0)
    unsigned long src_first_page = ALIGN_DOWN_POT(src_start_addr, PAGE_SIZE_4K);
    80010134:	fc843703          	ld	a4,-56(s0)
    80010138:	77fd                	lui	a5,0xfffff
    8001013a:	8ff9                	and	a5,a5,a4
    8001013c:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    80010140:	fb843783          	ld	a5,-72(s0)
    80010144:	fef43023          	sd	a5,-32(s0)
    80010148:	a06d                	j	800101f2 <copy_from+0xf0>
        void *physical_address = (void*)mmu_translate(from_table, i);
    8001014a:	fe043583          	ld	a1,-32(s0)
    8001014e:	f9043503          	ld	a0,-112(s0)
    80010152:	66e000ef          	jal	ra,800107c0 <mmu_translate>
    80010156:	87aa                	mv	a5,a0
    80010158:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    8001015c:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == src_start_addr;
    80010160:	fe043703          	ld	a4,-32(s0)
    80010164:	fc843783          	ld	a5,-56(s0)
    80010168:	40f707b3          	sub	a5,a4,a5
    8001016c:	0017b793          	seqz	a5,a5
    80010170:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    80010174:	faf44783          	lbu	a5,-81(s0)
    80010178:	0ff7f793          	andi	a5,a5,255
    8001017c:	cb81                	beqz	a5,8001018c <copy_from+0x8a>
            offset = src_start_addr % PAGE_SIZE_4K;
    8001017e:	fc843703          	ld	a4,-56(s0)
    80010182:	6785                	lui	a5,0x1
    80010184:	17fd                	addi	a5,a5,-1
    80010186:	8ff9                	and	a5,a5,a4
    80010188:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    8001018c:	6785                	lui	a5,0x1
    8001018e:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > src_end_addr) {
    80010192:	fe043703          	ld	a4,-32(s0)
    80010196:	6785                	lui	a5,0x1
    80010198:	97ba                	add	a5,a5,a4
    8001019a:	fc043703          	ld	a4,-64(s0)
    8001019e:	00f77a63          	bgeu	a4,a5,800101b2 <copy_from+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = src_end_addr - i;
    800101a2:	fc043703          	ld	a4,-64(s0)
    800101a6:	fe043783          	ld	a5,-32(s0)
    800101aa:	40f707b3          	sub	a5,a4,a5
    800101ae:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(dst + bytes_copied, physical_address + offset, bytes_to_copy_from_page);
    800101b2:	f9843703          	ld	a4,-104(s0)
    800101b6:	fe843783          	ld	a5,-24(s0)
    800101ba:	00f706b3          	add	a3,a4,a5
    800101be:	fb043703          	ld	a4,-80(s0)
    800101c2:	fd843783          	ld	a5,-40(s0)
    800101c6:	97ba                	add	a5,a5,a4
    800101c8:	fd043703          	ld	a4,-48(s0)
    800101cc:	2701                	sext.w	a4,a4
    800101ce:	863a                	mv	a2,a4
    800101d0:	85be                	mv	a1,a5
    800101d2:	8536                	mv	a0,a3
    800101d4:	130050ef          	jal	ra,80015304 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800101d8:	fe843703          	ld	a4,-24(s0)
    800101dc:	fd043783          	ld	a5,-48(s0)
    800101e0:	97ba                	add	a5,a5,a4
    800101e2:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    800101e6:	fe043703          	ld	a4,-32(s0)
    800101ea:	6785                	lui	a5,0x1
    800101ec:	97ba                	add	a5,a5,a4
    800101ee:	fef43023          	sd	a5,-32(s0)
    800101f2:	fe043703          	ld	a4,-32(s0)
    800101f6:	fc043783          	ld	a5,-64(s0)
    800101fa:	f4f768e3          	bltu	a4,a5,8001014a <copy_from+0x48>
    }

    return bytes_copied;
    800101fe:	fe843783          	ld	a5,-24(s0)
}
    80010202:	853e                	mv	a0,a5
    80010204:	70e6                	ld	ra,120(sp)
    80010206:	7446                	ld	s0,112(sp)
    80010208:	6109                	addi	sp,sp,128
    8001020a:	8082                	ret

000000008001020c <copy_to>:
*/
unsigned long copy_to(void *to, 
                      const struct page_table *to_table, 
                      const void *src, 
                      unsigned long size)
{
    8001020c:	7119                	addi	sp,sp,-128
    8001020e:	fc86                	sd	ra,120(sp)
    80010210:	f8a2                	sd	s0,112(sp)
    80010212:	0100                	addi	s0,sp,128
    80010214:	f8a43c23          	sd	a0,-104(s0)
    80010218:	f8b43823          	sd	a1,-112(s0)
    8001021c:	f8c43423          	sd	a2,-120(s0)
    80010220:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    80010224:	fe043423          	sd	zero,-24(s0)

    unsigned long dst_start_addr = (unsigned long)to;
    80010228:	f9843783          	ld	a5,-104(s0)
    8001022c:	fcf43423          	sd	a5,-56(s0)
    unsigned long dst_end_addr = (unsigned long)to+size;
    80010230:	f9843783          	ld	a5,-104(s0)
    80010234:	f8043703          	ld	a4,-128(s0)
    80010238:	97ba                	add	a5,a5,a4
    8001023a:	fcf43023          	sd	a5,-64(s0)
    unsigned long dst_first_page = ALIGN_DOWN_POT(dst_start_addr, PAGE_SIZE_4K);
    8001023e:	fc843703          	ld	a4,-56(s0)
    80010242:	77fd                	lui	a5,0xfffff
    80010244:	8ff9                	and	a5,a5,a4
    80010246:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    8001024a:	fb843783          	ld	a5,-72(s0)
    8001024e:	fef43023          	sd	a5,-32(s0)
    80010252:	a06d                	j	800102fc <copy_to+0xf0>
        void *physical_address = (void*)mmu_translate(to_table, i);
    80010254:	fe043583          	ld	a1,-32(s0)
    80010258:	f9043503          	ld	a0,-112(s0)
    8001025c:	564000ef          	jal	ra,800107c0 <mmu_translate>
    80010260:	87aa                	mv	a5,a0
    80010262:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    80010266:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == dst_start_addr;
    8001026a:	fe043703          	ld	a4,-32(s0)
    8001026e:	fc843783          	ld	a5,-56(s0)
    80010272:	40f707b3          	sub	a5,a4,a5
    80010276:	0017b793          	seqz	a5,a5
    8001027a:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    8001027e:	faf44783          	lbu	a5,-81(s0)
    80010282:	0ff7f793          	andi	a5,a5,255
    80010286:	cb81                	beqz	a5,80010296 <copy_to+0x8a>
            offset = dst_start_addr % PAGE_SIZE_4K;
    80010288:	fc843703          	ld	a4,-56(s0)
    8001028c:	6785                	lui	a5,0x1
    8001028e:	17fd                	addi	a5,a5,-1
    80010290:	8ff9                	and	a5,a5,a4
    80010292:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    80010296:	6785                	lui	a5,0x1
    80010298:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > dst_end_addr) {
    8001029c:	fe043703          	ld	a4,-32(s0)
    800102a0:	6785                	lui	a5,0x1
    800102a2:	97ba                	add	a5,a5,a4
    800102a4:	fc043703          	ld	a4,-64(s0)
    800102a8:	00f77a63          	bgeu	a4,a5,800102bc <copy_to+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = dst_end_addr - i;
    800102ac:	fc043703          	ld	a4,-64(s0)
    800102b0:	fe043783          	ld	a5,-32(s0)
    800102b4:	40f707b3          	sub	a5,a4,a5
    800102b8:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(physical_address + offset, src + bytes_copied, bytes_to_copy_from_page);
    800102bc:	fb043703          	ld	a4,-80(s0)
    800102c0:	fd843783          	ld	a5,-40(s0)
    800102c4:	00f706b3          	add	a3,a4,a5
    800102c8:	f8843703          	ld	a4,-120(s0)
    800102cc:	fe843783          	ld	a5,-24(s0)
    800102d0:	97ba                	add	a5,a5,a4
    800102d2:	fd043703          	ld	a4,-48(s0)
    800102d6:	2701                	sext.w	a4,a4
    800102d8:	863a                	mv	a2,a4
    800102da:	85be                	mv	a1,a5
    800102dc:	8536                	mv	a0,a3
    800102de:	026050ef          	jal	ra,80015304 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800102e2:	fe843703          	ld	a4,-24(s0)
    800102e6:	fd043783          	ld	a5,-48(s0)
    800102ea:	97ba                	add	a5,a5,a4
    800102ec:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    800102f0:	fe043703          	ld	a4,-32(s0)
    800102f4:	6785                	lui	a5,0x1
    800102f6:	97ba                	add	a5,a5,a4
    800102f8:	fef43023          	sd	a5,-32(s0)
    800102fc:	fe043703          	ld	a4,-32(s0)
    80010300:	fc043783          	ld	a5,-64(s0)
    80010304:	f4f768e3          	bltu	a4,a5,80010254 <copy_to+0x48>
    }

    return bytes_copied;
    80010308:	fe843783          	ld	a5,-24(s0)
    8001030c:	853e                	mv	a0,a5
    8001030e:	70e6                	ld	ra,120(sp)
    80010310:	7446                	ld	s0,112(sp)
    80010312:	6109                	addi	sp,sp,128
    80010314:	8082                	ret

0000000080010316 <syscall_exit>:
    (void)hart;         \
    (void)epc;          \
    (void)scratch

SYSCALL(exit)
{
    80010316:	7179                	addi	sp,sp,-48
    80010318:	f422                	sd	s0,40(sp)
    8001031a:	1800                	addi	s0,sp,48
    8001031c:	87aa                	mv	a5,a0
    8001031e:	feb43023          	sd	a1,-32(s0)
    80010322:	fcc43c23          	sd	a2,-40(s0)
    80010326:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Kill the current process on this HART and schedule the next
    // one.
}
    8001032a:	0001                	nop
    8001032c:	7422                	ld	s0,40(sp)
    8001032e:	6145                	addi	sp,sp,48
    80010330:	8082                	ret

0000000080010332 <syscall_putchar>:

SYSCALL(putchar)
{
    80010332:	7179                	addi	sp,sp,-48
    80010334:	f406                	sd	ra,40(sp)
    80010336:	f022                	sd	s0,32(sp)
    80010338:	1800                	addi	s0,sp,48
    8001033a:	87aa                	mv	a5,a0
    8001033c:	feb43023          	sd	a1,-32(s0)
    80010340:	fcc43c23          	sd	a2,-40(s0)
    80010344:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    sbi_putchar(XREG(A0));
    80010348:	fd843783          	ld	a5,-40(s0)
    8001034c:	05078793          	addi	a5,a5,80 # 1050 <i+0x1030>
    80010350:	639c                	ld	a5,0(a5)
    80010352:	0ff7f793          	andi	a5,a5,255
    80010356:	853e                	mv	a0,a5
    80010358:	377010ef          	jal	ra,80011ece <sbi_putchar>
}
    8001035c:	0001                	nop
    8001035e:	70a2                	ld	ra,40(sp)
    80010360:	7402                	ld	s0,32(sp)
    80010362:	6145                	addi	sp,sp,48
    80010364:	8082                	ret

0000000080010366 <syscall_getchar>:

SYSCALL(getchar)
{
    80010366:	7179                	addi	sp,sp,-48
    80010368:	f406                	sd	ra,40(sp)
    8001036a:	f022                	sd	s0,32(sp)
    8001036c:	1800                	addi	s0,sp,48
    8001036e:	87aa                	mv	a5,a0
    80010370:	feb43023          	sd	a1,-32(s0)
    80010374:	fcc43c23          	sd	a2,-40(s0)
    80010378:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    XREG(A0) = sbi_getchar();
    8001037c:	375010ef          	jal	ra,80011ef0 <sbi_getchar>
    80010380:	87aa                	mv	a5,a0
    80010382:	873e                	mv	a4,a5
    80010384:	fd843783          	ld	a5,-40(s0)
    80010388:	05078793          	addi	a5,a5,80
    8001038c:	e398                	sd	a4,0(a5)
}
    8001038e:	0001                	nop
    80010390:	70a2                	ld	ra,40(sp)
    80010392:	7402                	ld	s0,32(sp)
    80010394:	6145                	addi	sp,sp,48
    80010396:	8082                	ret

0000000080010398 <syscall_yield>:

SYSCALL(yield)
{
    80010398:	7179                	addi	sp,sp,-48
    8001039a:	f422                	sd	s0,40(sp)
    8001039c:	1800                	addi	s0,sp,48
    8001039e:	87aa                	mv	a5,a0
    800103a0:	feb43023          	sd	a1,-32(s0)
    800103a4:	fcc43c23          	sd	a2,-40(s0)
    800103a8:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // sched_invoke(hart);
}
    800103ac:	0001                	nop
    800103ae:	7422                	ld	s0,40(sp)
    800103b0:	6145                	addi	sp,sp,48
    800103b2:	8082                	ret

00000000800103b4 <syscall_sleep>:

SYSCALL(sleep)
{
    800103b4:	7179                	addi	sp,sp,-48
    800103b6:	f422                	sd	s0,40(sp)
    800103b8:	1800                	addi	s0,sp,48
    800103ba:	87aa                	mv	a5,a0
    800103bc:	feb43023          	sd	a1,-32(s0)
    800103c0:	fcc43c23          	sd	a2,-40(s0)
    800103c4:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Sleep the process. VIRT_TIMER_FREQ is 10MHz, divided by 1000, we get 10KHz
    //     p->sleep_until = sbi_get_time() + XREG(A0) * VIRT_TIMER_FREQ / 1000;
    //     p->state = PS_SLEEPING;
}
    800103c8:	0001                	nop
    800103ca:	7422                	ld	s0,40(sp)
    800103cc:	6145                	addi	sp,sp,48
    800103ce:	8082                	ret

00000000800103d0 <syscall_events>:

SYSCALL(events)
{
    800103d0:	7179                	addi	sp,sp,-48
    800103d2:	f422                	sd	s0,40(sp)
    800103d4:	1800                	addi	s0,sp,48
    800103d6:	87aa                	mv	a5,a0
    800103d8:	feb43023          	sd	a1,-32(s0)
    800103dc:	fcc43c23          	sd	a2,-40(s0)
    800103e0:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    
}
    800103e4:	0001                	nop
    800103e6:	7422                	ld	s0,40(sp)
    800103e8:	6145                	addi	sp,sp,48
    800103ea:	8082                	ret

00000000800103ec <syscall_handle>:

static const int NUM_SYSCALLS = sizeof(SYSCALLS) / sizeof(SYSCALLS[0]);

// We get here from the trap.c if this is an ECALL from U-MODE
void syscall_handle(int hart, uint64_t epc, int64_t *scratch)
{
    800103ec:	7179                	addi	sp,sp,-48
    800103ee:	f406                	sd	ra,40(sp)
    800103f0:	f022                	sd	s0,32(sp)
    800103f2:	1800                	addi	s0,sp,48
    800103f4:	87aa                	mv	a5,a0
    800103f6:	feb43023          	sd	a1,-32(s0)
    800103fa:	fcc43c23          	sd	a2,-40(s0)
    800103fe:	fef42623          	sw	a5,-20(s0)
    // Sched invoke will save sepc, so we want it to resume
    // 4 bytes ahead, which will be the next instruction.
    CSR_WRITE("sepc", epc + 4);
    80010402:	fe043783          	ld	a5,-32(s0)
    80010406:	0791                	addi	a5,a5,4
    80010408:	14179073          	csrw	sepc,a5

    if (XREG(A7) >= NUM_SYSCALLS || SYSCALLS[XREG(A7)] == NULL) {
    8001040c:	fd843783          	ld	a5,-40(s0)
    80010410:	08878793          	addi	a5,a5,136
    80010414:	639c                	ld	a5,0(a5)
    80010416:	4719                	li	a4,6
    80010418:	00e7df63          	bge	a5,a4,80010436 <syscall_handle+0x4a>
    8001041c:	fd843783          	ld	a5,-40(s0)
    80010420:	08878793          	addi	a5,a5,136
    80010424:	639c                	ld	a5,0(a5)
    80010426:	00009717          	auipc	a4,0x9
    8001042a:	bda70713          	addi	a4,a4,-1062 # 80019000 <SYSCALLS>
    8001042e:	078e                	slli	a5,a5,0x3
    80010430:	97ba                	add	a5,a5,a4
    80010432:	639c                	ld	a5,0(a5)
    80010434:	eb81                	bnez	a5,80010444 <syscall_handle+0x58>
        // Invalid syscall
        XREG(A0) = -EINVAL;
    80010436:	fd843783          	ld	a5,-40(s0)
    8001043a:	05078793          	addi	a5,a5,80
    8001043e:	5729                	li	a4,-22
    80010440:	e398                	sd	a4,0(a5)
    80010442:	a035                	j	8001046e <syscall_handle+0x82>
    }
    else {
        SYSCALL_EXEC(XREG(A7));
    80010444:	fd843783          	ld	a5,-40(s0)
    80010448:	08878793          	addi	a5,a5,136
    8001044c:	639c                	ld	a5,0(a5)
    8001044e:	00009717          	auipc	a4,0x9
    80010452:	bb270713          	addi	a4,a4,-1102 # 80019000 <SYSCALLS>
    80010456:	078e                	slli	a5,a5,0x3
    80010458:	97ba                	add	a5,a5,a4
    8001045a:	6398                	ld	a4,0(a5)
    8001045c:	fec42783          	lw	a5,-20(s0)
    80010460:	fd843603          	ld	a2,-40(s0)
    80010464:	fe043583          	ld	a1,-32(s0)
    80010468:	853e                	mv	a0,a5
    8001046a:	9702                	jalr	a4
    }
}
    8001046c:	0001                	nop
    8001046e:	0001                	nop
    80010470:	70a2                	ld	ra,40(sp)
    80010472:	7402                	ld	s0,32(sp)
    80010474:	6145                	addi	sp,sp,48
    80010476:	8082                	ret

0000000080010478 <mmu_table_create>:
#define ADDR_1_BIT   21
#define ADDR_2_BIT   30


struct page_table *mmu_table_create(void)
{
    80010478:	1141                	addi	sp,sp,-16
    8001047a:	e406                	sd	ra,8(sp)
    8001047c:	e022                	sd	s0,0(sp)
    8001047e:	0800                	addi	s0,sp,16
    return page_zalloc();
    80010480:	4505                	li	a0,1
    80010482:	50a020ef          	jal	ra,8001298c <page_znalloc>
    80010486:	87aa                	mv	a5,a0
}
    80010488:	853e                	mv	a0,a5
    8001048a:	60a2                	ld	ra,8(sp)
    8001048c:	6402                	ld	s0,0(sp)
    8001048e:	0141                	addi	sp,sp,16
    80010490:	8082                	ret

0000000080010492 <is_valid>:

// Check the valid bit of a page table entry.
static inline bool is_valid(unsigned long pte)
{
    80010492:	1101                	addi	sp,sp,-32
    80010494:	ec22                	sd	s0,24(sp)
    80010496:	1000                	addi	s0,sp,32
    80010498:	fea43423          	sd	a0,-24(s0)
    return pte & 1UL;
    8001049c:	fe843783          	ld	a5,-24(s0)
    800104a0:	8b85                	andi	a5,a5,1
    800104a2:	00f037b3          	snez	a5,a5
    800104a6:	0ff7f793          	andi	a5,a5,255
}
    800104aa:	853e                	mv	a0,a5
    800104ac:	6462                	ld	s0,24(sp)
    800104ae:	6105                	addi	sp,sp,32
    800104b0:	8082                	ret

00000000800104b2 <mmu_map>:
{
    return (pte & 0xE) != 0;
}

bool mmu_map(struct page_table *tab, uint64_t vaddr, uint64_t paddr, uint8_t lvl, uint64_t bits)
{
    800104b2:	7175                	addi	sp,sp,-144
    800104b4:	e506                	sd	ra,136(sp)
    800104b6:	e122                	sd	s0,128(sp)
    800104b8:	0900                	addi	s0,sp,144
    800104ba:	f8a43c23          	sd	a0,-104(s0)
    800104be:	f8b43823          	sd	a1,-112(s0)
    800104c2:	f8c43423          	sd	a2,-120(s0)
    800104c6:	87b6                	mv	a5,a3
    800104c8:	f6e43c23          	sd	a4,-136(s0)
    800104cc:	f8f403a3          	sb	a5,-121(s0)
    if (tab == NULL || lvl > MMU_LEVEL_1G || (bits & 0xE) == 0) {
    800104d0:	f9843783          	ld	a5,-104(s0)
    800104d4:	cf81                	beqz	a5,800104ec <mmu_map+0x3a>
    800104d6:	f8744783          	lbu	a5,-121(s0)
    800104da:	0ff7f713          	andi	a4,a5,255
    800104de:	4789                	li	a5,2
    800104e0:	00e7e663          	bltu	a5,a4,800104ec <mmu_map+0x3a>
    800104e4:	f7843783          	ld	a5,-136(s0)
    800104e8:	8bb9                	andi	a5,a5,14
    800104ea:	e38d                	bnez	a5,8001050c <mmu_map+0x5a>
        debugf("mmu_map: Invalid parameters received. tab: 0x%08lx, lvl: %d, bits: 0x%08lx", tab, lvl, bits);
    800104ec:	f8744783          	lbu	a5,-121(s0)
    800104f0:	2781                	sext.w	a5,a5
    800104f2:	f7843683          	ld	a3,-136(s0)
    800104f6:	863e                	mv	a2,a5
    800104f8:	f9843583          	ld	a1,-104(s0)
    800104fc:	00009517          	auipc	a0,0x9
    80010500:	b3450513          	addi	a0,a0,-1228 # 80019030 <SYSCALLS+0x30>
    80010504:	0b3010ef          	jal	ra,80011db6 <debugf>
        return false;
    80010508:	4781                	li	a5,0
    8001050a:	a43d                	j	80010738 <mmu_map+0x286>
    }
    if (vaddr & (PAGE_SIZE - 1) || paddr & (PAGE_SIZE - 1)) {
    8001050c:	f9043703          	ld	a4,-112(s0)
    80010510:	6785                	lui	a5,0x1
    80010512:	17fd                	addi	a5,a5,-1
    80010514:	8ff9                	and	a5,a5,a4
    80010516:	e799                	bnez	a5,80010524 <mmu_map+0x72>
    80010518:	f8843703          	ld	a4,-120(s0)
    8001051c:	6785                	lui	a5,0x1
    8001051e:	17fd                	addi	a5,a5,-1
    80010520:	8ff9                	and	a5,a5,a4
    80010522:	cf89                	beqz	a5,8001053c <mmu_map+0x8a>
        debugf("mmu_map: Misaligned addresses received. vaddr: 0x%08lx, paddr: 0x%08lx", vaddr, paddr);
    80010524:	f8843603          	ld	a2,-120(s0)
    80010528:	f9043583          	ld	a1,-112(s0)
    8001052c:	00009517          	auipc	a0,0x9
    80010530:	b5450513          	addi	a0,a0,-1196 # 80019080 <SYSCALLS+0x80>
    80010534:	083010ef          	jal	ra,80011db6 <debugf>
        return false;
    80010538:	4781                	li	a5,0
    8001053a:	aafd                	j	80010738 <mmu_map+0x286>
    }

    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    8001053c:	f9043783          	ld	a5,-112(s0)
    80010540:	83b1                	srli	a5,a5,0xc
    80010542:	1ff7f793          	andi	a5,a5,511
    80010546:	fcf43023          	sd	a5,-64(s0)
    8001054a:	f9043783          	ld	a5,-112(s0)
    8001054e:	83d5                	srli	a5,a5,0x15
    80010550:	1ff7f793          	andi	a5,a5,511
    80010554:	fcf43423          	sd	a5,-56(s0)
                            (vaddr >> ADDR_2_BIT) & 0x1FF};
    80010558:	f9043783          	ld	a5,-112(s0)
    8001055c:	83f9                	srli	a5,a5,0x1e
    8001055e:	1ff7f793          	andi	a5,a5,511
    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    80010562:	fcf43823          	sd	a5,-48(s0)
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    80010566:	f8843783          	ld	a5,-120(s0)
    8001056a:	83b1                	srli	a5,a5,0xc
    8001056c:	1ff7f793          	andi	a5,a5,511
    80010570:	faf43423          	sd	a5,-88(s0)
    80010574:	f8843783          	ld	a5,-120(s0)
    80010578:	83d5                	srli	a5,a5,0x15
    8001057a:	1ff7f793          	andi	a5,a5,511
    8001057e:	faf43823          	sd	a5,-80(s0)
                            (paddr >> ADDR_2_BIT) & 0x3FFFFFF};
    80010582:	f8843783          	ld	a5,-120(s0)
    80010586:	01e7d713          	srli	a4,a5,0x1e
    8001058a:	040007b7          	lui	a5,0x4000
    8001058e:	17fd                	addi	a5,a5,-1
    80010590:	8ff9                	and	a5,a5,a4
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    80010592:	faf43c23          	sd	a5,-72(s0)

    int i;
    struct page_table *pt = tab;
    80010596:	f9843783          	ld	a5,-104(s0)
    8001059a:	fef43023          	sd	a5,-32(s0)

    for (i = MMU_LEVEL_1G; i > lvl; i -= 1) {
    8001059e:	4789                	li	a5,2
    800105a0:	fef42623          	sw	a5,-20(s0)
    800105a4:	aa31                	j	800106c0 <mmu_map+0x20e>
        unsigned long pte = pt->entries[vpn[i]];
    800105a6:	fec42783          	lw	a5,-20(s0)
    800105aa:	078e                	slli	a5,a5,0x3
    800105ac:	ff040713          	addi	a4,s0,-16
    800105b0:	97ba                	add	a5,a5,a4
    800105b2:	fd07b783          	ld	a5,-48(a5) # 3ffffd0 <i+0x3ffffb0>
    800105b6:	fe043703          	ld	a4,-32(s0)
    800105ba:	078e                	slli	a5,a5,0x3
    800105bc:	97ba                	add	a5,a5,a4
    800105be:	639c                	ld	a5,0(a5)
    800105c0:	fcf43c23          	sd	a5,-40(s0)

        if (!is_valid(pte)) {
    800105c4:	fd843503          	ld	a0,-40(s0)
    800105c8:	ecbff0ef          	jal	ra,80010492 <is_valid>
    800105cc:	87aa                	mv	a5,a0
    800105ce:	0017c793          	xori	a5,a5,1
    800105d2:	0ff7f793          	andi	a5,a5,255
    800105d6:	c3d5                	beqz	a5,8001067a <mmu_map+0x1c8>
            debugf("mmu_map: entry %d in page table at 0x%08lx is invalid\n", vpn[i], pt);
    800105d8:	fec42783          	lw	a5,-20(s0)
    800105dc:	078e                	slli	a5,a5,0x3
    800105de:	ff040713          	addi	a4,s0,-16
    800105e2:	97ba                	add	a5,a5,a4
    800105e4:	fd07b783          	ld	a5,-48(a5)
    800105e8:	fe043603          	ld	a2,-32(s0)
    800105ec:	85be                	mv	a1,a5
    800105ee:	00009517          	auipc	a0,0x9
    800105f2:	ada50513          	addi	a0,a0,-1318 # 800190c8 <SYSCALLS+0xc8>
    800105f6:	7c0010ef          	jal	ra,80011db6 <debugf>
            pt = mmu_table_create();
    800105fa:	e7fff0ef          	jal	ra,80010478 <mmu_table_create>
    800105fe:	fea43023          	sd	a0,-32(s0)
            if (pt == NULL) {
    80010602:	fe043783          	ld	a5,-32(s0)
    80010606:	eb89                	bnez	a5,80010618 <mmu_map+0x166>
                debugf("mmu_map: mmu_table_create returned null");
    80010608:	00009517          	auipc	a0,0x9
    8001060c:	af850513          	addi	a0,a0,-1288 # 80019100 <SYSCALLS+0x100>
    80010610:	7a6010ef          	jal	ra,80011db6 <debugf>
                return false;
    80010614:	4781                	li	a5,0
    80010616:	a20d                	j	80010738 <mmu_map+0x286>
            }
            memset(pt, 0, sizeof(struct page_table));  // Ensure the new table is zeroed out
    80010618:	6605                	lui	a2,0x1
    8001061a:	4581                	li	a1,0
    8001061c:	fe043503          	ld	a0,-32(s0)
    80010620:	3e3040ef          	jal	ra,80015202 <memset>
            tab->entries[vpn[i]] = (unsigned long) pt | PB_VALID;
    80010624:	fe043703          	ld	a4,-32(s0)
    80010628:	fec42783          	lw	a5,-20(s0)
    8001062c:	078e                	slli	a5,a5,0x3
    8001062e:	ff040693          	addi	a3,s0,-16
    80010632:	97b6                	add	a5,a5,a3
    80010634:	fd07b783          	ld	a5,-48(a5)
    80010638:	00176713          	ori	a4,a4,1
    8001063c:	f9843683          	ld	a3,-104(s0)
    80010640:	078e                	slli	a5,a5,0x3
    80010642:	97b6                	add	a5,a5,a3
    80010644:	e398                	sd	a4,0(a5)
            debugf("mmu_map: create a new page table at 0x%08lx\n", pt);
    80010646:	fe043583          	ld	a1,-32(s0)
    8001064a:	00009517          	auipc	a0,0x9
    8001064e:	ade50513          	addi	a0,a0,-1314 # 80019128 <SYSCALLS+0x128>
    80010652:	764010ef          	jal	ra,80011db6 <debugf>
            debugf("mmu_map: set entry %d as lvl %d branch in new page table", vpn[i], i);
    80010656:	fec42783          	lw	a5,-20(s0)
    8001065a:	078e                	slli	a5,a5,0x3
    8001065c:	ff040713          	addi	a4,s0,-16
    80010660:	97ba                	add	a5,a5,a4
    80010662:	fd07b783          	ld	a5,-48(a5)
    80010666:	fec42703          	lw	a4,-20(s0)
    8001066a:	863a                	mv	a2,a4
    8001066c:	85be                	mv	a1,a5
    8001066e:	00009517          	auipc	a0,0x9
    80010672:	aea50513          	addi	a0,a0,-1302 # 80019158 <SYSCALLS+0x158>
    80010676:	740010ef          	jal	ra,80011db6 <debugf>
        }
        
        pt = (struct page_table *)(pt->entries[vpn[i]] & ~0xFFF);
    8001067a:	fec42783          	lw	a5,-20(s0)
    8001067e:	078e                	slli	a5,a5,0x3
    80010680:	ff040713          	addi	a4,s0,-16
    80010684:	97ba                	add	a5,a5,a4
    80010686:	fd07b783          	ld	a5,-48(a5)
    8001068a:	fe043703          	ld	a4,-32(s0)
    8001068e:	078e                	slli	a5,a5,0x3
    80010690:	97ba                	add	a5,a5,a4
    80010692:	6398                	ld	a4,0(a5)
    80010694:	77fd                	lui	a5,0xfffff
    80010696:	8ff9                	and	a5,a5,a4
    80010698:	fef43023          	sd	a5,-32(s0)
        debugf("mmu_map: lvl %d page table is at 0x%08lx\n", i - 1, pt);
    8001069c:	fec42783          	lw	a5,-20(s0)
    800106a0:	37fd                	addiw	a5,a5,-1
    800106a2:	2781                	sext.w	a5,a5
    800106a4:	fe043603          	ld	a2,-32(s0)
    800106a8:	85be                	mv	a1,a5
    800106aa:	00009517          	auipc	a0,0x9
    800106ae:	aee50513          	addi	a0,a0,-1298 # 80019198 <SYSCALLS+0x198>
    800106b2:	704010ef          	jal	ra,80011db6 <debugf>
    for (i = MMU_LEVEL_1G; i > lvl; i -= 1) {
    800106b6:	fec42783          	lw	a5,-20(s0)
    800106ba:	37fd                	addiw	a5,a5,-1
    800106bc:	fef42623          	sw	a5,-20(s0)
    800106c0:	f8744783          	lbu	a5,-121(s0)
    800106c4:	0007871b          	sext.w	a4,a5
    800106c8:	fec42783          	lw	a5,-20(s0)
    800106cc:	2781                	sext.w	a5,a5
    800106ce:	ecf74ce3          	blt	a4,a5,800105a6 <mmu_map+0xf4>
    }

    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    800106d2:	fb843783          	ld	a5,-72(s0)
    800106d6:	01c79713          	slli	a4,a5,0x1c
                          ppn[1] << PTE_PPN1_BIT |
    800106da:	fb043783          	ld	a5,-80(s0)
    800106de:	07ce                	slli	a5,a5,0x13
    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    800106e0:	8f5d                	or	a4,a4,a5
                          ppn[0] << PTE_PPN0_BIT |
    800106e2:	fa843783          	ld	a5,-88(s0)
    800106e6:	07aa                	slli	a5,a5,0xa
                          ppn[1] << PTE_PPN1_BIT |
    800106e8:	8f5d                	or	a4,a4,a5
                          ppn[0] << PTE_PPN0_BIT |
    800106ea:	f7843783          	ld	a5,-136(s0)
    800106ee:	8f5d                	or	a4,a4,a5
    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    800106f0:	fec42783          	lw	a5,-20(s0)
    800106f4:	078e                	slli	a5,a5,0x3
    800106f6:	ff040693          	addi	a3,s0,-16
    800106fa:	97b6                	add	a5,a5,a3
    800106fc:	fd07b783          	ld	a5,-48(a5) # ffffffffffffefd0 <_heap_end+0xffffffff77feefd0>
                          bits |
    80010700:	00176713          	ori	a4,a4,1
    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    80010704:	fe043683          	ld	a3,-32(s0)
    80010708:	078e                	slli	a5,a5,0x3
    8001070a:	97b6                	add	a5,a5,a3
    8001070c:	e398                	sd	a4,0(a5)
                          PB_VALID;

    debugf("mmu_map: set entry %d as lvl %d leaf in page table at 0x%08lx\n", vpn[i], i, pt);
    8001070e:	fec42783          	lw	a5,-20(s0)
    80010712:	078e                	slli	a5,a5,0x3
    80010714:	ff040713          	addi	a4,s0,-16
    80010718:	97ba                	add	a5,a5,a4
    8001071a:	fd07b783          	ld	a5,-48(a5)
    8001071e:	fec42703          	lw	a4,-20(s0)
    80010722:	fe043683          	ld	a3,-32(s0)
    80010726:	863a                	mv	a2,a4
    80010728:	85be                	mv	a1,a5
    8001072a:	00009517          	auipc	a0,0x9
    8001072e:	a9e50513          	addi	a0,a0,-1378 # 800191c8 <SYSCALLS+0x1c8>
    80010732:	684010ef          	jal	ra,80011db6 <debugf>

    return true;
    80010736:	4785                	li	a5,1
}
    80010738:	853e                	mv	a0,a5
    8001073a:	60aa                	ld	ra,136(sp)
    8001073c:	640a                	ld	s0,128(sp)
    8001073e:	6149                	addi	sp,sp,144
    80010740:	8082                	ret

0000000080010742 <mmu_free>:

void mmu_free(struct page_table *tab) 
{ 
    80010742:	7179                	addi	sp,sp,-48
    80010744:	f406                	sd	ra,40(sp)
    80010746:	f022                	sd	s0,32(sp)
    80010748:	1800                	addi	s0,sp,48
    8001074a:	fca43c23          	sd	a0,-40(s0)
    uint64_t entry; 
    int i; 

    if (tab == NULL) { 
    8001074e:	fd843783          	ld	a5,-40(s0)
    80010752:	c3b5                	beqz	a5,800107b6 <mmu_free+0x74>
        return; 
    } 

    for (i = 0; i < (PAGE_SIZE / 8); i += 1) { 
    80010754:	fe042623          	sw	zero,-20(s0)
    80010758:	a091                	j	8001079c <mmu_free+0x5a>
        entry = tab->entries[i]; 
    8001075a:	fd843703          	ld	a4,-40(s0)
    8001075e:	fec42783          	lw	a5,-20(s0)
    80010762:	078e                	slli	a5,a5,0x3
    80010764:	97ba                	add	a5,a5,a4
    80010766:	639c                	ld	a5,0(a5)
    80010768:	fef43023          	sd	a5,-32(s0)
        if (entry & PB_VALID) {
    8001076c:	fe043783          	ld	a5,-32(s0)
    80010770:	8b85                	andi	a5,a5,1
    80010772:	cb81                	beqz	a5,80010782 <mmu_free+0x40>
            mmu_free((struct page_table *)(entry & ~0xFFF)); // Recurse into the next level
    80010774:	fe043703          	ld	a4,-32(s0)
    80010778:	77fd                	lui	a5,0xfffff
    8001077a:	8ff9                	and	a5,a5,a4
    8001077c:	853e                	mv	a0,a5
    8001077e:	fc5ff0ef          	jal	ra,80010742 <mmu_free>
        }
        tab->entries[i] = 0; 
    80010782:	fd843703          	ld	a4,-40(s0)
    80010786:	fec42783          	lw	a5,-20(s0)
    8001078a:	078e                	slli	a5,a5,0x3
    8001078c:	97ba                	add	a5,a5,a4
    8001078e:	0007b023          	sd	zero,0(a5) # fffffffffffff000 <_heap_end+0xffffffff77fef000>
    for (i = 0; i < (PAGE_SIZE / 8); i += 1) { 
    80010792:	fec42783          	lw	a5,-20(s0)
    80010796:	2785                	addiw	a5,a5,1
    80010798:	fef42623          	sw	a5,-20(s0)
    8001079c:	fec42783          	lw	a5,-20(s0)
    800107a0:	0007871b          	sext.w	a4,a5
    800107a4:	1ff00793          	li	a5,511
    800107a8:	fae7d9e3          	bge	a5,a4,8001075a <mmu_free+0x18>
    } 

    page_free(tab); 
    800107ac:	fd843503          	ld	a0,-40(s0)
    800107b0:	1f2020ef          	jal	ra,800129a2 <page_free>
    800107b4:	a011                	j	800107b8 <mmu_free+0x76>
        return; 
    800107b6:	0001                	nop
}
    800107b8:	70a2                	ld	ra,40(sp)
    800107ba:	7402                	ld	s0,32(sp)
    800107bc:	6145                	addi	sp,sp,48
    800107be:	8082                	ret

00000000800107c0 <mmu_translate>:

uint64_t mmu_translate(const struct page_table *tab, uint64_t vaddr) 
{ 
    800107c0:	715d                	addi	sp,sp,-80
    800107c2:	e4a2                	sd	s0,72(sp)
    800107c4:	0880                	addi	s0,sp,80
    800107c6:	faa43c23          	sd	a0,-72(s0)
    800107ca:	fab43823          	sd	a1,-80(s0)
    int i; 

    if (tab == NULL) { 
    800107ce:	fb843783          	ld	a5,-72(s0)
    800107d2:	e399                	bnez	a5,800107d8 <mmu_translate+0x18>
        return MMU_TRANSLATE_PAGE_FAULT; 
    800107d4:	57fd                	li	a5,-1
    800107d6:	a84d                	j	80010888 <mmu_translate+0xc8>
    } 

    // Extract the virtual page numbers
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    800107d8:	fb043783          	ld	a5,-80(s0)
    800107dc:	83b1                	srli	a5,a5,0xc
    800107de:	1ff7f793          	andi	a5,a5,511
    800107e2:	fcf43423          	sd	a5,-56(s0)
                      (vaddr >> ADDR_1_BIT) & 0x1FF, 
    800107e6:	fb043783          	ld	a5,-80(s0)
    800107ea:	83d5                	srli	a5,a5,0x15
    800107ec:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    800107f0:	fcf43823          	sd	a5,-48(s0)
                      (vaddr >> ADDR_2_BIT) & 0x1FF};
    800107f4:	fb043783          	ld	a5,-80(s0)
    800107f8:	83f9                	srli	a5,a5,0x1e
    800107fa:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    800107fe:	fcf43c23          	sd	a5,-40(s0)

    // Traverse the page table hierarchy using the virtual page numbers
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    80010802:	4789                	li	a5,2
    80010804:	fef42623          	sw	a5,-20(s0)
    80010808:	a881                	j	80010858 <mmu_translate+0x98>
        if (!(tab->entries[vpn[i]] & PB_VALID)) {
    8001080a:	fec42783          	lw	a5,-20(s0)
    8001080e:	078e                	slli	a5,a5,0x3
    80010810:	ff040713          	addi	a4,s0,-16
    80010814:	97ba                	add	a5,a5,a4
    80010816:	fd87b783          	ld	a5,-40(a5)
    8001081a:	fb843703          	ld	a4,-72(s0)
    8001081e:	078e                	slli	a5,a5,0x3
    80010820:	97ba                	add	a5,a5,a4
    80010822:	639c                	ld	a5,0(a5)
    80010824:	8b85                	andi	a5,a5,1
    80010826:	e399                	bnez	a5,8001082c <mmu_translate+0x6c>
            return MMU_TRANSLATE_PAGE_FAULT; // Entry is not valid
    80010828:	57fd                	li	a5,-1
    8001082a:	a8b9                	j	80010888 <mmu_translate+0xc8>
        }
        tab = (struct page_table *)(tab->entries[vpn[i]] & ~0xFFF);
    8001082c:	fec42783          	lw	a5,-20(s0)
    80010830:	078e                	slli	a5,a5,0x3
    80010832:	ff040713          	addi	a4,s0,-16
    80010836:	97ba                	add	a5,a5,a4
    80010838:	fd87b783          	ld	a5,-40(a5)
    8001083c:	fb843703          	ld	a4,-72(s0)
    80010840:	078e                	slli	a5,a5,0x3
    80010842:	97ba                	add	a5,a5,a4
    80010844:	6398                	ld	a4,0(a5)
    80010846:	77fd                	lui	a5,0xfffff
    80010848:	8ff9                	and	a5,a5,a4
    8001084a:	faf43c23          	sd	a5,-72(s0)
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    8001084e:	fec42783          	lw	a5,-20(s0)
    80010852:	37fd                	addiw	a5,a5,-1
    80010854:	fef42623          	sw	a5,-20(s0)
    80010858:	fec42783          	lw	a5,-20(s0)
    8001085c:	2781                	sext.w	a5,a5
    8001085e:	fa07d6e3          	bgez	a5,8001080a <mmu_translate+0x4a>
    }

    // Extract the physical address from the final page table entry
    uint64_t paddr = tab->entries[vpn[MMU_LEVEL_4K]] & ~0xFFF;
    80010862:	fc843783          	ld	a5,-56(s0)
    80010866:	fb843703          	ld	a4,-72(s0)
    8001086a:	078e                	slli	a5,a5,0x3
    8001086c:	97ba                	add	a5,a5,a4
    8001086e:	6398                	ld	a4,0(a5)
    80010870:	77fd                	lui	a5,0xfffff
    80010872:	8ff9                	and	a5,a5,a4
    80010874:	fef43023          	sd	a5,-32(s0)
    return paddr | (vaddr & (PAGE_SIZE - 1)); // Combine with the offset within the page
    80010878:	fb043703          	ld	a4,-80(s0)
    8001087c:	6785                	lui	a5,0x1
    8001087e:	17fd                	addi	a5,a5,-1
    80010880:	8f7d                	and	a4,a4,a5
    80010882:	fe043783          	ld	a5,-32(s0)
    80010886:	8fd9                	or	a5,a5,a4
} 
    80010888:	853e                	mv	a0,a5
    8001088a:	6426                	ld	s0,72(sp)
    8001088c:	6161                	addi	sp,sp,80
    8001088e:	8082                	ret

0000000080010890 <mmu_map_range>:
                       uint64_t start_virt, 
                       uint64_t end_virt, 
                       uint64_t start_phys,
                       uint8_t lvl, 
                       uint64_t bits)
{
    80010890:	711d                	addi	sp,sp,-96
    80010892:	ec86                	sd	ra,88(sp)
    80010894:	e8a2                	sd	s0,80(sp)
    80010896:	1080                	addi	s0,sp,96
    80010898:	fca43423          	sd	a0,-56(s0)
    8001089c:	fcb43023          	sd	a1,-64(s0)
    800108a0:	fac43c23          	sd	a2,-72(s0)
    800108a4:	fad43823          	sd	a3,-80(s0)
    800108a8:	faf43023          	sd	a5,-96(s0)
    800108ac:	87ba                	mv	a5,a4
    800108ae:	faf407a3          	sb	a5,-81(s0)
    start_virt            = ALIGN_DOWN_POT(start_virt, PAGE_SIZE_AT_LVL(lvl));
    800108b2:	faf44783          	lbu	a5,-81(s0)
    800108b6:	2781                	sext.w	a5,a5
    800108b8:	873e                	mv	a4,a5
    800108ba:	87ba                	mv	a5,a4
    800108bc:	0037979b          	slliw	a5,a5,0x3
    800108c0:	9fb9                	addw	a5,a5,a4
    800108c2:	2781                	sext.w	a5,a5
    800108c4:	27b1                	addiw	a5,a5,12
    800108c6:	2781                	sext.w	a5,a5
    800108c8:	4705                	li	a4,1
    800108ca:	00f717bb          	sllw	a5,a4,a5
    800108ce:	2781                	sext.w	a5,a5
    800108d0:	40f007bb          	negw	a5,a5
    800108d4:	2781                	sext.w	a5,a5
    800108d6:	873e                	mv	a4,a5
    800108d8:	fc043783          	ld	a5,-64(s0)
    800108dc:	8ff9                	and	a5,a5,a4
    800108de:	fcf43023          	sd	a5,-64(s0)
    end_virt              = ALIGN_UP_POT(end_virt, PAGE_SIZE_AT_LVL(lvl));
    800108e2:	faf44783          	lbu	a5,-81(s0)
    800108e6:	2781                	sext.w	a5,a5
    800108e8:	873e                	mv	a4,a5
    800108ea:	87ba                	mv	a5,a4
    800108ec:	0037979b          	slliw	a5,a5,0x3
    800108f0:	9fb9                	addw	a5,a5,a4
    800108f2:	2781                	sext.w	a5,a5
    800108f4:	27b1                	addiw	a5,a5,12
    800108f6:	2781                	sext.w	a5,a5
    800108f8:	4705                	li	a4,1
    800108fa:	00f717bb          	sllw	a5,a4,a5
    800108fe:	2781                	sext.w	a5,a5
    80010900:	873e                	mv	a4,a5
    80010902:	fb843783          	ld	a5,-72(s0)
    80010906:	97ba                	add	a5,a5,a4
    80010908:	fff78713          	addi	a4,a5,-1 # fff <i+0xfdf>
    8001090c:	faf44783          	lbu	a5,-81(s0)
    80010910:	2781                	sext.w	a5,a5
    80010912:	86be                	mv	a3,a5
    80010914:	87b6                	mv	a5,a3
    80010916:	0037979b          	slliw	a5,a5,0x3
    8001091a:	9fb5                	addw	a5,a5,a3
    8001091c:	2781                	sext.w	a5,a5
    8001091e:	27b1                	addiw	a5,a5,12
    80010920:	2781                	sext.w	a5,a5
    80010922:	4685                	li	a3,1
    80010924:	00f697bb          	sllw	a5,a3,a5
    80010928:	2781                	sext.w	a5,a5
    8001092a:	40f007bb          	negw	a5,a5
    8001092e:	2781                	sext.w	a5,a5
    80010930:	8ff9                	and	a5,a5,a4
    80010932:	faf43c23          	sd	a5,-72(s0)
    uint64_t num_bytes    = end_virt - start_virt;
    80010936:	fb843703          	ld	a4,-72(s0)
    8001093a:	fc043783          	ld	a5,-64(s0)
    8001093e:	40f707b3          	sub	a5,a4,a5
    80010942:	fcf43c23          	sd	a5,-40(s0)
    uint64_t pages_mapped = 0;
    80010946:	fe043423          	sd	zero,-24(s0)

    uint64_t i;
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    8001094a:	fe043023          	sd	zero,-32(s0)
    8001094e:	a0ad                	j	800109b8 <mmu_map_range+0x128>
        if (!mmu_map(tab, start_virt + i, start_phys + i, lvl, bits)) {
    80010950:	fc043703          	ld	a4,-64(s0)
    80010954:	fe043783          	ld	a5,-32(s0)
    80010958:	00f705b3          	add	a1,a4,a5
    8001095c:	fb043703          	ld	a4,-80(s0)
    80010960:	fe043783          	ld	a5,-32(s0)
    80010964:	97ba                	add	a5,a5,a4
    80010966:	faf44683          	lbu	a3,-81(s0)
    8001096a:	fa043703          	ld	a4,-96(s0)
    8001096e:	863e                	mv	a2,a5
    80010970:	fc843503          	ld	a0,-56(s0)
    80010974:	b3fff0ef          	jal	ra,800104b2 <mmu_map>
    80010978:	87aa                	mv	a5,a0
    8001097a:	0017c793          	xori	a5,a5,1
    8001097e:	0ff7f793          	andi	a5,a5,255
    80010982:	e3b1                	bnez	a5,800109c6 <mmu_map_range+0x136>
            break;
        }
        pages_mapped += 1;
    80010984:	fe843783          	ld	a5,-24(s0)
    80010988:	0785                	addi	a5,a5,1
    8001098a:	fef43423          	sd	a5,-24(s0)
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    8001098e:	faf44783          	lbu	a5,-81(s0)
    80010992:	2781                	sext.w	a5,a5
    80010994:	873e                	mv	a4,a5
    80010996:	87ba                	mv	a5,a4
    80010998:	0037979b          	slliw	a5,a5,0x3
    8001099c:	9fb9                	addw	a5,a5,a4
    8001099e:	2781                	sext.w	a5,a5
    800109a0:	27b1                	addiw	a5,a5,12
    800109a2:	2781                	sext.w	a5,a5
    800109a4:	4705                	li	a4,1
    800109a6:	00f717bb          	sllw	a5,a4,a5
    800109aa:	2781                	sext.w	a5,a5
    800109ac:	873e                	mv	a4,a5
    800109ae:	fe043783          	ld	a5,-32(s0)
    800109b2:	97ba                	add	a5,a5,a4
    800109b4:	fef43023          	sd	a5,-32(s0)
    800109b8:	fe043703          	ld	a4,-32(s0)
    800109bc:	fd843783          	ld	a5,-40(s0)
    800109c0:	f8f768e3          	bltu	a4,a5,80010950 <mmu_map_range+0xc0>
    800109c4:	a011                	j	800109c8 <mmu_map_range+0x138>
            break;
    800109c6:	0001                	nop
    }
    return pages_mapped;
    800109c8:	fe843783          	ld	a5,-24(s0)
} 
    800109cc:	853e                	mv	a0,a5
    800109ce:	60e6                	ld	ra,88(sp)
    800109d0:	6446                	ld	s0,80(sp)
    800109d2:	6125                	addi	sp,sp,96
    800109d4:	8082                	ret

00000000800109d6 <c_trap_handler>:
// From src/syscall.c
void syscall_handle(int hart, uint64_t epc, int64_t *scratch);

// Called from asm/spawn.S: _spawn_trap
void c_trap_handler(void)
{
    800109d6:	7139                	addi	sp,sp,-64
    800109d8:	fc06                	sd	ra,56(sp)
    800109da:	f822                	sd	s0,48(sp)
    800109dc:	0080                	addi	s0,sp,64
    unsigned long cause;
    long *scratch;
    unsigned long epc;
    unsigned long tval;
    CSR_READ(cause, "scause");
    800109de:	142027f3          	csrr	a5,scause
    800109e2:	fef43423          	sd	a5,-24(s0)
    CSR_READ(scratch, "sscratch");
    800109e6:	140027f3          	csrr	a5,sscratch
    800109ea:	fef43023          	sd	a5,-32(s0)
    CSR_READ(epc, "sepc");
    800109ee:	141027f3          	csrr	a5,sepc
    800109f2:	fcf43c23          	sd	a5,-40(s0)
    CSR_READ(tval, "stval");
    800109f6:	143027f3          	csrr	a5,stval
    800109fa:	fcf43823          	sd	a5,-48(s0)
    
    int hart = sbi_whoami();
    800109fe:	666010ef          	jal	ra,80012064 <sbi_whoami>
    80010a02:	87aa                	mv	a5,a0
    80010a04:	fcf42623          	sw	a5,-52(s0)

    if (SCAUSE_IS_ASYNC(cause)) {
    80010a08:	fe843783          	ld	a5,-24(s0)
    80010a0c:	0407d563          	bgez	a5,80010a56 <c_trap_handler+0x80>
        cause = SCAUSE_NUM(cause);
    80010a10:	fe843783          	ld	a5,-24(s0)
    80010a14:	0ff7f793          	andi	a5,a5,255
    80010a18:	fef43423          	sd	a5,-24(s0)
        switch (cause) {
    80010a1c:	fe843703          	ld	a4,-24(s0)
    80010a20:	4795                	li	a5,5
    80010a22:	00f70863          	beq	a4,a5,80010a32 <c_trap_handler+0x5c>
    80010a26:	fe843703          	ld	a4,-24(s0)
    80010a2a:	47a5                	li	a5,9
    80010a2c:	00f70663          	beq	a4,a5,80010a38 <c_trap_handler+0x62>
    80010a30:	a811                	j	80010a44 <c_trap_handler+0x6e>
            case CAUSE_STIP:
                // Ack timer will reset the timer to INFINITE
                // In src/sbi.c
                sbi_ack_timer();
    80010a32:	5fc010ef          	jal	ra,8001202e <sbi_ack_timer>
                // We typically invoke our scheduler if we get a timer
                // sched_invoke(hart);
                break;
    80010a36:	a08d                	j	80010a98 <c_trap_handler+0xc2>
            case CAUSE_SEIP:
                // Forward to src/plic.c
                plic_handle_irq(hart);
    80010a38:	fcc42783          	lw	a5,-52(s0)
    80010a3c:	853e                	mv	a0,a5
    80010a3e:	0db010ef          	jal	ra,80012318 <plic_handle_irq>
                break;
    80010a42:	a899                	j	80010a98 <c_trap_handler+0xc2>
            default:
                debugf("Unhandled Asynchronous interrupt %ld\n", cause);
    80010a44:	fe843583          	ld	a1,-24(s0)
    80010a48:	00008517          	auipc	a0,0x8
    80010a4c:	7c050513          	addi	a0,a0,1984 # 80019208 <SYSCALLS+0x208>
    80010a50:	366010ef          	jal	ra,80011db6 <debugf>
                break;
    80010a54:	a091                	j	80010a98 <c_trap_handler+0xc2>
        }
    }
    else {
        switch (cause) {
    80010a56:	fe843703          	ld	a4,-24(s0)
    80010a5a:	47a1                	li	a5,8
    80010a5c:	00f71c63          	bne	a4,a5,80010a74 <c_trap_handler+0x9e>
            case CAUSE_ECALL_U_MODE:  // ECALL U-Mode
                // Forward to src/syscall.c
                syscall_handle(hart, epc, scratch);
    80010a60:	fcc42783          	lw	a5,-52(s0)
    80010a64:	fe043603          	ld	a2,-32(s0)
    80010a68:	fd843583          	ld	a1,-40(s0)
    80010a6c:	853e                	mv	a0,a5
    80010a6e:	97fff0ef          	jal	ra,800103ec <syscall_handle>
                break;
    80010a72:	a01d                	j	80010a98 <c_trap_handler+0xc2>
            default:
                debugf(
    80010a74:	fcc42783          	lw	a5,-52(s0)
    80010a78:	873e                	mv	a4,a5
    80010a7a:	fd043683          	ld	a3,-48(s0)
    80010a7e:	fd843603          	ld	a2,-40(s0)
    80010a82:	fe843583          	ld	a1,-24(s0)
    80010a86:	00008517          	auipc	a0,0x8
    80010a8a:	7aa50513          	addi	a0,a0,1962 # 80019230 <SYSCALLS+0x230>
    80010a8e:	328010ef          	jal	ra,80011db6 <debugf>
                    "Unhandled Synchronous interrupt %ld @ 0x%08lx [0x%08lx]. "
                    "Hanging hart %d\n",
                    cause, epc, tval, hart);
                WFI_LOOP();
    80010a92:	10500073          	wfi
    80010a96:	bff5                	j	80010a92 <c_trap_handler+0xbc>
                break;
        }
    }
}
    80010a98:	0001                	nop
    80010a9a:	70e2                	ld	ra,56(sp)
    80010a9c:	7442                	ld	s0,48(sp)
    80010a9e:	6121                	addi	sp,sp,64
    80010aa0:	8082                	ret

0000000080010aa2 <pci_init>:
#include <pci.h>

void pci_init(void)
{
    80010aa2:	1141                	addi	sp,sp,-16
    80010aa4:	e422                	sd	s0,8(sp)
    80010aa6:	0800                	addi	s0,sp,16
    // Initialize and enumerate all PCI bridges and devices.

    // This should forward all virtio devices to the virtio drivers.
}
    80010aa8:	0001                	nop
    80010aaa:	6422                	ld	s0,8(sp)
    80010aac:	0141                	addi	sp,sp,16
    80010aae:	8082                	ret

0000000080010ab0 <pci_dispatch_irq>:

void pci_dispatch_irq(int irq)
{
    80010ab0:	1101                	addi	sp,sp,-32
    80010ab2:	ec22                	sd	s0,24(sp)
    80010ab4:	1000                	addi	s0,sp,32
    80010ab6:	87aa                	mv	a5,a0
    80010ab8:	fef42623          	sw	a5,-20(s0)
    (void)irq;

    // An IRQ came from the PLIC, but recall PCI devices
    // share IRQs. So, you need to check the ISR register
    // of potential virtio devices.
}
    80010abc:	0001                	nop
    80010abe:	6462                	ld	s0,24(sp)
    80010ac0:	6105                	addi	sp,sp,32
    80010ac2:	8082                	ret

0000000080010ac4 <mutex_trylock>:
#include <config.h>
#include <lock.h>
#include <compiler.h>

bool mutex_trylock(Mutex *mutex)
{
    80010ac4:	7179                	addi	sp,sp,-48
    80010ac6:	f422                	sd	s0,40(sp)
    80010ac8:	1800                	addi	s0,sp,48
    80010aca:	fca43c23          	sd	a0,-40(s0)
    int old;
    asm volatile("amoswap.w.aq %0, %1, (%2)" : "=r"(old) : "r"(MUTEX_LOCKED), "r"(mutex));
    80010ace:	4785                	li	a5,1
    80010ad0:	fd843703          	ld	a4,-40(s0)
    80010ad4:	0cf727af          	amoswap.w.aq	a5,a5,(a4)
    80010ad8:	fef42623          	sw	a5,-20(s0)
    // If old == MUTEX_LOCKED, that means the mutex was already
    // locked when we tried to lock it. That means we didn't acquire
    // it.
    return old != MUTEX_LOCKED;
    80010adc:	fec42783          	lw	a5,-20(s0)
    80010ae0:	0007871b          	sext.w	a4,a5
    80010ae4:	4785                	li	a5,1
    80010ae6:	40f707b3          	sub	a5,a4,a5
    80010aea:	00f037b3          	snez	a5,a5
    80010aee:	0ff7f793          	andi	a5,a5,255
}
    80010af2:	853e                	mv	a0,a5
    80010af4:	7422                	ld	s0,40(sp)
    80010af6:	6145                	addi	sp,sp,48
    80010af8:	8082                	ret

0000000080010afa <mutex_spinlock>:

void mutex_spinlock(Mutex *mutex)
{
    80010afa:	1101                	addi	sp,sp,-32
    80010afc:	ec06                	sd	ra,24(sp)
    80010afe:	e822                	sd	s0,16(sp)
    80010b00:	1000                	addi	s0,sp,32
    80010b02:	fea43423          	sd	a0,-24(s0)
    while (!mutex_trylock(mutex))
    80010b06:	0001                	nop
    80010b08:	fe843503          	ld	a0,-24(s0)
    80010b0c:	fb9ff0ef          	jal	ra,80010ac4 <mutex_trylock>
    80010b10:	87aa                	mv	a5,a0
    80010b12:	0017c793          	xori	a5,a5,1
    80010b16:	0ff7f793          	andi	a5,a5,255
    80010b1a:	f7fd                	bnez	a5,80010b08 <mutex_spinlock+0xe>
        ;
}
    80010b1c:	0001                	nop
    80010b1e:	0001                	nop
    80010b20:	60e2                	ld	ra,24(sp)
    80010b22:	6442                	ld	s0,16(sp)
    80010b24:	6105                	addi	sp,sp,32
    80010b26:	8082                	ret

0000000080010b28 <mutex_unlock>:

void mutex_unlock(Mutex *mutex)
{
    80010b28:	1101                	addi	sp,sp,-32
    80010b2a:	ec22                	sd	s0,24(sp)
    80010b2c:	1000                	addi	s0,sp,32
    80010b2e:	fea43423          	sd	a0,-24(s0)
    asm volatile("amoswap.w.rl zero, zero, (%0)" : : "r"(mutex));
    80010b32:	fe843783          	ld	a5,-24(s0)
    80010b36:	0a07a02f          	amoswap.w.rl	zero,zero,(a5)
}
    80010b3a:	0001                	nop
    80010b3c:	6462                	ld	s0,24(sp)
    80010b3e:	6105                	addi	sp,sp,32
    80010b40:	8082                	ret

0000000080010b42 <insert_block>:
 * into free list, sorted by addr.
 * If disabled, add block has new head of
 * the free list.
 */
static void insert_block(Block *block)
{
    80010b42:	7179                	addi	sp,sp,-48
    80010b44:	f422                	sd	s0,40(sp)
    80010b46:	1800                	addi	s0,sp,48
    80010b48:	fca43c23          	sd	a0,-40(s0)
    Block *ptr  = heap->free;
    80010b4c:	00007797          	auipc	a5,0x7
    80010b50:	4dc78793          	addi	a5,a5,1244 # 80018028 <heap>
    80010b54:	639c                	ld	a5,0(a5)
    80010b56:	639c                	ld	a5,0(a5)
    80010b58:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80010b5c:	fe043023          	sd	zero,-32(s0)
    while (ptr != NULL) {
    80010b60:	a01d                	j	80010b86 <insert_block+0x44>
        if ((size_t)block->addr <= (size_t)ptr->addr) {
    80010b62:	fd843783          	ld	a5,-40(s0)
    80010b66:	639c                	ld	a5,0(a5)
    80010b68:	873e                	mv	a4,a5
    80010b6a:	fe843783          	ld	a5,-24(s0)
    80010b6e:	639c                	ld	a5,0(a5)
    80010b70:	00e7ff63          	bgeu	a5,a4,80010b8e <insert_block+0x4c>
            break;
        }
        prev = ptr;
    80010b74:	fe843783          	ld	a5,-24(s0)
    80010b78:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    80010b7c:	fe843783          	ld	a5,-24(s0)
    80010b80:	679c                	ld	a5,8(a5)
    80010b82:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80010b86:	fe843783          	ld	a5,-24(s0)
    80010b8a:	ffe1                	bnez	a5,80010b62 <insert_block+0x20>
    80010b8c:	a011                	j	80010b90 <insert_block+0x4e>
            break;
    80010b8e:	0001                	nop
    }
    if (prev != NULL) {
    80010b90:	fe043783          	ld	a5,-32(s0)
    80010b94:	c799                	beqz	a5,80010ba2 <insert_block+0x60>
        prev->next = block;
    80010b96:	fe043783          	ld	a5,-32(s0)
    80010b9a:	fd843703          	ld	a4,-40(s0)
    80010b9e:	e798                	sd	a4,8(a5)
    80010ba0:	a809                	j	80010bb2 <insert_block+0x70>
    }
    else {
        heap->free = block;
    80010ba2:	00007797          	auipc	a5,0x7
    80010ba6:	48678793          	addi	a5,a5,1158 # 80018028 <heap>
    80010baa:	639c                	ld	a5,0(a5)
    80010bac:	fd843703          	ld	a4,-40(s0)
    80010bb0:	e398                	sd	a4,0(a5)
    }
    block->next = ptr;
    80010bb2:	fd843783          	ld	a5,-40(s0)
    80010bb6:	fe843703          	ld	a4,-24(s0)
    80010bba:	e798                	sd	a4,8(a5)
}
    80010bbc:	0001                	nop
    80010bbe:	7422                	ld	s0,40(sp)
    80010bc0:	6145                	addi	sp,sp,48
    80010bc2:	8082                	ret

0000000080010bc4 <release_blocks>:

#ifndef TA_DISABLE_COMPACT
static void release_blocks(Block *scan, Block *to)
{
    80010bc4:	7179                	addi	sp,sp,-48
    80010bc6:	f422                	sd	s0,40(sp)
    80010bc8:	1800                	addi	s0,sp,48
    80010bca:	fca43c23          	sd	a0,-40(s0)
    80010bce:	fcb43823          	sd	a1,-48(s0)
    Block *scan_next;
    while (scan != to) {
    80010bd2:	a099                	j	80010c18 <release_blocks+0x54>
        scan_next   = scan->next;
    80010bd4:	fd843783          	ld	a5,-40(s0)
    80010bd8:	679c                	ld	a5,8(a5)
    80010bda:	fef43423          	sd	a5,-24(s0)
        scan->next  = heap->fresh;
    80010bde:	00007797          	auipc	a5,0x7
    80010be2:	44a78793          	addi	a5,a5,1098 # 80018028 <heap>
    80010be6:	639c                	ld	a5,0(a5)
    80010be8:	6b98                	ld	a4,16(a5)
    80010bea:	fd843783          	ld	a5,-40(s0)
    80010bee:	e798                	sd	a4,8(a5)
        heap->fresh = scan;
    80010bf0:	00007797          	auipc	a5,0x7
    80010bf4:	43878793          	addi	a5,a5,1080 # 80018028 <heap>
    80010bf8:	639c                	ld	a5,0(a5)
    80010bfa:	fd843703          	ld	a4,-40(s0)
    80010bfe:	eb98                	sd	a4,16(a5)
        scan->addr  = 0;
    80010c00:	fd843783          	ld	a5,-40(s0)
    80010c04:	0007b023          	sd	zero,0(a5)
        scan->size  = 0;
    80010c08:	fd843783          	ld	a5,-40(s0)
    80010c0c:	0007b823          	sd	zero,16(a5)
        scan        = scan_next;
    80010c10:	fe843783          	ld	a5,-24(s0)
    80010c14:	fcf43c23          	sd	a5,-40(s0)
    while (scan != to) {
    80010c18:	fd843703          	ld	a4,-40(s0)
    80010c1c:	fd043783          	ld	a5,-48(s0)
    80010c20:	faf71ae3          	bne	a4,a5,80010bd4 <release_blocks+0x10>
    }
}
    80010c24:	0001                	nop
    80010c26:	0001                	nop
    80010c28:	7422                	ld	s0,40(sp)
    80010c2a:	6145                	addi	sp,sp,48
    80010c2c:	8082                	ret

0000000080010c2e <compact>:

static void compact()
{
    80010c2e:	7139                	addi	sp,sp,-64
    80010c30:	fc06                	sd	ra,56(sp)
    80010c32:	f822                	sd	s0,48(sp)
    80010c34:	0080                	addi	s0,sp,64
    Block *ptr = heap->free;
    80010c36:	00007797          	auipc	a5,0x7
    80010c3a:	3f278793          	addi	a5,a5,1010 # 80018028 <heap>
    80010c3e:	639c                	ld	a5,0(a5)
    80010c40:	639c                	ld	a5,0(a5)
    80010c42:	fef43423          	sd	a5,-24(s0)
    Block *prev;
    Block *scan;
    while (ptr != NULL) {
    80010c46:	a075                	j	80010cf2 <compact+0xc4>
        prev = ptr;
    80010c48:	fe843783          	ld	a5,-24(s0)
    80010c4c:	fef43023          	sd	a5,-32(s0)
        scan = ptr->next;
    80010c50:	fe843783          	ld	a5,-24(s0)
    80010c54:	679c                	ld	a5,8(a5)
    80010c56:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    80010c5a:	a811                	j	80010c6e <compact+0x40>
            prev = scan;
    80010c5c:	fd843783          	ld	a5,-40(s0)
    80010c60:	fef43023          	sd	a5,-32(s0)
            scan = scan->next;
    80010c64:	fd843783          	ld	a5,-40(s0)
    80010c68:	679c                	ld	a5,8(a5)
    80010c6a:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    80010c6e:	fd843783          	ld	a5,-40(s0)
    80010c72:	cf91                	beqz	a5,80010c8e <compact+0x60>
    80010c74:	fe043783          	ld	a5,-32(s0)
    80010c78:	639c                	ld	a5,0(a5)
    80010c7a:	873e                	mv	a4,a5
    80010c7c:	fe043783          	ld	a5,-32(s0)
    80010c80:	6b9c                	ld	a5,16(a5)
    80010c82:	97ba                	add	a5,a5,a4
    80010c84:	fd843703          	ld	a4,-40(s0)
    80010c88:	6318                	ld	a4,0(a4)
    80010c8a:	fce789e3          	beq	a5,a4,80010c5c <compact+0x2e>
        }
        if (prev != ptr) {
    80010c8e:	fe043703          	ld	a4,-32(s0)
    80010c92:	fe843783          	ld	a5,-24(s0)
    80010c96:	04f70963          	beq	a4,a5,80010ce8 <compact+0xba>
            size_t new_size = (size_t)prev->addr - (size_t)ptr->addr + prev->size;
    80010c9a:	fe043783          	ld	a5,-32(s0)
    80010c9e:	639c                	ld	a5,0(a5)
    80010ca0:	873e                	mv	a4,a5
    80010ca2:	fe843783          	ld	a5,-24(s0)
    80010ca6:	639c                	ld	a5,0(a5)
    80010ca8:	8f1d                	sub	a4,a4,a5
    80010caa:	fe043783          	ld	a5,-32(s0)
    80010cae:	6b9c                	ld	a5,16(a5)
    80010cb0:	97ba                	add	a5,a5,a4
    80010cb2:	fcf43823          	sd	a5,-48(s0)
            ptr->size       = new_size;
    80010cb6:	fe843783          	ld	a5,-24(s0)
    80010cba:	fd043703          	ld	a4,-48(s0)
    80010cbe:	eb98                	sd	a4,16(a5)
            Block *next     = prev->next;
    80010cc0:	fe043783          	ld	a5,-32(s0)
    80010cc4:	679c                	ld	a5,8(a5)
    80010cc6:	fcf43423          	sd	a5,-56(s0)
            // make merged blocks available
            release_blocks(ptr->next, prev->next);
    80010cca:	fe843783          	ld	a5,-24(s0)
    80010cce:	6798                	ld	a4,8(a5)
    80010cd0:	fe043783          	ld	a5,-32(s0)
    80010cd4:	679c                	ld	a5,8(a5)
    80010cd6:	85be                	mv	a1,a5
    80010cd8:	853a                	mv	a0,a4
    80010cda:	eebff0ef          	jal	ra,80010bc4 <release_blocks>
            // relink
            ptr->next = next;
    80010cde:	fe843783          	ld	a5,-24(s0)
    80010ce2:	fc843703          	ld	a4,-56(s0)
    80010ce6:	e798                	sd	a4,8(a5)
        }
        ptr = ptr->next;
    80010ce8:	fe843783          	ld	a5,-24(s0)
    80010cec:	679c                	ld	a5,8(a5)
    80010cee:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80010cf2:	fe843783          	ld	a5,-24(s0)
    80010cf6:	fba9                	bnez	a5,80010c48 <compact+0x1a>
    }
}
    80010cf8:	0001                	nop
    80010cfa:	0001                	nop
    80010cfc:	70e2                	ld	ra,56(sp)
    80010cfe:	7442                	ld	s0,48(sp)
    80010d00:	6121                	addi	sp,sp,64
    80010d02:	8082                	ret

0000000080010d04 <init>:
#endif

static bool init(const void *base, const void *limit, const size_t heap_blocks,
                 const size_t split_thresh, const size_t alignment)
{
    80010d04:	715d                	addi	sp,sp,-80
    80010d06:	e4a2                	sd	s0,72(sp)
    80010d08:	0880                	addi	s0,sp,80
    80010d0a:	fca43c23          	sd	a0,-40(s0)
    80010d0e:	fcb43823          	sd	a1,-48(s0)
    80010d12:	fcc43423          	sd	a2,-56(s0)
    80010d16:	fcd43023          	sd	a3,-64(s0)
    80010d1a:	fae43c23          	sd	a4,-72(s0)
    heap              = (Heap *)base;
    80010d1e:	00007797          	auipc	a5,0x7
    80010d22:	30a78793          	addi	a5,a5,778 # 80018028 <heap>
    80010d26:	fd843703          	ld	a4,-40(s0)
    80010d2a:	e398                	sd	a4,0(a5)
    heap_limit        = limit;
    80010d2c:	00007797          	auipc	a5,0x7
    80010d30:	30478793          	addi	a5,a5,772 # 80018030 <heap_limit>
    80010d34:	fd043703          	ld	a4,-48(s0)
    80010d38:	e398                	sd	a4,0(a5)
    heap_split_thresh = split_thresh;
    80010d3a:	00007797          	auipc	a5,0x7
    80010d3e:	2fe78793          	addi	a5,a5,766 # 80018038 <heap_split_thresh>
    80010d42:	fc043703          	ld	a4,-64(s0)
    80010d46:	e398                	sd	a4,0(a5)
    heap_alignment    = alignment;
    80010d48:	00007797          	auipc	a5,0x7
    80010d4c:	2f878793          	addi	a5,a5,760 # 80018040 <heap_alignment>
    80010d50:	fb843703          	ld	a4,-72(s0)
    80010d54:	e398                	sd	a4,0(a5)
    heap_max_blocks   = heap_blocks;
    80010d56:	00007797          	auipc	a5,0x7
    80010d5a:	2f278793          	addi	a5,a5,754 # 80018048 <heap_max_blocks>
    80010d5e:	fc843703          	ld	a4,-56(s0)
    80010d62:	e398                	sd	a4,0(a5)

    heap->free        = NULL;
    80010d64:	00007797          	auipc	a5,0x7
    80010d68:	2c478793          	addi	a5,a5,708 # 80018028 <heap>
    80010d6c:	639c                	ld	a5,0(a5)
    80010d6e:	0007b023          	sd	zero,0(a5)
    heap->used        = NULL;
    80010d72:	00007797          	auipc	a5,0x7
    80010d76:	2b678793          	addi	a5,a5,694 # 80018028 <heap>
    80010d7a:	639c                	ld	a5,0(a5)
    80010d7c:	0007b423          	sd	zero,8(a5)
    heap->fresh       = (Block *)(heap + 1);
    80010d80:	00007797          	auipc	a5,0x7
    80010d84:	2a878793          	addi	a5,a5,680 # 80018028 <heap>
    80010d88:	6398                	ld	a4,0(a5)
    80010d8a:	00007797          	auipc	a5,0x7
    80010d8e:	29e78793          	addi	a5,a5,670 # 80018028 <heap>
    80010d92:	639c                	ld	a5,0(a5)
    80010d94:	02070713          	addi	a4,a4,32
    80010d98:	eb98                	sd	a4,16(a5)
    heap->top         = (size_t)(heap->fresh + heap_blocks);
    80010d9a:	00007797          	auipc	a5,0x7
    80010d9e:	28e78793          	addi	a5,a5,654 # 80018028 <heap>
    80010da2:	639c                	ld	a5,0(a5)
    80010da4:	6b94                	ld	a3,16(a5)
    80010da6:	fc843703          	ld	a4,-56(s0)
    80010daa:	87ba                	mv	a5,a4
    80010dac:	0786                	slli	a5,a5,0x1
    80010dae:	97ba                	add	a5,a5,a4
    80010db0:	078e                	slli	a5,a5,0x3
    80010db2:	00f68733          	add	a4,a3,a5
    80010db6:	00007797          	auipc	a5,0x7
    80010dba:	27278793          	addi	a5,a5,626 # 80018028 <heap>
    80010dbe:	639c                	ld	a5,0(a5)
    80010dc0:	ef98                	sd	a4,24(a5)

    Block *block      = heap->fresh;
    80010dc2:	00007797          	auipc	a5,0x7
    80010dc6:	26678793          	addi	a5,a5,614 # 80018028 <heap>
    80010dca:	639c                	ld	a5,0(a5)
    80010dcc:	6b9c                	ld	a5,16(a5)
    80010dce:	fef43423          	sd	a5,-24(s0)
    size_t i          = heap_max_blocks - 1;
    80010dd2:	00007797          	auipc	a5,0x7
    80010dd6:	27678793          	addi	a5,a5,630 # 80018048 <heap_max_blocks>
    80010dda:	639c                	ld	a5,0(a5)
    80010ddc:	17fd                	addi	a5,a5,-1
    80010dde:	fef43023          	sd	a5,-32(s0)
    while (i--) {
    80010de2:	a829                	j	80010dfc <init+0xf8>
        block->next = block + 1;
    80010de4:	fe843783          	ld	a5,-24(s0)
    80010de8:	01878713          	addi	a4,a5,24
    80010dec:	fe843783          	ld	a5,-24(s0)
    80010df0:	e798                	sd	a4,8(a5)
        block++;
    80010df2:	fe843783          	ld	a5,-24(s0)
    80010df6:	07e1                	addi	a5,a5,24
    80010df8:	fef43423          	sd	a5,-24(s0)
    while (i--) {
    80010dfc:	fe043783          	ld	a5,-32(s0)
    80010e00:	fff78713          	addi	a4,a5,-1
    80010e04:	fee43023          	sd	a4,-32(s0)
    80010e08:	fff1                	bnez	a5,80010de4 <init+0xe0>
    }
    block->next = NULL;
    80010e0a:	fe843783          	ld	a5,-24(s0)
    80010e0e:	0007b423          	sd	zero,8(a5)
    return true;
    80010e12:	4785                	li	a5,1
}
    80010e14:	853e                	mv	a0,a5
    80010e16:	6426                	ld	s0,72(sp)
    80010e18:	6161                	addi	sp,sp,80
    80010e1a:	8082                	ret

0000000080010e1c <free>:

static bool free(const void *free)
{
    80010e1c:	7179                	addi	sp,sp,-48
    80010e1e:	f406                	sd	ra,40(sp)
    80010e20:	f022                	sd	s0,32(sp)
    80010e22:	1800                	addi	s0,sp,48
    80010e24:	fca43c23          	sd	a0,-40(s0)
    Block *block = heap->used;
    80010e28:	00007797          	auipc	a5,0x7
    80010e2c:	20078793          	addi	a5,a5,512 # 80018028 <heap>
    80010e30:	639c                	ld	a5,0(a5)
    80010e32:	679c                	ld	a5,8(a5)
    80010e34:	fef43423          	sd	a5,-24(s0)
    Block *prev  = NULL;
    80010e38:	fe043023          	sd	zero,-32(s0)
    while (block != NULL) {
    80010e3c:	a8a1                	j	80010e94 <free+0x78>
        if (free == block->addr) {
    80010e3e:	fe843783          	ld	a5,-24(s0)
    80010e42:	639c                	ld	a5,0(a5)
    80010e44:	fd843703          	ld	a4,-40(s0)
    80010e48:	02f71d63          	bne	a4,a5,80010e82 <free+0x66>
            if (prev) {
    80010e4c:	fe043783          	ld	a5,-32(s0)
    80010e50:	cb81                	beqz	a5,80010e60 <free+0x44>
                prev->next = block->next;
    80010e52:	fe843783          	ld	a5,-24(s0)
    80010e56:	6798                	ld	a4,8(a5)
    80010e58:	fe043783          	ld	a5,-32(s0)
    80010e5c:	e798                	sd	a4,8(a5)
    80010e5e:	a811                	j	80010e72 <free+0x56>
            }
            else {
                heap->used = block->next;
    80010e60:	00007797          	auipc	a5,0x7
    80010e64:	1c878793          	addi	a5,a5,456 # 80018028 <heap>
    80010e68:	639c                	ld	a5,0(a5)
    80010e6a:	fe843703          	ld	a4,-24(s0)
    80010e6e:	6718                	ld	a4,8(a4)
    80010e70:	e798                	sd	a4,8(a5)
            }
            insert_block(block);
    80010e72:	fe843503          	ld	a0,-24(s0)
    80010e76:	ccdff0ef          	jal	ra,80010b42 <insert_block>
            compact();
    80010e7a:	db5ff0ef          	jal	ra,80010c2e <compact>
            return true;
    80010e7e:	4785                	li	a5,1
    80010e80:	a831                	j	80010e9c <free+0x80>
        }
        prev  = block;
    80010e82:	fe843783          	ld	a5,-24(s0)
    80010e86:	fef43023          	sd	a5,-32(s0)
        block = block->next;
    80010e8a:	fe843783          	ld	a5,-24(s0)
    80010e8e:	679c                	ld	a5,8(a5)
    80010e90:	fef43423          	sd	a5,-24(s0)
    while (block != NULL) {
    80010e94:	fe843783          	ld	a5,-24(s0)
    80010e98:	f3dd                	bnez	a5,80010e3e <free+0x22>
    }
    return false;
    80010e9a:	4781                	li	a5,0
}
    80010e9c:	853e                	mv	a0,a5
    80010e9e:	70a2                	ld	ra,40(sp)
    80010ea0:	7402                	ld	s0,32(sp)
    80010ea2:	6145                	addi	sp,sp,48
    80010ea4:	8082                	ret

0000000080010ea6 <alloc_block>:

static Block *alloc_block(size_t num)
{
    80010ea6:	711d                	addi	sp,sp,-96
    80010ea8:	ec86                	sd	ra,88(sp)
    80010eaa:	e8a2                	sd	s0,80(sp)
    80010eac:	1080                	addi	s0,sp,96
    80010eae:	faa43423          	sd	a0,-88(s0)
    Block *ptr  = heap->free;
    80010eb2:	00007797          	auipc	a5,0x7
    80010eb6:	17678793          	addi	a5,a5,374 # 80018028 <heap>
    80010eba:	639c                	ld	a5,0(a5)
    80010ebc:	639c                	ld	a5,0(a5)
    80010ebe:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80010ec2:	fe043023          	sd	zero,-32(s0)
    size_t top  = heap->top;
    80010ec6:	00007797          	auipc	a5,0x7
    80010eca:	16278793          	addi	a5,a5,354 # 80018028 <heap>
    80010ece:	639c                	ld	a5,0(a5)
    80010ed0:	6f9c                	ld	a5,24(a5)
    80010ed2:	fcf43c23          	sd	a5,-40(s0)
    num         = (num + heap_alignment - 1) & -heap_alignment;
    80010ed6:	00007797          	auipc	a5,0x7
    80010eda:	16a78793          	addi	a5,a5,362 # 80018040 <heap_alignment>
    80010ede:	6398                	ld	a4,0(a5)
    80010ee0:	fa843783          	ld	a5,-88(s0)
    80010ee4:	97ba                	add	a5,a5,a4
    80010ee6:	fff78713          	addi	a4,a5,-1
    80010eea:	00007797          	auipc	a5,0x7
    80010eee:	15678793          	addi	a5,a5,342 # 80018040 <heap_alignment>
    80010ef2:	639c                	ld	a5,0(a5)
    80010ef4:	40f007b3          	neg	a5,a5
    80010ef8:	8ff9                	and	a5,a5,a4
    80010efa:	faf43423          	sd	a5,-88(s0)
    while (ptr != NULL) {
    80010efe:	a2bd                	j	8001106c <alloc_block+0x1c6>
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80010f00:	fe843783          	ld	a5,-24(s0)
    80010f04:	639c                	ld	a5,0(a5)
    80010f06:	873e                	mv	a4,a5
    80010f08:	fe843783          	ld	a5,-24(s0)
    80010f0c:	6b9c                	ld	a5,16(a5)
    80010f0e:	97ba                	add	a5,a5,a4
    80010f10:	fd843703          	ld	a4,-40(s0)
    80010f14:	02e7e263          	bltu	a5,a4,80010f38 <alloc_block+0x92>
                           ((size_t)ptr->addr + num <= (size_t)heap_limit);
    80010f18:	fe843783          	ld	a5,-24(s0)
    80010f1c:	639c                	ld	a5,0(a5)
    80010f1e:	873e                	mv	a4,a5
    80010f20:	fa843783          	ld	a5,-88(s0)
    80010f24:	97ba                	add	a5,a5,a4
    80010f26:	00007717          	auipc	a4,0x7
    80010f2a:	10a70713          	addi	a4,a4,266 # 80018030 <heap_limit>
    80010f2e:	6318                	ld	a4,0(a4)
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80010f30:	00f76463          	bltu	a4,a5,80010f38 <alloc_block+0x92>
    80010f34:	4785                	li	a5,1
    80010f36:	a011                	j	80010f3a <alloc_block+0x94>
    80010f38:	4781                	li	a5,0
    80010f3a:	fcf42623          	sw	a5,-52(s0)
        if (is_top || ptr->size >= num) {
    80010f3e:	fcc42783          	lw	a5,-52(s0)
    80010f42:	2781                	sext.w	a5,a5
    80010f44:	eb81                	bnez	a5,80010f54 <alloc_block+0xae>
    80010f46:	fe843783          	ld	a5,-24(s0)
    80010f4a:	6b9c                	ld	a5,16(a5)
    80010f4c:	fa843703          	ld	a4,-88(s0)
    80010f50:	10e7e563          	bltu	a5,a4,8001105a <alloc_block+0x1b4>
            if (prev != NULL) {
    80010f54:	fe043783          	ld	a5,-32(s0)
    80010f58:	cb81                	beqz	a5,80010f68 <alloc_block+0xc2>
                prev->next = ptr->next;
    80010f5a:	fe843783          	ld	a5,-24(s0)
    80010f5e:	6798                	ld	a4,8(a5)
    80010f60:	fe043783          	ld	a5,-32(s0)
    80010f64:	e798                	sd	a4,8(a5)
    80010f66:	a811                	j	80010f7a <alloc_block+0xd4>
            }
            else {
                heap->free = ptr->next;
    80010f68:	00007797          	auipc	a5,0x7
    80010f6c:	0c078793          	addi	a5,a5,192 # 80018028 <heap>
    80010f70:	639c                	ld	a5,0(a5)
    80010f72:	fe843703          	ld	a4,-24(s0)
    80010f76:	6718                	ld	a4,8(a4)
    80010f78:	e398                	sd	a4,0(a5)
            }
            ptr->next  = heap->used;
    80010f7a:	00007797          	auipc	a5,0x7
    80010f7e:	0ae78793          	addi	a5,a5,174 # 80018028 <heap>
    80010f82:	639c                	ld	a5,0(a5)
    80010f84:	6798                	ld	a4,8(a5)
    80010f86:	fe843783          	ld	a5,-24(s0)
    80010f8a:	e798                	sd	a4,8(a5)
            heap->used = ptr;
    80010f8c:	00007797          	auipc	a5,0x7
    80010f90:	09c78793          	addi	a5,a5,156 # 80018028 <heap>
    80010f94:	639c                	ld	a5,0(a5)
    80010f96:	fe843703          	ld	a4,-24(s0)
    80010f9a:	e798                	sd	a4,8(a5)
            if (is_top) {
    80010f9c:	fcc42783          	lw	a5,-52(s0)
    80010fa0:	2781                	sext.w	a5,a5
    80010fa2:	c785                	beqz	a5,80010fca <alloc_block+0x124>
                ptr->size = num;
    80010fa4:	fe843783          	ld	a5,-24(s0)
    80010fa8:	fa843703          	ld	a4,-88(s0)
    80010fac:	eb98                	sd	a4,16(a5)
                heap->top = (size_t)ptr->addr + num;
    80010fae:	fe843783          	ld	a5,-24(s0)
    80010fb2:	639c                	ld	a5,0(a5)
    80010fb4:	86be                	mv	a3,a5
    80010fb6:	00007797          	auipc	a5,0x7
    80010fba:	07278793          	addi	a5,a5,114 # 80018028 <heap>
    80010fbe:	639c                	ld	a5,0(a5)
    80010fc0:	fa843703          	ld	a4,-88(s0)
    80010fc4:	9736                	add	a4,a4,a3
    80010fc6:	ef98                	sd	a4,24(a5)
    80010fc8:	a071                	j	80011054 <alloc_block+0x1ae>
            }
            else if (heap->fresh != NULL) {
    80010fca:	00007797          	auipc	a5,0x7
    80010fce:	05e78793          	addi	a5,a5,94 # 80018028 <heap>
    80010fd2:	639c                	ld	a5,0(a5)
    80010fd4:	6b9c                	ld	a5,16(a5)
    80010fd6:	cfbd                	beqz	a5,80011054 <alloc_block+0x1ae>
                size_t excess = ptr->size - num;
    80010fd8:	fe843783          	ld	a5,-24(s0)
    80010fdc:	6b98                	ld	a4,16(a5)
    80010fde:	fa843783          	ld	a5,-88(s0)
    80010fe2:	40f707b3          	sub	a5,a4,a5
    80010fe6:	fcf43023          	sd	a5,-64(s0)
                if (excess >= heap_split_thresh) {
    80010fea:	00007797          	auipc	a5,0x7
    80010fee:	04e78793          	addi	a5,a5,78 # 80018038 <heap_split_thresh>
    80010ff2:	639c                	ld	a5,0(a5)
    80010ff4:	fc043703          	ld	a4,-64(s0)
    80010ff8:	04f76e63          	bltu	a4,a5,80011054 <alloc_block+0x1ae>
                    ptr->size    = num;
    80010ffc:	fe843783          	ld	a5,-24(s0)
    80011000:	fa843703          	ld	a4,-88(s0)
    80011004:	eb98                	sd	a4,16(a5)
                    Block *split = heap->fresh;
    80011006:	00007797          	auipc	a5,0x7
    8001100a:	02278793          	addi	a5,a5,34 # 80018028 <heap>
    8001100e:	639c                	ld	a5,0(a5)
    80011010:	6b9c                	ld	a5,16(a5)
    80011012:	faf43c23          	sd	a5,-72(s0)
                    heap->fresh  = split->next;
    80011016:	00007797          	auipc	a5,0x7
    8001101a:	01278793          	addi	a5,a5,18 # 80018028 <heap>
    8001101e:	639c                	ld	a5,0(a5)
    80011020:	fb843703          	ld	a4,-72(s0)
    80011024:	6718                	ld	a4,8(a4)
    80011026:	eb98                	sd	a4,16(a5)
                    split->addr  = (void *)((size_t)ptr->addr + num);
    80011028:	fe843783          	ld	a5,-24(s0)
    8001102c:	639c                	ld	a5,0(a5)
    8001102e:	873e                	mv	a4,a5
    80011030:	fa843783          	ld	a5,-88(s0)
    80011034:	97ba                	add	a5,a5,a4
    80011036:	873e                	mv	a4,a5
    80011038:	fb843783          	ld	a5,-72(s0)
    8001103c:	e398                	sd	a4,0(a5)
                    split->size  = excess;
    8001103e:	fb843783          	ld	a5,-72(s0)
    80011042:	fc043703          	ld	a4,-64(s0)
    80011046:	eb98                	sd	a4,16(a5)
                    insert_block(split);
    80011048:	fb843503          	ld	a0,-72(s0)
    8001104c:	af7ff0ef          	jal	ra,80010b42 <insert_block>
                    compact();
    80011050:	bdfff0ef          	jal	ra,80010c2e <compact>
                }
            }
            return ptr;
    80011054:	fe843783          	ld	a5,-24(s0)
    80011058:	a875                	j	80011114 <alloc_block+0x26e>
        }
        prev = ptr;
    8001105a:	fe843783          	ld	a5,-24(s0)
    8001105e:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    80011062:	fe843783          	ld	a5,-24(s0)
    80011066:	679c                	ld	a5,8(a5)
    80011068:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    8001106c:	fe843783          	ld	a5,-24(s0)
    80011070:	e80798e3          	bnez	a5,80010f00 <alloc_block+0x5a>
    }
    // no matching free blocks
    // see if any other blocks available
    size_t new_top = top + num;
    80011074:	fd843703          	ld	a4,-40(s0)
    80011078:	fa843783          	ld	a5,-88(s0)
    8001107c:	97ba                	add	a5,a5,a4
    8001107e:	fcf43823          	sd	a5,-48(s0)
    if (heap->fresh != NULL && new_top <= (size_t)heap_limit) {
    80011082:	00007797          	auipc	a5,0x7
    80011086:	fa678793          	addi	a5,a5,-90 # 80018028 <heap>
    8001108a:	639c                	ld	a5,0(a5)
    8001108c:	6b9c                	ld	a5,16(a5)
    8001108e:	c3d1                	beqz	a5,80011112 <alloc_block+0x26c>
    80011090:	00007797          	auipc	a5,0x7
    80011094:	fa078793          	addi	a5,a5,-96 # 80018030 <heap_limit>
    80011098:	639c                	ld	a5,0(a5)
    8001109a:	873e                	mv	a4,a5
    8001109c:	fd043783          	ld	a5,-48(s0)
    800110a0:	06f76963          	bltu	a4,a5,80011112 <alloc_block+0x26c>
        ptr         = heap->fresh;
    800110a4:	00007797          	auipc	a5,0x7
    800110a8:	f8478793          	addi	a5,a5,-124 # 80018028 <heap>
    800110ac:	639c                	ld	a5,0(a5)
    800110ae:	6b9c                	ld	a5,16(a5)
    800110b0:	fef43423          	sd	a5,-24(s0)
        heap->fresh = ptr->next;
    800110b4:	00007797          	auipc	a5,0x7
    800110b8:	f7478793          	addi	a5,a5,-140 # 80018028 <heap>
    800110bc:	639c                	ld	a5,0(a5)
    800110be:	fe843703          	ld	a4,-24(s0)
    800110c2:	6718                	ld	a4,8(a4)
    800110c4:	eb98                	sd	a4,16(a5)
        ptr->addr   = (void *)top;
    800110c6:	fd843703          	ld	a4,-40(s0)
    800110ca:	fe843783          	ld	a5,-24(s0)
    800110ce:	e398                	sd	a4,0(a5)
        ptr->next   = heap->used;
    800110d0:	00007797          	auipc	a5,0x7
    800110d4:	f5878793          	addi	a5,a5,-168 # 80018028 <heap>
    800110d8:	639c                	ld	a5,0(a5)
    800110da:	6798                	ld	a4,8(a5)
    800110dc:	fe843783          	ld	a5,-24(s0)
    800110e0:	e798                	sd	a4,8(a5)
        ptr->size   = num;
    800110e2:	fe843783          	ld	a5,-24(s0)
    800110e6:	fa843703          	ld	a4,-88(s0)
    800110ea:	eb98                	sd	a4,16(a5)
        heap->used  = ptr;
    800110ec:	00007797          	auipc	a5,0x7
    800110f0:	f3c78793          	addi	a5,a5,-196 # 80018028 <heap>
    800110f4:	639c                	ld	a5,0(a5)
    800110f6:	fe843703          	ld	a4,-24(s0)
    800110fa:	e798                	sd	a4,8(a5)
        heap->top   = new_top;
    800110fc:	00007797          	auipc	a5,0x7
    80011100:	f2c78793          	addi	a5,a5,-212 # 80018028 <heap>
    80011104:	639c                	ld	a5,0(a5)
    80011106:	fd043703          	ld	a4,-48(s0)
    8001110a:	ef98                	sd	a4,24(a5)
        return ptr;
    8001110c:	fe843783          	ld	a5,-24(s0)
    80011110:	a011                	j	80011114 <alloc_block+0x26e>
    }
    return NULL;
    80011112:	4781                	li	a5,0
}
    80011114:	853e                	mv	a0,a5
    80011116:	60e6                	ld	ra,88(sp)
    80011118:	6446                	ld	s0,80(sp)
    8001111a:	6125                	addi	sp,sp,96
    8001111c:	8082                	ret

000000008001111e <alloc>:

static void *alloc(size_t num)
{
    8001111e:	7179                	addi	sp,sp,-48
    80011120:	f406                	sd	ra,40(sp)
    80011122:	f022                	sd	s0,32(sp)
    80011124:	1800                	addi	s0,sp,48
    80011126:	fca43c23          	sd	a0,-40(s0)
    Block *block = alloc_block(num);
    8001112a:	fd843503          	ld	a0,-40(s0)
    8001112e:	d79ff0ef          	jal	ra,80010ea6 <alloc_block>
    80011132:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    80011136:	fe843783          	ld	a5,-24(s0)
    8001113a:	c789                	beqz	a5,80011144 <alloc+0x26>
        return block->addr;
    8001113c:	fe843783          	ld	a5,-24(s0)
    80011140:	639c                	ld	a5,0(a5)
    80011142:	a011                	j	80011146 <alloc+0x28>
    }
    return NULL;
    80011144:	4781                	li	a5,0
}
    80011146:	853e                	mv	a0,a5
    80011148:	70a2                	ld	ra,40(sp)
    8001114a:	7402                	ld	s0,32(sp)
    8001114c:	6145                	addi	sp,sp,48
    8001114e:	8082                	ret

0000000080011150 <calloc>:

static void *calloc(size_t num, size_t size)
{
    80011150:	7179                	addi	sp,sp,-48
    80011152:	f406                	sd	ra,40(sp)
    80011154:	f022                	sd	s0,32(sp)
    80011156:	1800                	addi	s0,sp,48
    80011158:	fca43c23          	sd	a0,-40(s0)
    8001115c:	fcb43823          	sd	a1,-48(s0)
    num *= size;
    80011160:	fd843703          	ld	a4,-40(s0)
    80011164:	fd043783          	ld	a5,-48(s0)
    80011168:	02f707b3          	mul	a5,a4,a5
    8001116c:	fcf43c23          	sd	a5,-40(s0)
    Block *block = alloc_block(num);
    80011170:	fd843503          	ld	a0,-40(s0)
    80011174:	d33ff0ef          	jal	ra,80010ea6 <alloc_block>
    80011178:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    8001117c:	fe843783          	ld	a5,-24(s0)
    80011180:	c385                	beqz	a5,800111a0 <calloc+0x50>
        memset(block->addr, 0, num);
    80011182:	fe843783          	ld	a5,-24(s0)
    80011186:	639c                	ld	a5,0(a5)
    80011188:	fd843703          	ld	a4,-40(s0)
    8001118c:	2701                	sext.w	a4,a4
    8001118e:	863a                	mv	a2,a4
    80011190:	4581                	li	a1,0
    80011192:	853e                	mv	a0,a5
    80011194:	06e040ef          	jal	ra,80015202 <memset>
        return block->addr;
    80011198:	fe843783          	ld	a5,-24(s0)
    8001119c:	639c                	ld	a5,0(a5)
    8001119e:	a011                	j	800111a2 <calloc+0x52>
    }
    return NULL;
    800111a0:	4781                	li	a5,0
}
    800111a2:	853e                	mv	a0,a5
    800111a4:	70a2                	ld	ra,40(sp)
    800111a6:	7402                	ld	s0,32(sp)
    800111a8:	6145                	addi	sp,sp,48
    800111aa:	8082                	ret

00000000800111ac <count_blocks>:

static size_t count_blocks(Block *ptr)
{
    800111ac:	7179                	addi	sp,sp,-48
    800111ae:	f422                	sd	s0,40(sp)
    800111b0:	1800                	addi	s0,sp,48
    800111b2:	fca43c23          	sd	a0,-40(s0)
    size_t num = 0;
    800111b6:	fe043423          	sd	zero,-24(s0)
    while (ptr != NULL) {
    800111ba:	a819                	j	800111d0 <count_blocks+0x24>
        num++;
    800111bc:	fe843783          	ld	a5,-24(s0)
    800111c0:	0785                	addi	a5,a5,1
    800111c2:	fef43423          	sd	a5,-24(s0)
        ptr = ptr->next;
    800111c6:	fd843783          	ld	a5,-40(s0)
    800111ca:	679c                	ld	a5,8(a5)
    800111cc:	fcf43c23          	sd	a5,-40(s0)
    while (ptr != NULL) {
    800111d0:	fd843783          	ld	a5,-40(s0)
    800111d4:	f7e5                	bnez	a5,800111bc <count_blocks+0x10>
    }
    return num;
    800111d6:	fe843783          	ld	a5,-24(s0)
}
    800111da:	853e                	mv	a0,a5
    800111dc:	7422                	ld	s0,40(sp)
    800111de:	6145                	addi	sp,sp,48
    800111e0:	8082                	ret

00000000800111e2 <heap_num_free>:
static size_t heap_num_free()
{
    800111e2:	1141                	addi	sp,sp,-16
    800111e4:	e406                	sd	ra,8(sp)
    800111e6:	e022                	sd	s0,0(sp)
    800111e8:	0800                	addi	s0,sp,16
    return count_blocks(heap->free);
    800111ea:	00007797          	auipc	a5,0x7
    800111ee:	e3e78793          	addi	a5,a5,-450 # 80018028 <heap>
    800111f2:	639c                	ld	a5,0(a5)
    800111f4:	639c                	ld	a5,0(a5)
    800111f6:	853e                	mv	a0,a5
    800111f8:	fb5ff0ef          	jal	ra,800111ac <count_blocks>
    800111fc:	87aa                	mv	a5,a0
}
    800111fe:	853e                	mv	a0,a5
    80011200:	60a2                	ld	ra,8(sp)
    80011202:	6402                	ld	s0,0(sp)
    80011204:	0141                	addi	sp,sp,16
    80011206:	8082                	ret

0000000080011208 <heap_num_used>:
static size_t heap_num_used()
{
    80011208:	1141                	addi	sp,sp,-16
    8001120a:	e406                	sd	ra,8(sp)
    8001120c:	e022                	sd	s0,0(sp)
    8001120e:	0800                	addi	s0,sp,16
    return count_blocks(heap->used);
    80011210:	00007797          	auipc	a5,0x7
    80011214:	e1878793          	addi	a5,a5,-488 # 80018028 <heap>
    80011218:	639c                	ld	a5,0(a5)
    8001121a:	679c                	ld	a5,8(a5)
    8001121c:	853e                	mv	a0,a5
    8001121e:	f8fff0ef          	jal	ra,800111ac <count_blocks>
    80011222:	87aa                	mv	a5,a0
}
    80011224:	853e                	mv	a0,a5
    80011226:	60a2                	ld	ra,8(sp)
    80011228:	6402                	ld	s0,0(sp)
    8001122a:	0141                	addi	sp,sp,16
    8001122c:	8082                	ret

000000008001122e <heap_num_fresh>:
static size_t heap_num_fresh()
{
    8001122e:	1141                	addi	sp,sp,-16
    80011230:	e406                	sd	ra,8(sp)
    80011232:	e022                	sd	s0,0(sp)
    80011234:	0800                	addi	s0,sp,16
    return count_blocks(heap->fresh);
    80011236:	00007797          	auipc	a5,0x7
    8001123a:	df278793          	addi	a5,a5,-526 # 80018028 <heap>
    8001123e:	639c                	ld	a5,0(a5)
    80011240:	6b9c                	ld	a5,16(a5)
    80011242:	853e                	mv	a0,a5
    80011244:	f69ff0ef          	jal	ra,800111ac <count_blocks>
    80011248:	87aa                	mv	a5,a0
}
    8001124a:	853e                	mv	a0,a5
    8001124c:	60a2                	ld	ra,8(sp)
    8001124e:	6402                	ld	s0,0(sp)
    80011250:	0141                	addi	sp,sp,16
    80011252:	8082                	ret

0000000080011254 <heap_check>:
static bool heap_check()
{
    80011254:	1101                	addi	sp,sp,-32
    80011256:	ec06                	sd	ra,24(sp)
    80011258:	e822                	sd	s0,16(sp)
    8001125a:	e426                	sd	s1,8(sp)
    8001125c:	1000                	addi	s0,sp,32
    return heap_max_blocks == heap_num_free() + heap_num_used() + heap_num_fresh();
    8001125e:	f85ff0ef          	jal	ra,800111e2 <heap_num_free>
    80011262:	84aa                	mv	s1,a0
    80011264:	fa5ff0ef          	jal	ra,80011208 <heap_num_used>
    80011268:	87aa                	mv	a5,a0
    8001126a:	94be                	add	s1,s1,a5
    8001126c:	fc3ff0ef          	jal	ra,8001122e <heap_num_fresh>
    80011270:	87aa                	mv	a5,a0
    80011272:	00f48733          	add	a4,s1,a5
    80011276:	00007797          	auipc	a5,0x7
    8001127a:	dd278793          	addi	a5,a5,-558 # 80018048 <heap_max_blocks>
    8001127e:	639c                	ld	a5,0(a5)
    80011280:	40f707b3          	sub	a5,a4,a5
    80011284:	0017b793          	seqz	a5,a5
    80011288:	0ff7f793          	andi	a5,a5,255
}
    8001128c:	853e                	mv	a0,a5
    8001128e:	60e2                	ld	ra,24(sp)
    80011290:	6442                	ld	s0,16(sp)
    80011292:	64a2                	ld	s1,8(sp)
    80011294:	6105                	addi	sp,sp,32
    80011296:	8082                	ret

0000000080011298 <heap_print_stats>:

void heap_print_stats(void)
{
    80011298:	7179                	addi	sp,sp,-48
    8001129a:	f406                	sd	ra,40(sp)
    8001129c:	f022                	sd	s0,32(sp)
    8001129e:	ec26                	sd	s1,24(sp)
    800112a0:	e84a                	sd	s2,16(sp)
    800112a2:	e44e                	sd	s3,8(sp)
    800112a4:	1800                	addi	s0,sp,48
    debugf(
    800112a6:	f3dff0ef          	jal	ra,800111e2 <heap_num_free>
    800112aa:	84aa                	mv	s1,a0
    800112ac:	f5dff0ef          	jal	ra,80011208 <heap_num_used>
    800112b0:	892a                	mv	s2,a0
    800112b2:	f7dff0ef          	jal	ra,8001122e <heap_num_fresh>
    800112b6:	89aa                	mv	s3,a0
        "HEAP\n~~~~\nFree blocks:    %lu\nUsed blocks:    %lu\nFresh blocks:   %lu\nHeap "
        "check:     %s\n",
        heap_num_free(), heap_num_used(), heap_num_fresh(), heap_check() ? "good" : "bad");
    800112b8:	f9dff0ef          	jal	ra,80011254 <heap_check>
    800112bc:	87aa                	mv	a5,a0
    debugf(
    800112be:	c791                	beqz	a5,800112ca <heap_print_stats+0x32>
    800112c0:	00008797          	auipc	a5,0x8
    800112c4:	fc078793          	addi	a5,a5,-64 # 80019280 <SYSCALLS+0x280>
    800112c8:	a029                	j	800112d2 <heap_print_stats+0x3a>
    800112ca:	00008797          	auipc	a5,0x8
    800112ce:	fbe78793          	addi	a5,a5,-66 # 80019288 <SYSCALLS+0x288>
    800112d2:	873e                	mv	a4,a5
    800112d4:	86ce                	mv	a3,s3
    800112d6:	864a                	mv	a2,s2
    800112d8:	85a6                	mv	a1,s1
    800112da:	00008517          	auipc	a0,0x8
    800112de:	fb650513          	addi	a0,a0,-74 # 80019290 <SYSCALLS+0x290>
    800112e2:	2d5000ef          	jal	ra,80011db6 <debugf>
}
    800112e6:	0001                	nop
    800112e8:	70a2                	ld	ra,40(sp)
    800112ea:	7402                	ld	s0,32(sp)
    800112ec:	64e2                	ld	s1,24(sp)
    800112ee:	6942                	ld	s2,16(sp)
    800112f0:	69a2                	ld	s3,8(sp)
    800112f2:	6145                	addi	sp,sp,48
    800112f4:	8082                	ret

00000000800112f6 <kmalloc>:
void *kmalloc(size_t sz)
{
    800112f6:	1101                	addi	sp,sp,-32
    800112f8:	ec06                	sd	ra,24(sp)
    800112fa:	e822                	sd	s0,16(sp)
    800112fc:	1000                	addi	s0,sp,32
    800112fe:	fea43423          	sd	a0,-24(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kmalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
    return alloc(sz);
    80011302:	fe843503          	ld	a0,-24(s0)
    80011306:	e19ff0ef          	jal	ra,8001111e <alloc>
    8001130a:	87aa                	mv	a5,a0
}
    8001130c:	853e                	mv	a0,a5
    8001130e:	60e2                	ld	ra,24(sp)
    80011310:	6442                	ld	s0,16(sp)
    80011312:	6105                	addi	sp,sp,32
    80011314:	8082                	ret

0000000080011316 <kcalloc>:
void *kcalloc(size_t n, size_t sz)
{
    80011316:	1101                	addi	sp,sp,-32
    80011318:	ec06                	sd	ra,24(sp)
    8001131a:	e822                	sd	s0,16(sp)
    8001131c:	1000                	addi	s0,sp,32
    8001131e:	fea43423          	sd	a0,-24(s0)
    80011322:	feb43023          	sd	a1,-32(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kcalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
    return calloc(n, sz);
    80011326:	fe043583          	ld	a1,-32(s0)
    8001132a:	fe843503          	ld	a0,-24(s0)
    8001132e:	e23ff0ef          	jal	ra,80011150 <calloc>
    80011332:	87aa                	mv	a5,a0
}
    80011334:	853e                	mv	a0,a5
    80011336:	60e2                	ld	ra,24(sp)
    80011338:	6442                	ld	s0,16(sp)
    8001133a:	6105                	addi	sp,sp,32
    8001133c:	8082                	ret

000000008001133e <kfree>:
void kfree(void *m)
{
    8001133e:	1101                	addi	sp,sp,-32
    80011340:	ec06                	sd	ra,24(sp)
    80011342:	e822                	sd	s0,16(sp)
    80011344:	1000                	addi	s0,sp,32
    80011346:	fea43423          	sd	a0,-24(s0)
    if (m != NULL) {
    8001134a:	fe843783          	ld	a5,-24(s0)
    8001134e:	c789                	beqz	a5,80011358 <kfree+0x1a>
        free(m);
    80011350:	fe843503          	ld	a0,-24(s0)
    80011354:	ac9ff0ef          	jal	ra,80010e1c <free>
    }
#ifdef DEBUG_KMALLOC
    debugf("[kfree]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
}
    80011358:	0001                	nop
    8001135a:	60e2                	ld	ra,24(sp)
    8001135c:	6442                	ld	s0,16(sp)
    8001135e:	6105                	addi	sp,sp,32
    80011360:	8082                	ret

0000000080011362 <heap_init>:

void heap_init(void)
{
    80011362:	1101                	addi	sp,sp,-32
    80011364:	ec06                	sd	ra,24(sp)
    80011366:	e822                	sd	s0,16(sp)
    80011368:	1000                	addi	s0,sp,32
#ifdef DEBUG_HEAP
    debugf("[heap_init]: Prior to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
           page_count_free());
#endif
    void *start = page_znalloc(KERNEL_HEAP_PAGES);
    8001136a:	6505                	lui	a0,0x1
    8001136c:	620010ef          	jal	ra,8001298c <page_znalloc>
    80011370:	fea43423          	sd	a0,-24(s0)
    debugf("[heap_init]: Heap start at 0x%08lx\n", start);
    debugf("[heap_init]: After to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
           page_count_free());
#endif

    mmu_map_range(kernel_mmu_table, KERNEL_HEAP_START_VADDR, KERNEL_HEAP_END_VADDR, (uint64_t)start,
    80011374:	00007797          	auipc	a5,0x7
    80011378:	c8c78793          	addi	a5,a5,-884 # 80018000 <kernel_mmu_table>
    8001137c:	6388                	ld	a0,0(a5)
    8001137e:	fe843683          	ld	a3,-24(s0)
    80011382:	4799                	li	a5,6
    80011384:	4701                	li	a4,0
    80011386:	00e08637          	lui	a2,0xe08
    8001138a:	7f760613          	addi	a2,a2,2039 # e087f7 <i+0xe087d7>
    8001138e:	0636                	slli	a2,a2,0xd
    80011390:	00e085b7          	lui	a1,0xe08
    80011394:	15dd                	addi	a1,a1,-9
    80011396:	05b6                	slli	a1,a1,0xd
    80011398:	cf8ff0ef          	jal	ra,80010890 <mmu_map_range>
                  MMU_LEVEL_4K, PB_READ | PB_WRITE);
    init((void *)KERNEL_HEAP_START_VADDR, (void *)KERNEL_HEAP_END_VADDR, KERNEL_HEAP_PAGES / 4, 16,
    8001139c:	4721                	li	a4,8
    8001139e:	46c1                	li	a3,16
    800113a0:	40000613          	li	a2,1024
    800113a4:	00e087b7          	lui	a5,0xe08
    800113a8:	7f778793          	addi	a5,a5,2039 # e087f7 <i+0xe087d7>
    800113ac:	00d79593          	slli	a1,a5,0xd
    800113b0:	00e087b7          	lui	a5,0xe08
    800113b4:	17dd                	addi	a5,a5,-9
    800113b6:	00d79513          	slli	a0,a5,0xd
    800113ba:	94bff0ef          	jal	ra,80010d04 <init>
         8);

}
    800113be:	0001                	nop
    800113c0:	60e2                	ld	ra,24(sp)
    800113c2:	6442                	ld	s0,16(sp)
    800113c4:	6105                	addi	sp,sp,32
    800113c6:	8082                	ret

00000000800113c8 <init_systems>:
// the kernel.
// Defined in src/include/mmu.h
struct page_table *kernel_mmu_table;

static void init_systems(void)
{
    800113c8:	1141                	addi	sp,sp,-16
    800113ca:	e406                	sd	ra,8(sp)
    800113cc:	e022                	sd	s0,0(sp)
    800113ce:	0800                	addi	s0,sp,16
    void plic_init(void);
    plic_init();
    800113d0:	783000ef          	jal	ra,80012352 <plic_init>
    void page_init(void);
    page_init();
    800113d4:	254010ef          	jal	ra,80012628 <page_init>
    pci_init();
#endif
#ifdef USE_VIRTIO
    virtio_init();
#endif
}
    800113d8:	0001                	nop
    800113da:	60a2                	ld	ra,8(sp)
    800113dc:	6402                	ld	s0,0(sp)
    800113de:	0141                	addi	sp,sp,16
    800113e0:	8082                	ret

00000000800113e2 <main>:
static const char *hart_status_values[] = {"NOT PRESENT", "STOPPED", "STARTING", "RUNNING"};
#ifdef RUN_INTERNAL_CONSOLE
static void console(void);
#endif
void main(unsigned int hart)
{
    800113e2:	7179                	addi	sp,sp,-48
    800113e4:	f406                	sd	ra,40(sp)
    800113e6:	f022                	sd	s0,32(sp)
    800113e8:	1800                	addi	s0,sp,48
    800113ea:	87aa                	mv	a5,a0
    800113ec:	fcf42e23          	sw	a5,-36(s0)
    // Initialize the page allocator
    // Allocate and zero the kernel's page table.

    // Kind of neat to see our memory mappings to ensure they make sense.
    logf(LOG_INFO, "[[ MEMORY MAPPINGS ]]\n");
    800113f0:	00008597          	auipc	a1,0x8
    800113f4:	f3058593          	addi	a1,a1,-208 # 80019320 <SYSCALLS+0x320>
    800113f8:	4511                	li	a0,4
    800113fa:	15f000ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  [TEXT]  : 0x%08lx -> 0x%08lx\n", sym_start(text), sym_end(text));
    800113fe:	fffff797          	auipc	a5,0xfffff
    80011402:	c0278793          	addi	a5,a5,-1022 # 80010000 <_memory_start>
    80011406:	00005717          	auipc	a4,0x5
    8001140a:	43c70713          	addi	a4,a4,1084 # 80016842 <_text_end>
    8001140e:	86ba                	mv	a3,a4
    80011410:	863e                	mv	a2,a5
    80011412:	00008597          	auipc	a1,0x8
    80011416:	f2658593          	addi	a1,a1,-218 # 80019338 <SYSCALLS+0x338>
    8001141a:	4511                	li	a0,4
    8001141c:	13d000ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  [BSS]   : 0x%08lx -> 0x%08lx\n", sym_start(bss), sym_end(bss));
    80011420:	00007797          	auipc	a5,0x7
    80011424:	be078793          	addi	a5,a5,-1056 # 80018000 <kernel_mmu_table>
    80011428:	00007717          	auipc	a4,0x7
    8001142c:	c3070713          	addi	a4,a4,-976 # 80018058 <_bss_end>
    80011430:	86ba                	mv	a3,a4
    80011432:	863e                	mv	a2,a5
    80011434:	00008597          	auipc	a1,0x8
    80011438:	f2458593          	addi	a1,a1,-220 # 80019358 <SYSCALLS+0x358>
    8001143c:	4511                	li	a0,4
    8001143e:	11b000ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  [RODATA]: 0x%08lx -> 0x%08lx\n", sym_start(rodata), sym_end(rodata));
    80011442:	00008797          	auipc	a5,0x8
    80011446:	bbe78793          	addi	a5,a5,-1090 # 80019000 <SYSCALLS>
    8001144a:	00009717          	auipc	a4,0x9
    8001144e:	f3670713          	addi	a4,a4,-202 # 8001a380 <NUM_SYSCALLS>
    80011452:	86ba                	mv	a3,a4
    80011454:	863e                	mv	a2,a5
    80011456:	00008597          	auipc	a1,0x8
    8001145a:	f2258593          	addi	a1,a1,-222 # 80019378 <SYSCALLS+0x378>
    8001145e:	4511                	li	a0,4
    80011460:	0f9000ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  [DATA]  : 0x%08lx -> 0x%08lx\n", sym_start(data), sym_end(data));
    80011464:	0000a797          	auipc	a5,0xa
    80011468:	b9c78793          	addi	a5,a5,-1124 # 8001b000 <k_log_level>
    8001146c:	0000a717          	auipc	a4,0xa
    80011470:	bbc70713          	addi	a4,a4,-1092 # 8001b028 <_data_end>
    80011474:	86ba                	mv	a3,a4
    80011476:	863e                	mv	a2,a5
    80011478:	00008597          	auipc	a1,0x8
    8001147c:	f2058593          	addi	a1,a1,-224 # 80019398 <SYSCALLS+0x398>
    80011480:	4511                	li	a0,4
    80011482:	0d7000ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  [STACK] : 0x%08lx -> 0x%08lx\n", sym_start(stack), sym_end(stack));
    80011486:	0000b797          	auipc	a5,0xb
    8001148a:	b7a78793          	addi	a5,a5,-1158 # 8001c000 <_stack_start>
    8001148e:	00013717          	auipc	a4,0x13
    80011492:	b7270713          	addi	a4,a4,-1166 # 80024000 <_heap_start>
    80011496:	86ba                	mv	a3,a4
    80011498:	863e                	mv	a2,a5
    8001149a:	00008597          	auipc	a1,0x8
    8001149e:	f1e58593          	addi	a1,a1,-226 # 800193b8 <SYSCALLS+0x3b8>
    800114a2:	4511                	li	a0,4
    800114a4:	0b5000ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  [HEAP]  : 0x%08lx -> 0x%08lx\n", sym_start(heap), sym_end(heap));
    800114a8:	00013797          	auipc	a5,0x13
    800114ac:	b5878793          	addi	a5,a5,-1192 # 80024000 <_heap_start>
    800114b0:	07fff717          	auipc	a4,0x7fff
    800114b4:	b5070713          	addi	a4,a4,-1200 # 88010000 <_heap_end>
    800114b8:	86ba                	mv	a3,a4
    800114ba:	863e                	mv	a2,a5
    800114bc:	00008597          	auipc	a1,0x8
    800114c0:	f1c58593          	addi	a1,a1,-228 # 800193d8 <SYSCALLS+0x3d8>
    800114c4:	4511                	li	a0,4
    800114c6:	093000ef          	jal	ra,80011d58 <logf>

    logf(LOG_INFO, "[[ HART MAPPINGS ]]\n");
    800114ca:	00008597          	auipc	a1,0x8
    800114ce:	f2e58593          	addi	a1,a1,-210 # 800193f8 <SYSCALLS+0x3f8>
    800114d2:	4511                	li	a0,4
    800114d4:	085000ef          	jal	ra,80011d58 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    800114d8:	fe042623          	sw	zero,-20(s0)
    800114dc:	a8bd                	j	8001155a <main+0x178>
        if (i == hart) {
    800114de:	fec42703          	lw	a4,-20(s0)
    800114e2:	fdc42783          	lw	a5,-36(s0)
    800114e6:	2701                	sext.w	a4,a4
    800114e8:	2781                	sext.w	a5,a5
    800114ea:	02f71b63          	bne	a4,a5,80011520 <main+0x13e>
            logf(LOG_INFO, "  [HART#%d]: %s (this HART).\n", i, hart_status_values[sbi_hart_get_status(i)]);
    800114ee:	fec42783          	lw	a5,-20(s0)
    800114f2:	853e                	mv	a0,a5
    800114f4:	21d000ef          	jal	ra,80011f10 <sbi_hart_get_status>
    800114f8:	87aa                	mv	a5,a0
    800114fa:	0000a717          	auipc	a4,0xa
    800114fe:	b0e70713          	addi	a4,a4,-1266 # 8001b008 <hart_status_values>
    80011502:	078e                	slli	a5,a5,0x3
    80011504:	97ba                	add	a5,a5,a4
    80011506:	6398                	ld	a4,0(a5)
    80011508:	fec42783          	lw	a5,-20(s0)
    8001150c:	86ba                	mv	a3,a4
    8001150e:	863e                	mv	a2,a5
    80011510:	00008597          	auipc	a1,0x8
    80011514:	f0058593          	addi	a1,a1,-256 # 80019410 <SYSCALLS+0x410>
    80011518:	4511                	li	a0,4
    8001151a:	03f000ef          	jal	ra,80011d58 <logf>
    8001151e:	a80d                	j	80011550 <main+0x16e>
        }
        else {
            logf(LOG_INFO, "  [HART#%d]: %s.\n", i, hart_status_values[sbi_hart_get_status(i)]);
    80011520:	fec42783          	lw	a5,-20(s0)
    80011524:	853e                	mv	a0,a5
    80011526:	1eb000ef          	jal	ra,80011f10 <sbi_hart_get_status>
    8001152a:	87aa                	mv	a5,a0
    8001152c:	0000a717          	auipc	a4,0xa
    80011530:	adc70713          	addi	a4,a4,-1316 # 8001b008 <hart_status_values>
    80011534:	078e                	slli	a5,a5,0x3
    80011536:	97ba                	add	a5,a5,a4
    80011538:	6398                	ld	a4,0(a5)
    8001153a:	fec42783          	lw	a5,-20(s0)
    8001153e:	86ba                	mv	a3,a4
    80011540:	863e                	mv	a2,a5
    80011542:	00008597          	auipc	a1,0x8
    80011546:	eee58593          	addi	a1,a1,-274 # 80019430 <SYSCALLS+0x430>
    8001154a:	4511                	li	a0,4
    8001154c:	00d000ef          	jal	ra,80011d58 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80011550:	fec42783          	lw	a5,-20(s0)
    80011554:	2785                	addiw	a5,a5,1
    80011556:	fef42623          	sw	a5,-20(s0)
    8001155a:	fec42783          	lw	a5,-20(s0)
    8001155e:	0007871b          	sext.w	a4,a5
    80011562:	478d                	li	a5,3
    80011564:	f6e7fde3          	bgeu	a5,a4,800114de <main+0xfc>
        }
    }

    struct page_table *pt    = mmu_table_create();
    80011568:	f11fe0ef          	jal	ra,80010478 <mmu_table_create>
    8001156c:	fea43023          	sd	a0,-32(s0)
    kernel_mmu_table = pt;
    80011570:	00007797          	auipc	a5,0x7
    80011574:	a9078793          	addi	a5,a5,-1392 # 80018000 <kernel_mmu_table>
    80011578:	fe043703          	ld	a4,-32(s0)
    8001157c:	e398                	sd	a4,0(a5)
    // Map memory segments for our kernel
    mmu_map_range(pt, sym_start(text), sym_end(heap), sym_start(text), MMU_LEVEL_1G,
    8001157e:	fffff597          	auipc	a1,0xfffff
    80011582:	a8258593          	addi	a1,a1,-1406 # 80010000 <_memory_start>
    80011586:	07fff617          	auipc	a2,0x7fff
    8001158a:	a7a60613          	addi	a2,a2,-1414 # 88010000 <_heap_end>
    8001158e:	fffff697          	auipc	a3,0xfffff
    80011592:	a7268693          	addi	a3,a3,-1422 # 80010000 <_memory_start>
    80011596:	47b9                	li	a5,14
    80011598:	4709                	li	a4,2
    8001159a:	fe043503          	ld	a0,-32(s0)
    8001159e:	af2ff0ef          	jal	ra,80010890 <mmu_map_range>
                  PB_READ | PB_WRITE | PB_EXECUTE);
    // PLIC
    mmu_map_range(pt, 0x0C000000, 0x0C2FFFFF, 0x0C000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    800115a2:	4799                	li	a5,6
    800115a4:	4705                	li	a4,1
    800115a6:	0c0006b7          	lui	a3,0xc000
    800115aa:	0c300637          	lui	a2,0xc300
    800115ae:	167d                	addi	a2,a2,-1
    800115b0:	0c0005b7          	lui	a1,0xc000
    800115b4:	fe043503          	ld	a0,-32(s0)
    800115b8:	ad8ff0ef          	jal	ra,80010890 <mmu_map_range>
    // PCIe ECAM
    mmu_map_range(pt, 0x30000000, 0x30FFFFFF, 0x30000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    800115bc:	4799                	li	a5,6
    800115be:	4705                	li	a4,1
    800115c0:	300006b7          	lui	a3,0x30000
    800115c4:	31000637          	lui	a2,0x31000
    800115c8:	167d                	addi	a2,a2,-1
    800115ca:	300005b7          	lui	a1,0x30000
    800115ce:	fe043503          	ld	a0,-32(s0)
    800115d2:	abeff0ef          	jal	ra,80010890 <mmu_map_range>
    // PCIe MMIO
    mmu_map_range(pt, 0x40000000, 0x4FFFFFFF, 0x40000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    800115d6:	4799                	li	a5,6
    800115d8:	4705                	li	a4,1
    800115da:	400006b7          	lui	a3,0x40000
    800115de:	50000637          	lui	a2,0x50000
    800115e2:	167d                	addi	a2,a2,-1
    800115e4:	400005b7          	lui	a1,0x40000
    800115e8:	fe043503          	ld	a0,-32(s0)
    800115ec:	aa4ff0ef          	jal	ra,80010890 <mmu_map_range>

    // MMU is turned on here.

    // Initialize all submodules here, including PCI, VirtIO, Heap, etc.
    // Many will require the MMU, so write those functions first.
    init_systems();
    800115f0:	dd9ff0ef          	jal	ra,800113c8 <init_systems>

    // Now that all submodules are initialized, you need to schedule the init process
    // and the idle processes for each HART.
    logf(LOG_INFO, "Congratulations! You made it to the OS! Going back to sleep.\n");
    800115f4:	00008597          	auipc	a1,0x8
    800115f8:	e5458593          	addi	a1,a1,-428 # 80019448 <SYSCALLS+0x448>
    800115fc:	4511                	li	a0,4
    800115fe:	75a000ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, 
    80011602:	00008597          	auipc	a1,0x8
    80011606:	e8658593          	addi	a1,a1,-378 # 80019488 <SYSCALLS+0x488>
    8001160a:	4511                	li	a0,4
    8001160c:	74c000ef          	jal	ra,80011d58 <logf>
        "The logf function in the OS uses sbi_putchar(), so this means ECALLs from S-mode are "
        "working!\n");
    logf(LOG_INFO, 
    80011610:	00008597          	auipc	a1,0x8
    80011614:	ed858593          	addi	a1,a1,-296 # 800194e8 <SYSCALLS+0x4e8>
    80011618:	4511                	li	a0,4
    8001161a:	73e000ef          	jal	ra,80011d58 <logf>
    // Below is just a little shell that demonstrates the sbi_getchar and
    // how the console works.

    // This is defined above main()
#ifdef RUN_INTERNAL_CONSOLE
    console();
    8001161e:	004000ef          	jal	ra,80011622 <console>

0000000080011622 <console>:
#endif
}

#ifdef RUN_INTERNAL_CONSOLE
ATTR_NORET static void console(void)
{
    80011622:	7179                	addi	sp,sp,-48
    80011624:	f406                	sd	ra,40(sp)
    80011626:	f022                	sd	s0,32(sp)
    80011628:	1800                	addi	s0,sp,48
    const int BUFFER_SIZE = 56;
    8001162a:	03800313          	li	t1,56
    8001162e:	fe642423          	sw	t1,-24(s0)
    int at                = 0;
    80011632:	fe042623          	sw	zero,-20(s0)
    char input[BUFFER_SIZE];
    80011636:	fe842303          	lw	t1,-24(s0)
    8001163a:	137d                	addi	t1,t1,-1
    8001163c:	fe643023          	sd	t1,-32(s0)
    80011640:	fe842303          	lw	t1,-24(s0)
    80011644:	881a                	mv	a6,t1
    80011646:	4881                	li	a7,0
    80011648:	03d85313          	srli	t1,a6,0x3d
    8001164c:	00389693          	slli	a3,a7,0x3
    80011650:	00d366b3          	or	a3,t1,a3
    80011654:	00381613          	slli	a2,a6,0x3
    80011658:	fe842683          	lw	a3,-24(s0)
    8001165c:	8536                	mv	a0,a3
    8001165e:	4581                	li	a1,0
    80011660:	03d55693          	srli	a3,a0,0x3d
    80011664:	00359793          	slli	a5,a1,0x3
    80011668:	8fd5                	or	a5,a5,a3
    8001166a:	00351713          	slli	a4,a0,0x3
    8001166e:	fe842783          	lw	a5,-24(s0)
    80011672:	07bd                	addi	a5,a5,15
    80011674:	8391                	srli	a5,a5,0x4
    80011676:	0792                	slli	a5,a5,0x4
    80011678:	40f10133          	sub	sp,sp,a5
    8001167c:	878a                	mv	a5,sp
    8001167e:	00078793          	mv	a5,a5
    80011682:	fcf43c23          	sd	a5,-40(s0)
    logf(LOG_TEXT, "> ");
    80011686:	00008597          	auipc	a1,0x8
    8001168a:	ec258593          	addi	a1,a1,-318 # 80019548 <SYSCALLS+0x548>
    8001168e:	4541                	li	a0,16
    80011690:	6c8000ef          	jal	ra,80011d58 <logf>
    do {
        char c;
        // Recall that sbi_getchar() will return -1, 0xff, 255
        // if the receiver is empty.
        if ((c = sbi_getchar()) != 0xff) {
    80011694:	05d000ef          	jal	ra,80011ef0 <sbi_getchar>
    80011698:	87aa                	mv	a5,a0
    8001169a:	fcf40ba3          	sb	a5,-41(s0)
    8001169e:	fd744783          	lbu	a5,-41(s0)
    800116a2:	0ff7f713          	andi	a4,a5,255
    800116a6:	0ff00793          	li	a5,255
    800116aa:	22f70263          	beq	a4,a5,800118ce <console+0x2ac>
            if (c == '\r' || c == '\n') {
    800116ae:	fd744783          	lbu	a5,-41(s0)
    800116b2:	0ff7f713          	andi	a4,a5,255
    800116b6:	47b5                	li	a5,13
    800116b8:	00f70963          	beq	a4,a5,800116ca <console+0xa8>
    800116bc:	fd744783          	lbu	a5,-41(s0)
    800116c0:	0ff7f713          	andi	a4,a5,255
    800116c4:	47a9                	li	a5,10
    800116c6:	0cf71c63          	bne	a4,a5,8001179e <console+0x17c>
                if (at > 0) {
    800116ca:	fec42783          	lw	a5,-20(s0)
    800116ce:	2781                	sext.w	a5,a5
    800116d0:	0af05f63          	blez	a5,8001178e <console+0x16c>
                    input[at] = '\0';
    800116d4:	fd843703          	ld	a4,-40(s0)
    800116d8:	fec42783          	lw	a5,-20(s0)
    800116dc:	97ba                	add	a5,a5,a4
    800116de:	00078023          	sb	zero,0(a5)
                    if (!strcmp(input, "quit")) {
    800116e2:	00008597          	auipc	a1,0x8
    800116e6:	e6e58593          	addi	a1,a1,-402 # 80019550 <SYSCALLS+0x550>
    800116ea:	fd843503          	ld	a0,-40(s0)
    800116ee:	7a5030ef          	jal	ra,80015692 <strcmp>
    800116f2:	87aa                	mv	a5,a0
    800116f4:	eb99                	bnez	a5,8001170a <console+0xe8>
                        logf(LOG_TEXT, "\nShutting down...\n\n");
    800116f6:	00008597          	auipc	a1,0x8
    800116fa:	e6258593          	addi	a1,a1,-414 # 80019558 <SYSCALLS+0x558>
    800116fe:	4541                	li	a0,16
    80011700:	658000ef          	jal	ra,80011d58 <logf>
                        sbi_poweroff();
    80011704:	09d000ef          	jal	ra,80011fa0 <sbi_poweroff>
    80011708:	a049                	j	8001178a <console+0x168>
                    }
                    else if (!strcmp(input, "fatal")) {
    8001170a:	00008597          	auipc	a1,0x8
    8001170e:	e6658593          	addi	a1,a1,-410 # 80019570 <SYSCALLS+0x570>
    80011712:	fd843503          	ld	a0,-40(s0)
    80011716:	77d030ef          	jal	ra,80015692 <strcmp>
    8001171a:	87aa                	mv	a5,a0
    8001171c:	eb95                	bnez	a5,80011750 <console+0x12e>
                        logf(LOG_TEXT, "\n");
    8001171e:	00008597          	auipc	a1,0x8
    80011722:	e5a58593          	addi	a1,a1,-422 # 80019578 <SYSCALLS+0x578>
    80011726:	4541                	li	a0,16
    80011728:	630000ef          	jal	ra,80011d58 <logf>
                        fatalf("Testing fatal error @ %lu.\nHanging HART...\n", sbi_rtc_get_time());
    8001172c:	119000ef          	jal	ra,80012044 <sbi_rtc_get_time>
    80011730:	87aa                	mv	a5,a0
    80011732:	85be                	mv	a1,a5
    80011734:	00008517          	auipc	a0,0x8
    80011738:	e4c50513          	addi	a0,a0,-436 # 80019580 <SYSCALLS+0x580>
    8001173c:	6d0000ef          	jal	ra,80011e0c <fatalf>
                        logf(LOG_ERROR, "If I get here, fatal didn't work :'(.\n");
    80011740:	00008597          	auipc	a1,0x8
    80011744:	e7058593          	addi	a1,a1,-400 # 800195b0 <SYSCALLS+0x5b0>
    80011748:	4505                	li	a0,1
    8001174a:	60e000ef          	jal	ra,80011d58 <logf>
    8001174e:	a835                	j	8001178a <console+0x168>
                    }
                    else if (!strcmp(input, "heap")) {
    80011750:	00008597          	auipc	a1,0x8
    80011754:	e8858593          	addi	a1,a1,-376 # 800195d8 <SYSCALLS+0x5d8>
    80011758:	fd843503          	ld	a0,-40(s0)
    8001175c:	737030ef          	jal	ra,80015692 <strcmp>
    80011760:	87aa                	mv	a5,a0
    80011762:	eb99                	bnez	a5,80011778 <console+0x156>
                        logf(LOG_TEXT, "\n");
    80011764:	00008597          	auipc	a1,0x8
    80011768:	e1458593          	addi	a1,a1,-492 # 80019578 <SYSCALLS+0x578>
    8001176c:	4541                	li	a0,16
    8001176e:	5ea000ef          	jal	ra,80011d58 <logf>
                        void heap_print_stats(void);
                        heap_print_stats();
    80011772:	b27ff0ef          	jal	ra,80011298 <heap_print_stats>
    80011776:	a811                	j	8001178a <console+0x168>
                    }
                    else {
                        logf(LOG_TEXT, "\nUnknown command '%s'\n", input);
    80011778:	fd843603          	ld	a2,-40(s0)
    8001177c:	00008597          	auipc	a1,0x8
    80011780:	e6458593          	addi	a1,a1,-412 # 800195e0 <SYSCALLS+0x5e0>
    80011784:	4541                	li	a0,16
    80011786:	5d2000ef          	jal	ra,80011d58 <logf>
                    }
                    at = 0;
    8001178a:	fe042623          	sw	zero,-20(s0)
                }
                logf(LOG_TEXT, "\n> ");
    8001178e:	00008597          	auipc	a1,0x8
    80011792:	e6a58593          	addi	a1,a1,-406 # 800195f8 <SYSCALLS+0x5f8>
    80011796:	4541                	li	a0,16
    80011798:	5c0000ef          	jal	ra,80011d58 <logf>
    8001179c:	aa2d                	j	800118d6 <console+0x2b4>
            }
            else if (c == 127) {
    8001179e:	fd744783          	lbu	a5,-41(s0)
    800117a2:	0ff7f713          	andi	a4,a5,255
    800117a6:	07f00793          	li	a5,127
    800117aa:	02f71463          	bne	a4,a5,800117d2 <console+0x1b0>
                // BACKSPACE
                if (at > 0) {
    800117ae:	fec42783          	lw	a5,-20(s0)
    800117b2:	2781                	sext.w	a5,a5
    800117b4:	eef050e3          	blez	a5,80011694 <console+0x72>
                    logf(LOG_TEXT, "\b \b");
    800117b8:	00008597          	auipc	a1,0x8
    800117bc:	e4858593          	addi	a1,a1,-440 # 80019600 <SYSCALLS+0x600>
    800117c0:	4541                	li	a0,16
    800117c2:	596000ef          	jal	ra,80011d58 <logf>
                    at -= 1;
    800117c6:	fec42783          	lw	a5,-20(s0)
    800117ca:	37fd                	addiw	a5,a5,-1
    800117cc:	fef42623          	sw	a5,-20(s0)
    800117d0:	b5d1                	j	80011694 <console+0x72>
                }
            }
            else if (c == 0x1B) {
    800117d2:	fd744783          	lbu	a5,-41(s0)
    800117d6:	0ff7f713          	andi	a4,a5,255
    800117da:	47ed                	li	a5,27
    800117dc:	0af71663          	bne	a4,a5,80011888 <console+0x266>
                // Escape sequence
                char esc1 = sbi_getchar();
    800117e0:	710000ef          	jal	ra,80011ef0 <sbi_getchar>
    800117e4:	87aa                	mv	a5,a0
    800117e6:	fcf40b23          	sb	a5,-42(s0)
                char esc2 = sbi_getchar();
    800117ea:	706000ef          	jal	ra,80011ef0 <sbi_getchar>
    800117ee:	87aa                	mv	a5,a0
    800117f0:	fcf40aa3          	sb	a5,-43(s0)
                if (esc1 == 0x5B) {
    800117f4:	fd644783          	lbu	a5,-42(s0)
    800117f8:	0ff7f713          	andi	a4,a5,255
    800117fc:	05b00793          	li	a5,91
    80011800:	0cf71a63          	bne	a4,a5,800118d4 <console+0x2b2>
                    switch (esc2) {
    80011804:	fd544783          	lbu	a5,-43(s0)
    80011808:	2781                	sext.w	a5,a5
    8001180a:	86be                	mv	a3,a5
    8001180c:	04400713          	li	a4,68
    80011810:	06e68463          	beq	a3,a4,80011878 <console+0x256>
    80011814:	86be                	mv	a3,a5
    80011816:	04400713          	li	a4,68
    8001181a:	e6d74de3          	blt	a4,a3,80011694 <console+0x72>
    8001181e:	86be                	mv	a3,a5
    80011820:	04300713          	li	a4,67
    80011824:	04e68263          	beq	a3,a4,80011868 <console+0x246>
    80011828:	86be                	mv	a3,a5
    8001182a:	04300713          	li	a4,67
    8001182e:	e6d743e3          	blt	a4,a3,80011694 <console+0x72>
    80011832:	86be                	mv	a3,a5
    80011834:	04100713          	li	a4,65
    80011838:	00e68863          	beq	a3,a4,80011848 <console+0x226>
    8001183c:	873e                	mv	a4,a5
    8001183e:	04200793          	li	a5,66
    80011842:	00f70b63          	beq	a4,a5,80011858 <console+0x236>
    80011846:	a841                	j	800118d6 <console+0x2b4>
                        case 0x41:
                            logf(LOG_INFO, "UP\n");
    80011848:	00008597          	auipc	a1,0x8
    8001184c:	dc058593          	addi	a1,a1,-576 # 80019608 <SYSCALLS+0x608>
    80011850:	4511                	li	a0,4
    80011852:	506000ef          	jal	ra,80011d58 <logf>
                            break;
    80011856:	a041                	j	800118d6 <console+0x2b4>
                        case 0x42:
                            logf(LOG_INFO, "DOWN\n");
    80011858:	00008597          	auipc	a1,0x8
    8001185c:	db858593          	addi	a1,a1,-584 # 80019610 <SYSCALLS+0x610>
    80011860:	4511                	li	a0,4
    80011862:	4f6000ef          	jal	ra,80011d58 <logf>
                            break;
    80011866:	a885                	j	800118d6 <console+0x2b4>
                        case 0x43:
                            logf(LOG_INFO, "RIGHT\n");
    80011868:	00008597          	auipc	a1,0x8
    8001186c:	db058593          	addi	a1,a1,-592 # 80019618 <SYSCALLS+0x618>
    80011870:	4511                	li	a0,4
    80011872:	4e6000ef          	jal	ra,80011d58 <logf>
                            break;
    80011876:	a085                	j	800118d6 <console+0x2b4>
                        case 0x44:
                            logf(LOG_INFO, "LEFT\n");
    80011878:	00008597          	auipc	a1,0x8
    8001187c:	da858593          	addi	a1,a1,-600 # 80019620 <SYSCALLS+0x620>
    80011880:	4511                	li	a0,4
    80011882:	4d6000ef          	jal	ra,80011d58 <logf>
                            break;
    80011886:	a881                	j	800118d6 <console+0x2b4>
                    }
                }
            }
            else {
                if (at < (BUFFER_SIZE - 1)) {
    80011888:	fe842783          	lw	a5,-24(s0)
    8001188c:	37fd                	addiw	a5,a5,-1
    8001188e:	0007871b          	sext.w	a4,a5
    80011892:	fec42783          	lw	a5,-20(s0)
    80011896:	2781                	sext.w	a5,a5
    80011898:	dee7dee3          	bge	a5,a4,80011694 <console+0x72>
                    input[at++] = c;
    8001189c:	fec42783          	lw	a5,-20(s0)
    800118a0:	0017871b          	addiw	a4,a5,1
    800118a4:	fee42623          	sw	a4,-20(s0)
    800118a8:	fd843703          	ld	a4,-40(s0)
    800118ac:	97ba                	add	a5,a5,a4
    800118ae:	fd744703          	lbu	a4,-41(s0)
    800118b2:	00e78023          	sb	a4,0(a5)
                    logf(LOG_TEXT, "%c", c);
    800118b6:	fd744783          	lbu	a5,-41(s0)
    800118ba:	2781                	sext.w	a5,a5
    800118bc:	863e                	mv	a2,a5
    800118be:	00008597          	auipc	a1,0x8
    800118c2:	d6a58593          	addi	a1,a1,-662 # 80019628 <SYSCALLS+0x628>
    800118c6:	4541                	li	a0,16
    800118c8:	490000ef          	jal	ra,80011d58 <logf>
    800118cc:	b3e1                	j	80011694 <console+0x72>
            }
        }
        else {
            // We can WFI here since interrupts are enabled
            // for the UART.
            WFI();
    800118ce:	10500073          	wfi
    800118d2:	b3c9                	j	80011694 <console+0x72>
                }
    800118d4:	0001                	nop
    do {
    800118d6:	bb7d                	j	80011694 <console+0x72>

00000000800118d8 <process_new>:
#define STACK_PAGES 2
#define STACK_SIZE  (STACK_PAGES * PAGE_SIZE)
#define STACK_TOP   0xfffffffc0ffee000UL

struct process *process_new(process_mode mode)
{
    800118d8:	715d                	addi	sp,sp,-80
    800118da:	e486                	sd	ra,72(sp)
    800118dc:	e0a2                	sd	s0,64(sp)
    800118de:	0880                	addi	s0,sp,80
    800118e0:	87aa                	mv	a5,a0
    800118e2:	faf42e23          	sw	a5,-68(s0)
    struct process *p       = (struct process *)kzalloc(sizeof(*p));
    800118e6:	29000593          	li	a1,656
    800118ea:	4505                	li	a0,1
    800118ec:	a2bff0ef          	jal	ra,80011316 <kcalloc>
    800118f0:	fea43023          	sd	a0,-32(s0)

    p->hart                 = -1U;
    800118f4:	fe043783          	ld	a5,-32(s0)
    800118f8:	577d                	li	a4,-1
    800118fa:	c3d8                	sw	a4,4(a5)
    p->ptable               = mmu_table_create();
    800118fc:	b7dfe0ef          	jal	ra,80010478 <mmu_table_create>
    80011900:	872a                	mv	a4,a0
    80011902:	fe043783          	ld	a5,-32(s0)
    80011906:	26e7bc23          	sd	a4,632(a5)
    p->state                = PS_WAITING;
    8001190a:	fe043783          	ld	a5,-32(s0)
    8001190e:	4705                	li	a4,1
    80011910:	c7d8                	sw	a4,12(a5)
    // p->pid               = fill_in_with_unique_pid

    // Set the trap frame and create all necessary structures.
    // p->frame.sepc = filled_in_by_ELF_loader
    p->frame.sstatus        = SSTATUS_SPP_BOOL(mode) | SSTATUS_FS_INITIAL | SSTATUS_SPIE;
    80011912:	fbc42783          	lw	a5,-68(s0)
    80011916:	2781                	sext.w	a5,a5
    80011918:	c789                	beqz	a5,80011922 <process_new+0x4a>
    8001191a:	6789                	lui	a5,0x2
    8001191c:	12078793          	addi	a5,a5,288 # 2120 <i+0x2100>
    80011920:	a021                	j	80011928 <process_new+0x50>
    80011922:	6789                	lui	a5,0x2
    80011924:	02078793          	addi	a5,a5,32 # 2020 <i+0x2000>
    80011928:	fe043703          	ld	a4,-32(s0)
    8001192c:	24f73023          	sd	a5,576(a4)
    p->frame.sie            = SIE_SEIE | SIE_SSIE | SIE_STIE;
    80011930:	fe043783          	ld	a5,-32(s0)
    80011934:	22200713          	li	a4,546
    80011938:	24e7b423          	sd	a4,584(a5)
    p->frame.satp           = SATP(p->ptable, p->pid);
    8001193c:	fe043783          	ld	a5,-32(s0)
    80011940:	2787b783          	ld	a5,632(a5)
    80011944:	00c7d713          	srli	a4,a5,0xc
    80011948:	57fd                	li	a5,-1
    8001194a:	83d1                	srli	a5,a5,0x14
    8001194c:	8f7d                	and	a4,a4,a5
    8001194e:	fe043783          	ld	a5,-32(s0)
    80011952:	0007d783          	lhu	a5,0(a5)
    80011956:	17b2                	slli	a5,a5,0x2c
    80011958:	8f5d                	or	a4,a4,a5
    8001195a:	57fd                	li	a5,-1
    8001195c:	17fe                	slli	a5,a5,0x3f
    8001195e:	8f5d                	or	a4,a4,a5
    80011960:	fe043783          	ld	a5,-32(s0)
    80011964:	24e7b823          	sd	a4,592(a5)
    p->frame.sscratch       = (unsigned long)&p->frame;
    80011968:	fe043783          	ld	a5,-32(s0)
    8001196c:	03878793          	addi	a5,a5,56
    80011970:	873e                	mv	a4,a5
    80011972:	fe043783          	ld	a5,-32(s0)
    80011976:	24e7bc23          	sd	a4,600(a5)
    p->frame.stvec          = trampoline_trap_start;
    8001197a:	00009797          	auipc	a5,0x9
    8001197e:	9ee78793          	addi	a5,a5,-1554 # 8001a368 <trampoline_trap_start>
    80011982:	6398                	ld	a4,0(a5)
    80011984:	fe043783          	ld	a5,-32(s0)
    80011988:	26e7b023          	sd	a4,608(a5)
    p->frame.trap_satp      = SATP_KERNEL;
    8001198c:	00006797          	auipc	a5,0x6
    80011990:	67478793          	addi	a5,a5,1652 # 80018000 <kernel_mmu_table>
    80011994:	639c                	ld	a5,0(a5)
    80011996:	00c7d713          	srli	a4,a5,0xc
    8001199a:	57fd                	li	a5,-1
    8001199c:	83d1                	srli	a5,a5,0x14
    8001199e:	8f7d                	and	a4,a4,a5
    800119a0:	8ffff7b7          	lui	a5,0x8ffff
    800119a4:	1782                	slli	a5,a5,0x20
    800119a6:	8f5d                	or	a4,a4,a5
    800119a8:	fe043783          	ld	a5,-32(s0)
    800119ac:	26e7b423          	sd	a4,616(a5) # ffffffff8ffff268 <_heap_end+0xffffffff07fef268>
    // p->frame.trap_stack = filled_in_by_SCHEDULER

    p->fds = vector_new_with_capacity(5);
    800119b0:	4515                	li	a0,5
    800119b2:	314040ef          	jal	ra,80015cc6 <vector_new_with_capacity>
    800119b6:	872a                	mv	a4,a0
    800119b8:	fe043783          	ld	a5,-32(s0)
    800119bc:	28e7b423          	sd	a4,648(a5)
    p->pages = list_new();
    800119c0:	206030ef          	jal	ra,80014bc6 <list_new>
    800119c4:	872a                	mv	a4,a0
    800119c6:	fe043783          	ld	a5,-32(s0)
    800119ca:	28e7b023          	sd	a4,640(a5)

    // We need to keep track of the stack itself in the kernel, so we can free it
    // later, but the user process will interact with the stack via the SP register.
    p->frame.xregs[XREG_SP] = STACK_TOP + STACK_SIZE;
    800119ce:	fe043783          	ld	a5,-32(s0)
    800119d2:	c0fff737          	lui	a4,0xc0fff
    800119d6:	0712                	slli	a4,a4,0x4
    800119d8:	e7b8                	sd	a4,72(a5)
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    800119da:	fe043423          	sd	zero,-24(s0)
    800119de:	a085                	j	80011a3e <process_new+0x166>
        void *stack = page_zalloc();
    800119e0:	4505                	li	a0,1
    800119e2:	7ab000ef          	jal	ra,8001298c <page_znalloc>
    800119e6:	fca43423          	sd	a0,-56(s0)
        list_add_ptr(p->pages, stack);
    800119ea:	fe043783          	ld	a5,-32(s0)
    800119ee:	2807b783          	ld	a5,640(a5)
    800119f2:	fc843703          	ld	a4,-56(s0)
    800119f6:	85ba                	mv	a1,a4
    800119f8:	853e                	mv	a0,a5
    800119fa:	1fc030ef          	jal	ra,80014bf6 <list_add>
        mmu_map(p->ptable, STACK_TOP + PAGE_SIZE * i, (unsigned long)stack,
    800119fe:	fe043783          	ld	a5,-32(s0)
    80011a02:	2787b503          	ld	a0,632(a5)
    80011a06:	fe843783          	ld	a5,-24(s0)
    80011a0a:	00c79713          	slli	a4,a5,0xc
    80011a0e:	ffe087b7          	lui	a5,0xffe08
    80011a12:	17dd                	addi	a5,a5,-9
    80011a14:	07b6                	slli	a5,a5,0xd
    80011a16:	00f705b3          	add	a1,a4,a5
    80011a1a:	fc843603          	ld	a2,-56(s0)
    80011a1e:	fbc42783          	lw	a5,-68(s0)
    80011a22:	2781                	sext.w	a5,a5
    80011a24:	e399                	bnez	a5,80011a2a <process_new+0x152>
    80011a26:	47c1                	li	a5,16
    80011a28:	a011                	j	80011a2c <process_new+0x154>
    80011a2a:	4799                	li	a5,6
    80011a2c:	873e                	mv	a4,a5
    80011a2e:	4681                	li	a3,0
    80011a30:	a83fe0ef          	jal	ra,800104b2 <mmu_map>
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    80011a34:	fe843783          	ld	a5,-24(s0)
    80011a38:	0785                	addi	a5,a5,1
    80011a3a:	fef43423          	sd	a5,-24(s0)
    80011a3e:	fe843703          	ld	a4,-24(s0)
    80011a42:	4785                	li	a5,1
    80011a44:	f8e7fee3          	bgeu	a5,a4,800119e0 <process_new+0x108>
    }

    // We need to map certain kernel portions into the user's page table. Notice
    // that the PB_USER is NOT set, but it needs to be there because we need to execute
    // the trap/start instructions while using the user's page table until we change SATP.
    unsigned long trans_trampoline_start = mmu_translate(kernel_mmu_table, trampoline_thread_start);
    80011a48:	00006797          	auipc	a5,0x6
    80011a4c:	5b878793          	addi	a5,a5,1464 # 80018000 <kernel_mmu_table>
    80011a50:	6398                	ld	a4,0(a5)
    80011a52:	00009797          	auipc	a5,0x9
    80011a56:	8fe78793          	addi	a5,a5,-1794 # 8001a350 <trampoline_thread_start>
    80011a5a:	639c                	ld	a5,0(a5)
    80011a5c:	85be                	mv	a1,a5
    80011a5e:	853a                	mv	a0,a4
    80011a60:	d61fe0ef          	jal	ra,800107c0 <mmu_translate>
    80011a64:	fca43c23          	sd	a0,-40(s0)
    unsigned long trans_trampoline_trap  = mmu_translate(kernel_mmu_table, trampoline_trap_start);
    80011a68:	00006797          	auipc	a5,0x6
    80011a6c:	59878793          	addi	a5,a5,1432 # 80018000 <kernel_mmu_table>
    80011a70:	6398                	ld	a4,0(a5)
    80011a72:	00009797          	auipc	a5,0x9
    80011a76:	8f678793          	addi	a5,a5,-1802 # 8001a368 <trampoline_trap_start>
    80011a7a:	639c                	ld	a5,0(a5)
    80011a7c:	85be                	mv	a1,a5
    80011a7e:	853a                	mv	a0,a4
    80011a80:	d41fe0ef          	jal	ra,800107c0 <mmu_translate>
    80011a84:	fca43823          	sd	a0,-48(s0)
    mmu_map(p->ptable, trampoline_thread_start, trans_trampoline_start, MMU_LEVEL_4K,
    80011a88:	fe043783          	ld	a5,-32(s0)
    80011a8c:	2787b503          	ld	a0,632(a5)
    80011a90:	00009797          	auipc	a5,0x9
    80011a94:	8c078793          	addi	a5,a5,-1856 # 8001a350 <trampoline_thread_start>
    80011a98:	639c                	ld	a5,0(a5)
    80011a9a:	4729                	li	a4,10
    80011a9c:	4681                	li	a3,0
    80011a9e:	fd843603          	ld	a2,-40(s0)
    80011aa2:	85be                	mv	a1,a5
    80011aa4:	a0ffe0ef          	jal	ra,800104b2 <mmu_map>
            PB_READ | PB_EXECUTE);
    mmu_map(p->ptable, trampoline_trap_start, trans_trampoline_trap, MMU_LEVEL_4K,
    80011aa8:	fe043783          	ld	a5,-32(s0)
    80011aac:	2787b503          	ld	a0,632(a5)
    80011ab0:	00009797          	auipc	a5,0x9
    80011ab4:	8b878793          	addi	a5,a5,-1864 # 8001a368 <trampoline_trap_start>
    80011ab8:	639c                	ld	a5,0(a5)
    80011aba:	4729                	li	a4,10
    80011abc:	4681                	li	a3,0
    80011abe:	fd043603          	ld	a2,-48(s0)
    80011ac2:	85be                	mv	a1,a5
    80011ac4:	9effe0ef          	jal	ra,800104b2 <mmu_map>
            PB_READ | PB_EXECUTE);

    SFENCE_ASID(p->pid);
    80011ac8:	fe043783          	ld	a5,-32(s0)
    80011acc:	0007d783          	lhu	a5,0(a5)
    80011ad0:	12f00073          	sfence.vma	zero,a5

    return p;
    80011ad4:	fe043783          	ld	a5,-32(s0)
}
    80011ad8:	853e                	mv	a0,a5
    80011ada:	60a6                	ld	ra,72(sp)
    80011adc:	6406                	ld	s0,64(sp)
    80011ade:	6161                	addi	sp,sp,80
    80011ae0:	8082                	ret

0000000080011ae2 <process_free>:

int process_free(struct process *p)
{
    80011ae2:	7179                	addi	sp,sp,-48
    80011ae4:	f406                	sd	ra,40(sp)
    80011ae6:	f022                	sd	s0,32(sp)
    80011ae8:	1800                	addi	s0,sp,48
    80011aea:	fca43c23          	sd	a0,-40(s0)
    struct ListElem *e;
    unsigned int i;

    if (!p || !ON_HART_NONE(p)) {
    80011aee:	fd843783          	ld	a5,-40(s0)
    80011af2:	cb81                	beqz	a5,80011b02 <process_free+0x20>
    80011af4:	fd843783          	ld	a5,-40(s0)
    80011af8:	43dc                	lw	a5,4(a5)
    80011afa:	873e                	mv	a4,a5
    80011afc:	57fd                	li	a5,-1
    80011afe:	00f70463          	beq	a4,a5,80011b06 <process_free+0x24>
        // Process is invalid or running somewhere, or this is stale.
        return -1;
    80011b02:	57fd                	li	a5,-1
    80011b04:	a8d1                	j	80011bd8 <process_free+0xf6>
    }

    // Free all resources allocated to the process.

    if (p->ptable) {
    80011b06:	fd843783          	ld	a5,-40(s0)
    80011b0a:	2787b783          	ld	a5,632(a5)
    80011b0e:	cf91                	beqz	a5,80011b2a <process_free+0x48>
        mmu_free(p->ptable);
    80011b10:	fd843783          	ld	a5,-40(s0)
    80011b14:	2787b783          	ld	a5,632(a5)
    80011b18:	853e                	mv	a0,a5
    80011b1a:	c29fe0ef          	jal	ra,80010742 <mmu_free>
        SFENCE_ASID(p->pid);
    80011b1e:	fd843783          	ld	a5,-40(s0)
    80011b22:	0007d783          	lhu	a5,0(a5)
    80011b26:	12f00073          	sfence.vma	zero,a5
    }

    if (p->pages) {
    80011b2a:	fd843783          	ld	a5,-40(s0)
    80011b2e:	2807b783          	ld	a5,640(a5)
    80011b32:	cbb9                	beqz	a5,80011b88 <process_free+0xa6>
        list_for_each(p->pages, e) {
    80011b34:	fd843783          	ld	a5,-40(s0)
    80011b38:	2807b783          	ld	a5,640(a5)
    80011b3c:	853e                	mv	a0,a5
    80011b3e:	4d8030ef          	jal	ra,80015016 <list_elem_start_ascending>
    80011b42:	fea43423          	sd	a0,-24(s0)
    80011b46:	a839                	j	80011b64 <process_free+0x82>
            page_free(list_elem_value_ptr(e));
    80011b48:	fe843503          	ld	a0,-24(s0)
    80011b4c:	52a030ef          	jal	ra,80015076 <list_elem_value>
    80011b50:	87aa                	mv	a5,a0
    80011b52:	853e                	mv	a0,a5
    80011b54:	64f000ef          	jal	ra,800129a2 <page_free>
        list_for_each(p->pages, e) {
    80011b58:	fe843503          	ld	a0,-24(s0)
    80011b5c:	502030ef          	jal	ra,8001505e <list_elem_prev>
    80011b60:	fea43423          	sd	a0,-24(s0)
    80011b64:	fd843783          	ld	a5,-40(s0)
    80011b68:	2807b783          	ld	a5,640(a5)
    80011b6c:	fe843583          	ld	a1,-24(s0)
    80011b70:	853e                	mv	a0,a5
    80011b72:	416030ef          	jal	ra,80014f88 <list_elem_valid>
    80011b76:	87aa                	mv	a5,a0
    80011b78:	fbe1                	bnez	a5,80011b48 <process_free+0x66>
        }
        list_free(p->pages);
    80011b7a:	fd843783          	ld	a5,-40(s0)
    80011b7e:	2807b783          	ld	a5,640(a5)
    80011b82:	853e                	mv	a0,a5
    80011b84:	3ac030ef          	jal	ra,80014f30 <list_free>
    }

    if (p->fds) {
    80011b88:	fd843783          	ld	a5,-40(s0)
    80011b8c:	2887b783          	ld	a5,648(a5)
    80011b90:	cf9d                	beqz	a5,80011bce <process_free+0xec>
        for (i = 0;i < vector_size(p->fds);i += 1) {
    80011b92:	fe042223          	sw	zero,-28(s0)
    80011b96:	a031                	j	80011ba2 <process_free+0xc0>
    80011b98:	fe442783          	lw	a5,-28(s0)
    80011b9c:	2785                	addiw	a5,a5,1
    80011b9e:	fef42223          	sw	a5,-28(s0)
    80011ba2:	fd843783          	ld	a5,-40(s0)
    80011ba6:	2887b783          	ld	a5,648(a5)
    80011baa:	853e                	mv	a0,a5
    80011bac:	209040ef          	jal	ra,800165b4 <vector_size>
    80011bb0:	87aa                	mv	a5,a0
    80011bb2:	0007871b          	sext.w	a4,a5
    80011bb6:	fe442783          	lw	a5,-28(s0)
    80011bba:	2781                	sext.w	a5,a5
    80011bbc:	fce7eee3          	bltu	a5,a4,80011b98 <process_free+0xb6>
            // Clean up any file descriptor stuff here.
        }
        vector_free(p->fds);
    80011bc0:	fd843783          	ld	a5,-40(s0)
    80011bc4:	2887b783          	ld	a5,648(a5)
    80011bc8:	853e                	mv	a0,a5
    80011bca:	21b040ef          	jal	ra,800165e4 <vector_free>
    }
    

    kfree(p);
    80011bce:	fd843503          	ld	a0,-40(s0)
    80011bd2:	f6cff0ef          	jal	ra,8001133e <kfree>

    return 0;
    80011bd6:	4781                	li	a5,0
}
    80011bd8:	853e                	mv	a0,a5
    80011bda:	70a2                	ld	ra,40(sp)
    80011bdc:	7402                	ld	s0,32(sp)
    80011bde:	6145                	addi	sp,sp,48
    80011be0:	8082                	ret

0000000080011be2 <process_run>:

bool process_run(struct process *p, unsigned int hart)
{
    80011be2:	7179                	addi	sp,sp,-48
    80011be4:	f406                	sd	ra,40(sp)
    80011be6:	f022                	sd	s0,32(sp)
    80011be8:	1800                	addi	s0,sp,48
    80011bea:	fca43c23          	sd	a0,-40(s0)
    80011bee:	87ae                	mv	a5,a1
    80011bf0:	fcf42a23          	sw	a5,-44(s0)
    void process_asm_run(void *frame_addr);
    unsigned int me = sbi_whoami();
    80011bf4:	470000ef          	jal	ra,80012064 <sbi_whoami>
    80011bf8:	87aa                	mv	a5,a0
    80011bfa:	fef42623          	sw	a5,-20(s0)

    if (me == hart) {
    80011bfe:	fec42703          	lw	a4,-20(s0)
    80011c02:	fd442783          	lw	a5,-44(s0)
    80011c06:	2701                	sext.w	a4,a4
    80011c08:	2781                	sext.w	a5,a5
    80011c0a:	00f71b63          	bne	a4,a5,80011c20 <process_run+0x3e>
        process_asm_run(&p->frame);
    80011c0e:	fd843783          	ld	a5,-40(s0)
    80011c12:	03878793          	addi	a5,a5,56
    80011c16:	853e                	mv	a0,a5
    80011c18:	77d020ef          	jal	ra,80014b94 <process_asm_run>
        // process_asm_run should not return, but if it does
        // something went wrong.
        return false;
    80011c1c:	4781                	li	a5,0
    80011c1e:	a815                	j	80011c52 <process_run+0x70>
    }

    return sbi_hart_start(hart, trampoline_thread_start, (unsigned long)&p->frame, p->frame.satp);
    80011c20:	00008797          	auipc	a5,0x8
    80011c24:	73078793          	addi	a5,a5,1840 # 8001a350 <trampoline_thread_start>
    80011c28:	6398                	ld	a4,0(a5)
    80011c2a:	fd843783          	ld	a5,-40(s0)
    80011c2e:	03878793          	addi	a5,a5,56
    80011c32:	863e                	mv	a2,a5
    80011c34:	fd843783          	ld	a5,-40(s0)
    80011c38:	2507b683          	ld	a3,592(a5)
    80011c3c:	fd442783          	lw	a5,-44(s0)
    80011c40:	85ba                	mv	a1,a4
    80011c42:	853e                	mv	a0,a5
    80011c44:	2f8000ef          	jal	ra,80011f3c <sbi_hart_start>
    80011c48:	87aa                	mv	a5,a0
    80011c4a:	00f037b3          	snez	a5,a5
    80011c4e:	0ff7f793          	andi	a5,a5,255
}
    80011c52:	853e                	mv	a0,a5
    80011c54:	70a2                	ld	ra,40(sp)
    80011c56:	7402                	ld	s0,32(sp)
    80011c58:	6145                	addi	sp,sp,48
    80011c5a:	8082                	ret

0000000080011c5c <lgprefix>:
#include <stdarg.h>
#include <csr.h>

static int k_log_level = 0xFFF;

static const char *lgprefix(log_type lt) {
    80011c5c:	1101                	addi	sp,sp,-32
    80011c5e:	ec22                	sd	s0,24(sp)
    80011c60:	1000                	addi	s0,sp,32
    80011c62:	87aa                	mv	a5,a0
    80011c64:	fef42623          	sw	a5,-20(s0)
    switch (lt) {
    80011c68:	fec42783          	lw	a5,-20(s0)
    80011c6c:	0007871b          	sext.w	a4,a5
    80011c70:	47a1                	li	a5,8
    80011c72:	06f70463          	beq	a4,a5,80011cda <lgprefix+0x7e>
    80011c76:	fec42783          	lw	a5,-20(s0)
    80011c7a:	0007871b          	sext.w	a4,a5
    80011c7e:	47a1                	li	a5,8
    80011c80:	06e7e263          	bltu	a5,a4,80011ce4 <lgprefix+0x88>
    80011c84:	fec42783          	lw	a5,-20(s0)
    80011c88:	0007871b          	sext.w	a4,a5
    80011c8c:	4791                	li	a5,4
    80011c8e:	02f70c63          	beq	a4,a5,80011cc6 <lgprefix+0x6a>
    80011c92:	fec42783          	lw	a5,-20(s0)
    80011c96:	0007871b          	sext.w	a4,a5
    80011c9a:	4791                	li	a5,4
    80011c9c:	04e7e463          	bltu	a5,a4,80011ce4 <lgprefix+0x88>
    80011ca0:	fec42783          	lw	a5,-20(s0)
    80011ca4:	0007871b          	sext.w	a4,a5
    80011ca8:	4785                	li	a5,1
    80011caa:	02f70363          	beq	a4,a5,80011cd0 <lgprefix+0x74>
    80011cae:	fec42783          	lw	a5,-20(s0)
    80011cb2:	0007871b          	sext.w	a4,a5
    80011cb6:	4789                	li	a5,2
    80011cb8:	02f71663          	bne	a4,a5,80011ce4 <lgprefix+0x88>
        case LOG_DEBUG:
            return "[DEBUG]: ";
    80011cbc:	00008797          	auipc	a5,0x8
    80011cc0:	97478793          	addi	a5,a5,-1676 # 80019630 <SYSCALLS+0x630>
    80011cc4:	a025                	j	80011cec <lgprefix+0x90>
        case LOG_INFO:
            return "[INFO]: ";
    80011cc6:	00008797          	auipc	a5,0x8
    80011cca:	97a78793          	addi	a5,a5,-1670 # 80019640 <SYSCALLS+0x640>
    80011cce:	a839                	j	80011cec <lgprefix+0x90>
        case LOG_ERROR:
            return "[ERROR]: ";
    80011cd0:	00008797          	auipc	a5,0x8
    80011cd4:	98078793          	addi	a5,a5,-1664 # 80019650 <SYSCALLS+0x650>
    80011cd8:	a811                	j	80011cec <lgprefix+0x90>
        case LOG_FATAL:
            return "[FATAL]: ";
    80011cda:	00008797          	auipc	a5,0x8
    80011cde:	98678793          	addi	a5,a5,-1658 # 80019660 <SYSCALLS+0x660>
    80011ce2:	a029                	j	80011cec <lgprefix+0x90>
        default:
            return "";
    80011ce4:	00008797          	auipc	a5,0x8
    80011ce8:	98c78793          	addi	a5,a5,-1652 # 80019670 <SYSCALLS+0x670>
    }
}
    80011cec:	853e                	mv	a0,a5
    80011cee:	6462                	ld	s0,24(sp)
    80011cf0:	6105                	addi	sp,sp,32
    80011cf2:	8082                	ret

0000000080011cf4 <vlogf>:

static int vlogf(log_type lt, const char *fmt, va_list args)
{
    80011cf4:	7179                	addi	sp,sp,-48
    80011cf6:	f406                	sd	ra,40(sp)
    80011cf8:	f022                	sd	s0,32(sp)
    80011cfa:	1800                	addi	s0,sp,48
    80011cfc:	87aa                	mv	a5,a0
    80011cfe:	feb43023          	sd	a1,-32(s0)
    80011d02:	fcc43c23          	sd	a2,-40(s0)
    80011d06:	fef42623          	sw	a5,-20(s0)
    if (!(lt & k_log_level)) {
    80011d0a:	00009797          	auipc	a5,0x9
    80011d0e:	2f678793          	addi	a5,a5,758 # 8001b000 <k_log_level>
    80011d12:	439c                	lw	a5,0(a5)
    80011d14:	0007871b          	sext.w	a4,a5
    80011d18:	fec42783          	lw	a5,-20(s0)
    80011d1c:	8ff9                	and	a5,a5,a4
    80011d1e:	2781                	sext.w	a5,a5
    80011d20:	e399                	bnez	a5,80011d26 <vlogf+0x32>
        return 0;
    80011d22:	4781                	li	a5,0
    80011d24:	a02d                	j	80011d4e <vlogf+0x5a>
    }
    int printf(const char *fmt, ...);
    printf("%s", lgprefix(lt));
    80011d26:	fec42783          	lw	a5,-20(s0)
    80011d2a:	853e                	mv	a0,a5
    80011d2c:	f31ff0ef          	jal	ra,80011c5c <lgprefix>
    80011d30:	87aa                	mv	a5,a0
    80011d32:	85be                	mv	a1,a5
    80011d34:	00008517          	auipc	a0,0x8
    80011d38:	94450513          	addi	a0,a0,-1724 # 80019678 <SYSCALLS+0x678>
    80011d3c:	3e9020ef          	jal	ra,80014924 <printf>
    int vprintf_(const char *format, va_list va);
    return vprintf_(fmt, args);
    80011d40:	fd843583          	ld	a1,-40(s0)
    80011d44:	fe043503          	ld	a0,-32(s0)
    80011d48:	50b020ef          	jal	ra,80014a52 <vprintf_>
    80011d4c:	87aa                	mv	a5,a0
}
    80011d4e:	853e                	mv	a0,a5
    80011d50:	70a2                	ld	ra,40(sp)
    80011d52:	7402                	ld	s0,32(sp)
    80011d54:	6145                	addi	sp,sp,48
    80011d56:	8082                	ret

0000000080011d58 <logf>:

int logf(log_type lt, const char *fmt, ...)
{
    80011d58:	7159                	addi	sp,sp,-112
    80011d5a:	fc06                	sd	ra,56(sp)
    80011d5c:	f822                	sd	s0,48(sp)
    80011d5e:	0080                	addi	s0,sp,64
    80011d60:	fcb43823          	sd	a1,-48(s0)
    80011d64:	e010                	sd	a2,0(s0)
    80011d66:	e414                	sd	a3,8(s0)
    80011d68:	e818                	sd	a4,16(s0)
    80011d6a:	ec1c                	sd	a5,24(s0)
    80011d6c:	03043023          	sd	a6,32(s0)
    80011d70:	03143423          	sd	a7,40(s0)
    80011d74:	87aa                	mv	a5,a0
    80011d76:	fcf42e23          	sw	a5,-36(s0)
    va_list va;
    va_start(va, fmt);
    80011d7a:	03040793          	addi	a5,s0,48
    80011d7e:	fcf43423          	sd	a5,-56(s0)
    80011d82:	fc843783          	ld	a5,-56(s0)
    80011d86:	fd078793          	addi	a5,a5,-48
    80011d8a:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(lt, fmt, va);
    80011d8e:	fe043703          	ld	a4,-32(s0)
    80011d92:	fdc42783          	lw	a5,-36(s0)
    80011d96:	863a                	mv	a2,a4
    80011d98:	fd043583          	ld	a1,-48(s0)
    80011d9c:	853e                	mv	a0,a5
    80011d9e:	f57ff0ef          	jal	ra,80011cf4 <vlogf>
    80011da2:	87aa                	mv	a5,a0
    80011da4:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80011da8:	fec42783          	lw	a5,-20(s0)
}
    80011dac:	853e                	mv	a0,a5
    80011dae:	70e2                	ld	ra,56(sp)
    80011db0:	7442                	ld	s0,48(sp)
    80011db2:	6165                	addi	sp,sp,112
    80011db4:	8082                	ret

0000000080011db6 <debugf>:

int debugf(const char *fmt, ...)
{
    80011db6:	7159                	addi	sp,sp,-112
    80011db8:	f406                	sd	ra,40(sp)
    80011dba:	f022                	sd	s0,32(sp)
    80011dbc:	1800                	addi	s0,sp,48
    80011dbe:	fca43c23          	sd	a0,-40(s0)
    80011dc2:	e40c                	sd	a1,8(s0)
    80011dc4:	e810                	sd	a2,16(s0)
    80011dc6:	ec14                	sd	a3,24(s0)
    80011dc8:	f018                	sd	a4,32(s0)
    80011dca:	f41c                	sd	a5,40(s0)
    80011dcc:	03043823          	sd	a6,48(s0)
    80011dd0:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80011dd4:	04040793          	addi	a5,s0,64
    80011dd8:	fcf43823          	sd	a5,-48(s0)
    80011ddc:	fd043783          	ld	a5,-48(s0)
    80011de0:	fc878793          	addi	a5,a5,-56
    80011de4:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(LOG_DEBUG, fmt, va);
    80011de8:	fe043783          	ld	a5,-32(s0)
    80011dec:	863e                	mv	a2,a5
    80011dee:	fd843583          	ld	a1,-40(s0)
    80011df2:	4509                	li	a0,2
    80011df4:	f01ff0ef          	jal	ra,80011cf4 <vlogf>
    80011df8:	87aa                	mv	a5,a0
    80011dfa:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80011dfe:	fec42783          	lw	a5,-20(s0)
}
    80011e02:	853e                	mv	a0,a5
    80011e04:	70a2                	ld	ra,40(sp)
    80011e06:	7402                	ld	s0,32(sp)
    80011e08:	6165                	addi	sp,sp,112
    80011e0a:	8082                	ret

0000000080011e0c <fatalf>:

ATTR_NORET void fatalf(const char *fmt, ...)
{
    80011e0c:	7159                	addi	sp,sp,-112
    80011e0e:	f406                	sd	ra,40(sp)
    80011e10:	f022                	sd	s0,32(sp)
    80011e12:	1800                	addi	s0,sp,48
    80011e14:	fca43c23          	sd	a0,-40(s0)
    80011e18:	e40c                	sd	a1,8(s0)
    80011e1a:	e810                	sd	a2,16(s0)
    80011e1c:	ec14                	sd	a3,24(s0)
    80011e1e:	f018                	sd	a4,32(s0)
    80011e20:	f41c                	sd	a5,40(s0)
    80011e22:	03043823          	sd	a6,48(s0)
    80011e26:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80011e2a:	04040793          	addi	a5,s0,64
    80011e2e:	fcf43823          	sd	a5,-48(s0)
    80011e32:	fd043783          	ld	a5,-48(s0)
    80011e36:	fc878793          	addi	a5,a5,-56
    80011e3a:	fef43423          	sd	a5,-24(s0)
    vlogf(LOG_FATAL, fmt, va);
    80011e3e:	fe843783          	ld	a5,-24(s0)
    80011e42:	863e                	mv	a2,a5
    80011e44:	fd843583          	ld	a1,-40(s0)
    80011e48:	4521                	li	a0,8
    80011e4a:	eabff0ef          	jal	ra,80011cf4 <vlogf>
    va_end(va);

    CSR_CLEAR("sstatus");
    80011e4e:	10001073          	csrw	sstatus,zero
    WFI_LOOP();
    80011e52:	10500073          	wfi
    80011e56:	bff5                	j	80011e52 <fatalf+0x46>

0000000080011e58 <klogset>:
}

void klogset(log_type lt)
{
    80011e58:	1101                	addi	sp,sp,-32
    80011e5a:	ec22                	sd	s0,24(sp)
    80011e5c:	1000                	addi	s0,sp,32
    80011e5e:	87aa                	mv	a5,a0
    80011e60:	fef42623          	sw	a5,-20(s0)
    k_log_level |= lt;
    80011e64:	00009797          	auipc	a5,0x9
    80011e68:	19c78793          	addi	a5,a5,412 # 8001b000 <k_log_level>
    80011e6c:	439c                	lw	a5,0(a5)
    80011e6e:	0007871b          	sext.w	a4,a5
    80011e72:	fec42783          	lw	a5,-20(s0)
    80011e76:	8fd9                	or	a5,a5,a4
    80011e78:	2781                	sext.w	a5,a5
    80011e7a:	0007871b          	sext.w	a4,a5
    80011e7e:	00009797          	auipc	a5,0x9
    80011e82:	18278793          	addi	a5,a5,386 # 8001b000 <k_log_level>
    80011e86:	c398                	sw	a4,0(a5)
}
    80011e88:	0001                	nop
    80011e8a:	6462                	ld	s0,24(sp)
    80011e8c:	6105                	addi	sp,sp,32
    80011e8e:	8082                	ret

0000000080011e90 <klogclear>:

void klogclear(log_type lt)
{
    80011e90:	1101                	addi	sp,sp,-32
    80011e92:	ec22                	sd	s0,24(sp)
    80011e94:	1000                	addi	s0,sp,32
    80011e96:	87aa                	mv	a5,a0
    80011e98:	fef42623          	sw	a5,-20(s0)
    k_log_level &= ~lt;
    80011e9c:	fec42783          	lw	a5,-20(s0)
    80011ea0:	fff7c793          	not	a5,a5
    80011ea4:	0007871b          	sext.w	a4,a5
    80011ea8:	00009797          	auipc	a5,0x9
    80011eac:	15878793          	addi	a5,a5,344 # 8001b000 <k_log_level>
    80011eb0:	439c                	lw	a5,0(a5)
    80011eb2:	2781                	sext.w	a5,a5
    80011eb4:	8ff9                	and	a5,a5,a4
    80011eb6:	2781                	sext.w	a5,a5
    80011eb8:	0007871b          	sext.w	a4,a5
    80011ebc:	00009797          	auipc	a5,0x9
    80011ec0:	14478793          	addi	a5,a5,324 # 8001b000 <k_log_level>
    80011ec4:	c398                	sw	a4,0(a5)
}
    80011ec6:	0001                	nop
    80011ec8:	6462                	ld	s0,24(sp)
    80011eca:	6105                	addi	sp,sp,32
    80011ecc:	8082                	ret

0000000080011ece <sbi_putchar>:
#include <compiler.h>
#include <config.h>
#include <sbi.h>

void sbi_putchar(char c)
{
    80011ece:	1101                	addi	sp,sp,-32
    80011ed0:	ec22                	sd	s0,24(sp)
    80011ed2:	1000                	addi	s0,sp,32
    80011ed4:	87aa                	mv	a5,a0
    80011ed6:	fef407a3          	sb	a5,-17(s0)
    asm volatile("mv a7, %0\nmv a0, %1\necall" ::"r"(SBI_SVCALL_PUTCHAR), "r"(c) : "a7", "a0");
    80011eda:	47a5                	li	a5,9
    80011edc:	fef44703          	lbu	a4,-17(s0)
    80011ee0:	88be                	mv	a7,a5
    80011ee2:	853a                	mv	a0,a4
    80011ee4:	00000073          	ecall
}
    80011ee8:	0001                	nop
    80011eea:	6462                	ld	s0,24(sp)
    80011eec:	6105                	addi	sp,sp,32
    80011eee:	8082                	ret

0000000080011ef0 <sbi_getchar>:

char sbi_getchar(void)
{
    80011ef0:	1101                	addi	sp,sp,-32
    80011ef2:	ec22                	sd	s0,24(sp)
    80011ef4:	1000                	addi	s0,sp,32
    char c;
    asm volatile("mv a7, %1\necall\nmv %0, a0\n" : "=r"(c) : "r"(SBI_SVCALL_GETCHAR) : "a7", "a0");
    80011ef6:	47a9                	li	a5,10
    80011ef8:	88be                	mv	a7,a5
    80011efa:	00000073          	ecall
    80011efe:	87aa                	mv	a5,a0
    80011f00:	fef407a3          	sb	a5,-17(s0)
    return c;
    80011f04:	fef44783          	lbu	a5,-17(s0)
}
    80011f08:	853e                	mv	a0,a5
    80011f0a:	6462                	ld	s0,24(sp)
    80011f0c:	6105                	addi	sp,sp,32
    80011f0e:	8082                	ret

0000000080011f10 <sbi_hart_get_status>:

int sbi_hart_get_status(unsigned int hart)
{
    80011f10:	7179                	addi	sp,sp,-48
    80011f12:	f422                	sd	s0,40(sp)
    80011f14:	1800                	addi	s0,sp,48
    80011f16:	87aa                	mv	a5,a0
    80011f18:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\necall\nmv %0, a0\n"
    80011f1c:	4785                	li	a5,1
    80011f1e:	fdc42703          	lw	a4,-36(s0)
    80011f22:	88be                	mv	a7,a5
    80011f24:	853a                	mv	a0,a4
    80011f26:	00000073          	ecall
    80011f2a:	87aa                	mv	a5,a0
    80011f2c:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_STATUS), "r"(hart)
                 : "a0", "a7");
    return stat;
    80011f30:	fec42783          	lw	a5,-20(s0)
}
    80011f34:	853e                	mv	a0,a5
    80011f36:	7422                	ld	s0,40(sp)
    80011f38:	6145                	addi	sp,sp,48
    80011f3a:	8082                	ret

0000000080011f3c <sbi_hart_start>:

int sbi_hart_start(unsigned int hart, unsigned long target, unsigned long scratch, unsigned long satp)
{
    80011f3c:	7139                	addi	sp,sp,-64
    80011f3e:	fc22                	sd	s0,56(sp)
    80011f40:	0080                	addi	s0,sp,64
    80011f42:	87aa                	mv	a5,a0
    80011f44:	fcb43823          	sd	a1,-48(s0)
    80011f48:	fcc43423          	sd	a2,-56(s0)
    80011f4c:	fcd43023          	sd	a3,-64(s0)
    80011f50:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\nmv a1, %3\nmv a2, %4\nmv a3, %5\necall\nmv %0, a0\n"
    80011f54:	4789                	li	a5,2
    80011f56:	fdc42703          	lw	a4,-36(s0)
    80011f5a:	fd043683          	ld	a3,-48(s0)
    80011f5e:	fc843803          	ld	a6,-56(s0)
    80011f62:	fc043303          	ld	t1,-64(s0)
    80011f66:	88be                	mv	a7,a5
    80011f68:	853a                	mv	a0,a4
    80011f6a:	85b6                	mv	a1,a3
    80011f6c:	8642                	mv	a2,a6
    80011f6e:	869a                	mv	a3,t1
    80011f70:	00000073          	ecall
    80011f74:	87aa                	mv	a5,a0
    80011f76:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_START), "r"(hart), "r"(target), "r"(scratch), "r"(satp)
                 : "a0", "a1", "a2", "a7");
    return stat;
    80011f7a:	fec42783          	lw	a5,-20(s0)
}
    80011f7e:	853e                	mv	a0,a5
    80011f80:	7462                	ld	s0,56(sp)
    80011f82:	6121                	addi	sp,sp,64
    80011f84:	8082                	ret

0000000080011f86 <sbi_hart_stop>:

void sbi_hart_stop(void)
{
    80011f86:	1141                	addi	sp,sp,-16
    80011f88:	e422                	sd	s0,8(sp)
    80011f8a:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall\nwfi" : : "r"(SBI_SVCALL_HART_STOP) : "a0", "a7");
    80011f8c:	478d                	li	a5,3
    80011f8e:	88be                	mv	a7,a5
    80011f90:	00000073          	ecall
    80011f94:	10500073          	wfi
}
    80011f98:	0001                	nop
    80011f9a:	6422                	ld	s0,8(sp)
    80011f9c:	0141                	addi	sp,sp,16
    80011f9e:	8082                	ret

0000000080011fa0 <sbi_poweroff>:

void sbi_poweroff(void)
{
    80011fa0:	1141                	addi	sp,sp,-16
    80011fa2:	e422                	sd	s0,8(sp)
    80011fa4:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" : : "r"(SBI_SVCALL_POWEROFF) : "a0", "a7");
    80011fa6:	47b1                	li	a5,12
    80011fa8:	88be                	mv	a7,a5
    80011faa:	00000073          	ecall
}
    80011fae:	0001                	nop
    80011fb0:	6422                	ld	s0,8(sp)
    80011fb2:	0141                	addi	sp,sp,16
    80011fb4:	8082                	ret

0000000080011fb6 <sbi_get_time>:

unsigned long sbi_get_time(void)
{
    80011fb6:	1101                	addi	sp,sp,-32
    80011fb8:	ec22                	sd	s0,24(sp)
    80011fba:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_GET_TIME) : "a0", "a7");
    80011fbc:	4791                	li	a5,4
    80011fbe:	88be                	mv	a7,a5
    80011fc0:	00000073          	ecall
    80011fc4:	87aa                	mv	a5,a0
    80011fc6:	fef43423          	sd	a5,-24(s0)
    return ret;
    80011fca:	fe843783          	ld	a5,-24(s0)
}
    80011fce:	853e                	mv	a0,a5
    80011fd0:	6462                	ld	s0,24(sp)
    80011fd2:	6105                	addi	sp,sp,32
    80011fd4:	8082                	ret

0000000080011fd6 <sbi_set_timer>:

void sbi_set_timer(unsigned int hart, unsigned long val)
{
    80011fd6:	1101                	addi	sp,sp,-32
    80011fd8:	ec22                	sd	s0,24(sp)
    80011fda:	1000                	addi	s0,sp,32
    80011fdc:	87aa                	mv	a5,a0
    80011fde:	feb43023          	sd	a1,-32(s0)
    80011fe2:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_SET_TIMECMP), "r"(hart),
    80011fe6:	4795                	li	a5,5
    80011fe8:	fec42703          	lw	a4,-20(s0)
    80011fec:	fe043683          	ld	a3,-32(s0)
    80011ff0:	88be                	mv	a7,a5
    80011ff2:	853a                	mv	a0,a4
    80011ff4:	85b6                	mv	a1,a3
    80011ff6:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    80011ffa:	0001                	nop
    80011ffc:	6462                	ld	s0,24(sp)
    80011ffe:	6105                	addi	sp,sp,32
    80012000:	8082                	ret

0000000080012002 <sbi_add_timer>:

void sbi_add_timer(unsigned int hart, unsigned long val)
{
    80012002:	1101                	addi	sp,sp,-32
    80012004:	ec22                	sd	s0,24(sp)
    80012006:	1000                	addi	s0,sp,32
    80012008:	87aa                	mv	a5,a0
    8001200a:	feb43023          	sd	a1,-32(s0)
    8001200e:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_ADD_TIMECMP), "r"(hart),
    80012012:	4799                	li	a5,6
    80012014:	fec42703          	lw	a4,-20(s0)
    80012018:	fe043683          	ld	a3,-32(s0)
    8001201c:	88be                	mv	a7,a5
    8001201e:	853a                	mv	a0,a4
    80012020:	85b6                	mv	a1,a3
    80012022:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    80012026:	0001                	nop
    80012028:	6462                	ld	s0,24(sp)
    8001202a:	6105                	addi	sp,sp,32
    8001202c:	8082                	ret

000000008001202e <sbi_ack_timer>:

void sbi_ack_timer(void)
{
    8001202e:	1141                	addi	sp,sp,-16
    80012030:	e422                	sd	s0,8(sp)
    80012032:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" ::"r"(SBI_SVCALL_ACK_TIMER) : "a7");
    80012034:	479d                	li	a5,7
    80012036:	88be                	mv	a7,a5
    80012038:	00000073          	ecall
}
    8001203c:	0001                	nop
    8001203e:	6422                	ld	s0,8(sp)
    80012040:	0141                	addi	sp,sp,16
    80012042:	8082                	ret

0000000080012044 <sbi_rtc_get_time>:

unsigned long sbi_rtc_get_time(void)
{
    80012044:	1101                	addi	sp,sp,-32
    80012046:	ec22                	sd	s0,24(sp)
    80012048:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0"
    8001204a:	47a1                	li	a5,8
    8001204c:	88be                	mv	a7,a5
    8001204e:	00000073          	ecall
    80012052:	87aa                	mv	a5,a0
    80012054:	fef43423          	sd	a5,-24(s0)
                 : "=r"(ret)
                 : "r"(SBI_SVCALL_RTC_GET_TIME)
                 : "a0", "a7");
    return ret;
    80012058:	fe843783          	ld	a5,-24(s0)
}
    8001205c:	853e                	mv	a0,a5
    8001205e:	6462                	ld	s0,24(sp)
    80012060:	6105                	addi	sp,sp,32
    80012062:	8082                	ret

0000000080012064 <sbi_whoami>:

int sbi_whoami(void)
{
    80012064:	1101                	addi	sp,sp,-32
    80012066:	ec22                	sd	s0,24(sp)
    80012068:	1000                	addi	s0,sp,32
    int ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_WHOAMI) : "a0", "a7");
    8001206a:	47ad                	li	a5,11
    8001206c:	88be                	mv	a7,a5
    8001206e:	00000073          	ecall
    80012072:	87aa                	mv	a5,a0
    80012074:	fef42623          	sw	a5,-20(s0)
    return ret;
    80012078:	fec42783          	lw	a5,-20(s0)
}
    8001207c:	853e                	mv	a0,a5
    8001207e:	6462                	ld	s0,24(sp)
    80012080:	6105                	addi	sp,sp,32
    80012082:	8082                	ret

0000000080012084 <sbi_num_harts>:

int sbi_num_harts(void)
{
    80012084:	1101                	addi	sp,sp,-32
    80012086:	ec06                	sd	ra,24(sp)
    80012088:	e822                	sd	s0,16(sp)
    8001208a:	1000                	addi	s0,sp,32
    unsigned int i;
    int num_harts = 0;
    8001208c:	fe042423          	sw	zero,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80012090:	fe042623          	sw	zero,-20(s0)
    80012094:	a015                	j	800120b8 <sbi_num_harts+0x34>
        if (sbi_hart_get_status(i) != 0) {
    80012096:	fec42783          	lw	a5,-20(s0)
    8001209a:	853e                	mv	a0,a5
    8001209c:	e75ff0ef          	jal	ra,80011f10 <sbi_hart_get_status>
    800120a0:	87aa                	mv	a5,a0
    800120a2:	c791                	beqz	a5,800120ae <sbi_num_harts+0x2a>
            num_harts += 1;
    800120a4:	fe842783          	lw	a5,-24(s0)
    800120a8:	2785                	addiw	a5,a5,1
    800120aa:	fef42423          	sw	a5,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    800120ae:	fec42783          	lw	a5,-20(s0)
    800120b2:	2785                	addiw	a5,a5,1
    800120b4:	fef42623          	sw	a5,-20(s0)
    800120b8:	fec42783          	lw	a5,-20(s0)
    800120bc:	0007871b          	sext.w	a4,a5
    800120c0:	478d                	li	a5,3
    800120c2:	fce7fae3          	bgeu	a5,a4,80012096 <sbi_num_harts+0x12>
        }
    }
    return num_harts;
    800120c6:	fe842783          	lw	a5,-24(s0)
}
    800120ca:	853e                	mv	a0,a5
    800120cc:	60e2                	ld	ra,24(sp)
    800120ce:	6442                	ld	s0,16(sp)
    800120d0:	6105                	addi	sp,sp,32
    800120d2:	8082                	ret

00000000800120d4 <plic_set_priority>:
#define PLIC_PCI_INTB 33
#define PLIC_PCI_INTC 34
#define PLIC_PCI_INTD 35

void plic_set_priority(int interrupt_id, char priority)
{
    800120d4:	7179                	addi	sp,sp,-48
    800120d6:	f422                	sd	s0,40(sp)
    800120d8:	1800                	addi	s0,sp,48
    800120da:	87aa                	mv	a5,a0
    800120dc:	872e                	mv	a4,a1
    800120de:	fcf42e23          	sw	a5,-36(s0)
    800120e2:	87ba                	mv	a5,a4
    800120e4:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_PRIORITY(interrupt_id);
    800120e8:	fdc42783          	lw	a5,-36(s0)
    800120ec:	0027979b          	slliw	a5,a5,0x2
    800120f0:	2781                	sext.w	a5,a5
    800120f2:	873e                	mv	a4,a5
    800120f4:	0c0007b7          	lui	a5,0xc000
    800120f8:	97ba                	add	a5,a5,a4
    800120fa:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    800120fe:	fdb44783          	lbu	a5,-37(s0)
    80012102:	2781                	sext.w	a5,a5
    80012104:	8b9d                	andi	a5,a5,7
    80012106:	0007871b          	sext.w	a4,a5
    8001210a:	fe843783          	ld	a5,-24(s0)
    8001210e:	c398                	sw	a4,0(a5)
}
    80012110:	0001                	nop
    80012112:	7422                	ld	s0,40(sp)
    80012114:	6145                	addi	sp,sp,48
    80012116:	8082                	ret

0000000080012118 <plic_set_threshold>:
void plic_set_threshold(int hart, char priority)
{
    80012118:	7179                	addi	sp,sp,-48
    8001211a:	f422                	sd	s0,40(sp)
    8001211c:	1800                	addi	s0,sp,48
    8001211e:	87aa                	mv	a5,a0
    80012120:	872e                	mv	a4,a1
    80012122:	fcf42e23          	sw	a5,-36(s0)
    80012126:	87ba                	mv	a5,a4
    80012128:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_THRESHOLD(hart, PLIC_MODE_SUPERVISOR);
    8001212c:	fdc42783          	lw	a5,-36(s0)
    80012130:	0017979b          	slliw	a5,a5,0x1
    80012134:	2781                	sext.w	a5,a5
    80012136:	2785                	addiw	a5,a5,1
    80012138:	2781                	sext.w	a5,a5
    8001213a:	00c7979b          	slliw	a5,a5,0xc
    8001213e:	2781                	sext.w	a5,a5
    80012140:	873e                	mv	a4,a5
    80012142:	0c2007b7          	lui	a5,0xc200
    80012146:	97ba                	add	a5,a5,a4
    80012148:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    8001214c:	fdb44783          	lbu	a5,-37(s0)
    80012150:	2781                	sext.w	a5,a5
    80012152:	8b9d                	andi	a5,a5,7
    80012154:	0007871b          	sext.w	a4,a5
    80012158:	fe843783          	ld	a5,-24(s0)
    8001215c:	c398                	sw	a4,0(a5)
}
    8001215e:	0001                	nop
    80012160:	7422                	ld	s0,40(sp)
    80012162:	6145                	addi	sp,sp,48
    80012164:	8082                	ret

0000000080012166 <plic_enable>:
void plic_enable(int hart, int interrupt_id)
{
    80012166:	7179                	addi	sp,sp,-48
    80012168:	f422                	sd	s0,40(sp)
    8001216a:	1800                	addi	s0,sp,48
    8001216c:	87aa                	mv	a5,a0
    8001216e:	872e                	mv	a4,a1
    80012170:	fcf42e23          	sw	a5,-36(s0)
    80012174:	87ba                	mv	a5,a4
    80012176:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    8001217a:	fdc42783          	lw	a5,-36(s0)
    8001217e:	0017979b          	slliw	a5,a5,0x1
    80012182:	2781                	sext.w	a5,a5
    80012184:	2785                	addiw	a5,a5,1
    80012186:	2781                	sext.w	a5,a5
    80012188:	0077979b          	slliw	a5,a5,0x7
    8001218c:	2781                	sext.w	a5,a5
    8001218e:	873e                	mv	a4,a5
    80012190:	0c0027b7          	lui	a5,0xc002
    80012194:	97ba                	add	a5,a5,a4
    80012196:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] |= 1UL << (interrupt_id % 32);
    8001219a:	fd842783          	lw	a5,-40(s0)
    8001219e:	41f7d71b          	sraiw	a4,a5,0x1f
    800121a2:	01b7571b          	srliw	a4,a4,0x1b
    800121a6:	9fb9                	addw	a5,a5,a4
    800121a8:	4057d79b          	sraiw	a5,a5,0x5
    800121ac:	0007869b          	sext.w	a3,a5
    800121b0:	87b6                	mv	a5,a3
    800121b2:	078a                	slli	a5,a5,0x2
    800121b4:	fe843703          	ld	a4,-24(s0)
    800121b8:	97ba                	add	a5,a5,a4
    800121ba:	438c                	lw	a1,0(a5)
    800121bc:	fd842703          	lw	a4,-40(s0)
    800121c0:	41f7579b          	sraiw	a5,a4,0x1f
    800121c4:	01b7d79b          	srliw	a5,a5,0x1b
    800121c8:	9f3d                	addw	a4,a4,a5
    800121ca:	8b7d                	andi	a4,a4,31
    800121cc:	40f707bb          	subw	a5,a4,a5
    800121d0:	2781                	sext.w	a5,a5
    800121d2:	873e                	mv	a4,a5
    800121d4:	4785                	li	a5,1
    800121d6:	00e797b3          	sll	a5,a5,a4
    800121da:	0007861b          	sext.w	a2,a5
    800121de:	87b6                	mv	a5,a3
    800121e0:	078a                	slli	a5,a5,0x2
    800121e2:	fe843703          	ld	a4,-24(s0)
    800121e6:	97ba                	add	a5,a5,a4
    800121e8:	86ae                	mv	a3,a1
    800121ea:	8732                	mv	a4,a2
    800121ec:	8f55                	or	a4,a4,a3
    800121ee:	2701                	sext.w	a4,a4
    800121f0:	c398                	sw	a4,0(a5)
}
    800121f2:	0001                	nop
    800121f4:	7422                	ld	s0,40(sp)
    800121f6:	6145                	addi	sp,sp,48
    800121f8:	8082                	ret

00000000800121fa <plic_disable>:
void plic_disable(int hart, int interrupt_id)
{
    800121fa:	7179                	addi	sp,sp,-48
    800121fc:	f422                	sd	s0,40(sp)
    800121fe:	1800                	addi	s0,sp,48
    80012200:	87aa                	mv	a5,a0
    80012202:	872e                	mv	a4,a1
    80012204:	fcf42e23          	sw	a5,-36(s0)
    80012208:	87ba                	mv	a5,a4
    8001220a:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    8001220e:	fdc42783          	lw	a5,-36(s0)
    80012212:	0017979b          	slliw	a5,a5,0x1
    80012216:	2781                	sext.w	a5,a5
    80012218:	2785                	addiw	a5,a5,1
    8001221a:	2781                	sext.w	a5,a5
    8001221c:	0077979b          	slliw	a5,a5,0x7
    80012220:	2781                	sext.w	a5,a5
    80012222:	873e                	mv	a4,a5
    80012224:	0c0027b7          	lui	a5,0xc002
    80012228:	97ba                	add	a5,a5,a4
    8001222a:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] &= ~(1UL << (interrupt_id % 32));
    8001222e:	fd842783          	lw	a5,-40(s0)
    80012232:	41f7d71b          	sraiw	a4,a5,0x1f
    80012236:	01b7571b          	srliw	a4,a4,0x1b
    8001223a:	9fb9                	addw	a5,a5,a4
    8001223c:	4057d79b          	sraiw	a5,a5,0x5
    80012240:	0007869b          	sext.w	a3,a5
    80012244:	87b6                	mv	a5,a3
    80012246:	078a                	slli	a5,a5,0x2
    80012248:	fe843703          	ld	a4,-24(s0)
    8001224c:	97ba                	add	a5,a5,a4
    8001224e:	438c                	lw	a1,0(a5)
    80012250:	fd842703          	lw	a4,-40(s0)
    80012254:	41f7579b          	sraiw	a5,a4,0x1f
    80012258:	01b7d79b          	srliw	a5,a5,0x1b
    8001225c:	9f3d                	addw	a4,a4,a5
    8001225e:	8b7d                	andi	a4,a4,31
    80012260:	40f707bb          	subw	a5,a4,a5
    80012264:	2781                	sext.w	a5,a5
    80012266:	873e                	mv	a4,a5
    80012268:	4785                	li	a5,1
    8001226a:	00e797b3          	sll	a5,a5,a4
    8001226e:	2781                	sext.w	a5,a5
    80012270:	fff7c793          	not	a5,a5
    80012274:	0007861b          	sext.w	a2,a5
    80012278:	87b6                	mv	a5,a3
    8001227a:	078a                	slli	a5,a5,0x2
    8001227c:	fe843703          	ld	a4,-24(s0)
    80012280:	97ba                	add	a5,a5,a4
    80012282:	86ae                	mv	a3,a1
    80012284:	8732                	mv	a4,a2
    80012286:	8f75                	and	a4,a4,a3
    80012288:	2701                	sext.w	a4,a4
    8001228a:	c398                	sw	a4,0(a5)
}
    8001228c:	0001                	nop
    8001228e:	7422                	ld	s0,40(sp)
    80012290:	6145                	addi	sp,sp,48
    80012292:	8082                	ret

0000000080012294 <plic_claim>:
uint32_t plic_claim(int hart)
{
    80012294:	7179                	addi	sp,sp,-48
    80012296:	f422                	sd	s0,40(sp)
    80012298:	1800                	addi	s0,sp,48
    8001229a:	87aa                	mv	a5,a0
    8001229c:	fcf42e23          	sw	a5,-36(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    800122a0:	fdc42783          	lw	a5,-36(s0)
    800122a4:	0017979b          	slliw	a5,a5,0x1
    800122a8:	2781                	sext.w	a5,a5
    800122aa:	2785                	addiw	a5,a5,1
    800122ac:	2781                	sext.w	a5,a5
    800122ae:	00c7979b          	slliw	a5,a5,0xc
    800122b2:	2781                	sext.w	a5,a5
    800122b4:	873e                	mv	a4,a5
    800122b6:	0c2007b7          	lui	a5,0xc200
    800122ba:	0791                	addi	a5,a5,4
    800122bc:	97ba                	add	a5,a5,a4
    800122be:	fef43423          	sd	a5,-24(s0)
    return *base;
    800122c2:	fe843783          	ld	a5,-24(s0)
    800122c6:	439c                	lw	a5,0(a5)
}
    800122c8:	853e                	mv	a0,a5
    800122ca:	7422                	ld	s0,40(sp)
    800122cc:	6145                	addi	sp,sp,48
    800122ce:	8082                	ret

00000000800122d0 <plic_complete>:
void plic_complete(int hart, int id)
{
    800122d0:	7179                	addi	sp,sp,-48
    800122d2:	f422                	sd	s0,40(sp)
    800122d4:	1800                	addi	s0,sp,48
    800122d6:	87aa                	mv	a5,a0
    800122d8:	872e                	mv	a4,a1
    800122da:	fcf42e23          	sw	a5,-36(s0)
    800122de:	87ba                	mv	a5,a4
    800122e0:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    800122e4:	fdc42783          	lw	a5,-36(s0)
    800122e8:	0017979b          	slliw	a5,a5,0x1
    800122ec:	2781                	sext.w	a5,a5
    800122ee:	2785                	addiw	a5,a5,1
    800122f0:	2781                	sext.w	a5,a5
    800122f2:	00c7979b          	slliw	a5,a5,0xc
    800122f6:	2781                	sext.w	a5,a5
    800122f8:	873e                	mv	a4,a5
    800122fa:	0c2007b7          	lui	a5,0xc200
    800122fe:	0791                	addi	a5,a5,4
    80012300:	97ba                	add	a5,a5,a4
    80012302:	fef43423          	sd	a5,-24(s0)
    *base          = id;
    80012306:	fd842703          	lw	a4,-40(s0)
    8001230a:	fe843783          	ld	a5,-24(s0)
    8001230e:	c398                	sw	a4,0(a5)
}
    80012310:	0001                	nop
    80012312:	7422                	ld	s0,40(sp)
    80012314:	6145                	addi	sp,sp,48
    80012316:	8082                	ret

0000000080012318 <plic_handle_irq>:

void plic_handle_irq(int hart)
{
    80012318:	7179                	addi	sp,sp,-48
    8001231a:	f406                	sd	ra,40(sp)
    8001231c:	f022                	sd	s0,32(sp)
    8001231e:	1800                	addi	s0,sp,48
    80012320:	87aa                	mv	a5,a0
    80012322:	fcf42e23          	sw	a5,-36(s0)
    int irq = plic_claim(hart);
    80012326:	fdc42783          	lw	a5,-36(s0)
    8001232a:	853e                	mv	a0,a5
    8001232c:	f69ff0ef          	jal	ra,80012294 <plic_claim>
    80012330:	87aa                	mv	a5,a0
    80012332:	2781                	sext.w	a5,a5
    80012334:	fef42623          	sw	a5,-20(s0)
            pci_dispatch_irq(irq);
#endif
            break;
    }

    plic_complete(hart, irq);
    80012338:	fec42703          	lw	a4,-20(s0)
    8001233c:	fdc42783          	lw	a5,-36(s0)
    80012340:	85ba                	mv	a1,a4
    80012342:	853e                	mv	a0,a5
    80012344:	f8dff0ef          	jal	ra,800122d0 <plic_complete>
}
    80012348:	0001                	nop
    8001234a:	70a2                	ld	ra,40(sp)
    8001234c:	7402                	ld	s0,32(sp)
    8001234e:	6145                	addi	sp,sp,48
    80012350:	8082                	ret

0000000080012352 <plic_init>:

void plic_init(void)
{
    80012352:	1141                	addi	sp,sp,-16
    80012354:	e406                	sd	ra,8(sp)
    80012356:	e022                	sd	s0,0(sp)
    80012358:	0800                	addi	s0,sp,16
    plic_enable(0, PLIC_PCI_INTA);
    8001235a:	02000593          	li	a1,32
    8001235e:	4501                	li	a0,0
    80012360:	e07ff0ef          	jal	ra,80012166 <plic_enable>
    plic_enable(0, PLIC_PCI_INTB);
    80012364:	02100593          	li	a1,33
    80012368:	4501                	li	a0,0
    8001236a:	dfdff0ef          	jal	ra,80012166 <plic_enable>
    plic_enable(0, PLIC_PCI_INTC);
    8001236e:	02200593          	li	a1,34
    80012372:	4501                	li	a0,0
    80012374:	df3ff0ef          	jal	ra,80012166 <plic_enable>
    plic_enable(0, PLIC_PCI_INTD);
    80012378:	02300593          	li	a1,35
    8001237c:	4501                	li	a0,0
    8001237e:	de9ff0ef          	jal	ra,80012166 <plic_enable>

    plic_set_threshold(0, 1);
    80012382:	4585                	li	a1,1
    80012384:	4501                	li	a0,0
    80012386:	d93ff0ef          	jal	ra,80012118 <plic_set_threshold>

    plic_set_priority(PLIC_PCI_INTA, 3);
    8001238a:	458d                	li	a1,3
    8001238c:	02000513          	li	a0,32
    80012390:	d45ff0ef          	jal	ra,800120d4 <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTB, 3);
    80012394:	458d                	li	a1,3
    80012396:	02100513          	li	a0,33
    8001239a:	d3bff0ef          	jal	ra,800120d4 <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTC, 3);
    8001239e:	458d                	li	a1,3
    800123a0:	02200513          	li	a0,34
    800123a4:	d31ff0ef          	jal	ra,800120d4 <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTD, 3);
    800123a8:	458d                	li	a1,3
    800123aa:	02300513          	li	a0,35
    800123ae:	d27ff0ef          	jal	ra,800120d4 <plic_set_priority>
}
    800123b2:	0001                	nop
    800123b4:	60a2                	ld	ra,8(sp)
    800123b6:	6402                	ld	s0,0(sp)
    800123b8:	0141                	addi	sp,sp,16
    800123ba:	8082                	ret

00000000800123bc <set_taken>:

static uint8_t *bookkeeping;  // Pointer to the bookkeeping area

// For some reason, the macros didn't work for me, so I used the static functions like Marz said and it works.
static void set_taken(uint64_t index)
{
    800123bc:	1101                	addi	sp,sp,-32
    800123be:	ec22                	sd	s0,24(sp)
    800123c0:	1000                	addi	s0,sp,32
    800123c2:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2));
    800123c6:	00006797          	auipc	a5,0x6
    800123ca:	c8a78793          	addi	a5,a5,-886 # 80018050 <bookkeeping>
    800123ce:	6398                	ld	a4,0(a5)
    800123d0:	fe843783          	ld	a5,-24(s0)
    800123d4:	8389                	srli	a5,a5,0x2
    800123d6:	973e                	add	a4,a4,a5
    800123d8:	00074703          	lbu	a4,0(a4) # ffffffffc0fff000 <_heap_end+0xffffffff38fef000>
    800123dc:	0187169b          	slliw	a3,a4,0x18
    800123e0:	4186d69b          	sraiw	a3,a3,0x18
    800123e4:	fe843703          	ld	a4,-24(s0)
    800123e8:	2701                	sext.w	a4,a4
    800123ea:	8b0d                	andi	a4,a4,3
    800123ec:	2701                	sext.w	a4,a4
    800123ee:	0017171b          	slliw	a4,a4,0x1
    800123f2:	2701                	sext.w	a4,a4
    800123f4:	4605                	li	a2,1
    800123f6:	00e6173b          	sllw	a4,a2,a4
    800123fa:	2701                	sext.w	a4,a4
    800123fc:	0187171b          	slliw	a4,a4,0x18
    80012400:	4187571b          	sraiw	a4,a4,0x18
    80012404:	8f55                	or	a4,a4,a3
    80012406:	0187169b          	slliw	a3,a4,0x18
    8001240a:	4186d69b          	sraiw	a3,a3,0x18
    8001240e:	00006717          	auipc	a4,0x6
    80012412:	c4270713          	addi	a4,a4,-958 # 80018050 <bookkeeping>
    80012416:	6318                	ld	a4,0(a4)
    80012418:	97ba                	add	a5,a5,a4
    8001241a:	0ff6f713          	andi	a4,a3,255
    8001241e:	00e78023          	sb	a4,0(a5)
}
    80012422:	0001                	nop
    80012424:	6462                	ld	s0,24(sp)
    80012426:	6105                	addi	sp,sp,32
    80012428:	8082                	ret

000000008001242a <clear_taken>:

static void clear_taken(uint64_t index)
{
    8001242a:	1101                	addi	sp,sp,-32
    8001242c:	ec22                	sd	s0,24(sp)
    8001242e:	1000                	addi	s0,sp,32
    80012430:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2));
    80012434:	00006797          	auipc	a5,0x6
    80012438:	c1c78793          	addi	a5,a5,-996 # 80018050 <bookkeeping>
    8001243c:	6398                	ld	a4,0(a5)
    8001243e:	fe843783          	ld	a5,-24(s0)
    80012442:	8389                	srli	a5,a5,0x2
    80012444:	973e                	add	a4,a4,a5
    80012446:	00074703          	lbu	a4,0(a4)
    8001244a:	0187169b          	slliw	a3,a4,0x18
    8001244e:	4186d69b          	sraiw	a3,a3,0x18
    80012452:	fe843703          	ld	a4,-24(s0)
    80012456:	2701                	sext.w	a4,a4
    80012458:	8b0d                	andi	a4,a4,3
    8001245a:	2701                	sext.w	a4,a4
    8001245c:	0017171b          	slliw	a4,a4,0x1
    80012460:	2701                	sext.w	a4,a4
    80012462:	4605                	li	a2,1
    80012464:	00e6173b          	sllw	a4,a2,a4
    80012468:	2701                	sext.w	a4,a4
    8001246a:	0187171b          	slliw	a4,a4,0x18
    8001246e:	4187571b          	sraiw	a4,a4,0x18
    80012472:	fff74713          	not	a4,a4
    80012476:	0187171b          	slliw	a4,a4,0x18
    8001247a:	4187571b          	sraiw	a4,a4,0x18
    8001247e:	8f75                	and	a4,a4,a3
    80012480:	0187169b          	slliw	a3,a4,0x18
    80012484:	4186d69b          	sraiw	a3,a3,0x18
    80012488:	00006717          	auipc	a4,0x6
    8001248c:	bc870713          	addi	a4,a4,-1080 # 80018050 <bookkeeping>
    80012490:	6318                	ld	a4,0(a4)
    80012492:	97ba                	add	a5,a5,a4
    80012494:	0ff6f713          	andi	a4,a3,255
    80012498:	00e78023          	sb	a4,0(a5)
}
    8001249c:	0001                	nop
    8001249e:	6462                	ld	s0,24(sp)
    800124a0:	6105                	addi	sp,sp,32
    800124a2:	8082                	ret

00000000800124a4 <is_taken>:

static int is_taken(uint64_t index)
{
    800124a4:	1101                	addi	sp,sp,-32
    800124a6:	ec22                	sd	s0,24(sp)
    800124a8:	1000                	addi	s0,sp,32
    800124aa:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2));
    800124ae:	00006797          	auipc	a5,0x6
    800124b2:	ba278793          	addi	a5,a5,-1118 # 80018050 <bookkeeping>
    800124b6:	6398                	ld	a4,0(a5)
    800124b8:	fe843783          	ld	a5,-24(s0)
    800124bc:	8389                	srli	a5,a5,0x2
    800124be:	97ba                	add	a5,a5,a4
    800124c0:	0007c783          	lbu	a5,0(a5)
    800124c4:	0007871b          	sext.w	a4,a5
    800124c8:	fe843783          	ld	a5,-24(s0)
    800124cc:	2781                	sext.w	a5,a5
    800124ce:	8b8d                	andi	a5,a5,3
    800124d0:	2781                	sext.w	a5,a5
    800124d2:	0017979b          	slliw	a5,a5,0x1
    800124d6:	2781                	sext.w	a5,a5
    800124d8:	4685                	li	a3,1
    800124da:	00f697bb          	sllw	a5,a3,a5
    800124de:	2781                	sext.w	a5,a5
    800124e0:	8ff9                	and	a5,a5,a4
    800124e2:	2781                	sext.w	a5,a5
}
    800124e4:	853e                	mv	a0,a5
    800124e6:	6462                	ld	s0,24(sp)
    800124e8:	6105                	addi	sp,sp,32
    800124ea:	8082                	ret

00000000800124ec <set_last>:

static void set_last(uint64_t index)
{
    800124ec:	1101                	addi	sp,sp,-32
    800124ee:	ec22                	sd	s0,24(sp)
    800124f0:	1000                	addi	s0,sp,32
    800124f2:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2 + 1));
    800124f6:	00006797          	auipc	a5,0x6
    800124fa:	b5a78793          	addi	a5,a5,-1190 # 80018050 <bookkeeping>
    800124fe:	6398                	ld	a4,0(a5)
    80012500:	fe843783          	ld	a5,-24(s0)
    80012504:	8389                	srli	a5,a5,0x2
    80012506:	973e                	add	a4,a4,a5
    80012508:	00074703          	lbu	a4,0(a4)
    8001250c:	0187169b          	slliw	a3,a4,0x18
    80012510:	4186d69b          	sraiw	a3,a3,0x18
    80012514:	fe843703          	ld	a4,-24(s0)
    80012518:	2701                	sext.w	a4,a4
    8001251a:	8b0d                	andi	a4,a4,3
    8001251c:	2701                	sext.w	a4,a4
    8001251e:	0017171b          	slliw	a4,a4,0x1
    80012522:	2701                	sext.w	a4,a4
    80012524:	2705                	addiw	a4,a4,1
    80012526:	2701                	sext.w	a4,a4
    80012528:	4605                	li	a2,1
    8001252a:	00e6173b          	sllw	a4,a2,a4
    8001252e:	2701                	sext.w	a4,a4
    80012530:	0187171b          	slliw	a4,a4,0x18
    80012534:	4187571b          	sraiw	a4,a4,0x18
    80012538:	8f55                	or	a4,a4,a3
    8001253a:	0187169b          	slliw	a3,a4,0x18
    8001253e:	4186d69b          	sraiw	a3,a3,0x18
    80012542:	00006717          	auipc	a4,0x6
    80012546:	b0e70713          	addi	a4,a4,-1266 # 80018050 <bookkeeping>
    8001254a:	6318                	ld	a4,0(a4)
    8001254c:	97ba                	add	a5,a5,a4
    8001254e:	0ff6f713          	andi	a4,a3,255
    80012552:	00e78023          	sb	a4,0(a5)
}
    80012556:	0001                	nop
    80012558:	6462                	ld	s0,24(sp)
    8001255a:	6105                	addi	sp,sp,32
    8001255c:	8082                	ret

000000008001255e <clear_last>:

static void clear_last(uint64_t index)
{
    8001255e:	1101                	addi	sp,sp,-32
    80012560:	ec22                	sd	s0,24(sp)
    80012562:	1000                	addi	s0,sp,32
    80012564:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2 + 1));
    80012568:	00006797          	auipc	a5,0x6
    8001256c:	ae878793          	addi	a5,a5,-1304 # 80018050 <bookkeeping>
    80012570:	6398                	ld	a4,0(a5)
    80012572:	fe843783          	ld	a5,-24(s0)
    80012576:	8389                	srli	a5,a5,0x2
    80012578:	973e                	add	a4,a4,a5
    8001257a:	00074703          	lbu	a4,0(a4)
    8001257e:	0187169b          	slliw	a3,a4,0x18
    80012582:	4186d69b          	sraiw	a3,a3,0x18
    80012586:	fe843703          	ld	a4,-24(s0)
    8001258a:	2701                	sext.w	a4,a4
    8001258c:	8b0d                	andi	a4,a4,3
    8001258e:	2701                	sext.w	a4,a4
    80012590:	0017171b          	slliw	a4,a4,0x1
    80012594:	2701                	sext.w	a4,a4
    80012596:	2705                	addiw	a4,a4,1
    80012598:	2701                	sext.w	a4,a4
    8001259a:	4605                	li	a2,1
    8001259c:	00e6173b          	sllw	a4,a2,a4
    800125a0:	2701                	sext.w	a4,a4
    800125a2:	0187171b          	slliw	a4,a4,0x18
    800125a6:	4187571b          	sraiw	a4,a4,0x18
    800125aa:	fff74713          	not	a4,a4
    800125ae:	0187171b          	slliw	a4,a4,0x18
    800125b2:	4187571b          	sraiw	a4,a4,0x18
    800125b6:	8f75                	and	a4,a4,a3
    800125b8:	0187169b          	slliw	a3,a4,0x18
    800125bc:	4186d69b          	sraiw	a3,a3,0x18
    800125c0:	00006717          	auipc	a4,0x6
    800125c4:	a9070713          	addi	a4,a4,-1392 # 80018050 <bookkeeping>
    800125c8:	6318                	ld	a4,0(a4)
    800125ca:	97ba                	add	a5,a5,a4
    800125cc:	0ff6f713          	andi	a4,a3,255
    800125d0:	00e78023          	sb	a4,0(a5)
}
    800125d4:	0001                	nop
    800125d6:	6462                	ld	s0,24(sp)
    800125d8:	6105                	addi	sp,sp,32
    800125da:	8082                	ret

00000000800125dc <is_last>:

static int is_last(uint64_t index)
{
    800125dc:	1101                	addi	sp,sp,-32
    800125de:	ec22                	sd	s0,24(sp)
    800125e0:	1000                	addi	s0,sp,32
    800125e2:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2 + 1));
    800125e6:	00006797          	auipc	a5,0x6
    800125ea:	a6a78793          	addi	a5,a5,-1430 # 80018050 <bookkeeping>
    800125ee:	6398                	ld	a4,0(a5)
    800125f0:	fe843783          	ld	a5,-24(s0)
    800125f4:	8389                	srli	a5,a5,0x2
    800125f6:	97ba                	add	a5,a5,a4
    800125f8:	0007c783          	lbu	a5,0(a5)
    800125fc:	0007871b          	sext.w	a4,a5
    80012600:	fe843783          	ld	a5,-24(s0)
    80012604:	2781                	sext.w	a5,a5
    80012606:	8b8d                	andi	a5,a5,3
    80012608:	2781                	sext.w	a5,a5
    8001260a:	0017979b          	slliw	a5,a5,0x1
    8001260e:	2781                	sext.w	a5,a5
    80012610:	2785                	addiw	a5,a5,1
    80012612:	2781                	sext.w	a5,a5
    80012614:	4685                	li	a3,1
    80012616:	00f697bb          	sllw	a5,a3,a5
    8001261a:	2781                	sext.w	a5,a5
    8001261c:	8ff9                	and	a5,a5,a4
    8001261e:	2781                	sext.w	a5,a5
}
    80012620:	853e                	mv	a0,a5
    80012622:	6462                	ld	s0,24(sp)
    80012624:	6105                	addi	sp,sp,32
    80012626:	8082                	ret

0000000080012628 <page_init>:

void page_init(void)
{
    80012628:	1101                	addi	sp,sp,-32
    8001262a:	ec06                	sd	ra,24(sp)
    8001262c:	e822                	sd	s0,16(sp)
    8001262e:	1000                	addi	s0,sp,32
    /* Initialize the page system. */
    bookkeeping = sym_start(heap);
    80012630:	00006797          	auipc	a5,0x6
    80012634:	a2078793          	addi	a5,a5,-1504 # 80018050 <bookkeeping>
    80012638:	00012717          	auipc	a4,0x12
    8001263c:	9c870713          	addi	a4,a4,-1592 # 80024000 <_heap_start>
    80012640:	e398                	sd	a4,0(a5)
    
    // Print bookkeeping area
    mutex_spinlock(&page_lock);
    80012642:	00006517          	auipc	a0,0x6
    80012646:	9c650513          	addi	a0,a0,-1594 # 80018008 <page_lock>
    8001264a:	cb0fe0ef          	jal	ra,80010afa <mutex_spinlock>

    // Initialize the bookkeeping area
    memset(bookkeeping, 0, BK_SIZE_IN_BYTES);
    8001264e:	00006797          	auipc	a5,0x6
    80012652:	a0278793          	addi	a5,a5,-1534 # 80018050 <bookkeeping>
    80012656:	6394                	ld	a3,0(a5)
    80012658:	07ffe717          	auipc	a4,0x7ffe
    8001265c:	9a870713          	addi	a4,a4,-1624 # 88010000 <_heap_end>
    80012660:	00012797          	auipc	a5,0x12
    80012664:	9a078793          	addi	a5,a5,-1632 # 80024000 <_heap_start>
    80012668:	40f707b3          	sub	a5,a4,a5
    8001266c:	83b9                	srli	a5,a5,0xe
    8001266e:	0007871b          	sext.w	a4,a5
    80012672:	6785                	lui	a5,0x1
    80012674:	37fd                	addiw	a5,a5,-1
    80012676:	9fb9                	addw	a5,a5,a4
    80012678:	2781                	sext.w	a5,a5
    8001267a:	0007871b          	sext.w	a4,a5
    8001267e:	77fd                	lui	a5,0xfffff
    80012680:	8ff9                	and	a5,a5,a4
    80012682:	2781                	sext.w	a5,a5
    80012684:	863e                	mv	a2,a5
    80012686:	4581                	li	a1,0
    80012688:	8536                	mv	a0,a3
    8001268a:	379020ef          	jal	ra,80015202 <memset>
    // Mark the bookkeeping pages as taken
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    8001268e:	fe043423          	sd	zero,-24(s0)
    80012692:	a811                	j	800126a6 <page_init+0x7e>
        set_taken(i);
    80012694:	fe843503          	ld	a0,-24(s0)
    80012698:	d25ff0ef          	jal	ra,800123bc <set_taken>
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    8001269c:	fe843783          	ld	a5,-24(s0)
    800126a0:	0785                	addi	a5,a5,1
    800126a2:	fef43423          	sd	a5,-24(s0)
    800126a6:	07ffe717          	auipc	a4,0x7ffe
    800126aa:	95a70713          	addi	a4,a4,-1702 # 88010000 <_heap_end>
    800126ae:	00012797          	auipc	a5,0x12
    800126b2:	95278793          	addi	a5,a5,-1710 # 80024000 <_heap_start>
    800126b6:	40f707b3          	sub	a5,a4,a5
    800126ba:	00e7d713          	srli	a4,a5,0xe
    800126be:	6785                	lui	a5,0x1
    800126c0:	17fd                	addi	a5,a5,-1
    800126c2:	97ba                	add	a5,a5,a4
    800126c4:	83b1                	srli	a5,a5,0xc
    800126c6:	fe843703          	ld	a4,-24(s0)
    800126ca:	fcf765e3          	bltu	a4,a5,80012694 <page_init+0x6c>
    }
    set_last(BK_SIZE_IN_PAGES - 1);
    800126ce:	07ffe717          	auipc	a4,0x7ffe
    800126d2:	93270713          	addi	a4,a4,-1742 # 88010000 <_heap_end>
    800126d6:	00012797          	auipc	a5,0x12
    800126da:	92a78793          	addi	a5,a5,-1750 # 80024000 <_heap_start>
    800126de:	40f707b3          	sub	a5,a4,a5
    800126e2:	00e7d713          	srli	a4,a5,0xe
    800126e6:	6785                	lui	a5,0x1
    800126e8:	17fd                	addi	a5,a5,-1
    800126ea:	97ba                	add	a5,a5,a4
    800126ec:	83b1                	srli	a5,a5,0xc
    800126ee:	17fd                	addi	a5,a5,-1
    800126f0:	853e                	mv	a0,a5
    800126f2:	dfbff0ef          	jal	ra,800124ec <set_last>

    // Print out the bookkeeping area's contents
    mutex_unlock(&page_lock);
    800126f6:	00006517          	auipc	a0,0x6
    800126fa:	91250513          	addi	a0,a0,-1774 # 80018008 <page_lock>
    800126fe:	c2afe0ef          	jal	ra,80010b28 <mutex_unlock>

    logf(LOG_INFO, "Page Init: 0x%08lx -> 0x%08lx\n", bookkeeping, bookkeeping + BK_SIZE_IN_BYTES);
    80012702:	00006797          	auipc	a5,0x6
    80012706:	94e78793          	addi	a5,a5,-1714 # 80018050 <bookkeeping>
    8001270a:	6390                	ld	a2,0(a5)
    8001270c:	00006797          	auipc	a5,0x6
    80012710:	94478793          	addi	a5,a5,-1724 # 80018050 <bookkeeping>
    80012714:	6398                	ld	a4,0(a5)
    80012716:	07ffe697          	auipc	a3,0x7ffe
    8001271a:	8ea68693          	addi	a3,a3,-1814 # 88010000 <_heap_end>
    8001271e:	00012797          	auipc	a5,0x12
    80012722:	8e278793          	addi	a5,a5,-1822 # 80024000 <_heap_start>
    80012726:	40f687b3          	sub	a5,a3,a5
    8001272a:	00e7d693          	srli	a3,a5,0xe
    8001272e:	6785                	lui	a5,0x1
    80012730:	17fd                	addi	a5,a5,-1
    80012732:	96be                	add	a3,a3,a5
    80012734:	77fd                	lui	a5,0xfffff
    80012736:	8ff5                	and	a5,a5,a3
    80012738:	97ba                	add	a5,a5,a4
    8001273a:	86be                	mv	a3,a5
    8001273c:	00007597          	auipc	a1,0x7
    80012740:	f4458593          	addi	a1,a1,-188 # 80019680 <SYSCALLS+0x680>
    80012744:	4511                	li	a0,4
    80012746:	e12ff0ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  Heap size: 0x%lx bytes, %lu pages\n", HEAP_SIZE_IN_BYTES, HEAP_SIZE_IN_PAGES);
    8001274a:	07ffe717          	auipc	a4,0x7ffe
    8001274e:	8b670713          	addi	a4,a4,-1866 # 88010000 <_heap_end>
    80012752:	00012797          	auipc	a5,0x12
    80012756:	8ae78793          	addi	a5,a5,-1874 # 80024000 <_heap_start>
    8001275a:	40f70633          	sub	a2,a4,a5
    8001275e:	07ffe717          	auipc	a4,0x7ffe
    80012762:	8a270713          	addi	a4,a4,-1886 # 88010000 <_heap_end>
    80012766:	00012797          	auipc	a5,0x12
    8001276a:	89a78793          	addi	a5,a5,-1894 # 80024000 <_heap_start>
    8001276e:	40f707b3          	sub	a5,a4,a5
    80012772:	83b1                	srli	a5,a5,0xc
    80012774:	86be                	mv	a3,a5
    80012776:	00007597          	auipc	a1,0x7
    8001277a:	f2a58593          	addi	a1,a1,-214 # 800196a0 <SYSCALLS+0x6a0>
    8001277e:	4511                	li	a0,4
    80012780:	dd8ff0ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  Bookkeeping size: 0x%lx bytes, %lu pages\n", BK_SIZE_IN_BYTES, BK_SIZE_IN_PAGES);
    80012784:	07ffe717          	auipc	a4,0x7ffe
    80012788:	87c70713          	addi	a4,a4,-1924 # 88010000 <_heap_end>
    8001278c:	00012797          	auipc	a5,0x12
    80012790:	87478793          	addi	a5,a5,-1932 # 80024000 <_heap_start>
    80012794:	40f707b3          	sub	a5,a4,a5
    80012798:	00e7d713          	srli	a4,a5,0xe
    8001279c:	6785                	lui	a5,0x1
    8001279e:	17fd                	addi	a5,a5,-1
    800127a0:	973e                	add	a4,a4,a5
    800127a2:	77fd                	lui	a5,0xfffff
    800127a4:	00f77633          	and	a2,a4,a5
    800127a8:	07ffe717          	auipc	a4,0x7ffe
    800127ac:	85870713          	addi	a4,a4,-1960 # 88010000 <_heap_end>
    800127b0:	00012797          	auipc	a5,0x12
    800127b4:	85078793          	addi	a5,a5,-1968 # 80024000 <_heap_start>
    800127b8:	40f707b3          	sub	a5,a4,a5
    800127bc:	00e7d713          	srli	a4,a5,0xe
    800127c0:	6785                	lui	a5,0x1
    800127c2:	17fd                	addi	a5,a5,-1
    800127c4:	97ba                	add	a5,a5,a4
    800127c6:	83b1                	srli	a5,a5,0xc
    800127c8:	86be                	mv	a3,a5
    800127ca:	00007597          	auipc	a1,0x7
    800127ce:	efe58593          	addi	a1,a1,-258 # 800196c8 <SYSCALLS+0x6c8>
    800127d2:	4511                	li	a0,4
    800127d4:	d84ff0ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  Taken pages: %lu\n", page_count_taken());
    800127d8:	308000ef          	jal	ra,80012ae0 <page_count_taken>
    800127dc:	87aa                	mv	a5,a0
    800127de:	863e                	mv	a2,a5
    800127e0:	00007597          	auipc	a1,0x7
    800127e4:	f1858593          	addi	a1,a1,-232 # 800196f8 <SYSCALLS+0x6f8>
    800127e8:	4511                	li	a0,4
    800127ea:	d6eff0ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  Free pages: %lu\n", page_count_free());
    800127ee:	27c000ef          	jal	ra,80012a6a <page_count_free>
    800127f2:	87aa                	mv	a5,a0
    800127f4:	863e                	mv	a2,a5
    800127f6:	00007597          	auipc	a1,0x7
    800127fa:	f1a58593          	addi	a1,a1,-230 # 80019710 <SYSCALLS+0x710>
    800127fe:	4511                	li	a0,4
    80012800:	d58ff0ef          	jal	ra,80011d58 <logf>
    logf(LOG_INFO, "  Heap size: 0x%lx bytes, %lu pages\n", HEAP_SIZE_IN_BYTES, HEAP_SIZE_IN_PAGES);
    logf(LOG_INFO, "  Bookkeeping size: 0x%lx bytes, %lu pages\n", BK_SIZE_IN_BYTES, BK_SIZE_IN_PAGES);
    logf(LOG_INFO, "  Taken pages: %lu\n", page_count_taken());
    logf(LOG_INFO, "  Free pages: %lu\n", page_count_free());
    */
}
    80012804:	0001                	nop
    80012806:	60e2                	ld	ra,24(sp)
    80012808:	6442                	ld	s0,16(sp)
    8001280a:	6105                	addi	sp,sp,32
    8001280c:	8082                	ret

000000008001280e <page_nalloc>:

void *page_nalloc(int n)
{
    8001280e:	7139                	addi	sp,sp,-64
    80012810:	fc06                	sd	ra,56(sp)
    80012812:	f822                	sd	s0,48(sp)
    80012814:	0080                	addi	s0,sp,64
    80012816:	87aa                	mv	a5,a0
    80012818:	fcf42623          	sw	a5,-52(s0)
    if (n <= 0) {
    8001281c:	fcc42783          	lw	a5,-52(s0)
    80012820:	2781                	sext.w	a5,a5
    80012822:	00f04463          	bgtz	a5,8001282a <page_nalloc+0x1c>
        return NULL;
    80012826:	4781                	li	a5,0
    80012828:	aaa9                	j	80012982 <page_nalloc+0x174>
    }

    mutex_spinlock(&page_lock);
    8001282a:	00005517          	auipc	a0,0x5
    8001282e:	7de50513          	addi	a0,a0,2014 # 80018008 <page_lock>
    80012832:	ac8fe0ef          	jal	ra,80010afa <mutex_spinlock>

    int start = 0;
    80012836:	fe042623          	sw	zero,-20(s0)
    int consecutive = 0;
    8001283a:	fe042423          	sw	zero,-24(s0)

    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    8001283e:	fe043023          	sd	zero,-32(s0)
    80012842:	aa11                	j	80012956 <page_nalloc+0x148>
        if (!is_taken(i)) {
    80012844:	fe043503          	ld	a0,-32(s0)
    80012848:	c5dff0ef          	jal	ra,800124a4 <is_taken>
    8001284c:	87aa                	mv	a5,a0
    8001284e:	0e079563          	bnez	a5,80012938 <page_nalloc+0x12a>
            if (consecutive == 0) {
    80012852:	fe842783          	lw	a5,-24(s0)
    80012856:	2781                	sext.w	a5,a5
    80012858:	e789                	bnez	a5,80012862 <page_nalloc+0x54>
                start = i;
    8001285a:	fe043783          	ld	a5,-32(s0)
    8001285e:	fef42623          	sw	a5,-20(s0)
            }

            consecutive++;
    80012862:	fe842783          	lw	a5,-24(s0)
    80012866:	2785                	addiw	a5,a5,1
    80012868:	fef42423          	sw	a5,-24(s0)

            if (consecutive >= n) {
    8001286c:	fe842703          	lw	a4,-24(s0)
    80012870:	fcc42783          	lw	a5,-52(s0)
    80012874:	2701                	sext.w	a4,a4
    80012876:	2781                	sext.w	a5,a5
    80012878:	0cf74a63          	blt	a4,a5,8001294c <page_nalloc+0x13e>
                debugf("page_nalloc: found %d consecutive pages starting at 0x%08lx\n", n, start);
    8001287c:	fec42703          	lw	a4,-20(s0)
    80012880:	fcc42783          	lw	a5,-52(s0)
    80012884:	863a                	mv	a2,a4
    80012886:	85be                	mv	a1,a5
    80012888:	00007517          	auipc	a0,0x7
    8001288c:	ea050513          	addi	a0,a0,-352 # 80019728 <SYSCALLS+0x728>
    80012890:	d26ff0ef          	jal	ra,80011db6 <debugf>
                for (int j = 0; j < n; j++) {
    80012894:	fc042e23          	sw	zero,-36(s0)
    80012898:	a825                	j	800128d0 <page_nalloc+0xc2>
                    debugf("page_nalloc: marking page 0x%08lx as taken\n", start + j);
    8001289a:	fec42703          	lw	a4,-20(s0)
    8001289e:	fdc42783          	lw	a5,-36(s0)
    800128a2:	9fb9                	addw	a5,a5,a4
    800128a4:	2781                	sext.w	a5,a5
    800128a6:	85be                	mv	a1,a5
    800128a8:	00007517          	auipc	a0,0x7
    800128ac:	ec050513          	addi	a0,a0,-320 # 80019768 <SYSCALLS+0x768>
    800128b0:	d06ff0ef          	jal	ra,80011db6 <debugf>
                    set_taken(start + j);
    800128b4:	fec42703          	lw	a4,-20(s0)
    800128b8:	fdc42783          	lw	a5,-36(s0)
    800128bc:	9fb9                	addw	a5,a5,a4
    800128be:	2781                	sext.w	a5,a5
    800128c0:	853e                	mv	a0,a5
    800128c2:	afbff0ef          	jal	ra,800123bc <set_taken>
                for (int j = 0; j < n; j++) {
    800128c6:	fdc42783          	lw	a5,-36(s0)
    800128ca:	2785                	addiw	a5,a5,1
    800128cc:	fcf42e23          	sw	a5,-36(s0)
    800128d0:	fdc42703          	lw	a4,-36(s0)
    800128d4:	fcc42783          	lw	a5,-52(s0)
    800128d8:	2701                	sext.w	a4,a4
    800128da:	2781                	sext.w	a5,a5
    800128dc:	faf74fe3          	blt	a4,a5,8001289a <page_nalloc+0x8c>
                }
                debugf("page_nalloc: marking page 0x%08lx as last\n", start + n - 1);
    800128e0:	fec42703          	lw	a4,-20(s0)
    800128e4:	fcc42783          	lw	a5,-52(s0)
    800128e8:	9fb9                	addw	a5,a5,a4
    800128ea:	2781                	sext.w	a5,a5
    800128ec:	37fd                	addiw	a5,a5,-1
    800128ee:	2781                	sext.w	a5,a5
    800128f0:	85be                	mv	a1,a5
    800128f2:	00007517          	auipc	a0,0x7
    800128f6:	ea650513          	addi	a0,a0,-346 # 80019798 <SYSCALLS+0x798>
    800128fa:	cbcff0ef          	jal	ra,80011db6 <debugf>
                set_last(start + n - 1);
    800128fe:	fec42703          	lw	a4,-20(s0)
    80012902:	fcc42783          	lw	a5,-52(s0)
    80012906:	9fb9                	addw	a5,a5,a4
    80012908:	2781                	sext.w	a5,a5
    8001290a:	37fd                	addiw	a5,a5,-1
    8001290c:	2781                	sext.w	a5,a5
    8001290e:	853e                	mv	a0,a5
    80012910:	bddff0ef          	jal	ra,800124ec <set_last>

                mutex_unlock(&page_lock);
    80012914:	00005517          	auipc	a0,0x5
    80012918:	6f450513          	addi	a0,a0,1780 # 80018008 <page_lock>
    8001291c:	a0cfe0ef          	jal	ra,80010b28 <mutex_unlock>
                return (void *)(bookkeeping + start * PAGE_SIZE);
    80012920:	00005797          	auipc	a5,0x5
    80012924:	73078793          	addi	a5,a5,1840 # 80018050 <bookkeeping>
    80012928:	639c                	ld	a5,0(a5)
    8001292a:	fec42703          	lw	a4,-20(s0)
    8001292e:	00c7171b          	slliw	a4,a4,0xc
    80012932:	2701                	sext.w	a4,a4
    80012934:	97ba                	add	a5,a5,a4
    80012936:	a0b1                	j	80012982 <page_nalloc+0x174>
            }
        } else {
            debugf("page_nalloc: page 0x%08lx is taken\n", i);
    80012938:	fe043583          	ld	a1,-32(s0)
    8001293c:	00007517          	auipc	a0,0x7
    80012940:	e8c50513          	addi	a0,a0,-372 # 800197c8 <SYSCALLS+0x7c8>
    80012944:	c72ff0ef          	jal	ra,80011db6 <debugf>
            consecutive = 0;
    80012948:	fe042423          	sw	zero,-24(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    8001294c:	fe043783          	ld	a5,-32(s0)
    80012950:	0785                	addi	a5,a5,1
    80012952:	fef43023          	sd	a5,-32(s0)
    80012956:	07ffd717          	auipc	a4,0x7ffd
    8001295a:	6aa70713          	addi	a4,a4,1706 # 88010000 <_heap_end>
    8001295e:	00011797          	auipc	a5,0x11
    80012962:	6a278793          	addi	a5,a5,1698 # 80024000 <_heap_start>
    80012966:	40f707b3          	sub	a5,a4,a5
    8001296a:	83b1                	srli	a5,a5,0xc
    8001296c:	fe043703          	ld	a4,-32(s0)
    80012970:	ecf76ae3          	bltu	a4,a5,80012844 <page_nalloc+0x36>
        }
    }

    mutex_unlock(&page_lock);
    80012974:	00005517          	auipc	a0,0x5
    80012978:	69450513          	addi	a0,a0,1684 # 80018008 <page_lock>
    8001297c:	9acfe0ef          	jal	ra,80010b28 <mutex_unlock>
    return NULL;
    80012980:	4781                	li	a5,0
}
    80012982:	853e                	mv	a0,a5
    80012984:	70e2                	ld	ra,56(sp)
    80012986:	7442                	ld	s0,48(sp)
    80012988:	6121                	addi	sp,sp,64
    8001298a:	8082                	ret

000000008001298c <page_znalloc>:

void *page_znalloc(int n)
{
    8001298c:	1101                	addi	sp,sp,-32
    8001298e:	ec22                	sd	s0,24(sp)
    80012990:	1000                	addi	s0,sp,32
    80012992:	87aa                	mv	a5,a0
    80012994:	fef42623          	sw	a5,-20(s0)
    return NULL;
    80012998:	4781                	li	a5,0
    void *mem = page_nalloc(n);
    if (mem) {
        memset(mem, 0, n * PAGE_SIZE);
    }
    return mem;
}
    8001299a:	853e                	mv	a0,a5
    8001299c:	6462                	ld	s0,24(sp)
    8001299e:	6105                	addi	sp,sp,32
    800129a0:	8082                	ret

00000000800129a2 <page_free>:

void page_free(void *p)
{
    800129a2:	7179                	addi	sp,sp,-48
    800129a4:	f406                	sd	ra,40(sp)
    800129a6:	f022                	sd	s0,32(sp)
    800129a8:	1800                	addi	s0,sp,48
    800129aa:	fca43c23          	sd	a0,-40(s0)
    if (p == NULL) {
    800129ae:	fd843783          	ld	a5,-40(s0)
    800129b2:	c7dd                	beqz	a5,80012a60 <page_free+0xbe>
        return;
    }
    /* Free the page */
    uint64_t x = ((uint64_t)p - (uint64_t)bookkeeping) / PAGE_SIZE;
    800129b4:	fd843783          	ld	a5,-40(s0)
    800129b8:	00005717          	auipc	a4,0x5
    800129bc:	69870713          	addi	a4,a4,1688 # 80018050 <bookkeeping>
    800129c0:	6318                	ld	a4,0(a4)
    800129c2:	8f99                	sub	a5,a5,a4
    800129c4:	83b1                	srli	a5,a5,0xc
    800129c6:	fef43423          	sd	a5,-24(s0)
    logf(LOG_INFO, "page_free: freeing page %lu at address 0x%p\n", x, p);
    800129ca:	fd843683          	ld	a3,-40(s0)
    800129ce:	fe843603          	ld	a2,-24(s0)
    800129d2:	00007597          	auipc	a1,0x7
    800129d6:	e1e58593          	addi	a1,a1,-482 # 800197f0 <SYSCALLS+0x7f0>
    800129da:	4511                	li	a0,4
    800129dc:	b7cff0ef          	jal	ra,80011d58 <logf>

    mutex_spinlock(&page_lock);
    800129e0:	00005517          	auipc	a0,0x5
    800129e4:	62850513          	addi	a0,a0,1576 # 80018008 <page_lock>
    800129e8:	912fe0ef          	jal	ra,80010afa <mutex_spinlock>


    if (!is_taken(x)) {
    800129ec:	fe843503          	ld	a0,-24(s0)
    800129f0:	ab5ff0ef          	jal	ra,800124a4 <is_taken>
    800129f4:	87aa                	mv	a5,a0
    800129f6:	eb95                	bnez	a5,80012a2a <page_free+0x88>
        logf(LOG_ERROR, "page_free: page 0x%08lx is already free!\n", x);
    800129f8:	fe843603          	ld	a2,-24(s0)
    800129fc:	00007597          	auipc	a1,0x7
    80012a00:	e2458593          	addi	a1,a1,-476 # 80019820 <SYSCALLS+0x820>
    80012a04:	4505                	li	a0,1
    80012a06:	b52ff0ef          	jal	ra,80011d58 <logf>
        mutex_unlock(&page_lock);
    80012a0a:	00005517          	auipc	a0,0x5
    80012a0e:	5fe50513          	addi	a0,a0,1534 # 80018008 <page_lock>
    80012a12:	916fe0ef          	jal	ra,80010b28 <mutex_unlock>
        return;
    80012a16:	a0b1                	j	80012a62 <page_free+0xc0>
    }

    // Clear all the pages starting at the index until the last page
    while (is_taken(x) && !is_last(x)) {
        clear_taken(x);
    80012a18:	fe843503          	ld	a0,-24(s0)
    80012a1c:	a0fff0ef          	jal	ra,8001242a <clear_taken>
        x++;
    80012a20:	fe843783          	ld	a5,-24(s0)
    80012a24:	0785                	addi	a5,a5,1
    80012a26:	fef43423          	sd	a5,-24(s0)
    while (is_taken(x) && !is_last(x)) {
    80012a2a:	fe843503          	ld	a0,-24(s0)
    80012a2e:	a77ff0ef          	jal	ra,800124a4 <is_taken>
    80012a32:	87aa                	mv	a5,a0
    80012a34:	c799                	beqz	a5,80012a42 <page_free+0xa0>
    80012a36:	fe843503          	ld	a0,-24(s0)
    80012a3a:	ba3ff0ef          	jal	ra,800125dc <is_last>
    80012a3e:	87aa                	mv	a5,a0
    80012a40:	dfe1                	beqz	a5,80012a18 <page_free+0x76>
    }
    clear_taken(x);
    80012a42:	fe843503          	ld	a0,-24(s0)
    80012a46:	9e5ff0ef          	jal	ra,8001242a <clear_taken>
    clear_last(x);
    80012a4a:	fe843503          	ld	a0,-24(s0)
    80012a4e:	b11ff0ef          	jal	ra,8001255e <clear_last>


    mutex_unlock(&page_lock);
    80012a52:	00005517          	auipc	a0,0x5
    80012a56:	5b650513          	addi	a0,a0,1462 # 80018008 <page_lock>
    80012a5a:	8cefe0ef          	jal	ra,80010b28 <mutex_unlock>
    80012a5e:	a011                	j	80012a62 <page_free+0xc0>
        return;
    80012a60:	0001                	nop
}
    80012a62:	70a2                	ld	ra,40(sp)
    80012a64:	7402                	ld	s0,32(sp)
    80012a66:	6145                	addi	sp,sp,48
    80012a68:	8082                	ret

0000000080012a6a <page_count_free>:

int page_count_free(void)
{
    80012a6a:	1101                	addi	sp,sp,-32
    80012a6c:	ec06                	sd	ra,24(sp)
    80012a6e:	e822                	sd	s0,16(sp)
    80012a70:	1000                	addi	s0,sp,32
    int ret = 0;
    80012a72:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract taken. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract taken pages from it.
    */

    mutex_spinlock(&page_lock);
    80012a76:	00005517          	auipc	a0,0x5
    80012a7a:	59250513          	addi	a0,a0,1426 # 80018008 <page_lock>
    80012a7e:	87cfe0ef          	jal	ra,80010afa <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80012a82:	fe043023          	sd	zero,-32(s0)
    80012a86:	a00d                	j	80012aa8 <page_count_free+0x3e>
       if (!is_taken(i)) {
    80012a88:	fe043503          	ld	a0,-32(s0)
    80012a8c:	a19ff0ef          	jal	ra,800124a4 <is_taken>
    80012a90:	87aa                	mv	a5,a0
    80012a92:	e791                	bnez	a5,80012a9e <page_count_free+0x34>
           ret++;
    80012a94:	fec42783          	lw	a5,-20(s0)
    80012a98:	2785                	addiw	a5,a5,1
    80012a9a:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80012a9e:	fe043783          	ld	a5,-32(s0)
    80012aa2:	0785                	addi	a5,a5,1
    80012aa4:	fef43023          	sd	a5,-32(s0)
    80012aa8:	07ffd717          	auipc	a4,0x7ffd
    80012aac:	55870713          	addi	a4,a4,1368 # 88010000 <_heap_end>
    80012ab0:	00011797          	auipc	a5,0x11
    80012ab4:	55078793          	addi	a5,a5,1360 # 80024000 <_heap_start>
    80012ab8:	40f707b3          	sub	a5,a4,a5
    80012abc:	83b1                	srli	a5,a5,0xc
    80012abe:	fe043703          	ld	a4,-32(s0)
    80012ac2:	fcf763e3          	bltu	a4,a5,80012a88 <page_count_free+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80012ac6:	00005517          	auipc	a0,0x5
    80012aca:	54250513          	addi	a0,a0,1346 # 80018008 <page_lock>
    80012ace:	85afe0ef          	jal	ra,80010b28 <mutex_unlock>

    return ret;
    80012ad2:	fec42783          	lw	a5,-20(s0)
}
    80012ad6:	853e                	mv	a0,a5
    80012ad8:	60e2                	ld	ra,24(sp)
    80012ada:	6442                	ld	s0,16(sp)
    80012adc:	6105                	addi	sp,sp,32
    80012ade:	8082                	ret

0000000080012ae0 <page_count_taken>:

int page_count_taken(void)
{
    80012ae0:	1101                	addi	sp,sp,-32
    80012ae2:	ec06                	sd	ra,24(sp)
    80012ae4:	e822                	sd	s0,16(sp)
    80012ae6:	1000                	addi	s0,sp,32
    int ret = 0;
    80012ae8:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract free. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract free pages from it.
    */

    mutex_spinlock(&page_lock);
    80012aec:	00005517          	auipc	a0,0x5
    80012af0:	51c50513          	addi	a0,a0,1308 # 80018008 <page_lock>
    80012af4:	806fe0ef          	jal	ra,80010afa <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80012af8:	fe043023          	sd	zero,-32(s0)
    80012afc:	a00d                	j	80012b1e <page_count_taken+0x3e>
       if (is_taken(i)) {
    80012afe:	fe043503          	ld	a0,-32(s0)
    80012b02:	9a3ff0ef          	jal	ra,800124a4 <is_taken>
    80012b06:	87aa                	mv	a5,a0
    80012b08:	c791                	beqz	a5,80012b14 <page_count_taken+0x34>
           ret++;
    80012b0a:	fec42783          	lw	a5,-20(s0)
    80012b0e:	2785                	addiw	a5,a5,1
    80012b10:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80012b14:	fe043783          	ld	a5,-32(s0)
    80012b18:	0785                	addi	a5,a5,1
    80012b1a:	fef43023          	sd	a5,-32(s0)
    80012b1e:	07ffd717          	auipc	a4,0x7ffd
    80012b22:	4e270713          	addi	a4,a4,1250 # 88010000 <_heap_end>
    80012b26:	00011797          	auipc	a5,0x11
    80012b2a:	4da78793          	addi	a5,a5,1242 # 80024000 <_heap_start>
    80012b2e:	40f707b3          	sub	a5,a4,a5
    80012b32:	83b1                	srli	a5,a5,0xc
    80012b34:	fe043703          	ld	a4,-32(s0)
    80012b38:	fcf763e3          	bltu	a4,a5,80012afe <page_count_taken+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80012b3c:	00005517          	auipc	a0,0x5
    80012b40:	4cc50513          	addi	a0,a0,1228 # 80018008 <page_lock>
    80012b44:	fe5fd0ef          	jal	ra,80010b28 <mutex_unlock>

    return ret;
    80012b48:	fec42783          	lw	a5,-20(s0)
    80012b4c:	853e                	mv	a0,a5
    80012b4e:	60e2                	ld	ra,24(sp)
    80012b50:	6442                	ld	s0,16(sp)
    80012b52:	6105                	addi	sp,sp,32
    80012b54:	8082                	ret

0000000080012b56 <_putchar>:
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>

#include "sbi.h"
void _putchar(char c) { sbi_putchar(c); }
    80012b56:	1101                	addi	sp,sp,-32
    80012b58:	ec06                	sd	ra,24(sp)
    80012b5a:	e822                	sd	s0,16(sp)
    80012b5c:	1000                	addi	s0,sp,32
    80012b5e:	87aa                	mv	a5,a0
    80012b60:	fef407a3          	sb	a5,-17(s0)
    80012b64:	fef44783          	lbu	a5,-17(s0)
    80012b68:	853e                	mv	a0,a5
    80012b6a:	b64ff0ef          	jal	ra,80011ece <sbi_putchar>
    80012b6e:	0001                	nop
    80012b70:	60e2                	ld	ra,24(sp)
    80012b72:	6442                	ld	s0,16(sp)
    80012b74:	6105                	addi	sp,sp,32
    80012b76:	8082                	ret

0000000080012b78 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void *buffer, size_t idx,
                               size_t maxlen)
{
    80012b78:	7179                	addi	sp,sp,-48
    80012b7a:	f422                	sd	s0,40(sp)
    80012b7c:	1800                	addi	s0,sp,48
    80012b7e:	87aa                	mv	a5,a0
    80012b80:	feb43023          	sd	a1,-32(s0)
    80012b84:	fcc43c23          	sd	a2,-40(s0)
    80012b88:	fcd43823          	sd	a3,-48(s0)
    80012b8c:	fef407a3          	sb	a5,-17(s0)
    if (idx < maxlen) {
    80012b90:	fd843703          	ld	a4,-40(s0)
    80012b94:	fd043783          	ld	a5,-48(s0)
    80012b98:	00f77b63          	bgeu	a4,a5,80012bae <_out_buffer+0x36>
        ((char *)buffer)[idx] = character;
    80012b9c:	fe043703          	ld	a4,-32(s0)
    80012ba0:	fd843783          	ld	a5,-40(s0)
    80012ba4:	97ba                	add	a5,a5,a4
    80012ba6:	fef44703          	lbu	a4,-17(s0)
    80012baa:	00e78023          	sb	a4,0(a5)
    }
}
    80012bae:	0001                	nop
    80012bb0:	7422                	ld	s0,40(sp)
    80012bb2:	6145                	addi	sp,sp,48
    80012bb4:	8082                	ret

0000000080012bb6 <_out_null>:

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    80012bb6:	7179                	addi	sp,sp,-48
    80012bb8:	f422                	sd	s0,40(sp)
    80012bba:	1800                	addi	s0,sp,48
    80012bbc:	87aa                	mv	a5,a0
    80012bbe:	feb43023          	sd	a1,-32(s0)
    80012bc2:	fcc43c23          	sd	a2,-40(s0)
    80012bc6:	fcd43823          	sd	a3,-48(s0)
    80012bca:	fef407a3          	sb	a5,-17(s0)
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
    80012bce:	0001                	nop
    80012bd0:	7422                	ld	s0,40(sp)
    80012bd2:	6145                	addi	sp,sp,48
    80012bd4:	8082                	ret

0000000080012bd6 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    80012bd6:	7179                	addi	sp,sp,-48
    80012bd8:	f406                	sd	ra,40(sp)
    80012bda:	f022                	sd	s0,32(sp)
    80012bdc:	1800                	addi	s0,sp,48
    80012bde:	87aa                	mv	a5,a0
    80012be0:	feb43023          	sd	a1,-32(s0)
    80012be4:	fcc43c23          	sd	a2,-40(s0)
    80012be8:	fcd43823          	sd	a3,-48(s0)
    80012bec:	fef407a3          	sb	a5,-17(s0)
    (void)buffer;
    (void)idx;
    (void)maxlen;
    if (character) {
    80012bf0:	fef44783          	lbu	a5,-17(s0)
    80012bf4:	0ff7f793          	andi	a5,a5,255
    80012bf8:	c791                	beqz	a5,80012c04 <_out_char+0x2e>
        _putchar(character);
    80012bfa:	fef44783          	lbu	a5,-17(s0)
    80012bfe:	853e                	mv	a0,a5
    80012c00:	f57ff0ef          	jal	ra,80012b56 <_putchar>
    }
}
    80012c04:	0001                	nop
    80012c06:	70a2                	ld	ra,40(sp)
    80012c08:	7402                	ld	s0,32(sp)
    80012c0a:	6145                	addi	sp,sp,48
    80012c0c:	8082                	ret

0000000080012c0e <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx,
                            size_t maxlen)
{
    80012c0e:	7179                	addi	sp,sp,-48
    80012c10:	f406                	sd	ra,40(sp)
    80012c12:	f022                	sd	s0,32(sp)
    80012c14:	1800                	addi	s0,sp,48
    80012c16:	87aa                	mv	a5,a0
    80012c18:	feb43023          	sd	a1,-32(s0)
    80012c1c:	fcc43c23          	sd	a2,-40(s0)
    80012c20:	fcd43823          	sd	a3,-48(s0)
    80012c24:	fef407a3          	sb	a5,-17(s0)
    (void)idx;
    (void)maxlen;
    if (character) {
    80012c28:	fef44783          	lbu	a5,-17(s0)
    80012c2c:	0ff7f793          	andi	a5,a5,255
    80012c30:	cf81                	beqz	a5,80012c48 <_out_fct+0x3a>
        // buffer is the output fct pointer
        ((out_fct_wrap_type *)buffer)
            ->fct(character, ((out_fct_wrap_type *)buffer)->arg);
    80012c32:	fe043783          	ld	a5,-32(s0)
    80012c36:	6394                	ld	a3,0(a5)
        ((out_fct_wrap_type *)buffer)
    80012c38:	fe043783          	ld	a5,-32(s0)
    80012c3c:	6798                	ld	a4,8(a5)
    80012c3e:	fef44783          	lbu	a5,-17(s0)
    80012c42:	85ba                	mv	a1,a4
    80012c44:	853e                	mv	a0,a5
    80012c46:	9682                	jalr	a3
    }
}
    80012c48:	0001                	nop
    80012c4a:	70a2                	ld	ra,40(sp)
    80012c4c:	7402                	ld	s0,32(sp)
    80012c4e:	6145                	addi	sp,sp,48
    80012c50:	8082                	ret

0000000080012c52 <_strnlen_s>:

// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by
// 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize)
{
    80012c52:	7179                	addi	sp,sp,-48
    80012c54:	f422                	sd	s0,40(sp)
    80012c56:	1800                	addi	s0,sp,48
    80012c58:	fca43c23          	sd	a0,-40(s0)
    80012c5c:	fcb43823          	sd	a1,-48(s0)
    const char *s;
    for (s = str; *s && maxsize--; ++s)
    80012c60:	fd843783          	ld	a5,-40(s0)
    80012c64:	fef43423          	sd	a5,-24(s0)
    80012c68:	a031                	j	80012c74 <_strnlen_s+0x22>
    80012c6a:	fe843783          	ld	a5,-24(s0)
    80012c6e:	0785                	addi	a5,a5,1
    80012c70:	fef43423          	sd	a5,-24(s0)
    80012c74:	fe843783          	ld	a5,-24(s0)
    80012c78:	0007c783          	lbu	a5,0(a5)
    80012c7c:	cb81                	beqz	a5,80012c8c <_strnlen_s+0x3a>
    80012c7e:	fd043783          	ld	a5,-48(s0)
    80012c82:	fff78713          	addi	a4,a5,-1
    80012c86:	fce43823          	sd	a4,-48(s0)
    80012c8a:	f3e5                	bnez	a5,80012c6a <_strnlen_s+0x18>
        ;
    return (unsigned int)(s - str);
    80012c8c:	fe843703          	ld	a4,-24(s0)
    80012c90:	fd843783          	ld	a5,-40(s0)
    80012c94:	40f707b3          	sub	a5,a4,a5
    80012c98:	2781                	sext.w	a5,a5
}
    80012c9a:	853e                	mv	a0,a5
    80012c9c:	7422                	ld	s0,40(sp)
    80012c9e:	6145                	addi	sp,sp,48
    80012ca0:	8082                	ret

0000000080012ca2 <_is_digit>:

// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
    80012ca2:	1101                	addi	sp,sp,-32
    80012ca4:	ec22                	sd	s0,24(sp)
    80012ca6:	1000                	addi	s0,sp,32
    80012ca8:	87aa                	mv	a5,a0
    80012caa:	fef407a3          	sb	a5,-17(s0)
    80012cae:	fef44783          	lbu	a5,-17(s0)
    80012cb2:	0ff7f713          	andi	a4,a5,255
    80012cb6:	02f00793          	li	a5,47
    80012cba:	00e7fc63          	bgeu	a5,a4,80012cd2 <_is_digit+0x30>
    80012cbe:	fef44783          	lbu	a5,-17(s0)
    80012cc2:	0ff7f713          	andi	a4,a5,255
    80012cc6:	03900793          	li	a5,57
    80012cca:	00e7e463          	bltu	a5,a4,80012cd2 <_is_digit+0x30>
    80012cce:	4785                	li	a5,1
    80012cd0:	a011                	j	80012cd4 <_is_digit+0x32>
    80012cd2:	4781                	li	a5,0
    80012cd4:	8b85                	andi	a5,a5,1
    80012cd6:	0ff7f793          	andi	a5,a5,255
    80012cda:	853e                	mv	a0,a5
    80012cdc:	6462                	ld	s0,24(sp)
    80012cde:	6105                	addi	sp,sp,32
    80012ce0:	8082                	ret

0000000080012ce2 <_atoi>:

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str)
{
    80012ce2:	7179                	addi	sp,sp,-48
    80012ce4:	f406                	sd	ra,40(sp)
    80012ce6:	f022                	sd	s0,32(sp)
    80012ce8:	1800                	addi	s0,sp,48
    80012cea:	fca43c23          	sd	a0,-40(s0)
    unsigned int i = 0U;
    80012cee:	fe042623          	sw	zero,-20(s0)
    while (_is_digit(**str)) {
    80012cf2:	a825                	j	80012d2a <_atoi+0x48>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
    80012cf4:	fec42703          	lw	a4,-20(s0)
    80012cf8:	87ba                	mv	a5,a4
    80012cfa:	0027979b          	slliw	a5,a5,0x2
    80012cfe:	9fb9                	addw	a5,a5,a4
    80012d00:	0017979b          	slliw	a5,a5,0x1
    80012d04:	0007871b          	sext.w	a4,a5
    80012d08:	fd843783          	ld	a5,-40(s0)
    80012d0c:	639c                	ld	a5,0(a5)
    80012d0e:	00178613          	addi	a2,a5,1
    80012d12:	fd843683          	ld	a3,-40(s0)
    80012d16:	e290                	sd	a2,0(a3)
    80012d18:	0007c783          	lbu	a5,0(a5)
    80012d1c:	2781                	sext.w	a5,a5
    80012d1e:	9fb9                	addw	a5,a5,a4
    80012d20:	2781                	sext.w	a5,a5
    80012d22:	fd07879b          	addiw	a5,a5,-48
    80012d26:	fef42623          	sw	a5,-20(s0)
    while (_is_digit(**str)) {
    80012d2a:	fd843783          	ld	a5,-40(s0)
    80012d2e:	639c                	ld	a5,0(a5)
    80012d30:	0007c783          	lbu	a5,0(a5)
    80012d34:	853e                	mv	a0,a5
    80012d36:	f6dff0ef          	jal	ra,80012ca2 <_is_digit>
    80012d3a:	87aa                	mv	a5,a0
    80012d3c:	ffc5                	bnez	a5,80012cf4 <_atoi+0x12>
    }
    return i;
    80012d3e:	fec42783          	lw	a5,-20(s0)
}
    80012d42:	853e                	mv	a0,a5
    80012d44:	70a2                	ld	ra,40(sp)
    80012d46:	7402                	ld	s0,32(sp)
    80012d48:	6145                	addi	sp,sp,48
    80012d4a:	8082                	ret

0000000080012d4c <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx,
                       size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags)
{
    80012d4c:	711d                	addi	sp,sp,-96
    80012d4e:	ec86                	sd	ra,88(sp)
    80012d50:	e8a2                	sd	s0,80(sp)
    80012d52:	1080                	addi	s0,sp,96
    80012d54:	fca43c23          	sd	a0,-40(s0)
    80012d58:	fcb43823          	sd	a1,-48(s0)
    80012d5c:	fcc43423          	sd	a2,-56(s0)
    80012d60:	fcd43023          	sd	a3,-64(s0)
    80012d64:	fae43c23          	sd	a4,-72(s0)
    80012d68:	faf43823          	sd	a5,-80(s0)
    80012d6c:	87c2                	mv	a5,a6
    80012d6e:	8746                	mv	a4,a7
    80012d70:	faf42623          	sw	a5,-84(s0)
    80012d74:	87ba                	mv	a5,a4
    80012d76:	faf42423          	sw	a5,-88(s0)
    const size_t start_idx = idx;
    80012d7a:	fc843783          	ld	a5,-56(s0)
    80012d7e:	fef43023          	sd	a5,-32(s0)

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    80012d82:	fa842783          	lw	a5,-88(s0)
    80012d86:	8b89                	andi	a5,a5,2
    80012d88:	2781                	sext.w	a5,a5
    80012d8a:	e3c9                	bnez	a5,80012e0c <_out_rev+0xc0>
    80012d8c:	fa842783          	lw	a5,-88(s0)
    80012d90:	8b85                	andi	a5,a5,1
    80012d92:	2781                	sext.w	a5,a5
    80012d94:	efa5                	bnez	a5,80012e0c <_out_rev+0xc0>
        for (size_t i = len; i < width; i++) {
    80012d96:	fb043783          	ld	a5,-80(s0)
    80012d9a:	fef43423          	sd	a5,-24(s0)
    80012d9e:	a035                	j	80012dca <_out_rev+0x7e>
            out(' ', buffer, idx++, maxlen);
    80012da0:	fc843783          	ld	a5,-56(s0)
    80012da4:	00178713          	addi	a4,a5,1
    80012da8:	fce43423          	sd	a4,-56(s0)
    80012dac:	fd843703          	ld	a4,-40(s0)
    80012db0:	fc043683          	ld	a3,-64(s0)
    80012db4:	863e                	mv	a2,a5
    80012db6:	fd043583          	ld	a1,-48(s0)
    80012dba:	02000513          	li	a0,32
    80012dbe:	9702                	jalr	a4
        for (size_t i = len; i < width; i++) {
    80012dc0:	fe843783          	ld	a5,-24(s0)
    80012dc4:	0785                	addi	a5,a5,1
    80012dc6:	fef43423          	sd	a5,-24(s0)
    80012dca:	fac46783          	lwu	a5,-84(s0)
    80012dce:	fe843703          	ld	a4,-24(s0)
    80012dd2:	fcf767e3          	bltu	a4,a5,80012da0 <_out_rev+0x54>
        }
    }

    // reverse string
    while (len) {
    80012dd6:	a81d                	j	80012e0c <_out_rev+0xc0>
        out(buf[--len], buffer, idx++, maxlen);
    80012dd8:	fb043783          	ld	a5,-80(s0)
    80012ddc:	17fd                	addi	a5,a5,-1
    80012dde:	faf43823          	sd	a5,-80(s0)
    80012de2:	fb843703          	ld	a4,-72(s0)
    80012de6:	fb043783          	ld	a5,-80(s0)
    80012dea:	97ba                	add	a5,a5,a4
    80012dec:	0007c503          	lbu	a0,0(a5)
    80012df0:	fc843783          	ld	a5,-56(s0)
    80012df4:	00178713          	addi	a4,a5,1
    80012df8:	fce43423          	sd	a4,-56(s0)
    80012dfc:	fd843703          	ld	a4,-40(s0)
    80012e00:	fc043683          	ld	a3,-64(s0)
    80012e04:	863e                	mv	a2,a5
    80012e06:	fd043583          	ld	a1,-48(s0)
    80012e0a:	9702                	jalr	a4
    while (len) {
    80012e0c:	fb043783          	ld	a5,-80(s0)
    80012e10:	f7e1                	bnez	a5,80012dd8 <_out_rev+0x8c>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
    80012e12:	fa842783          	lw	a5,-88(s0)
    80012e16:	8b89                	andi	a5,a5,2
    80012e18:	2781                	sext.w	a5,a5
    80012e1a:	cb9d                	beqz	a5,80012e50 <_out_rev+0x104>
        while (idx - start_idx < width) {
    80012e1c:	a00d                	j	80012e3e <_out_rev+0xf2>
            out(' ', buffer, idx++, maxlen);
    80012e1e:	fc843783          	ld	a5,-56(s0)
    80012e22:	00178713          	addi	a4,a5,1
    80012e26:	fce43423          	sd	a4,-56(s0)
    80012e2a:	fd843703          	ld	a4,-40(s0)
    80012e2e:	fc043683          	ld	a3,-64(s0)
    80012e32:	863e                	mv	a2,a5
    80012e34:	fd043583          	ld	a1,-48(s0)
    80012e38:	02000513          	li	a0,32
    80012e3c:	9702                	jalr	a4
        while (idx - start_idx < width) {
    80012e3e:	fc843703          	ld	a4,-56(s0)
    80012e42:	fe043783          	ld	a5,-32(s0)
    80012e46:	8f1d                	sub	a4,a4,a5
    80012e48:	fac46783          	lwu	a5,-84(s0)
    80012e4c:	fcf769e3          	bltu	a4,a5,80012e1e <_out_rev+0xd2>
        }
    }

    return idx;
    80012e50:	fc843783          	ld	a5,-56(s0)
}
    80012e54:	853e                	mv	a0,a5
    80012e56:	60e6                	ld	ra,88(sp)
    80012e58:	6446                	ld	s0,80(sp)
    80012e5a:	6125                	addi	sp,sp,96
    80012e5c:	8082                	ret

0000000080012e5e <_ntoa_format>:
// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx,
                           size_t maxlen, char *buf, size_t len, bool negative,
                           unsigned int base, unsigned int prec,
                           unsigned int width, unsigned int flags)
{
    80012e5e:	715d                	addi	sp,sp,-80
    80012e60:	e486                	sd	ra,72(sp)
    80012e62:	e0a2                	sd	s0,64(sp)
    80012e64:	0880                	addi	s0,sp,80
    80012e66:	fea43423          	sd	a0,-24(s0)
    80012e6a:	feb43023          	sd	a1,-32(s0)
    80012e6e:	fcc43c23          	sd	a2,-40(s0)
    80012e72:	fcd43823          	sd	a3,-48(s0)
    80012e76:	fce43423          	sd	a4,-56(s0)
    80012e7a:	fcf43023          	sd	a5,-64(s0)
    80012e7e:	87c2                	mv	a5,a6
    80012e80:	8746                	mv	a4,a7
    80012e82:	faf40fa3          	sb	a5,-65(s0)
    80012e86:	87ba                	mv	a5,a4
    80012e88:	faf42c23          	sw	a5,-72(s0)
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
    80012e8c:	481c                	lw	a5,16(s0)
    80012e8e:	8b89                	andi	a5,a5,2
    80012e90:	2781                	sext.w	a5,a5
    80012e92:	ebd1                	bnez	a5,80012f26 <_ntoa_format+0xc8>
        if (width && (flags & FLAGS_ZEROPAD) &&
    80012e94:	441c                	lw	a5,8(s0)
    80012e96:	2781                	sext.w	a5,a5
    80012e98:	cf9d                	beqz	a5,80012ed6 <_ntoa_format+0x78>
    80012e9a:	481c                	lw	a5,16(s0)
    80012e9c:	8b85                	andi	a5,a5,1
    80012e9e:	2781                	sext.w	a5,a5
    80012ea0:	cb9d                	beqz	a5,80012ed6 <_ntoa_format+0x78>
    80012ea2:	fbf44783          	lbu	a5,-65(s0)
    80012ea6:	0ff7f793          	andi	a5,a5,255
    80012eaa:	e789                	bnez	a5,80012eb4 <_ntoa_format+0x56>
            (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    80012eac:	481c                	lw	a5,16(s0)
    80012eae:	8bb1                	andi	a5,a5,12
    80012eb0:	2781                	sext.w	a5,a5
    80012eb2:	c395                	beqz	a5,80012ed6 <_ntoa_format+0x78>
            width--;
    80012eb4:	441c                	lw	a5,8(s0)
    80012eb6:	37fd                	addiw	a5,a5,-1
    80012eb8:	c41c                	sw	a5,8(s0)
        }
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80012eba:	a831                	j	80012ed6 <_ntoa_format+0x78>
            buf[len++] = '0';
    80012ebc:	fc043783          	ld	a5,-64(s0)
    80012ec0:	00178713          	addi	a4,a5,1
    80012ec4:	fce43023          	sd	a4,-64(s0)
    80012ec8:	fc843703          	ld	a4,-56(s0)
    80012ecc:	97ba                	add	a5,a5,a4
    80012ece:	03000713          	li	a4,48
    80012ed2:	00e78023          	sb	a4,0(a5)
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80012ed6:	00046783          	lwu	a5,0(s0)
    80012eda:	fc043703          	ld	a4,-64(s0)
    80012ede:	02f77563          	bgeu	a4,a5,80012f08 <_ntoa_format+0xaa>
    80012ee2:	fc043703          	ld	a4,-64(s0)
    80012ee6:	47fd                	li	a5,31
    80012ee8:	fce7fae3          	bgeu	a5,a4,80012ebc <_ntoa_format+0x5e>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    80012eec:	a831                	j	80012f08 <_ntoa_format+0xaa>
               (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
    80012eee:	fc043783          	ld	a5,-64(s0)
    80012ef2:	00178713          	addi	a4,a5,1
    80012ef6:	fce43023          	sd	a4,-64(s0)
    80012efa:	fc843703          	ld	a4,-56(s0)
    80012efe:	97ba                	add	a5,a5,a4
    80012f00:	03000713          	li	a4,48
    80012f04:	00e78023          	sb	a4,0(a5)
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    80012f08:	481c                	lw	a5,16(s0)
    80012f0a:	8b85                	andi	a5,a5,1
    80012f0c:	2781                	sext.w	a5,a5
    80012f0e:	cf81                	beqz	a5,80012f26 <_ntoa_format+0xc8>
    80012f10:	00846783          	lwu	a5,8(s0)
    80012f14:	fc043703          	ld	a4,-64(s0)
    80012f18:	00f77763          	bgeu	a4,a5,80012f26 <_ntoa_format+0xc8>
    80012f1c:	fc043703          	ld	a4,-64(s0)
    80012f20:	47fd                	li	a5,31
    80012f22:	fce7f6e3          	bgeu	a5,a4,80012eee <_ntoa_format+0x90>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
    80012f26:	481c                	lw	a5,16(s0)
    80012f28:	8bc1                	andi	a5,a5,16
    80012f2a:	2781                	sext.w	a5,a5
    80012f2c:	12078363          	beqz	a5,80013052 <_ntoa_format+0x1f4>
        if (!(flags & FLAGS_PRECISION) && len &&
    80012f30:	481c                	lw	a5,16(s0)
    80012f32:	4007f793          	andi	a5,a5,1024
    80012f36:	2781                	sext.w	a5,a5
    80012f38:	e7a1                	bnez	a5,80012f80 <_ntoa_format+0x122>
    80012f3a:	fc043783          	ld	a5,-64(s0)
    80012f3e:	c3a9                	beqz	a5,80012f80 <_ntoa_format+0x122>
            ((len == prec) || (len == width))) {
    80012f40:	00046783          	lwu	a5,0(s0)
        if (!(flags & FLAGS_PRECISION) && len &&
    80012f44:	fc043703          	ld	a4,-64(s0)
    80012f48:	00f70863          	beq	a4,a5,80012f58 <_ntoa_format+0xfa>
            ((len == prec) || (len == width))) {
    80012f4c:	00846783          	lwu	a5,8(s0)
    80012f50:	fc043703          	ld	a4,-64(s0)
    80012f54:	02f71663          	bne	a4,a5,80012f80 <_ntoa_format+0x122>
            len--;
    80012f58:	fc043783          	ld	a5,-64(s0)
    80012f5c:	17fd                	addi	a5,a5,-1
    80012f5e:	fcf43023          	sd	a5,-64(s0)
            if (len && (base == 16U)) {
    80012f62:	fc043783          	ld	a5,-64(s0)
    80012f66:	cf89                	beqz	a5,80012f80 <_ntoa_format+0x122>
    80012f68:	fb842783          	lw	a5,-72(s0)
    80012f6c:	0007871b          	sext.w	a4,a5
    80012f70:	47c1                	li	a5,16
    80012f72:	00f71763          	bne	a4,a5,80012f80 <_ntoa_format+0x122>
                len--;
    80012f76:	fc043783          	ld	a5,-64(s0)
    80012f7a:	17fd                	addi	a5,a5,-1
    80012f7c:	fcf43023          	sd	a5,-64(s0)
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) &&
    80012f80:	fb842783          	lw	a5,-72(s0)
    80012f84:	0007871b          	sext.w	a4,a5
    80012f88:	47c1                	li	a5,16
    80012f8a:	02f71a63          	bne	a4,a5,80012fbe <_ntoa_format+0x160>
    80012f8e:	481c                	lw	a5,16(s0)
    80012f90:	0207f793          	andi	a5,a5,32
    80012f94:	2781                	sext.w	a5,a5
    80012f96:	e785                	bnez	a5,80012fbe <_ntoa_format+0x160>
    80012f98:	fc043703          	ld	a4,-64(s0)
    80012f9c:	47fd                	li	a5,31
    80012f9e:	02e7e063          	bltu	a5,a4,80012fbe <_ntoa_format+0x160>
            (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'x';
    80012fa2:	fc043783          	ld	a5,-64(s0)
    80012fa6:	00178713          	addi	a4,a5,1
    80012faa:	fce43023          	sd	a4,-64(s0)
    80012fae:	fc843703          	ld	a4,-56(s0)
    80012fb2:	97ba                	add	a5,a5,a4
    80012fb4:	07800713          	li	a4,120
    80012fb8:	00e78023          	sb	a4,0(a5)
    80012fbc:	a88d                	j	8001302e <_ntoa_format+0x1d0>
        }
        else if ((base == 16U) && (flags & FLAGS_UPPERCASE) &&
    80012fbe:	fb842783          	lw	a5,-72(s0)
    80012fc2:	0007871b          	sext.w	a4,a5
    80012fc6:	47c1                	li	a5,16
    80012fc8:	02f71a63          	bne	a4,a5,80012ffc <_ntoa_format+0x19e>
    80012fcc:	481c                	lw	a5,16(s0)
    80012fce:	0207f793          	andi	a5,a5,32
    80012fd2:	2781                	sext.w	a5,a5
    80012fd4:	c785                	beqz	a5,80012ffc <_ntoa_format+0x19e>
    80012fd6:	fc043703          	ld	a4,-64(s0)
    80012fda:	47fd                	li	a5,31
    80012fdc:	02e7e063          	bltu	a5,a4,80012ffc <_ntoa_format+0x19e>
                 (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
    80012fe0:	fc043783          	ld	a5,-64(s0)
    80012fe4:	00178713          	addi	a4,a5,1
    80012fe8:	fce43023          	sd	a4,-64(s0)
    80012fec:	fc843703          	ld	a4,-56(s0)
    80012ff0:	97ba                	add	a5,a5,a4
    80012ff2:	05800713          	li	a4,88
    80012ff6:	00e78023          	sb	a4,0(a5)
    80012ffa:	a815                	j	8001302e <_ntoa_format+0x1d0>
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80012ffc:	fb842783          	lw	a5,-72(s0)
    80013000:	0007871b          	sext.w	a4,a5
    80013004:	4789                	li	a5,2
    80013006:	02f71463          	bne	a4,a5,8001302e <_ntoa_format+0x1d0>
    8001300a:	fc043703          	ld	a4,-64(s0)
    8001300e:	47fd                	li	a5,31
    80013010:	00e7ef63          	bltu	a5,a4,8001302e <_ntoa_format+0x1d0>
            buf[len++] = 'b';
    80013014:	fc043783          	ld	a5,-64(s0)
    80013018:	00178713          	addi	a4,a5,1
    8001301c:	fce43023          	sd	a4,-64(s0)
    80013020:	fc843703          	ld	a4,-56(s0)
    80013024:	97ba                	add	a5,a5,a4
    80013026:	06200713          	li	a4,98
    8001302a:	00e78023          	sb	a4,0(a5)
        }
        if (len < PRINTF_NTOA_BUFFER_SIZE) {
    8001302e:	fc043703          	ld	a4,-64(s0)
    80013032:	47fd                	li	a5,31
    80013034:	00e7ef63          	bltu	a5,a4,80013052 <_ntoa_format+0x1f4>
            buf[len++] = '0';
    80013038:	fc043783          	ld	a5,-64(s0)
    8001303c:	00178713          	addi	a4,a5,1
    80013040:	fce43023          	sd	a4,-64(s0)
    80013044:	fc843703          	ld	a4,-56(s0)
    80013048:	97ba                	add	a5,a5,a4
    8001304a:	03000713          	li	a4,48
    8001304e:	00e78023          	sb	a4,0(a5)
        }
    }

    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    80013052:	fc043703          	ld	a4,-64(s0)
    80013056:	47fd                	li	a5,31
    80013058:	06e7e863          	bltu	a5,a4,800130c8 <_ntoa_format+0x26a>
        if (negative) {
    8001305c:	fbf44783          	lbu	a5,-65(s0)
    80013060:	0ff7f793          	andi	a5,a5,255
    80013064:	cf99                	beqz	a5,80013082 <_ntoa_format+0x224>
            buf[len++] = '-';
    80013066:	fc043783          	ld	a5,-64(s0)
    8001306a:	00178713          	addi	a4,a5,1
    8001306e:	fce43023          	sd	a4,-64(s0)
    80013072:	fc843703          	ld	a4,-56(s0)
    80013076:	97ba                	add	a5,a5,a4
    80013078:	02d00713          	li	a4,45
    8001307c:	00e78023          	sb	a4,0(a5)
    80013080:	a0a1                	j	800130c8 <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_PLUS) {
    80013082:	481c                	lw	a5,16(s0)
    80013084:	8b91                	andi	a5,a5,4
    80013086:	2781                	sext.w	a5,a5
    80013088:	cf99                	beqz	a5,800130a6 <_ntoa_format+0x248>
            buf[len++] = '+';  // ignore the space if the '+' exists
    8001308a:	fc043783          	ld	a5,-64(s0)
    8001308e:	00178713          	addi	a4,a5,1
    80013092:	fce43023          	sd	a4,-64(s0)
    80013096:	fc843703          	ld	a4,-56(s0)
    8001309a:	97ba                	add	a5,a5,a4
    8001309c:	02b00713          	li	a4,43
    800130a0:	00e78023          	sb	a4,0(a5)
    800130a4:	a015                	j	800130c8 <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_SPACE) {
    800130a6:	481c                	lw	a5,16(s0)
    800130a8:	8ba1                	andi	a5,a5,8
    800130aa:	2781                	sext.w	a5,a5
    800130ac:	cf91                	beqz	a5,800130c8 <_ntoa_format+0x26a>
            buf[len++] = ' ';
    800130ae:	fc043783          	ld	a5,-64(s0)
    800130b2:	00178713          	addi	a4,a5,1
    800130b6:	fce43023          	sd	a4,-64(s0)
    800130ba:	fc843703          	ld	a4,-56(s0)
    800130be:	97ba                	add	a5,a5,a4
    800130c0:	02000713          	li	a4,32
    800130c4:	00e78023          	sb	a4,0(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    800130c8:	4818                	lw	a4,16(s0)
    800130ca:	441c                	lw	a5,8(s0)
    800130cc:	88ba                	mv	a7,a4
    800130ce:	883e                	mv	a6,a5
    800130d0:	fc043783          	ld	a5,-64(s0)
    800130d4:	fc843703          	ld	a4,-56(s0)
    800130d8:	fd043683          	ld	a3,-48(s0)
    800130dc:	fd843603          	ld	a2,-40(s0)
    800130e0:	fe043583          	ld	a1,-32(s0)
    800130e4:	fe843503          	ld	a0,-24(s0)
    800130e8:	c65ff0ef          	jal	ra,80012d4c <_out_rev>
    800130ec:	87aa                	mv	a5,a0
}
    800130ee:	853e                	mv	a0,a5
    800130f0:	60a6                	ld	ra,72(sp)
    800130f2:	6406                	ld	s0,64(sp)
    800130f4:	6161                	addi	sp,sp,80
    800130f6:	8082                	ret

00000000800130f8 <_ntoa_long>:
// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx,
                         size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec,
                         unsigned int width, unsigned int flags)
{
    800130f8:	7135                	addi	sp,sp,-160
    800130fa:	ed06                	sd	ra,152(sp)
    800130fc:	e922                	sd	s0,144(sp)
    800130fe:	1100                	addi	s0,sp,160
    80013100:	faa43c23          	sd	a0,-72(s0)
    80013104:	fab43823          	sd	a1,-80(s0)
    80013108:	fac43423          	sd	a2,-88(s0)
    8001310c:	fad43023          	sd	a3,-96(s0)
    80013110:	f8e43c23          	sd	a4,-104(s0)
    80013114:	f9043423          	sd	a6,-120(s0)
    80013118:	8746                	mv	a4,a7
    8001311a:	f8f40ba3          	sb	a5,-105(s0)
    8001311e:	87ba                	mv	a5,a4
    80013120:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    80013124:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    80013128:	f9843783          	ld	a5,-104(s0)
    8001312c:	e781                	bnez	a5,80013134 <_ntoa_long+0x3c>
        flags &= ~FLAGS_HASH;
    8001312e:	441c                	lw	a5,8(s0)
    80013130:	9bbd                	andi	a5,a5,-17
    80013132:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    80013134:	441c                	lw	a5,8(s0)
    80013136:	4007f793          	andi	a5,a5,1024
    8001313a:	2781                	sext.w	a5,a5
    8001313c:	c781                	beqz	a5,80013144 <_ntoa_long+0x4c>
    8001313e:	f9843783          	ld	a5,-104(s0)
    80013142:	c7c1                	beqz	a5,800131ca <_ntoa_long+0xd2>
        do {
            const char digit = (char)(value % base);
    80013144:	f9843703          	ld	a4,-104(s0)
    80013148:	f8843783          	ld	a5,-120(s0)
    8001314c:	02f777b3          	remu	a5,a4,a5
    80013150:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    80013154:	fe744783          	lbu	a5,-25(s0)
    80013158:	0ff7f713          	andi	a4,a5,255
    8001315c:	47a5                	li	a5,9
    8001315e:	00e7e963          	bltu	a5,a4,80013170 <_ntoa_long+0x78>
    80013162:	fe744783          	lbu	a5,-25(s0)
    80013166:	0307879b          	addiw	a5,a5,48
    8001316a:	0ff7f793          	andi	a5,a5,255
    8001316e:	a01d                	j	80013194 <_ntoa_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    80013170:	441c                	lw	a5,8(s0)
    80013172:	0207f793          	andi	a5,a5,32
    80013176:	2781                	sext.w	a5,a5
    80013178:	c781                	beqz	a5,80013180 <_ntoa_long+0x88>
    8001317a:	04100793          	li	a5,65
    8001317e:	a019                	j	80013184 <_ntoa_long+0x8c>
    80013180:	06100793          	li	a5,97
    80013184:	fe744703          	lbu	a4,-25(s0)
    80013188:	9fb9                	addw	a5,a5,a4
    8001318a:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    8001318e:	37d9                	addiw	a5,a5,-10
    80013190:	0ff7f793          	andi	a5,a5,255
    80013194:	fe843703          	ld	a4,-24(s0)
    80013198:	00170693          	addi	a3,a4,1
    8001319c:	fed43423          	sd	a3,-24(s0)
    800131a0:	ff040693          	addi	a3,s0,-16
    800131a4:	9736                	add	a4,a4,a3
    800131a6:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    800131aa:	f9843703          	ld	a4,-104(s0)
    800131ae:	f8843783          	ld	a5,-120(s0)
    800131b2:	02f757b3          	divu	a5,a4,a5
    800131b6:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    800131ba:	f9843783          	ld	a5,-104(s0)
    800131be:	c791                	beqz	a5,800131ca <_ntoa_long+0xd2>
    800131c0:	fe843703          	ld	a4,-24(s0)
    800131c4:	47fd                	li	a5,31
    800131c6:	f6e7ffe3          	bgeu	a5,a4,80013144 <_ntoa_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    800131ca:	f8843783          	ld	a5,-120(s0)
    800131ce:	0007861b          	sext.w	a2,a5
    800131d2:	f9744683          	lbu	a3,-105(s0)
    800131d6:	fc040713          	addi	a4,s0,-64
    800131da:	441c                	lw	a5,8(s0)
    800131dc:	e83e                	sd	a5,16(sp)
    800131de:	401c                	lw	a5,0(s0)
    800131e0:	e43e                	sd	a5,8(sp)
    800131e2:	f9042783          	lw	a5,-112(s0)
    800131e6:	e03e                	sd	a5,0(sp)
    800131e8:	88b2                	mv	a7,a2
    800131ea:	8836                	mv	a6,a3
    800131ec:	fe843783          	ld	a5,-24(s0)
    800131f0:	fa043683          	ld	a3,-96(s0)
    800131f4:	fa843603          	ld	a2,-88(s0)
    800131f8:	fb043583          	ld	a1,-80(s0)
    800131fc:	fb843503          	ld	a0,-72(s0)
    80013200:	c5fff0ef          	jal	ra,80012e5e <_ntoa_format>
    80013204:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    80013206:	853e                	mv	a0,a5
    80013208:	60ea                	ld	ra,152(sp)
    8001320a:	644a                	ld	s0,144(sp)
    8001320c:	610d                	addi	sp,sp,160
    8001320e:	8082                	ret

0000000080013210 <_ntoa_long_long>:
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx,
                              size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base,
                              unsigned int prec, unsigned int width,
                              unsigned int flags)
{
    80013210:	7135                	addi	sp,sp,-160
    80013212:	ed06                	sd	ra,152(sp)
    80013214:	e922                	sd	s0,144(sp)
    80013216:	1100                	addi	s0,sp,160
    80013218:	faa43c23          	sd	a0,-72(s0)
    8001321c:	fab43823          	sd	a1,-80(s0)
    80013220:	fac43423          	sd	a2,-88(s0)
    80013224:	fad43023          	sd	a3,-96(s0)
    80013228:	f8e43c23          	sd	a4,-104(s0)
    8001322c:	f9043423          	sd	a6,-120(s0)
    80013230:	8746                	mv	a4,a7
    80013232:	f8f40ba3          	sb	a5,-105(s0)
    80013236:	87ba                	mv	a5,a4
    80013238:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    8001323c:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    80013240:	f9843783          	ld	a5,-104(s0)
    80013244:	e781                	bnez	a5,8001324c <_ntoa_long_long+0x3c>
        flags &= ~FLAGS_HASH;
    80013246:	441c                	lw	a5,8(s0)
    80013248:	9bbd                	andi	a5,a5,-17
    8001324a:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    8001324c:	441c                	lw	a5,8(s0)
    8001324e:	4007f793          	andi	a5,a5,1024
    80013252:	2781                	sext.w	a5,a5
    80013254:	c781                	beqz	a5,8001325c <_ntoa_long_long+0x4c>
    80013256:	f9843783          	ld	a5,-104(s0)
    8001325a:	c7c1                	beqz	a5,800132e2 <_ntoa_long_long+0xd2>
        do {
            const char digit = (char)(value % base);
    8001325c:	f9843703          	ld	a4,-104(s0)
    80013260:	f8843783          	ld	a5,-120(s0)
    80013264:	02f777b3          	remu	a5,a4,a5
    80013268:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    8001326c:	fe744783          	lbu	a5,-25(s0)
    80013270:	0ff7f713          	andi	a4,a5,255
    80013274:	47a5                	li	a5,9
    80013276:	00e7e963          	bltu	a5,a4,80013288 <_ntoa_long_long+0x78>
    8001327a:	fe744783          	lbu	a5,-25(s0)
    8001327e:	0307879b          	addiw	a5,a5,48
    80013282:	0ff7f793          	andi	a5,a5,255
    80013286:	a01d                	j	800132ac <_ntoa_long_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    80013288:	441c                	lw	a5,8(s0)
    8001328a:	0207f793          	andi	a5,a5,32
    8001328e:	2781                	sext.w	a5,a5
    80013290:	c781                	beqz	a5,80013298 <_ntoa_long_long+0x88>
    80013292:	04100793          	li	a5,65
    80013296:	a019                	j	8001329c <_ntoa_long_long+0x8c>
    80013298:	06100793          	li	a5,97
    8001329c:	fe744703          	lbu	a4,-25(s0)
    800132a0:	9fb9                	addw	a5,a5,a4
    800132a2:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    800132a6:	37d9                	addiw	a5,a5,-10
    800132a8:	0ff7f793          	andi	a5,a5,255
    800132ac:	fe843703          	ld	a4,-24(s0)
    800132b0:	00170693          	addi	a3,a4,1
    800132b4:	fed43423          	sd	a3,-24(s0)
    800132b8:	ff040693          	addi	a3,s0,-16
    800132bc:	9736                	add	a4,a4,a3
    800132be:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    800132c2:	f9843703          	ld	a4,-104(s0)
    800132c6:	f8843783          	ld	a5,-120(s0)
    800132ca:	02f757b3          	divu	a5,a4,a5
    800132ce:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    800132d2:	f9843783          	ld	a5,-104(s0)
    800132d6:	c791                	beqz	a5,800132e2 <_ntoa_long_long+0xd2>
    800132d8:	fe843703          	ld	a4,-24(s0)
    800132dc:	47fd                	li	a5,31
    800132de:	f6e7ffe3          	bgeu	a5,a4,8001325c <_ntoa_long_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    800132e2:	f8843783          	ld	a5,-120(s0)
    800132e6:	0007861b          	sext.w	a2,a5
    800132ea:	f9744683          	lbu	a3,-105(s0)
    800132ee:	fc040713          	addi	a4,s0,-64
    800132f2:	441c                	lw	a5,8(s0)
    800132f4:	e83e                	sd	a5,16(sp)
    800132f6:	401c                	lw	a5,0(s0)
    800132f8:	e43e                	sd	a5,8(sp)
    800132fa:	f9042783          	lw	a5,-112(s0)
    800132fe:	e03e                	sd	a5,0(sp)
    80013300:	88b2                	mv	a7,a2
    80013302:	8836                	mv	a6,a3
    80013304:	fe843783          	ld	a5,-24(s0)
    80013308:	fa043683          	ld	a3,-96(s0)
    8001330c:	fa843603          	ld	a2,-88(s0)
    80013310:	fb043583          	ld	a1,-80(s0)
    80013314:	fb843503          	ld	a0,-72(s0)
    80013318:	b47ff0ef          	jal	ra,80012e5e <_ntoa_format>
    8001331c:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    8001331e:	853e                	mv	a0,a5
    80013320:	60ea                	ld	ra,152(sp)
    80013322:	644a                	ld	s0,144(sp)
    80013324:	610d                	addi	sp,sp,160
    80013326:	8082                	ret

0000000080013328 <_ftoa>:

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    80013328:	7135                	addi	sp,sp,-160
    8001332a:	ed06                	sd	ra,152(sp)
    8001332c:	e922                	sd	s0,144(sp)
    8001332e:	1100                	addi	s0,sp,160
    80013330:	f8a43c23          	sd	a0,-104(s0)
    80013334:	f8b43823          	sd	a1,-112(s0)
    80013338:	f8c43423          	sd	a2,-120(s0)
    8001333c:	f8d43023          	sd	a3,-128(s0)
    80013340:	f6a43c27          	fsd	fa0,-136(s0)
    80013344:	863a                	mv	a2,a4
    80013346:	86be                	mv	a3,a5
    80013348:	8742                	mv	a4,a6
    8001334a:	87b2                	mv	a5,a2
    8001334c:	f6f42a23          	sw	a5,-140(s0)
    80013350:	87b6                	mv	a5,a3
    80013352:	f6f42823          	sw	a5,-144(s0)
    80013356:	87ba                	mv	a5,a4
    80013358:	f6f42623          	sw	a5,-148(s0)
    char buf[PRINTF_FTOA_BUFFER_SIZE];
    size_t len                  = 0U;
    8001335c:	fe043423          	sd	zero,-24(s0)
    double diff                 = 0.0;
    80013360:	fc043423          	sd	zero,-56(s0)
    static const double pow10[] = {1,         10,        100,     1000,
                                   10000,     100000,    1000000, 10000000,
                                   100000000, 1000000000};

    // test for special values
    if (value != value)
    80013364:	f7843707          	fld	fa4,-136(s0)
    80013368:	f7843787          	fld	fa5,-136(s0)
    8001336c:	a2f727d3          	feq.d	a5,fa4,fa5
    80013370:	eb85                	bnez	a5,800133a0 <_ftoa+0x78>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    80013372:	f6c42703          	lw	a4,-148(s0)
    80013376:	f7042783          	lw	a5,-144(s0)
    8001337a:	88ba                	mv	a7,a4
    8001337c:	883e                	mv	a6,a5
    8001337e:	478d                	li	a5,3
    80013380:	00006717          	auipc	a4,0x6
    80013384:	4d070713          	addi	a4,a4,1232 # 80019850 <SYSCALLS+0x850>
    80013388:	f8043683          	ld	a3,-128(s0)
    8001338c:	f8843603          	ld	a2,-120(s0)
    80013390:	f9043583          	ld	a1,-112(s0)
    80013394:	f9843503          	ld	a0,-104(s0)
    80013398:	9b5ff0ef          	jal	ra,80012d4c <_out_rev>
    8001339c:	87aa                	mv	a5,a0
    8001339e:	a1f1                	j	8001386a <_ftoa+0x542>
    if (value < -DBL_MAX)
    800133a0:	f7843707          	fld	fa4,-136(s0)
    800133a4:	00006797          	auipc	a5,0x6
    800133a8:	6fc78793          	addi	a5,a5,1788 # 80019aa0 <pow10.0+0x50>
    800133ac:	239c                	fld	fa5,0(a5)
    800133ae:	a2f717d3          	flt.d	a5,fa4,fa5
    800133b2:	cb85                	beqz	a5,800133e2 <_ftoa+0xba>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    800133b4:	f6c42703          	lw	a4,-148(s0)
    800133b8:	f7042783          	lw	a5,-144(s0)
    800133bc:	88ba                	mv	a7,a4
    800133be:	883e                	mv	a6,a5
    800133c0:	4791                	li	a5,4
    800133c2:	00006717          	auipc	a4,0x6
    800133c6:	49670713          	addi	a4,a4,1174 # 80019858 <SYSCALLS+0x858>
    800133ca:	f8043683          	ld	a3,-128(s0)
    800133ce:	f8843603          	ld	a2,-120(s0)
    800133d2:	f9043583          	ld	a1,-112(s0)
    800133d6:	f9843503          	ld	a0,-104(s0)
    800133da:	973ff0ef          	jal	ra,80012d4c <_out_rev>
    800133de:	87aa                	mv	a5,a0
    800133e0:	a169                	j	8001386a <_ftoa+0x542>
    if (value > DBL_MAX)
    800133e2:	f7843707          	fld	fa4,-136(s0)
    800133e6:	00006797          	auipc	a5,0x6
    800133ea:	6c278793          	addi	a5,a5,1730 # 80019aa8 <pow10.0+0x58>
    800133ee:	239c                	fld	fa5,0(a5)
    800133f0:	a2e797d3          	flt.d	a5,fa5,fa4
    800133f4:	cba9                	beqz	a5,80013446 <_ftoa+0x11e>
        return _out_rev(out, buffer, idx, maxlen,
                        (flags & FLAGS_PLUS) ? "fni+" : "fni",
    800133f6:	f6c42783          	lw	a5,-148(s0)
    800133fa:	8b91                	andi	a5,a5,4
    800133fc:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    800133fe:	c791                	beqz	a5,8001340a <_ftoa+0xe2>
    80013400:	00006717          	auipc	a4,0x6
    80013404:	46070713          	addi	a4,a4,1120 # 80019860 <SYSCALLS+0x860>
    80013408:	a029                	j	80013412 <_ftoa+0xea>
    8001340a:	00006717          	auipc	a4,0x6
    8001340e:	45e70713          	addi	a4,a4,1118 # 80019868 <SYSCALLS+0x868>
                        (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    80013412:	f6c42783          	lw	a5,-148(s0)
    80013416:	8b91                	andi	a5,a5,4
    80013418:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    8001341a:	c399                	beqz	a5,80013420 <_ftoa+0xf8>
    8001341c:	4791                	li	a5,4
    8001341e:	a011                	j	80013422 <_ftoa+0xfa>
    80013420:	478d                	li	a5,3
    80013422:	f6c42603          	lw	a2,-148(s0)
    80013426:	f7042683          	lw	a3,-144(s0)
    8001342a:	88b2                	mv	a7,a2
    8001342c:	8836                	mv	a6,a3
    8001342e:	f8043683          	ld	a3,-128(s0)
    80013432:	f8843603          	ld	a2,-120(s0)
    80013436:	f9043583          	ld	a1,-112(s0)
    8001343a:	f9843503          	ld	a0,-104(s0)
    8001343e:	90fff0ef          	jal	ra,80012d4c <_out_rev>
    80013442:	87aa                	mv	a5,a0
    80013444:	a11d                	j	8001386a <_ftoa+0x542>

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which
    // could be 100s of characters overflowing your buffers == bad
    if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    80013446:	f7843707          	fld	fa4,-136(s0)
    8001344a:	00006797          	auipc	a5,0x6
    8001344e:	66678793          	addi	a5,a5,1638 # 80019ab0 <pow10.0+0x60>
    80013452:	239c                	fld	fa5,0(a5)
    80013454:	a2e797d3          	flt.d	a5,fa5,fa4
    80013458:	eb99                	bnez	a5,8001346e <_ftoa+0x146>
    8001345a:	f7843707          	fld	fa4,-136(s0)
    8001345e:	00006797          	auipc	a5,0x6
    80013462:	65a78793          	addi	a5,a5,1626 # 80019ab8 <pow10.0+0x68>
    80013466:	239c                	fld	fa5,0(a5)
    80013468:	a2f717d3          	flt.d	a5,fa4,fa5
    8001346c:	c795                	beqz	a5,80013498 <_ftoa+0x170>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    8001346e:	f6c42683          	lw	a3,-148(s0)
    80013472:	f7042783          	lw	a5,-144(s0)
    80013476:	f7442703          	lw	a4,-140(s0)
    8001347a:	8836                	mv	a6,a3
    8001347c:	f7843507          	fld	fa0,-136(s0)
    80013480:	f8043683          	ld	a3,-128(s0)
    80013484:	f8843603          	ld	a2,-120(s0)
    80013488:	f9043583          	ld	a1,-112(s0)
    8001348c:	f9843503          	ld	a0,-104(s0)
    80013490:	3e4000ef          	jal	ra,80013874 <_etoa>
    80013494:	87aa                	mv	a5,a0
    80013496:	aed1                	j	8001386a <_ftoa+0x542>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
    80013498:	fe0403a3          	sb	zero,-25(s0)
    if (value < 0) {
    8001349c:	f7843787          	fld	fa5,-136(s0)
    800134a0:	f2000753          	fmv.d.x	fa4,zero
    800134a4:	a2e797d3          	flt.d	a5,fa5,fa4
    800134a8:	cf81                	beqz	a5,800134c0 <_ftoa+0x198>
        negative = true;
    800134aa:	4785                	li	a5,1
    800134ac:	fef403a3          	sb	a5,-25(s0)
        value    = 0 - value;
    800134b0:	f2000753          	fmv.d.x	fa4,zero
    800134b4:	f7843787          	fld	fa5,-136(s0)
    800134b8:	0af777d3          	fsub.d	fa5,fa4,fa5
    800134bc:	f6f43c27          	fsd	fa5,-136(s0)
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
    800134c0:	f6c42783          	lw	a5,-148(s0)
    800134c4:	4007f793          	andi	a5,a5,1024
    800134c8:	2781                	sext.w	a5,a5
    800134ca:	e79d                	bnez	a5,800134f8 <_ftoa+0x1d0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    800134cc:	4799                	li	a5,6
    800134ce:	f6f42a23          	sw	a5,-140(s0)
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    800134d2:	a01d                	j	800134f8 <_ftoa+0x1d0>
        buf[len++] = '0';
    800134d4:	fe843783          	ld	a5,-24(s0)
    800134d8:	00178713          	addi	a4,a5,1
    800134dc:	fee43423          	sd	a4,-24(s0)
    800134e0:	ff040713          	addi	a4,s0,-16
    800134e4:	97ba                	add	a5,a5,a4
    800134e6:	03000713          	li	a4,48
    800134ea:	fae78823          	sb	a4,-80(a5)
        prec--;
    800134ee:	f7442783          	lw	a5,-140(s0)
    800134f2:	37fd                	addiw	a5,a5,-1
    800134f4:	f6f42a23          	sw	a5,-140(s0)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    800134f8:	fe843703          	ld	a4,-24(s0)
    800134fc:	47fd                	li	a5,31
    800134fe:	00e7e963          	bltu	a5,a4,80013510 <_ftoa+0x1e8>
    80013502:	f7442783          	lw	a5,-140(s0)
    80013506:	0007871b          	sext.w	a4,a5
    8001350a:	47a5                	li	a5,9
    8001350c:	fce7e4e3          	bltu	a5,a4,800134d4 <_ftoa+0x1ac>
    }

    int whole          = (int)value;
    80013510:	f7843787          	fld	fa5,-136(s0)
    80013514:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80013518:	fef42023          	sw	a5,-32(s0)
    double tmp         = (value - whole) * pow10[prec];
    8001351c:	fe042783          	lw	a5,-32(s0)
    80013520:	d20787d3          	fcvt.d.w	fa5,a5
    80013524:	f7843707          	fld	fa4,-136(s0)
    80013528:	0af77753          	fsub.d	fa4,fa4,fa5
    8001352c:	00006717          	auipc	a4,0x6
    80013530:	52470713          	addi	a4,a4,1316 # 80019a50 <pow10.0>
    80013534:	f7446783          	lwu	a5,-140(s0)
    80013538:	078e                	slli	a5,a5,0x3
    8001353a:	97ba                	add	a5,a5,a4
    8001353c:	239c                	fld	fa5,0(a5)
    8001353e:	12f777d3          	fmul.d	fa5,fa4,fa5
    80013542:	fcf43027          	fsd	fa5,-64(s0)
    unsigned long frac = (unsigned long)tmp;
    80013546:	fc043787          	fld	fa5,-64(s0)
    8001354a:	c23797d3          	fcvt.lu.d	a5,fa5,rtz
    8001354e:	fcf43c23          	sd	a5,-40(s0)
    diff               = tmp - frac;
    80013552:	fd843783          	ld	a5,-40(s0)
    80013556:	d237f7d3          	fcvt.d.lu	fa5,a5
    8001355a:	fc043707          	fld	fa4,-64(s0)
    8001355e:	0af777d3          	fsub.d	fa5,fa4,fa5
    80013562:	fcf43427          	fsd	fa5,-56(s0)

    if (diff > 0.5) {
    80013566:	fc843707          	fld	fa4,-56(s0)
    8001356a:	00006797          	auipc	a5,0x6
    8001356e:	55678793          	addi	a5,a5,1366 # 80019ac0 <pow10.0+0x70>
    80013572:	239c                	fld	fa5,0(a5)
    80013574:	a2e797d3          	flt.d	a5,fa5,fa4
    80013578:	cf95                	beqz	a5,800135b4 <_ftoa+0x28c>
        ++frac;
    8001357a:	fd843783          	ld	a5,-40(s0)
    8001357e:	0785                	addi	a5,a5,1
    80013580:	fcf43c23          	sd	a5,-40(s0)
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
    80013584:	fd843783          	ld	a5,-40(s0)
    80013588:	d237f753          	fcvt.d.lu	fa4,a5
    8001358c:	00006717          	auipc	a4,0x6
    80013590:	4c470713          	addi	a4,a4,1220 # 80019a50 <pow10.0>
    80013594:	f7446783          	lwu	a5,-140(s0)
    80013598:	078e                	slli	a5,a5,0x3
    8001359a:	97ba                	add	a5,a5,a4
    8001359c:	239c                	fld	fa5,0(a5)
    8001359e:	a2e787d3          	fle.d	a5,fa5,fa4
    800135a2:	cf9d                	beqz	a5,800135e0 <_ftoa+0x2b8>
            frac = 0;
    800135a4:	fc043c23          	sd	zero,-40(s0)
            ++whole;
    800135a8:	fe042783          	lw	a5,-32(s0)
    800135ac:	2785                	addiw	a5,a5,1
    800135ae:	fef42023          	sw	a5,-32(s0)
    800135b2:	a03d                	j	800135e0 <_ftoa+0x2b8>
        }
    }
    else if (diff < 0.5) {
    800135b4:	fc843707          	fld	fa4,-56(s0)
    800135b8:	00006797          	auipc	a5,0x6
    800135bc:	50878793          	addi	a5,a5,1288 # 80019ac0 <pow10.0+0x70>
    800135c0:	239c                	fld	fa5,0(a5)
    800135c2:	a2f717d3          	flt.d	a5,fa4,fa5
    800135c6:	ef89                	bnez	a5,800135e0 <_ftoa+0x2b8>
    }
    else if ((frac == 0U) || (frac & 1U)) {
    800135c8:	fd843783          	ld	a5,-40(s0)
    800135cc:	c789                	beqz	a5,800135d6 <_ftoa+0x2ae>
    800135ce:	fd843783          	ld	a5,-40(s0)
    800135d2:	8b85                	andi	a5,a5,1
    800135d4:	c791                	beqz	a5,800135e0 <_ftoa+0x2b8>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
    800135d6:	fd843783          	ld	a5,-40(s0)
    800135da:	0785                	addi	a5,a5,1
    800135dc:	fcf43c23          	sd	a5,-40(s0)
    }

    if (prec == 0U) {
    800135e0:	f7442783          	lw	a5,-140(s0)
    800135e4:	2781                	sext.w	a5,a5
    800135e6:	e3bd                	bnez	a5,8001364c <_ftoa+0x324>
        diff = value - (double)whole;
    800135e8:	fe042783          	lw	a5,-32(s0)
    800135ec:	d20787d3          	fcvt.d.w	fa5,a5
    800135f0:	f7843707          	fld	fa4,-136(s0)
    800135f4:	0af777d3          	fsub.d	fa5,fa4,fa5
    800135f8:	fcf43427          	fsd	fa5,-56(s0)
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    800135fc:	fc843707          	fld	fa4,-56(s0)
    80013600:	00006797          	auipc	a5,0x6
    80013604:	4c078793          	addi	a5,a5,1216 # 80019ac0 <pow10.0+0x70>
    80013608:	239c                	fld	fa5,0(a5)
    8001360a:	a2f717d3          	flt.d	a5,fa4,fa5
    8001360e:	00f037b3          	snez	a5,a5
    80013612:	0ff7f793          	andi	a5,a5,255
    80013616:	0017c793          	xori	a5,a5,1
    8001361a:	0ff7f793          	andi	a5,a5,255
    8001361e:	eb99                	bnez	a5,80013634 <_ftoa+0x30c>
    80013620:	fc843707          	fld	fa4,-56(s0)
    80013624:	00006797          	auipc	a5,0x6
    80013628:	49c78793          	addi	a5,a5,1180 # 80019ac0 <pow10.0+0x70>
    8001362c:	239c                	fld	fa5,0(a5)
    8001362e:	a2e797d3          	flt.d	a5,fa5,fa4
    80013632:	cbf1                	beqz	a5,80013706 <_ftoa+0x3de>
    80013634:	fe042783          	lw	a5,-32(s0)
    80013638:	8b85                	andi	a5,a5,1
    8001363a:	2781                	sext.w	a5,a5
    8001363c:	10078863          	beqz	a5,8001374c <_ftoa+0x424>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
    80013640:	fe042783          	lw	a5,-32(s0)
    80013644:	2785                	addiw	a5,a5,1
    80013646:	fef42023          	sw	a5,-32(s0)
    8001364a:	a209                	j	8001374c <_ftoa+0x424>
        }
    }
    else {
        unsigned int count = prec;
    8001364c:	f7442783          	lw	a5,-140(s0)
    80013650:	fcf42a23          	sw	a5,-44(s0)
        // now do fractional part, as an unsigned number
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80013654:	a0b1                	j	800136a0 <_ftoa+0x378>
            --count;
    80013656:	fd442783          	lw	a5,-44(s0)
    8001365a:	37fd                	addiw	a5,a5,-1
    8001365c:	fcf42a23          	sw	a5,-44(s0)
            buf[len++] = (char)(48U + (frac % 10U));
    80013660:	fd843703          	ld	a4,-40(s0)
    80013664:	47a9                	li	a5,10
    80013666:	02f777b3          	remu	a5,a4,a5
    8001366a:	0ff7f713          	andi	a4,a5,255
    8001366e:	fe843783          	ld	a5,-24(s0)
    80013672:	00178693          	addi	a3,a5,1
    80013676:	fed43423          	sd	a3,-24(s0)
    8001367a:	0307071b          	addiw	a4,a4,48
    8001367e:	0ff77713          	andi	a4,a4,255
    80013682:	ff040693          	addi	a3,s0,-16
    80013686:	97b6                	add	a5,a5,a3
    80013688:	fae78823          	sb	a4,-80(a5)
            if (!(frac /= 10U)) {
    8001368c:	fd843703          	ld	a4,-40(s0)
    80013690:	47a9                	li	a5,10
    80013692:	02f757b3          	divu	a5,a4,a5
    80013696:	fcf43c23          	sd	a5,-40(s0)
    8001369a:	fd843783          	ld	a5,-40(s0)
    8001369e:	c799                	beqz	a5,800136ac <_ftoa+0x384>
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    800136a0:	fe843703          	ld	a4,-24(s0)
    800136a4:	47fd                	li	a5,31
    800136a6:	fae7f8e3          	bgeu	a5,a4,80013656 <_ftoa+0x32e>
    800136aa:	a005                	j	800136ca <_ftoa+0x3a2>
                break;
    800136ac:	0001                	nop
            }
        }
        // add extra 0s
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    800136ae:	a831                	j	800136ca <_ftoa+0x3a2>
            buf[len++] = '0';
    800136b0:	fe843783          	ld	a5,-24(s0)
    800136b4:	00178713          	addi	a4,a5,1
    800136b8:	fee43423          	sd	a4,-24(s0)
    800136bc:	ff040713          	addi	a4,s0,-16
    800136c0:	97ba                	add	a5,a5,a4
    800136c2:	03000713          	li	a4,48
    800136c6:	fae78823          	sb	a4,-80(a5)
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    800136ca:	fe843703          	ld	a4,-24(s0)
    800136ce:	47fd                	li	a5,31
    800136d0:	00e7e963          	bltu	a5,a4,800136e2 <_ftoa+0x3ba>
    800136d4:	fd442783          	lw	a5,-44(s0)
    800136d8:	fff7871b          	addiw	a4,a5,-1
    800136dc:	fce42a23          	sw	a4,-44(s0)
    800136e0:	fbe1                	bnez	a5,800136b0 <_ftoa+0x388>
        }
        if (len < PRINTF_FTOA_BUFFER_SIZE) {
    800136e2:	fe843703          	ld	a4,-24(s0)
    800136e6:	47fd                	li	a5,31
    800136e8:	06e7e263          	bltu	a5,a4,8001374c <_ftoa+0x424>
            // add decimal
            buf[len++] = '.';
    800136ec:	fe843783          	ld	a5,-24(s0)
    800136f0:	00178713          	addi	a4,a5,1
    800136f4:	fee43423          	sd	a4,-24(s0)
    800136f8:	ff040713          	addi	a4,s0,-16
    800136fc:	97ba                	add	a5,a5,a4
    800136fe:	02e00713          	li	a4,46
    80013702:	fae78823          	sb	a4,-80(a5)
        }
    }

    // do whole part, number is reversed
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80013706:	a099                	j	8001374c <_ftoa+0x424>
        buf[len++] = (char)(48 + (whole % 10));
    80013708:	fe042703          	lw	a4,-32(s0)
    8001370c:	47a9                	li	a5,10
    8001370e:	02f767bb          	remw	a5,a4,a5
    80013712:	2781                	sext.w	a5,a5
    80013714:	0ff7f713          	andi	a4,a5,255
    80013718:	fe843783          	ld	a5,-24(s0)
    8001371c:	00178693          	addi	a3,a5,1
    80013720:	fed43423          	sd	a3,-24(s0)
    80013724:	0307071b          	addiw	a4,a4,48
    80013728:	0ff77713          	andi	a4,a4,255
    8001372c:	ff040693          	addi	a3,s0,-16
    80013730:	97b6                	add	a5,a5,a3
    80013732:	fae78823          	sb	a4,-80(a5)
        if (!(whole /= 10)) {
    80013736:	fe042703          	lw	a4,-32(s0)
    8001373a:	47a9                	li	a5,10
    8001373c:	02f747bb          	divw	a5,a4,a5
    80013740:	fef42023          	sw	a5,-32(s0)
    80013744:	fe042783          	lw	a5,-32(s0)
    80013748:	2781                	sext.w	a5,a5
    8001374a:	c799                	beqz	a5,80013758 <_ftoa+0x430>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    8001374c:	fe843703          	ld	a4,-24(s0)
    80013750:	47fd                	li	a5,31
    80013752:	fae7fbe3          	bgeu	a5,a4,80013708 <_ftoa+0x3e0>
    80013756:	a011                	j	8001375a <_ftoa+0x432>
            break;
    80013758:	0001                	nop
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    8001375a:	f6c42783          	lw	a5,-148(s0)
    8001375e:	8b89                	andi	a5,a5,2
    80013760:	2781                	sext.w	a5,a5
    80013762:	e3b5                	bnez	a5,800137c6 <_ftoa+0x49e>
    80013764:	f6c42783          	lw	a5,-148(s0)
    80013768:	8b85                	andi	a5,a5,1
    8001376a:	2781                	sext.w	a5,a5
    8001376c:	cfa9                	beqz	a5,800137c6 <_ftoa+0x49e>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    8001376e:	f7042783          	lw	a5,-144(s0)
    80013772:	2781                	sext.w	a5,a5
    80013774:	cf95                	beqz	a5,800137b0 <_ftoa+0x488>
    80013776:	fe744783          	lbu	a5,-25(s0)
    8001377a:	0ff7f793          	andi	a5,a5,255
    8001377e:	e791                	bnez	a5,8001378a <_ftoa+0x462>
    80013780:	f6c42783          	lw	a5,-148(s0)
    80013784:	8bb1                	andi	a5,a5,12
    80013786:	2781                	sext.w	a5,a5
    80013788:	c785                	beqz	a5,800137b0 <_ftoa+0x488>
            width--;
    8001378a:	f7042783          	lw	a5,-144(s0)
    8001378e:	37fd                	addiw	a5,a5,-1
    80013790:	f6f42823          	sw	a5,-144(s0)
        }
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    80013794:	a831                	j	800137b0 <_ftoa+0x488>
            buf[len++] = '0';
    80013796:	fe843783          	ld	a5,-24(s0)
    8001379a:	00178713          	addi	a4,a5,1
    8001379e:	fee43423          	sd	a4,-24(s0)
    800137a2:	ff040713          	addi	a4,s0,-16
    800137a6:	97ba                	add	a5,a5,a4
    800137a8:	03000713          	li	a4,48
    800137ac:	fae78823          	sb	a4,-80(a5)
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    800137b0:	f7046783          	lwu	a5,-144(s0)
    800137b4:	fe843703          	ld	a4,-24(s0)
    800137b8:	00f77763          	bgeu	a4,a5,800137c6 <_ftoa+0x49e>
    800137bc:	fe843703          	ld	a4,-24(s0)
    800137c0:	47fd                	li	a5,31
    800137c2:	fce7fae3          	bgeu	a5,a4,80013796 <_ftoa+0x46e>
        }
    }

    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    800137c6:	fe843703          	ld	a4,-24(s0)
    800137ca:	47fd                	li	a5,31
    800137cc:	06e7ea63          	bltu	a5,a4,80013840 <_ftoa+0x518>
        if (negative) {
    800137d0:	fe744783          	lbu	a5,-25(s0)
    800137d4:	0ff7f793          	andi	a5,a5,255
    800137d8:	cf99                	beqz	a5,800137f6 <_ftoa+0x4ce>
            buf[len++] = '-';
    800137da:	fe843783          	ld	a5,-24(s0)
    800137de:	00178713          	addi	a4,a5,1
    800137e2:	fee43423          	sd	a4,-24(s0)
    800137e6:	ff040713          	addi	a4,s0,-16
    800137ea:	97ba                	add	a5,a5,a4
    800137ec:	02d00713          	li	a4,45
    800137f0:	fae78823          	sb	a4,-80(a5)
    800137f4:	a0b1                	j	80013840 <_ftoa+0x518>
        }
        else if (flags & FLAGS_PLUS) {
    800137f6:	f6c42783          	lw	a5,-148(s0)
    800137fa:	8b91                	andi	a5,a5,4
    800137fc:	2781                	sext.w	a5,a5
    800137fe:	cf99                	beqz	a5,8001381c <_ftoa+0x4f4>
            buf[len++] = '+';  // ignore the space if the '+' exists
    80013800:	fe843783          	ld	a5,-24(s0)
    80013804:	00178713          	addi	a4,a5,1
    80013808:	fee43423          	sd	a4,-24(s0)
    8001380c:	ff040713          	addi	a4,s0,-16
    80013810:	97ba                	add	a5,a5,a4
    80013812:	02b00713          	li	a4,43
    80013816:	fae78823          	sb	a4,-80(a5)
    8001381a:	a01d                	j	80013840 <_ftoa+0x518>
        }
        else if (flags & FLAGS_SPACE) {
    8001381c:	f6c42783          	lw	a5,-148(s0)
    80013820:	8ba1                	andi	a5,a5,8
    80013822:	2781                	sext.w	a5,a5
    80013824:	cf91                	beqz	a5,80013840 <_ftoa+0x518>
            buf[len++] = ' ';
    80013826:	fe843783          	ld	a5,-24(s0)
    8001382a:	00178713          	addi	a4,a5,1
    8001382e:	fee43423          	sd	a4,-24(s0)
    80013832:	ff040713          	addi	a4,s0,-16
    80013836:	97ba                	add	a5,a5,a4
    80013838:	02000713          	li	a4,32
    8001383c:	fae78823          	sb	a4,-80(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    80013840:	f6c42683          	lw	a3,-148(s0)
    80013844:	f7042783          	lw	a5,-144(s0)
    80013848:	fa040713          	addi	a4,s0,-96
    8001384c:	88b6                	mv	a7,a3
    8001384e:	883e                	mv	a6,a5
    80013850:	fe843783          	ld	a5,-24(s0)
    80013854:	f8043683          	ld	a3,-128(s0)
    80013858:	f8843603          	ld	a2,-120(s0)
    8001385c:	f9043583          	ld	a1,-112(s0)
    80013860:	f9843503          	ld	a0,-104(s0)
    80013864:	ce8ff0ef          	jal	ra,80012d4c <_out_rev>
    80013868:	87aa                	mv	a5,a0
}
    8001386a:	853e                	mv	a0,a5
    8001386c:	60ea                	ld	ra,152(sp)
    8001386e:	644a                	ld	s0,144(sp)
    80013870:	610d                	addi	sp,sp,160
    80013872:	8082                	ret

0000000080013874 <_etoa>:
// internal ftoa variant for exponential floating-point type, contributed by
// Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    80013874:	7135                	addi	sp,sp,-160
    80013876:	ed06                	sd	ra,152(sp)
    80013878:	e922                	sd	s0,144(sp)
    8001387a:	1100                	addi	s0,sp,160
    8001387c:	faa43423          	sd	a0,-88(s0)
    80013880:	fab43023          	sd	a1,-96(s0)
    80013884:	f8c43c23          	sd	a2,-104(s0)
    80013888:	f8d43823          	sd	a3,-112(s0)
    8001388c:	f8a43427          	fsd	fa0,-120(s0)
    80013890:	863a                	mv	a2,a4
    80013892:	86be                	mv	a3,a5
    80013894:	8742                	mv	a4,a6
    80013896:	87b2                	mv	a5,a2
    80013898:	f8f42223          	sw	a5,-124(s0)
    8001389c:	87b6                	mv	a5,a3
    8001389e:	f8f42023          	sw	a5,-128(s0)
    800138a2:	87ba                	mv	a5,a4
    800138a4:	f6f42e23          	sw	a5,-132(s0)
    // check for NaN and special values
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    800138a8:	f8843707          	fld	fa4,-120(s0)
    800138ac:	f8843787          	fld	fa5,-120(s0)
    800138b0:	a2f727d3          	feq.d	a5,fa4,fa5
    800138b4:	c78d                	beqz	a5,800138de <_etoa+0x6a>
    800138b6:	f8843707          	fld	fa4,-120(s0)
    800138ba:	00006797          	auipc	a5,0x6
    800138be:	1ee78793          	addi	a5,a5,494 # 80019aa8 <pow10.0+0x58>
    800138c2:	239c                	fld	fa5,0(a5)
    800138c4:	a2e797d3          	flt.d	a5,fa5,fa4
    800138c8:	eb99                	bnez	a5,800138de <_etoa+0x6a>
    800138ca:	f8843707          	fld	fa4,-120(s0)
    800138ce:	00006797          	auipc	a5,0x6
    800138d2:	1d278793          	addi	a5,a5,466 # 80019aa0 <pow10.0+0x50>
    800138d6:	239c                	fld	fa5,0(a5)
    800138d8:	a2f717d3          	flt.d	a5,fa4,fa5
    800138dc:	c795                	beqz	a5,80013908 <_etoa+0x94>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    800138de:	f7c42683          	lw	a3,-132(s0)
    800138e2:	f8042783          	lw	a5,-128(s0)
    800138e6:	f8442703          	lw	a4,-124(s0)
    800138ea:	8836                	mv	a6,a3
    800138ec:	f8843507          	fld	fa0,-120(s0)
    800138f0:	f9043683          	ld	a3,-112(s0)
    800138f4:	f9843603          	ld	a2,-104(s0)
    800138f8:	fa043583          	ld	a1,-96(s0)
    800138fc:	fa843503          	ld	a0,-88(s0)
    80013900:	a29ff0ef          	jal	ra,80013328 <_ftoa>
    80013904:	87aa                	mv	a5,a0
    80013906:	a11d                	j	80013d2c <_etoa+0x4b8>
    }

    // determine the sign
    const bool negative = value < 0;
    80013908:	f8843787          	fld	fa5,-120(s0)
    8001390c:	f2000753          	fmv.d.x	fa4,zero
    80013910:	a2e797d3          	flt.d	a5,fa5,fa4
    80013914:	00f037b3          	snez	a5,a5
    80013918:	fef401a3          	sb	a5,-29(s0)
    if (negative) {
    8001391c:	fe344783          	lbu	a5,-29(s0)
    80013920:	0ff7f793          	andi	a5,a5,255
    80013924:	c799                	beqz	a5,80013932 <_etoa+0xbe>
        value = -value;
    80013926:	f8843787          	fld	fa5,-120(s0)
    8001392a:	22f797d3          	fneg.d	fa5,fa5
    8001392e:	f8f43427          	fsd	fa5,-120(s0)
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
    80013932:	f7c42783          	lw	a5,-132(s0)
    80013936:	4007f793          	andi	a5,a5,1024
    8001393a:	2781                	sext.w	a5,a5
    8001393c:	e781                	bnez	a5,80013944 <_etoa+0xd0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    8001393e:	4799                	li	a5,6
    80013940:	f8f42223          	sw	a5,-124(s0)
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F   = value;
    80013944:	f8843787          	fld	fa5,-120(s0)
    80013948:	faf43c27          	fsd	fa5,-72(s0)
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;  // effectively log2
    8001394c:	fb843783          	ld	a5,-72(s0)
    80013950:	93d1                	srli	a5,a5,0x34
    80013952:	2781                	sext.w	a5,a5
    80013954:	7ff7f793          	andi	a5,a5,2047
    80013958:	2781                	sext.w	a5,a5
    8001395a:	c017879b          	addiw	a5,a5,-1023
    8001395e:	fcf42e23          	sw	a5,-36(s0)
    conv.U   = (conv.U & ((1ULL << 52U) - 1U)) |
    80013962:	fb843703          	ld	a4,-72(s0)
    80013966:	57fd                	li	a5,-1
    80013968:	83b1                	srli	a5,a5,0xc
    8001396a:	8f7d                	and	a4,a4,a5
    8001396c:	3ff00793          	li	a5,1023
    80013970:	17d2                	slli	a5,a5,0x34
    80013972:	8fd9                	or	a5,a5,a4
    80013974:	faf43c23          	sd	a5,-72(s0)
             (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    // now approximate log10 from the log2 integer part and an expansion of ln
    // around 1.5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    80013978:	fdc42783          	lw	a5,-36(s0)
    8001397c:	d2078753          	fcvt.d.w	fa4,a5
    80013980:	00006797          	auipc	a5,0x6
    80013984:	14878793          	addi	a5,a5,328 # 80019ac8 <pow10.0+0x78>
    80013988:	239c                	fld	fa5,0(a5)
    8001398a:	12f77753          	fmul.d	fa4,fa4,fa5
    8001398e:	00006797          	auipc	a5,0x6
    80013992:	14278793          	addi	a5,a5,322 # 80019ad0 <pow10.0+0x80>
    80013996:	239c                	fld	fa5,0(a5)
    80013998:	02f77753          	fadd.d	fa4,fa4,fa5
                       (conv.F - 1.5) * 0.289529654602168);
    8001399c:	fb843687          	fld	fa3,-72(s0)
    800139a0:	00006797          	auipc	a5,0x6
    800139a4:	13878793          	addi	a5,a5,312 # 80019ad8 <pow10.0+0x88>
    800139a8:	239c                	fld	fa5,0(a5)
    800139aa:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    800139ae:	00006797          	auipc	a5,0x6
    800139b2:	13278793          	addi	a5,a5,306 # 80019ae0 <pow10.0+0x90>
    800139b6:	239c                	fld	fa5,0(a5)
    800139b8:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    800139bc:	02f777d3          	fadd.d	fa5,fa4,fa5
    800139c0:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    800139c4:	fef42623          	sw	a5,-20(s0)
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2            = (int)(expval * 3.321928094887362 + 0.5);
    800139c8:	fec42783          	lw	a5,-20(s0)
    800139cc:	d2078753          	fcvt.d.w	fa4,a5
    800139d0:	00006797          	auipc	a5,0x6
    800139d4:	11878793          	addi	a5,a5,280 # 80019ae8 <pow10.0+0x98>
    800139d8:	239c                	fld	fa5,0(a5)
    800139da:	12f77753          	fmul.d	fa4,fa4,fa5
    800139de:	00006797          	auipc	a5,0x6
    800139e2:	0e278793          	addi	a5,a5,226 # 80019ac0 <pow10.0+0x70>
    800139e6:	239c                	fld	fa5,0(a5)
    800139e8:	02f777d3          	fadd.d	fa5,fa4,fa5
    800139ec:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    800139f0:	fcf42e23          	sw	a5,-36(s0)
    const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    800139f4:	fec42783          	lw	a5,-20(s0)
    800139f8:	d2078753          	fcvt.d.w	fa4,a5
    800139fc:	00006797          	auipc	a5,0x6
    80013a00:	0f478793          	addi	a5,a5,244 # 80019af0 <pow10.0+0xa0>
    80013a04:	239c                	fld	fa5,0(a5)
    80013a06:	12f77753          	fmul.d	fa4,fa4,fa5
    80013a0a:	fdc42783          	lw	a5,-36(s0)
    80013a0e:	d20786d3          	fcvt.d.w	fa3,a5
    80013a12:	00006797          	auipc	a5,0x6
    80013a16:	0e678793          	addi	a5,a5,230 # 80019af8 <pow10.0+0xa8>
    80013a1a:	239c                	fld	fa5,0(a5)
    80013a1c:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    80013a20:	0af777d3          	fsub.d	fa5,fa4,fa5
    80013a24:	fcf43827          	fsd	fa5,-48(s0)
    const double z2 = z * z;
    80013a28:	fd043787          	fld	fa5,-48(s0)
    80013a2c:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    80013a30:	fcf43427          	fsd	fa5,-56(s0)
    conv.U          = (uint64_t)(exp2 + 1023) << 52U;
    80013a34:	fdc42783          	lw	a5,-36(s0)
    80013a38:	3ff7879b          	addiw	a5,a5,1023
    80013a3c:	2781                	sext.w	a5,a5
    80013a3e:	17d2                	slli	a5,a5,0x34
    80013a40:	faf43c23          	sd	a5,-72(s0)
    // compute exp(z) using continued fractions, see
    // https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    80013a44:	fb843707          	fld	fa4,-72(s0)
    80013a48:	fd043787          	fld	fa5,-48(s0)
    80013a4c:	02f7f6d3          	fadd.d	fa3,fa5,fa5
    80013a50:	00006797          	auipc	a5,0x6
    80013a54:	0b078793          	addi	a5,a5,176 # 80019b00 <pow10.0+0xb0>
    80013a58:	2390                	fld	fa2,0(a5)
    80013a5a:	fd043787          	fld	fa5,-48(s0)
    80013a5e:	0af67653          	fsub.d	fa2,fa2,fa5
    80013a62:	fc843587          	fld	fa1,-56(s0)
    80013a66:	00006797          	auipc	a5,0x6
    80013a6a:	0a278793          	addi	a5,a5,162 # 80019b08 <pow10.0+0xb8>
    80013a6e:	239c                	fld	fa5,0(a5)
    80013a70:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    80013a74:	00006797          	auipc	a5,0x6
    80013a78:	09c78793          	addi	a5,a5,156 # 80019b10 <pow10.0+0xc0>
    80013a7c:	239c                	fld	fa5,0(a5)
    80013a7e:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    80013a82:	fc843587          	fld	fa1,-56(s0)
    80013a86:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    80013a8a:	00006797          	auipc	a5,0x6
    80013a8e:	08e78793          	addi	a5,a5,142 # 80019b18 <pow10.0+0xc8>
    80013a92:	239c                	fld	fa5,0(a5)
    80013a94:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    80013a98:	fc843587          	fld	fa1,-56(s0)
    80013a9c:	1af5f7d3          	fdiv.d	fa5,fa1,fa5
    80013aa0:	02f677d3          	fadd.d	fa5,fa2,fa5
    80013aa4:	1af6f6d3          	fdiv.d	fa3,fa3,fa5
    80013aa8:	00006797          	auipc	a5,0x6
    80013aac:	07878793          	addi	a5,a5,120 # 80019b20 <pow10.0+0xd0>
    80013ab0:	239c                	fld	fa5,0(a5)
    80013ab2:	02f6f7d3          	fadd.d	fa5,fa3,fa5
    80013ab6:	12f777d3          	fmul.d	fa5,fa4,fa5
    80013aba:	faf43c27          	fsd	fa5,-72(s0)
    // correct for rounding errors
    if (value < conv.F) {
    80013abe:	fb843787          	fld	fa5,-72(s0)
    80013ac2:	f8843707          	fld	fa4,-120(s0)
    80013ac6:	a2f717d3          	flt.d	a5,fa4,fa5
    80013aca:	c38d                	beqz	a5,80013aec <_etoa+0x278>
        expval--;
    80013acc:	fec42783          	lw	a5,-20(s0)
    80013ad0:	37fd                	addiw	a5,a5,-1
    80013ad2:	fef42623          	sw	a5,-20(s0)
        conv.F /= 10;
    80013ad6:	fb843707          	fld	fa4,-72(s0)
    80013ada:	00006797          	auipc	a5,0x6
    80013ade:	03678793          	addi	a5,a5,54 # 80019b10 <pow10.0+0xc0>
    80013ae2:	239c                	fld	fa5,0(a5)
    80013ae4:	1af777d3          	fdiv.d	fa5,fa4,fa5
    80013ae8:	faf43c27          	fsd	fa5,-72(s0)
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside
    // 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    80013aec:	fec42783          	lw	a5,-20(s0)
    80013af0:	0007871b          	sext.w	a4,a5
    80013af4:	06300793          	li	a5,99
    80013af8:	00e7cc63          	blt	a5,a4,80013b10 <_etoa+0x29c>
    80013afc:	fec42783          	lw	a5,-20(s0)
    80013b00:	0007871b          	sext.w	a4,a5
    80013b04:	f9d00793          	li	a5,-99
    80013b08:	00f74463          	blt	a4,a5,80013b10 <_etoa+0x29c>
    80013b0c:	4791                	li	a5,4
    80013b0e:	a011                	j	80013b12 <_etoa+0x29e>
    80013b10:	4795                	li	a5,5
    80013b12:	fef42423          	sw	a5,-24(s0)

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
    80013b16:	f7c42703          	lw	a4,-132(s0)
    80013b1a:	6785                	lui	a5,0x1
    80013b1c:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    80013b20:	8ff9                	and	a5,a5,a4
    80013b22:	2781                	sext.w	a5,a5
    80013b24:	c7c1                	beqz	a5,80013bac <_etoa+0x338>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
    80013b26:	f8843707          	fld	fa4,-120(s0)
    80013b2a:	00006797          	auipc	a5,0x6
    80013b2e:	ffe78793          	addi	a5,a5,-2 # 80019b28 <pow10.0+0xd8>
    80013b32:	239c                	fld	fa5,0(a5)
    80013b34:	a2e787d3          	fle.d	a5,fa5,fa4
    80013b38:	cbb9                	beqz	a5,80013b8e <_etoa+0x31a>
    80013b3a:	f8843707          	fld	fa4,-120(s0)
    80013b3e:	00006797          	auipc	a5,0x6
    80013b42:	ff278793          	addi	a5,a5,-14 # 80019b30 <pow10.0+0xe0>
    80013b46:	239c                	fld	fa5,0(a5)
    80013b48:	a2f717d3          	flt.d	a5,fa4,fa5
    80013b4c:	c3a9                	beqz	a5,80013b8e <_etoa+0x31a>
            if ((int)prec > expval) {
    80013b4e:	f8442703          	lw	a4,-124(s0)
    80013b52:	fec42783          	lw	a5,-20(s0)
    80013b56:	2781                	sext.w	a5,a5
    80013b58:	00e7de63          	bge	a5,a4,80013b74 <_etoa+0x300>
                prec = (unsigned)((int)prec - expval - 1);
    80013b5c:	f8442703          	lw	a4,-124(s0)
    80013b60:	fec42783          	lw	a5,-20(s0)
    80013b64:	40f707bb          	subw	a5,a4,a5
    80013b68:	2781                	sext.w	a5,a5
    80013b6a:	37fd                	addiw	a5,a5,-1
    80013b6c:	2781                	sext.w	a5,a5
    80013b6e:	f8f42223          	sw	a5,-124(s0)
    80013b72:	a019                	j	80013b78 <_etoa+0x304>
            }
            else {
                prec = 0;
    80013b74:	f8042223          	sw	zero,-124(s0)
            }
            flags |= FLAGS_PRECISION;  // make sure _ftoa respects precision
    80013b78:	f7c42783          	lw	a5,-132(s0)
    80013b7c:	4007e793          	ori	a5,a5,1024
    80013b80:	f6f42e23          	sw	a5,-132(s0)
            // no characters in exponent
            minwidth = 0U;
    80013b84:	fe042423          	sw	zero,-24(s0)
            expval   = 0;
    80013b88:	fe042623          	sw	zero,-20(s0)
    80013b8c:	a005                	j	80013bac <_etoa+0x338>
        }
        else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    80013b8e:	f8442783          	lw	a5,-124(s0)
    80013b92:	2781                	sext.w	a5,a5
    80013b94:	cf81                	beqz	a5,80013bac <_etoa+0x338>
    80013b96:	f7c42783          	lw	a5,-132(s0)
    80013b9a:	4007f793          	andi	a5,a5,1024
    80013b9e:	2781                	sext.w	a5,a5
    80013ba0:	c791                	beqz	a5,80013bac <_etoa+0x338>
                --prec;
    80013ba2:	f8442783          	lw	a5,-124(s0)
    80013ba6:	37fd                	addiw	a5,a5,-1
    80013ba8:	f8f42223          	sw	a5,-124(s0)
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
    80013bac:	f8042783          	lw	a5,-128(s0)
    80013bb0:	fef42223          	sw	a5,-28(s0)
    if (width > minwidth) {
    80013bb4:	f8042703          	lw	a4,-128(s0)
    80013bb8:	fe842783          	lw	a5,-24(s0)
    80013bbc:	2701                	sext.w	a4,a4
    80013bbe:	2781                	sext.w	a5,a5
    80013bc0:	00e7fb63          	bgeu	a5,a4,80013bd6 <_etoa+0x362>
        // we didn't fall-back so subtract the characters required for the
        // exponent
        fwidth -= minwidth;
    80013bc4:	fe442703          	lw	a4,-28(s0)
    80013bc8:	fe842783          	lw	a5,-24(s0)
    80013bcc:	40f707bb          	subw	a5,a4,a5
    80013bd0:	fef42223          	sw	a5,-28(s0)
    80013bd4:	a019                	j	80013bda <_etoa+0x366>
    }
    else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
    80013bd6:	fe042223          	sw	zero,-28(s0)
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
    80013bda:	f7c42783          	lw	a5,-132(s0)
    80013bde:	8b89                	andi	a5,a5,2
    80013be0:	2781                	sext.w	a5,a5
    80013be2:	c799                	beqz	a5,80013bf0 <_etoa+0x37c>
    80013be4:	fe842783          	lw	a5,-24(s0)
    80013be8:	2781                	sext.w	a5,a5
    80013bea:	c399                	beqz	a5,80013bf0 <_etoa+0x37c>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
    80013bec:	fe042223          	sw	zero,-28(s0)
    }

    // rescale the float value
    if (expval) {
    80013bf0:	fec42783          	lw	a5,-20(s0)
    80013bf4:	2781                	sext.w	a5,a5
    80013bf6:	cb89                	beqz	a5,80013c08 <_etoa+0x394>
        value /= conv.F;
    80013bf8:	fb843787          	fld	fa5,-72(s0)
    80013bfc:	f8843707          	fld	fa4,-120(s0)
    80013c00:	1af777d3          	fdiv.d	fa5,fa4,fa5
    80013c04:	f8f43427          	fsd	fa5,-120(s0)
    }

    // output the floating part
    const size_t start_idx = idx;
    80013c08:	f9843783          	ld	a5,-104(s0)
    80013c0c:	fcf43023          	sd	a5,-64(s0)
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec,
    80013c10:	fe344783          	lbu	a5,-29(s0)
    80013c14:	0ff7f793          	andi	a5,a5,255
    80013c18:	c791                	beqz	a5,80013c24 <_etoa+0x3b0>
    80013c1a:	f8843787          	fld	fa5,-120(s0)
    80013c1e:	22f797d3          	fneg.d	fa5,fa5
    80013c22:	a019                	j	80013c28 <_etoa+0x3b4>
    80013c24:	f8843787          	fld	fa5,-120(s0)
    80013c28:	f7c42703          	lw	a4,-132(s0)
    80013c2c:	77fd                	lui	a5,0xfffff
    80013c2e:	7ff78793          	addi	a5,a5,2047 # fffffffffffff7ff <_heap_end+0xffffffff77fef7ff>
    80013c32:	8ff9                	and	a5,a5,a4
    80013c34:	0007869b          	sext.w	a3,a5
    80013c38:	fe442783          	lw	a5,-28(s0)
    80013c3c:	f8442703          	lw	a4,-124(s0)
    80013c40:	8836                	mv	a6,a3
    80013c42:	22f78553          	fmv.d	fa0,fa5
    80013c46:	f9043683          	ld	a3,-112(s0)
    80013c4a:	f9843603          	ld	a2,-104(s0)
    80013c4e:	fa043583          	ld	a1,-96(s0)
    80013c52:	fa843503          	ld	a0,-88(s0)
    80013c56:	ed2ff0ef          	jal	ra,80013328 <_ftoa>
    80013c5a:	f8a43c23          	sd	a0,-104(s0)
                fwidth, flags & ~FLAGS_ADAPT_EXP);

    // output the exponent part
    if (minwidth) {
    80013c5e:	fe842783          	lw	a5,-24(s0)
    80013c62:	2781                	sext.w	a5,a5
    80013c64:	c3f1                	beqz	a5,80013d28 <_etoa+0x4b4>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    80013c66:	f7c42783          	lw	a5,-132(s0)
    80013c6a:	0207f793          	andi	a5,a5,32
    80013c6e:	2781                	sext.w	a5,a5
    80013c70:	c781                	beqz	a5,80013c78 <_etoa+0x404>
    80013c72:	04500793          	li	a5,69
    80013c76:	a019                	j	80013c7c <_etoa+0x408>
    80013c78:	06500793          	li	a5,101
    80013c7c:	f9843703          	ld	a4,-104(s0)
    80013c80:	00170693          	addi	a3,a4,1
    80013c84:	f8d43c23          	sd	a3,-104(s0)
    80013c88:	fa843803          	ld	a6,-88(s0)
    80013c8c:	f9043683          	ld	a3,-112(s0)
    80013c90:	863a                	mv	a2,a4
    80013c92:	fa043583          	ld	a1,-96(s0)
    80013c96:	853e                	mv	a0,a5
    80013c98:	9802                	jalr	a6
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen,
                         (expval < 0) ? -expval : expval, expval < 0, 10, 0,
    80013c9a:	fec42783          	lw	a5,-20(s0)
    80013c9e:	41f7d79b          	sraiw	a5,a5,0x1f
    80013ca2:	fec42703          	lw	a4,-20(s0)
    80013ca6:	8f3d                	xor	a4,a4,a5
    80013ca8:	40f707bb          	subw	a5,a4,a5
    80013cac:	2781                	sext.w	a5,a5
        idx = _ntoa_long(out, buffer, idx, maxlen,
    80013cae:	863e                	mv	a2,a5
    80013cb0:	fec42783          	lw	a5,-20(s0)
    80013cb4:	01f7d79b          	srliw	a5,a5,0x1f
    80013cb8:	0ff7f693          	andi	a3,a5,255
    80013cbc:	fe842783          	lw	a5,-24(s0)
    80013cc0:	37fd                	addiw	a5,a5,-1
    80013cc2:	2781                	sext.w	a5,a5
    80013cc4:	4715                	li	a4,5
    80013cc6:	e43a                	sd	a4,8(sp)
    80013cc8:	e03e                	sd	a5,0(sp)
    80013cca:	4881                	li	a7,0
    80013ccc:	4829                	li	a6,10
    80013cce:	87b6                	mv	a5,a3
    80013cd0:	8732                	mv	a4,a2
    80013cd2:	f9043683          	ld	a3,-112(s0)
    80013cd6:	f9843603          	ld	a2,-104(s0)
    80013cda:	fa043583          	ld	a1,-96(s0)
    80013cde:	fa843503          	ld	a0,-88(s0)
    80013ce2:	c16ff0ef          	jal	ra,800130f8 <_ntoa_long>
    80013ce6:	f8a43c23          	sd	a0,-104(s0)
                         minwidth - 1, FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
    80013cea:	f7c42783          	lw	a5,-132(s0)
    80013cee:	8b89                	andi	a5,a5,2
    80013cf0:	2781                	sext.w	a5,a5
    80013cf2:	cb9d                	beqz	a5,80013d28 <_etoa+0x4b4>
            while (idx - start_idx < width)
    80013cf4:	a00d                	j	80013d16 <_etoa+0x4a2>
                out(' ', buffer, idx++, maxlen);
    80013cf6:	f9843783          	ld	a5,-104(s0)
    80013cfa:	00178713          	addi	a4,a5,1
    80013cfe:	f8e43c23          	sd	a4,-104(s0)
    80013d02:	fa843703          	ld	a4,-88(s0)
    80013d06:	f9043683          	ld	a3,-112(s0)
    80013d0a:	863e                	mv	a2,a5
    80013d0c:	fa043583          	ld	a1,-96(s0)
    80013d10:	02000513          	li	a0,32
    80013d14:	9702                	jalr	a4
            while (idx - start_idx < width)
    80013d16:	f9843703          	ld	a4,-104(s0)
    80013d1a:	fc043783          	ld	a5,-64(s0)
    80013d1e:	8f1d                	sub	a4,a4,a5
    80013d20:	f8046783          	lwu	a5,-128(s0)
    80013d24:	fcf769e3          	bltu	a4,a5,80013cf6 <_etoa+0x482>
        }
    }
    return idx;
    80013d28:	f9843783          	ld	a5,-104(s0)
}
    80013d2c:	853e                	mv	a0,a5
    80013d2e:	60ea                	ld	ra,152(sp)
    80013d30:	644a                	ld	s0,144(sp)
    80013d32:	610d                	addi	sp,sp,160
    80013d34:	8082                	ret

0000000080013d36 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen,
                      const char *format, va_list va)
{
    80013d36:	7135                	addi	sp,sp,-160
    80013d38:	ed06                	sd	ra,152(sp)
    80013d3a:	e922                	sd	s0,144(sp)
    80013d3c:	1100                	addi	s0,sp,160
    80013d3e:	f8a43c23          	sd	a0,-104(s0)
    80013d42:	f8b43823          	sd	a1,-112(s0)
    80013d46:	f8c43423          	sd	a2,-120(s0)
    80013d4a:	f8d43023          	sd	a3,-128(s0)
    80013d4e:	f6e43c23          	sd	a4,-136(s0)
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
    80013d52:	fc043c23          	sd	zero,-40(s0)

    if (!buffer) {
    80013d56:	f9043783          	ld	a5,-112(s0)
    80013d5a:	380792e3          	bnez	a5,800148de <_vsnprintf+0xba8>
        // use null output function
        out = _out_null;
    80013d5e:	fffff797          	auipc	a5,0xfffff
    80013d62:	e5878793          	addi	a5,a5,-424 # 80012bb6 <_out_null>
    80013d66:	f8f43c23          	sd	a5,-104(s0)
    }

    while (*format) {
    80013d6a:	3750006f          	j	800148de <_vsnprintf+0xba8>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
    80013d6e:	f8043783          	ld	a5,-128(s0)
    80013d72:	0007c783          	lbu	a5,0(a5)
    80013d76:	873e                	mv	a4,a5
    80013d78:	02500793          	li	a5,37
    80013d7c:	02f70b63          	beq	a4,a5,80013db2 <_vsnprintf+0x7c>
            // no
            out(*format, buffer, idx++, maxlen);
    80013d80:	f8043783          	ld	a5,-128(s0)
    80013d84:	0007c503          	lbu	a0,0(a5)
    80013d88:	fd843783          	ld	a5,-40(s0)
    80013d8c:	00178713          	addi	a4,a5,1
    80013d90:	fce43c23          	sd	a4,-40(s0)
    80013d94:	f9843703          	ld	a4,-104(s0)
    80013d98:	f8843683          	ld	a3,-120(s0)
    80013d9c:	863e                	mv	a2,a5
    80013d9e:	f9043583          	ld	a1,-112(s0)
    80013da2:	9702                	jalr	a4
            format++;
    80013da4:	f8043783          	ld	a5,-128(s0)
    80013da8:	0785                	addi	a5,a5,1
    80013daa:	f8f43023          	sd	a5,-128(s0)
            continue;
    80013dae:	3310006f          	j	800148de <_vsnprintf+0xba8>
        }
        else {
            // yes, evaluate it
            format++;
    80013db2:	f8043783          	ld	a5,-128(s0)
    80013db6:	0785                	addi	a5,a5,1
    80013db8:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate flags
        flags = 0U;
    80013dbc:	fe042623          	sw	zero,-20(s0)
        do {
            switch (*format) {
    80013dc0:	f8043783          	ld	a5,-128(s0)
    80013dc4:	0007c783          	lbu	a5,0(a5)
    80013dc8:	2781                	sext.w	a5,a5
    80013dca:	fe07869b          	addiw	a3,a5,-32
    80013dce:	0006871b          	sext.w	a4,a3
    80013dd2:	47c1                	li	a5,16
    80013dd4:	0ce7e063          	bltu	a5,a4,80013e94 <_vsnprintf+0x15e>
    80013dd8:	02069793          	slli	a5,a3,0x20
    80013ddc:	9381                	srli	a5,a5,0x20
    80013dde:	00279713          	slli	a4,a5,0x2
    80013de2:	00006797          	auipc	a5,0x6
    80013de6:	a8a78793          	addi	a5,a5,-1398 # 8001986c <SYSCALLS+0x86c>
    80013dea:	97ba                	add	a5,a5,a4
    80013dec:	439c                	lw	a5,0(a5)
    80013dee:	0007871b          	sext.w	a4,a5
    80013df2:	00006797          	auipc	a5,0x6
    80013df6:	a7a78793          	addi	a5,a5,-1414 # 8001986c <SYSCALLS+0x86c>
    80013dfa:	97ba                	add	a5,a5,a4
    80013dfc:	8782                	jr	a5
                case '0':
                    flags |= FLAGS_ZEROPAD;
    80013dfe:	fec42783          	lw	a5,-20(s0)
    80013e02:	0017e793          	ori	a5,a5,1
    80013e06:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013e0a:	f8043783          	ld	a5,-128(s0)
    80013e0e:	0785                	addi	a5,a5,1
    80013e10:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013e14:	4785                	li	a5,1
    80013e16:	fef42023          	sw	a5,-32(s0)
                    break;
    80013e1a:	a041                	j	80013e9a <_vsnprintf+0x164>
                case '-':
                    flags |= FLAGS_LEFT;
    80013e1c:	fec42783          	lw	a5,-20(s0)
    80013e20:	0027e793          	ori	a5,a5,2
    80013e24:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013e28:	f8043783          	ld	a5,-128(s0)
    80013e2c:	0785                	addi	a5,a5,1
    80013e2e:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013e32:	4785                	li	a5,1
    80013e34:	fef42023          	sw	a5,-32(s0)
                    break;
    80013e38:	a08d                	j	80013e9a <_vsnprintf+0x164>
                case '+':
                    flags |= FLAGS_PLUS;
    80013e3a:	fec42783          	lw	a5,-20(s0)
    80013e3e:	0047e793          	ori	a5,a5,4
    80013e42:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013e46:	f8043783          	ld	a5,-128(s0)
    80013e4a:	0785                	addi	a5,a5,1
    80013e4c:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013e50:	4785                	li	a5,1
    80013e52:	fef42023          	sw	a5,-32(s0)
                    break;
    80013e56:	a091                	j	80013e9a <_vsnprintf+0x164>
                case ' ':
                    flags |= FLAGS_SPACE;
    80013e58:	fec42783          	lw	a5,-20(s0)
    80013e5c:	0087e793          	ori	a5,a5,8
    80013e60:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013e64:	f8043783          	ld	a5,-128(s0)
    80013e68:	0785                	addi	a5,a5,1
    80013e6a:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013e6e:	4785                	li	a5,1
    80013e70:	fef42023          	sw	a5,-32(s0)
                    break;
    80013e74:	a01d                	j	80013e9a <_vsnprintf+0x164>
                case '#':
                    flags |= FLAGS_HASH;
    80013e76:	fec42783          	lw	a5,-20(s0)
    80013e7a:	0107e793          	ori	a5,a5,16
    80013e7e:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013e82:	f8043783          	ld	a5,-128(s0)
    80013e86:	0785                	addi	a5,a5,1
    80013e88:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013e8c:	4785                	li	a5,1
    80013e8e:	fef42023          	sw	a5,-32(s0)
                    break;
    80013e92:	a021                	j	80013e9a <_vsnprintf+0x164>
                default:
                    n = 0U;
    80013e94:	fe042023          	sw	zero,-32(s0)
                    break;
    80013e98:	0001                	nop
            }
        } while (n);
    80013e9a:	fe042783          	lw	a5,-32(s0)
    80013e9e:	2781                	sext.w	a5,a5
    80013ea0:	f385                	bnez	a5,80013dc0 <_vsnprintf+0x8a>

        // evaluate width field
        width = 0U;
    80013ea2:	fe042423          	sw	zero,-24(s0)
        if (_is_digit(*format)) {
    80013ea6:	f8043783          	ld	a5,-128(s0)
    80013eaa:	0007c783          	lbu	a5,0(a5)
    80013eae:	853e                	mv	a0,a5
    80013eb0:	df3fe0ef          	jal	ra,80012ca2 <_is_digit>
    80013eb4:	87aa                	mv	a5,a0
    80013eb6:	cb91                	beqz	a5,80013eca <_vsnprintf+0x194>
            width = _atoi(&format);
    80013eb8:	f8040793          	addi	a5,s0,-128
    80013ebc:	853e                	mv	a0,a5
    80013ebe:	e25fe0ef          	jal	ra,80012ce2 <_atoi>
    80013ec2:	87aa                	mv	a5,a0
    80013ec4:	fef42423          	sw	a5,-24(s0)
    80013ec8:	a8b9                	j	80013f26 <_vsnprintf+0x1f0>
        }
        else if (*format == '*') {
    80013eca:	f8043783          	ld	a5,-128(s0)
    80013ece:	0007c783          	lbu	a5,0(a5)
    80013ed2:	873e                	mv	a4,a5
    80013ed4:	02a00793          	li	a5,42
    80013ed8:	04f71763          	bne	a4,a5,80013f26 <_vsnprintf+0x1f0>
            const int w = va_arg(va, int);
    80013edc:	f7843783          	ld	a5,-136(s0)
    80013ee0:	00878713          	addi	a4,a5,8
    80013ee4:	f6e43c23          	sd	a4,-136(s0)
    80013ee8:	439c                	lw	a5,0(a5)
    80013eea:	fcf42023          	sw	a5,-64(s0)
            if (w < 0) {
    80013eee:	fc042783          	lw	a5,-64(s0)
    80013ef2:	2781                	sext.w	a5,a5
    80013ef4:	0207d063          	bgez	a5,80013f14 <_vsnprintf+0x1de>
                flags |= FLAGS_LEFT;  // reverse padding
    80013ef8:	fec42783          	lw	a5,-20(s0)
    80013efc:	0027e793          	ori	a5,a5,2
    80013f00:	fef42623          	sw	a5,-20(s0)
                width = (unsigned int)-w;
    80013f04:	fc042783          	lw	a5,-64(s0)
    80013f08:	40f007bb          	negw	a5,a5
    80013f0c:	2781                	sext.w	a5,a5
    80013f0e:	fef42423          	sw	a5,-24(s0)
    80013f12:	a029                	j	80013f1c <_vsnprintf+0x1e6>
            }
            else {
                width = (unsigned int)w;
    80013f14:	fc042783          	lw	a5,-64(s0)
    80013f18:	fef42423          	sw	a5,-24(s0)
            }
            format++;
    80013f1c:	f8043783          	ld	a5,-128(s0)
    80013f20:	0785                	addi	a5,a5,1
    80013f22:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate precision field
        precision = 0U;
    80013f26:	fe042223          	sw	zero,-28(s0)
        if (*format == '.') {
    80013f2a:	f8043783          	ld	a5,-128(s0)
    80013f2e:	0007c783          	lbu	a5,0(a5)
    80013f32:	873e                	mv	a4,a5
    80013f34:	02e00793          	li	a5,46
    80013f38:	08f71063          	bne	a4,a5,80013fb8 <_vsnprintf+0x282>
            flags |= FLAGS_PRECISION;
    80013f3c:	fec42783          	lw	a5,-20(s0)
    80013f40:	4007e793          	ori	a5,a5,1024
    80013f44:	fef42623          	sw	a5,-20(s0)
            format++;
    80013f48:	f8043783          	ld	a5,-128(s0)
    80013f4c:	0785                	addi	a5,a5,1
    80013f4e:	f8f43023          	sd	a5,-128(s0)
            if (_is_digit(*format)) {
    80013f52:	f8043783          	ld	a5,-128(s0)
    80013f56:	0007c783          	lbu	a5,0(a5)
    80013f5a:	853e                	mv	a0,a5
    80013f5c:	d47fe0ef          	jal	ra,80012ca2 <_is_digit>
    80013f60:	87aa                	mv	a5,a0
    80013f62:	cb91                	beqz	a5,80013f76 <_vsnprintf+0x240>
                precision = _atoi(&format);
    80013f64:	f8040793          	addi	a5,s0,-128
    80013f68:	853e                	mv	a0,a5
    80013f6a:	d79fe0ef          	jal	ra,80012ce2 <_atoi>
    80013f6e:	87aa                	mv	a5,a0
    80013f70:	fef42223          	sw	a5,-28(s0)
    80013f74:	a091                	j	80013fb8 <_vsnprintf+0x282>
            }
            else if (*format == '*') {
    80013f76:	f8043783          	ld	a5,-128(s0)
    80013f7a:	0007c783          	lbu	a5,0(a5)
    80013f7e:	873e                	mv	a4,a5
    80013f80:	02a00793          	li	a5,42
    80013f84:	02f71a63          	bne	a4,a5,80013fb8 <_vsnprintf+0x282>
                const int prec = (int)va_arg(va, int);
    80013f88:	f7843783          	ld	a5,-136(s0)
    80013f8c:	00878713          	addi	a4,a5,8
    80013f90:	f6e43c23          	sd	a4,-136(s0)
    80013f94:	439c                	lw	a5,0(a5)
    80013f96:	faf42e23          	sw	a5,-68(s0)
                precision      = prec > 0 ? (unsigned int)prec : 0U;
    80013f9a:	fbc42783          	lw	a5,-68(s0)
    80013f9e:	0007871b          	sext.w	a4,a5
    80013fa2:	00075363          	bgez	a4,80013fa8 <_vsnprintf+0x272>
    80013fa6:	4781                	li	a5,0
    80013fa8:	2781                	sext.w	a5,a5
    80013faa:	fef42223          	sw	a5,-28(s0)
                format++;
    80013fae:	f8043783          	ld	a5,-128(s0)
    80013fb2:	0785                	addi	a5,a5,1
    80013fb4:	f8f43023          	sd	a5,-128(s0)
            }
        }

        // evaluate length field
        switch (*format) {
    80013fb8:	f8043783          	ld	a5,-128(s0)
    80013fbc:	0007c783          	lbu	a5,0(a5)
    80013fc0:	2781                	sext.w	a5,a5
    80013fc2:	f987869b          	addiw	a3,a5,-104
    80013fc6:	0006871b          	sext.w	a4,a3
    80013fca:	47c9                	li	a5,18
    80013fcc:	0ee7e963          	bltu	a5,a4,800140be <_vsnprintf+0x388>
    80013fd0:	02069793          	slli	a5,a3,0x20
    80013fd4:	9381                	srli	a5,a5,0x20
    80013fd6:	00279713          	slli	a4,a5,0x2
    80013fda:	00006797          	auipc	a5,0x6
    80013fde:	8d678793          	addi	a5,a5,-1834 # 800198b0 <SYSCALLS+0x8b0>
    80013fe2:	97ba                	add	a5,a5,a4
    80013fe4:	439c                	lw	a5,0(a5)
    80013fe6:	0007871b          	sext.w	a4,a5
    80013fea:	00006797          	auipc	a5,0x6
    80013fee:	8c678793          	addi	a5,a5,-1850 # 800198b0 <SYSCALLS+0x8b0>
    80013ff2:	97ba                	add	a5,a5,a4
    80013ff4:	8782                	jr	a5
            case 'l':
                flags |= FLAGS_LONG;
    80013ff6:	fec42783          	lw	a5,-20(s0)
    80013ffa:	1007e793          	ori	a5,a5,256
    80013ffe:	fef42623          	sw	a5,-20(s0)
                format++;
    80014002:	f8043783          	ld	a5,-128(s0)
    80014006:	0785                	addi	a5,a5,1
    80014008:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'l') {
    8001400c:	f8043783          	ld	a5,-128(s0)
    80014010:	0007c783          	lbu	a5,0(a5)
    80014014:	873e                	mv	a4,a5
    80014016:	06c00793          	li	a5,108
    8001401a:	0af71463          	bne	a4,a5,800140c2 <_vsnprintf+0x38c>
                    flags |= FLAGS_LONG_LONG;
    8001401e:	fec42783          	lw	a5,-20(s0)
    80014022:	2007e793          	ori	a5,a5,512
    80014026:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001402a:	f8043783          	ld	a5,-128(s0)
    8001402e:	0785                	addi	a5,a5,1
    80014030:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    80014034:	a079                	j	800140c2 <_vsnprintf+0x38c>
            case 'h':
                flags |= FLAGS_SHORT;
    80014036:	fec42783          	lw	a5,-20(s0)
    8001403a:	0807e793          	ori	a5,a5,128
    8001403e:	fef42623          	sw	a5,-20(s0)
                format++;
    80014042:	f8043783          	ld	a5,-128(s0)
    80014046:	0785                	addi	a5,a5,1
    80014048:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'h') {
    8001404c:	f8043783          	ld	a5,-128(s0)
    80014050:	0007c783          	lbu	a5,0(a5)
    80014054:	873e                	mv	a4,a5
    80014056:	06800793          	li	a5,104
    8001405a:	06f71663          	bne	a4,a5,800140c6 <_vsnprintf+0x390>
                    flags |= FLAGS_CHAR;
    8001405e:	fec42783          	lw	a5,-20(s0)
    80014062:	0407e793          	ori	a5,a5,64
    80014066:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001406a:	f8043783          	ld	a5,-128(s0)
    8001406e:	0785                	addi	a5,a5,1
    80014070:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    80014074:	a889                	j	800140c6 <_vsnprintf+0x390>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
            case 't':
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG
    80014076:	fec42783          	lw	a5,-20(s0)
    8001407a:	1007e793          	ori	a5,a5,256
    8001407e:	fef42623          	sw	a5,-20(s0)
                                                            : FLAGS_LONG_LONG);
                format++;
    80014082:	f8043783          	ld	a5,-128(s0)
    80014086:	0785                	addi	a5,a5,1
    80014088:	f8f43023          	sd	a5,-128(s0)
                break;
    8001408c:	a835                	j	800140c8 <_vsnprintf+0x392>
#endif
            case 'j':
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG
    8001408e:	fec42783          	lw	a5,-20(s0)
    80014092:	1007e793          	ori	a5,a5,256
    80014096:	fef42623          	sw	a5,-20(s0)
                                                           : FLAGS_LONG_LONG);
                format++;
    8001409a:	f8043783          	ld	a5,-128(s0)
    8001409e:	0785                	addi	a5,a5,1
    800140a0:	f8f43023          	sd	a5,-128(s0)
                break;
    800140a4:	a015                	j	800140c8 <_vsnprintf+0x392>
            case 'z':
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG
    800140a6:	fec42783          	lw	a5,-20(s0)
    800140aa:	1007e793          	ori	a5,a5,256
    800140ae:	fef42623          	sw	a5,-20(s0)
                                                         : FLAGS_LONG_LONG);
                format++;
    800140b2:	f8043783          	ld	a5,-128(s0)
    800140b6:	0785                	addi	a5,a5,1
    800140b8:	f8f43023          	sd	a5,-128(s0)
                break;
    800140bc:	a031                	j	800140c8 <_vsnprintf+0x392>
            default:
                break;
    800140be:	0001                	nop
    800140c0:	a021                	j	800140c8 <_vsnprintf+0x392>
                break;
    800140c2:	0001                	nop
    800140c4:	a011                	j	800140c8 <_vsnprintf+0x392>
                break;
    800140c6:	0001                	nop
        }

        // evaluate specifier
        switch (*format) {
    800140c8:	f8043783          	ld	a5,-128(s0)
    800140cc:	0007c783          	lbu	a5,0(a5)
    800140d0:	2781                	sext.w	a5,a5
    800140d2:	fdb7869b          	addiw	a3,a5,-37
    800140d6:	0006871b          	sext.w	a4,a3
    800140da:	05300793          	li	a5,83
    800140de:	7ce7e863          	bltu	a5,a4,800148ae <_vsnprintf+0xb78>
    800140e2:	02069793          	slli	a5,a3,0x20
    800140e6:	9381                	srli	a5,a5,0x20
    800140e8:	00279713          	slli	a4,a5,0x2
    800140ec:	00006797          	auipc	a5,0x6
    800140f0:	81078793          	addi	a5,a5,-2032 # 800198fc <SYSCALLS+0x8fc>
    800140f4:	97ba                	add	a5,a5,a4
    800140f6:	439c                	lw	a5,0(a5)
    800140f8:	0007871b          	sext.w	a4,a5
    800140fc:	00006797          	auipc	a5,0x6
    80014100:	80078793          	addi	a5,a5,-2048 # 800198fc <SYSCALLS+0x8fc>
    80014104:	97ba                	add	a5,a5,a4
    80014106:	8782                	jr	a5
            case 'X':
            case 'o':
            case 'b': {
                // set the base
                unsigned int base;
                if (*format == 'x' || *format == 'X') {
    80014108:	f8043783          	ld	a5,-128(s0)
    8001410c:	0007c783          	lbu	a5,0(a5)
    80014110:	873e                	mv	a4,a5
    80014112:	07800793          	li	a5,120
    80014116:	00f70b63          	beq	a4,a5,8001412c <_vsnprintf+0x3f6>
    8001411a:	f8043783          	ld	a5,-128(s0)
    8001411e:	0007c783          	lbu	a5,0(a5)
    80014122:	873e                	mv	a4,a5
    80014124:	05800793          	li	a5,88
    80014128:	00f71663          	bne	a4,a5,80014134 <_vsnprintf+0x3fe>
                    base = 16U;
    8001412c:	47c1                	li	a5,16
    8001412e:	fcf42a23          	sw	a5,-44(s0)
    80014132:	a099                	j	80014178 <_vsnprintf+0x442>
                }
                else if (*format == 'o') {
    80014134:	f8043783          	ld	a5,-128(s0)
    80014138:	0007c783          	lbu	a5,0(a5)
    8001413c:	873e                	mv	a4,a5
    8001413e:	06f00793          	li	a5,111
    80014142:	00f71663          	bne	a4,a5,8001414e <_vsnprintf+0x418>
                    base = 8U;
    80014146:	47a1                	li	a5,8
    80014148:	fcf42a23          	sw	a5,-44(s0)
    8001414c:	a035                	j	80014178 <_vsnprintf+0x442>
                }
                else if (*format == 'b') {
    8001414e:	f8043783          	ld	a5,-128(s0)
    80014152:	0007c783          	lbu	a5,0(a5)
    80014156:	873e                	mv	a4,a5
    80014158:	06200793          	li	a5,98
    8001415c:	00f71663          	bne	a4,a5,80014168 <_vsnprintf+0x432>
                    base = 2U;
    80014160:	4789                	li	a5,2
    80014162:	fcf42a23          	sw	a5,-44(s0)
    80014166:	a809                	j	80014178 <_vsnprintf+0x442>
                }
                else {
                    base = 10U;
    80014168:	47a9                	li	a5,10
    8001416a:	fcf42a23          	sw	a5,-44(s0)
                    flags &= ~FLAGS_HASH;  // no hash for dec format
    8001416e:	fec42783          	lw	a5,-20(s0)
    80014172:	9bbd                	andi	a5,a5,-17
    80014174:	fef42623          	sw	a5,-20(s0)
                }
                // uppercase
                if (*format == 'X') {
    80014178:	f8043783          	ld	a5,-128(s0)
    8001417c:	0007c783          	lbu	a5,0(a5)
    80014180:	873e                	mv	a4,a5
    80014182:	05800793          	li	a5,88
    80014186:	00f71863          	bne	a4,a5,80014196 <_vsnprintf+0x460>
                    flags |= FLAGS_UPPERCASE;
    8001418a:	fec42783          	lw	a5,-20(s0)
    8001418e:	0207e793          	ori	a5,a5,32
    80014192:	fef42623          	sw	a5,-20(s0)
                }

                // no plus or space flag for u, x, X, o, b
                if ((*format != 'i') && (*format != 'd')) {
    80014196:	f8043783          	ld	a5,-128(s0)
    8001419a:	0007c783          	lbu	a5,0(a5)
    8001419e:	873e                	mv	a4,a5
    800141a0:	06900793          	li	a5,105
    800141a4:	02f70063          	beq	a4,a5,800141c4 <_vsnprintf+0x48e>
    800141a8:	f8043783          	ld	a5,-128(s0)
    800141ac:	0007c783          	lbu	a5,0(a5)
    800141b0:	873e                	mv	a4,a5
    800141b2:	06400793          	li	a5,100
    800141b6:	00f70763          	beq	a4,a5,800141c4 <_vsnprintf+0x48e>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    800141ba:	fec42783          	lw	a5,-20(s0)
    800141be:	9bcd                	andi	a5,a5,-13
    800141c0:	fef42623          	sw	a5,-20(s0)
                }

                // ignore '0' flag when precision is given
                if (flags & FLAGS_PRECISION) {
    800141c4:	fec42783          	lw	a5,-20(s0)
    800141c8:	4007f793          	andi	a5,a5,1024
    800141cc:	2781                	sext.w	a5,a5
    800141ce:	c791                	beqz	a5,800141da <_vsnprintf+0x4a4>
                    flags &= ~FLAGS_ZEROPAD;
    800141d0:	fec42783          	lw	a5,-20(s0)
    800141d4:	9bf9                	andi	a5,a5,-2
    800141d6:	fef42623          	sw	a5,-20(s0)
                }

                // convert the integer
                if ((*format == 'i') || (*format == 'd')) {
    800141da:	f8043783          	ld	a5,-128(s0)
    800141de:	0007c783          	lbu	a5,0(a5)
    800141e2:	873e                	mv	a4,a5
    800141e4:	06900793          	li	a5,105
    800141e8:	00f70b63          	beq	a4,a5,800141fe <_vsnprintf+0x4c8>
    800141ec:	f8043783          	ld	a5,-128(s0)
    800141f0:	0007c783          	lbu	a5,0(a5)
    800141f4:	873e                	mv	a4,a5
    800141f6:	06400793          	li	a5,100
    800141fa:	18f71d63          	bne	a4,a5,80014394 <_vsnprintf+0x65e>
                    // signed
                    if (flags & FLAGS_LONG_LONG) {
    800141fe:	fec42783          	lw	a5,-20(s0)
    80014202:	2007f793          	andi	a5,a5,512
    80014206:	2781                	sext.w	a5,a5
    80014208:	c3bd                	beqz	a5,8001426e <_vsnprintf+0x538>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        const long long value = va_arg(va, long long);
    8001420a:	f7843783          	ld	a5,-136(s0)
    8001420e:	00878713          	addi	a4,a5,8
    80014212:	f6e43c23          	sd	a4,-136(s0)
    80014216:	639c                	ld	a5,0(a5)
    80014218:	faf43023          	sd	a5,-96(s0)
                        idx                   = _ntoa_long_long(
                                              out, buffer, idx, maxlen,
                                              (unsigned long long)(value > 0 ? value : 0 - value),
    8001421c:	fa043783          	ld	a5,-96(s0)
    80014220:	43f7d713          	srai	a4,a5,0x3f
    80014224:	fa043783          	ld	a5,-96(s0)
    80014228:	8fb9                	xor	a5,a5,a4
    8001422a:	8f99                	sub	a5,a5,a4
                        idx                   = _ntoa_long_long(
    8001422c:	85be                	mv	a1,a5
    8001422e:	fa043783          	ld	a5,-96(s0)
    80014232:	93fd                	srli	a5,a5,0x3f
    80014234:	0ff7f713          	andi	a4,a5,255
    80014238:	fd446683          	lwu	a3,-44(s0)
    8001423c:	fe442603          	lw	a2,-28(s0)
    80014240:	fec42783          	lw	a5,-20(s0)
    80014244:	e43e                	sd	a5,8(sp)
    80014246:	fe842783          	lw	a5,-24(s0)
    8001424a:	e03e                	sd	a5,0(sp)
    8001424c:	88b2                	mv	a7,a2
    8001424e:	8836                	mv	a6,a3
    80014250:	87ba                	mv	a5,a4
    80014252:	872e                	mv	a4,a1
    80014254:	f8843683          	ld	a3,-120(s0)
    80014258:	fd843603          	ld	a2,-40(s0)
    8001425c:	f9043583          	ld	a1,-112(s0)
    80014260:	f9843503          	ld	a0,-104(s0)
    80014264:	fadfe0ef          	jal	ra,80013210 <_ntoa_long_long>
    80014268:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    8001426c:	ac89                	j	800144be <_vsnprintf+0x788>
                                              value < 0, base, precision, width, flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    8001426e:	fec42783          	lw	a5,-20(s0)
    80014272:	1007f793          	andi	a5,a5,256
    80014276:	2781                	sext.w	a5,a5
    80014278:	c3bd                	beqz	a5,800142de <_vsnprintf+0x5a8>
                        const long value = va_arg(va, long);
    8001427a:	f7843783          	ld	a5,-136(s0)
    8001427e:	00878713          	addi	a4,a5,8
    80014282:	f6e43c23          	sd	a4,-136(s0)
    80014286:	639c                	ld	a5,0(a5)
    80014288:	faf43423          	sd	a5,-88(s0)
                        idx              = _ntoa_long(
                                         out, buffer, idx, maxlen,
                                         (unsigned long)(value > 0 ? value : 0 - value),
    8001428c:	fa843783          	ld	a5,-88(s0)
    80014290:	43f7d713          	srai	a4,a5,0x3f
    80014294:	fa843783          	ld	a5,-88(s0)
    80014298:	8fb9                	xor	a5,a5,a4
    8001429a:	8f99                	sub	a5,a5,a4
                        idx              = _ntoa_long(
    8001429c:	85be                	mv	a1,a5
    8001429e:	fa843783          	ld	a5,-88(s0)
    800142a2:	93fd                	srli	a5,a5,0x3f
    800142a4:	0ff7f713          	andi	a4,a5,255
    800142a8:	fd446683          	lwu	a3,-44(s0)
    800142ac:	fe442603          	lw	a2,-28(s0)
    800142b0:	fec42783          	lw	a5,-20(s0)
    800142b4:	e43e                	sd	a5,8(sp)
    800142b6:	fe842783          	lw	a5,-24(s0)
    800142ba:	e03e                	sd	a5,0(sp)
    800142bc:	88b2                	mv	a7,a2
    800142be:	8836                	mv	a6,a3
    800142c0:	87ba                	mv	a5,a4
    800142c2:	872e                	mv	a4,a1
    800142c4:	f8843683          	ld	a3,-120(s0)
    800142c8:	fd843603          	ld	a2,-40(s0)
    800142cc:	f9043583          	ld	a1,-112(s0)
    800142d0:	f9843503          	ld	a0,-104(s0)
    800142d4:	e25fe0ef          	jal	ra,800130f8 <_ntoa_long>
    800142d8:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    800142dc:	a2cd                	j	800144be <_vsnprintf+0x788>
                                         value < 0, base, precision, width, flags);
                    }
                    else {
                        const int value =
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    800142de:	fec42783          	lw	a5,-20(s0)
    800142e2:	0407f793          	andi	a5,a5,64
    800142e6:	2781                	sext.w	a5,a5
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    800142e8:	cf81                	beqz	a5,80014300 <_vsnprintf+0x5ca>
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    800142ea:	f7843783          	ld	a5,-136(s0)
    800142ee:	00878713          	addi	a4,a5,8
    800142f2:	f6e43c23          	sd	a4,-136(s0)
    800142f6:	439c                	lw	a5,0(a5)
    800142f8:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    800142fc:	2781                	sext.w	a5,a5
    800142fe:	a81d                	j	80014334 <_vsnprintf+0x5fe>
    80014300:	fec42783          	lw	a5,-20(s0)
    80014304:	0807f793          	andi	a5,a5,128
    80014308:	2781                	sext.w	a5,a5
                                                    : va_arg(va, int);
    8001430a:	cf91                	beqz	a5,80014326 <_vsnprintf+0x5f0>
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    8001430c:	f7843783          	ld	a5,-136(s0)
    80014310:	00878713          	addi	a4,a5,8
    80014314:	f6e43c23          	sd	a4,-136(s0)
    80014318:	439c                	lw	a5,0(a5)
    8001431a:	0107979b          	slliw	a5,a5,0x10
    8001431e:	4107d79b          	sraiw	a5,a5,0x10
                                                    : va_arg(va, int);
    80014322:	2781                	sext.w	a5,a5
    80014324:	a801                	j	80014334 <_vsnprintf+0x5fe>
    80014326:	f7843783          	ld	a5,-136(s0)
    8001432a:	00878713          	addi	a4,a5,8
    8001432e:	f6e43c23          	sd	a4,-136(s0)
    80014332:	439c                	lw	a5,0(a5)
                        const int value =
    80014334:	faf42823          	sw	a5,-80(s0)
                        idx = _ntoa_long(
                            out, buffer, idx, maxlen,
                            (unsigned int)(value > 0 ? value : 0 - value),
    80014338:	fb042783          	lw	a5,-80(s0)
    8001433c:	41f7d79b          	sraiw	a5,a5,0x1f
    80014340:	fb042703          	lw	a4,-80(s0)
    80014344:	8f3d                	xor	a4,a4,a5
    80014346:	40f707bb          	subw	a5,a4,a5
    8001434a:	2781                	sext.w	a5,a5
    8001434c:	2781                	sext.w	a5,a5
                        idx = _ntoa_long(
    8001434e:	02079713          	slli	a4,a5,0x20
    80014352:	9301                	srli	a4,a4,0x20
    80014354:	fb042783          	lw	a5,-80(s0)
    80014358:	01f7d79b          	srliw	a5,a5,0x1f
    8001435c:	0ff7f693          	andi	a3,a5,255
    80014360:	fd446603          	lwu	a2,-44(s0)
    80014364:	fe442583          	lw	a1,-28(s0)
    80014368:	fec42783          	lw	a5,-20(s0)
    8001436c:	e43e                	sd	a5,8(sp)
    8001436e:	fe842783          	lw	a5,-24(s0)
    80014372:	e03e                	sd	a5,0(sp)
    80014374:	88ae                	mv	a7,a1
    80014376:	8832                	mv	a6,a2
    80014378:	87b6                	mv	a5,a3
    8001437a:	f8843683          	ld	a3,-120(s0)
    8001437e:	fd843603          	ld	a2,-40(s0)
    80014382:	f9043583          	ld	a1,-112(s0)
    80014386:	f9843503          	ld	a0,-104(s0)
    8001438a:	d6ffe0ef          	jal	ra,800130f8 <_ntoa_long>
    8001438e:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80014392:	a235                	j	800144be <_vsnprintf+0x788>
                            value < 0, base, precision, width, flags);
                    }
                }
                else {
                    // unsigned
                    if (flags & FLAGS_LONG_LONG) {
    80014394:	fec42783          	lw	a5,-20(s0)
    80014398:	2007f793          	andi	a5,a5,512
    8001439c:	2781                	sext.w	a5,a5
    8001439e:	c3b1                	beqz	a5,800143e2 <_vsnprintf+0x6ac>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
    800143a0:	f7843783          	ld	a5,-136(s0)
    800143a4:	00878713          	addi	a4,a5,8
    800143a8:	f6e43c23          	sd	a4,-136(s0)
    800143ac:	6398                	ld	a4,0(a5)
    800143ae:	fd446683          	lwu	a3,-44(s0)
    800143b2:	fe442603          	lw	a2,-28(s0)
    800143b6:	fec42783          	lw	a5,-20(s0)
    800143ba:	e43e                	sd	a5,8(sp)
    800143bc:	fe842783          	lw	a5,-24(s0)
    800143c0:	e03e                	sd	a5,0(sp)
    800143c2:	88b2                	mv	a7,a2
    800143c4:	8836                	mv	a6,a3
    800143c6:	4781                	li	a5,0
    800143c8:	f8843683          	ld	a3,-120(s0)
    800143cc:	fd843603          	ld	a2,-40(s0)
    800143d0:	f9043583          	ld	a1,-112(s0)
    800143d4:	f9843503          	ld	a0,-104(s0)
    800143d8:	e39fe0ef          	jal	ra,80013210 <_ntoa_long_long>
    800143dc:	fca43c23          	sd	a0,-40(s0)
    800143e0:	a8f9                	j	800144be <_vsnprintf+0x788>
                                              va_arg(va, unsigned long long),
                                              false, base, precision, width,
                                              flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    800143e2:	fec42783          	lw	a5,-20(s0)
    800143e6:	1007f793          	andi	a5,a5,256
    800143ea:	2781                	sext.w	a5,a5
    800143ec:	c3b1                	beqz	a5,80014430 <_vsnprintf+0x6fa>
                        idx = _ntoa_long(out, buffer, idx, maxlen,
    800143ee:	f7843783          	ld	a5,-136(s0)
    800143f2:	00878713          	addi	a4,a5,8
    800143f6:	f6e43c23          	sd	a4,-136(s0)
    800143fa:	6398                	ld	a4,0(a5)
    800143fc:	fd446683          	lwu	a3,-44(s0)
    80014400:	fe442603          	lw	a2,-28(s0)
    80014404:	fec42783          	lw	a5,-20(s0)
    80014408:	e43e                	sd	a5,8(sp)
    8001440a:	fe842783          	lw	a5,-24(s0)
    8001440e:	e03e                	sd	a5,0(sp)
    80014410:	88b2                	mv	a7,a2
    80014412:	8836                	mv	a6,a3
    80014414:	4781                	li	a5,0
    80014416:	f8843683          	ld	a3,-120(s0)
    8001441a:	fd843603          	ld	a2,-40(s0)
    8001441e:	f9043583          	ld	a1,-112(s0)
    80014422:	f9843503          	ld	a0,-104(s0)
    80014426:	cd3fe0ef          	jal	ra,800130f8 <_ntoa_long>
    8001442a:	fca43c23          	sd	a0,-40(s0)
    8001442e:	a841                	j	800144be <_vsnprintf+0x788>
                                         va_arg(va, unsigned long), false, base,
                                         precision, width, flags);
                    }
                    else {
                        const unsigned int value =
                            (flags & FLAGS_CHAR)
    80014430:	fec42783          	lw	a5,-20(s0)
    80014434:	0407f793          	andi	a5,a5,64
    80014438:	2781                	sext.w	a5,a5
                                ? (unsigned char)va_arg(va, unsigned int)
                            : (flags & FLAGS_SHORT)
    8001443a:	cf81                	beqz	a5,80014452 <_vsnprintf+0x71c>
                                ? (unsigned char)va_arg(va, unsigned int)
    8001443c:	f7843783          	ld	a5,-136(s0)
    80014440:	00878713          	addi	a4,a5,8
    80014444:	f6e43c23          	sd	a4,-136(s0)
    80014448:	439c                	lw	a5,0(a5)
    8001444a:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT)
    8001444e:	2781                	sext.w	a5,a5
    80014450:	a815                	j	80014484 <_vsnprintf+0x74e>
    80014452:	fec42783          	lw	a5,-20(s0)
    80014456:	0807f793          	andi	a5,a5,128
    8001445a:	2781                	sext.w	a5,a5
                                ? (unsigned short int)va_arg(va, unsigned int)
                                : va_arg(va, unsigned int);
    8001445c:	cf81                	beqz	a5,80014474 <_vsnprintf+0x73e>
                                ? (unsigned short int)va_arg(va, unsigned int)
    8001445e:	f7843783          	ld	a5,-136(s0)
    80014462:	00878713          	addi	a4,a5,8
    80014466:	f6e43c23          	sd	a4,-136(s0)
    8001446a:	439c                	lw	a5,0(a5)
    8001446c:	17c2                	slli	a5,a5,0x30
    8001446e:	93c1                	srli	a5,a5,0x30
                                : va_arg(va, unsigned int);
    80014470:	2781                	sext.w	a5,a5
    80014472:	a801                	j	80014482 <_vsnprintf+0x74c>
    80014474:	f7843783          	ld	a5,-136(s0)
    80014478:	00878713          	addi	a4,a5,8
    8001447c:	f6e43c23          	sd	a4,-136(s0)
    80014480:	439c                	lw	a5,0(a5)
                            : (flags & FLAGS_SHORT)
    80014482:	2781                	sext.w	a5,a5
                        const unsigned int value =
    80014484:	faf42a23          	sw	a5,-76(s0)
                        idx = _ntoa_long(out, buffer, idx, maxlen, value, false,
    80014488:	fb446703          	lwu	a4,-76(s0)
    8001448c:	fd446683          	lwu	a3,-44(s0)
    80014490:	fe442603          	lw	a2,-28(s0)
    80014494:	fec42783          	lw	a5,-20(s0)
    80014498:	e43e                	sd	a5,8(sp)
    8001449a:	fe842783          	lw	a5,-24(s0)
    8001449e:	e03e                	sd	a5,0(sp)
    800144a0:	88b2                	mv	a7,a2
    800144a2:	8836                	mv	a6,a3
    800144a4:	4781                	li	a5,0
    800144a6:	f8843683          	ld	a3,-120(s0)
    800144aa:	fd843603          	ld	a2,-40(s0)
    800144ae:	f9043583          	ld	a1,-112(s0)
    800144b2:	f9843503          	ld	a0,-104(s0)
    800144b6:	c43fe0ef          	jal	ra,800130f8 <_ntoa_long>
    800144ba:	fca43c23          	sd	a0,-40(s0)
                                         base, precision, width, flags);
                    }
                }
                format++;
    800144be:	f8043783          	ld	a5,-128(s0)
    800144c2:	0785                	addi	a5,a5,1
    800144c4:	f8f43023          	sd	a5,-128(s0)
                break;
    800144c8:	a919                	j	800148de <_vsnprintf+0xba8>
            }
#if defined(PRINTF_SUPPORT_FLOAT)
            case 'f':
            case 'F':
                if (*format == 'F')
    800144ca:	f8043783          	ld	a5,-128(s0)
    800144ce:	0007c783          	lbu	a5,0(a5)
    800144d2:	873e                	mv	a4,a5
    800144d4:	04600793          	li	a5,70
    800144d8:	00f71863          	bne	a4,a5,800144e8 <_vsnprintf+0x7b2>
                    flags |= FLAGS_UPPERCASE;
    800144dc:	fec42783          	lw	a5,-20(s0)
    800144e0:	0207e793          	ori	a5,a5,32
    800144e4:	fef42623          	sw	a5,-20(s0)
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double),
    800144e8:	f7843783          	ld	a5,-136(s0)
    800144ec:	00878713          	addi	a4,a5,8
    800144f0:	f6e43c23          	sd	a4,-136(s0)
    800144f4:	239c                	fld	fa5,0(a5)
    800144f6:	fec42683          	lw	a3,-20(s0)
    800144fa:	fe842783          	lw	a5,-24(s0)
    800144fe:	fe442703          	lw	a4,-28(s0)
    80014502:	8836                	mv	a6,a3
    80014504:	22f78553          	fmv.d	fa0,fa5
    80014508:	f8843683          	ld	a3,-120(s0)
    8001450c:	fd843603          	ld	a2,-40(s0)
    80014510:	f9043583          	ld	a1,-112(s0)
    80014514:	f9843503          	ld	a0,-104(s0)
    80014518:	e11fe0ef          	jal	ra,80013328 <_ftoa>
    8001451c:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    80014520:	f8043783          	ld	a5,-128(s0)
    80014524:	0785                	addi	a5,a5,1
    80014526:	f8f43023          	sd	a5,-128(s0)
                break;
    8001452a:	ae55                	j	800148de <_vsnprintf+0xba8>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
            case 'e':
            case 'E':
            case 'g':
            case 'G':
                if ((*format == 'g') || (*format == 'G'))
    8001452c:	f8043783          	ld	a5,-128(s0)
    80014530:	0007c783          	lbu	a5,0(a5)
    80014534:	873e                	mv	a4,a5
    80014536:	06700793          	li	a5,103
    8001453a:	00f70b63          	beq	a4,a5,80014550 <_vsnprintf+0x81a>
    8001453e:	f8043783          	ld	a5,-128(s0)
    80014542:	0007c783          	lbu	a5,0(a5)
    80014546:	873e                	mv	a4,a5
    80014548:	04700793          	li	a5,71
    8001454c:	00f71a63          	bne	a4,a5,80014560 <_vsnprintf+0x82a>
                    flags |= FLAGS_ADAPT_EXP;
    80014550:	fec42703          	lw	a4,-20(s0)
    80014554:	6785                	lui	a5,0x1
    80014556:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    8001455a:	8fd9                	or	a5,a5,a4
    8001455c:	fef42623          	sw	a5,-20(s0)
                if ((*format == 'E') || (*format == 'G'))
    80014560:	f8043783          	ld	a5,-128(s0)
    80014564:	0007c783          	lbu	a5,0(a5)
    80014568:	873e                	mv	a4,a5
    8001456a:	04500793          	li	a5,69
    8001456e:	00f70b63          	beq	a4,a5,80014584 <_vsnprintf+0x84e>
    80014572:	f8043783          	ld	a5,-128(s0)
    80014576:	0007c783          	lbu	a5,0(a5)
    8001457a:	873e                	mv	a4,a5
    8001457c:	04700793          	li	a5,71
    80014580:	00f71863          	bne	a4,a5,80014590 <_vsnprintf+0x85a>
                    flags |= FLAGS_UPPERCASE;
    80014584:	fec42783          	lw	a5,-20(s0)
    80014588:	0207e793          	ori	a5,a5,32
    8001458c:	fef42623          	sw	a5,-20(s0)
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double),
    80014590:	f7843783          	ld	a5,-136(s0)
    80014594:	00878713          	addi	a4,a5,8
    80014598:	f6e43c23          	sd	a4,-136(s0)
    8001459c:	239c                	fld	fa5,0(a5)
    8001459e:	fec42683          	lw	a3,-20(s0)
    800145a2:	fe842783          	lw	a5,-24(s0)
    800145a6:	fe442703          	lw	a4,-28(s0)
    800145aa:	8836                	mv	a6,a3
    800145ac:	22f78553          	fmv.d	fa0,fa5
    800145b0:	f8843683          	ld	a3,-120(s0)
    800145b4:	fd843603          	ld	a2,-40(s0)
    800145b8:	f9043583          	ld	a1,-112(s0)
    800145bc:	f9843503          	ld	a0,-104(s0)
    800145c0:	ab4ff0ef          	jal	ra,80013874 <_etoa>
    800145c4:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    800145c8:	f8043783          	ld	a5,-128(s0)
    800145cc:	0785                	addi	a5,a5,1
    800145ce:	f8f43023          	sd	a5,-128(s0)
                break;
    800145d2:	a631                	j	800148de <_vsnprintf+0xba8>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
            case 'c': {
                unsigned int l = 1U;
    800145d4:	4785                	li	a5,1
    800145d6:	fcf42823          	sw	a5,-48(s0)
                // pre padding
                if (!(flags & FLAGS_LEFT)) {
    800145da:	fec42783          	lw	a5,-20(s0)
    800145de:	8b89                	andi	a5,a5,2
    800145e0:	2781                	sext.w	a5,a5
    800145e2:	ef8d                	bnez	a5,8001461c <_vsnprintf+0x8e6>
                    while (l++ < width) {
    800145e4:	a00d                	j	80014606 <_vsnprintf+0x8d0>
                        out(' ', buffer, idx++, maxlen);
    800145e6:	fd843783          	ld	a5,-40(s0)
    800145ea:	00178713          	addi	a4,a5,1
    800145ee:	fce43c23          	sd	a4,-40(s0)
    800145f2:	f9843703          	ld	a4,-104(s0)
    800145f6:	f8843683          	ld	a3,-120(s0)
    800145fa:	863e                	mv	a2,a5
    800145fc:	f9043583          	ld	a1,-112(s0)
    80014600:	02000513          	li	a0,32
    80014604:	9702                	jalr	a4
                    while (l++ < width) {
    80014606:	fd042783          	lw	a5,-48(s0)
    8001460a:	0017871b          	addiw	a4,a5,1
    8001460e:	fce42823          	sw	a4,-48(s0)
    80014612:	fe842703          	lw	a4,-24(s0)
    80014616:	2701                	sext.w	a4,a4
    80014618:	fce7e7e3          	bltu	a5,a4,800145e6 <_vsnprintf+0x8b0>
                    }
                }
                // char output
                out((char)va_arg(va, int), buffer, idx++, maxlen);
    8001461c:	f7843783          	ld	a5,-136(s0)
    80014620:	00878713          	addi	a4,a5,8
    80014624:	f6e43c23          	sd	a4,-136(s0)
    80014628:	439c                	lw	a5,0(a5)
    8001462a:	0ff7f513          	andi	a0,a5,255
    8001462e:	fd843783          	ld	a5,-40(s0)
    80014632:	00178713          	addi	a4,a5,1
    80014636:	fce43c23          	sd	a4,-40(s0)
    8001463a:	f9843703          	ld	a4,-104(s0)
    8001463e:	f8843683          	ld	a3,-120(s0)
    80014642:	863e                	mv	a2,a5
    80014644:	f9043583          	ld	a1,-112(s0)
    80014648:	9702                	jalr	a4
                // post padding
                if (flags & FLAGS_LEFT) {
    8001464a:	fec42783          	lw	a5,-20(s0)
    8001464e:	8b89                	andi	a5,a5,2
    80014650:	2781                	sext.w	a5,a5
    80014652:	cf8d                	beqz	a5,8001468c <_vsnprintf+0x956>
                    while (l++ < width) {
    80014654:	a00d                	j	80014676 <_vsnprintf+0x940>
                        out(' ', buffer, idx++, maxlen);
    80014656:	fd843783          	ld	a5,-40(s0)
    8001465a:	00178713          	addi	a4,a5,1
    8001465e:	fce43c23          	sd	a4,-40(s0)
    80014662:	f9843703          	ld	a4,-104(s0)
    80014666:	f8843683          	ld	a3,-120(s0)
    8001466a:	863e                	mv	a2,a5
    8001466c:	f9043583          	ld	a1,-112(s0)
    80014670:	02000513          	li	a0,32
    80014674:	9702                	jalr	a4
                    while (l++ < width) {
    80014676:	fd042783          	lw	a5,-48(s0)
    8001467a:	0017871b          	addiw	a4,a5,1
    8001467e:	fce42823          	sw	a4,-48(s0)
    80014682:	fe842703          	lw	a4,-24(s0)
    80014686:	2701                	sext.w	a4,a4
    80014688:	fce7e7e3          	bltu	a5,a4,80014656 <_vsnprintf+0x920>
                    }
                }
                format++;
    8001468c:	f8043783          	ld	a5,-128(s0)
    80014690:	0785                	addi	a5,a5,1
    80014692:	f8f43023          	sd	a5,-128(s0)
                break;
    80014696:	a4a1                	j	800148de <_vsnprintf+0xba8>
            }

            case 's': {
                const char *p = va_arg(va, char *);
    80014698:	f7843783          	ld	a5,-136(s0)
    8001469c:	00878713          	addi	a4,a5,8
    800146a0:	f6e43c23          	sd	a4,-136(s0)
    800146a4:	639c                	ld	a5,0(a5)
    800146a6:	fcf43423          	sd	a5,-56(s0)
                unsigned int l =
                    _strnlen_s(p, precision ? precision : (size_t)-1);
    800146aa:	fe442783          	lw	a5,-28(s0)
    800146ae:	2781                	sext.w	a5,a5
    800146b0:	c781                	beqz	a5,800146b8 <_vsnprintf+0x982>
    800146b2:	fe446783          	lwu	a5,-28(s0)
    800146b6:	a011                	j	800146ba <_vsnprintf+0x984>
    800146b8:	57fd                	li	a5,-1
    800146ba:	85be                	mv	a1,a5
    800146bc:	fc843503          	ld	a0,-56(s0)
    800146c0:	d92fe0ef          	jal	ra,80012c52 <_strnlen_s>
    800146c4:	87aa                	mv	a5,a0
    800146c6:	fcf42223          	sw	a5,-60(s0)
                // pre padding
                if (flags & FLAGS_PRECISION) {
    800146ca:	fec42783          	lw	a5,-20(s0)
    800146ce:	4007f793          	andi	a5,a5,1024
    800146d2:	2781                	sext.w	a5,a5
    800146d4:	cf91                	beqz	a5,800146f0 <_vsnprintf+0x9ba>
                    l = (l < precision ? l : precision);
    800146d6:	fc442603          	lw	a2,-60(s0)
    800146da:	fe442783          	lw	a5,-28(s0)
    800146de:	0007869b          	sext.w	a3,a5
    800146e2:	0006071b          	sext.w	a4,a2
    800146e6:	00d77363          	bgeu	a4,a3,800146ec <_vsnprintf+0x9b6>
    800146ea:	87b2                	mv	a5,a2
    800146ec:	fcf42223          	sw	a5,-60(s0)
                }
                if (!(flags & FLAGS_LEFT)) {
    800146f0:	fec42783          	lw	a5,-20(s0)
    800146f4:	8b89                	andi	a5,a5,2
    800146f6:	2781                	sext.w	a5,a5
    800146f8:	e7a5                	bnez	a5,80014760 <_vsnprintf+0xa2a>
                    while (l++ < width) {
    800146fa:	a00d                	j	8001471c <_vsnprintf+0x9e6>
                        out(' ', buffer, idx++, maxlen);
    800146fc:	fd843783          	ld	a5,-40(s0)
    80014700:	00178713          	addi	a4,a5,1
    80014704:	fce43c23          	sd	a4,-40(s0)
    80014708:	f9843703          	ld	a4,-104(s0)
    8001470c:	f8843683          	ld	a3,-120(s0)
    80014710:	863e                	mv	a2,a5
    80014712:	f9043583          	ld	a1,-112(s0)
    80014716:	02000513          	li	a0,32
    8001471a:	9702                	jalr	a4
                    while (l++ < width) {
    8001471c:	fc442783          	lw	a5,-60(s0)
    80014720:	0017871b          	addiw	a4,a5,1
    80014724:	fce42223          	sw	a4,-60(s0)
    80014728:	fe842703          	lw	a4,-24(s0)
    8001472c:	2701                	sext.w	a4,a4
    8001472e:	fce7e7e3          	bltu	a5,a4,800146fc <_vsnprintf+0x9c6>
                    }
                }
                // string output
                while ((*p != 0) &&
    80014732:	a03d                	j	80014760 <_vsnprintf+0xa2a>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
                    out(*(p++), buffer, idx++, maxlen);
    80014734:	fc843783          	ld	a5,-56(s0)
    80014738:	00178713          	addi	a4,a5,1
    8001473c:	fce43423          	sd	a4,-56(s0)
    80014740:	0007c503          	lbu	a0,0(a5)
    80014744:	fd843783          	ld	a5,-40(s0)
    80014748:	00178713          	addi	a4,a5,1
    8001474c:	fce43c23          	sd	a4,-40(s0)
    80014750:	f9843703          	ld	a4,-104(s0)
    80014754:	f8843683          	ld	a3,-120(s0)
    80014758:	863e                	mv	a2,a5
    8001475a:	f9043583          	ld	a1,-112(s0)
    8001475e:	9702                	jalr	a4
                while ((*p != 0) &&
    80014760:	fc843783          	ld	a5,-56(s0)
    80014764:	0007c783          	lbu	a5,0(a5)
    80014768:	cf91                	beqz	a5,80014784 <_vsnprintf+0xa4e>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    8001476a:	fec42783          	lw	a5,-20(s0)
    8001476e:	4007f793          	andi	a5,a5,1024
    80014772:	2781                	sext.w	a5,a5
                while ((*p != 0) &&
    80014774:	d3e1                	beqz	a5,80014734 <_vsnprintf+0x9fe>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    80014776:	fe442783          	lw	a5,-28(s0)
    8001477a:	fff7871b          	addiw	a4,a5,-1
    8001477e:	fee42223          	sw	a4,-28(s0)
    80014782:	fbcd                	bnez	a5,80014734 <_vsnprintf+0x9fe>
                }
                // post padding
                if (flags & FLAGS_LEFT) {
    80014784:	fec42783          	lw	a5,-20(s0)
    80014788:	8b89                	andi	a5,a5,2
    8001478a:	2781                	sext.w	a5,a5
    8001478c:	cf8d                	beqz	a5,800147c6 <_vsnprintf+0xa90>
                    while (l++ < width) {
    8001478e:	a00d                	j	800147b0 <_vsnprintf+0xa7a>
                        out(' ', buffer, idx++, maxlen);
    80014790:	fd843783          	ld	a5,-40(s0)
    80014794:	00178713          	addi	a4,a5,1
    80014798:	fce43c23          	sd	a4,-40(s0)
    8001479c:	f9843703          	ld	a4,-104(s0)
    800147a0:	f8843683          	ld	a3,-120(s0)
    800147a4:	863e                	mv	a2,a5
    800147a6:	f9043583          	ld	a1,-112(s0)
    800147aa:	02000513          	li	a0,32
    800147ae:	9702                	jalr	a4
                    while (l++ < width) {
    800147b0:	fc442783          	lw	a5,-60(s0)
    800147b4:	0017871b          	addiw	a4,a5,1
    800147b8:	fce42223          	sw	a4,-60(s0)
    800147bc:	fe842703          	lw	a4,-24(s0)
    800147c0:	2701                	sext.w	a4,a4
    800147c2:	fce7e7e3          	bltu	a5,a4,80014790 <_vsnprintf+0xa5a>
                    }
                }
                format++;
    800147c6:	f8043783          	ld	a5,-128(s0)
    800147ca:	0785                	addi	a5,a5,1
    800147cc:	f8f43023          	sd	a5,-128(s0)
                break;
    800147d0:	a239                	j	800148de <_vsnprintf+0xba8>
            }

            case 'p': {
                width = sizeof(void *) * 2U;
    800147d2:	47c1                	li	a5,16
    800147d4:	fef42423          	sw	a5,-24(s0)
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    800147d8:	fec42783          	lw	a5,-20(s0)
    800147dc:	0217e793          	ori	a5,a5,33
    800147e0:	fef42623          	sw	a5,-20(s0)
#if defined(PRINTF_SUPPORT_LONG_LONG)
                const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    800147e4:	4785                	li	a5,1
    800147e6:	faf40da3          	sb	a5,-69(s0)
                if (is_ll) {
    800147ea:	fbb44783          	lbu	a5,-69(s0)
    800147ee:	0ff7f793          	andi	a5,a5,255
    800147f2:	c3b1                	beqz	a5,80014836 <_vsnprintf+0xb00>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                          (uintptr_t)va_arg(va, void *), false,
    800147f4:	f7843783          	ld	a5,-136(s0)
    800147f8:	00878713          	addi	a4,a5,8
    800147fc:	f6e43c23          	sd	a4,-136(s0)
    80014800:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
    80014802:	86be                	mv	a3,a5
    80014804:	fe442703          	lw	a4,-28(s0)
    80014808:	fec42783          	lw	a5,-20(s0)
    8001480c:	e43e                	sd	a5,8(sp)
    8001480e:	fe842783          	lw	a5,-24(s0)
    80014812:	e03e                	sd	a5,0(sp)
    80014814:	88ba                	mv	a7,a4
    80014816:	4841                	li	a6,16
    80014818:	4781                	li	a5,0
    8001481a:	8736                	mv	a4,a3
    8001481c:	f8843683          	ld	a3,-120(s0)
    80014820:	fd843603          	ld	a2,-40(s0)
    80014824:	f9043583          	ld	a1,-112(s0)
    80014828:	f9843503          	ld	a0,-104(s0)
    8001482c:	9e5fe0ef          	jal	ra,80013210 <_ntoa_long_long>
    80014830:	fca43c23          	sd	a0,-40(s0)
    80014834:	a089                	j	80014876 <_vsnprintf+0xb40>
                }
                else {
#endif
                    idx = _ntoa_long(
                        out, buffer, idx, maxlen,
                        (unsigned long)((uintptr_t)va_arg(va, void *)), false,
    80014836:	f7843783          	ld	a5,-136(s0)
    8001483a:	00878713          	addi	a4,a5,8
    8001483e:	f6e43c23          	sd	a4,-136(s0)
    80014842:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long(
    80014844:	86be                	mv	a3,a5
    80014846:	fe442703          	lw	a4,-28(s0)
    8001484a:	fec42783          	lw	a5,-20(s0)
    8001484e:	e43e                	sd	a5,8(sp)
    80014850:	fe842783          	lw	a5,-24(s0)
    80014854:	e03e                	sd	a5,0(sp)
    80014856:	88ba                	mv	a7,a4
    80014858:	4841                	li	a6,16
    8001485a:	4781                	li	a5,0
    8001485c:	8736                	mv	a4,a3
    8001485e:	f8843683          	ld	a3,-120(s0)
    80014862:	fd843603          	ld	a2,-40(s0)
    80014866:	f9043583          	ld	a1,-112(s0)
    8001486a:	f9843503          	ld	a0,-104(s0)
    8001486e:	88bfe0ef          	jal	ra,800130f8 <_ntoa_long>
    80014872:	fca43c23          	sd	a0,-40(s0)
                        16U, precision, width, flags);
#if defined(PRINTF_SUPPORT_LONG_LONG)
                }
#endif
                format++;
    80014876:	f8043783          	ld	a5,-128(s0)
    8001487a:	0785                	addi	a5,a5,1
    8001487c:	f8f43023          	sd	a5,-128(s0)
                break;
    80014880:	a8b9                	j	800148de <_vsnprintf+0xba8>
            }

            case '%':
                out('%', buffer, idx++, maxlen);
    80014882:	fd843783          	ld	a5,-40(s0)
    80014886:	00178713          	addi	a4,a5,1
    8001488a:	fce43c23          	sd	a4,-40(s0)
    8001488e:	f9843703          	ld	a4,-104(s0)
    80014892:	f8843683          	ld	a3,-120(s0)
    80014896:	863e                	mv	a2,a5
    80014898:	f9043583          	ld	a1,-112(s0)
    8001489c:	02500513          	li	a0,37
    800148a0:	9702                	jalr	a4
                format++;
    800148a2:	f8043783          	ld	a5,-128(s0)
    800148a6:	0785                	addi	a5,a5,1
    800148a8:	f8f43023          	sd	a5,-128(s0)
                break;
    800148ac:	a80d                	j	800148de <_vsnprintf+0xba8>

            default:
                out(*format, buffer, idx++, maxlen);
    800148ae:	f8043783          	ld	a5,-128(s0)
    800148b2:	0007c503          	lbu	a0,0(a5)
    800148b6:	fd843783          	ld	a5,-40(s0)
    800148ba:	00178713          	addi	a4,a5,1
    800148be:	fce43c23          	sd	a4,-40(s0)
    800148c2:	f9843703          	ld	a4,-104(s0)
    800148c6:	f8843683          	ld	a3,-120(s0)
    800148ca:	863e                	mv	a2,a5
    800148cc:	f9043583          	ld	a1,-112(s0)
    800148d0:	9702                	jalr	a4
                format++;
    800148d2:	f8043783          	ld	a5,-128(s0)
    800148d6:	0785                	addi	a5,a5,1
    800148d8:	f8f43023          	sd	a5,-128(s0)
                break;
    800148dc:	0001                	nop
    while (*format) {
    800148de:	f8043783          	ld	a5,-128(s0)
    800148e2:	0007c783          	lbu	a5,0(a5)
    800148e6:	c8079463          	bnez	a5,80013d6e <_vsnprintf+0x38>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    800148ea:	fd843703          	ld	a4,-40(s0)
    800148ee:	f8843783          	ld	a5,-120(s0)
    800148f2:	00f76663          	bltu	a4,a5,800148fe <_vsnprintf+0xbc8>
    800148f6:	f8843783          	ld	a5,-120(s0)
    800148fa:	17fd                	addi	a5,a5,-1
    800148fc:	a019                	j	80014902 <_vsnprintf+0xbcc>
    800148fe:	fd843783          	ld	a5,-40(s0)
    80014902:	f9843703          	ld	a4,-104(s0)
    80014906:	f8843683          	ld	a3,-120(s0)
    8001490a:	863e                	mv	a2,a5
    8001490c:	f9043583          	ld	a1,-112(s0)
    80014910:	4501                	li	a0,0
    80014912:	9702                	jalr	a4

    // return written chars without terminating \0
    return (int)idx;
    80014914:	fd843783          	ld	a5,-40(s0)
    80014918:	2781                	sext.w	a5,a5
}
    8001491a:	853e                	mv	a0,a5
    8001491c:	60ea                	ld	ra,152(sp)
    8001491e:	644a                	ld	s0,144(sp)
    80014920:	610d                	addi	sp,sp,160
    80014922:	8082                	ret

0000000080014924 <printf>:

///////////////////////////////////////////////////////////////////////////////

int printf(const char *format, ...)
{
    80014924:	7119                	addi	sp,sp,-128
    80014926:	fc06                	sd	ra,56(sp)
    80014928:	f822                	sd	s0,48(sp)
    8001492a:	0080                	addi	s0,sp,64
    8001492c:	fca43423          	sd	a0,-56(s0)
    80014930:	e40c                	sd	a1,8(s0)
    80014932:	e810                	sd	a2,16(s0)
    80014934:	ec14                	sd	a3,24(s0)
    80014936:	f018                	sd	a4,32(s0)
    80014938:	f41c                	sd	a5,40(s0)
    8001493a:	03043823          	sd	a6,48(s0)
    8001493e:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, format);
    80014942:	04040793          	addi	a5,s0,64
    80014946:	fcf43023          	sd	a5,-64(s0)
    8001494a:	fc043783          	ld	a5,-64(s0)
    8001494e:	fc878793          	addi	a5,a5,-56
    80014952:	fef43023          	sd	a5,-32(s0)
    char buffer[1];
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80014956:	fe043703          	ld	a4,-32(s0)
    8001495a:	fd840793          	addi	a5,s0,-40
    8001495e:	fc843683          	ld	a3,-56(s0)
    80014962:	567d                	li	a2,-1
    80014964:	85be                	mv	a1,a5
    80014966:	ffffe517          	auipc	a0,0xffffe
    8001496a:	27050513          	addi	a0,a0,624 # 80012bd6 <_out_char>
    8001496e:	bc8ff0ef          	jal	ra,80013d36 <_vsnprintf>
    80014972:	87aa                	mv	a5,a0
    80014974:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    80014978:	fec42783          	lw	a5,-20(s0)
}
    8001497c:	853e                	mv	a0,a5
    8001497e:	70e2                	ld	ra,56(sp)
    80014980:	7442                	ld	s0,48(sp)
    80014982:	6109                	addi	sp,sp,128
    80014984:	8082                	ret

0000000080014986 <sprintf>:

int sprintf(char *buffer, const char *format, ...)
{
    80014986:	7159                	addi	sp,sp,-112
    80014988:	fc06                	sd	ra,56(sp)
    8001498a:	f822                	sd	s0,48(sp)
    8001498c:	0080                	addi	s0,sp,64
    8001498e:	fca43c23          	sd	a0,-40(s0)
    80014992:	fcb43823          	sd	a1,-48(s0)
    80014996:	e010                	sd	a2,0(s0)
    80014998:	e414                	sd	a3,8(s0)
    8001499a:	e818                	sd	a4,16(s0)
    8001499c:	ec1c                	sd	a5,24(s0)
    8001499e:	03043023          	sd	a6,32(s0)
    800149a2:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    800149a6:	03040793          	addi	a5,s0,48
    800149aa:	fcf43423          	sd	a5,-56(s0)
    800149ae:	fc843783          	ld	a5,-56(s0)
    800149b2:	fd078793          	addi	a5,a5,-48
    800149b6:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    800149ba:	fe043783          	ld	a5,-32(s0)
    800149be:	873e                	mv	a4,a5
    800149c0:	fd043683          	ld	a3,-48(s0)
    800149c4:	567d                	li	a2,-1
    800149c6:	fd843583          	ld	a1,-40(s0)
    800149ca:	ffffe517          	auipc	a0,0xffffe
    800149ce:	1ae50513          	addi	a0,a0,430 # 80012b78 <_out_buffer>
    800149d2:	b64ff0ef          	jal	ra,80013d36 <_vsnprintf>
    800149d6:	87aa                	mv	a5,a0
    800149d8:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    800149dc:	fec42783          	lw	a5,-20(s0)
}
    800149e0:	853e                	mv	a0,a5
    800149e2:	70e2                	ld	ra,56(sp)
    800149e4:	7442                	ld	s0,48(sp)
    800149e6:	6165                	addi	sp,sp,112
    800149e8:	8082                	ret

00000000800149ea <snprintf>:

int snprintf(char *buffer, size_t count, const char *format, ...)
{
    800149ea:	7159                	addi	sp,sp,-112
    800149ec:	fc06                	sd	ra,56(sp)
    800149ee:	f822                	sd	s0,48(sp)
    800149f0:	0080                	addi	s0,sp,64
    800149f2:	fca43c23          	sd	a0,-40(s0)
    800149f6:	fcb43823          	sd	a1,-48(s0)
    800149fa:	fcc43423          	sd	a2,-56(s0)
    800149fe:	e414                	sd	a3,8(s0)
    80014a00:	e818                	sd	a4,16(s0)
    80014a02:	ec1c                	sd	a5,24(s0)
    80014a04:	03043023          	sd	a6,32(s0)
    80014a08:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    80014a0c:	03040793          	addi	a5,s0,48
    80014a10:	fcf43023          	sd	a5,-64(s0)
    80014a14:	fc043783          	ld	a5,-64(s0)
    80014a18:	fd878793          	addi	a5,a5,-40
    80014a1c:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    80014a20:	fe043783          	ld	a5,-32(s0)
    80014a24:	873e                	mv	a4,a5
    80014a26:	fc843683          	ld	a3,-56(s0)
    80014a2a:	fd043603          	ld	a2,-48(s0)
    80014a2e:	fd843583          	ld	a1,-40(s0)
    80014a32:	ffffe517          	auipc	a0,0xffffe
    80014a36:	14650513          	addi	a0,a0,326 # 80012b78 <_out_buffer>
    80014a3a:	afcff0ef          	jal	ra,80013d36 <_vsnprintf>
    80014a3e:	87aa                	mv	a5,a0
    80014a40:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    80014a44:	fec42783          	lw	a5,-20(s0)
}
    80014a48:	853e                	mv	a0,a5
    80014a4a:	70e2                	ld	ra,56(sp)
    80014a4c:	7442                	ld	s0,48(sp)
    80014a4e:	6165                	addi	sp,sp,112
    80014a50:	8082                	ret

0000000080014a52 <vprintf_>:

int vprintf_(const char *format, va_list va)
{
    80014a52:	7179                	addi	sp,sp,-48
    80014a54:	f406                	sd	ra,40(sp)
    80014a56:	f022                	sd	s0,32(sp)
    80014a58:	1800                	addi	s0,sp,48
    80014a5a:	fca43c23          	sd	a0,-40(s0)
    80014a5e:	fcb43823          	sd	a1,-48(s0)
    char buffer[1];
    return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80014a62:	fe840793          	addi	a5,s0,-24
    80014a66:	fd043703          	ld	a4,-48(s0)
    80014a6a:	fd843683          	ld	a3,-40(s0)
    80014a6e:	567d                	li	a2,-1
    80014a70:	85be                	mv	a1,a5
    80014a72:	ffffe517          	auipc	a0,0xffffe
    80014a76:	16450513          	addi	a0,a0,356 # 80012bd6 <_out_char>
    80014a7a:	abcff0ef          	jal	ra,80013d36 <_vsnprintf>
    80014a7e:	87aa                	mv	a5,a0
}
    80014a80:	853e                	mv	a0,a5
    80014a82:	70a2                	ld	ra,40(sp)
    80014a84:	7402                	ld	s0,32(sp)
    80014a86:	6145                	addi	sp,sp,48
    80014a88:	8082                	ret

0000000080014a8a <vsnprintf_>:

int vsnprintf_(char *buffer, size_t count, const char *format, va_list va)
{
    80014a8a:	7179                	addi	sp,sp,-48
    80014a8c:	f406                	sd	ra,40(sp)
    80014a8e:	f022                	sd	s0,32(sp)
    80014a90:	1800                	addi	s0,sp,48
    80014a92:	fea43423          	sd	a0,-24(s0)
    80014a96:	feb43023          	sd	a1,-32(s0)
    80014a9a:	fcc43c23          	sd	a2,-40(s0)
    80014a9e:	fcd43823          	sd	a3,-48(s0)
    return _vsnprintf(_out_buffer, buffer, count, format, va);
    80014aa2:	fd043703          	ld	a4,-48(s0)
    80014aa6:	fd843683          	ld	a3,-40(s0)
    80014aaa:	fe043603          	ld	a2,-32(s0)
    80014aae:	fe843583          	ld	a1,-24(s0)
    80014ab2:	ffffe517          	auipc	a0,0xffffe
    80014ab6:	0c650513          	addi	a0,a0,198 # 80012b78 <_out_buffer>
    80014aba:	a7cff0ef          	jal	ra,80013d36 <_vsnprintf>
    80014abe:	87aa                	mv	a5,a0
}
    80014ac0:	853e                	mv	a0,a5
    80014ac2:	70a2                	ld	ra,40(sp)
    80014ac4:	7402                	ld	s0,32(sp)
    80014ac6:	6145                	addi	sp,sp,48
    80014ac8:	8082                	ret

0000000080014aca <fctprintf>:

int fctprintf(void (*out)(char character, void *arg), void *arg,
              const char *format, ...)
{
    80014aca:	7119                	addi	sp,sp,-128
    80014acc:	e486                	sd	ra,72(sp)
    80014ace:	e0a2                	sd	s0,64(sp)
    80014ad0:	0880                	addi	s0,sp,80
    80014ad2:	fca43423          	sd	a0,-56(s0)
    80014ad6:	fcb43023          	sd	a1,-64(s0)
    80014ada:	fac43c23          	sd	a2,-72(s0)
    80014ade:	e414                	sd	a3,8(s0)
    80014ae0:	e818                	sd	a4,16(s0)
    80014ae2:	ec1c                	sd	a5,24(s0)
    80014ae4:	03043023          	sd	a6,32(s0)
    80014ae8:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    80014aec:	03040793          	addi	a5,s0,48
    80014af0:	faf43823          	sd	a5,-80(s0)
    80014af4:	fb043783          	ld	a5,-80(s0)
    80014af8:	fd878793          	addi	a5,a5,-40
    80014afc:	fef43023          	sd	a5,-32(s0)
    const out_fct_wrap_type out_fct_wrap = {out, arg};
    80014b00:	fc843783          	ld	a5,-56(s0)
    80014b04:	fcf43823          	sd	a5,-48(s0)
    80014b08:	fc043783          	ld	a5,-64(s0)
    80014b0c:	fcf43c23          	sd	a5,-40(s0)
    const int ret = _vsnprintf(_out_fct, (char *)(uintptr_t)&out_fct_wrap,
    80014b10:	fe043703          	ld	a4,-32(s0)
    80014b14:	fd040793          	addi	a5,s0,-48
    80014b18:	fb843683          	ld	a3,-72(s0)
    80014b1c:	567d                	li	a2,-1
    80014b1e:	85be                	mv	a1,a5
    80014b20:	ffffe517          	auipc	a0,0xffffe
    80014b24:	0ee50513          	addi	a0,a0,238 # 80012c0e <_out_fct>
    80014b28:	a0eff0ef          	jal	ra,80013d36 <_vsnprintf>
    80014b2c:	87aa                	mv	a5,a0
    80014b2e:	fef42623          	sw	a5,-20(s0)
                               (size_t)-1, format, va);
    va_end(va);
    return ret;
    80014b32:	fec42783          	lw	a5,-20(s0)
}
    80014b36:	853e                	mv	a0,a5
    80014b38:	60a6                	ld	ra,72(sp)
    80014b3a:	6406                	ld	s0,64(sp)
    80014b3c:	6109                	addi	sp,sp,128
    80014b3e:	8082                	ret

0000000080014b40 <_start>:
.section .text
.global _start
_start:
.option push
.option norelax
	la		sp, _stack_end
    80014b40:	0000f117          	auipc	sp,0xf
    80014b44:	4c010113          	addi	sp,sp,1216 # 80024000 <_heap_start>
	la		gp, __global_pointer$
    80014b48:	00003197          	auipc	gp,0x3
    80014b4c:	4b818193          	addi	gp,gp,1208 # 80018000 <kernel_mmu_table>
    # Unlike the SBI, we will be trap returning so that
    # we know the registers sstatus, sip, stvec, and sepc are
    # in a place where we expect them to be. We can just jump
    # into main (tail main) like the SBI, but this ensures the CSRs
    # are what we say they are instead of just assuming from the SBI.
	la		t0, main
    80014b50:	ffffd297          	auipc	t0,0xffffd
    80014b54:	89228293          	addi	t0,t0,-1902 # 800113e2 <main>
	csrw	sepc, t0
    80014b58:	14129073          	csrw	sepc,t0
	li		t0, 1 << 9
    80014b5c:	20000293          	li	t0,512
	csrw	sie, t0
    80014b60:	10429073          	csrw	sie,t0
    # 1 << 13 - FS:  in the "initial" position
    # 1 << 8  - SPP: into Supervisor Mode
    # 1 << 5  - SPIE: enable interrupts
	li		t0, (1 << 13) | (1 << 8) | (1 << 5)
    80014b64:	6289                	lui	t0,0x2
    80014b66:	1202829b          	addiw	t0,t0,288
	csrw	sstatus, t0
    80014b6a:	10029073          	csrw	sstatus,t0
    # Load the return address (RA) to the park. When main
    # returns, it will park the HART.
	la		ra, park
    80014b6e:	00000097          	auipc	ra,0x0
    80014b72:	01208093          	addi	ra,ra,18 # 80014b80 <park>
	csrr	a0, sscratch
    80014b76:	14002573          	csrr	a0,sscratch
	sret
    80014b7a:	10200073          	sret
    80014b7e:	0001                	nop

0000000080014b80 <park>:

.section .text
.global park
.align 4
park:
	wfi
    80014b80:	10500073          	wfi
	j	park
    80014b84:	bff5                	j	80014b80 <park>

0000000080014b86 <park_end>:
	...

0000000080014b94 <process_asm_run>:

.section .text
.global process_asm_run
process_asm_run:
    # a0 - Trap frame
    csrw    sscratch, a0
    80014b94:	14051073          	csrw	sscratch,a0
    tail    _spawn_kthread
    80014b98:	4680206f          	j	80017000 <_spawn_kthread>

0000000080014b9c <list_init>:
typedef struct List {
    ListElem head;
} List;

static List *list_init(List *lst)
{
    80014b9c:	1101                	addi	sp,sp,-32
    80014b9e:	ec22                	sd	s0,24(sp)
    80014ba0:	1000                	addi	s0,sp,32
    80014ba2:	fea43423          	sd	a0,-24(s0)
    lst->head.next = &lst->head;
    80014ba6:	fe843703          	ld	a4,-24(s0)
    80014baa:	fe843783          	ld	a5,-24(s0)
    80014bae:	e798                	sd	a4,8(a5)
    lst->head.prev = &lst->head;
    80014bb0:	fe843703          	ld	a4,-24(s0)
    80014bb4:	fe843783          	ld	a5,-24(s0)
    80014bb8:	eb98                	sd	a4,16(a5)

    return lst;
    80014bba:	fe843783          	ld	a5,-24(s0)
}
    80014bbe:	853e                	mv	a0,a5
    80014bc0:	6462                	ld	s0,24(sp)
    80014bc2:	6105                	addi	sp,sp,32
    80014bc4:	8082                	ret

0000000080014bc6 <list_new>:

List *list_new(void)
{
    80014bc6:	1101                	addi	sp,sp,-32
    80014bc8:	ec06                	sd	ra,24(sp)
    80014bca:	e822                	sd	s0,16(sp)
    80014bcc:	1000                	addi	s0,sp,32
    List *m = (List *)g_kmalloc(sizeof(List));
    80014bce:	4561                	li	a0,24
    80014bd0:	363010ef          	jal	ra,80016732 <g_kmalloc>
    80014bd4:	fea43423          	sd	a0,-24(s0)
    if (m == NULL) {
    80014bd8:	fe843783          	ld	a5,-24(s0)
    80014bdc:	e399                	bnez	a5,80014be2 <list_new+0x1c>
        return NULL;
    80014bde:	4781                	li	a5,0
    80014be0:	a031                	j	80014bec <list_new+0x26>
    }
    return list_init(m);
    80014be2:	fe843503          	ld	a0,-24(s0)
    80014be6:	fb7ff0ef          	jal	ra,80014b9c <list_init>
    80014bea:	87aa                	mv	a5,a0
}
    80014bec:	853e                	mv	a0,a5
    80014bee:	60e2                	ld	ra,24(sp)
    80014bf0:	6442                	ld	s0,16(sp)
    80014bf2:	6105                	addi	sp,sp,32
    80014bf4:	8082                	ret

0000000080014bf6 <list_add>:

void list_add(List *lst, uint64_t value)
{
    80014bf6:	7179                	addi	sp,sp,-48
    80014bf8:	f406                	sd	ra,40(sp)
    80014bfa:	f022                	sd	s0,32(sp)
    80014bfc:	1800                	addi	s0,sp,48
    80014bfe:	fca43c23          	sd	a0,-40(s0)
    80014c02:	fcb43823          	sd	a1,-48(s0)
    ListElem *l;
    l             = (ListElem *)g_kzalloc(sizeof(ListElem));
    80014c06:	4561                	li	a0,24
    80014c08:	3a3010ef          	jal	ra,800167aa <g_kzalloc>
    80014c0c:	fea43423          	sd	a0,-24(s0)
    l->next       = lst->head.next;
    80014c10:	fd843783          	ld	a5,-40(s0)
    80014c14:	6798                	ld	a4,8(a5)
    80014c16:	fe843783          	ld	a5,-24(s0)
    80014c1a:	e798                	sd	a4,8(a5)
    l->prev       = &lst->head;
    80014c1c:	fd843703          	ld	a4,-40(s0)
    80014c20:	fe843783          	ld	a5,-24(s0)
    80014c24:	eb98                	sd	a4,16(a5)
    l->next->prev = l;
    80014c26:	fe843783          	ld	a5,-24(s0)
    80014c2a:	679c                	ld	a5,8(a5)
    80014c2c:	fe843703          	ld	a4,-24(s0)
    80014c30:	eb98                	sd	a4,16(a5)
    l->prev->next = l;
    80014c32:	fe843783          	ld	a5,-24(s0)
    80014c36:	6b9c                	ld	a5,16(a5)
    80014c38:	fe843703          	ld	a4,-24(s0)
    80014c3c:	e798                	sd	a4,8(a5)
    l->value      = value;
    80014c3e:	fe843783          	ld	a5,-24(s0)
    80014c42:	fd043703          	ld	a4,-48(s0)
    80014c46:	e398                	sd	a4,0(a5)
}
    80014c48:	0001                	nop
    80014c4a:	70a2                	ld	ra,40(sp)
    80014c4c:	7402                	ld	s0,32(sp)
    80014c4e:	6145                	addi	sp,sp,48
    80014c50:	8082                	ret

0000000080014c52 <list_clear>:

void list_clear(List *lst)
{
    80014c52:	7179                	addi	sp,sp,-48
    80014c54:	f406                	sd	ra,40(sp)
    80014c56:	f022                	sd	s0,32(sp)
    80014c58:	1800                	addi	s0,sp,48
    80014c5a:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014c5e:	fd843783          	ld	a5,-40(s0)
    80014c62:	679c                	ld	a5,8(a5)
    80014c64:	fef43423          	sd	a5,-24(s0)
    80014c68:	a831                	j	80014c84 <list_clear+0x32>
        n = e->next;
    80014c6a:	fe843783          	ld	a5,-24(s0)
    80014c6e:	679c                	ld	a5,8(a5)
    80014c70:	fef43023          	sd	a5,-32(s0)
        list_remove_elem(e);
    80014c74:	fe843503          	ld	a0,-24(s0)
    80014c78:	120000ef          	jal	ra,80014d98 <list_remove_elem>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014c7c:	fe043783          	ld	a5,-32(s0)
    80014c80:	fef43423          	sd	a5,-24(s0)
    80014c84:	fd843783          	ld	a5,-40(s0)
    80014c88:	fe843703          	ld	a4,-24(s0)
    80014c8c:	fcf71fe3          	bne	a4,a5,80014c6a <list_clear+0x18>
    }
}
    80014c90:	0001                	nop
    80014c92:	0001                	nop
    80014c94:	70a2                	ld	ra,40(sp)
    80014c96:	7402                	ld	s0,32(sp)
    80014c98:	6145                	addi	sp,sp,48
    80014c9a:	8082                	ret

0000000080014c9c <list_sort>:

void list_sort(List *lst, LIST_COMPARATOR_PARAM(comp))
{
    80014c9c:	7139                	addi	sp,sp,-64
    80014c9e:	fc06                	sd	ra,56(sp)
    80014ca0:	f822                	sd	s0,48(sp)
    80014ca2:	0080                	addi	s0,sp,64
    80014ca4:	fca43423          	sd	a0,-56(s0)
    80014ca8:	fcb43023          	sd	a1,-64(s0)
    ListElem *e;
    bool swapped;
    uint64_t tmp;

    do {
        swapped = false;
    80014cac:	fe0403a3          	sb	zero,-25(s0)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80014cb0:	fc843783          	ld	a5,-56(s0)
    80014cb4:	6b9c                	ld	a5,16(a5)
    80014cb6:	fef43423          	sd	a5,-24(s0)
    80014cba:	a8a9                	j	80014d14 <list_sort+0x78>
            if (!comp(e->value, e->prev->value)) {
    80014cbc:	fe843783          	ld	a5,-24(s0)
    80014cc0:	6398                	ld	a4,0(a5)
    80014cc2:	fe843783          	ld	a5,-24(s0)
    80014cc6:	6b9c                	ld	a5,16(a5)
    80014cc8:	639c                	ld	a5,0(a5)
    80014cca:	fc043683          	ld	a3,-64(s0)
    80014cce:	85be                	mv	a1,a5
    80014cd0:	853a                	mv	a0,a4
    80014cd2:	9682                	jalr	a3
    80014cd4:	87aa                	mv	a5,a0
    80014cd6:	0017c793          	xori	a5,a5,1
    80014cda:	0ff7f793          	andi	a5,a5,255
    80014cde:	c795                	beqz	a5,80014d0a <list_sort+0x6e>
                swapped        = true;
    80014ce0:	4785                	li	a5,1
    80014ce2:	fef403a3          	sb	a5,-25(s0)
                tmp            = e->value;
    80014ce6:	fe843783          	ld	a5,-24(s0)
    80014cea:	639c                	ld	a5,0(a5)
    80014cec:	fcf43c23          	sd	a5,-40(s0)
                e->value       = e->prev->value;
    80014cf0:	fe843783          	ld	a5,-24(s0)
    80014cf4:	6b9c                	ld	a5,16(a5)
    80014cf6:	6398                	ld	a4,0(a5)
    80014cf8:	fe843783          	ld	a5,-24(s0)
    80014cfc:	e398                	sd	a4,0(a5)
                e->prev->value = tmp;
    80014cfe:	fe843783          	ld	a5,-24(s0)
    80014d02:	6b9c                	ld	a5,16(a5)
    80014d04:	fd843703          	ld	a4,-40(s0)
    80014d08:	e398                	sd	a4,0(a5)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80014d0a:	fe843783          	ld	a5,-24(s0)
    80014d0e:	6b9c                	ld	a5,16(a5)
    80014d10:	fef43423          	sd	a5,-24(s0)
    80014d14:	fe843783          	ld	a5,-24(s0)
    80014d18:	6b98                	ld	a4,16(a5)
    80014d1a:	fc843783          	ld	a5,-56(s0)
    80014d1e:	f8f71fe3          	bne	a4,a5,80014cbc <list_sort+0x20>
            }
        }
    } while (swapped);
    80014d22:	fe744783          	lbu	a5,-25(s0)
    80014d26:	0ff7f793          	andi	a5,a5,255
    80014d2a:	f3c9                	bnez	a5,80014cac <list_sort+0x10>
}
    80014d2c:	0001                	nop
    80014d2e:	0001                	nop
    80014d30:	70e2                	ld	ra,56(sp)
    80014d32:	7442                	ld	s0,48(sp)
    80014d34:	6121                	addi	sp,sp,64
    80014d36:	8082                	ret

0000000080014d38 <list_remove>:

bool list_remove(List *lst, uint64_t value)
{
    80014d38:	7179                	addi	sp,sp,-48
    80014d3a:	f406                	sd	ra,40(sp)
    80014d3c:	f022                	sd	s0,32(sp)
    80014d3e:	1800                	addi	s0,sp,48
    80014d40:	fca43c23          	sd	a0,-40(s0)
    80014d44:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(lst, e)
    80014d48:	fd843503          	ld	a0,-40(s0)
    80014d4c:	2ca000ef          	jal	ra,80015016 <list_elem_start_ascending>
    80014d50:	fea43423          	sd	a0,-24(s0)
    80014d54:	a025                	j	80014d7c <list_remove+0x44>
    {
        if (e->value == value) {
    80014d56:	fe843783          	ld	a5,-24(s0)
    80014d5a:	639c                	ld	a5,0(a5)
    80014d5c:	fd043703          	ld	a4,-48(s0)
    80014d60:	00f71863          	bne	a4,a5,80014d70 <list_remove+0x38>
            list_remove_elem(e);
    80014d64:	fe843503          	ld	a0,-24(s0)
    80014d68:	030000ef          	jal	ra,80014d98 <list_remove_elem>
            return true;
    80014d6c:	4785                	li	a5,1
    80014d6e:	a005                	j	80014d8e <list_remove+0x56>
    list_for_each(lst, e)
    80014d70:	fe843503          	ld	a0,-24(s0)
    80014d74:	2ea000ef          	jal	ra,8001505e <list_elem_prev>
    80014d78:	fea43423          	sd	a0,-24(s0)
    80014d7c:	fe843583          	ld	a1,-24(s0)
    80014d80:	fd843503          	ld	a0,-40(s0)
    80014d84:	204000ef          	jal	ra,80014f88 <list_elem_valid>
    80014d88:	87aa                	mv	a5,a0
    80014d8a:	f7f1                	bnez	a5,80014d56 <list_remove+0x1e>
        }
    }
    return false;
    80014d8c:	4781                	li	a5,0
}
    80014d8e:	853e                	mv	a0,a5
    80014d90:	70a2                	ld	ra,40(sp)
    80014d92:	7402                	ld	s0,32(sp)
    80014d94:	6145                	addi	sp,sp,48
    80014d96:	8082                	ret

0000000080014d98 <list_remove_elem>:

void list_remove_elem(ListElem *e)
{
    80014d98:	1101                	addi	sp,sp,-32
    80014d9a:	ec06                	sd	ra,24(sp)
    80014d9c:	e822                	sd	s0,16(sp)
    80014d9e:	1000                	addi	s0,sp,32
    80014da0:	fea43423          	sd	a0,-24(s0)
    e->next->prev = e->prev;
    80014da4:	fe843783          	ld	a5,-24(s0)
    80014da8:	679c                	ld	a5,8(a5)
    80014daa:	fe843703          	ld	a4,-24(s0)
    80014dae:	6b18                	ld	a4,16(a4)
    80014db0:	eb98                	sd	a4,16(a5)
    e->prev->next = e->next;
    80014db2:	fe843783          	ld	a5,-24(s0)
    80014db6:	6b9c                	ld	a5,16(a5)
    80014db8:	fe843703          	ld	a4,-24(s0)
    80014dbc:	6718                	ld	a4,8(a4)
    80014dbe:	e798                	sd	a4,8(a5)
    g_kfree(e);
    80014dc0:	fe843503          	ld	a0,-24(s0)
    80014dc4:	209010ef          	jal	ra,800167cc <g_kfree>
}
    80014dc8:	0001                	nop
    80014dca:	60e2                	ld	ra,24(sp)
    80014dcc:	6442                	ld	s0,16(sp)
    80014dce:	6105                	addi	sp,sp,32
    80014dd0:	8082                	ret

0000000080014dd2 <list_find_elem>:

ListElem *list_find_elem(List *l, uint64_t value)
{
    80014dd2:	7179                	addi	sp,sp,-48
    80014dd4:	f406                	sd	ra,40(sp)
    80014dd6:	f022                	sd	s0,32(sp)
    80014dd8:	1800                	addi	s0,sp,48
    80014dda:	fca43c23          	sd	a0,-40(s0)
    80014dde:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(l, e)
    80014de2:	fd843503          	ld	a0,-40(s0)
    80014de6:	230000ef          	jal	ra,80015016 <list_elem_start_ascending>
    80014dea:	fea43423          	sd	a0,-24(s0)
    80014dee:	a00d                	j	80014e10 <list_find_elem+0x3e>
    {
        if (e->value == value) {
    80014df0:	fe843783          	ld	a5,-24(s0)
    80014df4:	639c                	ld	a5,0(a5)
    80014df6:	fd043703          	ld	a4,-48(s0)
    80014dfa:	00f71563          	bne	a4,a5,80014e04 <list_find_elem+0x32>
            return e;
    80014dfe:	fe843783          	ld	a5,-24(s0)
    80014e02:	a005                	j	80014e22 <list_find_elem+0x50>
    list_for_each(l, e)
    80014e04:	fe843503          	ld	a0,-24(s0)
    80014e08:	256000ef          	jal	ra,8001505e <list_elem_prev>
    80014e0c:	fea43423          	sd	a0,-24(s0)
    80014e10:	fe843583          	ld	a1,-24(s0)
    80014e14:	fd843503          	ld	a0,-40(s0)
    80014e18:	170000ef          	jal	ra,80014f88 <list_elem_valid>
    80014e1c:	87aa                	mv	a5,a0
    80014e1e:	fbe9                	bnez	a5,80014df0 <list_find_elem+0x1e>
        }
    }
    return NULL;
    80014e20:	4781                	li	a5,0
}
    80014e22:	853e                	mv	a0,a5
    80014e24:	70a2                	ld	ra,40(sp)
    80014e26:	7402                	ld	s0,32(sp)
    80014e28:	6145                	addi	sp,sp,48
    80014e2a:	8082                	ret

0000000080014e2c <list_contains>:

bool list_contains(const List *lst, uint64_t value)
{
    80014e2c:	7179                	addi	sp,sp,-48
    80014e2e:	f406                	sd	ra,40(sp)
    80014e30:	f022                	sd	s0,32(sp)
    80014e32:	1800                	addi	s0,sp,48
    80014e34:	fca43c23          	sd	a0,-40(s0)
    80014e38:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e = list_find_celem(lst, value);
    80014e3c:	fd043583          	ld	a1,-48(s0)
    80014e40:	fd843503          	ld	a0,-40(s0)
    80014e44:	178000ef          	jal	ra,80014fbc <list_find_celem>
    80014e48:	fea43423          	sd	a0,-24(s0)

    return e == NULL ? false : true;
    80014e4c:	fe843783          	ld	a5,-24(s0)
    80014e50:	00f037b3          	snez	a5,a5
    80014e54:	0ff7f793          	andi	a5,a5,255
}
    80014e58:	853e                	mv	a0,a5
    80014e5a:	70a2                	ld	ra,40(sp)
    80014e5c:	7402                	ld	s0,32(sp)
    80014e5e:	6145                	addi	sp,sp,48
    80014e60:	8082                	ret

0000000080014e62 <list_pop_back>:

ListElem *list_pop_back(List *l)
{
    80014e62:	7179                	addi	sp,sp,-48
    80014e64:	f406                	sd	ra,40(sp)
    80014e66:	f022                	sd	s0,32(sp)
    80014e68:	1800                	addi	s0,sp,48
    80014e6a:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.next) {
    80014e6e:	fd843703          	ld	a4,-40(s0)
    80014e72:	fd843783          	ld	a5,-40(s0)
    80014e76:	679c                	ld	a5,8(a5)
    80014e78:	00f71463          	bne	a4,a5,80014e80 <list_pop_back+0x1e>
        return NULL;
    80014e7c:	4781                	li	a5,0
    80014e7e:	a821                	j	80014e96 <list_pop_back+0x34>
    }
    ListElem *e = l->head.next;
    80014e80:	fd843783          	ld	a5,-40(s0)
    80014e84:	679c                	ld	a5,8(a5)
    80014e86:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    80014e8a:	fe843503          	ld	a0,-24(s0)
    80014e8e:	f0bff0ef          	jal	ra,80014d98 <list_remove_elem>
    return e;
    80014e92:	fe843783          	ld	a5,-24(s0)
}
    80014e96:	853e                	mv	a0,a5
    80014e98:	70a2                	ld	ra,40(sp)
    80014e9a:	7402                	ld	s0,32(sp)
    80014e9c:	6145                	addi	sp,sp,48
    80014e9e:	8082                	ret

0000000080014ea0 <list_pop>:

ListElem *list_pop(List *l)
{
    80014ea0:	7179                	addi	sp,sp,-48
    80014ea2:	f406                	sd	ra,40(sp)
    80014ea4:	f022                	sd	s0,32(sp)
    80014ea6:	1800                	addi	s0,sp,48
    80014ea8:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.prev) {
    80014eac:	fd843703          	ld	a4,-40(s0)
    80014eb0:	fd843783          	ld	a5,-40(s0)
    80014eb4:	6b9c                	ld	a5,16(a5)
    80014eb6:	00f71463          	bne	a4,a5,80014ebe <list_pop+0x1e>
        return NULL;
    80014eba:	4781                	li	a5,0
    80014ebc:	a821                	j	80014ed4 <list_pop+0x34>
    }
    ListElem *e = l->head.prev;
    80014ebe:	fd843783          	ld	a5,-40(s0)
    80014ec2:	6b9c                	ld	a5,16(a5)
    80014ec4:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    80014ec8:	fe843503          	ld	a0,-24(s0)
    80014ecc:	ecdff0ef          	jal	ra,80014d98 <list_remove_elem>
    return e;
    80014ed0:	fe843783          	ld	a5,-24(s0)
}
    80014ed4:	853e                	mv	a0,a5
    80014ed6:	70a2                	ld	ra,40(sp)
    80014ed8:	7402                	ld	s0,32(sp)
    80014eda:	6145                	addi	sp,sp,48
    80014edc:	8082                	ret

0000000080014ede <list_size>:

uint64_t list_size(const List *lst)
{
    80014ede:	7179                	addi	sp,sp,-48
    80014ee0:	f406                	sd	ra,40(sp)
    80014ee2:	f022                	sd	s0,32(sp)
    80014ee4:	1800                	addi	s0,sp,48
    80014ee6:	fca43c23          	sd	a0,-40(s0)
    uint64_t s = 0;
    80014eea:	fe043423          	sd	zero,-24(s0)
    const ListElem *e;
    list_for_ceach(lst, e)
    80014eee:	fd843503          	ld	a0,-40(s0)
    80014ef2:	19c000ef          	jal	ra,8001508e <list_celem_start_ascending>
    80014ef6:	fea43023          	sd	a0,-32(s0)
    80014efa:	a821                	j	80014f12 <list_size+0x34>
    {
        s += 1;
    80014efc:	fe843783          	ld	a5,-24(s0)
    80014f00:	0785                	addi	a5,a5,1
    80014f02:	fef43423          	sd	a5,-24(s0)
    list_for_ceach(lst, e)
    80014f06:	fe043503          	ld	a0,-32(s0)
    80014f0a:	1cc000ef          	jal	ra,800150d6 <list_celem_prev>
    80014f0e:	fea43023          	sd	a0,-32(s0)
    80014f12:	fe043583          	ld	a1,-32(s0)
    80014f16:	fd843503          	ld	a0,-40(s0)
    80014f1a:	06e000ef          	jal	ra,80014f88 <list_elem_valid>
    80014f1e:	87aa                	mv	a5,a0
    80014f20:	fff1                	bnez	a5,80014efc <list_size+0x1e>
    }
    return s;
    80014f22:	fe843783          	ld	a5,-24(s0)
}
    80014f26:	853e                	mv	a0,a5
    80014f28:	70a2                	ld	ra,40(sp)
    80014f2a:	7402                	ld	s0,32(sp)
    80014f2c:	6145                	addi	sp,sp,48
    80014f2e:	8082                	ret

0000000080014f30 <list_free>:

void list_free(List *lst)
{
    80014f30:	7179                	addi	sp,sp,-48
    80014f32:	f406                	sd	ra,40(sp)
    80014f34:	f022                	sd	s0,32(sp)
    80014f36:	1800                	addi	s0,sp,48
    80014f38:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    if (lst == NULL) {
    80014f3c:	fd843783          	ld	a5,-40(s0)
    80014f40:	cf9d                	beqz	a5,80014f7e <list_free+0x4e>
        return;
    }
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014f42:	fd843783          	ld	a5,-40(s0)
    80014f46:	679c                	ld	a5,8(a5)
    80014f48:	fef43423          	sd	a5,-24(s0)
    80014f4c:	a831                	j	80014f68 <list_free+0x38>
        n = e->next;
    80014f4e:	fe843783          	ld	a5,-24(s0)
    80014f52:	679c                	ld	a5,8(a5)
    80014f54:	fef43023          	sd	a5,-32(s0)
        g_kfree(e);
    80014f58:	fe843503          	ld	a0,-24(s0)
    80014f5c:	071010ef          	jal	ra,800167cc <g_kfree>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014f60:	fe043783          	ld	a5,-32(s0)
    80014f64:	fef43423          	sd	a5,-24(s0)
    80014f68:	fd843783          	ld	a5,-40(s0)
    80014f6c:	fe843703          	ld	a4,-24(s0)
    80014f70:	fcf71fe3          	bne	a4,a5,80014f4e <list_free+0x1e>
    }
    g_kfree(lst);
    80014f74:	fd843503          	ld	a0,-40(s0)
    80014f78:	055010ef          	jal	ra,800167cc <g_kfree>
    80014f7c:	a011                	j	80014f80 <list_free+0x50>
        return;
    80014f7e:	0001                	nop
}
    80014f80:	70a2                	ld	ra,40(sp)
    80014f82:	7402                	ld	s0,32(sp)
    80014f84:	6145                	addi	sp,sp,48
    80014f86:	8082                	ret

0000000080014f88 <list_elem_valid>:

bool list_elem_valid(const List *l, const ListElem *e)
{
    80014f88:	1101                	addi	sp,sp,-32
    80014f8a:	ec22                	sd	s0,24(sp)
    80014f8c:	1000                	addi	s0,sp,32
    80014f8e:	fea43423          	sd	a0,-24(s0)
    80014f92:	feb43023          	sd	a1,-32(s0)
    return e != NULL && e != &l->head;
    80014f96:	fe043783          	ld	a5,-32(s0)
    80014f9a:	cb89                	beqz	a5,80014fac <list_elem_valid+0x24>
    80014f9c:	fe843783          	ld	a5,-24(s0)
    80014fa0:	fe043703          	ld	a4,-32(s0)
    80014fa4:	00f70463          	beq	a4,a5,80014fac <list_elem_valid+0x24>
    80014fa8:	4785                	li	a5,1
    80014faa:	a011                	j	80014fae <list_elem_valid+0x26>
    80014fac:	4781                	li	a5,0
    80014fae:	8b85                	andi	a5,a5,1
    80014fb0:	0ff7f793          	andi	a5,a5,255
}
    80014fb4:	853e                	mv	a0,a5
    80014fb6:	6462                	ld	s0,24(sp)
    80014fb8:	6105                	addi	sp,sp,32
    80014fba:	8082                	ret

0000000080014fbc <list_find_celem>:

const ListElem *list_find_celem(const List *l, uint64_t value) 
{
    80014fbc:	7179                	addi	sp,sp,-48
    80014fbe:	f406                	sd	ra,40(sp)
    80014fc0:	f022                	sd	s0,32(sp)
    80014fc2:	1800                	addi	s0,sp,48
    80014fc4:	fca43c23          	sd	a0,-40(s0)
    80014fc8:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e;
    list_for_ceach(l, e) 
    80014fcc:	fd843503          	ld	a0,-40(s0)
    80014fd0:	0be000ef          	jal	ra,8001508e <list_celem_start_ascending>
    80014fd4:	fea43423          	sd	a0,-24(s0)
    80014fd8:	a00d                	j	80014ffa <list_find_celem+0x3e>
    {
        if (e->value == value) {
    80014fda:	fe843783          	ld	a5,-24(s0)
    80014fde:	639c                	ld	a5,0(a5)
    80014fe0:	fd043703          	ld	a4,-48(s0)
    80014fe4:	00f71563          	bne	a4,a5,80014fee <list_find_celem+0x32>
            return e;
    80014fe8:	fe843783          	ld	a5,-24(s0)
    80014fec:	a005                	j	8001500c <list_find_celem+0x50>
    list_for_ceach(l, e) 
    80014fee:	fe843503          	ld	a0,-24(s0)
    80014ff2:	0e4000ef          	jal	ra,800150d6 <list_celem_prev>
    80014ff6:	fea43423          	sd	a0,-24(s0)
    80014ffa:	fe843583          	ld	a1,-24(s0)
    80014ffe:	fd843503          	ld	a0,-40(s0)
    80015002:	f87ff0ef          	jal	ra,80014f88 <list_elem_valid>
    80015006:	87aa                	mv	a5,a0
    80015008:	fbe9                	bnez	a5,80014fda <list_find_celem+0x1e>
        }
    }
    return NULL;
    8001500a:	4781                	li	a5,0
}
    8001500c:	853e                	mv	a0,a5
    8001500e:	70a2                	ld	ra,40(sp)
    80015010:	7402                	ld	s0,32(sp)
    80015012:	6145                	addi	sp,sp,48
    80015014:	8082                	ret

0000000080015016 <list_elem_start_ascending>:

ListElem *list_elem_start_ascending(List *l)
{
    80015016:	1101                	addi	sp,sp,-32
    80015018:	ec22                	sd	s0,24(sp)
    8001501a:	1000                	addi	s0,sp,32
    8001501c:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    80015020:	fe843783          	ld	a5,-24(s0)
    80015024:	6b9c                	ld	a5,16(a5)
}
    80015026:	853e                	mv	a0,a5
    80015028:	6462                	ld	s0,24(sp)
    8001502a:	6105                	addi	sp,sp,32
    8001502c:	8082                	ret

000000008001502e <list_elem_start_descending>:

ListElem *list_elem_start_descending(List *l)
{
    8001502e:	1101                	addi	sp,sp,-32
    80015030:	ec22                	sd	s0,24(sp)
    80015032:	1000                	addi	s0,sp,32
    80015034:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    80015038:	fe843783          	ld	a5,-24(s0)
    8001503c:	679c                	ld	a5,8(a5)
}
    8001503e:	853e                	mv	a0,a5
    80015040:	6462                	ld	s0,24(sp)
    80015042:	6105                	addi	sp,sp,32
    80015044:	8082                	ret

0000000080015046 <list_elem_next>:

ListElem *list_elem_next(ListElem *e)
{
    80015046:	1101                	addi	sp,sp,-32
    80015048:	ec22                	sd	s0,24(sp)
    8001504a:	1000                	addi	s0,sp,32
    8001504c:	fea43423          	sd	a0,-24(s0)
    return e->next;
    80015050:	fe843783          	ld	a5,-24(s0)
    80015054:	679c                	ld	a5,8(a5)
}
    80015056:	853e                	mv	a0,a5
    80015058:	6462                	ld	s0,24(sp)
    8001505a:	6105                	addi	sp,sp,32
    8001505c:	8082                	ret

000000008001505e <list_elem_prev>:

ListElem *list_elem_prev(ListElem *e)
{
    8001505e:	1101                	addi	sp,sp,-32
    80015060:	ec22                	sd	s0,24(sp)
    80015062:	1000                	addi	s0,sp,32
    80015064:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    80015068:	fe843783          	ld	a5,-24(s0)
    8001506c:	6b9c                	ld	a5,16(a5)
}
    8001506e:	853e                	mv	a0,a5
    80015070:	6462                	ld	s0,24(sp)
    80015072:	6105                	addi	sp,sp,32
    80015074:	8082                	ret

0000000080015076 <list_elem_value>:

uint64_t list_elem_value(const ListElem *e)
{
    80015076:	1101                	addi	sp,sp,-32
    80015078:	ec22                	sd	s0,24(sp)
    8001507a:	1000                	addi	s0,sp,32
    8001507c:	fea43423          	sd	a0,-24(s0)
    return e->value;
    80015080:	fe843783          	ld	a5,-24(s0)
    80015084:	639c                	ld	a5,0(a5)
}
    80015086:	853e                	mv	a0,a5
    80015088:	6462                	ld	s0,24(sp)
    8001508a:	6105                	addi	sp,sp,32
    8001508c:	8082                	ret

000000008001508e <list_celem_start_ascending>:

const ListElem *list_celem_start_ascending(const List *l) {
    8001508e:	1101                	addi	sp,sp,-32
    80015090:	ec22                	sd	s0,24(sp)
    80015092:	1000                	addi	s0,sp,32
    80015094:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    80015098:	fe843783          	ld	a5,-24(s0)
    8001509c:	6b9c                	ld	a5,16(a5)
}
    8001509e:	853e                	mv	a0,a5
    800150a0:	6462                	ld	s0,24(sp)
    800150a2:	6105                	addi	sp,sp,32
    800150a4:	8082                	ret

00000000800150a6 <list_celem_start_descending>:
const ListElem *list_celem_start_descending(const List *l) {
    800150a6:	1101                	addi	sp,sp,-32
    800150a8:	ec22                	sd	s0,24(sp)
    800150aa:	1000                	addi	s0,sp,32
    800150ac:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    800150b0:	fe843783          	ld	a5,-24(s0)
    800150b4:	679c                	ld	a5,8(a5)
}
    800150b6:	853e                	mv	a0,a5
    800150b8:	6462                	ld	s0,24(sp)
    800150ba:	6105                	addi	sp,sp,32
    800150bc:	8082                	ret

00000000800150be <list_celem_next>:
const ListElem *list_celem_next(const ListElem *e) {
    800150be:	1101                	addi	sp,sp,-32
    800150c0:	ec22                	sd	s0,24(sp)
    800150c2:	1000                	addi	s0,sp,32
    800150c4:	fea43423          	sd	a0,-24(s0)
    return e->next;
    800150c8:	fe843783          	ld	a5,-24(s0)
    800150cc:	679c                	ld	a5,8(a5)
}
    800150ce:	853e                	mv	a0,a5
    800150d0:	6462                	ld	s0,24(sp)
    800150d2:	6105                	addi	sp,sp,32
    800150d4:	8082                	ret

00000000800150d6 <list_celem_prev>:
const ListElem *list_celem_prev(const ListElem *e) {
    800150d6:	1101                	addi	sp,sp,-32
    800150d8:	ec22                	sd	s0,24(sp)
    800150da:	1000                	addi	s0,sp,32
    800150dc:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    800150e0:	fe843783          	ld	a5,-24(s0)
    800150e4:	6b9c                	ld	a5,16(a5)
}
    800150e6:	853e                	mv	a0,a5
    800150e8:	6462                	ld	s0,24(sp)
    800150ea:	6105                	addi	sp,sp,32
    800150ec:	8082                	ret

00000000800150ee <list_sort_signed_long_comparator_ascending>:

// Default list comparators
LIST_COMPARATOR(list_sort_signed_long_comparator_ascending)
{
    800150ee:	1101                	addi	sp,sp,-32
    800150f0:	ec22                	sd	s0,24(sp)
    800150f2:	1000                	addi	s0,sp,32
    800150f4:	fea43423          	sd	a0,-24(s0)
    800150f8:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    800150fc:	fe843703          	ld	a4,-24(s0)
    80015100:	fe043783          	ld	a5,-32(s0)
    80015104:	00e7a7b3          	slt	a5,a5,a4
    80015108:	0017c793          	xori	a5,a5,1
    8001510c:	0ff7f793          	andi	a5,a5,255
}
    80015110:	853e                	mv	a0,a5
    80015112:	6462                	ld	s0,24(sp)
    80015114:	6105                	addi	sp,sp,32
    80015116:	8082                	ret

0000000080015118 <list_sort_signed_long_comparator_descending>:
LIST_COMPARATOR(list_sort_signed_long_comparator_descending)
{
    80015118:	1101                	addi	sp,sp,-32
    8001511a:	ec22                	sd	s0,24(sp)
    8001511c:	1000                	addi	s0,sp,32
    8001511e:	fea43423          	sd	a0,-24(s0)
    80015122:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    80015126:	fe843703          	ld	a4,-24(s0)
    8001512a:	fe043783          	ld	a5,-32(s0)
    8001512e:	00f727b3          	slt	a5,a4,a5
    80015132:	0017c793          	xori	a5,a5,1
    80015136:	0ff7f793          	andi	a5,a5,255
}
    8001513a:	853e                	mv	a0,a5
    8001513c:	6462                	ld	s0,24(sp)
    8001513e:	6105                	addi	sp,sp,32
    80015140:	8082                	ret

0000000080015142 <list_sort_unsigned_long_comparator_ascending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_ascending)
{
    80015142:	1101                	addi	sp,sp,-32
    80015144:	ec22                	sd	s0,24(sp)
    80015146:	1000                	addi	s0,sp,32
    80015148:	fea43423          	sd	a0,-24(s0)
    8001514c:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    80015150:	fe843703          	ld	a4,-24(s0)
    80015154:	fe043783          	ld	a5,-32(s0)
    80015158:	00e7b7b3          	sltu	a5,a5,a4
    8001515c:	0017c793          	xori	a5,a5,1
    80015160:	0ff7f793          	andi	a5,a5,255
}
    80015164:	853e                	mv	a0,a5
    80015166:	6462                	ld	s0,24(sp)
    80015168:	6105                	addi	sp,sp,32
    8001516a:	8082                	ret

000000008001516c <list_sort_unsigned_long_comparator_descending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_descending)
{
    8001516c:	1101                	addi	sp,sp,-32
    8001516e:	ec22                	sd	s0,24(sp)
    80015170:	1000                	addi	s0,sp,32
    80015172:	fea43423          	sd	a0,-24(s0)
    80015176:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    8001517a:	fe843703          	ld	a4,-24(s0)
    8001517e:	fe043783          	ld	a5,-32(s0)
    80015182:	00f737b3          	sltu	a5,a4,a5
    80015186:	0017c793          	xori	a5,a5,1
    8001518a:	0ff7f793          	andi	a5,a5,255
}
    8001518e:	853e                	mv	a0,a5
    80015190:	6462                	ld	s0,24(sp)
    80015192:	6105                	addi	sp,sp,32
    80015194:	8082                	ret

0000000080015196 <list_sort_string_comparator_ascending>:
LIST_COMPARATOR(list_sort_string_comparator_ascending)
{
    80015196:	1101                	addi	sp,sp,-32
    80015198:	ec06                	sd	ra,24(sp)
    8001519a:	e822                	sd	s0,16(sp)
    8001519c:	1000                	addi	s0,sp,32
    8001519e:	fea43423          	sd	a0,-24(s0)
    800151a2:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    800151a6:	fe843783          	ld	a5,-24(s0)
    800151aa:	fe043703          	ld	a4,-32(s0)
    800151ae:	85ba                	mv	a1,a4
    800151b0:	853e                	mv	a0,a5
    800151b2:	4e0000ef          	jal	ra,80015692 <strcmp>
    800151b6:	87aa                	mv	a5,a0
    800151b8:	0017a793          	slti	a5,a5,1
    800151bc:	0ff7f793          	andi	a5,a5,255
}
    800151c0:	853e                	mv	a0,a5
    800151c2:	60e2                	ld	ra,24(sp)
    800151c4:	6442                	ld	s0,16(sp)
    800151c6:	6105                	addi	sp,sp,32
    800151c8:	8082                	ret

00000000800151ca <list_sort_string_comparator_descending>:
LIST_COMPARATOR(list_sort_string_comparator_descending)
{
    800151ca:	1101                	addi	sp,sp,-32
    800151cc:	ec06                	sd	ra,24(sp)
    800151ce:	e822                	sd	s0,16(sp)
    800151d0:	1000                	addi	s0,sp,32
    800151d2:	fea43423          	sd	a0,-24(s0)
    800151d6:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    800151da:	fe843783          	ld	a5,-24(s0)
    800151de:	fe043703          	ld	a4,-32(s0)
    800151e2:	85ba                	mv	a1,a4
    800151e4:	853e                	mv	a0,a5
    800151e6:	4ac000ef          	jal	ra,80015692 <strcmp>
    800151ea:	87aa                	mv	a5,a0
    800151ec:	fff7c793          	not	a5,a5
    800151f0:	01f7d79b          	srliw	a5,a5,0x1f
    800151f4:	0ff7f793          	andi	a5,a5,255
}
    800151f8:	853e                	mv	a0,a5
    800151fa:	60e2                	ld	ra,24(sp)
    800151fc:	6442                	ld	s0,16(sp)
    800151fe:	6105                	addi	sp,sp,32
    80015200:	8082                	ret

0000000080015202 <memset>:
#include <alloc.h>
#include <stdint.h>
#include <util.h>

void *memset(void *dst, char data, int size)
{
    80015202:	715d                	addi	sp,sp,-80
    80015204:	e4a2                	sd	s0,72(sp)
    80015206:	0880                	addi	s0,sp,80
    80015208:	faa43c23          	sd	a0,-72(s0)
    8001520c:	87ae                	mv	a5,a1
    8001520e:	8732                	mv	a4,a2
    80015210:	faf40ba3          	sb	a5,-73(s0)
    80015214:	87ba                	mv	a5,a4
    80015216:	faf42823          	sw	a5,-80(s0)
    int64_t i;
    long *ldst = (long *)dst;
    8001521a:	fb843783          	ld	a5,-72(s0)
    8001521e:	fef43023          	sd	a5,-32(s0)
    char *cdst;
    char l[]              = {data, data, data, data, data, data, data, data};
    80015222:	fb744783          	lbu	a5,-73(s0)
    80015226:	fcf40423          	sb	a5,-56(s0)
    8001522a:	fb744783          	lbu	a5,-73(s0)
    8001522e:	fcf404a3          	sb	a5,-55(s0)
    80015232:	fb744783          	lbu	a5,-73(s0)
    80015236:	fcf40523          	sb	a5,-54(s0)
    8001523a:	fb744783          	lbu	a5,-73(s0)
    8001523e:	fcf405a3          	sb	a5,-53(s0)
    80015242:	fb744783          	lbu	a5,-73(s0)
    80015246:	fcf40623          	sb	a5,-52(s0)
    8001524a:	fb744783          	lbu	a5,-73(s0)
    8001524e:	fcf406a3          	sb	a5,-51(s0)
    80015252:	fb744783          	lbu	a5,-73(s0)
    80015256:	fcf40723          	sb	a5,-50(s0)
    8001525a:	fb744783          	lbu	a5,-73(s0)
    8001525e:	fcf407a3          	sb	a5,-49(s0)

    int num_8_byte_copies = size / 8;
    80015262:	fb042783          	lw	a5,-80(s0)
    80015266:	41f7d71b          	sraiw	a4,a5,0x1f
    8001526a:	01d7571b          	srliw	a4,a4,0x1d
    8001526e:	9fb9                	addw	a5,a5,a4
    80015270:	4037d79b          	sraiw	a5,a5,0x3
    80015274:	fcf42a23          	sw	a5,-44(s0)
    int num_1_byte_copies = size % 8;
    80015278:	fb042703          	lw	a4,-80(s0)
    8001527c:	41f7579b          	sraiw	a5,a4,0x1f
    80015280:	01d7d79b          	srliw	a5,a5,0x1d
    80015284:	9f3d                	addw	a4,a4,a5
    80015286:	8b1d                	andi	a4,a4,7
    80015288:	40f707bb          	subw	a5,a4,a5
    8001528c:	fcf42823          	sw	a5,-48(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    80015290:	fe043423          	sd	zero,-24(s0)
    80015294:	a005                	j	800152b4 <memset+0xb2>
        *ldst++ = *((long *)l);
    80015296:	fc840713          	addi	a4,s0,-56
    8001529a:	fe043783          	ld	a5,-32(s0)
    8001529e:	00878693          	addi	a3,a5,8
    800152a2:	fed43023          	sd	a3,-32(s0)
    800152a6:	6318                	ld	a4,0(a4)
    800152a8:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    800152aa:	fe843783          	ld	a5,-24(s0)
    800152ae:	0785                	addi	a5,a5,1
    800152b0:	fef43423          	sd	a5,-24(s0)
    800152b4:	fd442783          	lw	a5,-44(s0)
    800152b8:	fe843703          	ld	a4,-24(s0)
    800152bc:	fcf74de3          	blt	a4,a5,80015296 <memset+0x94>
    }

    cdst = (char *)ldst;
    800152c0:	fe043783          	ld	a5,-32(s0)
    800152c4:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    800152c8:	fe043423          	sd	zero,-24(s0)
    800152cc:	a005                	j	800152ec <memset+0xea>
        *cdst++ = data;
    800152ce:	fd843783          	ld	a5,-40(s0)
    800152d2:	00178713          	addi	a4,a5,1
    800152d6:	fce43c23          	sd	a4,-40(s0)
    800152da:	fb744703          	lbu	a4,-73(s0)
    800152de:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    800152e2:	fe843783          	ld	a5,-24(s0)
    800152e6:	0785                	addi	a5,a5,1
    800152e8:	fef43423          	sd	a5,-24(s0)
    800152ec:	fd042783          	lw	a5,-48(s0)
    800152f0:	fe843703          	ld	a4,-24(s0)
    800152f4:	fcf74de3          	blt	a4,a5,800152ce <memset+0xcc>
    }

    return dst;
    800152f8:	fb843783          	ld	a5,-72(s0)
}
    800152fc:	853e                	mv	a0,a5
    800152fe:	6426                	ld	s0,72(sp)
    80015300:	6161                	addi	sp,sp,80
    80015302:	8082                	ret

0000000080015304 <memcpy>:

void *memcpy(void *dst, const void *src, int size)
{
    80015304:	711d                	addi	sp,sp,-96
    80015306:	eca2                	sd	s0,88(sp)
    80015308:	1080                	addi	s0,sp,96
    8001530a:	faa43c23          	sd	a0,-72(s0)
    8001530e:	fab43823          	sd	a1,-80(s0)
    80015312:	87b2                	mv	a5,a2
    80015314:	faf42623          	sw	a5,-84(s0)
    int i;
    char *cdst;
    const char *csrc;
    long *ldst            = (long *)dst;
    80015318:	fb843783          	ld	a5,-72(s0)
    8001531c:	fcf43823          	sd	a5,-48(s0)
    const long *lsrc      = (long *)src;
    80015320:	fb043783          	ld	a5,-80(s0)
    80015324:	fcf43423          	sd	a5,-56(s0)

    int num_8_byte_copies = size / 8;
    80015328:	fac42783          	lw	a5,-84(s0)
    8001532c:	41f7d71b          	sraiw	a4,a5,0x1f
    80015330:	01d7571b          	srliw	a4,a4,0x1d
    80015334:	9fb9                	addw	a5,a5,a4
    80015336:	4037d79b          	sraiw	a5,a5,0x3
    8001533a:	fcf42223          	sw	a5,-60(s0)
    int num_1_byte_copies = size % 8;
    8001533e:	fac42703          	lw	a4,-84(s0)
    80015342:	41f7579b          	sraiw	a5,a4,0x1f
    80015346:	01d7d79b          	srliw	a5,a5,0x1d
    8001534a:	9f3d                	addw	a4,a4,a5
    8001534c:	8b1d                	andi	a4,a4,7
    8001534e:	40f707bb          	subw	a5,a4,a5
    80015352:	fcf42023          	sw	a5,-64(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    80015356:	fe042623          	sw	zero,-20(s0)
    8001535a:	a025                	j	80015382 <memcpy+0x7e>
        *ldst++ = *lsrc++;
    8001535c:	fc843703          	ld	a4,-56(s0)
    80015360:	00870793          	addi	a5,a4,8
    80015364:	fcf43423          	sd	a5,-56(s0)
    80015368:	fd043783          	ld	a5,-48(s0)
    8001536c:	00878693          	addi	a3,a5,8
    80015370:	fcd43823          	sd	a3,-48(s0)
    80015374:	6318                	ld	a4,0(a4)
    80015376:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    80015378:	fec42783          	lw	a5,-20(s0)
    8001537c:	2785                	addiw	a5,a5,1
    8001537e:	fef42623          	sw	a5,-20(s0)
    80015382:	fec42703          	lw	a4,-20(s0)
    80015386:	fc442783          	lw	a5,-60(s0)
    8001538a:	2701                	sext.w	a4,a4
    8001538c:	2781                	sext.w	a5,a5
    8001538e:	fcf747e3          	blt	a4,a5,8001535c <memcpy+0x58>
    }

    cdst = (char *)ldst;
    80015392:	fd043783          	ld	a5,-48(s0)
    80015396:	fef43023          	sd	a5,-32(s0)
    csrc = (char *)lsrc;
    8001539a:	fc843783          	ld	a5,-56(s0)
    8001539e:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    800153a2:	fe042623          	sw	zero,-20(s0)
    800153a6:	a035                	j	800153d2 <memcpy+0xce>
        *cdst++ = *csrc++;
    800153a8:	fd843703          	ld	a4,-40(s0)
    800153ac:	00170793          	addi	a5,a4,1
    800153b0:	fcf43c23          	sd	a5,-40(s0)
    800153b4:	fe043783          	ld	a5,-32(s0)
    800153b8:	00178693          	addi	a3,a5,1
    800153bc:	fed43023          	sd	a3,-32(s0)
    800153c0:	00074703          	lbu	a4,0(a4)
    800153c4:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    800153c8:	fec42783          	lw	a5,-20(s0)
    800153cc:	2785                	addiw	a5,a5,1
    800153ce:	fef42623          	sw	a5,-20(s0)
    800153d2:	fec42703          	lw	a4,-20(s0)
    800153d6:	fc042783          	lw	a5,-64(s0)
    800153da:	2701                	sext.w	a4,a4
    800153dc:	2781                	sext.w	a5,a5
    800153de:	fcf745e3          	blt	a4,a5,800153a8 <memcpy+0xa4>
    }

    return dst;
    800153e2:	fb843783          	ld	a5,-72(s0)
}
    800153e6:	853e                	mv	a0,a5
    800153e8:	6466                	ld	s0,88(sp)
    800153ea:	6125                	addi	sp,sp,96
    800153ec:	8082                	ret

00000000800153ee <memmove>:

void *memmove(void *_dst, const void *_src, int n)
{
    800153ee:	7139                	addi	sp,sp,-64
    800153f0:	fc22                	sd	s0,56(sp)
    800153f2:	0080                	addi	s0,sp,64
    800153f4:	fca43c23          	sd	a0,-40(s0)
    800153f8:	fcb43823          	sd	a1,-48(s0)
    800153fc:	87b2                	mv	a5,a2
    800153fe:	fcf42623          	sw	a5,-52(s0)
    const char *src = _src;
    80015402:	fd043783          	ld	a5,-48(s0)
    80015406:	fef43423          	sd	a5,-24(s0)
    char *dst       = _dst;
    8001540a:	fd843783          	ld	a5,-40(s0)
    8001540e:	fef43023          	sd	a5,-32(s0)

    if (n == 0)
    80015412:	fcc42783          	lw	a5,-52(s0)
    80015416:	2781                	sext.w	a5,a5
    80015418:	e781                	bnez	a5,80015420 <memmove+0x32>
        return _dst;
    8001541a:	fd843783          	ld	a5,-40(s0)
    8001541e:	a845                	j	800154ce <memmove+0xe0>

    if (src < dst && src + n > dst) {
    80015420:	fe843703          	ld	a4,-24(s0)
    80015424:	fe043783          	ld	a5,-32(s0)
    80015428:	08f77c63          	bgeu	a4,a5,800154c0 <memmove+0xd2>
    8001542c:	fcc42783          	lw	a5,-52(s0)
    80015430:	fe843703          	ld	a4,-24(s0)
    80015434:	97ba                	add	a5,a5,a4
    80015436:	fe043703          	ld	a4,-32(s0)
    8001543a:	08f77363          	bgeu	a4,a5,800154c0 <memmove+0xd2>
        src += n;
    8001543e:	fcc42783          	lw	a5,-52(s0)
    80015442:	fe843703          	ld	a4,-24(s0)
    80015446:	97ba                	add	a5,a5,a4
    80015448:	fef43423          	sd	a5,-24(s0)
        dst += n;
    8001544c:	fcc42783          	lw	a5,-52(s0)
    80015450:	fe043703          	ld	a4,-32(s0)
    80015454:	97ba                	add	a5,a5,a4
    80015456:	fef43023          	sd	a5,-32(s0)
        for (; n > 0; n -= 1) {
    8001545a:	a805                	j	8001548a <memmove+0x9c>
            *--dst = *--src;
    8001545c:	fe843783          	ld	a5,-24(s0)
    80015460:	17fd                	addi	a5,a5,-1
    80015462:	fef43423          	sd	a5,-24(s0)
    80015466:	fe043783          	ld	a5,-32(s0)
    8001546a:	17fd                	addi	a5,a5,-1
    8001546c:	fef43023          	sd	a5,-32(s0)
    80015470:	fe843783          	ld	a5,-24(s0)
    80015474:	0007c703          	lbu	a4,0(a5)
    80015478:	fe043783          	ld	a5,-32(s0)
    8001547c:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    80015480:	fcc42783          	lw	a5,-52(s0)
    80015484:	37fd                	addiw	a5,a5,-1
    80015486:	fcf42623          	sw	a5,-52(s0)
    8001548a:	fcc42783          	lw	a5,-52(s0)
    8001548e:	2781                	sext.w	a5,a5
    80015490:	fcf046e3          	bgtz	a5,8001545c <memmove+0x6e>
    if (src < dst && src + n > dst) {
    80015494:	a81d                	j	800154ca <memmove+0xdc>
        }
    }
    else {
        for (; n > 0; n -= 1) {
            *dst++ = *src++;
    80015496:	fe843703          	ld	a4,-24(s0)
    8001549a:	00170793          	addi	a5,a4,1
    8001549e:	fef43423          	sd	a5,-24(s0)
    800154a2:	fe043783          	ld	a5,-32(s0)
    800154a6:	00178693          	addi	a3,a5,1
    800154aa:	fed43023          	sd	a3,-32(s0)
    800154ae:	00074703          	lbu	a4,0(a4)
    800154b2:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    800154b6:	fcc42783          	lw	a5,-52(s0)
    800154ba:	37fd                	addiw	a5,a5,-1
    800154bc:	fcf42623          	sw	a5,-52(s0)
    800154c0:	fcc42783          	lw	a5,-52(s0)
    800154c4:	2781                	sext.w	a5,a5
    800154c6:	fcf048e3          	bgtz	a5,80015496 <memmove+0xa8>
        }
    }

    return _dst;
    800154ca:	fd843783          	ld	a5,-40(s0)
}
    800154ce:	853e                	mv	a0,a5
    800154d0:	7462                	ld	s0,56(sp)
    800154d2:	6121                	addi	sp,sp,64
    800154d4:	8082                	ret

00000000800154d6 <memcmp>:

int memcmp(const void *haystack, const void *needle, int size)
{
    800154d6:	715d                	addi	sp,sp,-80
    800154d8:	e4a2                	sd	s0,72(sp)
    800154da:	0880                	addi	s0,sp,80
    800154dc:	fca43423          	sd	a0,-56(s0)
    800154e0:	fcb43023          	sd	a1,-64(s0)
    800154e4:	87b2                	mv	a5,a2
    800154e6:	faf42e23          	sw	a5,-68(s0)
    const char *hay  = (char *)haystack;
    800154ea:	fc843783          	ld	a5,-56(s0)
    800154ee:	fef43023          	sd	a5,-32(s0)
    const char *need = (char *)needle;
    800154f2:	fc043783          	ld	a5,-64(s0)
    800154f6:	fcf43c23          	sd	a5,-40(s0)
    int i;

    for (i = 0; i < (size - 1); i++) {
    800154fa:	fe042623          	sw	zero,-20(s0)
    800154fe:	a8a1                	j	80015556 <memcmp+0x80>
        if (hay[i] != need[i]) {
    80015500:	fec42783          	lw	a5,-20(s0)
    80015504:	fe043703          	ld	a4,-32(s0)
    80015508:	97ba                	add	a5,a5,a4
    8001550a:	0007c683          	lbu	a3,0(a5)
    8001550e:	fec42783          	lw	a5,-20(s0)
    80015512:	fd843703          	ld	a4,-40(s0)
    80015516:	97ba                	add	a5,a5,a4
    80015518:	0007c783          	lbu	a5,0(a5)
    8001551c:	8736                	mv	a4,a3
    8001551e:	02f70763          	beq	a4,a5,8001554c <memcmp+0x76>
            return hay[i] - need[i];
    80015522:	fec42783          	lw	a5,-20(s0)
    80015526:	fe043703          	ld	a4,-32(s0)
    8001552a:	97ba                	add	a5,a5,a4
    8001552c:	0007c783          	lbu	a5,0(a5)
    80015530:	0007871b          	sext.w	a4,a5
    80015534:	fec42783          	lw	a5,-20(s0)
    80015538:	fd843683          	ld	a3,-40(s0)
    8001553c:	97b6                	add	a5,a5,a3
    8001553e:	0007c783          	lbu	a5,0(a5)
    80015542:	2781                	sext.w	a5,a5
    80015544:	40f707bb          	subw	a5,a4,a5
    80015548:	2781                	sext.w	a5,a5
    8001554a:	a0a1                	j	80015592 <memcmp+0xbc>
    for (i = 0; i < (size - 1); i++) {
    8001554c:	fec42783          	lw	a5,-20(s0)
    80015550:	2785                	addiw	a5,a5,1
    80015552:	fef42623          	sw	a5,-20(s0)
    80015556:	fbc42783          	lw	a5,-68(s0)
    8001555a:	37fd                	addiw	a5,a5,-1
    8001555c:	0007871b          	sext.w	a4,a5
    80015560:	fec42783          	lw	a5,-20(s0)
    80015564:	2781                	sext.w	a5,a5
    80015566:	f8e7cde3          	blt	a5,a4,80015500 <memcmp+0x2a>
        }
    }

    return hay[i] - need[i];
    8001556a:	fec42783          	lw	a5,-20(s0)
    8001556e:	fe043703          	ld	a4,-32(s0)
    80015572:	97ba                	add	a5,a5,a4
    80015574:	0007c783          	lbu	a5,0(a5)
    80015578:	0007871b          	sext.w	a4,a5
    8001557c:	fec42783          	lw	a5,-20(s0)
    80015580:	fd843683          	ld	a3,-40(s0)
    80015584:	97b6                	add	a5,a5,a3
    80015586:	0007c783          	lbu	a5,0(a5)
    8001558a:	2781                	sext.w	a5,a5
    8001558c:	40f707bb          	subw	a5,a4,a5
    80015590:	2781                	sext.w	a5,a5
}
    80015592:	853e                	mv	a0,a5
    80015594:	6426                	ld	s0,72(sp)
    80015596:	6161                	addi	sp,sp,80
    80015598:	8082                	ret

000000008001559a <atoi>:

int atoi(const char *st)
{
    8001559a:	7139                	addi	sp,sp,-64
    8001559c:	fc22                	sd	s0,56(sp)
    8001559e:	0080                	addi	s0,sp,64
    800155a0:	fca43423          	sd	a0,-56(s0)
    int r = 0;
    800155a4:	fe042623          	sw	zero,-20(s0)
    int p = 1;
    800155a8:	4785                	li	a5,1
    800155aa:	fef42423          	sw	a5,-24(s0)
    int i;
    int l = 0;
    800155ae:	fe042023          	sw	zero,-32(s0)
    int n = 0;
    800155b2:	fc042e23          	sw	zero,-36(s0)

    if (st[0] == '-') {
    800155b6:	fc843783          	ld	a5,-56(s0)
    800155ba:	0007c783          	lbu	a5,0(a5)
    800155be:	873e                	mv	a4,a5
    800155c0:	02d00793          	li	a5,45
    800155c4:	02f71063          	bne	a4,a5,800155e4 <atoi+0x4a>
        st++;
    800155c8:	fc843783          	ld	a5,-56(s0)
    800155cc:	0785                	addi	a5,a5,1
    800155ce:	fcf43423          	sd	a5,-56(s0)
        n = 1;
    800155d2:	4785                	li	a5,1
    800155d4:	fcf42e23          	sw	a5,-36(s0)
    }

    while (st[l] >= '0' && st[l] <= '9')
    800155d8:	a031                	j	800155e4 <atoi+0x4a>
        l++;
    800155da:	fe042783          	lw	a5,-32(s0)
    800155de:	2785                	addiw	a5,a5,1
    800155e0:	fef42023          	sw	a5,-32(s0)
    while (st[l] >= '0' && st[l] <= '9')
    800155e4:	fe042783          	lw	a5,-32(s0)
    800155e8:	fc843703          	ld	a4,-56(s0)
    800155ec:	97ba                	add	a5,a5,a4
    800155ee:	0007c783          	lbu	a5,0(a5)
    800155f2:	873e                	mv	a4,a5
    800155f4:	02f00793          	li	a5,47
    800155f8:	00e7fe63          	bgeu	a5,a4,80015614 <atoi+0x7a>
    800155fc:	fe042783          	lw	a5,-32(s0)
    80015600:	fc843703          	ld	a4,-56(s0)
    80015604:	97ba                	add	a5,a5,a4
    80015606:	0007c783          	lbu	a5,0(a5)
    8001560a:	873e                	mv	a4,a5
    8001560c:	03900793          	li	a5,57
    80015610:	fce7f5e3          	bgeu	a5,a4,800155da <atoi+0x40>

    for (i = l - 1; i >= 0; i--) {
    80015614:	fe042783          	lw	a5,-32(s0)
    80015618:	37fd                	addiw	a5,a5,-1
    8001561a:	fef42223          	sw	a5,-28(s0)
    8001561e:	a0a9                	j	80015668 <atoi+0xce>
        r += p * (st[i] - '0');
    80015620:	fe442783          	lw	a5,-28(s0)
    80015624:	fc843703          	ld	a4,-56(s0)
    80015628:	97ba                	add	a5,a5,a4
    8001562a:	0007c783          	lbu	a5,0(a5)
    8001562e:	2781                	sext.w	a5,a5
    80015630:	fd07879b          	addiw	a5,a5,-48
    80015634:	2781                	sext.w	a5,a5
    80015636:	fe842703          	lw	a4,-24(s0)
    8001563a:	02f707bb          	mulw	a5,a4,a5
    8001563e:	2781                	sext.w	a5,a5
    80015640:	fec42703          	lw	a4,-20(s0)
    80015644:	9fb9                	addw	a5,a5,a4
    80015646:	fef42623          	sw	a5,-20(s0)
        p *= 10;
    8001564a:	fe842703          	lw	a4,-24(s0)
    8001564e:	87ba                	mv	a5,a4
    80015650:	0027979b          	slliw	a5,a5,0x2
    80015654:	9fb9                	addw	a5,a5,a4
    80015656:	0017979b          	slliw	a5,a5,0x1
    8001565a:	fef42423          	sw	a5,-24(s0)
    for (i = l - 1; i >= 0; i--) {
    8001565e:	fe442783          	lw	a5,-28(s0)
    80015662:	37fd                	addiw	a5,a5,-1
    80015664:	fef42223          	sw	a5,-28(s0)
    80015668:	fe442783          	lw	a5,-28(s0)
    8001566c:	2781                	sext.w	a5,a5
    8001566e:	fa07d9e3          	bgez	a5,80015620 <atoi+0x86>
    }

    return (n ? -r : r);
    80015672:	fdc42783          	lw	a5,-36(s0)
    80015676:	2781                	sext.w	a5,a5
    80015678:	c799                	beqz	a5,80015686 <atoi+0xec>
    8001567a:	fec42783          	lw	a5,-20(s0)
    8001567e:	40f007bb          	negw	a5,a5
    80015682:	2781                	sext.w	a5,a5
    80015684:	a019                	j	8001568a <atoi+0xf0>
    80015686:	fec42783          	lw	a5,-20(s0)
}
    8001568a:	853e                	mv	a0,a5
    8001568c:	7462                	ld	s0,56(sp)
    8001568e:	6121                	addi	sp,sp,64
    80015690:	8082                	ret

0000000080015692 <strcmp>:

int strcmp(const char *l, const char *r)
{
    80015692:	7139                	addi	sp,sp,-64
    80015694:	fc22                	sd	s0,56(sp)
    80015696:	0080                	addi	s0,sp,64
    80015698:	fca43423          	sd	a0,-56(s0)
    8001569c:	fcb43023          	sd	a1,-64(s0)
    const unsigned char *s1 = (const unsigned char *)l;
    800156a0:	fc843783          	ld	a5,-56(s0)
    800156a4:	fef43423          	sd	a5,-24(s0)
    const unsigned char *s2 = (const unsigned char *)r;
    800156a8:	fc043783          	ld	a5,-64(s0)
    800156ac:	fef43023          	sd	a5,-32(s0)
    unsigned int c1, c2;

    do {
        c1 = (unsigned char)*s1++;
    800156b0:	fe843783          	ld	a5,-24(s0)
    800156b4:	00178713          	addi	a4,a5,1
    800156b8:	fee43423          	sd	a4,-24(s0)
    800156bc:	0007c783          	lbu	a5,0(a5)
    800156c0:	fcf42e23          	sw	a5,-36(s0)
        c2 = (unsigned char)*s2++;
    800156c4:	fe043783          	ld	a5,-32(s0)
    800156c8:	00178713          	addi	a4,a5,1
    800156cc:	fee43023          	sd	a4,-32(s0)
    800156d0:	0007c783          	lbu	a5,0(a5)
    800156d4:	fcf42c23          	sw	a5,-40(s0)
        if (c1 == '\0')
    800156d8:	fdc42783          	lw	a5,-36(s0)
    800156dc:	2781                	sext.w	a5,a5
    800156de:	eb91                	bnez	a5,800156f2 <strcmp+0x60>
            return c1 - c2;
    800156e0:	fdc42703          	lw	a4,-36(s0)
    800156e4:	fd842783          	lw	a5,-40(s0)
    800156e8:	40f707bb          	subw	a5,a4,a5
    800156ec:	2781                	sext.w	a5,a5
    800156ee:	2781                	sext.w	a5,a5
    800156f0:	a00d                	j	80015712 <strcmp+0x80>
    } while (c1 == c2);
    800156f2:	fdc42703          	lw	a4,-36(s0)
    800156f6:	fd842783          	lw	a5,-40(s0)
    800156fa:	2701                	sext.w	a4,a4
    800156fc:	2781                	sext.w	a5,a5
    800156fe:	faf709e3          	beq	a4,a5,800156b0 <strcmp+0x1e>

    return c1 - c2;
    80015702:	fdc42703          	lw	a4,-36(s0)
    80015706:	fd842783          	lw	a5,-40(s0)
    8001570a:	40f707bb          	subw	a5,a4,a5
    8001570e:	2781                	sext.w	a5,a5
    80015710:	2781                	sext.w	a5,a5
}
    80015712:	853e                	mv	a0,a5
    80015714:	7462                	ld	s0,56(sp)
    80015716:	6121                	addi	sp,sp,64
    80015718:	8082                	ret

000000008001571a <strncmp>:

int strncmp(const char *left, const char *right, int n)
{
    8001571a:	7139                	addi	sp,sp,-64
    8001571c:	fc22                	sd	s0,56(sp)
    8001571e:	0080                	addi	s0,sp,64
    80015720:	fca43c23          	sd	a0,-40(s0)
    80015724:	fcb43823          	sd	a1,-48(s0)
    80015728:	87b2                	mv	a5,a2
    8001572a:	fcf42623          	sw	a5,-52(s0)
    unsigned int c1 = '\0';
    8001572e:	fe042623          	sw	zero,-20(s0)
    unsigned int c2 = '\0';
    80015732:	fe042423          	sw	zero,-24(s0)

    if (n >= 4) {
    80015736:	fcc42783          	lw	a5,-52(s0)
    8001573a:	0007871b          	sext.w	a4,a5
    8001573e:	478d                	li	a5,3
    80015740:	1ce7da63          	bge	a5,a4,80015914 <strncmp+0x1fa>
        int n4 = n >> 2;
    80015744:	fcc42783          	lw	a5,-52(s0)
    80015748:	4027d79b          	sraiw	a5,a5,0x2
    8001574c:	fef42223          	sw	a5,-28(s0)
        do {
            c1 = (unsigned char)*left++;
    80015750:	fd843783          	ld	a5,-40(s0)
    80015754:	00178713          	addi	a4,a5,1
    80015758:	fce43c23          	sd	a4,-40(s0)
    8001575c:	0007c783          	lbu	a5,0(a5)
    80015760:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80015764:	fd043783          	ld	a5,-48(s0)
    80015768:	00178713          	addi	a4,a5,1
    8001576c:	fce43823          	sd	a4,-48(s0)
    80015770:	0007c783          	lbu	a5,0(a5)
    80015774:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    80015778:	fec42783          	lw	a5,-20(s0)
    8001577c:	2781                	sext.w	a5,a5
    8001577e:	cb89                	beqz	a5,80015790 <strncmp+0x76>
    80015780:	fec42703          	lw	a4,-20(s0)
    80015784:	fe842783          	lw	a5,-24(s0)
    80015788:	2701                	sext.w	a4,a4
    8001578a:	2781                	sext.w	a5,a5
    8001578c:	00f70b63          	beq	a4,a5,800157a2 <strncmp+0x88>
                return c1 - c2;
    80015790:	fec42703          	lw	a4,-20(s0)
    80015794:	fe842783          	lw	a5,-24(s0)
    80015798:	40f707bb          	subw	a5,a4,a5
    8001579c:	2781                	sext.w	a5,a5
    8001579e:	2781                	sext.w	a5,a5
    800157a0:	a279                	j	8001592e <strncmp+0x214>
            }

            c1 = (unsigned char)*left++;
    800157a2:	fd843783          	ld	a5,-40(s0)
    800157a6:	00178713          	addi	a4,a5,1
    800157aa:	fce43c23          	sd	a4,-40(s0)
    800157ae:	0007c783          	lbu	a5,0(a5)
    800157b2:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    800157b6:	fd043783          	ld	a5,-48(s0)
    800157ba:	00178713          	addi	a4,a5,1
    800157be:	fce43823          	sd	a4,-48(s0)
    800157c2:	0007c783          	lbu	a5,0(a5)
    800157c6:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    800157ca:	fec42783          	lw	a5,-20(s0)
    800157ce:	2781                	sext.w	a5,a5
    800157d0:	cb89                	beqz	a5,800157e2 <strncmp+0xc8>
    800157d2:	fec42703          	lw	a4,-20(s0)
    800157d6:	fe842783          	lw	a5,-24(s0)
    800157da:	2701                	sext.w	a4,a4
    800157dc:	2781                	sext.w	a5,a5
    800157de:	00f70b63          	beq	a4,a5,800157f4 <strncmp+0xda>
                return c1 - c2;
    800157e2:	fec42703          	lw	a4,-20(s0)
    800157e6:	fe842783          	lw	a5,-24(s0)
    800157ea:	40f707bb          	subw	a5,a4,a5
    800157ee:	2781                	sext.w	a5,a5
    800157f0:	2781                	sext.w	a5,a5
    800157f2:	aa35                	j	8001592e <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    800157f4:	fd843783          	ld	a5,-40(s0)
    800157f8:	00178713          	addi	a4,a5,1
    800157fc:	fce43c23          	sd	a4,-40(s0)
    80015800:	0007c783          	lbu	a5,0(a5)
    80015804:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80015808:	fd043783          	ld	a5,-48(s0)
    8001580c:	00178713          	addi	a4,a5,1
    80015810:	fce43823          	sd	a4,-48(s0)
    80015814:	0007c783          	lbu	a5,0(a5)
    80015818:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    8001581c:	fec42783          	lw	a5,-20(s0)
    80015820:	2781                	sext.w	a5,a5
    80015822:	cb89                	beqz	a5,80015834 <strncmp+0x11a>
    80015824:	fec42703          	lw	a4,-20(s0)
    80015828:	fe842783          	lw	a5,-24(s0)
    8001582c:	2701                	sext.w	a4,a4
    8001582e:	2781                	sext.w	a5,a5
    80015830:	00f70b63          	beq	a4,a5,80015846 <strncmp+0x12c>
                return c1 - c2;
    80015834:	fec42703          	lw	a4,-20(s0)
    80015838:	fe842783          	lw	a5,-24(s0)
    8001583c:	40f707bb          	subw	a5,a4,a5
    80015840:	2781                	sext.w	a5,a5
    80015842:	2781                	sext.w	a5,a5
    80015844:	a0ed                	j	8001592e <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    80015846:	fd843783          	ld	a5,-40(s0)
    8001584a:	00178713          	addi	a4,a5,1
    8001584e:	fce43c23          	sd	a4,-40(s0)
    80015852:	0007c783          	lbu	a5,0(a5)
    80015856:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    8001585a:	fd043783          	ld	a5,-48(s0)
    8001585e:	00178713          	addi	a4,a5,1
    80015862:	fce43823          	sd	a4,-48(s0)
    80015866:	0007c783          	lbu	a5,0(a5)
    8001586a:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    8001586e:	fec42783          	lw	a5,-20(s0)
    80015872:	2781                	sext.w	a5,a5
    80015874:	cb89                	beqz	a5,80015886 <strncmp+0x16c>
    80015876:	fec42703          	lw	a4,-20(s0)
    8001587a:	fe842783          	lw	a5,-24(s0)
    8001587e:	2701                	sext.w	a4,a4
    80015880:	2781                	sext.w	a5,a5
    80015882:	00f70b63          	beq	a4,a5,80015898 <strncmp+0x17e>
                return c1 - c2;
    80015886:	fec42703          	lw	a4,-20(s0)
    8001588a:	fe842783          	lw	a5,-24(s0)
    8001588e:	40f707bb          	subw	a5,a4,a5
    80015892:	2781                	sext.w	a5,a5
    80015894:	2781                	sext.w	a5,a5
    80015896:	a861                	j	8001592e <strncmp+0x214>
            }
        } while (--n4 > 0);
    80015898:	fe442783          	lw	a5,-28(s0)
    8001589c:	37fd                	addiw	a5,a5,-1
    8001589e:	fef42223          	sw	a5,-28(s0)
    800158a2:	fe442783          	lw	a5,-28(s0)
    800158a6:	2781                	sext.w	a5,a5
    800158a8:	eaf044e3          	bgtz	a5,80015750 <strncmp+0x36>
        n &= 3;
    800158ac:	fcc42783          	lw	a5,-52(s0)
    800158b0:	8b8d                	andi	a5,a5,3
    800158b2:	fcf42623          	sw	a5,-52(s0)
    }

    while (n > 0) {
    800158b6:	a8b9                	j	80015914 <strncmp+0x1fa>
        c1 = (unsigned char)*left++;
    800158b8:	fd843783          	ld	a5,-40(s0)
    800158bc:	00178713          	addi	a4,a5,1
    800158c0:	fce43c23          	sd	a4,-40(s0)
    800158c4:	0007c783          	lbu	a5,0(a5)
    800158c8:	fef42623          	sw	a5,-20(s0)
        c2 = (unsigned char)*right++;
    800158cc:	fd043783          	ld	a5,-48(s0)
    800158d0:	00178713          	addi	a4,a5,1
    800158d4:	fce43823          	sd	a4,-48(s0)
    800158d8:	0007c783          	lbu	a5,0(a5)
    800158dc:	fef42423          	sw	a5,-24(s0)
        if (c1 == '\0' || c1 != c2)
    800158e0:	fec42783          	lw	a5,-20(s0)
    800158e4:	2781                	sext.w	a5,a5
    800158e6:	cb89                	beqz	a5,800158f8 <strncmp+0x1de>
    800158e8:	fec42703          	lw	a4,-20(s0)
    800158ec:	fe842783          	lw	a5,-24(s0)
    800158f0:	2701                	sext.w	a4,a4
    800158f2:	2781                	sext.w	a5,a5
    800158f4:	00f70b63          	beq	a4,a5,8001590a <strncmp+0x1f0>
            return c1 - c2;
    800158f8:	fec42703          	lw	a4,-20(s0)
    800158fc:	fe842783          	lw	a5,-24(s0)
    80015900:	40f707bb          	subw	a5,a4,a5
    80015904:	2781                	sext.w	a5,a5
    80015906:	2781                	sext.w	a5,a5
    80015908:	a01d                	j	8001592e <strncmp+0x214>
        n--;
    8001590a:	fcc42783          	lw	a5,-52(s0)
    8001590e:	37fd                	addiw	a5,a5,-1
    80015910:	fcf42623          	sw	a5,-52(s0)
    while (n > 0) {
    80015914:	fcc42783          	lw	a5,-52(s0)
    80015918:	2781                	sext.w	a5,a5
    8001591a:	f8f04fe3          	bgtz	a5,800158b8 <strncmp+0x19e>
    }

    return c1 - c2;
    8001591e:	fec42703          	lw	a4,-20(s0)
    80015922:	fe842783          	lw	a5,-24(s0)
    80015926:	40f707bb          	subw	a5,a4,a5
    8001592a:	2781                	sext.w	a5,a5
    8001592c:	2781                	sext.w	a5,a5
}
    8001592e:	853e                	mv	a0,a5
    80015930:	7462                	ld	s0,56(sp)
    80015932:	6121                	addi	sp,sp,64
    80015934:	8082                	ret

0000000080015936 <strfindchr>:

int strfindchr(const char *r, char t)
{
    80015936:	7179                	addi	sp,sp,-48
    80015938:	f422                	sd	s0,40(sp)
    8001593a:	1800                	addi	s0,sp,48
    8001593c:	fca43c23          	sd	a0,-40(s0)
    80015940:	87ae                	mv	a5,a1
    80015942:	fcf40ba3          	sb	a5,-41(s0)
    int i = 0;
    80015946:	fe042623          	sw	zero,-20(s0)
    while (r[i] != t) {
    8001594a:	a005                	j	8001596a <strfindchr+0x34>
        if (r[i] == '\0') {
    8001594c:	fec42783          	lw	a5,-20(s0)
    80015950:	fd843703          	ld	a4,-40(s0)
    80015954:	97ba                	add	a5,a5,a4
    80015956:	0007c783          	lbu	a5,0(a5)
    8001595a:	e399                	bnez	a5,80015960 <strfindchr+0x2a>
            return -1;
    8001595c:	57fd                	li	a5,-1
    8001595e:	a02d                	j	80015988 <strfindchr+0x52>
        }
        i++;
    80015960:	fec42783          	lw	a5,-20(s0)
    80015964:	2785                	addiw	a5,a5,1
    80015966:	fef42623          	sw	a5,-20(s0)
    while (r[i] != t) {
    8001596a:	fec42783          	lw	a5,-20(s0)
    8001596e:	fd843703          	ld	a4,-40(s0)
    80015972:	97ba                	add	a5,a5,a4
    80015974:	0007c703          	lbu	a4,0(a5)
    80015978:	fd744783          	lbu	a5,-41(s0)
    8001597c:	0ff7f793          	andi	a5,a5,255
    80015980:	fce796e3          	bne	a5,a4,8001594c <strfindchr+0x16>
    }
    return i;
    80015984:	fec42783          	lw	a5,-20(s0)
}
    80015988:	853e                	mv	a0,a5
    8001598a:	7422                	ld	s0,40(sp)
    8001598c:	6145                	addi	sp,sp,48
    8001598e:	8082                	ret

0000000080015990 <strlen>:

int strlen(const char *s)
{
    80015990:	7179                	addi	sp,sp,-48
    80015992:	f422                	sd	s0,40(sp)
    80015994:	1800                	addi	s0,sp,48
    80015996:	fca43c23          	sd	a0,-40(s0)
    int len = 0;
    8001599a:	fe042623          	sw	zero,-20(s0)
    while (s[len] && ++len)
    8001599e:	0001                	nop
    800159a0:	fec42783          	lw	a5,-20(s0)
    800159a4:	fd843703          	ld	a4,-40(s0)
    800159a8:	97ba                	add	a5,a5,a4
    800159aa:	0007c783          	lbu	a5,0(a5)
    800159ae:	cb91                	beqz	a5,800159c2 <strlen+0x32>
    800159b0:	fec42783          	lw	a5,-20(s0)
    800159b4:	2785                	addiw	a5,a5,1
    800159b6:	fef42623          	sw	a5,-20(s0)
    800159ba:	fec42783          	lw	a5,-20(s0)
    800159be:	2781                	sext.w	a5,a5
    800159c0:	f3e5                	bnez	a5,800159a0 <strlen+0x10>
        ;
    return len;
    800159c2:	fec42783          	lw	a5,-20(s0)
}
    800159c6:	853e                	mv	a0,a5
    800159c8:	7422                	ld	s0,40(sp)
    800159ca:	6145                	addi	sp,sp,48
    800159cc:	8082                	ret

00000000800159ce <strcpy>:

char *strcpy(char *dest, const char *s)
{
    800159ce:	7179                	addi	sp,sp,-48
    800159d0:	f422                	sd	s0,40(sp)
    800159d2:	1800                	addi	s0,sp,48
    800159d4:	fca43c23          	sd	a0,-40(s0)
    800159d8:	fcb43823          	sd	a1,-48(s0)
    char *o = dest;
    800159dc:	fd843783          	ld	a5,-40(s0)
    800159e0:	fef43423          	sd	a5,-24(s0)
    while (*s) {
    800159e4:	a00d                	j	80015a06 <strcpy+0x38>
        *dest++ = *s++;
    800159e6:	fd043703          	ld	a4,-48(s0)
    800159ea:	00170793          	addi	a5,a4,1
    800159ee:	fcf43823          	sd	a5,-48(s0)
    800159f2:	fd843783          	ld	a5,-40(s0)
    800159f6:	00178693          	addi	a3,a5,1
    800159fa:	fcd43c23          	sd	a3,-40(s0)
    800159fe:	00074703          	lbu	a4,0(a4)
    80015a02:	00e78023          	sb	a4,0(a5)
    while (*s) {
    80015a06:	fd043783          	ld	a5,-48(s0)
    80015a0a:	0007c783          	lbu	a5,0(a5)
    80015a0e:	ffe1                	bnez	a5,800159e6 <strcpy+0x18>
    }
    *dest = '\0';
    80015a10:	fd843783          	ld	a5,-40(s0)
    80015a14:	00078023          	sb	zero,0(a5)
    return o;
    80015a18:	fe843783          	ld	a5,-24(s0)
}
    80015a1c:	853e                	mv	a0,a5
    80015a1e:	7422                	ld	s0,40(sp)
    80015a20:	6145                	addi	sp,sp,48
    80015a22:	8082                	ret

0000000080015a24 <strncpy>:

char *strncpy(char *dest, const char *s, int n)
{
    80015a24:	7139                	addi	sp,sp,-64
    80015a26:	fc22                	sd	s0,56(sp)
    80015a28:	0080                	addi	s0,sp,64
    80015a2a:	fca43c23          	sd	a0,-40(s0)
    80015a2e:	fcb43823          	sd	a1,-48(s0)
    80015a32:	87b2                	mv	a5,a2
    80015a34:	fcf42623          	sw	a5,-52(s0)
    char *o = dest;
    80015a38:	fd843783          	ld	a5,-40(s0)
    80015a3c:	fef43423          	sd	a5,-24(s0)
    while (*s && n-- > 0) {
    80015a40:	a00d                	j	80015a62 <strncpy+0x3e>
        *dest++ = *s++;
    80015a42:	fd043703          	ld	a4,-48(s0)
    80015a46:	00170793          	addi	a5,a4,1
    80015a4a:	fcf43823          	sd	a5,-48(s0)
    80015a4e:	fd843783          	ld	a5,-40(s0)
    80015a52:	00178693          	addi	a3,a5,1
    80015a56:	fcd43c23          	sd	a3,-40(s0)
    80015a5a:	00074703          	lbu	a4,0(a4)
    80015a5e:	00e78023          	sb	a4,0(a5)
    while (*s && n-- > 0) {
    80015a62:	fd043783          	ld	a5,-48(s0)
    80015a66:	0007c783          	lbu	a5,0(a5)
    80015a6a:	cb89                	beqz	a5,80015a7c <strncpy+0x58>
    80015a6c:	fcc42783          	lw	a5,-52(s0)
    80015a70:	fff7871b          	addiw	a4,a5,-1
    80015a74:	fce42623          	sw	a4,-52(s0)
    80015a78:	fcf045e3          	bgtz	a5,80015a42 <strncpy+0x1e>
    }
    *dest = '\0';
    80015a7c:	fd843783          	ld	a5,-40(s0)
    80015a80:	00078023          	sb	zero,0(a5)
    return o;
    80015a84:	fe843783          	ld	a5,-24(s0)
}
    80015a88:	853e                	mv	a0,a5
    80015a8a:	7462                	ld	s0,56(sp)
    80015a8c:	6121                	addi	sp,sp,64
    80015a8e:	8082                	ret

0000000080015a90 <strdup>:


char *strdup(const char *src)
{
    80015a90:	7179                	addi	sp,sp,-48
    80015a92:	f406                	sd	ra,40(sp)
    80015a94:	f022                	sd	s0,32(sp)
    80015a96:	1800                	addi	s0,sp,48
    80015a98:	fca43c23          	sd	a0,-40(s0)
    int len   = strlen(src);
    80015a9c:	fd843503          	ld	a0,-40(s0)
    80015aa0:	ef1ff0ef          	jal	ra,80015990 <strlen>
    80015aa4:	87aa                	mv	a5,a0
    80015aa6:	fef42623          	sw	a5,-20(s0)
    char *ret = (char *)g_kmalloc(len + 1);
    80015aaa:	fec42783          	lw	a5,-20(s0)
    80015aae:	2785                	addiw	a5,a5,1
    80015ab0:	2781                	sext.w	a5,a5
    80015ab2:	853e                	mv	a0,a5
    80015ab4:	47f000ef          	jal	ra,80016732 <g_kmalloc>
    80015ab8:	fea43023          	sd	a0,-32(s0)
    if (!ret) {
    80015abc:	fe043783          	ld	a5,-32(s0)
    80015ac0:	e399                	bnez	a5,80015ac6 <strdup+0x36>
        return NULL;
    80015ac2:	4781                	li	a5,0
    80015ac4:	a801                	j	80015ad4 <strdup+0x44>
    }
    return strcpy(ret, src);
    80015ac6:	fd843583          	ld	a1,-40(s0)
    80015aca:	fe043503          	ld	a0,-32(s0)
    80015ace:	f01ff0ef          	jal	ra,800159ce <strcpy>
    80015ad2:	87aa                	mv	a5,a0
}
    80015ad4:	853e                	mv	a0,a5
    80015ad6:	70a2                	ld	ra,40(sp)
    80015ad8:	7402                	ld	s0,32(sp)
    80015ada:	6145                	addi	sp,sp,48
    80015adc:	8082                	ret

0000000080015ade <strstartswith>:

bool strstartswith(const char *src, const char *start)
{
    80015ade:	7179                	addi	sp,sp,-48
    80015ae0:	f406                	sd	ra,40(sp)
    80015ae2:	f022                	sd	s0,32(sp)
    80015ae4:	1800                	addi	s0,sp,48
    80015ae6:	fca43c23          	sd	a0,-40(s0)
    80015aea:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80015aee:	fd843503          	ld	a0,-40(s0)
    80015af2:	e9fff0ef          	jal	ra,80015990 <strlen>
    80015af6:	87aa                	mv	a5,a0
    80015af8:	fef42423          	sw	a5,-24(s0)
    int start_len = strlen(start);
    80015afc:	fd043503          	ld	a0,-48(s0)
    80015b00:	e91ff0ef          	jal	ra,80015990 <strlen>
    80015b04:	87aa                	mv	a5,a0
    80015b06:	fef42223          	sw	a5,-28(s0)
    int i;
    
    if (src_len < start_len) {
    80015b0a:	fe842703          	lw	a4,-24(s0)
    80015b0e:	fe442783          	lw	a5,-28(s0)
    80015b12:	2701                	sext.w	a4,a4
    80015b14:	2781                	sext.w	a5,a5
    80015b16:	00f75463          	bge	a4,a5,80015b1e <strstartswith+0x40>
        return false;
    80015b1a:	4781                	li	a5,0
    80015b1c:	a0a9                	j	80015b66 <strstartswith+0x88>
    }

    for (i = 0;i < start_len;i++) {
    80015b1e:	fe042623          	sw	zero,-20(s0)
    80015b22:	a80d                	j	80015b54 <strstartswith+0x76>
        if (src[i] != start[i]) {
    80015b24:	fec42783          	lw	a5,-20(s0)
    80015b28:	fd843703          	ld	a4,-40(s0)
    80015b2c:	97ba                	add	a5,a5,a4
    80015b2e:	0007c683          	lbu	a3,0(a5)
    80015b32:	fec42783          	lw	a5,-20(s0)
    80015b36:	fd043703          	ld	a4,-48(s0)
    80015b3a:	97ba                	add	a5,a5,a4
    80015b3c:	0007c783          	lbu	a5,0(a5)
    80015b40:	8736                	mv	a4,a3
    80015b42:	00f70463          	beq	a4,a5,80015b4a <strstartswith+0x6c>
            return false;
    80015b46:	4781                	li	a5,0
    80015b48:	a839                	j	80015b66 <strstartswith+0x88>
    for (i = 0;i < start_len;i++) {
    80015b4a:	fec42783          	lw	a5,-20(s0)
    80015b4e:	2785                	addiw	a5,a5,1
    80015b50:	fef42623          	sw	a5,-20(s0)
    80015b54:	fec42703          	lw	a4,-20(s0)
    80015b58:	fe442783          	lw	a5,-28(s0)
    80015b5c:	2701                	sext.w	a4,a4
    80015b5e:	2781                	sext.w	a5,a5
    80015b60:	fcf742e3          	blt	a4,a5,80015b24 <strstartswith+0x46>
        }
    }

    return true;
    80015b64:	4785                	li	a5,1
}
    80015b66:	853e                	mv	a0,a5
    80015b68:	70a2                	ld	ra,40(sp)
    80015b6a:	7402                	ld	s0,32(sp)
    80015b6c:	6145                	addi	sp,sp,48
    80015b6e:	8082                	ret

0000000080015b70 <strendswith>:

bool strendswith(const char *src, const char *end)
{
    80015b70:	7179                	addi	sp,sp,-48
    80015b72:	f406                	sd	ra,40(sp)
    80015b74:	f022                	sd	s0,32(sp)
    80015b76:	1800                	addi	s0,sp,48
    80015b78:	fca43c23          	sd	a0,-40(s0)
    80015b7c:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80015b80:	fd843503          	ld	a0,-40(s0)
    80015b84:	e0dff0ef          	jal	ra,80015990 <strlen>
    80015b88:	87aa                	mv	a5,a0
    80015b8a:	fef42423          	sw	a5,-24(s0)
    int end_len = strlen(end);
    80015b8e:	fd043503          	ld	a0,-48(s0)
    80015b92:	dffff0ef          	jal	ra,80015990 <strlen>
    80015b96:	87aa                	mv	a5,a0
    80015b98:	fef42223          	sw	a5,-28(s0)
    int cmp = src_len - end_len;
    80015b9c:	fe842703          	lw	a4,-24(s0)
    80015ba0:	fe442783          	lw	a5,-28(s0)
    80015ba4:	40f707bb          	subw	a5,a4,a5
    80015ba8:	fef42023          	sw	a5,-32(s0)
    int i;
    
    if (src_len < end_len) {
    80015bac:	fe842703          	lw	a4,-24(s0)
    80015bb0:	fe442783          	lw	a5,-28(s0)
    80015bb4:	2701                	sext.w	a4,a4
    80015bb6:	2781                	sext.w	a5,a5
    80015bb8:	00f75463          	bge	a4,a5,80015bc0 <strendswith+0x50>
        return false;
    80015bbc:	4781                	li	a5,0
    80015bbe:	a891                	j	80015c12 <strendswith+0xa2>
    }

    for (i = 0;i < end_len;i++) {
    80015bc0:	fe042623          	sw	zero,-20(s0)
    80015bc4:	a835                	j	80015c00 <strendswith+0x90>
        if (src[i + cmp] != end[i]) {
    80015bc6:	fec42703          	lw	a4,-20(s0)
    80015bca:	fe042783          	lw	a5,-32(s0)
    80015bce:	9fb9                	addw	a5,a5,a4
    80015bd0:	2781                	sext.w	a5,a5
    80015bd2:	873e                	mv	a4,a5
    80015bd4:	fd843783          	ld	a5,-40(s0)
    80015bd8:	97ba                	add	a5,a5,a4
    80015bda:	0007c683          	lbu	a3,0(a5)
    80015bde:	fec42783          	lw	a5,-20(s0)
    80015be2:	fd043703          	ld	a4,-48(s0)
    80015be6:	97ba                	add	a5,a5,a4
    80015be8:	0007c783          	lbu	a5,0(a5)
    80015bec:	8736                	mv	a4,a3
    80015bee:	00f70463          	beq	a4,a5,80015bf6 <strendswith+0x86>
            return false;
    80015bf2:	4781                	li	a5,0
    80015bf4:	a839                	j	80015c12 <strendswith+0xa2>
    for (i = 0;i < end_len;i++) {
    80015bf6:	fec42783          	lw	a5,-20(s0)
    80015bfa:	2785                	addiw	a5,a5,1
    80015bfc:	fef42623          	sw	a5,-20(s0)
    80015c00:	fec42703          	lw	a4,-20(s0)
    80015c04:	fe442783          	lw	a5,-28(s0)
    80015c08:	2701                	sext.w	a4,a4
    80015c0a:	2781                	sext.w	a5,a5
    80015c0c:	faf74de3          	blt	a4,a5,80015bc6 <strendswith+0x56>
        }
    }

    return true;    
    80015c10:	4785                	li	a5,1
}
    80015c12:	853e                	mv	a0,a5
    80015c14:	70a2                	ld	ra,40(sp)
    80015c16:	7402                	ld	s0,32(sp)
    80015c18:	6145                	addi	sp,sp,48
    80015c1a:	8082                	ret

0000000080015c1c <vector_init>:
    uint32_t size;
    uint32_t capacity;
    uint64_t *values;
} Vector;

static Vector *vector_init(Vector *vec) {
    80015c1c:	1101                	addi	sp,sp,-32
    80015c1e:	ec22                	sd	s0,24(sp)
    80015c20:	1000                	addi	s0,sp,32
    80015c22:	fea43423          	sd	a0,-24(s0)
    if (vec == NULL) {
    80015c26:	fe843783          	ld	a5,-24(s0)
    80015c2a:	e399                	bnez	a5,80015c30 <vector_init+0x14>
        return NULL;
    80015c2c:	4781                	li	a5,0
    80015c2e:	a839                	j	80015c4c <vector_init+0x30>
    }
    vec->size = 0;
    80015c30:	fe843783          	ld	a5,-24(s0)
    80015c34:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    80015c38:	fe843783          	ld	a5,-24(s0)
    80015c3c:	0007a223          	sw	zero,4(a5)
    vec->values = NULL;
    80015c40:	fe843783          	ld	a5,-24(s0)
    80015c44:	0007b423          	sd	zero,8(a5)
    return vec;
    80015c48:	fe843783          	ld	a5,-24(s0)
}
    80015c4c:	853e                	mv	a0,a5
    80015c4e:	6462                	ld	s0,24(sp)
    80015c50:	6105                	addi	sp,sp,32
    80015c52:	8082                	ret

0000000080015c54 <vector_new>:

Vector *vector_new(void) {
    80015c54:	1141                	addi	sp,sp,-16
    80015c56:	e406                	sd	ra,8(sp)
    80015c58:	e022                	sd	s0,0(sp)
    80015c5a:	0800                	addi	s0,sp,16
    return vector_init((Vector *)g_kmalloc(sizeof(Vector)));
    80015c5c:	4541                	li	a0,16
    80015c5e:	2d5000ef          	jal	ra,80016732 <g_kmalloc>
    80015c62:	87aa                	mv	a5,a0
    80015c64:	853e                	mv	a0,a5
    80015c66:	fb7ff0ef          	jal	ra,80015c1c <vector_init>
    80015c6a:	87aa                	mv	a5,a0
}
    80015c6c:	853e                	mv	a0,a5
    80015c6e:	60a2                	ld	ra,8(sp)
    80015c70:	6402                	ld	s0,0(sp)
    80015c72:	0141                	addi	sp,sp,16
    80015c74:	8082                	ret

0000000080015c76 <vector_init_with_capacity>:

static Vector *vector_init_with_capacity(Vector *vec, uint32_t capacity) {
    80015c76:	1101                	addi	sp,sp,-32
    80015c78:	ec06                	sd	ra,24(sp)
    80015c7a:	e822                	sd	s0,16(sp)
    80015c7c:	1000                	addi	s0,sp,32
    80015c7e:	fea43423          	sd	a0,-24(s0)
    80015c82:	87ae                	mv	a5,a1
    80015c84:	fef42223          	sw	a5,-28(s0)
    if (vec == NULL) {
    80015c88:	fe843783          	ld	a5,-24(s0)
    80015c8c:	e399                	bnez	a5,80015c92 <vector_init_with_capacity+0x1c>
        return NULL;
    80015c8e:	4781                	li	a5,0
    80015c90:	a035                	j	80015cbc <vector_init_with_capacity+0x46>
    }
    vec->size = 0;
    80015c92:	fe843783          	ld	a5,-24(s0)
    80015c96:	0007a023          	sw	zero,0(a5)
    vec->capacity = capacity;
    80015c9a:	fe843783          	ld	a5,-24(s0)
    80015c9e:	fe442703          	lw	a4,-28(s0)
    80015ca2:	c3d8                	sw	a4,4(a5)
    vec->values = (uint64_t *)g_kcalloc(capacity, sizeof(uint64_t));
    80015ca4:	fe446783          	lwu	a5,-28(s0)
    80015ca8:	45a1                	li	a1,8
    80015caa:	853e                	mv	a0,a5
    80015cac:	2bf000ef          	jal	ra,8001676a <g_kcalloc>
    80015cb0:	872a                	mv	a4,a0
    80015cb2:	fe843783          	ld	a5,-24(s0)
    80015cb6:	e798                	sd	a4,8(a5)
    return vec;
    80015cb8:	fe843783          	ld	a5,-24(s0)
}
    80015cbc:	853e                	mv	a0,a5
    80015cbe:	60e2                	ld	ra,24(sp)
    80015cc0:	6442                	ld	s0,16(sp)
    80015cc2:	6105                	addi	sp,sp,32
    80015cc4:	8082                	ret

0000000080015cc6 <vector_new_with_capacity>:

Vector *vector_new_with_capacity(uint32_t capacity) {
    80015cc6:	1101                	addi	sp,sp,-32
    80015cc8:	ec06                	sd	ra,24(sp)
    80015cca:	e822                	sd	s0,16(sp)
    80015ccc:	1000                	addi	s0,sp,32
    80015cce:	87aa                	mv	a5,a0
    80015cd0:	fef42623          	sw	a5,-20(s0)
    return vector_init_with_capacity((Vector *)g_kmalloc(sizeof(Vector)), capacity);
    80015cd4:	4541                	li	a0,16
    80015cd6:	25d000ef          	jal	ra,80016732 <g_kmalloc>
    80015cda:	872a                	mv	a4,a0
    80015cdc:	fec42783          	lw	a5,-20(s0)
    80015ce0:	85be                	mv	a1,a5
    80015ce2:	853a                	mv	a0,a4
    80015ce4:	f93ff0ef          	jal	ra,80015c76 <vector_init_with_capacity>
    80015ce8:	87aa                	mv	a5,a0
}
    80015cea:	853e                	mv	a0,a5
    80015cec:	60e2                	ld	ra,24(sp)
    80015cee:	6442                	ld	s0,16(sp)
    80015cf0:	6105                	addi	sp,sp,32
    80015cf2:	8082                	ret

0000000080015cf4 <vector_push>:

void vector_push(Vector *vec, uint64_t value) {
    80015cf4:	1101                	addi	sp,sp,-32
    80015cf6:	ec06                	sd	ra,24(sp)
    80015cf8:	e822                	sd	s0,16(sp)
    80015cfa:	1000                	addi	s0,sp,32
    80015cfc:	fea43423          	sd	a0,-24(s0)
    80015d00:	feb43023          	sd	a1,-32(s0)
    vector_insert(vec, vec->size, value);
    80015d04:	fe843783          	ld	a5,-24(s0)
    80015d08:	439c                	lw	a5,0(a5)
    80015d0a:	fe043603          	ld	a2,-32(s0)
    80015d0e:	85be                	mv	a1,a5
    80015d10:	fe843503          	ld	a0,-24(s0)
    80015d14:	00e000ef          	jal	ra,80015d22 <vector_insert>
}
    80015d18:	0001                	nop
    80015d1a:	60e2                	ld	ra,24(sp)
    80015d1c:	6442                	ld	s0,16(sp)
    80015d1e:	6105                	addi	sp,sp,32
    80015d20:	8082                	ret

0000000080015d22 <vector_insert>:

void vector_insert(Vector *vec, uint32_t idx, uint64_t value) {
    80015d22:	7139                	addi	sp,sp,-64
    80015d24:	fc06                	sd	ra,56(sp)
    80015d26:	f822                	sd	s0,48(sp)
    80015d28:	0080                	addi	s0,sp,64
    80015d2a:	fca43c23          	sd	a0,-40(s0)
    80015d2e:	87ae                	mv	a5,a1
    80015d30:	fcc43423          	sd	a2,-56(s0)
    80015d34:	fcf42a23          	sw	a5,-44(s0)
    uint32_t i;
    vector_resize(vec, vec->size + 1);
    80015d38:	fd843783          	ld	a5,-40(s0)
    80015d3c:	439c                	lw	a5,0(a5)
    80015d3e:	2785                	addiw	a5,a5,1
    80015d40:	2781                	sext.w	a5,a5
    80015d42:	85be                	mv	a1,a5
    80015d44:	fd843503          	ld	a0,-40(s0)
    80015d48:	214000ef          	jal	ra,80015f5c <vector_resize>
    for (i = vec->size - 1;i > idx;i--) {
    80015d4c:	fd843783          	ld	a5,-40(s0)
    80015d50:	439c                	lw	a5,0(a5)
    80015d52:	37fd                	addiw	a5,a5,-1
    80015d54:	fef42623          	sw	a5,-20(s0)
    80015d58:	a805                	j	80015d88 <vector_insert+0x66>
        vector_set(vec, i, vector_get_unchecked(vec, i - 1));
    80015d5a:	fec42783          	lw	a5,-20(s0)
    80015d5e:	37fd                	addiw	a5,a5,-1
    80015d60:	2781                	sext.w	a5,a5
    80015d62:	85be                	mv	a1,a5
    80015d64:	fd843503          	ld	a0,-40(s0)
    80015d68:	13a000ef          	jal	ra,80015ea2 <vector_get_unchecked>
    80015d6c:	872a                	mv	a4,a0
    80015d6e:	fec42783          	lw	a5,-20(s0)
    80015d72:	863a                	mv	a2,a4
    80015d74:	85be                	mv	a1,a5
    80015d76:	fd843503          	ld	a0,-40(s0)
    80015d7a:	094000ef          	jal	ra,80015e0e <vector_set>
    for (i = vec->size - 1;i > idx;i--) {
    80015d7e:	fec42783          	lw	a5,-20(s0)
    80015d82:	37fd                	addiw	a5,a5,-1
    80015d84:	fef42623          	sw	a5,-20(s0)
    80015d88:	fec42703          	lw	a4,-20(s0)
    80015d8c:	fd442783          	lw	a5,-44(s0)
    80015d90:	2701                	sext.w	a4,a4
    80015d92:	2781                	sext.w	a5,a5
    80015d94:	fce7e3e3          	bltu	a5,a4,80015d5a <vector_insert+0x38>
    }
    vector_set(vec, idx, value);
    80015d98:	fd442783          	lw	a5,-44(s0)
    80015d9c:	fc843603          	ld	a2,-56(s0)
    80015da0:	85be                	mv	a1,a5
    80015da2:	fd843503          	ld	a0,-40(s0)
    80015da6:	068000ef          	jal	ra,80015e0e <vector_set>
}
    80015daa:	0001                	nop
    80015dac:	70e2                	ld	ra,56(sp)
    80015dae:	7442                	ld	s0,48(sp)
    80015db0:	6121                	addi	sp,sp,64
    80015db2:	8082                	ret

0000000080015db4 <vector_find>:

int vector_find(Vector *vec, uint64_t val) {
    80015db4:	7179                	addi	sp,sp,-48
    80015db6:	f422                	sd	s0,40(sp)
    80015db8:	1800                	addi	s0,sp,48
    80015dba:	fca43c23          	sd	a0,-40(s0)
    80015dbe:	fcb43823          	sd	a1,-48(s0)
    int i;
    for (i = 0;i < (int)vec->size;i++) {
    80015dc2:	fe042623          	sw	zero,-20(s0)
    80015dc6:	a02d                	j	80015df0 <vector_find+0x3c>
        if (vec->values[i] == val) {
    80015dc8:	fd843783          	ld	a5,-40(s0)
    80015dcc:	6798                	ld	a4,8(a5)
    80015dce:	fec42783          	lw	a5,-20(s0)
    80015dd2:	078e                	slli	a5,a5,0x3
    80015dd4:	97ba                	add	a5,a5,a4
    80015dd6:	639c                	ld	a5,0(a5)
    80015dd8:	fd043703          	ld	a4,-48(s0)
    80015ddc:	00f71563          	bne	a4,a5,80015de6 <vector_find+0x32>
            return i;
    80015de0:	fec42783          	lw	a5,-20(s0)
    80015de4:	a00d                	j	80015e06 <vector_find+0x52>
    for (i = 0;i < (int)vec->size;i++) {
    80015de6:	fec42783          	lw	a5,-20(s0)
    80015dea:	2785                	addiw	a5,a5,1
    80015dec:	fef42623          	sw	a5,-20(s0)
    80015df0:	fd843783          	ld	a5,-40(s0)
    80015df4:	439c                	lw	a5,0(a5)
    80015df6:	0007871b          	sext.w	a4,a5
    80015dfa:	fec42783          	lw	a5,-20(s0)
    80015dfe:	2781                	sext.w	a5,a5
    80015e00:	fce7c4e3          	blt	a5,a4,80015dc8 <vector_find+0x14>
        }
    }
    return -1;
    80015e04:	57fd                	li	a5,-1
}
    80015e06:	853e                	mv	a0,a5
    80015e08:	7422                	ld	s0,40(sp)
    80015e0a:	6145                	addi	sp,sp,48
    80015e0c:	8082                	ret

0000000080015e0e <vector_set>:

bool vector_set(Vector *vec, uint32_t idx, uint64_t val) {
    80015e0e:	7179                	addi	sp,sp,-48
    80015e10:	f422                	sd	s0,40(sp)
    80015e12:	1800                	addi	s0,sp,48
    80015e14:	fea43423          	sd	a0,-24(s0)
    80015e18:	87ae                	mv	a5,a1
    80015e1a:	fcc43c23          	sd	a2,-40(s0)
    80015e1e:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015e22:	fe843783          	ld	a5,-24(s0)
    80015e26:	4398                	lw	a4,0(a5)
    80015e28:	fe442783          	lw	a5,-28(s0)
    80015e2c:	2781                	sext.w	a5,a5
    80015e2e:	00e7e463          	bltu	a5,a4,80015e36 <vector_set+0x28>
        return false;
    80015e32:	4781                	li	a5,0
    80015e34:	a821                	j	80015e4c <vector_set+0x3e>
    }
    vec->values[idx] = val;
    80015e36:	fe843783          	ld	a5,-24(s0)
    80015e3a:	6798                	ld	a4,8(a5)
    80015e3c:	fe446783          	lwu	a5,-28(s0)
    80015e40:	078e                	slli	a5,a5,0x3
    80015e42:	97ba                	add	a5,a5,a4
    80015e44:	fd843703          	ld	a4,-40(s0)
    80015e48:	e398                	sd	a4,0(a5)
    return true;
    80015e4a:	4785                	li	a5,1
}
    80015e4c:	853e                	mv	a0,a5
    80015e4e:	7422                	ld	s0,40(sp)
    80015e50:	6145                	addi	sp,sp,48
    80015e52:	8082                	ret

0000000080015e54 <vector_get>:

bool vector_get(Vector *vec, uint32_t idx, uint64_t *val) {
    80015e54:	7179                	addi	sp,sp,-48
    80015e56:	f422                	sd	s0,40(sp)
    80015e58:	1800                	addi	s0,sp,48
    80015e5a:	fea43423          	sd	a0,-24(s0)
    80015e5e:	87ae                	mv	a5,a1
    80015e60:	fcc43c23          	sd	a2,-40(s0)
    80015e64:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015e68:	fe843783          	ld	a5,-24(s0)
    80015e6c:	4398                	lw	a4,0(a5)
    80015e6e:	fe442783          	lw	a5,-28(s0)
    80015e72:	2781                	sext.w	a5,a5
    80015e74:	00e7e463          	bltu	a5,a4,80015e7c <vector_get+0x28>
        return false;
    80015e78:	4781                	li	a5,0
    80015e7a:	a005                	j	80015e9a <vector_get+0x46>
    }
    if (val != NULL) {
    80015e7c:	fd843783          	ld	a5,-40(s0)
    80015e80:	cf81                	beqz	a5,80015e98 <vector_get+0x44>
        *val = vec->values[idx];
    80015e82:	fe843783          	ld	a5,-24(s0)
    80015e86:	6798                	ld	a4,8(a5)
    80015e88:	fe446783          	lwu	a5,-28(s0)
    80015e8c:	078e                	slli	a5,a5,0x3
    80015e8e:	97ba                	add	a5,a5,a4
    80015e90:	6398                	ld	a4,0(a5)
    80015e92:	fd843783          	ld	a5,-40(s0)
    80015e96:	e398                	sd	a4,0(a5)
    }
    return true;
    80015e98:	4785                	li	a5,1
}
    80015e9a:	853e                	mv	a0,a5
    80015e9c:	7422                	ld	s0,40(sp)
    80015e9e:	6145                	addi	sp,sp,48
    80015ea0:	8082                	ret

0000000080015ea2 <vector_get_unchecked>:

uint64_t vector_get_unchecked(Vector *vec, uint32_t idx) {
    80015ea2:	1101                	addi	sp,sp,-32
    80015ea4:	ec22                	sd	s0,24(sp)
    80015ea6:	1000                	addi	s0,sp,32
    80015ea8:	fea43423          	sd	a0,-24(s0)
    80015eac:	87ae                	mv	a5,a1
    80015eae:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015eb2:	fe843783          	ld	a5,-24(s0)
    80015eb6:	4398                	lw	a4,0(a5)
    80015eb8:	fe442783          	lw	a5,-28(s0)
    80015ebc:	2781                	sext.w	a5,a5
    80015ebe:	00e7e463          	bltu	a5,a4,80015ec6 <vector_get_unchecked+0x24>
        return 0;
    80015ec2:	4781                	li	a5,0
    80015ec4:	a809                	j	80015ed6 <vector_get_unchecked+0x34>
    }
    return vec->values[idx];
    80015ec6:	fe843783          	ld	a5,-24(s0)
    80015eca:	6798                	ld	a4,8(a5)
    80015ecc:	fe446783          	lwu	a5,-28(s0)
    80015ed0:	078e                	slli	a5,a5,0x3
    80015ed2:	97ba                	add	a5,a5,a4
    80015ed4:	639c                	ld	a5,0(a5)
}
    80015ed6:	853e                	mv	a0,a5
    80015ed8:	6462                	ld	s0,24(sp)
    80015eda:	6105                	addi	sp,sp,32
    80015edc:	8082                	ret

0000000080015ede <vector_resize_with_default>:


void vector_resize_with_default(Vector *vec, uint32_t new_size, uint64_t def) {
    80015ede:	7139                	addi	sp,sp,-64
    80015ee0:	fc06                	sd	ra,56(sp)
    80015ee2:	f822                	sd	s0,48(sp)
    80015ee4:	0080                	addi	s0,sp,64
    80015ee6:	fca43c23          	sd	a0,-40(s0)
    80015eea:	87ae                	mv	a5,a1
    80015eec:	fcc43423          	sd	a2,-56(s0)
    80015ef0:	fcf42a23          	sw	a5,-44(s0)
    uint32_t old_size = vec->size;
    80015ef4:	fd843783          	ld	a5,-40(s0)
    80015ef8:	439c                	lw	a5,0(a5)
    80015efa:	fef42423          	sw	a5,-24(s0)
    vector_resize(vec, new_size);
    80015efe:	fd442783          	lw	a5,-44(s0)
    80015f02:	85be                	mv	a1,a5
    80015f04:	fd843503          	ld	a0,-40(s0)
    80015f08:	054000ef          	jal	ra,80015f5c <vector_resize>
    if (old_size < new_size) {
    80015f0c:	fe842703          	lw	a4,-24(s0)
    80015f10:	fd442783          	lw	a5,-44(s0)
    80015f14:	2701                	sext.w	a4,a4
    80015f16:	2781                	sext.w	a5,a5
    80015f18:	02f77d63          	bgeu	a4,a5,80015f52 <vector_resize_with_default+0x74>
        uint32_t i;
        for (i = old_size;i < new_size;i++) {
    80015f1c:	fe842783          	lw	a5,-24(s0)
    80015f20:	fef42623          	sw	a5,-20(s0)
    80015f24:	a839                	j	80015f42 <vector_resize_with_default+0x64>
            vector_set(vec, i, def);
    80015f26:	fec42783          	lw	a5,-20(s0)
    80015f2a:	fc843603          	ld	a2,-56(s0)
    80015f2e:	85be                	mv	a1,a5
    80015f30:	fd843503          	ld	a0,-40(s0)
    80015f34:	edbff0ef          	jal	ra,80015e0e <vector_set>
        for (i = old_size;i < new_size;i++) {
    80015f38:	fec42783          	lw	a5,-20(s0)
    80015f3c:	2785                	addiw	a5,a5,1
    80015f3e:	fef42623          	sw	a5,-20(s0)
    80015f42:	fec42703          	lw	a4,-20(s0)
    80015f46:	fd442783          	lw	a5,-44(s0)
    80015f4a:	2701                	sext.w	a4,a4
    80015f4c:	2781                	sext.w	a5,a5
    80015f4e:	fcf76ce3          	bltu	a4,a5,80015f26 <vector_resize_with_default+0x48>
        }
    }
}
    80015f52:	0001                	nop
    80015f54:	70e2                	ld	ra,56(sp)
    80015f56:	7442                	ld	s0,48(sp)
    80015f58:	6121                	addi	sp,sp,64
    80015f5a:	8082                	ret

0000000080015f5c <vector_resize>:

void vector_resize(Vector *vec, uint32_t new_size) {
    80015f5c:	7179                	addi	sp,sp,-48
    80015f5e:	f406                	sd	ra,40(sp)
    80015f60:	f022                	sd	s0,32(sp)
    80015f62:	1800                	addi	s0,sp,48
    80015f64:	fca43c23          	sd	a0,-40(s0)
    80015f68:	87ae                	mv	a5,a1
    80015f6a:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_size > vec->capacity) {
    80015f6e:	fd843783          	ld	a5,-40(s0)
    80015f72:	43d8                	lw	a4,4(a5)
    80015f74:	fd442783          	lw	a5,-44(s0)
    80015f78:	2781                	sext.w	a5,a5
    80015f7a:	06f77963          	bgeu	a4,a5,80015fec <vector_resize+0x90>
        vals = (uint64_t *)g_kcalloc(new_size, sizeof(uint64_t));
    80015f7e:	fd446783          	lwu	a5,-44(s0)
    80015f82:	45a1                	li	a1,8
    80015f84:	853e                	mv	a0,a5
    80015f86:	7e4000ef          	jal	ra,8001676a <g_kcalloc>
    80015f8a:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    80015f8e:	fe042623          	sw	zero,-20(s0)
    80015f92:	a02d                	j	80015fbc <vector_resize+0x60>
            vals[i] = vec->values[i];
    80015f94:	fd843783          	ld	a5,-40(s0)
    80015f98:	6798                	ld	a4,8(a5)
    80015f9a:	fec46783          	lwu	a5,-20(s0)
    80015f9e:	078e                	slli	a5,a5,0x3
    80015fa0:	973e                	add	a4,a4,a5
    80015fa2:	fec46783          	lwu	a5,-20(s0)
    80015fa6:	078e                	slli	a5,a5,0x3
    80015fa8:	fe043683          	ld	a3,-32(s0)
    80015fac:	97b6                	add	a5,a5,a3
    80015fae:	6318                	ld	a4,0(a4)
    80015fb0:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80015fb2:	fec42783          	lw	a5,-20(s0)
    80015fb6:	2785                	addiw	a5,a5,1
    80015fb8:	fef42623          	sw	a5,-20(s0)
    80015fbc:	fd843783          	ld	a5,-40(s0)
    80015fc0:	4398                	lw	a4,0(a5)
    80015fc2:	fec42783          	lw	a5,-20(s0)
    80015fc6:	2781                	sext.w	a5,a5
    80015fc8:	fce7e6e3          	bltu	a5,a4,80015f94 <vector_resize+0x38>
        }
        g_kfree(vec->values);
    80015fcc:	fd843783          	ld	a5,-40(s0)
    80015fd0:	679c                	ld	a5,8(a5)
    80015fd2:	853e                	mv	a0,a5
    80015fd4:	7f8000ef          	jal	ra,800167cc <g_kfree>
        vec->values = vals;
    80015fd8:	fd843783          	ld	a5,-40(s0)
    80015fdc:	fe043703          	ld	a4,-32(s0)
    80015fe0:	e798                	sd	a4,8(a5)
        vec->capacity = new_size;
    80015fe2:	fd843783          	ld	a5,-40(s0)
    80015fe6:	fd442703          	lw	a4,-44(s0)
    80015fea:	c3d8                	sw	a4,4(a5)
    }        
    vec->size = new_size;    
    80015fec:	fd843783          	ld	a5,-40(s0)
    80015ff0:	fd442703          	lw	a4,-44(s0)
    80015ff4:	c398                	sw	a4,0(a5)
}
    80015ff6:	0001                	nop
    80015ff8:	70a2                	ld	ra,40(sp)
    80015ffa:	7402                	ld	s0,32(sp)
    80015ffc:	6145                	addi	sp,sp,48
    80015ffe:	8082                	ret

0000000080016000 <vector_reserve>:

void vector_reserve(Vector *vec, uint32_t new_capacity) {
    80016000:	7179                	addi	sp,sp,-48
    80016002:	f406                	sd	ra,40(sp)
    80016004:	f022                	sd	s0,32(sp)
    80016006:	1800                	addi	s0,sp,48
    80016008:	fca43c23          	sd	a0,-40(s0)
    8001600c:	87ae                	mv	a5,a1
    8001600e:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_capacity > vec->capacity) {
    80016012:	fd843783          	ld	a5,-40(s0)
    80016016:	43d8                	lw	a4,4(a5)
    80016018:	fd442783          	lw	a5,-44(s0)
    8001601c:	2781                	sext.w	a5,a5
    8001601e:	06f77a63          	bgeu	a4,a5,80016092 <vector_reserve+0x92>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    80016022:	fd446783          	lwu	a5,-44(s0)
    80016026:	45a1                	li	a1,8
    80016028:	853e                	mv	a0,a5
    8001602a:	740000ef          	jal	ra,8001676a <g_kcalloc>
    8001602e:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    80016032:	fe042623          	sw	zero,-20(s0)
    80016036:	a02d                	j	80016060 <vector_reserve+0x60>
            vals[i] = vec->values[i];
    80016038:	fd843783          	ld	a5,-40(s0)
    8001603c:	6798                	ld	a4,8(a5)
    8001603e:	fec46783          	lwu	a5,-20(s0)
    80016042:	078e                	slli	a5,a5,0x3
    80016044:	973e                	add	a4,a4,a5
    80016046:	fec46783          	lwu	a5,-20(s0)
    8001604a:	078e                	slli	a5,a5,0x3
    8001604c:	fe043683          	ld	a3,-32(s0)
    80016050:	97b6                	add	a5,a5,a3
    80016052:	6318                	ld	a4,0(a4)
    80016054:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80016056:	fec42783          	lw	a5,-20(s0)
    8001605a:	2785                	addiw	a5,a5,1
    8001605c:	fef42623          	sw	a5,-20(s0)
    80016060:	fd843783          	ld	a5,-40(s0)
    80016064:	4398                	lw	a4,0(a5)
    80016066:	fec42783          	lw	a5,-20(s0)
    8001606a:	2781                	sext.w	a5,a5
    8001606c:	fce7e6e3          	bltu	a5,a4,80016038 <vector_reserve+0x38>
        }
        g_kfree(vec->values);
    80016070:	fd843783          	ld	a5,-40(s0)
    80016074:	679c                	ld	a5,8(a5)
    80016076:	853e                	mv	a0,a5
    80016078:	754000ef          	jal	ra,800167cc <g_kfree>
        vec->values = vals;
    8001607c:	fd843783          	ld	a5,-40(s0)
    80016080:	fe043703          	ld	a4,-32(s0)
    80016084:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    80016086:	fd843783          	ld	a5,-40(s0)
    8001608a:	fd442703          	lw	a4,-44(s0)
    8001608e:	c3d8                	sw	a4,4(a5)
        }
        g_kfree(vec->values);
        vec->values = vals;
        vec->capacity = new_capacity;
    }
}
    80016090:	a04d                	j	80016132 <vector_reserve+0x132>
    else if (new_capacity > 0 && new_capacity < vec->capacity) {
    80016092:	fd442783          	lw	a5,-44(s0)
    80016096:	2781                	sext.w	a5,a5
    80016098:	cfc9                	beqz	a5,80016132 <vector_reserve+0x132>
    8001609a:	fd843783          	ld	a5,-40(s0)
    8001609e:	43d8                	lw	a4,4(a5)
    800160a0:	fd442783          	lw	a5,-44(s0)
    800160a4:	2781                	sext.w	a5,a5
    800160a6:	08e7f663          	bgeu	a5,a4,80016132 <vector_reserve+0x132>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    800160aa:	fd446783          	lwu	a5,-44(s0)
    800160ae:	45a1                	li	a1,8
    800160b0:	853e                	mv	a0,a5
    800160b2:	6b8000ef          	jal	ra,8001676a <g_kcalloc>
    800160b6:	fea43023          	sd	a0,-32(s0)
        if (new_capacity < vec->size) {
    800160ba:	fd843783          	ld	a5,-40(s0)
    800160be:	4398                	lw	a4,0(a5)
    800160c0:	fd442783          	lw	a5,-44(s0)
    800160c4:	2781                	sext.w	a5,a5
    800160c6:	00e7f763          	bgeu	a5,a4,800160d4 <vector_reserve+0xd4>
            vec->size = new_capacity;
    800160ca:	fd843783          	ld	a5,-40(s0)
    800160ce:	fd442703          	lw	a4,-44(s0)
    800160d2:	c398                	sw	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    800160d4:	fe042623          	sw	zero,-20(s0)
    800160d8:	a02d                	j	80016102 <vector_reserve+0x102>
            vals[i] = vec->values[i];
    800160da:	fd843783          	ld	a5,-40(s0)
    800160de:	6798                	ld	a4,8(a5)
    800160e0:	fec46783          	lwu	a5,-20(s0)
    800160e4:	078e                	slli	a5,a5,0x3
    800160e6:	973e                	add	a4,a4,a5
    800160e8:	fec46783          	lwu	a5,-20(s0)
    800160ec:	078e                	slli	a5,a5,0x3
    800160ee:	fe043683          	ld	a3,-32(s0)
    800160f2:	97b6                	add	a5,a5,a3
    800160f4:	6318                	ld	a4,0(a4)
    800160f6:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    800160f8:	fec42783          	lw	a5,-20(s0)
    800160fc:	2785                	addiw	a5,a5,1
    800160fe:	fef42623          	sw	a5,-20(s0)
    80016102:	fd843783          	ld	a5,-40(s0)
    80016106:	4398                	lw	a4,0(a5)
    80016108:	fec42783          	lw	a5,-20(s0)
    8001610c:	2781                	sext.w	a5,a5
    8001610e:	fce7e6e3          	bltu	a5,a4,800160da <vector_reserve+0xda>
        g_kfree(vec->values);
    80016112:	fd843783          	ld	a5,-40(s0)
    80016116:	679c                	ld	a5,8(a5)
    80016118:	853e                	mv	a0,a5
    8001611a:	6b2000ef          	jal	ra,800167cc <g_kfree>
        vec->values = vals;
    8001611e:	fd843783          	ld	a5,-40(s0)
    80016122:	fe043703          	ld	a4,-32(s0)
    80016126:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    80016128:	fd843783          	ld	a5,-40(s0)
    8001612c:	fd442703          	lw	a4,-44(s0)
    80016130:	c3d8                	sw	a4,4(a5)
}
    80016132:	0001                	nop
    80016134:	70a2                	ld	ra,40(sp)
    80016136:	7402                	ld	s0,32(sp)
    80016138:	6145                	addi	sp,sp,48
    8001613a:	8082                	ret

000000008001613c <vector_remove>:

bool vector_remove(Vector *vec, uint32_t idx) {
    8001613c:	1101                	addi	sp,sp,-32
    8001613e:	ec22                	sd	s0,24(sp)
    80016140:	1000                	addi	s0,sp,32
    80016142:	fea43423          	sd	a0,-24(s0)
    80016146:	87ae                	mv	a5,a1
    80016148:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    8001614c:	fe843783          	ld	a5,-24(s0)
    80016150:	4398                	lw	a4,0(a5)
    80016152:	fe442783          	lw	a5,-28(s0)
    80016156:	2781                	sext.w	a5,a5
    80016158:	00e7e463          	bltu	a5,a4,80016160 <vector_remove+0x24>
        return false;
    8001615c:	4781                	li	a5,0
    8001615e:	a8a9                	j	800161b8 <vector_remove+0x7c>
    }
    vec->size -= 1;
    80016160:	fe843783          	ld	a5,-24(s0)
    80016164:	439c                	lw	a5,0(a5)
    80016166:	37fd                	addiw	a5,a5,-1
    80016168:	0007871b          	sext.w	a4,a5
    8001616c:	fe843783          	ld	a5,-24(s0)
    80016170:	c398                	sw	a4,0(a5)
    for (;idx < vec->size;idx++) {
    80016172:	a815                	j	800161a6 <vector_remove+0x6a>
        vec->values[idx] = vec->values[idx + 1];
    80016174:	fe843783          	ld	a5,-24(s0)
    80016178:	6798                	ld	a4,8(a5)
    8001617a:	fe442783          	lw	a5,-28(s0)
    8001617e:	2785                	addiw	a5,a5,1
    80016180:	2781                	sext.w	a5,a5
    80016182:	1782                	slli	a5,a5,0x20
    80016184:	9381                	srli	a5,a5,0x20
    80016186:	078e                	slli	a5,a5,0x3
    80016188:	973e                	add	a4,a4,a5
    8001618a:	fe843783          	ld	a5,-24(s0)
    8001618e:	6794                	ld	a3,8(a5)
    80016190:	fe446783          	lwu	a5,-28(s0)
    80016194:	078e                	slli	a5,a5,0x3
    80016196:	97b6                	add	a5,a5,a3
    80016198:	6318                	ld	a4,0(a4)
    8001619a:	e398                	sd	a4,0(a5)
    for (;idx < vec->size;idx++) {
    8001619c:	fe442783          	lw	a5,-28(s0)
    800161a0:	2785                	addiw	a5,a5,1
    800161a2:	fef42223          	sw	a5,-28(s0)
    800161a6:	fe843783          	ld	a5,-24(s0)
    800161aa:	4398                	lw	a4,0(a5)
    800161ac:	fe442783          	lw	a5,-28(s0)
    800161b0:	2781                	sext.w	a5,a5
    800161b2:	fce7e1e3          	bltu	a5,a4,80016174 <vector_remove+0x38>
    }
    return true;
    800161b6:	4785                	li	a5,1
}
    800161b8:	853e                	mv	a0,a5
    800161ba:	6462                	ld	s0,24(sp)
    800161bc:	6105                	addi	sp,sp,32
    800161be:	8082                	ret

00000000800161c0 <vector_remove_value>:

bool vector_remove_value(Vector *vec, uint64_t val) {
    800161c0:	7179                	addi	sp,sp,-48
    800161c2:	f406                	sd	ra,40(sp)
    800161c4:	f022                	sd	s0,32(sp)
    800161c6:	1800                	addi	s0,sp,48
    800161c8:	fca43c23          	sd	a0,-40(s0)
    800161cc:	fcb43823          	sd	a1,-48(s0)
    uint32_t i;
    for (i = 0;i < vec->size;i++) {
    800161d0:	fe042623          	sw	zero,-20(s0)
    800161d4:	a81d                	j	8001620a <vector_remove_value+0x4a>
        if (vec->values[i] == val) {
    800161d6:	fd843783          	ld	a5,-40(s0)
    800161da:	6798                	ld	a4,8(a5)
    800161dc:	fec46783          	lwu	a5,-20(s0)
    800161e0:	078e                	slli	a5,a5,0x3
    800161e2:	97ba                	add	a5,a5,a4
    800161e4:	639c                	ld	a5,0(a5)
    800161e6:	fd043703          	ld	a4,-48(s0)
    800161ea:	00f71b63          	bne	a4,a5,80016200 <vector_remove_value+0x40>
            vector_remove(vec, i);
    800161ee:	fec42783          	lw	a5,-20(s0)
    800161f2:	85be                	mv	a1,a5
    800161f4:	fd843503          	ld	a0,-40(s0)
    800161f8:	f45ff0ef          	jal	ra,8001613c <vector_remove>
            return true;
    800161fc:	4785                	li	a5,1
    800161fe:	a839                	j	8001621c <vector_remove_value+0x5c>
    for (i = 0;i < vec->size;i++) {
    80016200:	fec42783          	lw	a5,-20(s0)
    80016204:	2785                	addiw	a5,a5,1
    80016206:	fef42623          	sw	a5,-20(s0)
    8001620a:	fd843783          	ld	a5,-40(s0)
    8001620e:	4398                	lw	a4,0(a5)
    80016210:	fec42783          	lw	a5,-20(s0)
    80016214:	2781                	sext.w	a5,a5
    80016216:	fce7e0e3          	bltu	a5,a4,800161d6 <vector_remove_value+0x16>
        }
    }
    return false;
    8001621a:	4781                	li	a5,0
}
    8001621c:	853e                	mv	a0,a5
    8001621e:	70a2                	ld	ra,40(sp)
    80016220:	7402                	ld	s0,32(sp)
    80016222:	6145                	addi	sp,sp,48
    80016224:	8082                	ret

0000000080016226 <vector_clear>:

void vector_clear(Vector *vec) {
    80016226:	1101                	addi	sp,sp,-32
    80016228:	ec06                	sd	ra,24(sp)
    8001622a:	e822                	sd	s0,16(sp)
    8001622c:	1000                	addi	s0,sp,32
    8001622e:	fea43423          	sd	a0,-24(s0)
    vector_resize(vec, 0);
    80016232:	4581                	li	a1,0
    80016234:	fe843503          	ld	a0,-24(s0)
    80016238:	d25ff0ef          	jal	ra,80015f5c <vector_resize>
}
    8001623c:	0001                	nop
    8001623e:	60e2                	ld	ra,24(sp)
    80016240:	6442                	ld	s0,16(sp)
    80016242:	6105                	addi	sp,sp,32
    80016244:	8082                	ret

0000000080016246 <vector_binsearch_ascending>:

int vector_binsearch_ascending(struct Vector *vec, uint64_t key) {
    80016246:	7179                	addi	sp,sp,-48
    80016248:	f406                	sd	ra,40(sp)
    8001624a:	f022                	sd	s0,32(sp)
    8001624c:	1800                	addi	s0,sp,48
    8001624e:	fca43c23          	sd	a0,-40(s0)
    80016252:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    80016256:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec);
    8001625a:	fd843503          	ld	a0,-40(s0)
    8001625e:	356000ef          	jal	ra,800165b4 <vector_size>
    80016262:	87aa                	mv	a5,a0
    80016264:	2781                	sext.w	a5,a5
    80016266:	fef42423          	sw	a5,-24(s0)

    while (low < high) {
    8001626a:	a0ad                	j	800162d4 <vector_binsearch_ascending+0x8e>
        int mid = (low + high) / 2;
    8001626c:	fec42703          	lw	a4,-20(s0)
    80016270:	fe842783          	lw	a5,-24(s0)
    80016274:	9fb9                	addw	a5,a5,a4
    80016276:	2781                	sext.w	a5,a5
    80016278:	01f7d71b          	srliw	a4,a5,0x1f
    8001627c:	9fb9                	addw	a5,a5,a4
    8001627e:	4017d79b          	sraiw	a5,a5,0x1
    80016282:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) > key) {
    80016286:	fe442783          	lw	a5,-28(s0)
    8001628a:	85be                	mv	a1,a5
    8001628c:	fd843503          	ld	a0,-40(s0)
    80016290:	c13ff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    80016294:	872a                	mv	a4,a0
    80016296:	fd043783          	ld	a5,-48(s0)
    8001629a:	00e7f863          	bgeu	a5,a4,800162aa <vector_binsearch_ascending+0x64>
            high = mid - 1;
    8001629e:	fe442783          	lw	a5,-28(s0)
    800162a2:	37fd                	addiw	a5,a5,-1
    800162a4:	fef42423          	sw	a5,-24(s0)
    800162a8:	a035                	j	800162d4 <vector_binsearch_ascending+0x8e>
        }
        else if (vector_get_unchecked(vec, mid) < key) {
    800162aa:	fe442783          	lw	a5,-28(s0)
    800162ae:	85be                	mv	a1,a5
    800162b0:	fd843503          	ld	a0,-40(s0)
    800162b4:	befff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    800162b8:	872a                	mv	a4,a0
    800162ba:	fd043783          	ld	a5,-48(s0)
    800162be:	00f77863          	bgeu	a4,a5,800162ce <vector_binsearch_ascending+0x88>
            low = mid + 1;
    800162c2:	fe442783          	lw	a5,-28(s0)
    800162c6:	2785                	addiw	a5,a5,1
    800162c8:	fef42623          	sw	a5,-20(s0)
    800162cc:	a021                	j	800162d4 <vector_binsearch_ascending+0x8e>
        }
        else {
            return mid;
    800162ce:	fe442783          	lw	a5,-28(s0)
    800162d2:	a811                	j	800162e6 <vector_binsearch_ascending+0xa0>
    while (low < high) {
    800162d4:	fec42703          	lw	a4,-20(s0)
    800162d8:	fe842783          	lw	a5,-24(s0)
    800162dc:	2701                	sext.w	a4,a4
    800162de:	2781                	sext.w	a5,a5
    800162e0:	f8f746e3          	blt	a4,a5,8001626c <vector_binsearch_ascending+0x26>
        }
    }
    return -1;
    800162e4:	57fd                	li	a5,-1
}
    800162e6:	853e                	mv	a0,a5
    800162e8:	70a2                	ld	ra,40(sp)
    800162ea:	7402                	ld	s0,32(sp)
    800162ec:	6145                	addi	sp,sp,48
    800162ee:	8082                	ret

00000000800162f0 <vector_binsearch_descending>:

int vector_binsearch_descending(struct Vector *vec, uint64_t key) {
    800162f0:	7179                	addi	sp,sp,-48
    800162f2:	f406                	sd	ra,40(sp)
    800162f4:	f022                	sd	s0,32(sp)
    800162f6:	1800                	addi	s0,sp,48
    800162f8:	fca43c23          	sd	a0,-40(s0)
    800162fc:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    80016300:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec) - 1;
    80016304:	fd843503          	ld	a0,-40(s0)
    80016308:	2ac000ef          	jal	ra,800165b4 <vector_size>
    8001630c:	87aa                	mv	a5,a0
    8001630e:	2781                	sext.w	a5,a5
    80016310:	37fd                	addiw	a5,a5,-1
    80016312:	2781                	sext.w	a5,a5
    80016314:	fef42423          	sw	a5,-24(s0)

    while (low <= high) {
    80016318:	a0ad                	j	80016382 <vector_binsearch_descending+0x92>
        int mid = (low + high) / 2;
    8001631a:	fec42703          	lw	a4,-20(s0)
    8001631e:	fe842783          	lw	a5,-24(s0)
    80016322:	9fb9                	addw	a5,a5,a4
    80016324:	2781                	sext.w	a5,a5
    80016326:	01f7d71b          	srliw	a4,a5,0x1f
    8001632a:	9fb9                	addw	a5,a5,a4
    8001632c:	4017d79b          	sraiw	a5,a5,0x1
    80016330:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) < key) {
    80016334:	fe442783          	lw	a5,-28(s0)
    80016338:	85be                	mv	a1,a5
    8001633a:	fd843503          	ld	a0,-40(s0)
    8001633e:	b65ff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    80016342:	872a                	mv	a4,a0
    80016344:	fd043783          	ld	a5,-48(s0)
    80016348:	00f77863          	bgeu	a4,a5,80016358 <vector_binsearch_descending+0x68>
            high = mid - 1;
    8001634c:	fe442783          	lw	a5,-28(s0)
    80016350:	37fd                	addiw	a5,a5,-1
    80016352:	fef42423          	sw	a5,-24(s0)
    80016356:	a035                	j	80016382 <vector_binsearch_descending+0x92>
        }
        else if (vector_get_unchecked(vec, mid) > key) {
    80016358:	fe442783          	lw	a5,-28(s0)
    8001635c:	85be                	mv	a1,a5
    8001635e:	fd843503          	ld	a0,-40(s0)
    80016362:	b41ff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    80016366:	872a                	mv	a4,a0
    80016368:	fd043783          	ld	a5,-48(s0)
    8001636c:	00e7f863          	bgeu	a5,a4,8001637c <vector_binsearch_descending+0x8c>
            low = mid + 1;
    80016370:	fe442783          	lw	a5,-28(s0)
    80016374:	2785                	addiw	a5,a5,1
    80016376:	fef42623          	sw	a5,-20(s0)
    8001637a:	a021                	j	80016382 <vector_binsearch_descending+0x92>
        }
        else {
            return mid;
    8001637c:	fe442783          	lw	a5,-28(s0)
    80016380:	a811                	j	80016394 <vector_binsearch_descending+0xa4>
    while (low <= high) {
    80016382:	fec42703          	lw	a4,-20(s0)
    80016386:	fe842783          	lw	a5,-24(s0)
    8001638a:	2701                	sext.w	a4,a4
    8001638c:	2781                	sext.w	a5,a5
    8001638e:	f8e7d6e3          	bge	a5,a4,8001631a <vector_binsearch_descending+0x2a>
        }
    }
    return -1;
    80016392:	57fd                	li	a5,-1
}
    80016394:	853e                	mv	a0,a5
    80016396:	70a2                	ld	ra,40(sp)
    80016398:	7402                	ld	s0,32(sp)
    8001639a:	6145                	addi	sp,sp,48
    8001639c:	8082                	ret

000000008001639e <vector_sort>:

void vector_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    8001639e:	1101                	addi	sp,sp,-32
    800163a0:	ec06                	sd	ra,24(sp)
    800163a2:	e822                	sd	s0,16(sp)
    800163a4:	1000                	addi	s0,sp,32
    800163a6:	fea43423          	sd	a0,-24(s0)
    800163aa:	feb43023          	sd	a1,-32(s0)
    vector_insertion_sort(vec, comp);
    800163ae:	fe043583          	ld	a1,-32(s0)
    800163b2:	fe843503          	ld	a0,-24(s0)
    800163b6:	10e000ef          	jal	ra,800164c4 <vector_insertion_sort>
}
    800163ba:	0001                	nop
    800163bc:	60e2                	ld	ra,24(sp)
    800163be:	6442                	ld	s0,16(sp)
    800163c0:	6105                	addi	sp,sp,32
    800163c2:	8082                	ret

00000000800163c4 <vector_selection_sort>:

void vector_selection_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    800163c4:	715d                	addi	sp,sp,-80
    800163c6:	e486                	sd	ra,72(sp)
    800163c8:	e0a2                	sd	s0,64(sp)
    800163ca:	fc26                	sd	s1,56(sp)
    800163cc:	0880                	addi	s0,sp,80
    800163ce:	faa43c23          	sd	a0,-72(s0)
    800163d2:	fab43823          	sd	a1,-80(s0)
    uint32_t i;
    uint32_t j;
    uint32_t min_idx;
    uint64_t tmp;

    for (i = 0;i < vector_size(vec);i++) {
    800163d6:	fc042e23          	sw	zero,-36(s0)
    800163da:	a0d1                	j	8001649e <vector_selection_sort+0xda>
        min_idx = i;
    800163dc:	fdc42783          	lw	a5,-36(s0)
    800163e0:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    800163e4:	fdc42783          	lw	a5,-36(s0)
    800163e8:	2785                	addiw	a5,a5,1
    800163ea:	fcf42c23          	sw	a5,-40(s0)
    800163ee:	a0a9                	j	80016438 <vector_selection_sort+0x74>
            if (!comp(vector_get_unchecked(vec, min_idx), vector_get_unchecked(vec, j))) {
    800163f0:	fd442783          	lw	a5,-44(s0)
    800163f4:	85be                	mv	a1,a5
    800163f6:	fb843503          	ld	a0,-72(s0)
    800163fa:	aa9ff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    800163fe:	84aa                	mv	s1,a0
    80016400:	fd842783          	lw	a5,-40(s0)
    80016404:	85be                	mv	a1,a5
    80016406:	fb843503          	ld	a0,-72(s0)
    8001640a:	a99ff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    8001640e:	87aa                	mv	a5,a0
    80016410:	fb043703          	ld	a4,-80(s0)
    80016414:	85be                	mv	a1,a5
    80016416:	8526                	mv	a0,s1
    80016418:	9702                	jalr	a4
    8001641a:	87aa                	mv	a5,a0
    8001641c:	0017c793          	xori	a5,a5,1
    80016420:	0ff7f793          	andi	a5,a5,255
    80016424:	c789                	beqz	a5,8001642e <vector_selection_sort+0x6a>
                min_idx = j;
    80016426:	fd842783          	lw	a5,-40(s0)
    8001642a:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    8001642e:	fd842783          	lw	a5,-40(s0)
    80016432:	2785                	addiw	a5,a5,1
    80016434:	fcf42c23          	sw	a5,-40(s0)
    80016438:	fb843503          	ld	a0,-72(s0)
    8001643c:	178000ef          	jal	ra,800165b4 <vector_size>
    80016440:	87aa                	mv	a5,a0
    80016442:	0007871b          	sext.w	a4,a5
    80016446:	fd842783          	lw	a5,-40(s0)
    8001644a:	2781                	sext.w	a5,a5
    8001644c:	fae7e2e3          	bltu	a5,a4,800163f0 <vector_selection_sort+0x2c>
            }
        }
        tmp = vector_get_unchecked(vec, i);
    80016450:	fdc42783          	lw	a5,-36(s0)
    80016454:	85be                	mv	a1,a5
    80016456:	fb843503          	ld	a0,-72(s0)
    8001645a:	a49ff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    8001645e:	fca43423          	sd	a0,-56(s0)
        vector_set(vec, i, vector_get_unchecked(vec, min_idx));
    80016462:	fd442783          	lw	a5,-44(s0)
    80016466:	85be                	mv	a1,a5
    80016468:	fb843503          	ld	a0,-72(s0)
    8001646c:	a37ff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    80016470:	872a                	mv	a4,a0
    80016472:	fdc42783          	lw	a5,-36(s0)
    80016476:	863a                	mv	a2,a4
    80016478:	85be                	mv	a1,a5
    8001647a:	fb843503          	ld	a0,-72(s0)
    8001647e:	991ff0ef          	jal	ra,80015e0e <vector_set>
        vector_set(vec, min_idx, tmp);
    80016482:	fd442783          	lw	a5,-44(s0)
    80016486:	fc843603          	ld	a2,-56(s0)
    8001648a:	85be                	mv	a1,a5
    8001648c:	fb843503          	ld	a0,-72(s0)
    80016490:	97fff0ef          	jal	ra,80015e0e <vector_set>
    for (i = 0;i < vector_size(vec);i++) {
    80016494:	fdc42783          	lw	a5,-36(s0)
    80016498:	2785                	addiw	a5,a5,1
    8001649a:	fcf42e23          	sw	a5,-36(s0)
    8001649e:	fb843503          	ld	a0,-72(s0)
    800164a2:	112000ef          	jal	ra,800165b4 <vector_size>
    800164a6:	87aa                	mv	a5,a0
    800164a8:	0007871b          	sext.w	a4,a5
    800164ac:	fdc42783          	lw	a5,-36(s0)
    800164b0:	2781                	sext.w	a5,a5
    800164b2:	f2e7e5e3          	bltu	a5,a4,800163dc <vector_selection_sort+0x18>
    }
}
    800164b6:	0001                	nop
    800164b8:	0001                	nop
    800164ba:	60a6                	ld	ra,72(sp)
    800164bc:	6406                	ld	s0,64(sp)
    800164be:	74e2                	ld	s1,56(sp)
    800164c0:	6161                	addi	sp,sp,80
    800164c2:	8082                	ret

00000000800164c4 <vector_insertion_sort>:

void vector_insertion_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    800164c4:	715d                	addi	sp,sp,-80
    800164c6:	e486                	sd	ra,72(sp)
    800164c8:	e0a2                	sd	s0,64(sp)
    800164ca:	fc26                	sd	s1,56(sp)
    800164cc:	0880                	addi	s0,sp,80
    800164ce:	faa43c23          	sd	a0,-72(s0)
    800164d2:	fab43823          	sd	a1,-80(s0)
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    800164d6:	4785                	li	a5,1
    800164d8:	fcf42e23          	sw	a5,-36(s0)
    800164dc:	a84d                	j	8001658e <vector_insertion_sort+0xca>
        uint32_t j = i;
    800164de:	fdc42783          	lw	a5,-36(s0)
    800164e2:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    800164e6:	a8b1                	j	80016542 <vector_insertion_sort+0x7e>
            uint64_t left = vector_get_unchecked(vec, j - 1);
    800164e8:	fd842783          	lw	a5,-40(s0)
    800164ec:	37fd                	addiw	a5,a5,-1
    800164ee:	2781                	sext.w	a5,a5
    800164f0:	85be                	mv	a1,a5
    800164f2:	fb843503          	ld	a0,-72(s0)
    800164f6:	9adff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    800164fa:	fca43823          	sd	a0,-48(s0)
            uint64_t right = vector_get_unchecked(vec, j);
    800164fe:	fd842783          	lw	a5,-40(s0)
    80016502:	85be                	mv	a1,a5
    80016504:	fb843503          	ld	a0,-72(s0)
    80016508:	99bff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    8001650c:	fca43423          	sd	a0,-56(s0)

            vector_set(vec, j, left);
    80016510:	fd842783          	lw	a5,-40(s0)
    80016514:	fd043603          	ld	a2,-48(s0)
    80016518:	85be                	mv	a1,a5
    8001651a:	fb843503          	ld	a0,-72(s0)
    8001651e:	8f1ff0ef          	jal	ra,80015e0e <vector_set>
            vector_set(vec, j - 1, right);
    80016522:	fd842783          	lw	a5,-40(s0)
    80016526:	37fd                	addiw	a5,a5,-1
    80016528:	2781                	sext.w	a5,a5
    8001652a:	fc843603          	ld	a2,-56(s0)
    8001652e:	85be                	mv	a1,a5
    80016530:	fb843503          	ld	a0,-72(s0)
    80016534:	8dbff0ef          	jal	ra,80015e0e <vector_set>

            j -= 1;
    80016538:	fd842783          	lw	a5,-40(s0)
    8001653c:	37fd                	addiw	a5,a5,-1
    8001653e:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    80016542:	fd842783          	lw	a5,-40(s0)
    80016546:	2781                	sext.w	a5,a5
    80016548:	cf95                	beqz	a5,80016584 <vector_insertion_sort+0xc0>
    8001654a:	fd842783          	lw	a5,-40(s0)
    8001654e:	37fd                	addiw	a5,a5,-1
    80016550:	2781                	sext.w	a5,a5
    80016552:	85be                	mv	a1,a5
    80016554:	fb843503          	ld	a0,-72(s0)
    80016558:	94bff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    8001655c:	84aa                	mv	s1,a0
    8001655e:	fd842783          	lw	a5,-40(s0)
    80016562:	85be                	mv	a1,a5
    80016564:	fb843503          	ld	a0,-72(s0)
    80016568:	93bff0ef          	jal	ra,80015ea2 <vector_get_unchecked>
    8001656c:	87aa                	mv	a5,a0
    8001656e:	fb043703          	ld	a4,-80(s0)
    80016572:	85be                	mv	a1,a5
    80016574:	8526                	mv	a0,s1
    80016576:	9702                	jalr	a4
    80016578:	87aa                	mv	a5,a0
    8001657a:	0017c793          	xori	a5,a5,1
    8001657e:	0ff7f793          	andi	a5,a5,255
    80016582:	f3bd                	bnez	a5,800164e8 <vector_insertion_sort+0x24>
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    80016584:	fdc42783          	lw	a5,-36(s0)
    80016588:	2785                	addiw	a5,a5,1
    8001658a:	fcf42e23          	sw	a5,-36(s0)
    8001658e:	fb843503          	ld	a0,-72(s0)
    80016592:	022000ef          	jal	ra,800165b4 <vector_size>
    80016596:	87aa                	mv	a5,a0
    80016598:	0007871b          	sext.w	a4,a5
    8001659c:	fdc42783          	lw	a5,-36(s0)
    800165a0:	2781                	sext.w	a5,a5
    800165a2:	f2e7eee3          	bltu	a5,a4,800164de <vector_insertion_sort+0x1a>
        }
    }
}
    800165a6:	0001                	nop
    800165a8:	0001                	nop
    800165aa:	60a6                	ld	ra,72(sp)
    800165ac:	6406                	ld	s0,64(sp)
    800165ae:	74e2                	ld	s1,56(sp)
    800165b0:	6161                	addi	sp,sp,80
    800165b2:	8082                	ret

00000000800165b4 <vector_size>:

uint32_t vector_size(Vector *vec) {
    800165b4:	1101                	addi	sp,sp,-32
    800165b6:	ec22                	sd	s0,24(sp)
    800165b8:	1000                	addi	s0,sp,32
    800165ba:	fea43423          	sd	a0,-24(s0)
    return vec->size;
    800165be:	fe843783          	ld	a5,-24(s0)
    800165c2:	439c                	lw	a5,0(a5)
}
    800165c4:	853e                	mv	a0,a5
    800165c6:	6462                	ld	s0,24(sp)
    800165c8:	6105                	addi	sp,sp,32
    800165ca:	8082                	ret

00000000800165cc <vector_capacity>:

uint32_t vector_capacity(Vector *vec) {
    800165cc:	1101                	addi	sp,sp,-32
    800165ce:	ec22                	sd	s0,24(sp)
    800165d0:	1000                	addi	s0,sp,32
    800165d2:	fea43423          	sd	a0,-24(s0)
    return vec->capacity;
    800165d6:	fe843783          	ld	a5,-24(s0)
    800165da:	43dc                	lw	a5,4(a5)
}
    800165dc:	853e                	mv	a0,a5
    800165de:	6462                	ld	s0,24(sp)
    800165e0:	6105                	addi	sp,sp,32
    800165e2:	8082                	ret

00000000800165e4 <vector_free>:

void vector_free(Vector *vec) {
    800165e4:	1101                	addi	sp,sp,-32
    800165e6:	ec06                	sd	ra,24(sp)
    800165e8:	e822                	sd	s0,16(sp)
    800165ea:	1000                	addi	s0,sp,32
    800165ec:	fea43423          	sd	a0,-24(s0)
    g_kfree(vec->values);
    800165f0:	fe843783          	ld	a5,-24(s0)
    800165f4:	679c                	ld	a5,8(a5)
    800165f6:	853e                	mv	a0,a5
    800165f8:	1d4000ef          	jal	ra,800167cc <g_kfree>
    vec->size = 0;
    800165fc:	fe843783          	ld	a5,-24(s0)
    80016600:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    80016604:	fe843783          	ld	a5,-24(s0)
    80016608:	0007a223          	sw	zero,4(a5)
    g_kfree(vec);
    8001660c:	fe843503          	ld	a0,-24(s0)
    80016610:	1bc000ef          	jal	ra,800167cc <g_kfree>
}
    80016614:	0001                	nop
    80016616:	60e2                	ld	ra,24(sp)
    80016618:	6442                	ld	s0,16(sp)
    8001661a:	6105                	addi	sp,sp,32
    8001661c:	8082                	ret

000000008001661e <vector_sort_signed_long_comparator_ascending>:

VECTOR_COMPARATOR(vector_sort_signed_long_comparator_ascending) {
    8001661e:	1101                	addi	sp,sp,-32
    80016620:	ec22                	sd	s0,24(sp)
    80016622:	1000                	addi	s0,sp,32
    80016624:	fea43423          	sd	a0,-24(s0)
    80016628:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    8001662c:	fe843703          	ld	a4,-24(s0)
    80016630:	fe043783          	ld	a5,-32(s0)
    80016634:	00e7a7b3          	slt	a5,a5,a4
    80016638:	0017c793          	xori	a5,a5,1
    8001663c:	0ff7f793          	andi	a5,a5,255
}
    80016640:	853e                	mv	a0,a5
    80016642:	6462                	ld	s0,24(sp)
    80016644:	6105                	addi	sp,sp,32
    80016646:	8082                	ret

0000000080016648 <vector_sort_signed_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_signed_long_comparator_descending) {
    80016648:	1101                	addi	sp,sp,-32
    8001664a:	ec22                	sd	s0,24(sp)
    8001664c:	1000                	addi	s0,sp,32
    8001664e:	fea43423          	sd	a0,-24(s0)
    80016652:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    80016656:	fe843703          	ld	a4,-24(s0)
    8001665a:	fe043783          	ld	a5,-32(s0)
    8001665e:	00f727b3          	slt	a5,a4,a5
    80016662:	0017c793          	xori	a5,a5,1
    80016666:	0ff7f793          	andi	a5,a5,255
}
    8001666a:	853e                	mv	a0,a5
    8001666c:	6462                	ld	s0,24(sp)
    8001666e:	6105                	addi	sp,sp,32
    80016670:	8082                	ret

0000000080016672 <vector_sort_unsigned_long_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_ascending) {
    80016672:	1101                	addi	sp,sp,-32
    80016674:	ec22                	sd	s0,24(sp)
    80016676:	1000                	addi	s0,sp,32
    80016678:	fea43423          	sd	a0,-24(s0)
    8001667c:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    80016680:	fe843703          	ld	a4,-24(s0)
    80016684:	fe043783          	ld	a5,-32(s0)
    80016688:	00e7b7b3          	sltu	a5,a5,a4
    8001668c:	0017c793          	xori	a5,a5,1
    80016690:	0ff7f793          	andi	a5,a5,255
}
    80016694:	853e                	mv	a0,a5
    80016696:	6462                	ld	s0,24(sp)
    80016698:	6105                	addi	sp,sp,32
    8001669a:	8082                	ret

000000008001669c <vector_sort_unsigned_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_descending) {
    8001669c:	1101                	addi	sp,sp,-32
    8001669e:	ec22                	sd	s0,24(sp)
    800166a0:	1000                	addi	s0,sp,32
    800166a2:	fea43423          	sd	a0,-24(s0)
    800166a6:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    800166aa:	fe843703          	ld	a4,-24(s0)
    800166ae:	fe043783          	ld	a5,-32(s0)
    800166b2:	00f737b3          	sltu	a5,a4,a5
    800166b6:	0017c793          	xori	a5,a5,1
    800166ba:	0ff7f793          	andi	a5,a5,255
}
    800166be:	853e                	mv	a0,a5
    800166c0:	6462                	ld	s0,24(sp)
    800166c2:	6105                	addi	sp,sp,32
    800166c4:	8082                	ret

00000000800166c6 <vector_sort_string_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_ascending) {
    800166c6:	1101                	addi	sp,sp,-32
    800166c8:	ec06                	sd	ra,24(sp)
    800166ca:	e822                	sd	s0,16(sp)
    800166cc:	1000                	addi	s0,sp,32
    800166ce:	fea43423          	sd	a0,-24(s0)
    800166d2:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    800166d6:	fe843783          	ld	a5,-24(s0)
    800166da:	fe043703          	ld	a4,-32(s0)
    800166de:	85ba                	mv	a1,a4
    800166e0:	853e                	mv	a0,a5
    800166e2:	fb1fe0ef          	jal	ra,80015692 <strcmp>
    800166e6:	87aa                	mv	a5,a0
    800166e8:	0017a793          	slti	a5,a5,1
    800166ec:	0ff7f793          	andi	a5,a5,255
}
    800166f0:	853e                	mv	a0,a5
    800166f2:	60e2                	ld	ra,24(sp)
    800166f4:	6442                	ld	s0,16(sp)
    800166f6:	6105                	addi	sp,sp,32
    800166f8:	8082                	ret

00000000800166fa <vector_sort_string_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_descending) {
    800166fa:	1101                	addi	sp,sp,-32
    800166fc:	ec06                	sd	ra,24(sp)
    800166fe:	e822                	sd	s0,16(sp)
    80016700:	1000                	addi	s0,sp,32
    80016702:	fea43423          	sd	a0,-24(s0)
    80016706:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    8001670a:	fe843783          	ld	a5,-24(s0)
    8001670e:	fe043703          	ld	a4,-32(s0)
    80016712:	85ba                	mv	a1,a4
    80016714:	853e                	mv	a0,a5
    80016716:	f7dfe0ef          	jal	ra,80015692 <strcmp>
    8001671a:	87aa                	mv	a5,a0
    8001671c:	fff7c793          	not	a5,a5
    80016720:	01f7d79b          	srliw	a5,a5,0x1f
    80016724:	0ff7f793          	andi	a5,a5,255
}
    80016728:	853e                	mv	a0,a5
    8001672a:	60e2                	ld	ra,24(sp)
    8001672c:	6442                	ld	s0,16(sp)
    8001672e:	6105                	addi	sp,sp,32
    80016730:	8082                	ret

0000000080016732 <g_kmalloc>:
void *(*__global_kmalloc)(uint64_t size);
void *(*__global_kcalloc)(uint64_t num, uint64_t size);
void (*__global_kfree)(void *ptr);

void *g_kmalloc(uint64_t size)
{
    80016732:	1101                	addi	sp,sp,-32
    80016734:	ec06                	sd	ra,24(sp)
    80016736:	e822                	sd	s0,16(sp)
    80016738:	1000                	addi	s0,sp,32
    8001673a:	fea43423          	sd	a0,-24(s0)
    if (__global_kmalloc == NULL) {
    8001673e:	00002797          	auipc	a5,0x2
    80016742:	8d278793          	addi	a5,a5,-1838 # 80018010 <__global_kmalloc>
    80016746:	639c                	ld	a5,0(a5)
    80016748:	e399                	bnez	a5,8001674e <g_kmalloc+0x1c>
        return NULL;
    8001674a:	4781                	li	a5,0
    8001674c:	a811                	j	80016760 <g_kmalloc+0x2e>
    }
    return __global_kmalloc(size);
    8001674e:	00002797          	auipc	a5,0x2
    80016752:	8c278793          	addi	a5,a5,-1854 # 80018010 <__global_kmalloc>
    80016756:	639c                	ld	a5,0(a5)
    80016758:	fe843503          	ld	a0,-24(s0)
    8001675c:	9782                	jalr	a5
    8001675e:	87aa                	mv	a5,a0
}
    80016760:	853e                	mv	a0,a5
    80016762:	60e2                	ld	ra,24(sp)
    80016764:	6442                	ld	s0,16(sp)
    80016766:	6105                	addi	sp,sp,32
    80016768:	8082                	ret

000000008001676a <g_kcalloc>:
void *g_kcalloc(uint64_t num, uint64_t size)
{
    8001676a:	1101                	addi	sp,sp,-32
    8001676c:	ec06                	sd	ra,24(sp)
    8001676e:	e822                	sd	s0,16(sp)
    80016770:	1000                	addi	s0,sp,32
    80016772:	fea43423          	sd	a0,-24(s0)
    80016776:	feb43023          	sd	a1,-32(s0)
    if (__global_kcalloc == NULL) {
    8001677a:	00002797          	auipc	a5,0x2
    8001677e:	89e78793          	addi	a5,a5,-1890 # 80018018 <__global_kcalloc>
    80016782:	639c                	ld	a5,0(a5)
    80016784:	e399                	bnez	a5,8001678a <g_kcalloc+0x20>
        return NULL;
    80016786:	4781                	li	a5,0
    80016788:	a821                	j	800167a0 <g_kcalloc+0x36>
    }
    return __global_kcalloc(num, size);
    8001678a:	00002797          	auipc	a5,0x2
    8001678e:	88e78793          	addi	a5,a5,-1906 # 80018018 <__global_kcalloc>
    80016792:	639c                	ld	a5,0(a5)
    80016794:	fe043583          	ld	a1,-32(s0)
    80016798:	fe843503          	ld	a0,-24(s0)
    8001679c:	9782                	jalr	a5
    8001679e:	87aa                	mv	a5,a0
}
    800167a0:	853e                	mv	a0,a5
    800167a2:	60e2                	ld	ra,24(sp)
    800167a4:	6442                	ld	s0,16(sp)
    800167a6:	6105                	addi	sp,sp,32
    800167a8:	8082                	ret

00000000800167aa <g_kzalloc>:
void *g_kzalloc(uint64_t size)
{
    800167aa:	1101                	addi	sp,sp,-32
    800167ac:	ec06                	sd	ra,24(sp)
    800167ae:	e822                	sd	s0,16(sp)
    800167b0:	1000                	addi	s0,sp,32
    800167b2:	fea43423          	sd	a0,-24(s0)
    return g_kcalloc(1, size);
    800167b6:	fe843583          	ld	a1,-24(s0)
    800167ba:	4505                	li	a0,1
    800167bc:	fafff0ef          	jal	ra,8001676a <g_kcalloc>
    800167c0:	87aa                	mv	a5,a0
}
    800167c2:	853e                	mv	a0,a5
    800167c4:	60e2                	ld	ra,24(sp)
    800167c6:	6442                	ld	s0,16(sp)
    800167c8:	6105                	addi	sp,sp,32
    800167ca:	8082                	ret

00000000800167cc <g_kfree>:
void g_kfree(void *ptr)
{
    800167cc:	1101                	addi	sp,sp,-32
    800167ce:	ec06                	sd	ra,24(sp)
    800167d0:	e822                	sd	s0,16(sp)
    800167d2:	1000                	addi	s0,sp,32
    800167d4:	fea43423          	sd	a0,-24(s0)
    if (__global_kfree != NULL) {
    800167d8:	00002797          	auipc	a5,0x2
    800167dc:	84878793          	addi	a5,a5,-1976 # 80018020 <__global_kfree>
    800167e0:	639c                	ld	a5,0(a5)
    800167e2:	cb89                	beqz	a5,800167f4 <g_kfree+0x28>
        __global_kfree(ptr);
    800167e4:	00002797          	auipc	a5,0x2
    800167e8:	83c78793          	addi	a5,a5,-1988 # 80018020 <__global_kfree>
    800167ec:	639c                	ld	a5,0(a5)
    800167ee:	fe843503          	ld	a0,-24(s0)
    800167f2:	9782                	jalr	a5
    }
}
    800167f4:	0001                	nop
    800167f6:	60e2                	ld	ra,24(sp)
    800167f8:	6442                	ld	s0,16(sp)
    800167fa:	6105                	addi	sp,sp,32
    800167fc:	8082                	ret

00000000800167fe <util_connect_galloc>:

void util_connect_galloc(void *(*malloc)(uint64_t size),
                         void *(*calloc)(uint64_t elem, uint64_t size), void (*free)(void *ptr))
{
    800167fe:	7179                	addi	sp,sp,-48
    80016800:	f422                	sd	s0,40(sp)
    80016802:	1800                	addi	s0,sp,48
    80016804:	fea43423          	sd	a0,-24(s0)
    80016808:	feb43023          	sd	a1,-32(s0)
    8001680c:	fcc43c23          	sd	a2,-40(s0)
    __global_kmalloc = malloc;
    80016810:	00002797          	auipc	a5,0x2
    80016814:	80078793          	addi	a5,a5,-2048 # 80018010 <__global_kmalloc>
    80016818:	fe843703          	ld	a4,-24(s0)
    8001681c:	e398                	sd	a4,0(a5)
    __global_kcalloc = calloc;
    8001681e:	00001797          	auipc	a5,0x1
    80016822:	7fa78793          	addi	a5,a5,2042 # 80018018 <__global_kcalloc>
    80016826:	fe043703          	ld	a4,-32(s0)
    8001682a:	e398                	sd	a4,0(a5)
    __global_kfree   = free;
    8001682c:	00001797          	auipc	a5,0x1
    80016830:	7f478793          	addi	a5,a5,2036 # 80018020 <__global_kfree>
    80016834:	fd843703          	ld	a4,-40(s0)
    80016838:	e398                	sd	a4,0(a5)
}
    8001683a:	0001                	nop
    8001683c:	7422                	ld	s0,40(sp)
    8001683e:	6145                	addi	sp,sp,48
    80016840:	8082                	ret
