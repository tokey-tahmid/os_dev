
cosc562.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080010000 <_memory_start>:
    80010000:	fe22                	sd	s0,312(sp)
    80010002:	f1ca                	sd	s2,224(sp)
    80010004:	0bee                	slli	s7,s7,0x1b
    80010006:	dead                	beqz	a3,8000ff80 <i+0x8000ff60>
    80010008:	4bb0                	lw	a2,80(a5)
    8001000a:	8001                	c.srli64	s0
	...

0000000080010102 <copy_from>:
*/
unsigned long copy_from(void *dst, 
                        const struct page_table *from_table, 
                        const void *from, 
                        unsigned long size)
{
    80010102:	7119                	addi	sp,sp,-128
    80010104:	fc86                	sd	ra,120(sp)
    80010106:	f8a2                	sd	s0,112(sp)
    80010108:	0100                	addi	s0,sp,128
    8001010a:	f8a43c23          	sd	a0,-104(s0)
    8001010e:	f8b43823          	sd	a1,-112(s0)
    80010112:	f8c43423          	sd	a2,-120(s0)
    80010116:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    8001011a:	fe043423          	sd	zero,-24(s0)

    unsigned long src_start_addr = (unsigned long)from;
    8001011e:	f8843783          	ld	a5,-120(s0)
    80010122:	fcf43423          	sd	a5,-56(s0)
    unsigned long src_end_addr = (unsigned long)from+size;
    80010126:	f8843783          	ld	a5,-120(s0)
    8001012a:	f8043703          	ld	a4,-128(s0)
    8001012e:	97ba                	add	a5,a5,a4
    80010130:	fcf43023          	sd	a5,-64(s0)
    unsigned long src_first_page = ALIGN_DOWN_POT(src_start_addr, PAGE_SIZE_4K);
    80010134:	fc843703          	ld	a4,-56(s0)
    80010138:	77fd                	lui	a5,0xfffff
    8001013a:	8ff9                	and	a5,a5,a4
    8001013c:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    80010140:	fb843783          	ld	a5,-72(s0)
    80010144:	fef43023          	sd	a5,-32(s0)
    80010148:	a06d                	j	800101f2 <copy_from+0xf0>
        void *physical_address = (void*)mmu_translate(from_table, i);
    8001014a:	fe043583          	ld	a1,-32(s0)
    8001014e:	f9043503          	ld	a0,-112(s0)
    80010152:	66e000ef          	jal	ra,800107c0 <mmu_translate>
    80010156:	87aa                	mv	a5,a0
    80010158:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    8001015c:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == src_start_addr;
    80010160:	fe043703          	ld	a4,-32(s0)
    80010164:	fc843783          	ld	a5,-56(s0)
    80010168:	40f707b3          	sub	a5,a4,a5
    8001016c:	0017b793          	seqz	a5,a5
    80010170:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    80010174:	faf44783          	lbu	a5,-81(s0)
    80010178:	0ff7f793          	andi	a5,a5,255
    8001017c:	cb81                	beqz	a5,8001018c <copy_from+0x8a>
            offset = src_start_addr % PAGE_SIZE_4K;
    8001017e:	fc843703          	ld	a4,-56(s0)
    80010182:	6785                	lui	a5,0x1
    80010184:	17fd                	addi	a5,a5,-1
    80010186:	8ff9                	and	a5,a5,a4
    80010188:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    8001018c:	6785                	lui	a5,0x1
    8001018e:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > src_end_addr) {
    80010192:	fe043703          	ld	a4,-32(s0)
    80010196:	6785                	lui	a5,0x1
    80010198:	97ba                	add	a5,a5,a4
    8001019a:	fc043703          	ld	a4,-64(s0)
    8001019e:	00f77a63          	bgeu	a4,a5,800101b2 <copy_from+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = src_end_addr - i;
    800101a2:	fc043703          	ld	a4,-64(s0)
    800101a6:	fe043783          	ld	a5,-32(s0)
    800101aa:	40f707b3          	sub	a5,a4,a5
    800101ae:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(dst + bytes_copied, physical_address + offset, bytes_to_copy_from_page);
    800101b2:	f9843703          	ld	a4,-104(s0)
    800101b6:	fe843783          	ld	a5,-24(s0)
    800101ba:	00f706b3          	add	a3,a4,a5
    800101be:	fb043703          	ld	a4,-80(s0)
    800101c2:	fd843783          	ld	a5,-40(s0)
    800101c6:	97ba                	add	a5,a5,a4
    800101c8:	fd043703          	ld	a4,-48(s0)
    800101cc:	2701                	sext.w	a4,a4
    800101ce:	863a                	mv	a2,a4
    800101d0:	85be                	mv	a1,a5
    800101d2:	8536                	mv	a0,a3
    800101d4:	1a0050ef          	jal	ra,80015374 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800101d8:	fe843703          	ld	a4,-24(s0)
    800101dc:	fd043783          	ld	a5,-48(s0)
    800101e0:	97ba                	add	a5,a5,a4
    800101e2:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    800101e6:	fe043703          	ld	a4,-32(s0)
    800101ea:	6785                	lui	a5,0x1
    800101ec:	97ba                	add	a5,a5,a4
    800101ee:	fef43023          	sd	a5,-32(s0)
    800101f2:	fe043703          	ld	a4,-32(s0)
    800101f6:	fc043783          	ld	a5,-64(s0)
    800101fa:	f4f768e3          	bltu	a4,a5,8001014a <copy_from+0x48>
    }

    return bytes_copied;
    800101fe:	fe843783          	ld	a5,-24(s0)
}
    80010202:	853e                	mv	a0,a5
    80010204:	70e6                	ld	ra,120(sp)
    80010206:	7446                	ld	s0,112(sp)
    80010208:	6109                	addi	sp,sp,128
    8001020a:	8082                	ret

000000008001020c <copy_to>:
*/
unsigned long copy_to(void *to, 
                      const struct page_table *to_table, 
                      const void *src, 
                      unsigned long size)
{
    8001020c:	7119                	addi	sp,sp,-128
    8001020e:	fc86                	sd	ra,120(sp)
    80010210:	f8a2                	sd	s0,112(sp)
    80010212:	0100                	addi	s0,sp,128
    80010214:	f8a43c23          	sd	a0,-104(s0)
    80010218:	f8b43823          	sd	a1,-112(s0)
    8001021c:	f8c43423          	sd	a2,-120(s0)
    80010220:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    80010224:	fe043423          	sd	zero,-24(s0)

    unsigned long dst_start_addr = (unsigned long)to;
    80010228:	f9843783          	ld	a5,-104(s0)
    8001022c:	fcf43423          	sd	a5,-56(s0)
    unsigned long dst_end_addr = (unsigned long)to+size;
    80010230:	f9843783          	ld	a5,-104(s0)
    80010234:	f8043703          	ld	a4,-128(s0)
    80010238:	97ba                	add	a5,a5,a4
    8001023a:	fcf43023          	sd	a5,-64(s0)
    unsigned long dst_first_page = ALIGN_DOWN_POT(dst_start_addr, PAGE_SIZE_4K);
    8001023e:	fc843703          	ld	a4,-56(s0)
    80010242:	77fd                	lui	a5,0xfffff
    80010244:	8ff9                	and	a5,a5,a4
    80010246:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    8001024a:	fb843783          	ld	a5,-72(s0)
    8001024e:	fef43023          	sd	a5,-32(s0)
    80010252:	a06d                	j	800102fc <copy_to+0xf0>
        void *physical_address = (void*)mmu_translate(to_table, i);
    80010254:	fe043583          	ld	a1,-32(s0)
    80010258:	f9043503          	ld	a0,-112(s0)
    8001025c:	564000ef          	jal	ra,800107c0 <mmu_translate>
    80010260:	87aa                	mv	a5,a0
    80010262:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    80010266:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == dst_start_addr;
    8001026a:	fe043703          	ld	a4,-32(s0)
    8001026e:	fc843783          	ld	a5,-56(s0)
    80010272:	40f707b3          	sub	a5,a4,a5
    80010276:	0017b793          	seqz	a5,a5
    8001027a:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    8001027e:	faf44783          	lbu	a5,-81(s0)
    80010282:	0ff7f793          	andi	a5,a5,255
    80010286:	cb81                	beqz	a5,80010296 <copy_to+0x8a>
            offset = dst_start_addr % PAGE_SIZE_4K;
    80010288:	fc843703          	ld	a4,-56(s0)
    8001028c:	6785                	lui	a5,0x1
    8001028e:	17fd                	addi	a5,a5,-1
    80010290:	8ff9                	and	a5,a5,a4
    80010292:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    80010296:	6785                	lui	a5,0x1
    80010298:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > dst_end_addr) {
    8001029c:	fe043703          	ld	a4,-32(s0)
    800102a0:	6785                	lui	a5,0x1
    800102a2:	97ba                	add	a5,a5,a4
    800102a4:	fc043703          	ld	a4,-64(s0)
    800102a8:	00f77a63          	bgeu	a4,a5,800102bc <copy_to+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = dst_end_addr - i;
    800102ac:	fc043703          	ld	a4,-64(s0)
    800102b0:	fe043783          	ld	a5,-32(s0)
    800102b4:	40f707b3          	sub	a5,a4,a5
    800102b8:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(physical_address + offset, src + bytes_copied, bytes_to_copy_from_page);
    800102bc:	fb043703          	ld	a4,-80(s0)
    800102c0:	fd843783          	ld	a5,-40(s0)
    800102c4:	00f706b3          	add	a3,a4,a5
    800102c8:	f8843703          	ld	a4,-120(s0)
    800102cc:	fe843783          	ld	a5,-24(s0)
    800102d0:	97ba                	add	a5,a5,a4
    800102d2:	fd043703          	ld	a4,-48(s0)
    800102d6:	2701                	sext.w	a4,a4
    800102d8:	863a                	mv	a2,a4
    800102da:	85be                	mv	a1,a5
    800102dc:	8536                	mv	a0,a3
    800102de:	096050ef          	jal	ra,80015374 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800102e2:	fe843703          	ld	a4,-24(s0)
    800102e6:	fd043783          	ld	a5,-48(s0)
    800102ea:	97ba                	add	a5,a5,a4
    800102ec:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    800102f0:	fe043703          	ld	a4,-32(s0)
    800102f4:	6785                	lui	a5,0x1
    800102f6:	97ba                	add	a5,a5,a4
    800102f8:	fef43023          	sd	a5,-32(s0)
    800102fc:	fe043703          	ld	a4,-32(s0)
    80010300:	fc043783          	ld	a5,-64(s0)
    80010304:	f4f768e3          	bltu	a4,a5,80010254 <copy_to+0x48>
    }

    return bytes_copied;
    80010308:	fe843783          	ld	a5,-24(s0)
    8001030c:	853e                	mv	a0,a5
    8001030e:	70e6                	ld	ra,120(sp)
    80010310:	7446                	ld	s0,112(sp)
    80010312:	6109                	addi	sp,sp,128
    80010314:	8082                	ret

0000000080010316 <syscall_exit>:
    (void)hart;         \
    (void)epc;          \
    (void)scratch

SYSCALL(exit)
{
    80010316:	7179                	addi	sp,sp,-48
    80010318:	f422                	sd	s0,40(sp)
    8001031a:	1800                	addi	s0,sp,48
    8001031c:	87aa                	mv	a5,a0
    8001031e:	feb43023          	sd	a1,-32(s0)
    80010322:	fcc43c23          	sd	a2,-40(s0)
    80010326:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Kill the current process on this HART and schedule the next
    // one.
}
    8001032a:	0001                	nop
    8001032c:	7422                	ld	s0,40(sp)
    8001032e:	6145                	addi	sp,sp,48
    80010330:	8082                	ret

0000000080010332 <syscall_putchar>:

SYSCALL(putchar)
{
    80010332:	7179                	addi	sp,sp,-48
    80010334:	f406                	sd	ra,40(sp)
    80010336:	f022                	sd	s0,32(sp)
    80010338:	1800                	addi	s0,sp,48
    8001033a:	87aa                	mv	a5,a0
    8001033c:	feb43023          	sd	a1,-32(s0)
    80010340:	fcc43c23          	sd	a2,-40(s0)
    80010344:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    sbi_putchar(XREG(A0));
    80010348:	fd843783          	ld	a5,-40(s0)
    8001034c:	05078793          	addi	a5,a5,80 # 1050 <i+0x1030>
    80010350:	639c                	ld	a5,0(a5)
    80010352:	0ff7f793          	andi	a5,a5,255
    80010356:	853e                	mv	a0,a5
    80010358:	3e1010ef          	jal	ra,80011f38 <sbi_putchar>
}
    8001035c:	0001                	nop
    8001035e:	70a2                	ld	ra,40(sp)
    80010360:	7402                	ld	s0,32(sp)
    80010362:	6145                	addi	sp,sp,48
    80010364:	8082                	ret

0000000080010366 <syscall_getchar>:

SYSCALL(getchar)
{
    80010366:	7179                	addi	sp,sp,-48
    80010368:	f406                	sd	ra,40(sp)
    8001036a:	f022                	sd	s0,32(sp)
    8001036c:	1800                	addi	s0,sp,48
    8001036e:	87aa                	mv	a5,a0
    80010370:	feb43023          	sd	a1,-32(s0)
    80010374:	fcc43c23          	sd	a2,-40(s0)
    80010378:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    XREG(A0) = sbi_getchar();
    8001037c:	3df010ef          	jal	ra,80011f5a <sbi_getchar>
    80010380:	87aa                	mv	a5,a0
    80010382:	873e                	mv	a4,a5
    80010384:	fd843783          	ld	a5,-40(s0)
    80010388:	05078793          	addi	a5,a5,80
    8001038c:	e398                	sd	a4,0(a5)
}
    8001038e:	0001                	nop
    80010390:	70a2                	ld	ra,40(sp)
    80010392:	7402                	ld	s0,32(sp)
    80010394:	6145                	addi	sp,sp,48
    80010396:	8082                	ret

0000000080010398 <syscall_yield>:

SYSCALL(yield)
{
    80010398:	7179                	addi	sp,sp,-48
    8001039a:	f422                	sd	s0,40(sp)
    8001039c:	1800                	addi	s0,sp,48
    8001039e:	87aa                	mv	a5,a0
    800103a0:	feb43023          	sd	a1,-32(s0)
    800103a4:	fcc43c23          	sd	a2,-40(s0)
    800103a8:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // sched_invoke(hart);
}
    800103ac:	0001                	nop
    800103ae:	7422                	ld	s0,40(sp)
    800103b0:	6145                	addi	sp,sp,48
    800103b2:	8082                	ret

00000000800103b4 <syscall_sleep>:

SYSCALL(sleep)
{
    800103b4:	7179                	addi	sp,sp,-48
    800103b6:	f422                	sd	s0,40(sp)
    800103b8:	1800                	addi	s0,sp,48
    800103ba:	87aa                	mv	a5,a0
    800103bc:	feb43023          	sd	a1,-32(s0)
    800103c0:	fcc43c23          	sd	a2,-40(s0)
    800103c4:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Sleep the process. VIRT_TIMER_FREQ is 10MHz, divided by 1000, we get 10KHz
    //     p->sleep_until = sbi_get_time() + XREG(A0) * VIRT_TIMER_FREQ / 1000;
    //     p->state = PS_SLEEPING;
}
    800103c8:	0001                	nop
    800103ca:	7422                	ld	s0,40(sp)
    800103cc:	6145                	addi	sp,sp,48
    800103ce:	8082                	ret

00000000800103d0 <syscall_events>:

SYSCALL(events)
{
    800103d0:	7179                	addi	sp,sp,-48
    800103d2:	f422                	sd	s0,40(sp)
    800103d4:	1800                	addi	s0,sp,48
    800103d6:	87aa                	mv	a5,a0
    800103d8:	feb43023          	sd	a1,-32(s0)
    800103dc:	fcc43c23          	sd	a2,-40(s0)
    800103e0:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    
}
    800103e4:	0001                	nop
    800103e6:	7422                	ld	s0,40(sp)
    800103e8:	6145                	addi	sp,sp,48
    800103ea:	8082                	ret

00000000800103ec <syscall_handle>:

static const int NUM_SYSCALLS = sizeof(SYSCALLS) / sizeof(SYSCALLS[0]);

// We get here from the trap.c if this is an ECALL from U-MODE
void syscall_handle(int hart, uint64_t epc, int64_t *scratch)
{
    800103ec:	7179                	addi	sp,sp,-48
    800103ee:	f406                	sd	ra,40(sp)
    800103f0:	f022                	sd	s0,32(sp)
    800103f2:	1800                	addi	s0,sp,48
    800103f4:	87aa                	mv	a5,a0
    800103f6:	feb43023          	sd	a1,-32(s0)
    800103fa:	fcc43c23          	sd	a2,-40(s0)
    800103fe:	fef42623          	sw	a5,-20(s0)
    // Sched invoke will save sepc, so we want it to resume
    // 4 bytes ahead, which will be the next instruction.
    CSR_WRITE("sepc", epc + 4);
    80010402:	fe043783          	ld	a5,-32(s0)
    80010406:	0791                	addi	a5,a5,4
    80010408:	14179073          	csrw	sepc,a5

    if (XREG(A7) >= NUM_SYSCALLS || SYSCALLS[XREG(A7)] == NULL) {
    8001040c:	fd843783          	ld	a5,-40(s0)
    80010410:	08878793          	addi	a5,a5,136
    80010414:	639c                	ld	a5,0(a5)
    80010416:	4719                	li	a4,6
    80010418:	00e7df63          	bge	a5,a4,80010436 <syscall_handle+0x4a>
    8001041c:	fd843783          	ld	a5,-40(s0)
    80010420:	08878793          	addi	a5,a5,136
    80010424:	639c                	ld	a5,0(a5)
    80010426:	00009717          	auipc	a4,0x9
    8001042a:	bda70713          	addi	a4,a4,-1062 # 80019000 <SYSCALLS>
    8001042e:	078e                	slli	a5,a5,0x3
    80010430:	97ba                	add	a5,a5,a4
    80010432:	639c                	ld	a5,0(a5)
    80010434:	eb81                	bnez	a5,80010444 <syscall_handle+0x58>
        // Invalid syscall
        XREG(A0) = -EINVAL;
    80010436:	fd843783          	ld	a5,-40(s0)
    8001043a:	05078793          	addi	a5,a5,80
    8001043e:	5729                	li	a4,-22
    80010440:	e398                	sd	a4,0(a5)
    80010442:	a035                	j	8001046e <syscall_handle+0x82>
    }
    else {
        SYSCALL_EXEC(XREG(A7));
    80010444:	fd843783          	ld	a5,-40(s0)
    80010448:	08878793          	addi	a5,a5,136
    8001044c:	639c                	ld	a5,0(a5)
    8001044e:	00009717          	auipc	a4,0x9
    80010452:	bb270713          	addi	a4,a4,-1102 # 80019000 <SYSCALLS>
    80010456:	078e                	slli	a5,a5,0x3
    80010458:	97ba                	add	a5,a5,a4
    8001045a:	6398                	ld	a4,0(a5)
    8001045c:	fec42783          	lw	a5,-20(s0)
    80010460:	fd843603          	ld	a2,-40(s0)
    80010464:	fe043583          	ld	a1,-32(s0)
    80010468:	853e                	mv	a0,a5
    8001046a:	9702                	jalr	a4
    }
}
    8001046c:	0001                	nop
    8001046e:	0001                	nop
    80010470:	70a2                	ld	ra,40(sp)
    80010472:	7402                	ld	s0,32(sp)
    80010474:	6145                	addi	sp,sp,48
    80010476:	8082                	ret

0000000080010478 <mmu_table_create>:
#define ADDR_1_BIT   21
#define ADDR_2_BIT   30


struct page_table *mmu_table_create(void)
{
    80010478:	1141                	addi	sp,sp,-16
    8001047a:	e406                	sd	ra,8(sp)
    8001047c:	e022                	sd	s0,0(sp)
    8001047e:	0800                	addi	s0,sp,16
    return page_zalloc();
    80010480:	4505                	li	a0,1
    80010482:	574020ef          	jal	ra,800129f6 <page_znalloc>
    80010486:	87aa                	mv	a5,a0
}
    80010488:	853e                	mv	a0,a5
    8001048a:	60a2                	ld	ra,8(sp)
    8001048c:	6402                	ld	s0,0(sp)
    8001048e:	0141                	addi	sp,sp,16
    80010490:	8082                	ret

0000000080010492 <is_valid>:

// Check the valid bit of a page table entry.
static inline bool is_valid(unsigned long pte)
{
    80010492:	1101                	addi	sp,sp,-32
    80010494:	ec22                	sd	s0,24(sp)
    80010496:	1000                	addi	s0,sp,32
    80010498:	fea43423          	sd	a0,-24(s0)
    return pte & 1UL;
    8001049c:	fe843783          	ld	a5,-24(s0)
    800104a0:	8b85                	andi	a5,a5,1
    800104a2:	00f037b3          	snez	a5,a5
    800104a6:	0ff7f793          	andi	a5,a5,255
}
    800104aa:	853e                	mv	a0,a5
    800104ac:	6462                	ld	s0,24(sp)
    800104ae:	6105                	addi	sp,sp,32
    800104b0:	8082                	ret

00000000800104b2 <mmu_map>:
{
    return (pte & 0xE) != 0;
}

bool mmu_map(struct page_table *tab, uint64_t vaddr, uint64_t paddr, uint8_t lvl, uint64_t bits)
{
    800104b2:	7175                	addi	sp,sp,-144
    800104b4:	e506                	sd	ra,136(sp)
    800104b6:	e122                	sd	s0,128(sp)
    800104b8:	0900                	addi	s0,sp,144
    800104ba:	f8a43c23          	sd	a0,-104(s0)
    800104be:	f8b43823          	sd	a1,-112(s0)
    800104c2:	f8c43423          	sd	a2,-120(s0)
    800104c6:	87b6                	mv	a5,a3
    800104c8:	f6e43c23          	sd	a4,-136(s0)
    800104cc:	f8f403a3          	sb	a5,-121(s0)
    if (tab == NULL || lvl > MMU_LEVEL_1G || (bits & 0xE) == 0) {
    800104d0:	f9843783          	ld	a5,-104(s0)
    800104d4:	cf81                	beqz	a5,800104ec <mmu_map+0x3a>
    800104d6:	f8744783          	lbu	a5,-121(s0)
    800104da:	0ff7f713          	andi	a4,a5,255
    800104de:	4789                	li	a5,2
    800104e0:	00e7e663          	bltu	a5,a4,800104ec <mmu_map+0x3a>
    800104e4:	f7843783          	ld	a5,-136(s0)
    800104e8:	8bb9                	andi	a5,a5,14
    800104ea:	e38d                	bnez	a5,8001050c <mmu_map+0x5a>
        debugf("mmu_map: Invalid parameters received. tab: 0x%08lx, lvl: %d, bits: 0x%08lx", tab, lvl, bits);
    800104ec:	f8744783          	lbu	a5,-121(s0)
    800104f0:	2781                	sext.w	a5,a5
    800104f2:	f7843683          	ld	a3,-136(s0)
    800104f6:	863e                	mv	a2,a5
    800104f8:	f9843583          	ld	a1,-104(s0)
    800104fc:	00009517          	auipc	a0,0x9
    80010500:	b3450513          	addi	a0,a0,-1228 # 80019030 <SYSCALLS+0x30>
    80010504:	11d010ef          	jal	ra,80011e20 <debugf>
        return false;
    80010508:	4781                	li	a5,0
    8001050a:	a43d                	j	80010738 <mmu_map+0x286>
    }
    if (vaddr & (PAGE_SIZE - 1) || paddr & (PAGE_SIZE - 1)) {
    8001050c:	f9043703          	ld	a4,-112(s0)
    80010510:	6785                	lui	a5,0x1
    80010512:	17fd                	addi	a5,a5,-1
    80010514:	8ff9                	and	a5,a5,a4
    80010516:	e799                	bnez	a5,80010524 <mmu_map+0x72>
    80010518:	f8843703          	ld	a4,-120(s0)
    8001051c:	6785                	lui	a5,0x1
    8001051e:	17fd                	addi	a5,a5,-1
    80010520:	8ff9                	and	a5,a5,a4
    80010522:	cf89                	beqz	a5,8001053c <mmu_map+0x8a>
        debugf("mmu_map: Misaligned addresses received. vaddr: 0x%08lx, paddr: 0x%08lx", vaddr, paddr);
    80010524:	f8843603          	ld	a2,-120(s0)
    80010528:	f9043583          	ld	a1,-112(s0)
    8001052c:	00009517          	auipc	a0,0x9
    80010530:	b5450513          	addi	a0,a0,-1196 # 80019080 <SYSCALLS+0x80>
    80010534:	0ed010ef          	jal	ra,80011e20 <debugf>
        return false;
    80010538:	4781                	li	a5,0
    8001053a:	aafd                	j	80010738 <mmu_map+0x286>
    }

    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    8001053c:	f9043783          	ld	a5,-112(s0)
    80010540:	83b1                	srli	a5,a5,0xc
    80010542:	1ff7f793          	andi	a5,a5,511
    80010546:	fcf43023          	sd	a5,-64(s0)
    8001054a:	f9043783          	ld	a5,-112(s0)
    8001054e:	83d5                	srli	a5,a5,0x15
    80010550:	1ff7f793          	andi	a5,a5,511
    80010554:	fcf43423          	sd	a5,-56(s0)
                            (vaddr >> ADDR_2_BIT) & 0x1FF};
    80010558:	f9043783          	ld	a5,-112(s0)
    8001055c:	83f9                	srli	a5,a5,0x1e
    8001055e:	1ff7f793          	andi	a5,a5,511
    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    80010562:	fcf43823          	sd	a5,-48(s0)
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    80010566:	f8843783          	ld	a5,-120(s0)
    8001056a:	83b1                	srli	a5,a5,0xc
    8001056c:	1ff7f793          	andi	a5,a5,511
    80010570:	faf43423          	sd	a5,-88(s0)
    80010574:	f8843783          	ld	a5,-120(s0)
    80010578:	83d5                	srli	a5,a5,0x15
    8001057a:	1ff7f793          	andi	a5,a5,511
    8001057e:	faf43823          	sd	a5,-80(s0)
                            (paddr >> ADDR_2_BIT) & 0x3FFFFFF};
    80010582:	f8843783          	ld	a5,-120(s0)
    80010586:	01e7d713          	srli	a4,a5,0x1e
    8001058a:	040007b7          	lui	a5,0x4000
    8001058e:	17fd                	addi	a5,a5,-1
    80010590:	8ff9                	and	a5,a5,a4
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    80010592:	faf43c23          	sd	a5,-72(s0)

    int i;
    struct page_table *pt = tab;
    80010596:	f9843783          	ld	a5,-104(s0)
    8001059a:	fef43023          	sd	a5,-32(s0)

    for (i = MMU_LEVEL_1G; i > lvl; i -= 1) {
    8001059e:	4789                	li	a5,2
    800105a0:	fef42623          	sw	a5,-20(s0)
    800105a4:	aa31                	j	800106c0 <mmu_map+0x20e>
        unsigned long pte = pt->entries[vpn[i]];
    800105a6:	fec42783          	lw	a5,-20(s0)
    800105aa:	078e                	slli	a5,a5,0x3
    800105ac:	ff040713          	addi	a4,s0,-16
    800105b0:	97ba                	add	a5,a5,a4
    800105b2:	fd07b783          	ld	a5,-48(a5) # 3ffffd0 <i+0x3ffffb0>
    800105b6:	fe043703          	ld	a4,-32(s0)
    800105ba:	078e                	slli	a5,a5,0x3
    800105bc:	97ba                	add	a5,a5,a4
    800105be:	639c                	ld	a5,0(a5)
    800105c0:	fcf43c23          	sd	a5,-40(s0)

        if (!is_valid(pte)) {
    800105c4:	fd843503          	ld	a0,-40(s0)
    800105c8:	ecbff0ef          	jal	ra,80010492 <is_valid>
    800105cc:	87aa                	mv	a5,a0
    800105ce:	0017c793          	xori	a5,a5,1
    800105d2:	0ff7f793          	andi	a5,a5,255
    800105d6:	c3d5                	beqz	a5,8001067a <mmu_map+0x1c8>
            debugf("mmu_map: entry %d in page table at 0x%08lx is invalid\n", vpn[i], pt);
    800105d8:	fec42783          	lw	a5,-20(s0)
    800105dc:	078e                	slli	a5,a5,0x3
    800105de:	ff040713          	addi	a4,s0,-16
    800105e2:	97ba                	add	a5,a5,a4
    800105e4:	fd07b783          	ld	a5,-48(a5)
    800105e8:	fe043603          	ld	a2,-32(s0)
    800105ec:	85be                	mv	a1,a5
    800105ee:	00009517          	auipc	a0,0x9
    800105f2:	ada50513          	addi	a0,a0,-1318 # 800190c8 <SYSCALLS+0xc8>
    800105f6:	02b010ef          	jal	ra,80011e20 <debugf>
            pt = mmu_table_create();
    800105fa:	e7fff0ef          	jal	ra,80010478 <mmu_table_create>
    800105fe:	fea43023          	sd	a0,-32(s0)
            if (pt == NULL) {
    80010602:	fe043783          	ld	a5,-32(s0)
    80010606:	eb89                	bnez	a5,80010618 <mmu_map+0x166>
                debugf("mmu_map: mmu_table_create returned null");
    80010608:	00009517          	auipc	a0,0x9
    8001060c:	af850513          	addi	a0,a0,-1288 # 80019100 <SYSCALLS+0x100>
    80010610:	011010ef          	jal	ra,80011e20 <debugf>
                return false;
    80010614:	4781                	li	a5,0
    80010616:	a20d                	j	80010738 <mmu_map+0x286>
            }
            memset(pt, 0, sizeof(struct page_table));  // Ensure the new table is zeroed out
    80010618:	6605                	lui	a2,0x1
    8001061a:	4581                	li	a1,0
    8001061c:	fe043503          	ld	a0,-32(s0)
    80010620:	453040ef          	jal	ra,80015272 <memset>
            tab->entries[vpn[i]] = (unsigned long) pt | PB_VALID;
    80010624:	fe043703          	ld	a4,-32(s0)
    80010628:	fec42783          	lw	a5,-20(s0)
    8001062c:	078e                	slli	a5,a5,0x3
    8001062e:	ff040693          	addi	a3,s0,-16
    80010632:	97b6                	add	a5,a5,a3
    80010634:	fd07b783          	ld	a5,-48(a5)
    80010638:	00176713          	ori	a4,a4,1
    8001063c:	f9843683          	ld	a3,-104(s0)
    80010640:	078e                	slli	a5,a5,0x3
    80010642:	97b6                	add	a5,a5,a3
    80010644:	e398                	sd	a4,0(a5)
            debugf("mmu_map: create a new page table at 0x%08lx\n", pt);
    80010646:	fe043583          	ld	a1,-32(s0)
    8001064a:	00009517          	auipc	a0,0x9
    8001064e:	ade50513          	addi	a0,a0,-1314 # 80019128 <SYSCALLS+0x128>
    80010652:	7ce010ef          	jal	ra,80011e20 <debugf>
            debugf("mmu_map: set entry %d as lvl %d branch in new page table", vpn[i], i);
    80010656:	fec42783          	lw	a5,-20(s0)
    8001065a:	078e                	slli	a5,a5,0x3
    8001065c:	ff040713          	addi	a4,s0,-16
    80010660:	97ba                	add	a5,a5,a4
    80010662:	fd07b783          	ld	a5,-48(a5)
    80010666:	fec42703          	lw	a4,-20(s0)
    8001066a:	863a                	mv	a2,a4
    8001066c:	85be                	mv	a1,a5
    8001066e:	00009517          	auipc	a0,0x9
    80010672:	aea50513          	addi	a0,a0,-1302 # 80019158 <SYSCALLS+0x158>
    80010676:	7aa010ef          	jal	ra,80011e20 <debugf>
        }
        
        pt = (struct page_table *)(pt->entries[vpn[i]] & ~0xFFF);
    8001067a:	fec42783          	lw	a5,-20(s0)
    8001067e:	078e                	slli	a5,a5,0x3
    80010680:	ff040713          	addi	a4,s0,-16
    80010684:	97ba                	add	a5,a5,a4
    80010686:	fd07b783          	ld	a5,-48(a5)
    8001068a:	fe043703          	ld	a4,-32(s0)
    8001068e:	078e                	slli	a5,a5,0x3
    80010690:	97ba                	add	a5,a5,a4
    80010692:	6398                	ld	a4,0(a5)
    80010694:	77fd                	lui	a5,0xfffff
    80010696:	8ff9                	and	a5,a5,a4
    80010698:	fef43023          	sd	a5,-32(s0)
        debugf("mmu_map: lvl %d page table is at 0x%08lx\n", i - 1, pt);
    8001069c:	fec42783          	lw	a5,-20(s0)
    800106a0:	37fd                	addiw	a5,a5,-1
    800106a2:	2781                	sext.w	a5,a5
    800106a4:	fe043603          	ld	a2,-32(s0)
    800106a8:	85be                	mv	a1,a5
    800106aa:	00009517          	auipc	a0,0x9
    800106ae:	aee50513          	addi	a0,a0,-1298 # 80019198 <SYSCALLS+0x198>
    800106b2:	76e010ef          	jal	ra,80011e20 <debugf>
    for (i = MMU_LEVEL_1G; i > lvl; i -= 1) {
    800106b6:	fec42783          	lw	a5,-20(s0)
    800106ba:	37fd                	addiw	a5,a5,-1
    800106bc:	fef42623          	sw	a5,-20(s0)
    800106c0:	f8744783          	lbu	a5,-121(s0)
    800106c4:	0007871b          	sext.w	a4,a5
    800106c8:	fec42783          	lw	a5,-20(s0)
    800106cc:	2781                	sext.w	a5,a5
    800106ce:	ecf74ce3          	blt	a4,a5,800105a6 <mmu_map+0xf4>
    }

    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    800106d2:	fb843783          	ld	a5,-72(s0)
    800106d6:	01c79713          	slli	a4,a5,0x1c
                          ppn[1] << PTE_PPN1_BIT |
    800106da:	fb043783          	ld	a5,-80(s0)
    800106de:	07ce                	slli	a5,a5,0x13
    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    800106e0:	8f5d                	or	a4,a4,a5
                          ppn[0] << PTE_PPN0_BIT |
    800106e2:	fa843783          	ld	a5,-88(s0)
    800106e6:	07aa                	slli	a5,a5,0xa
                          ppn[1] << PTE_PPN1_BIT |
    800106e8:	8f5d                	or	a4,a4,a5
                          ppn[0] << PTE_PPN0_BIT |
    800106ea:	f7843783          	ld	a5,-136(s0)
    800106ee:	8f5d                	or	a4,a4,a5
    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    800106f0:	fec42783          	lw	a5,-20(s0)
    800106f4:	078e                	slli	a5,a5,0x3
    800106f6:	ff040693          	addi	a3,s0,-16
    800106fa:	97b6                	add	a5,a5,a3
    800106fc:	fd07b783          	ld	a5,-48(a5) # ffffffffffffefd0 <_heap_end+0xffffffff77feefd0>
                          bits |
    80010700:	00176713          	ori	a4,a4,1
    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    80010704:	fe043683          	ld	a3,-32(s0)
    80010708:	078e                	slli	a5,a5,0x3
    8001070a:	97b6                	add	a5,a5,a3
    8001070c:	e398                	sd	a4,0(a5)
                          PB_VALID;

    debugf("mmu_map: set entry %d as lvl %d leaf in page table at 0x%08lx\n", vpn[i], i, pt);
    8001070e:	fec42783          	lw	a5,-20(s0)
    80010712:	078e                	slli	a5,a5,0x3
    80010714:	ff040713          	addi	a4,s0,-16
    80010718:	97ba                	add	a5,a5,a4
    8001071a:	fd07b783          	ld	a5,-48(a5)
    8001071e:	fec42703          	lw	a4,-20(s0)
    80010722:	fe043683          	ld	a3,-32(s0)
    80010726:	863a                	mv	a2,a4
    80010728:	85be                	mv	a1,a5
    8001072a:	00009517          	auipc	a0,0x9
    8001072e:	a9e50513          	addi	a0,a0,-1378 # 800191c8 <SYSCALLS+0x1c8>
    80010732:	6ee010ef          	jal	ra,80011e20 <debugf>

    return true;
    80010736:	4785                	li	a5,1
}
    80010738:	853e                	mv	a0,a5
    8001073a:	60aa                	ld	ra,136(sp)
    8001073c:	640a                	ld	s0,128(sp)
    8001073e:	6149                	addi	sp,sp,144
    80010740:	8082                	ret

0000000080010742 <mmu_free>:

void mmu_free(struct page_table *tab) 
{ 
    80010742:	7179                	addi	sp,sp,-48
    80010744:	f406                	sd	ra,40(sp)
    80010746:	f022                	sd	s0,32(sp)
    80010748:	1800                	addi	s0,sp,48
    8001074a:	fca43c23          	sd	a0,-40(s0)
    uint64_t entry; 
    int i; 

    if (tab == NULL) { 
    8001074e:	fd843783          	ld	a5,-40(s0)
    80010752:	c3b5                	beqz	a5,800107b6 <mmu_free+0x74>
        return; 
    } 

    for (i = 0; i < (PAGE_SIZE / 8); i += 1) { 
    80010754:	fe042623          	sw	zero,-20(s0)
    80010758:	a091                	j	8001079c <mmu_free+0x5a>
        entry = tab->entries[i]; 
    8001075a:	fd843703          	ld	a4,-40(s0)
    8001075e:	fec42783          	lw	a5,-20(s0)
    80010762:	078e                	slli	a5,a5,0x3
    80010764:	97ba                	add	a5,a5,a4
    80010766:	639c                	ld	a5,0(a5)
    80010768:	fef43023          	sd	a5,-32(s0)
        if (entry & PB_VALID) {
    8001076c:	fe043783          	ld	a5,-32(s0)
    80010770:	8b85                	andi	a5,a5,1
    80010772:	cb81                	beqz	a5,80010782 <mmu_free+0x40>
            mmu_free((struct page_table *)(entry & ~0xFFF)); // Recurse into the next level
    80010774:	fe043703          	ld	a4,-32(s0)
    80010778:	77fd                	lui	a5,0xfffff
    8001077a:	8ff9                	and	a5,a5,a4
    8001077c:	853e                	mv	a0,a5
    8001077e:	fc5ff0ef          	jal	ra,80010742 <mmu_free>
        }
        tab->entries[i] = 0; 
    80010782:	fd843703          	ld	a4,-40(s0)
    80010786:	fec42783          	lw	a5,-20(s0)
    8001078a:	078e                	slli	a5,a5,0x3
    8001078c:	97ba                	add	a5,a5,a4
    8001078e:	0007b023          	sd	zero,0(a5) # fffffffffffff000 <_heap_end+0xffffffff77fef000>
    for (i = 0; i < (PAGE_SIZE / 8); i += 1) { 
    80010792:	fec42783          	lw	a5,-20(s0)
    80010796:	2785                	addiw	a5,a5,1
    80010798:	fef42623          	sw	a5,-20(s0)
    8001079c:	fec42783          	lw	a5,-20(s0)
    800107a0:	0007871b          	sext.w	a4,a5
    800107a4:	1ff00793          	li	a5,511
    800107a8:	fae7d9e3          	bge	a5,a4,8001075a <mmu_free+0x18>
    } 

    page_free(tab); 
    800107ac:	fd843503          	ld	a0,-40(s0)
    800107b0:	25c020ef          	jal	ra,80012a0c <page_free>
    800107b4:	a011                	j	800107b8 <mmu_free+0x76>
        return; 
    800107b6:	0001                	nop
}
    800107b8:	70a2                	ld	ra,40(sp)
    800107ba:	7402                	ld	s0,32(sp)
    800107bc:	6145                	addi	sp,sp,48
    800107be:	8082                	ret

00000000800107c0 <mmu_translate>:

uint64_t mmu_translate(const struct page_table *tab, uint64_t vaddr) 
{ 
    800107c0:	715d                	addi	sp,sp,-80
    800107c2:	e4a2                	sd	s0,72(sp)
    800107c4:	0880                	addi	s0,sp,80
    800107c6:	faa43c23          	sd	a0,-72(s0)
    800107ca:	fab43823          	sd	a1,-80(s0)
    int i; 

    if (tab == NULL) { 
    800107ce:	fb843783          	ld	a5,-72(s0)
    800107d2:	e399                	bnez	a5,800107d8 <mmu_translate+0x18>
        return MMU_TRANSLATE_PAGE_FAULT; 
    800107d4:	57fd                	li	a5,-1
    800107d6:	a84d                	j	80010888 <mmu_translate+0xc8>
    } 

    // Extract the virtual page numbers
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    800107d8:	fb043783          	ld	a5,-80(s0)
    800107dc:	83b1                	srli	a5,a5,0xc
    800107de:	1ff7f793          	andi	a5,a5,511
    800107e2:	fcf43423          	sd	a5,-56(s0)
                      (vaddr >> ADDR_1_BIT) & 0x1FF, 
    800107e6:	fb043783          	ld	a5,-80(s0)
    800107ea:	83d5                	srli	a5,a5,0x15
    800107ec:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    800107f0:	fcf43823          	sd	a5,-48(s0)
                      (vaddr >> ADDR_2_BIT) & 0x1FF};
    800107f4:	fb043783          	ld	a5,-80(s0)
    800107f8:	83f9                	srli	a5,a5,0x1e
    800107fa:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    800107fe:	fcf43c23          	sd	a5,-40(s0)

    // Traverse the page table hierarchy using the virtual page numbers
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    80010802:	4789                	li	a5,2
    80010804:	fef42623          	sw	a5,-20(s0)
    80010808:	a881                	j	80010858 <mmu_translate+0x98>
        if (!(tab->entries[vpn[i]] & PB_VALID)) {
    8001080a:	fec42783          	lw	a5,-20(s0)
    8001080e:	078e                	slli	a5,a5,0x3
    80010810:	ff040713          	addi	a4,s0,-16
    80010814:	97ba                	add	a5,a5,a4
    80010816:	fd87b783          	ld	a5,-40(a5)
    8001081a:	fb843703          	ld	a4,-72(s0)
    8001081e:	078e                	slli	a5,a5,0x3
    80010820:	97ba                	add	a5,a5,a4
    80010822:	639c                	ld	a5,0(a5)
    80010824:	8b85                	andi	a5,a5,1
    80010826:	e399                	bnez	a5,8001082c <mmu_translate+0x6c>
            return MMU_TRANSLATE_PAGE_FAULT; // Entry is not valid
    80010828:	57fd                	li	a5,-1
    8001082a:	a8b9                	j	80010888 <mmu_translate+0xc8>
        }
        tab = (struct page_table *)(tab->entries[vpn[i]] & ~0xFFF);
    8001082c:	fec42783          	lw	a5,-20(s0)
    80010830:	078e                	slli	a5,a5,0x3
    80010832:	ff040713          	addi	a4,s0,-16
    80010836:	97ba                	add	a5,a5,a4
    80010838:	fd87b783          	ld	a5,-40(a5)
    8001083c:	fb843703          	ld	a4,-72(s0)
    80010840:	078e                	slli	a5,a5,0x3
    80010842:	97ba                	add	a5,a5,a4
    80010844:	6398                	ld	a4,0(a5)
    80010846:	77fd                	lui	a5,0xfffff
    80010848:	8ff9                	and	a5,a5,a4
    8001084a:	faf43c23          	sd	a5,-72(s0)
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    8001084e:	fec42783          	lw	a5,-20(s0)
    80010852:	37fd                	addiw	a5,a5,-1
    80010854:	fef42623          	sw	a5,-20(s0)
    80010858:	fec42783          	lw	a5,-20(s0)
    8001085c:	2781                	sext.w	a5,a5
    8001085e:	fa07d6e3          	bgez	a5,8001080a <mmu_translate+0x4a>
    }

    // Extract the physical address from the final page table entry
    uint64_t paddr = tab->entries[vpn[MMU_LEVEL_4K]] & ~0xFFF;
    80010862:	fc843783          	ld	a5,-56(s0)
    80010866:	fb843703          	ld	a4,-72(s0)
    8001086a:	078e                	slli	a5,a5,0x3
    8001086c:	97ba                	add	a5,a5,a4
    8001086e:	6398                	ld	a4,0(a5)
    80010870:	77fd                	lui	a5,0xfffff
    80010872:	8ff9                	and	a5,a5,a4
    80010874:	fef43023          	sd	a5,-32(s0)
    return paddr | (vaddr & (PAGE_SIZE - 1)); // Combine with the offset within the page
    80010878:	fb043703          	ld	a4,-80(s0)
    8001087c:	6785                	lui	a5,0x1
    8001087e:	17fd                	addi	a5,a5,-1
    80010880:	8f7d                	and	a4,a4,a5
    80010882:	fe043783          	ld	a5,-32(s0)
    80010886:	8fd9                	or	a5,a5,a4
} 
    80010888:	853e                	mv	a0,a5
    8001088a:	6426                	ld	s0,72(sp)
    8001088c:	6161                	addi	sp,sp,80
    8001088e:	8082                	ret

0000000080010890 <mmu_map_range>:
                       uint64_t start_virt, 
                       uint64_t end_virt, 
                       uint64_t start_phys,
                       uint8_t lvl, 
                       uint64_t bits)
{
    80010890:	711d                	addi	sp,sp,-96
    80010892:	ec86                	sd	ra,88(sp)
    80010894:	e8a2                	sd	s0,80(sp)
    80010896:	1080                	addi	s0,sp,96
    80010898:	fca43423          	sd	a0,-56(s0)
    8001089c:	fcb43023          	sd	a1,-64(s0)
    800108a0:	fac43c23          	sd	a2,-72(s0)
    800108a4:	fad43823          	sd	a3,-80(s0)
    800108a8:	faf43023          	sd	a5,-96(s0)
    800108ac:	87ba                	mv	a5,a4
    800108ae:	faf407a3          	sb	a5,-81(s0)
    start_virt            = ALIGN_DOWN_POT(start_virt, PAGE_SIZE_AT_LVL(lvl));
    800108b2:	faf44783          	lbu	a5,-81(s0)
    800108b6:	2781                	sext.w	a5,a5
    800108b8:	873e                	mv	a4,a5
    800108ba:	87ba                	mv	a5,a4
    800108bc:	0037979b          	slliw	a5,a5,0x3
    800108c0:	9fb9                	addw	a5,a5,a4
    800108c2:	2781                	sext.w	a5,a5
    800108c4:	27b1                	addiw	a5,a5,12
    800108c6:	2781                	sext.w	a5,a5
    800108c8:	4705                	li	a4,1
    800108ca:	00f717bb          	sllw	a5,a4,a5
    800108ce:	2781                	sext.w	a5,a5
    800108d0:	40f007bb          	negw	a5,a5
    800108d4:	2781                	sext.w	a5,a5
    800108d6:	873e                	mv	a4,a5
    800108d8:	fc043783          	ld	a5,-64(s0)
    800108dc:	8ff9                	and	a5,a5,a4
    800108de:	fcf43023          	sd	a5,-64(s0)
    end_virt              = ALIGN_UP_POT(end_virt, PAGE_SIZE_AT_LVL(lvl));
    800108e2:	faf44783          	lbu	a5,-81(s0)
    800108e6:	2781                	sext.w	a5,a5
    800108e8:	873e                	mv	a4,a5
    800108ea:	87ba                	mv	a5,a4
    800108ec:	0037979b          	slliw	a5,a5,0x3
    800108f0:	9fb9                	addw	a5,a5,a4
    800108f2:	2781                	sext.w	a5,a5
    800108f4:	27b1                	addiw	a5,a5,12
    800108f6:	2781                	sext.w	a5,a5
    800108f8:	4705                	li	a4,1
    800108fa:	00f717bb          	sllw	a5,a4,a5
    800108fe:	2781                	sext.w	a5,a5
    80010900:	873e                	mv	a4,a5
    80010902:	fb843783          	ld	a5,-72(s0)
    80010906:	97ba                	add	a5,a5,a4
    80010908:	fff78713          	addi	a4,a5,-1 # fff <i+0xfdf>
    8001090c:	faf44783          	lbu	a5,-81(s0)
    80010910:	2781                	sext.w	a5,a5
    80010912:	86be                	mv	a3,a5
    80010914:	87b6                	mv	a5,a3
    80010916:	0037979b          	slliw	a5,a5,0x3
    8001091a:	9fb5                	addw	a5,a5,a3
    8001091c:	2781                	sext.w	a5,a5
    8001091e:	27b1                	addiw	a5,a5,12
    80010920:	2781                	sext.w	a5,a5
    80010922:	4685                	li	a3,1
    80010924:	00f697bb          	sllw	a5,a3,a5
    80010928:	2781                	sext.w	a5,a5
    8001092a:	40f007bb          	negw	a5,a5
    8001092e:	2781                	sext.w	a5,a5
    80010930:	8ff9                	and	a5,a5,a4
    80010932:	faf43c23          	sd	a5,-72(s0)
    uint64_t num_bytes    = end_virt - start_virt;
    80010936:	fb843703          	ld	a4,-72(s0)
    8001093a:	fc043783          	ld	a5,-64(s0)
    8001093e:	40f707b3          	sub	a5,a4,a5
    80010942:	fcf43c23          	sd	a5,-40(s0)
    uint64_t pages_mapped = 0;
    80010946:	fe043423          	sd	zero,-24(s0)

    uint64_t i;
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    8001094a:	fe043023          	sd	zero,-32(s0)
    8001094e:	a0ad                	j	800109b8 <mmu_map_range+0x128>
        if (!mmu_map(tab, start_virt + i, start_phys + i, lvl, bits)) {
    80010950:	fc043703          	ld	a4,-64(s0)
    80010954:	fe043783          	ld	a5,-32(s0)
    80010958:	00f705b3          	add	a1,a4,a5
    8001095c:	fb043703          	ld	a4,-80(s0)
    80010960:	fe043783          	ld	a5,-32(s0)
    80010964:	97ba                	add	a5,a5,a4
    80010966:	faf44683          	lbu	a3,-81(s0)
    8001096a:	fa043703          	ld	a4,-96(s0)
    8001096e:	863e                	mv	a2,a5
    80010970:	fc843503          	ld	a0,-56(s0)
    80010974:	b3fff0ef          	jal	ra,800104b2 <mmu_map>
    80010978:	87aa                	mv	a5,a0
    8001097a:	0017c793          	xori	a5,a5,1
    8001097e:	0ff7f793          	andi	a5,a5,255
    80010982:	e3b1                	bnez	a5,800109c6 <mmu_map_range+0x136>
            break;
        }
        pages_mapped += 1;
    80010984:	fe843783          	ld	a5,-24(s0)
    80010988:	0785                	addi	a5,a5,1
    8001098a:	fef43423          	sd	a5,-24(s0)
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    8001098e:	faf44783          	lbu	a5,-81(s0)
    80010992:	2781                	sext.w	a5,a5
    80010994:	873e                	mv	a4,a5
    80010996:	87ba                	mv	a5,a4
    80010998:	0037979b          	slliw	a5,a5,0x3
    8001099c:	9fb9                	addw	a5,a5,a4
    8001099e:	2781                	sext.w	a5,a5
    800109a0:	27b1                	addiw	a5,a5,12
    800109a2:	2781                	sext.w	a5,a5
    800109a4:	4705                	li	a4,1
    800109a6:	00f717bb          	sllw	a5,a4,a5
    800109aa:	2781                	sext.w	a5,a5
    800109ac:	873e                	mv	a4,a5
    800109ae:	fe043783          	ld	a5,-32(s0)
    800109b2:	97ba                	add	a5,a5,a4
    800109b4:	fef43023          	sd	a5,-32(s0)
    800109b8:	fe043703          	ld	a4,-32(s0)
    800109bc:	fd843783          	ld	a5,-40(s0)
    800109c0:	f8f768e3          	bltu	a4,a5,80010950 <mmu_map_range+0xc0>
    800109c4:	a011                	j	800109c8 <mmu_map_range+0x138>
            break;
    800109c6:	0001                	nop
    }
    return pages_mapped;
    800109c8:	fe843783          	ld	a5,-24(s0)
} 
    800109cc:	853e                	mv	a0,a5
    800109ce:	60e6                	ld	ra,88(sp)
    800109d0:	6446                	ld	s0,80(sp)
    800109d2:	6125                	addi	sp,sp,96
    800109d4:	8082                	ret

00000000800109d6 <c_trap_handler>:
// From src/syscall.c
void syscall_handle(int hart, uint64_t epc, int64_t *scratch);

// Called from asm/spawn.S: _spawn_trap
void c_trap_handler(void)
{
    800109d6:	7139                	addi	sp,sp,-64
    800109d8:	fc06                	sd	ra,56(sp)
    800109da:	f822                	sd	s0,48(sp)
    800109dc:	0080                	addi	s0,sp,64
    unsigned long cause;
    long *scratch;
    unsigned long epc;
    unsigned long tval;
    CSR_READ(cause, "scause");
    800109de:	142027f3          	csrr	a5,scause
    800109e2:	fef43423          	sd	a5,-24(s0)
    CSR_READ(scratch, "sscratch");
    800109e6:	140027f3          	csrr	a5,sscratch
    800109ea:	fef43023          	sd	a5,-32(s0)
    CSR_READ(epc, "sepc");
    800109ee:	141027f3          	csrr	a5,sepc
    800109f2:	fcf43c23          	sd	a5,-40(s0)
    CSR_READ(tval, "stval");
    800109f6:	143027f3          	csrr	a5,stval
    800109fa:	fcf43823          	sd	a5,-48(s0)
    
    int hart = sbi_whoami();
    800109fe:	6d0010ef          	jal	ra,800120ce <sbi_whoami>
    80010a02:	87aa                	mv	a5,a0
    80010a04:	fcf42623          	sw	a5,-52(s0)

    if (SCAUSE_IS_ASYNC(cause)) {
    80010a08:	fe843783          	ld	a5,-24(s0)
    80010a0c:	0407d563          	bgez	a5,80010a56 <c_trap_handler+0x80>
        cause = SCAUSE_NUM(cause);
    80010a10:	fe843783          	ld	a5,-24(s0)
    80010a14:	0ff7f793          	andi	a5,a5,255
    80010a18:	fef43423          	sd	a5,-24(s0)
        switch (cause) {
    80010a1c:	fe843703          	ld	a4,-24(s0)
    80010a20:	4795                	li	a5,5
    80010a22:	00f70863          	beq	a4,a5,80010a32 <c_trap_handler+0x5c>
    80010a26:	fe843703          	ld	a4,-24(s0)
    80010a2a:	47a5                	li	a5,9
    80010a2c:	00f70663          	beq	a4,a5,80010a38 <c_trap_handler+0x62>
    80010a30:	a811                	j	80010a44 <c_trap_handler+0x6e>
            case CAUSE_STIP:
                // Ack timer will reset the timer to INFINITE
                // In src/sbi.c
                sbi_ack_timer();
    80010a32:	666010ef          	jal	ra,80012098 <sbi_ack_timer>
                // We typically invoke our scheduler if we get a timer
                // sched_invoke(hart);
                break;
    80010a36:	a08d                	j	80010a98 <c_trap_handler+0xc2>
            case CAUSE_SEIP:
                // Forward to src/plic.c
                plic_handle_irq(hart);
    80010a38:	fcc42783          	lw	a5,-52(s0)
    80010a3c:	853e                	mv	a0,a5
    80010a3e:	145010ef          	jal	ra,80012382 <plic_handle_irq>
                break;
    80010a42:	a899                	j	80010a98 <c_trap_handler+0xc2>
            default:
                debugf("Unhandled Asynchronous interrupt %ld\n", cause);
    80010a44:	fe843583          	ld	a1,-24(s0)
    80010a48:	00008517          	auipc	a0,0x8
    80010a4c:	7c050513          	addi	a0,a0,1984 # 80019208 <SYSCALLS+0x208>
    80010a50:	3d0010ef          	jal	ra,80011e20 <debugf>
                break;
    80010a54:	a091                	j	80010a98 <c_trap_handler+0xc2>
        }
    }
    else {
        switch (cause) {
    80010a56:	fe843703          	ld	a4,-24(s0)
    80010a5a:	47a1                	li	a5,8
    80010a5c:	00f71c63          	bne	a4,a5,80010a74 <c_trap_handler+0x9e>
            case CAUSE_ECALL_U_MODE:  // ECALL U-Mode
                // Forward to src/syscall.c
                syscall_handle(hart, epc, scratch);
    80010a60:	fcc42783          	lw	a5,-52(s0)
    80010a64:	fe043603          	ld	a2,-32(s0)
    80010a68:	fd843583          	ld	a1,-40(s0)
    80010a6c:	853e                	mv	a0,a5
    80010a6e:	97fff0ef          	jal	ra,800103ec <syscall_handle>
                break;
    80010a72:	a01d                	j	80010a98 <c_trap_handler+0xc2>
            default:
                debugf(
    80010a74:	fcc42783          	lw	a5,-52(s0)
    80010a78:	873e                	mv	a4,a5
    80010a7a:	fd043683          	ld	a3,-48(s0)
    80010a7e:	fd843603          	ld	a2,-40(s0)
    80010a82:	fe843583          	ld	a1,-24(s0)
    80010a86:	00008517          	auipc	a0,0x8
    80010a8a:	7aa50513          	addi	a0,a0,1962 # 80019230 <SYSCALLS+0x230>
    80010a8e:	392010ef          	jal	ra,80011e20 <debugf>
                    "Unhandled Synchronous interrupt %ld @ 0x%08lx [0x%08lx]. "
                    "Hanging hart %d\n",
                    cause, epc, tval, hart);
                WFI_LOOP();
    80010a92:	10500073          	wfi
    80010a96:	bff5                	j	80010a92 <c_trap_handler+0xbc>
                break;
        }
    }
}
    80010a98:	0001                	nop
    80010a9a:	70e2                	ld	ra,56(sp)
    80010a9c:	7442                	ld	s0,48(sp)
    80010a9e:	6121                	addi	sp,sp,64
    80010aa0:	8082                	ret

0000000080010aa2 <pci_init>:
#include <pci.h>

void pci_init(void)
{
    80010aa2:	1141                	addi	sp,sp,-16
    80010aa4:	e422                	sd	s0,8(sp)
    80010aa6:	0800                	addi	s0,sp,16
    // Initialize and enumerate all PCI bridges and devices.

    // This should forward all virtio devices to the virtio drivers.
}
    80010aa8:	0001                	nop
    80010aaa:	6422                	ld	s0,8(sp)
    80010aac:	0141                	addi	sp,sp,16
    80010aae:	8082                	ret

0000000080010ab0 <pci_dispatch_irq>:

void pci_dispatch_irq(int irq)
{
    80010ab0:	1101                	addi	sp,sp,-32
    80010ab2:	ec22                	sd	s0,24(sp)
    80010ab4:	1000                	addi	s0,sp,32
    80010ab6:	87aa                	mv	a5,a0
    80010ab8:	fef42623          	sw	a5,-20(s0)
    (void)irq;

    // An IRQ came from the PLIC, but recall PCI devices
    // share IRQs. So, you need to check the ISR register
    // of potential virtio devices.
}
    80010abc:	0001                	nop
    80010abe:	6462                	ld	s0,24(sp)
    80010ac0:	6105                	addi	sp,sp,32
    80010ac2:	8082                	ret

0000000080010ac4 <mutex_trylock>:
#include <config.h>
#include <lock.h>
#include <compiler.h>

bool mutex_trylock(Mutex *mutex)
{
    80010ac4:	7179                	addi	sp,sp,-48
    80010ac6:	f422                	sd	s0,40(sp)
    80010ac8:	1800                	addi	s0,sp,48
    80010aca:	fca43c23          	sd	a0,-40(s0)
    int old;
    asm volatile("amoswap.w.aq %0, %1, (%2)" : "=r"(old) : "r"(MUTEX_LOCKED), "r"(mutex));
    80010ace:	4785                	li	a5,1
    80010ad0:	fd843703          	ld	a4,-40(s0)
    80010ad4:	0cf727af          	amoswap.w.aq	a5,a5,(a4)
    80010ad8:	fef42623          	sw	a5,-20(s0)
    // If old == MUTEX_LOCKED, that means the mutex was already
    // locked when we tried to lock it. That means we didn't acquire
    // it.
    return old != MUTEX_LOCKED;
    80010adc:	fec42783          	lw	a5,-20(s0)
    80010ae0:	0007871b          	sext.w	a4,a5
    80010ae4:	4785                	li	a5,1
    80010ae6:	40f707b3          	sub	a5,a4,a5
    80010aea:	00f037b3          	snez	a5,a5
    80010aee:	0ff7f793          	andi	a5,a5,255
}
    80010af2:	853e                	mv	a0,a5
    80010af4:	7422                	ld	s0,40(sp)
    80010af6:	6145                	addi	sp,sp,48
    80010af8:	8082                	ret

0000000080010afa <mutex_spinlock>:

void mutex_spinlock(Mutex *mutex)
{
    80010afa:	1101                	addi	sp,sp,-32
    80010afc:	ec06                	sd	ra,24(sp)
    80010afe:	e822                	sd	s0,16(sp)
    80010b00:	1000                	addi	s0,sp,32
    80010b02:	fea43423          	sd	a0,-24(s0)
    while (!mutex_trylock(mutex))
    80010b06:	0001                	nop
    80010b08:	fe843503          	ld	a0,-24(s0)
    80010b0c:	fb9ff0ef          	jal	ra,80010ac4 <mutex_trylock>
    80010b10:	87aa                	mv	a5,a0
    80010b12:	0017c793          	xori	a5,a5,1
    80010b16:	0ff7f793          	andi	a5,a5,255
    80010b1a:	f7fd                	bnez	a5,80010b08 <mutex_spinlock+0xe>
        ;
}
    80010b1c:	0001                	nop
    80010b1e:	0001                	nop
    80010b20:	60e2                	ld	ra,24(sp)
    80010b22:	6442                	ld	s0,16(sp)
    80010b24:	6105                	addi	sp,sp,32
    80010b26:	8082                	ret

0000000080010b28 <mutex_unlock>:

void mutex_unlock(Mutex *mutex)
{
    80010b28:	1101                	addi	sp,sp,-32
    80010b2a:	ec22                	sd	s0,24(sp)
    80010b2c:	1000                	addi	s0,sp,32
    80010b2e:	fea43423          	sd	a0,-24(s0)
    asm volatile("amoswap.w.rl zero, zero, (%0)" : : "r"(mutex));
    80010b32:	fe843783          	ld	a5,-24(s0)
    80010b36:	0a07a02f          	amoswap.w.rl	zero,zero,(a5)
}
    80010b3a:	0001                	nop
    80010b3c:	6462                	ld	s0,24(sp)
    80010b3e:	6105                	addi	sp,sp,32
    80010b40:	8082                	ret

0000000080010b42 <insert_block>:
 * into free list, sorted by addr.
 * If disabled, add block has new head of
 * the free list.
 */
static void insert_block(Block *block)
{
    80010b42:	7179                	addi	sp,sp,-48
    80010b44:	f422                	sd	s0,40(sp)
    80010b46:	1800                	addi	s0,sp,48
    80010b48:	fca43c23          	sd	a0,-40(s0)
    Block *ptr  = heap->free;
    80010b4c:	00007797          	auipc	a5,0x7
    80010b50:	4dc78793          	addi	a5,a5,1244 # 80018028 <heap>
    80010b54:	639c                	ld	a5,0(a5)
    80010b56:	639c                	ld	a5,0(a5)
    80010b58:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80010b5c:	fe043023          	sd	zero,-32(s0)
    while (ptr != NULL) {
    80010b60:	a01d                	j	80010b86 <insert_block+0x44>
        if ((size_t)block->addr <= (size_t)ptr->addr) {
    80010b62:	fd843783          	ld	a5,-40(s0)
    80010b66:	639c                	ld	a5,0(a5)
    80010b68:	873e                	mv	a4,a5
    80010b6a:	fe843783          	ld	a5,-24(s0)
    80010b6e:	639c                	ld	a5,0(a5)
    80010b70:	00e7ff63          	bgeu	a5,a4,80010b8e <insert_block+0x4c>
            break;
        }
        prev = ptr;
    80010b74:	fe843783          	ld	a5,-24(s0)
    80010b78:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    80010b7c:	fe843783          	ld	a5,-24(s0)
    80010b80:	679c                	ld	a5,8(a5)
    80010b82:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80010b86:	fe843783          	ld	a5,-24(s0)
    80010b8a:	ffe1                	bnez	a5,80010b62 <insert_block+0x20>
    80010b8c:	a011                	j	80010b90 <insert_block+0x4e>
            break;
    80010b8e:	0001                	nop
    }
    if (prev != NULL) {
    80010b90:	fe043783          	ld	a5,-32(s0)
    80010b94:	c799                	beqz	a5,80010ba2 <insert_block+0x60>
        prev->next = block;
    80010b96:	fe043783          	ld	a5,-32(s0)
    80010b9a:	fd843703          	ld	a4,-40(s0)
    80010b9e:	e798                	sd	a4,8(a5)
    80010ba0:	a809                	j	80010bb2 <insert_block+0x70>
    }
    else {
        heap->free = block;
    80010ba2:	00007797          	auipc	a5,0x7
    80010ba6:	48678793          	addi	a5,a5,1158 # 80018028 <heap>
    80010baa:	639c                	ld	a5,0(a5)
    80010bac:	fd843703          	ld	a4,-40(s0)
    80010bb0:	e398                	sd	a4,0(a5)
    }
    block->next = ptr;
    80010bb2:	fd843783          	ld	a5,-40(s0)
    80010bb6:	fe843703          	ld	a4,-24(s0)
    80010bba:	e798                	sd	a4,8(a5)
}
    80010bbc:	0001                	nop
    80010bbe:	7422                	ld	s0,40(sp)
    80010bc0:	6145                	addi	sp,sp,48
    80010bc2:	8082                	ret

0000000080010bc4 <release_blocks>:

#ifndef TA_DISABLE_COMPACT
static void release_blocks(Block *scan, Block *to)
{
    80010bc4:	7179                	addi	sp,sp,-48
    80010bc6:	f422                	sd	s0,40(sp)
    80010bc8:	1800                	addi	s0,sp,48
    80010bca:	fca43c23          	sd	a0,-40(s0)
    80010bce:	fcb43823          	sd	a1,-48(s0)
    Block *scan_next;
    while (scan != to) {
    80010bd2:	a099                	j	80010c18 <release_blocks+0x54>
        scan_next   = scan->next;
    80010bd4:	fd843783          	ld	a5,-40(s0)
    80010bd8:	679c                	ld	a5,8(a5)
    80010bda:	fef43423          	sd	a5,-24(s0)
        scan->next  = heap->fresh;
    80010bde:	00007797          	auipc	a5,0x7
    80010be2:	44a78793          	addi	a5,a5,1098 # 80018028 <heap>
    80010be6:	639c                	ld	a5,0(a5)
    80010be8:	6b98                	ld	a4,16(a5)
    80010bea:	fd843783          	ld	a5,-40(s0)
    80010bee:	e798                	sd	a4,8(a5)
        heap->fresh = scan;
    80010bf0:	00007797          	auipc	a5,0x7
    80010bf4:	43878793          	addi	a5,a5,1080 # 80018028 <heap>
    80010bf8:	639c                	ld	a5,0(a5)
    80010bfa:	fd843703          	ld	a4,-40(s0)
    80010bfe:	eb98                	sd	a4,16(a5)
        scan->addr  = 0;
    80010c00:	fd843783          	ld	a5,-40(s0)
    80010c04:	0007b023          	sd	zero,0(a5)
        scan->size  = 0;
    80010c08:	fd843783          	ld	a5,-40(s0)
    80010c0c:	0007b823          	sd	zero,16(a5)
        scan        = scan_next;
    80010c10:	fe843783          	ld	a5,-24(s0)
    80010c14:	fcf43c23          	sd	a5,-40(s0)
    while (scan != to) {
    80010c18:	fd843703          	ld	a4,-40(s0)
    80010c1c:	fd043783          	ld	a5,-48(s0)
    80010c20:	faf71ae3          	bne	a4,a5,80010bd4 <release_blocks+0x10>
    }
}
    80010c24:	0001                	nop
    80010c26:	0001                	nop
    80010c28:	7422                	ld	s0,40(sp)
    80010c2a:	6145                	addi	sp,sp,48
    80010c2c:	8082                	ret

0000000080010c2e <compact>:

static void compact()
{
    80010c2e:	7139                	addi	sp,sp,-64
    80010c30:	fc06                	sd	ra,56(sp)
    80010c32:	f822                	sd	s0,48(sp)
    80010c34:	0080                	addi	s0,sp,64
    Block *ptr = heap->free;
    80010c36:	00007797          	auipc	a5,0x7
    80010c3a:	3f278793          	addi	a5,a5,1010 # 80018028 <heap>
    80010c3e:	639c                	ld	a5,0(a5)
    80010c40:	639c                	ld	a5,0(a5)
    80010c42:	fef43423          	sd	a5,-24(s0)
    Block *prev;
    Block *scan;
    while (ptr != NULL) {
    80010c46:	a075                	j	80010cf2 <compact+0xc4>
        prev = ptr;
    80010c48:	fe843783          	ld	a5,-24(s0)
    80010c4c:	fef43023          	sd	a5,-32(s0)
        scan = ptr->next;
    80010c50:	fe843783          	ld	a5,-24(s0)
    80010c54:	679c                	ld	a5,8(a5)
    80010c56:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    80010c5a:	a811                	j	80010c6e <compact+0x40>
            prev = scan;
    80010c5c:	fd843783          	ld	a5,-40(s0)
    80010c60:	fef43023          	sd	a5,-32(s0)
            scan = scan->next;
    80010c64:	fd843783          	ld	a5,-40(s0)
    80010c68:	679c                	ld	a5,8(a5)
    80010c6a:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    80010c6e:	fd843783          	ld	a5,-40(s0)
    80010c72:	cf91                	beqz	a5,80010c8e <compact+0x60>
    80010c74:	fe043783          	ld	a5,-32(s0)
    80010c78:	639c                	ld	a5,0(a5)
    80010c7a:	873e                	mv	a4,a5
    80010c7c:	fe043783          	ld	a5,-32(s0)
    80010c80:	6b9c                	ld	a5,16(a5)
    80010c82:	97ba                	add	a5,a5,a4
    80010c84:	fd843703          	ld	a4,-40(s0)
    80010c88:	6318                	ld	a4,0(a4)
    80010c8a:	fce789e3          	beq	a5,a4,80010c5c <compact+0x2e>
        }
        if (prev != ptr) {
    80010c8e:	fe043703          	ld	a4,-32(s0)
    80010c92:	fe843783          	ld	a5,-24(s0)
    80010c96:	04f70963          	beq	a4,a5,80010ce8 <compact+0xba>
            size_t new_size = (size_t)prev->addr - (size_t)ptr->addr + prev->size;
    80010c9a:	fe043783          	ld	a5,-32(s0)
    80010c9e:	639c                	ld	a5,0(a5)
    80010ca0:	873e                	mv	a4,a5
    80010ca2:	fe843783          	ld	a5,-24(s0)
    80010ca6:	639c                	ld	a5,0(a5)
    80010ca8:	8f1d                	sub	a4,a4,a5
    80010caa:	fe043783          	ld	a5,-32(s0)
    80010cae:	6b9c                	ld	a5,16(a5)
    80010cb0:	97ba                	add	a5,a5,a4
    80010cb2:	fcf43823          	sd	a5,-48(s0)
            ptr->size       = new_size;
    80010cb6:	fe843783          	ld	a5,-24(s0)
    80010cba:	fd043703          	ld	a4,-48(s0)
    80010cbe:	eb98                	sd	a4,16(a5)
            Block *next     = prev->next;
    80010cc0:	fe043783          	ld	a5,-32(s0)
    80010cc4:	679c                	ld	a5,8(a5)
    80010cc6:	fcf43423          	sd	a5,-56(s0)
            // make merged blocks available
            release_blocks(ptr->next, prev->next);
    80010cca:	fe843783          	ld	a5,-24(s0)
    80010cce:	6798                	ld	a4,8(a5)
    80010cd0:	fe043783          	ld	a5,-32(s0)
    80010cd4:	679c                	ld	a5,8(a5)
    80010cd6:	85be                	mv	a1,a5
    80010cd8:	853a                	mv	a0,a4
    80010cda:	eebff0ef          	jal	ra,80010bc4 <release_blocks>
            // relink
            ptr->next = next;
    80010cde:	fe843783          	ld	a5,-24(s0)
    80010ce2:	fc843703          	ld	a4,-56(s0)
    80010ce6:	e798                	sd	a4,8(a5)
        }
        ptr = ptr->next;
    80010ce8:	fe843783          	ld	a5,-24(s0)
    80010cec:	679c                	ld	a5,8(a5)
    80010cee:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80010cf2:	fe843783          	ld	a5,-24(s0)
    80010cf6:	fba9                	bnez	a5,80010c48 <compact+0x1a>
    }
}
    80010cf8:	0001                	nop
    80010cfa:	0001                	nop
    80010cfc:	70e2                	ld	ra,56(sp)
    80010cfe:	7442                	ld	s0,48(sp)
    80010d00:	6121                	addi	sp,sp,64
    80010d02:	8082                	ret

0000000080010d04 <init>:
#endif

static bool init(const void *base, const void *limit, const size_t heap_blocks,
                 const size_t split_thresh, const size_t alignment)
{
    80010d04:	715d                	addi	sp,sp,-80
    80010d06:	e4a2                	sd	s0,72(sp)
    80010d08:	0880                	addi	s0,sp,80
    80010d0a:	fca43c23          	sd	a0,-40(s0)
    80010d0e:	fcb43823          	sd	a1,-48(s0)
    80010d12:	fcc43423          	sd	a2,-56(s0)
    80010d16:	fcd43023          	sd	a3,-64(s0)
    80010d1a:	fae43c23          	sd	a4,-72(s0)
    heap              = (Heap *)base;
    80010d1e:	00007797          	auipc	a5,0x7
    80010d22:	30a78793          	addi	a5,a5,778 # 80018028 <heap>
    80010d26:	fd843703          	ld	a4,-40(s0)
    80010d2a:	e398                	sd	a4,0(a5)
    heap_limit        = limit;
    80010d2c:	00007797          	auipc	a5,0x7
    80010d30:	30478793          	addi	a5,a5,772 # 80018030 <heap_limit>
    80010d34:	fd043703          	ld	a4,-48(s0)
    80010d38:	e398                	sd	a4,0(a5)
    heap_split_thresh = split_thresh;
    80010d3a:	00007797          	auipc	a5,0x7
    80010d3e:	2fe78793          	addi	a5,a5,766 # 80018038 <heap_split_thresh>
    80010d42:	fc043703          	ld	a4,-64(s0)
    80010d46:	e398                	sd	a4,0(a5)
    heap_alignment    = alignment;
    80010d48:	00007797          	auipc	a5,0x7
    80010d4c:	2f878793          	addi	a5,a5,760 # 80018040 <heap_alignment>
    80010d50:	fb843703          	ld	a4,-72(s0)
    80010d54:	e398                	sd	a4,0(a5)
    heap_max_blocks   = heap_blocks;
    80010d56:	00007797          	auipc	a5,0x7
    80010d5a:	2f278793          	addi	a5,a5,754 # 80018048 <heap_max_blocks>
    80010d5e:	fc843703          	ld	a4,-56(s0)
    80010d62:	e398                	sd	a4,0(a5)

    heap->free        = NULL;
    80010d64:	00007797          	auipc	a5,0x7
    80010d68:	2c478793          	addi	a5,a5,708 # 80018028 <heap>
    80010d6c:	639c                	ld	a5,0(a5)
    80010d6e:	0007b023          	sd	zero,0(a5)
    heap->used        = NULL;
    80010d72:	00007797          	auipc	a5,0x7
    80010d76:	2b678793          	addi	a5,a5,694 # 80018028 <heap>
    80010d7a:	639c                	ld	a5,0(a5)
    80010d7c:	0007b423          	sd	zero,8(a5)
    heap->fresh       = (Block *)(heap + 1);
    80010d80:	00007797          	auipc	a5,0x7
    80010d84:	2a878793          	addi	a5,a5,680 # 80018028 <heap>
    80010d88:	6398                	ld	a4,0(a5)
    80010d8a:	00007797          	auipc	a5,0x7
    80010d8e:	29e78793          	addi	a5,a5,670 # 80018028 <heap>
    80010d92:	639c                	ld	a5,0(a5)
    80010d94:	02070713          	addi	a4,a4,32
    80010d98:	eb98                	sd	a4,16(a5)
    heap->top         = (size_t)(heap->fresh + heap_blocks);
    80010d9a:	00007797          	auipc	a5,0x7
    80010d9e:	28e78793          	addi	a5,a5,654 # 80018028 <heap>
    80010da2:	639c                	ld	a5,0(a5)
    80010da4:	6b94                	ld	a3,16(a5)
    80010da6:	fc843703          	ld	a4,-56(s0)
    80010daa:	87ba                	mv	a5,a4
    80010dac:	0786                	slli	a5,a5,0x1
    80010dae:	97ba                	add	a5,a5,a4
    80010db0:	078e                	slli	a5,a5,0x3
    80010db2:	00f68733          	add	a4,a3,a5
    80010db6:	00007797          	auipc	a5,0x7
    80010dba:	27278793          	addi	a5,a5,626 # 80018028 <heap>
    80010dbe:	639c                	ld	a5,0(a5)
    80010dc0:	ef98                	sd	a4,24(a5)

    Block *block      = heap->fresh;
    80010dc2:	00007797          	auipc	a5,0x7
    80010dc6:	26678793          	addi	a5,a5,614 # 80018028 <heap>
    80010dca:	639c                	ld	a5,0(a5)
    80010dcc:	6b9c                	ld	a5,16(a5)
    80010dce:	fef43423          	sd	a5,-24(s0)
    size_t i          = heap_max_blocks - 1;
    80010dd2:	00007797          	auipc	a5,0x7
    80010dd6:	27678793          	addi	a5,a5,630 # 80018048 <heap_max_blocks>
    80010dda:	639c                	ld	a5,0(a5)
    80010ddc:	17fd                	addi	a5,a5,-1
    80010dde:	fef43023          	sd	a5,-32(s0)
    while (i--) {
    80010de2:	a829                	j	80010dfc <init+0xf8>
        block->next = block + 1;
    80010de4:	fe843783          	ld	a5,-24(s0)
    80010de8:	01878713          	addi	a4,a5,24
    80010dec:	fe843783          	ld	a5,-24(s0)
    80010df0:	e798                	sd	a4,8(a5)
        block++;
    80010df2:	fe843783          	ld	a5,-24(s0)
    80010df6:	07e1                	addi	a5,a5,24
    80010df8:	fef43423          	sd	a5,-24(s0)
    while (i--) {
    80010dfc:	fe043783          	ld	a5,-32(s0)
    80010e00:	fff78713          	addi	a4,a5,-1
    80010e04:	fee43023          	sd	a4,-32(s0)
    80010e08:	fff1                	bnez	a5,80010de4 <init+0xe0>
    }
    block->next = NULL;
    80010e0a:	fe843783          	ld	a5,-24(s0)
    80010e0e:	0007b423          	sd	zero,8(a5)
    return true;
    80010e12:	4785                	li	a5,1
}
    80010e14:	853e                	mv	a0,a5
    80010e16:	6426                	ld	s0,72(sp)
    80010e18:	6161                	addi	sp,sp,80
    80010e1a:	8082                	ret

0000000080010e1c <free>:

static bool free(const void *free)
{
    80010e1c:	7179                	addi	sp,sp,-48
    80010e1e:	f406                	sd	ra,40(sp)
    80010e20:	f022                	sd	s0,32(sp)
    80010e22:	1800                	addi	s0,sp,48
    80010e24:	fca43c23          	sd	a0,-40(s0)
    Block *block = heap->used;
    80010e28:	00007797          	auipc	a5,0x7
    80010e2c:	20078793          	addi	a5,a5,512 # 80018028 <heap>
    80010e30:	639c                	ld	a5,0(a5)
    80010e32:	679c                	ld	a5,8(a5)
    80010e34:	fef43423          	sd	a5,-24(s0)
    Block *prev  = NULL;
    80010e38:	fe043023          	sd	zero,-32(s0)
    while (block != NULL) {
    80010e3c:	a8a1                	j	80010e94 <free+0x78>
        if (free == block->addr) {
    80010e3e:	fe843783          	ld	a5,-24(s0)
    80010e42:	639c                	ld	a5,0(a5)
    80010e44:	fd843703          	ld	a4,-40(s0)
    80010e48:	02f71d63          	bne	a4,a5,80010e82 <free+0x66>
            if (prev) {
    80010e4c:	fe043783          	ld	a5,-32(s0)
    80010e50:	cb81                	beqz	a5,80010e60 <free+0x44>
                prev->next = block->next;
    80010e52:	fe843783          	ld	a5,-24(s0)
    80010e56:	6798                	ld	a4,8(a5)
    80010e58:	fe043783          	ld	a5,-32(s0)
    80010e5c:	e798                	sd	a4,8(a5)
    80010e5e:	a811                	j	80010e72 <free+0x56>
            }
            else {
                heap->used = block->next;
    80010e60:	00007797          	auipc	a5,0x7
    80010e64:	1c878793          	addi	a5,a5,456 # 80018028 <heap>
    80010e68:	639c                	ld	a5,0(a5)
    80010e6a:	fe843703          	ld	a4,-24(s0)
    80010e6e:	6718                	ld	a4,8(a4)
    80010e70:	e798                	sd	a4,8(a5)
            }
            insert_block(block);
    80010e72:	fe843503          	ld	a0,-24(s0)
    80010e76:	ccdff0ef          	jal	ra,80010b42 <insert_block>
            compact();
    80010e7a:	db5ff0ef          	jal	ra,80010c2e <compact>
            return true;
    80010e7e:	4785                	li	a5,1
    80010e80:	a831                	j	80010e9c <free+0x80>
        }
        prev  = block;
    80010e82:	fe843783          	ld	a5,-24(s0)
    80010e86:	fef43023          	sd	a5,-32(s0)
        block = block->next;
    80010e8a:	fe843783          	ld	a5,-24(s0)
    80010e8e:	679c                	ld	a5,8(a5)
    80010e90:	fef43423          	sd	a5,-24(s0)
    while (block != NULL) {
    80010e94:	fe843783          	ld	a5,-24(s0)
    80010e98:	f3dd                	bnez	a5,80010e3e <free+0x22>
    }
    return false;
    80010e9a:	4781                	li	a5,0
}
    80010e9c:	853e                	mv	a0,a5
    80010e9e:	70a2                	ld	ra,40(sp)
    80010ea0:	7402                	ld	s0,32(sp)
    80010ea2:	6145                	addi	sp,sp,48
    80010ea4:	8082                	ret

0000000080010ea6 <alloc_block>:

static Block *alloc_block(size_t num)
{
    80010ea6:	711d                	addi	sp,sp,-96
    80010ea8:	ec86                	sd	ra,88(sp)
    80010eaa:	e8a2                	sd	s0,80(sp)
    80010eac:	1080                	addi	s0,sp,96
    80010eae:	faa43423          	sd	a0,-88(s0)
    Block *ptr  = heap->free;
    80010eb2:	00007797          	auipc	a5,0x7
    80010eb6:	17678793          	addi	a5,a5,374 # 80018028 <heap>
    80010eba:	639c                	ld	a5,0(a5)
    80010ebc:	639c                	ld	a5,0(a5)
    80010ebe:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80010ec2:	fe043023          	sd	zero,-32(s0)
    size_t top  = heap->top;
    80010ec6:	00007797          	auipc	a5,0x7
    80010eca:	16278793          	addi	a5,a5,354 # 80018028 <heap>
    80010ece:	639c                	ld	a5,0(a5)
    80010ed0:	6f9c                	ld	a5,24(a5)
    80010ed2:	fcf43c23          	sd	a5,-40(s0)
    num         = (num + heap_alignment - 1) & -heap_alignment;
    80010ed6:	00007797          	auipc	a5,0x7
    80010eda:	16a78793          	addi	a5,a5,362 # 80018040 <heap_alignment>
    80010ede:	6398                	ld	a4,0(a5)
    80010ee0:	fa843783          	ld	a5,-88(s0)
    80010ee4:	97ba                	add	a5,a5,a4
    80010ee6:	fff78713          	addi	a4,a5,-1
    80010eea:	00007797          	auipc	a5,0x7
    80010eee:	15678793          	addi	a5,a5,342 # 80018040 <heap_alignment>
    80010ef2:	639c                	ld	a5,0(a5)
    80010ef4:	40f007b3          	neg	a5,a5
    80010ef8:	8ff9                	and	a5,a5,a4
    80010efa:	faf43423          	sd	a5,-88(s0)
    while (ptr != NULL) {
    80010efe:	a2bd                	j	8001106c <alloc_block+0x1c6>
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80010f00:	fe843783          	ld	a5,-24(s0)
    80010f04:	639c                	ld	a5,0(a5)
    80010f06:	873e                	mv	a4,a5
    80010f08:	fe843783          	ld	a5,-24(s0)
    80010f0c:	6b9c                	ld	a5,16(a5)
    80010f0e:	97ba                	add	a5,a5,a4
    80010f10:	fd843703          	ld	a4,-40(s0)
    80010f14:	02e7e263          	bltu	a5,a4,80010f38 <alloc_block+0x92>
                           ((size_t)ptr->addr + num <= (size_t)heap_limit);
    80010f18:	fe843783          	ld	a5,-24(s0)
    80010f1c:	639c                	ld	a5,0(a5)
    80010f1e:	873e                	mv	a4,a5
    80010f20:	fa843783          	ld	a5,-88(s0)
    80010f24:	97ba                	add	a5,a5,a4
    80010f26:	00007717          	auipc	a4,0x7
    80010f2a:	10a70713          	addi	a4,a4,266 # 80018030 <heap_limit>
    80010f2e:	6318                	ld	a4,0(a4)
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80010f30:	00f76463          	bltu	a4,a5,80010f38 <alloc_block+0x92>
    80010f34:	4785                	li	a5,1
    80010f36:	a011                	j	80010f3a <alloc_block+0x94>
    80010f38:	4781                	li	a5,0
    80010f3a:	fcf42623          	sw	a5,-52(s0)
        if (is_top || ptr->size >= num) {
    80010f3e:	fcc42783          	lw	a5,-52(s0)
    80010f42:	2781                	sext.w	a5,a5
    80010f44:	eb81                	bnez	a5,80010f54 <alloc_block+0xae>
    80010f46:	fe843783          	ld	a5,-24(s0)
    80010f4a:	6b9c                	ld	a5,16(a5)
    80010f4c:	fa843703          	ld	a4,-88(s0)
    80010f50:	10e7e563          	bltu	a5,a4,8001105a <alloc_block+0x1b4>
            if (prev != NULL) {
    80010f54:	fe043783          	ld	a5,-32(s0)
    80010f58:	cb81                	beqz	a5,80010f68 <alloc_block+0xc2>
                prev->next = ptr->next;
    80010f5a:	fe843783          	ld	a5,-24(s0)
    80010f5e:	6798                	ld	a4,8(a5)
    80010f60:	fe043783          	ld	a5,-32(s0)
    80010f64:	e798                	sd	a4,8(a5)
    80010f66:	a811                	j	80010f7a <alloc_block+0xd4>
            }
            else {
                heap->free = ptr->next;
    80010f68:	00007797          	auipc	a5,0x7
    80010f6c:	0c078793          	addi	a5,a5,192 # 80018028 <heap>
    80010f70:	639c                	ld	a5,0(a5)
    80010f72:	fe843703          	ld	a4,-24(s0)
    80010f76:	6718                	ld	a4,8(a4)
    80010f78:	e398                	sd	a4,0(a5)
            }
            ptr->next  = heap->used;
    80010f7a:	00007797          	auipc	a5,0x7
    80010f7e:	0ae78793          	addi	a5,a5,174 # 80018028 <heap>
    80010f82:	639c                	ld	a5,0(a5)
    80010f84:	6798                	ld	a4,8(a5)
    80010f86:	fe843783          	ld	a5,-24(s0)
    80010f8a:	e798                	sd	a4,8(a5)
            heap->used = ptr;
    80010f8c:	00007797          	auipc	a5,0x7
    80010f90:	09c78793          	addi	a5,a5,156 # 80018028 <heap>
    80010f94:	639c                	ld	a5,0(a5)
    80010f96:	fe843703          	ld	a4,-24(s0)
    80010f9a:	e798                	sd	a4,8(a5)
            if (is_top) {
    80010f9c:	fcc42783          	lw	a5,-52(s0)
    80010fa0:	2781                	sext.w	a5,a5
    80010fa2:	c785                	beqz	a5,80010fca <alloc_block+0x124>
                ptr->size = num;
    80010fa4:	fe843783          	ld	a5,-24(s0)
    80010fa8:	fa843703          	ld	a4,-88(s0)
    80010fac:	eb98                	sd	a4,16(a5)
                heap->top = (size_t)ptr->addr + num;
    80010fae:	fe843783          	ld	a5,-24(s0)
    80010fb2:	639c                	ld	a5,0(a5)
    80010fb4:	86be                	mv	a3,a5
    80010fb6:	00007797          	auipc	a5,0x7
    80010fba:	07278793          	addi	a5,a5,114 # 80018028 <heap>
    80010fbe:	639c                	ld	a5,0(a5)
    80010fc0:	fa843703          	ld	a4,-88(s0)
    80010fc4:	9736                	add	a4,a4,a3
    80010fc6:	ef98                	sd	a4,24(a5)
    80010fc8:	a071                	j	80011054 <alloc_block+0x1ae>
            }
            else if (heap->fresh != NULL) {
    80010fca:	00007797          	auipc	a5,0x7
    80010fce:	05e78793          	addi	a5,a5,94 # 80018028 <heap>
    80010fd2:	639c                	ld	a5,0(a5)
    80010fd4:	6b9c                	ld	a5,16(a5)
    80010fd6:	cfbd                	beqz	a5,80011054 <alloc_block+0x1ae>
                size_t excess = ptr->size - num;
    80010fd8:	fe843783          	ld	a5,-24(s0)
    80010fdc:	6b98                	ld	a4,16(a5)
    80010fde:	fa843783          	ld	a5,-88(s0)
    80010fe2:	40f707b3          	sub	a5,a4,a5
    80010fe6:	fcf43023          	sd	a5,-64(s0)
                if (excess >= heap_split_thresh) {
    80010fea:	00007797          	auipc	a5,0x7
    80010fee:	04e78793          	addi	a5,a5,78 # 80018038 <heap_split_thresh>
    80010ff2:	639c                	ld	a5,0(a5)
    80010ff4:	fc043703          	ld	a4,-64(s0)
    80010ff8:	04f76e63          	bltu	a4,a5,80011054 <alloc_block+0x1ae>
                    ptr->size    = num;
    80010ffc:	fe843783          	ld	a5,-24(s0)
    80011000:	fa843703          	ld	a4,-88(s0)
    80011004:	eb98                	sd	a4,16(a5)
                    Block *split = heap->fresh;
    80011006:	00007797          	auipc	a5,0x7
    8001100a:	02278793          	addi	a5,a5,34 # 80018028 <heap>
    8001100e:	639c                	ld	a5,0(a5)
    80011010:	6b9c                	ld	a5,16(a5)
    80011012:	faf43c23          	sd	a5,-72(s0)
                    heap->fresh  = split->next;
    80011016:	00007797          	auipc	a5,0x7
    8001101a:	01278793          	addi	a5,a5,18 # 80018028 <heap>
    8001101e:	639c                	ld	a5,0(a5)
    80011020:	fb843703          	ld	a4,-72(s0)
    80011024:	6718                	ld	a4,8(a4)
    80011026:	eb98                	sd	a4,16(a5)
                    split->addr  = (void *)((size_t)ptr->addr + num);
    80011028:	fe843783          	ld	a5,-24(s0)
    8001102c:	639c                	ld	a5,0(a5)
    8001102e:	873e                	mv	a4,a5
    80011030:	fa843783          	ld	a5,-88(s0)
    80011034:	97ba                	add	a5,a5,a4
    80011036:	873e                	mv	a4,a5
    80011038:	fb843783          	ld	a5,-72(s0)
    8001103c:	e398                	sd	a4,0(a5)
                    split->size  = excess;
    8001103e:	fb843783          	ld	a5,-72(s0)
    80011042:	fc043703          	ld	a4,-64(s0)
    80011046:	eb98                	sd	a4,16(a5)
                    insert_block(split);
    80011048:	fb843503          	ld	a0,-72(s0)
    8001104c:	af7ff0ef          	jal	ra,80010b42 <insert_block>
                    compact();
    80011050:	bdfff0ef          	jal	ra,80010c2e <compact>
                }
            }
            return ptr;
    80011054:	fe843783          	ld	a5,-24(s0)
    80011058:	a875                	j	80011114 <alloc_block+0x26e>
        }
        prev = ptr;
    8001105a:	fe843783          	ld	a5,-24(s0)
    8001105e:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    80011062:	fe843783          	ld	a5,-24(s0)
    80011066:	679c                	ld	a5,8(a5)
    80011068:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    8001106c:	fe843783          	ld	a5,-24(s0)
    80011070:	e80798e3          	bnez	a5,80010f00 <alloc_block+0x5a>
    }
    // no matching free blocks
    // see if any other blocks available
    size_t new_top = top + num;
    80011074:	fd843703          	ld	a4,-40(s0)
    80011078:	fa843783          	ld	a5,-88(s0)
    8001107c:	97ba                	add	a5,a5,a4
    8001107e:	fcf43823          	sd	a5,-48(s0)
    if (heap->fresh != NULL && new_top <= (size_t)heap_limit) {
    80011082:	00007797          	auipc	a5,0x7
    80011086:	fa678793          	addi	a5,a5,-90 # 80018028 <heap>
    8001108a:	639c                	ld	a5,0(a5)
    8001108c:	6b9c                	ld	a5,16(a5)
    8001108e:	c3d1                	beqz	a5,80011112 <alloc_block+0x26c>
    80011090:	00007797          	auipc	a5,0x7
    80011094:	fa078793          	addi	a5,a5,-96 # 80018030 <heap_limit>
    80011098:	639c                	ld	a5,0(a5)
    8001109a:	873e                	mv	a4,a5
    8001109c:	fd043783          	ld	a5,-48(s0)
    800110a0:	06f76963          	bltu	a4,a5,80011112 <alloc_block+0x26c>
        ptr         = heap->fresh;
    800110a4:	00007797          	auipc	a5,0x7
    800110a8:	f8478793          	addi	a5,a5,-124 # 80018028 <heap>
    800110ac:	639c                	ld	a5,0(a5)
    800110ae:	6b9c                	ld	a5,16(a5)
    800110b0:	fef43423          	sd	a5,-24(s0)
        heap->fresh = ptr->next;
    800110b4:	00007797          	auipc	a5,0x7
    800110b8:	f7478793          	addi	a5,a5,-140 # 80018028 <heap>
    800110bc:	639c                	ld	a5,0(a5)
    800110be:	fe843703          	ld	a4,-24(s0)
    800110c2:	6718                	ld	a4,8(a4)
    800110c4:	eb98                	sd	a4,16(a5)
        ptr->addr   = (void *)top;
    800110c6:	fd843703          	ld	a4,-40(s0)
    800110ca:	fe843783          	ld	a5,-24(s0)
    800110ce:	e398                	sd	a4,0(a5)
        ptr->next   = heap->used;
    800110d0:	00007797          	auipc	a5,0x7
    800110d4:	f5878793          	addi	a5,a5,-168 # 80018028 <heap>
    800110d8:	639c                	ld	a5,0(a5)
    800110da:	6798                	ld	a4,8(a5)
    800110dc:	fe843783          	ld	a5,-24(s0)
    800110e0:	e798                	sd	a4,8(a5)
        ptr->size   = num;
    800110e2:	fe843783          	ld	a5,-24(s0)
    800110e6:	fa843703          	ld	a4,-88(s0)
    800110ea:	eb98                	sd	a4,16(a5)
        heap->used  = ptr;
    800110ec:	00007797          	auipc	a5,0x7
    800110f0:	f3c78793          	addi	a5,a5,-196 # 80018028 <heap>
    800110f4:	639c                	ld	a5,0(a5)
    800110f6:	fe843703          	ld	a4,-24(s0)
    800110fa:	e798                	sd	a4,8(a5)
        heap->top   = new_top;
    800110fc:	00007797          	auipc	a5,0x7
    80011100:	f2c78793          	addi	a5,a5,-212 # 80018028 <heap>
    80011104:	639c                	ld	a5,0(a5)
    80011106:	fd043703          	ld	a4,-48(s0)
    8001110a:	ef98                	sd	a4,24(a5)
        return ptr;
    8001110c:	fe843783          	ld	a5,-24(s0)
    80011110:	a011                	j	80011114 <alloc_block+0x26e>
    }
    return NULL;
    80011112:	4781                	li	a5,0
}
    80011114:	853e                	mv	a0,a5
    80011116:	60e6                	ld	ra,88(sp)
    80011118:	6446                	ld	s0,80(sp)
    8001111a:	6125                	addi	sp,sp,96
    8001111c:	8082                	ret

000000008001111e <alloc>:

static void *alloc(size_t num)
{
    8001111e:	7179                	addi	sp,sp,-48
    80011120:	f406                	sd	ra,40(sp)
    80011122:	f022                	sd	s0,32(sp)
    80011124:	1800                	addi	s0,sp,48
    80011126:	fca43c23          	sd	a0,-40(s0)
    Block *block = alloc_block(num);
    8001112a:	fd843503          	ld	a0,-40(s0)
    8001112e:	d79ff0ef          	jal	ra,80010ea6 <alloc_block>
    80011132:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    80011136:	fe843783          	ld	a5,-24(s0)
    8001113a:	c789                	beqz	a5,80011144 <alloc+0x26>
        return block->addr;
    8001113c:	fe843783          	ld	a5,-24(s0)
    80011140:	639c                	ld	a5,0(a5)
    80011142:	a011                	j	80011146 <alloc+0x28>
    }
    return NULL;
    80011144:	4781                	li	a5,0
}
    80011146:	853e                	mv	a0,a5
    80011148:	70a2                	ld	ra,40(sp)
    8001114a:	7402                	ld	s0,32(sp)
    8001114c:	6145                	addi	sp,sp,48
    8001114e:	8082                	ret

0000000080011150 <calloc>:

static void *calloc(size_t num, size_t size)
{
    80011150:	7179                	addi	sp,sp,-48
    80011152:	f406                	sd	ra,40(sp)
    80011154:	f022                	sd	s0,32(sp)
    80011156:	1800                	addi	s0,sp,48
    80011158:	fca43c23          	sd	a0,-40(s0)
    8001115c:	fcb43823          	sd	a1,-48(s0)
    num *= size;
    80011160:	fd843703          	ld	a4,-40(s0)
    80011164:	fd043783          	ld	a5,-48(s0)
    80011168:	02f707b3          	mul	a5,a4,a5
    8001116c:	fcf43c23          	sd	a5,-40(s0)
    Block *block = alloc_block(num);
    80011170:	fd843503          	ld	a0,-40(s0)
    80011174:	d33ff0ef          	jal	ra,80010ea6 <alloc_block>
    80011178:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    8001117c:	fe843783          	ld	a5,-24(s0)
    80011180:	c385                	beqz	a5,800111a0 <calloc+0x50>
        memset(block->addr, 0, num);
    80011182:	fe843783          	ld	a5,-24(s0)
    80011186:	639c                	ld	a5,0(a5)
    80011188:	fd843703          	ld	a4,-40(s0)
    8001118c:	2701                	sext.w	a4,a4
    8001118e:	863a                	mv	a2,a4
    80011190:	4581                	li	a1,0
    80011192:	853e                	mv	a0,a5
    80011194:	0de040ef          	jal	ra,80015272 <memset>
        return block->addr;
    80011198:	fe843783          	ld	a5,-24(s0)
    8001119c:	639c                	ld	a5,0(a5)
    8001119e:	a011                	j	800111a2 <calloc+0x52>
    }
    return NULL;
    800111a0:	4781                	li	a5,0
}
    800111a2:	853e                	mv	a0,a5
    800111a4:	70a2                	ld	ra,40(sp)
    800111a6:	7402                	ld	s0,32(sp)
    800111a8:	6145                	addi	sp,sp,48
    800111aa:	8082                	ret

00000000800111ac <count_blocks>:

static size_t count_blocks(Block *ptr)
{
    800111ac:	7179                	addi	sp,sp,-48
    800111ae:	f422                	sd	s0,40(sp)
    800111b0:	1800                	addi	s0,sp,48
    800111b2:	fca43c23          	sd	a0,-40(s0)
    size_t num = 0;
    800111b6:	fe043423          	sd	zero,-24(s0)
    while (ptr != NULL) {
    800111ba:	a819                	j	800111d0 <count_blocks+0x24>
        num++;
    800111bc:	fe843783          	ld	a5,-24(s0)
    800111c0:	0785                	addi	a5,a5,1
    800111c2:	fef43423          	sd	a5,-24(s0)
        ptr = ptr->next;
    800111c6:	fd843783          	ld	a5,-40(s0)
    800111ca:	679c                	ld	a5,8(a5)
    800111cc:	fcf43c23          	sd	a5,-40(s0)
    while (ptr != NULL) {
    800111d0:	fd843783          	ld	a5,-40(s0)
    800111d4:	f7e5                	bnez	a5,800111bc <count_blocks+0x10>
    }
    return num;
    800111d6:	fe843783          	ld	a5,-24(s0)
}
    800111da:	853e                	mv	a0,a5
    800111dc:	7422                	ld	s0,40(sp)
    800111de:	6145                	addi	sp,sp,48
    800111e0:	8082                	ret

00000000800111e2 <heap_num_free>:
static size_t heap_num_free()
{
    800111e2:	1141                	addi	sp,sp,-16
    800111e4:	e406                	sd	ra,8(sp)
    800111e6:	e022                	sd	s0,0(sp)
    800111e8:	0800                	addi	s0,sp,16
    return count_blocks(heap->free);
    800111ea:	00007797          	auipc	a5,0x7
    800111ee:	e3e78793          	addi	a5,a5,-450 # 80018028 <heap>
    800111f2:	639c                	ld	a5,0(a5)
    800111f4:	639c                	ld	a5,0(a5)
    800111f6:	853e                	mv	a0,a5
    800111f8:	fb5ff0ef          	jal	ra,800111ac <count_blocks>
    800111fc:	87aa                	mv	a5,a0
}
    800111fe:	853e                	mv	a0,a5
    80011200:	60a2                	ld	ra,8(sp)
    80011202:	6402                	ld	s0,0(sp)
    80011204:	0141                	addi	sp,sp,16
    80011206:	8082                	ret

0000000080011208 <heap_num_used>:
static size_t heap_num_used()
{
    80011208:	1141                	addi	sp,sp,-16
    8001120a:	e406                	sd	ra,8(sp)
    8001120c:	e022                	sd	s0,0(sp)
    8001120e:	0800                	addi	s0,sp,16
    return count_blocks(heap->used);
    80011210:	00007797          	auipc	a5,0x7
    80011214:	e1878793          	addi	a5,a5,-488 # 80018028 <heap>
    80011218:	639c                	ld	a5,0(a5)
    8001121a:	679c                	ld	a5,8(a5)
    8001121c:	853e                	mv	a0,a5
    8001121e:	f8fff0ef          	jal	ra,800111ac <count_blocks>
    80011222:	87aa                	mv	a5,a0
}
    80011224:	853e                	mv	a0,a5
    80011226:	60a2                	ld	ra,8(sp)
    80011228:	6402                	ld	s0,0(sp)
    8001122a:	0141                	addi	sp,sp,16
    8001122c:	8082                	ret

000000008001122e <heap_num_fresh>:
static size_t heap_num_fresh()
{
    8001122e:	1141                	addi	sp,sp,-16
    80011230:	e406                	sd	ra,8(sp)
    80011232:	e022                	sd	s0,0(sp)
    80011234:	0800                	addi	s0,sp,16
    return count_blocks(heap->fresh);
    80011236:	00007797          	auipc	a5,0x7
    8001123a:	df278793          	addi	a5,a5,-526 # 80018028 <heap>
    8001123e:	639c                	ld	a5,0(a5)
    80011240:	6b9c                	ld	a5,16(a5)
    80011242:	853e                	mv	a0,a5
    80011244:	f69ff0ef          	jal	ra,800111ac <count_blocks>
    80011248:	87aa                	mv	a5,a0
}
    8001124a:	853e                	mv	a0,a5
    8001124c:	60a2                	ld	ra,8(sp)
    8001124e:	6402                	ld	s0,0(sp)
    80011250:	0141                	addi	sp,sp,16
    80011252:	8082                	ret

0000000080011254 <heap_check>:
static bool heap_check()
{
    80011254:	1101                	addi	sp,sp,-32
    80011256:	ec06                	sd	ra,24(sp)
    80011258:	e822                	sd	s0,16(sp)
    8001125a:	e426                	sd	s1,8(sp)
    8001125c:	1000                	addi	s0,sp,32
    return heap_max_blocks == heap_num_free() + heap_num_used() + heap_num_fresh();
    8001125e:	f85ff0ef          	jal	ra,800111e2 <heap_num_free>
    80011262:	84aa                	mv	s1,a0
    80011264:	fa5ff0ef          	jal	ra,80011208 <heap_num_used>
    80011268:	87aa                	mv	a5,a0
    8001126a:	94be                	add	s1,s1,a5
    8001126c:	fc3ff0ef          	jal	ra,8001122e <heap_num_fresh>
    80011270:	87aa                	mv	a5,a0
    80011272:	00f48733          	add	a4,s1,a5
    80011276:	00007797          	auipc	a5,0x7
    8001127a:	dd278793          	addi	a5,a5,-558 # 80018048 <heap_max_blocks>
    8001127e:	639c                	ld	a5,0(a5)
    80011280:	40f707b3          	sub	a5,a4,a5
    80011284:	0017b793          	seqz	a5,a5
    80011288:	0ff7f793          	andi	a5,a5,255
}
    8001128c:	853e                	mv	a0,a5
    8001128e:	60e2                	ld	ra,24(sp)
    80011290:	6442                	ld	s0,16(sp)
    80011292:	64a2                	ld	s1,8(sp)
    80011294:	6105                	addi	sp,sp,32
    80011296:	8082                	ret

0000000080011298 <heap_print_stats>:

void heap_print_stats(void)
{
    80011298:	7179                	addi	sp,sp,-48
    8001129a:	f406                	sd	ra,40(sp)
    8001129c:	f022                	sd	s0,32(sp)
    8001129e:	ec26                	sd	s1,24(sp)
    800112a0:	e84a                	sd	s2,16(sp)
    800112a2:	e44e                	sd	s3,8(sp)
    800112a4:	1800                	addi	s0,sp,48
    debugf(
    800112a6:	f3dff0ef          	jal	ra,800111e2 <heap_num_free>
    800112aa:	84aa                	mv	s1,a0
    800112ac:	f5dff0ef          	jal	ra,80011208 <heap_num_used>
    800112b0:	892a                	mv	s2,a0
    800112b2:	f7dff0ef          	jal	ra,8001122e <heap_num_fresh>
    800112b6:	89aa                	mv	s3,a0
        "HEAP\n~~~~\nFree blocks:    %lu\nUsed blocks:    %lu\nFresh blocks:   %lu\nHeap "
        "check:     %s\n",
        heap_num_free(), heap_num_used(), heap_num_fresh(), heap_check() ? "good" : "bad");
    800112b8:	f9dff0ef          	jal	ra,80011254 <heap_check>
    800112bc:	87aa                	mv	a5,a0
    debugf(
    800112be:	c791                	beqz	a5,800112ca <heap_print_stats+0x32>
    800112c0:	00008797          	auipc	a5,0x8
    800112c4:	fc078793          	addi	a5,a5,-64 # 80019280 <SYSCALLS+0x280>
    800112c8:	a029                	j	800112d2 <heap_print_stats+0x3a>
    800112ca:	00008797          	auipc	a5,0x8
    800112ce:	fbe78793          	addi	a5,a5,-66 # 80019288 <SYSCALLS+0x288>
    800112d2:	873e                	mv	a4,a5
    800112d4:	86ce                	mv	a3,s3
    800112d6:	864a                	mv	a2,s2
    800112d8:	85a6                	mv	a1,s1
    800112da:	00008517          	auipc	a0,0x8
    800112de:	fb650513          	addi	a0,a0,-74 # 80019290 <SYSCALLS+0x290>
    800112e2:	33f000ef          	jal	ra,80011e20 <debugf>
}
    800112e6:	0001                	nop
    800112e8:	70a2                	ld	ra,40(sp)
    800112ea:	7402                	ld	s0,32(sp)
    800112ec:	64e2                	ld	s1,24(sp)
    800112ee:	6942                	ld	s2,16(sp)
    800112f0:	69a2                	ld	s3,8(sp)
    800112f2:	6145                	addi	sp,sp,48
    800112f4:	8082                	ret

00000000800112f6 <kmalloc>:
void *kmalloc(size_t sz)
{
    800112f6:	1101                	addi	sp,sp,-32
    800112f8:	ec06                	sd	ra,24(sp)
    800112fa:	e822                	sd	s0,16(sp)
    800112fc:	1000                	addi	s0,sp,32
    800112fe:	fea43423          	sd	a0,-24(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kmalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
    return alloc(sz);
    80011302:	fe843503          	ld	a0,-24(s0)
    80011306:	e19ff0ef          	jal	ra,8001111e <alloc>
    8001130a:	87aa                	mv	a5,a0
}
    8001130c:	853e                	mv	a0,a5
    8001130e:	60e2                	ld	ra,24(sp)
    80011310:	6442                	ld	s0,16(sp)
    80011312:	6105                	addi	sp,sp,32
    80011314:	8082                	ret

0000000080011316 <kcalloc>:
void *kcalloc(size_t n, size_t sz)
{
    80011316:	1101                	addi	sp,sp,-32
    80011318:	ec06                	sd	ra,24(sp)
    8001131a:	e822                	sd	s0,16(sp)
    8001131c:	1000                	addi	s0,sp,32
    8001131e:	fea43423          	sd	a0,-24(s0)
    80011322:	feb43023          	sd	a1,-32(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kcalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
    return calloc(n, sz);
    80011326:	fe043583          	ld	a1,-32(s0)
    8001132a:	fe843503          	ld	a0,-24(s0)
    8001132e:	e23ff0ef          	jal	ra,80011150 <calloc>
    80011332:	87aa                	mv	a5,a0
}
    80011334:	853e                	mv	a0,a5
    80011336:	60e2                	ld	ra,24(sp)
    80011338:	6442                	ld	s0,16(sp)
    8001133a:	6105                	addi	sp,sp,32
    8001133c:	8082                	ret

000000008001133e <kfree>:
void kfree(void *m)
{
    8001133e:	1101                	addi	sp,sp,-32
    80011340:	ec06                	sd	ra,24(sp)
    80011342:	e822                	sd	s0,16(sp)
    80011344:	1000                	addi	s0,sp,32
    80011346:	fea43423          	sd	a0,-24(s0)
    if (m != NULL) {
    8001134a:	fe843783          	ld	a5,-24(s0)
    8001134e:	c789                	beqz	a5,80011358 <kfree+0x1a>
        free(m);
    80011350:	fe843503          	ld	a0,-24(s0)
    80011354:	ac9ff0ef          	jal	ra,80010e1c <free>
    }
#ifdef DEBUG_KMALLOC
    debugf("[kfree]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
}
    80011358:	0001                	nop
    8001135a:	60e2                	ld	ra,24(sp)
    8001135c:	6442                	ld	s0,16(sp)
    8001135e:	6105                	addi	sp,sp,32
    80011360:	8082                	ret

0000000080011362 <heap_init>:

void heap_init(void)
{
    80011362:	1101                	addi	sp,sp,-32
    80011364:	ec06                	sd	ra,24(sp)
    80011366:	e822                	sd	s0,16(sp)
    80011368:	1000                	addi	s0,sp,32
#ifdef DEBUG_HEAP
    debugf("[heap_init]: Prior to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
           page_count_free());
#endif
    void *start = page_znalloc(KERNEL_HEAP_PAGES);
    8001136a:	6505                	lui	a0,0x1
    8001136c:	68a010ef          	jal	ra,800129f6 <page_znalloc>
    80011370:	fea43423          	sd	a0,-24(s0)
    debugf("[heap_init]: Heap start at 0x%08lx\n", start);
    debugf("[heap_init]: After to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
           page_count_free());
#endif

    mmu_map_range(kernel_mmu_table, KERNEL_HEAP_START_VADDR, KERNEL_HEAP_END_VADDR, (uint64_t)start,
    80011374:	00007797          	auipc	a5,0x7
    80011378:	c8c78793          	addi	a5,a5,-884 # 80018000 <kernel_mmu_table>
    8001137c:	6388                	ld	a0,0(a5)
    8001137e:	fe843683          	ld	a3,-24(s0)
    80011382:	4799                	li	a5,6
    80011384:	4701                	li	a4,0
    80011386:	00e08637          	lui	a2,0xe08
    8001138a:	7f760613          	addi	a2,a2,2039 # e087f7 <i+0xe087d7>
    8001138e:	0636                	slli	a2,a2,0xd
    80011390:	00e085b7          	lui	a1,0xe08
    80011394:	15dd                	addi	a1,a1,-9
    80011396:	05b6                	slli	a1,a1,0xd
    80011398:	cf8ff0ef          	jal	ra,80010890 <mmu_map_range>
                  MMU_LEVEL_4K, PB_READ | PB_WRITE);
    init((void *)KERNEL_HEAP_START_VADDR, (void *)KERNEL_HEAP_END_VADDR, KERNEL_HEAP_PAGES / 4, 16,
    8001139c:	4721                	li	a4,8
    8001139e:	46c1                	li	a3,16
    800113a0:	40000613          	li	a2,1024
    800113a4:	00e087b7          	lui	a5,0xe08
    800113a8:	7f778793          	addi	a5,a5,2039 # e087f7 <i+0xe087d7>
    800113ac:	00d79593          	slli	a1,a5,0xd
    800113b0:	00e087b7          	lui	a5,0xe08
    800113b4:	17dd                	addi	a5,a5,-9
    800113b6:	00d79513          	slli	a0,a5,0xd
    800113ba:	94bff0ef          	jal	ra,80010d04 <init>
         8);

}
    800113be:	0001                	nop
    800113c0:	60e2                	ld	ra,24(sp)
    800113c2:	6442                	ld	s0,16(sp)
    800113c4:	6105                	addi	sp,sp,32
    800113c6:	8082                	ret

00000000800113c8 <init_systems>:
// the kernel.
// Defined in src/include/mmu.h
struct page_table *kernel_mmu_table;

static void init_systems(void)
{
    800113c8:	1141                	addi	sp,sp,-16
    800113ca:	e406                	sd	ra,8(sp)
    800113cc:	e022                	sd	s0,0(sp)
    800113ce:	0800                	addi	s0,sp,16
    void plic_init(void);
    plic_init();
    800113d0:	7ed000ef          	jal	ra,800123bc <plic_init>
    void page_init(void);
    page_init();
    800113d4:	2be010ef          	jal	ra,80012692 <page_init>
    pci_init();
#endif
#ifdef USE_VIRTIO
    virtio_init();
#endif
}
    800113d8:	0001                	nop
    800113da:	60a2                	ld	ra,8(sp)
    800113dc:	6402                	ld	s0,0(sp)
    800113de:	0141                	addi	sp,sp,16
    800113e0:	8082                	ret

00000000800113e2 <main>:
static const char *hart_status_values[] = {"NOT PRESENT", "STOPPED", "STARTING", "RUNNING"};
#ifdef RUN_INTERNAL_CONSOLE
static void console(void);
#endif
void main(unsigned int hart)
{
    800113e2:	7179                	addi	sp,sp,-48
    800113e4:	f406                	sd	ra,40(sp)
    800113e6:	f022                	sd	s0,32(sp)
    800113e8:	1800                	addi	s0,sp,48
    800113ea:	87aa                	mv	a5,a0
    800113ec:	fcf42e23          	sw	a5,-36(s0)
    // Initialize the page allocator
    // Allocate and zero the kernel's page table.

    // Kind of neat to see our memory mappings to ensure they make sense.
    logf(LOG_INFO, "[[ MEMORY MAPPINGS ]]\n");
    800113f0:	00008597          	auipc	a1,0x8
    800113f4:	f3058593          	addi	a1,a1,-208 # 80019320 <SYSCALLS+0x320>
    800113f8:	4511                	li	a0,4
    800113fa:	1c9000ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  [TEXT]  : 0x%08lx -> 0x%08lx\n", sym_start(text), sym_end(text));
    800113fe:	fffff797          	auipc	a5,0xfffff
    80011402:	c0278793          	addi	a5,a5,-1022 # 80010000 <_memory_start>
    80011406:	00005717          	auipc	a4,0x5
    8001140a:	4ac70713          	addi	a4,a4,1196 # 800168b2 <_text_end>
    8001140e:	86ba                	mv	a3,a4
    80011410:	863e                	mv	a2,a5
    80011412:	00008597          	auipc	a1,0x8
    80011416:	f2658593          	addi	a1,a1,-218 # 80019338 <SYSCALLS+0x338>
    8001141a:	4511                	li	a0,4
    8001141c:	1a7000ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  [BSS]   : 0x%08lx -> 0x%08lx\n", sym_start(bss), sym_end(bss));
    80011420:	00007797          	auipc	a5,0x7
    80011424:	be078793          	addi	a5,a5,-1056 # 80018000 <kernel_mmu_table>
    80011428:	00007717          	auipc	a4,0x7
    8001142c:	c3070713          	addi	a4,a4,-976 # 80018058 <_bss_end>
    80011430:	86ba                	mv	a3,a4
    80011432:	863e                	mv	a2,a5
    80011434:	00008597          	auipc	a1,0x8
    80011438:	f2458593          	addi	a1,a1,-220 # 80019358 <SYSCALLS+0x358>
    8001143c:	4511                	li	a0,4
    8001143e:	185000ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  [RODATA]: 0x%08lx -> 0x%08lx\n", sym_start(rodata), sym_end(rodata));
    80011442:	00008797          	auipc	a5,0x8
    80011446:	bbe78793          	addi	a5,a5,-1090 # 80019000 <SYSCALLS>
    8001144a:	00009717          	auipc	a4,0x9
    8001144e:	02e70713          	addi	a4,a4,46 # 8001a478 <NUM_SYSCALLS>
    80011452:	86ba                	mv	a3,a4
    80011454:	863e                	mv	a2,a5
    80011456:	00008597          	auipc	a1,0x8
    8001145a:	f2258593          	addi	a1,a1,-222 # 80019378 <SYSCALLS+0x378>
    8001145e:	4511                	li	a0,4
    80011460:	163000ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  [DATA]  : 0x%08lx -> 0x%08lx\n", sym_start(data), sym_end(data));
    80011464:	0000a797          	auipc	a5,0xa
    80011468:	b9c78793          	addi	a5,a5,-1124 # 8001b000 <k_log_level>
    8001146c:	0000a717          	auipc	a4,0xa
    80011470:	bbc70713          	addi	a4,a4,-1092 # 8001b028 <_data_end>
    80011474:	86ba                	mv	a3,a4
    80011476:	863e                	mv	a2,a5
    80011478:	00008597          	auipc	a1,0x8
    8001147c:	f2058593          	addi	a1,a1,-224 # 80019398 <SYSCALLS+0x398>
    80011480:	4511                	li	a0,4
    80011482:	141000ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  [STACK] : 0x%08lx -> 0x%08lx\n", sym_start(stack), sym_end(stack));
    80011486:	0000b797          	auipc	a5,0xb
    8001148a:	b7a78793          	addi	a5,a5,-1158 # 8001c000 <_stack_start>
    8001148e:	00013717          	auipc	a4,0x13
    80011492:	b7270713          	addi	a4,a4,-1166 # 80024000 <_heap_start>
    80011496:	86ba                	mv	a3,a4
    80011498:	863e                	mv	a2,a5
    8001149a:	00008597          	auipc	a1,0x8
    8001149e:	f1e58593          	addi	a1,a1,-226 # 800193b8 <SYSCALLS+0x3b8>
    800114a2:	4511                	li	a0,4
    800114a4:	11f000ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  [HEAP]  : 0x%08lx -> 0x%08lx\n", sym_start(heap), sym_end(heap));
    800114a8:	00013797          	auipc	a5,0x13
    800114ac:	b5878793          	addi	a5,a5,-1192 # 80024000 <_heap_start>
    800114b0:	07fff717          	auipc	a4,0x7fff
    800114b4:	b5070713          	addi	a4,a4,-1200 # 88010000 <_heap_end>
    800114b8:	86ba                	mv	a3,a4
    800114ba:	863e                	mv	a2,a5
    800114bc:	00008597          	auipc	a1,0x8
    800114c0:	f1c58593          	addi	a1,a1,-228 # 800193d8 <SYSCALLS+0x3d8>
    800114c4:	4511                	li	a0,4
    800114c6:	0fd000ef          	jal	ra,80011dc2 <logf>

    logf(LOG_INFO, "[[ HART MAPPINGS ]]\n");
    800114ca:	00008597          	auipc	a1,0x8
    800114ce:	f2e58593          	addi	a1,a1,-210 # 800193f8 <SYSCALLS+0x3f8>
    800114d2:	4511                	li	a0,4
    800114d4:	0ef000ef          	jal	ra,80011dc2 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    800114d8:	fe042623          	sw	zero,-20(s0)
    800114dc:	a8bd                	j	8001155a <main+0x178>
        if (i == hart) {
    800114de:	fec42703          	lw	a4,-20(s0)
    800114e2:	fdc42783          	lw	a5,-36(s0)
    800114e6:	2701                	sext.w	a4,a4
    800114e8:	2781                	sext.w	a5,a5
    800114ea:	02f71b63          	bne	a4,a5,80011520 <main+0x13e>
            logf(LOG_INFO, "  [HART#%d]: %s (this HART).\n", i, hart_status_values[sbi_hart_get_status(i)]);
    800114ee:	fec42783          	lw	a5,-20(s0)
    800114f2:	853e                	mv	a0,a5
    800114f4:	287000ef          	jal	ra,80011f7a <sbi_hart_get_status>
    800114f8:	87aa                	mv	a5,a0
    800114fa:	0000a717          	auipc	a4,0xa
    800114fe:	b0e70713          	addi	a4,a4,-1266 # 8001b008 <hart_status_values>
    80011502:	078e                	slli	a5,a5,0x3
    80011504:	97ba                	add	a5,a5,a4
    80011506:	6398                	ld	a4,0(a5)
    80011508:	fec42783          	lw	a5,-20(s0)
    8001150c:	86ba                	mv	a3,a4
    8001150e:	863e                	mv	a2,a5
    80011510:	00008597          	auipc	a1,0x8
    80011514:	f0058593          	addi	a1,a1,-256 # 80019410 <SYSCALLS+0x410>
    80011518:	4511                	li	a0,4
    8001151a:	0a9000ef          	jal	ra,80011dc2 <logf>
    8001151e:	a80d                	j	80011550 <main+0x16e>
        }
        else {
            logf(LOG_INFO, "  [HART#%d]: %s.\n", i, hart_status_values[sbi_hart_get_status(i)]);
    80011520:	fec42783          	lw	a5,-20(s0)
    80011524:	853e                	mv	a0,a5
    80011526:	255000ef          	jal	ra,80011f7a <sbi_hart_get_status>
    8001152a:	87aa                	mv	a5,a0
    8001152c:	0000a717          	auipc	a4,0xa
    80011530:	adc70713          	addi	a4,a4,-1316 # 8001b008 <hart_status_values>
    80011534:	078e                	slli	a5,a5,0x3
    80011536:	97ba                	add	a5,a5,a4
    80011538:	6398                	ld	a4,0(a5)
    8001153a:	fec42783          	lw	a5,-20(s0)
    8001153e:	86ba                	mv	a3,a4
    80011540:	863e                	mv	a2,a5
    80011542:	00008597          	auipc	a1,0x8
    80011546:	eee58593          	addi	a1,a1,-274 # 80019430 <SYSCALLS+0x430>
    8001154a:	4511                	li	a0,4
    8001154c:	077000ef          	jal	ra,80011dc2 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80011550:	fec42783          	lw	a5,-20(s0)
    80011554:	2785                	addiw	a5,a5,1
    80011556:	fef42623          	sw	a5,-20(s0)
    8001155a:	fec42783          	lw	a5,-20(s0)
    8001155e:	0007871b          	sext.w	a4,a5
    80011562:	478d                	li	a5,3
    80011564:	f6e7fde3          	bgeu	a5,a4,800114de <main+0xfc>
        }
    }

    struct page_table *pt    = mmu_table_create();
    80011568:	f11fe0ef          	jal	ra,80010478 <mmu_table_create>
    8001156c:	fea43023          	sd	a0,-32(s0)
    kernel_mmu_table = pt;
    80011570:	00007797          	auipc	a5,0x7
    80011574:	a9078793          	addi	a5,a5,-1392 # 80018000 <kernel_mmu_table>
    80011578:	fe043703          	ld	a4,-32(s0)
    8001157c:	e398                	sd	a4,0(a5)
    if (!pt) {
    8001157e:	fe043783          	ld	a5,-32(s0)
    80011582:	eb89                	bnez	a5,80011594 <main+0x1b2>
        logf(LOG_ERROR, "Failed to create a new page table.");
    80011584:	00008597          	auipc	a1,0x8
    80011588:	ec458593          	addi	a1,a1,-316 # 80019448 <SYSCALLS+0x448>
    8001158c:	4505                	li	a0,1
    8001158e:	035000ef          	jal	ra,80011dc2 <logf>
        return;
    80011592:	a8cd                	j	80011684 <main+0x2a2>
    }

    // Map memory segments for our kernel
    logf(LOG_DEBUG, "Mapping kernel range: 0x%08lx to 0x%08lx", sym_start(text), sym_end(heap));
    80011594:	fffff797          	auipc	a5,0xfffff
    80011598:	a6c78793          	addi	a5,a5,-1428 # 80010000 <_memory_start>
    8001159c:	07fff717          	auipc	a4,0x7fff
    800115a0:	a6470713          	addi	a4,a4,-1436 # 88010000 <_heap_end>
    800115a4:	86ba                	mv	a3,a4
    800115a6:	863e                	mv	a2,a5
    800115a8:	00008597          	auipc	a1,0x8
    800115ac:	ec858593          	addi	a1,a1,-312 # 80019470 <SYSCALLS+0x470>
    800115b0:	4509                	li	a0,2
    800115b2:	011000ef          	jal	ra,80011dc2 <logf>

    mmu_map_range(pt, sym_start(text), sym_end(heap), sym_start(text), MMU_LEVEL_1G,
    800115b6:	fffff597          	auipc	a1,0xfffff
    800115ba:	a4a58593          	addi	a1,a1,-1462 # 80010000 <_memory_start>
    800115be:	07fff617          	auipc	a2,0x7fff
    800115c2:	a4260613          	addi	a2,a2,-1470 # 88010000 <_heap_end>
    800115c6:	fffff697          	auipc	a3,0xfffff
    800115ca:	a3a68693          	addi	a3,a3,-1478 # 80010000 <_memory_start>
    800115ce:	47b9                	li	a5,14
    800115d0:	4709                	li	a4,2
    800115d2:	fe043503          	ld	a0,-32(s0)
    800115d6:	abaff0ef          	jal	ra,80010890 <mmu_map_range>
                  PB_READ | PB_WRITE | PB_EXECUTE);
    // PLIC
    logf(LOG_DEBUG, "Mapping PLIC range: 0x0C000000 to 0x0C2FFFFF");
    800115da:	00008597          	auipc	a1,0x8
    800115de:	ec658593          	addi	a1,a1,-314 # 800194a0 <SYSCALLS+0x4a0>
    800115e2:	4509                	li	a0,2
    800115e4:	7de000ef          	jal	ra,80011dc2 <logf>

    mmu_map_range(pt, 0x0C000000, 0x0C2FFFFF, 0x0C000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    800115e8:	4799                	li	a5,6
    800115ea:	4705                	li	a4,1
    800115ec:	0c0006b7          	lui	a3,0xc000
    800115f0:	0c300637          	lui	a2,0xc300
    800115f4:	167d                	addi	a2,a2,-1
    800115f6:	0c0005b7          	lui	a1,0xc000
    800115fa:	fe043503          	ld	a0,-32(s0)
    800115fe:	a92ff0ef          	jal	ra,80010890 <mmu_map_range>
    // PCIe ECAM
    logf(LOG_DEBUG, "Mapping PCIe ECAM range: 0x30000000 to 0x30FFFFFF");
    80011602:	00008597          	auipc	a1,0x8
    80011606:	ece58593          	addi	a1,a1,-306 # 800194d0 <SYSCALLS+0x4d0>
    8001160a:	4509                	li	a0,2
    8001160c:	7b6000ef          	jal	ra,80011dc2 <logf>

    mmu_map_range(pt, 0x30000000, 0x30FFFFFF, 0x30000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    80011610:	4799                	li	a5,6
    80011612:	4705                	li	a4,1
    80011614:	300006b7          	lui	a3,0x30000
    80011618:	31000637          	lui	a2,0x31000
    8001161c:	167d                	addi	a2,a2,-1
    8001161e:	300005b7          	lui	a1,0x30000
    80011622:	fe043503          	ld	a0,-32(s0)
    80011626:	a6aff0ef          	jal	ra,80010890 <mmu_map_range>
    // PCIe MMIO
    logf(LOG_DEBUG, "Mapping PCIe MMIO range: 0x40000000 to 0x4FFFFFFF");
    8001162a:	00008597          	auipc	a1,0x8
    8001162e:	ede58593          	addi	a1,a1,-290 # 80019508 <SYSCALLS+0x508>
    80011632:	4509                	li	a0,2
    80011634:	78e000ef          	jal	ra,80011dc2 <logf>
    mmu_map_range(pt, 0x40000000, 0x4FFFFFFF, 0x40000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    80011638:	4799                	li	a5,6
    8001163a:	4705                	li	a4,1
    8001163c:	400006b7          	lui	a3,0x40000
    80011640:	50000637          	lui	a2,0x50000
    80011644:	167d                	addi	a2,a2,-1
    80011646:	400005b7          	lui	a1,0x40000
    8001164a:	fe043503          	ld	a0,-32(s0)
    8001164e:	a42ff0ef          	jal	ra,80010890 <mmu_map_range>

    // MMU is turned on here.

    // Initialize all submodules here, including PCI, VirtIO, Heap, etc.
    // Many will require the MMU, so write those functions first.
    init_systems();
    80011652:	d77ff0ef          	jal	ra,800113c8 <init_systems>

    // Now that all submodules are initialized, you need to schedule the init process
    // and the idle processes for each HART.
    logf(LOG_INFO, "Congratulations! You made it to the OS! Going back to sleep.\n");
    80011656:	00008597          	auipc	a1,0x8
    8001165a:	eea58593          	addi	a1,a1,-278 # 80019540 <SYSCALLS+0x540>
    8001165e:	4511                	li	a0,4
    80011660:	762000ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, 
    80011664:	00008597          	auipc	a1,0x8
    80011668:	f1c58593          	addi	a1,a1,-228 # 80019580 <SYSCALLS+0x580>
    8001166c:	4511                	li	a0,4
    8001166e:	754000ef          	jal	ra,80011dc2 <logf>
        "The logf function in the OS uses sbi_putchar(), so this means ECALLs from S-mode are "
        "working!\n");
    logf(LOG_INFO, 
    80011672:	00008597          	auipc	a1,0x8
    80011676:	f6e58593          	addi	a1,a1,-146 # 800195e0 <SYSCALLS+0x5e0>
    8001167a:	4511                	li	a0,4
    8001167c:	746000ef          	jal	ra,80011dc2 <logf>
    // Below is just a little shell that demonstrates the sbi_getchar and
    // how the console works.

    // This is defined above main()
#ifdef RUN_INTERNAL_CONSOLE
    console();
    80011680:	00c000ef          	jal	ra,8001168c <console>
    }
    sched_add(con);
    con->state = PS_RUNNING;
    sched_invoke(0);
#endif
}
    80011684:	70a2                	ld	ra,40(sp)
    80011686:	7402                	ld	s0,32(sp)
    80011688:	6145                	addi	sp,sp,48
    8001168a:	8082                	ret

000000008001168c <console>:

#ifdef RUN_INTERNAL_CONSOLE
ATTR_NORET static void console(void)
{
    8001168c:	7179                	addi	sp,sp,-48
    8001168e:	f406                	sd	ra,40(sp)
    80011690:	f022                	sd	s0,32(sp)
    80011692:	1800                	addi	s0,sp,48
    const int BUFFER_SIZE = 56;
    80011694:	03800313          	li	t1,56
    80011698:	fe642423          	sw	t1,-24(s0)
    int at                = 0;
    8001169c:	fe042623          	sw	zero,-20(s0)
    char input[BUFFER_SIZE];
    800116a0:	fe842303          	lw	t1,-24(s0)
    800116a4:	137d                	addi	t1,t1,-1
    800116a6:	fe643023          	sd	t1,-32(s0)
    800116aa:	fe842303          	lw	t1,-24(s0)
    800116ae:	881a                	mv	a6,t1
    800116b0:	4881                	li	a7,0
    800116b2:	03d85313          	srli	t1,a6,0x3d
    800116b6:	00389693          	slli	a3,a7,0x3
    800116ba:	00d366b3          	or	a3,t1,a3
    800116be:	00381613          	slli	a2,a6,0x3
    800116c2:	fe842683          	lw	a3,-24(s0)
    800116c6:	8536                	mv	a0,a3
    800116c8:	4581                	li	a1,0
    800116ca:	03d55693          	srli	a3,a0,0x3d
    800116ce:	00359793          	slli	a5,a1,0x3
    800116d2:	8fd5                	or	a5,a5,a3
    800116d4:	00351713          	slli	a4,a0,0x3
    800116d8:	fe842783          	lw	a5,-24(s0)
    800116dc:	07bd                	addi	a5,a5,15
    800116de:	8391                	srli	a5,a5,0x4
    800116e0:	0792                	slli	a5,a5,0x4
    800116e2:	40f10133          	sub	sp,sp,a5
    800116e6:	878a                	mv	a5,sp
    800116e8:	00078793          	mv	a5,a5
    800116ec:	fcf43c23          	sd	a5,-40(s0)
    logf(LOG_TEXT, "> ");
    800116f0:	00008597          	auipc	a1,0x8
    800116f4:	f5058593          	addi	a1,a1,-176 # 80019640 <SYSCALLS+0x640>
    800116f8:	4541                	li	a0,16
    800116fa:	6c8000ef          	jal	ra,80011dc2 <logf>
    do {
        char c;
        // Recall that sbi_getchar() will return -1, 0xff, 255
        // if the receiver is empty.
        if ((c = sbi_getchar()) != 0xff) {
    800116fe:	05d000ef          	jal	ra,80011f5a <sbi_getchar>
    80011702:	87aa                	mv	a5,a0
    80011704:	fcf40ba3          	sb	a5,-41(s0)
    80011708:	fd744783          	lbu	a5,-41(s0)
    8001170c:	0ff7f713          	andi	a4,a5,255
    80011710:	0ff00793          	li	a5,255
    80011714:	22f70263          	beq	a4,a5,80011938 <console+0x2ac>
            if (c == '\r' || c == '\n') {
    80011718:	fd744783          	lbu	a5,-41(s0)
    8001171c:	0ff7f713          	andi	a4,a5,255
    80011720:	47b5                	li	a5,13
    80011722:	00f70963          	beq	a4,a5,80011734 <console+0xa8>
    80011726:	fd744783          	lbu	a5,-41(s0)
    8001172a:	0ff7f713          	andi	a4,a5,255
    8001172e:	47a9                	li	a5,10
    80011730:	0cf71c63          	bne	a4,a5,80011808 <console+0x17c>
                if (at > 0) {
    80011734:	fec42783          	lw	a5,-20(s0)
    80011738:	2781                	sext.w	a5,a5
    8001173a:	0af05f63          	blez	a5,800117f8 <console+0x16c>
                    input[at] = '\0';
    8001173e:	fd843703          	ld	a4,-40(s0)
    80011742:	fec42783          	lw	a5,-20(s0)
    80011746:	97ba                	add	a5,a5,a4
    80011748:	00078023          	sb	zero,0(a5)
                    if (!strcmp(input, "quit")) {
    8001174c:	00008597          	auipc	a1,0x8
    80011750:	efc58593          	addi	a1,a1,-260 # 80019648 <SYSCALLS+0x648>
    80011754:	fd843503          	ld	a0,-40(s0)
    80011758:	7ab030ef          	jal	ra,80015702 <strcmp>
    8001175c:	87aa                	mv	a5,a0
    8001175e:	eb99                	bnez	a5,80011774 <console+0xe8>
                        logf(LOG_TEXT, "\nShutting down...\n\n");
    80011760:	00008597          	auipc	a1,0x8
    80011764:	ef058593          	addi	a1,a1,-272 # 80019650 <SYSCALLS+0x650>
    80011768:	4541                	li	a0,16
    8001176a:	658000ef          	jal	ra,80011dc2 <logf>
                        sbi_poweroff();
    8001176e:	09d000ef          	jal	ra,8001200a <sbi_poweroff>
    80011772:	a049                	j	800117f4 <console+0x168>
                    }
                    else if (!strcmp(input, "fatal")) {
    80011774:	00008597          	auipc	a1,0x8
    80011778:	ef458593          	addi	a1,a1,-268 # 80019668 <SYSCALLS+0x668>
    8001177c:	fd843503          	ld	a0,-40(s0)
    80011780:	783030ef          	jal	ra,80015702 <strcmp>
    80011784:	87aa                	mv	a5,a0
    80011786:	eb95                	bnez	a5,800117ba <console+0x12e>
                        logf(LOG_TEXT, "\n");
    80011788:	00008597          	auipc	a1,0x8
    8001178c:	ee858593          	addi	a1,a1,-280 # 80019670 <SYSCALLS+0x670>
    80011790:	4541                	li	a0,16
    80011792:	630000ef          	jal	ra,80011dc2 <logf>
                        fatalf("Testing fatal error @ %lu.\nHanging HART...\n", sbi_rtc_get_time());
    80011796:	119000ef          	jal	ra,800120ae <sbi_rtc_get_time>
    8001179a:	87aa                	mv	a5,a0
    8001179c:	85be                	mv	a1,a5
    8001179e:	00008517          	auipc	a0,0x8
    800117a2:	eda50513          	addi	a0,a0,-294 # 80019678 <SYSCALLS+0x678>
    800117a6:	6d0000ef          	jal	ra,80011e76 <fatalf>
                        logf(LOG_ERROR, "If I get here, fatal didn't work :'(.\n");
    800117aa:	00008597          	auipc	a1,0x8
    800117ae:	efe58593          	addi	a1,a1,-258 # 800196a8 <SYSCALLS+0x6a8>
    800117b2:	4505                	li	a0,1
    800117b4:	60e000ef          	jal	ra,80011dc2 <logf>
    800117b8:	a835                	j	800117f4 <console+0x168>
                    }
                    else if (!strcmp(input, "heap")) {
    800117ba:	00008597          	auipc	a1,0x8
    800117be:	f1658593          	addi	a1,a1,-234 # 800196d0 <SYSCALLS+0x6d0>
    800117c2:	fd843503          	ld	a0,-40(s0)
    800117c6:	73d030ef          	jal	ra,80015702 <strcmp>
    800117ca:	87aa                	mv	a5,a0
    800117cc:	eb99                	bnez	a5,800117e2 <console+0x156>
                        logf(LOG_TEXT, "\n");
    800117ce:	00008597          	auipc	a1,0x8
    800117d2:	ea258593          	addi	a1,a1,-350 # 80019670 <SYSCALLS+0x670>
    800117d6:	4541                	li	a0,16
    800117d8:	5ea000ef          	jal	ra,80011dc2 <logf>
                        void heap_print_stats(void);
                        heap_print_stats();
    800117dc:	abdff0ef          	jal	ra,80011298 <heap_print_stats>
    800117e0:	a811                	j	800117f4 <console+0x168>
                    }
                    else {
                        logf(LOG_TEXT, "\nUnknown command '%s'\n", input);
    800117e2:	fd843603          	ld	a2,-40(s0)
    800117e6:	00008597          	auipc	a1,0x8
    800117ea:	ef258593          	addi	a1,a1,-270 # 800196d8 <SYSCALLS+0x6d8>
    800117ee:	4541                	li	a0,16
    800117f0:	5d2000ef          	jal	ra,80011dc2 <logf>
                    }
                    at = 0;
    800117f4:	fe042623          	sw	zero,-20(s0)
                }
                logf(LOG_TEXT, "\n> ");
    800117f8:	00008597          	auipc	a1,0x8
    800117fc:	ef858593          	addi	a1,a1,-264 # 800196f0 <SYSCALLS+0x6f0>
    80011800:	4541                	li	a0,16
    80011802:	5c0000ef          	jal	ra,80011dc2 <logf>
    80011806:	aa2d                	j	80011940 <console+0x2b4>
            }
            else if (c == 127) {
    80011808:	fd744783          	lbu	a5,-41(s0)
    8001180c:	0ff7f713          	andi	a4,a5,255
    80011810:	07f00793          	li	a5,127
    80011814:	02f71463          	bne	a4,a5,8001183c <console+0x1b0>
                // BACKSPACE
                if (at > 0) {
    80011818:	fec42783          	lw	a5,-20(s0)
    8001181c:	2781                	sext.w	a5,a5
    8001181e:	eef050e3          	blez	a5,800116fe <console+0x72>
                    logf(LOG_TEXT, "\b \b");
    80011822:	00008597          	auipc	a1,0x8
    80011826:	ed658593          	addi	a1,a1,-298 # 800196f8 <SYSCALLS+0x6f8>
    8001182a:	4541                	li	a0,16
    8001182c:	596000ef          	jal	ra,80011dc2 <logf>
                    at -= 1;
    80011830:	fec42783          	lw	a5,-20(s0)
    80011834:	37fd                	addiw	a5,a5,-1
    80011836:	fef42623          	sw	a5,-20(s0)
    8001183a:	b5d1                	j	800116fe <console+0x72>
                }
            }
            else if (c == 0x1B) {
    8001183c:	fd744783          	lbu	a5,-41(s0)
    80011840:	0ff7f713          	andi	a4,a5,255
    80011844:	47ed                	li	a5,27
    80011846:	0af71663          	bne	a4,a5,800118f2 <console+0x266>
                // Escape sequence
                char esc1 = sbi_getchar();
    8001184a:	710000ef          	jal	ra,80011f5a <sbi_getchar>
    8001184e:	87aa                	mv	a5,a0
    80011850:	fcf40b23          	sb	a5,-42(s0)
                char esc2 = sbi_getchar();
    80011854:	706000ef          	jal	ra,80011f5a <sbi_getchar>
    80011858:	87aa                	mv	a5,a0
    8001185a:	fcf40aa3          	sb	a5,-43(s0)
                if (esc1 == 0x5B) {
    8001185e:	fd644783          	lbu	a5,-42(s0)
    80011862:	0ff7f713          	andi	a4,a5,255
    80011866:	05b00793          	li	a5,91
    8001186a:	0cf71a63          	bne	a4,a5,8001193e <console+0x2b2>
                    switch (esc2) {
    8001186e:	fd544783          	lbu	a5,-43(s0)
    80011872:	2781                	sext.w	a5,a5
    80011874:	86be                	mv	a3,a5
    80011876:	04400713          	li	a4,68
    8001187a:	06e68463          	beq	a3,a4,800118e2 <console+0x256>
    8001187e:	86be                	mv	a3,a5
    80011880:	04400713          	li	a4,68
    80011884:	e6d74de3          	blt	a4,a3,800116fe <console+0x72>
    80011888:	86be                	mv	a3,a5
    8001188a:	04300713          	li	a4,67
    8001188e:	04e68263          	beq	a3,a4,800118d2 <console+0x246>
    80011892:	86be                	mv	a3,a5
    80011894:	04300713          	li	a4,67
    80011898:	e6d743e3          	blt	a4,a3,800116fe <console+0x72>
    8001189c:	86be                	mv	a3,a5
    8001189e:	04100713          	li	a4,65
    800118a2:	00e68863          	beq	a3,a4,800118b2 <console+0x226>
    800118a6:	873e                	mv	a4,a5
    800118a8:	04200793          	li	a5,66
    800118ac:	00f70b63          	beq	a4,a5,800118c2 <console+0x236>
    800118b0:	a841                	j	80011940 <console+0x2b4>
                        case 0x41:
                            logf(LOG_INFO, "UP\n");
    800118b2:	00008597          	auipc	a1,0x8
    800118b6:	e4e58593          	addi	a1,a1,-434 # 80019700 <SYSCALLS+0x700>
    800118ba:	4511                	li	a0,4
    800118bc:	506000ef          	jal	ra,80011dc2 <logf>
                            break;
    800118c0:	a041                	j	80011940 <console+0x2b4>
                        case 0x42:
                            logf(LOG_INFO, "DOWN\n");
    800118c2:	00008597          	auipc	a1,0x8
    800118c6:	e4658593          	addi	a1,a1,-442 # 80019708 <SYSCALLS+0x708>
    800118ca:	4511                	li	a0,4
    800118cc:	4f6000ef          	jal	ra,80011dc2 <logf>
                            break;
    800118d0:	a885                	j	80011940 <console+0x2b4>
                        case 0x43:
                            logf(LOG_INFO, "RIGHT\n");
    800118d2:	00008597          	auipc	a1,0x8
    800118d6:	e3e58593          	addi	a1,a1,-450 # 80019710 <SYSCALLS+0x710>
    800118da:	4511                	li	a0,4
    800118dc:	4e6000ef          	jal	ra,80011dc2 <logf>
                            break;
    800118e0:	a085                	j	80011940 <console+0x2b4>
                        case 0x44:
                            logf(LOG_INFO, "LEFT\n");
    800118e2:	00008597          	auipc	a1,0x8
    800118e6:	e3658593          	addi	a1,a1,-458 # 80019718 <SYSCALLS+0x718>
    800118ea:	4511                	li	a0,4
    800118ec:	4d6000ef          	jal	ra,80011dc2 <logf>
                            break;
    800118f0:	a881                	j	80011940 <console+0x2b4>
                    }
                }
            }
            else {
                if (at < (BUFFER_SIZE - 1)) {
    800118f2:	fe842783          	lw	a5,-24(s0)
    800118f6:	37fd                	addiw	a5,a5,-1
    800118f8:	0007871b          	sext.w	a4,a5
    800118fc:	fec42783          	lw	a5,-20(s0)
    80011900:	2781                	sext.w	a5,a5
    80011902:	dee7dee3          	bge	a5,a4,800116fe <console+0x72>
                    input[at++] = c;
    80011906:	fec42783          	lw	a5,-20(s0)
    8001190a:	0017871b          	addiw	a4,a5,1
    8001190e:	fee42623          	sw	a4,-20(s0)
    80011912:	fd843703          	ld	a4,-40(s0)
    80011916:	97ba                	add	a5,a5,a4
    80011918:	fd744703          	lbu	a4,-41(s0)
    8001191c:	00e78023          	sb	a4,0(a5)
                    logf(LOG_TEXT, "%c", c);
    80011920:	fd744783          	lbu	a5,-41(s0)
    80011924:	2781                	sext.w	a5,a5
    80011926:	863e                	mv	a2,a5
    80011928:	00008597          	auipc	a1,0x8
    8001192c:	df858593          	addi	a1,a1,-520 # 80019720 <SYSCALLS+0x720>
    80011930:	4541                	li	a0,16
    80011932:	490000ef          	jal	ra,80011dc2 <logf>
    80011936:	b3e1                	j	800116fe <console+0x72>
            }
        }
        else {
            // We can WFI here since interrupts are enabled
            // for the UART.
            WFI();
    80011938:	10500073          	wfi
    8001193c:	b3c9                	j	800116fe <console+0x72>
                }
    8001193e:	0001                	nop
    do {
    80011940:	bb7d                	j	800116fe <console+0x72>

0000000080011942 <process_new>:
#define STACK_PAGES 2
#define STACK_SIZE  (STACK_PAGES * PAGE_SIZE)
#define STACK_TOP   0xfffffffc0ffee000UL

struct process *process_new(process_mode mode)
{
    80011942:	715d                	addi	sp,sp,-80
    80011944:	e486                	sd	ra,72(sp)
    80011946:	e0a2                	sd	s0,64(sp)
    80011948:	0880                	addi	s0,sp,80
    8001194a:	87aa                	mv	a5,a0
    8001194c:	faf42e23          	sw	a5,-68(s0)
    struct process *p       = (struct process *)kzalloc(sizeof(*p));
    80011950:	29000593          	li	a1,656
    80011954:	4505                	li	a0,1
    80011956:	9c1ff0ef          	jal	ra,80011316 <kcalloc>
    8001195a:	fea43023          	sd	a0,-32(s0)

    p->hart                 = -1U;
    8001195e:	fe043783          	ld	a5,-32(s0)
    80011962:	577d                	li	a4,-1
    80011964:	c3d8                	sw	a4,4(a5)
    p->ptable               = mmu_table_create();
    80011966:	b13fe0ef          	jal	ra,80010478 <mmu_table_create>
    8001196a:	872a                	mv	a4,a0
    8001196c:	fe043783          	ld	a5,-32(s0)
    80011970:	26e7bc23          	sd	a4,632(a5)
    p->state                = PS_WAITING;
    80011974:	fe043783          	ld	a5,-32(s0)
    80011978:	4705                	li	a4,1
    8001197a:	c7d8                	sw	a4,12(a5)
    // p->pid               = fill_in_with_unique_pid

    // Set the trap frame and create all necessary structures.
    // p->frame.sepc = filled_in_by_ELF_loader
    p->frame.sstatus        = SSTATUS_SPP_BOOL(mode) | SSTATUS_FS_INITIAL | SSTATUS_SPIE;
    8001197c:	fbc42783          	lw	a5,-68(s0)
    80011980:	2781                	sext.w	a5,a5
    80011982:	c789                	beqz	a5,8001198c <process_new+0x4a>
    80011984:	6789                	lui	a5,0x2
    80011986:	12078793          	addi	a5,a5,288 # 2120 <i+0x2100>
    8001198a:	a021                	j	80011992 <process_new+0x50>
    8001198c:	6789                	lui	a5,0x2
    8001198e:	02078793          	addi	a5,a5,32 # 2020 <i+0x2000>
    80011992:	fe043703          	ld	a4,-32(s0)
    80011996:	24f73023          	sd	a5,576(a4)
    p->frame.sie            = SIE_SEIE | SIE_SSIE | SIE_STIE;
    8001199a:	fe043783          	ld	a5,-32(s0)
    8001199e:	22200713          	li	a4,546
    800119a2:	24e7b423          	sd	a4,584(a5)
    p->frame.satp           = SATP(p->ptable, p->pid);
    800119a6:	fe043783          	ld	a5,-32(s0)
    800119aa:	2787b783          	ld	a5,632(a5)
    800119ae:	00c7d713          	srli	a4,a5,0xc
    800119b2:	57fd                	li	a5,-1
    800119b4:	83d1                	srli	a5,a5,0x14
    800119b6:	8f7d                	and	a4,a4,a5
    800119b8:	fe043783          	ld	a5,-32(s0)
    800119bc:	0007d783          	lhu	a5,0(a5)
    800119c0:	17b2                	slli	a5,a5,0x2c
    800119c2:	8f5d                	or	a4,a4,a5
    800119c4:	57fd                	li	a5,-1
    800119c6:	17fe                	slli	a5,a5,0x3f
    800119c8:	8f5d                	or	a4,a4,a5
    800119ca:	fe043783          	ld	a5,-32(s0)
    800119ce:	24e7b823          	sd	a4,592(a5)
    p->frame.sscratch       = (unsigned long)&p->frame;
    800119d2:	fe043783          	ld	a5,-32(s0)
    800119d6:	03878793          	addi	a5,a5,56
    800119da:	873e                	mv	a4,a5
    800119dc:	fe043783          	ld	a5,-32(s0)
    800119e0:	24e7bc23          	sd	a4,600(a5)
    p->frame.stvec          = trampoline_trap_start;
    800119e4:	00009797          	auipc	a5,0x9
    800119e8:	a7c78793          	addi	a5,a5,-1412 # 8001a460 <trampoline_trap_start>
    800119ec:	6398                	ld	a4,0(a5)
    800119ee:	fe043783          	ld	a5,-32(s0)
    800119f2:	26e7b023          	sd	a4,608(a5)
    p->frame.trap_satp      = SATP_KERNEL;
    800119f6:	00006797          	auipc	a5,0x6
    800119fa:	60a78793          	addi	a5,a5,1546 # 80018000 <kernel_mmu_table>
    800119fe:	639c                	ld	a5,0(a5)
    80011a00:	00c7d713          	srli	a4,a5,0xc
    80011a04:	57fd                	li	a5,-1
    80011a06:	83d1                	srli	a5,a5,0x14
    80011a08:	8f7d                	and	a4,a4,a5
    80011a0a:	8ffff7b7          	lui	a5,0x8ffff
    80011a0e:	1782                	slli	a5,a5,0x20
    80011a10:	8f5d                	or	a4,a4,a5
    80011a12:	fe043783          	ld	a5,-32(s0)
    80011a16:	26e7b423          	sd	a4,616(a5) # ffffffff8ffff268 <_heap_end+0xffffffff07fef268>
    // p->frame.trap_stack = filled_in_by_SCHEDULER

    p->fds = vector_new_with_capacity(5);
    80011a1a:	4515                	li	a0,5
    80011a1c:	31a040ef          	jal	ra,80015d36 <vector_new_with_capacity>
    80011a20:	872a                	mv	a4,a0
    80011a22:	fe043783          	ld	a5,-32(s0)
    80011a26:	28e7b423          	sd	a4,648(a5)
    p->pages = list_new();
    80011a2a:	20c030ef          	jal	ra,80014c36 <list_new>
    80011a2e:	872a                	mv	a4,a0
    80011a30:	fe043783          	ld	a5,-32(s0)
    80011a34:	28e7b023          	sd	a4,640(a5)

    // We need to keep track of the stack itself in the kernel, so we can free it
    // later, but the user process will interact with the stack via the SP register.
    p->frame.xregs[XREG_SP] = STACK_TOP + STACK_SIZE;
    80011a38:	fe043783          	ld	a5,-32(s0)
    80011a3c:	c0fff737          	lui	a4,0xc0fff
    80011a40:	0712                	slli	a4,a4,0x4
    80011a42:	e7b8                	sd	a4,72(a5)
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    80011a44:	fe043423          	sd	zero,-24(s0)
    80011a48:	a085                	j	80011aa8 <process_new+0x166>
        void *stack = page_zalloc();
    80011a4a:	4505                	li	a0,1
    80011a4c:	7ab000ef          	jal	ra,800129f6 <page_znalloc>
    80011a50:	fca43423          	sd	a0,-56(s0)
        list_add_ptr(p->pages, stack);
    80011a54:	fe043783          	ld	a5,-32(s0)
    80011a58:	2807b783          	ld	a5,640(a5)
    80011a5c:	fc843703          	ld	a4,-56(s0)
    80011a60:	85ba                	mv	a1,a4
    80011a62:	853e                	mv	a0,a5
    80011a64:	202030ef          	jal	ra,80014c66 <list_add>
        mmu_map(p->ptable, STACK_TOP + PAGE_SIZE * i, (unsigned long)stack,
    80011a68:	fe043783          	ld	a5,-32(s0)
    80011a6c:	2787b503          	ld	a0,632(a5)
    80011a70:	fe843783          	ld	a5,-24(s0)
    80011a74:	00c79713          	slli	a4,a5,0xc
    80011a78:	ffe087b7          	lui	a5,0xffe08
    80011a7c:	17dd                	addi	a5,a5,-9
    80011a7e:	07b6                	slli	a5,a5,0xd
    80011a80:	00f705b3          	add	a1,a4,a5
    80011a84:	fc843603          	ld	a2,-56(s0)
    80011a88:	fbc42783          	lw	a5,-68(s0)
    80011a8c:	2781                	sext.w	a5,a5
    80011a8e:	e399                	bnez	a5,80011a94 <process_new+0x152>
    80011a90:	47c1                	li	a5,16
    80011a92:	a011                	j	80011a96 <process_new+0x154>
    80011a94:	4799                	li	a5,6
    80011a96:	873e                	mv	a4,a5
    80011a98:	4681                	li	a3,0
    80011a9a:	a19fe0ef          	jal	ra,800104b2 <mmu_map>
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    80011a9e:	fe843783          	ld	a5,-24(s0)
    80011aa2:	0785                	addi	a5,a5,1
    80011aa4:	fef43423          	sd	a5,-24(s0)
    80011aa8:	fe843703          	ld	a4,-24(s0)
    80011aac:	4785                	li	a5,1
    80011aae:	f8e7fee3          	bgeu	a5,a4,80011a4a <process_new+0x108>
    }

    // We need to map certain kernel portions into the user's page table. Notice
    // that the PB_USER is NOT set, but it needs to be there because we need to execute
    // the trap/start instructions while using the user's page table until we change SATP.
    unsigned long trans_trampoline_start = mmu_translate(kernel_mmu_table, trampoline_thread_start);
    80011ab2:	00006797          	auipc	a5,0x6
    80011ab6:	54e78793          	addi	a5,a5,1358 # 80018000 <kernel_mmu_table>
    80011aba:	6398                	ld	a4,0(a5)
    80011abc:	00009797          	auipc	a5,0x9
    80011ac0:	98c78793          	addi	a5,a5,-1652 # 8001a448 <trampoline_thread_start>
    80011ac4:	639c                	ld	a5,0(a5)
    80011ac6:	85be                	mv	a1,a5
    80011ac8:	853a                	mv	a0,a4
    80011aca:	cf7fe0ef          	jal	ra,800107c0 <mmu_translate>
    80011ace:	fca43c23          	sd	a0,-40(s0)
    unsigned long trans_trampoline_trap  = mmu_translate(kernel_mmu_table, trampoline_trap_start);
    80011ad2:	00006797          	auipc	a5,0x6
    80011ad6:	52e78793          	addi	a5,a5,1326 # 80018000 <kernel_mmu_table>
    80011ada:	6398                	ld	a4,0(a5)
    80011adc:	00009797          	auipc	a5,0x9
    80011ae0:	98478793          	addi	a5,a5,-1660 # 8001a460 <trampoline_trap_start>
    80011ae4:	639c                	ld	a5,0(a5)
    80011ae6:	85be                	mv	a1,a5
    80011ae8:	853a                	mv	a0,a4
    80011aea:	cd7fe0ef          	jal	ra,800107c0 <mmu_translate>
    80011aee:	fca43823          	sd	a0,-48(s0)
    mmu_map(p->ptable, trampoline_thread_start, trans_trampoline_start, MMU_LEVEL_4K,
    80011af2:	fe043783          	ld	a5,-32(s0)
    80011af6:	2787b503          	ld	a0,632(a5)
    80011afa:	00009797          	auipc	a5,0x9
    80011afe:	94e78793          	addi	a5,a5,-1714 # 8001a448 <trampoline_thread_start>
    80011b02:	639c                	ld	a5,0(a5)
    80011b04:	4729                	li	a4,10
    80011b06:	4681                	li	a3,0
    80011b08:	fd843603          	ld	a2,-40(s0)
    80011b0c:	85be                	mv	a1,a5
    80011b0e:	9a5fe0ef          	jal	ra,800104b2 <mmu_map>
            PB_READ | PB_EXECUTE);
    mmu_map(p->ptable, trampoline_trap_start, trans_trampoline_trap, MMU_LEVEL_4K,
    80011b12:	fe043783          	ld	a5,-32(s0)
    80011b16:	2787b503          	ld	a0,632(a5)
    80011b1a:	00009797          	auipc	a5,0x9
    80011b1e:	94678793          	addi	a5,a5,-1722 # 8001a460 <trampoline_trap_start>
    80011b22:	639c                	ld	a5,0(a5)
    80011b24:	4729                	li	a4,10
    80011b26:	4681                	li	a3,0
    80011b28:	fd043603          	ld	a2,-48(s0)
    80011b2c:	85be                	mv	a1,a5
    80011b2e:	985fe0ef          	jal	ra,800104b2 <mmu_map>
            PB_READ | PB_EXECUTE);

    SFENCE_ASID(p->pid);
    80011b32:	fe043783          	ld	a5,-32(s0)
    80011b36:	0007d783          	lhu	a5,0(a5)
    80011b3a:	12f00073          	sfence.vma	zero,a5

    return p;
    80011b3e:	fe043783          	ld	a5,-32(s0)
}
    80011b42:	853e                	mv	a0,a5
    80011b44:	60a6                	ld	ra,72(sp)
    80011b46:	6406                	ld	s0,64(sp)
    80011b48:	6161                	addi	sp,sp,80
    80011b4a:	8082                	ret

0000000080011b4c <process_free>:

int process_free(struct process *p)
{
    80011b4c:	7179                	addi	sp,sp,-48
    80011b4e:	f406                	sd	ra,40(sp)
    80011b50:	f022                	sd	s0,32(sp)
    80011b52:	1800                	addi	s0,sp,48
    80011b54:	fca43c23          	sd	a0,-40(s0)
    struct ListElem *e;
    unsigned int i;

    if (!p || !ON_HART_NONE(p)) {
    80011b58:	fd843783          	ld	a5,-40(s0)
    80011b5c:	cb81                	beqz	a5,80011b6c <process_free+0x20>
    80011b5e:	fd843783          	ld	a5,-40(s0)
    80011b62:	43dc                	lw	a5,4(a5)
    80011b64:	873e                	mv	a4,a5
    80011b66:	57fd                	li	a5,-1
    80011b68:	00f70463          	beq	a4,a5,80011b70 <process_free+0x24>
        // Process is invalid or running somewhere, or this is stale.
        return -1;
    80011b6c:	57fd                	li	a5,-1
    80011b6e:	a8d1                	j	80011c42 <process_free+0xf6>
    }

    // Free all resources allocated to the process.

    if (p->ptable) {
    80011b70:	fd843783          	ld	a5,-40(s0)
    80011b74:	2787b783          	ld	a5,632(a5)
    80011b78:	cf91                	beqz	a5,80011b94 <process_free+0x48>
        mmu_free(p->ptable);
    80011b7a:	fd843783          	ld	a5,-40(s0)
    80011b7e:	2787b783          	ld	a5,632(a5)
    80011b82:	853e                	mv	a0,a5
    80011b84:	bbffe0ef          	jal	ra,80010742 <mmu_free>
        SFENCE_ASID(p->pid);
    80011b88:	fd843783          	ld	a5,-40(s0)
    80011b8c:	0007d783          	lhu	a5,0(a5)
    80011b90:	12f00073          	sfence.vma	zero,a5
    }

    if (p->pages) {
    80011b94:	fd843783          	ld	a5,-40(s0)
    80011b98:	2807b783          	ld	a5,640(a5)
    80011b9c:	cbb9                	beqz	a5,80011bf2 <process_free+0xa6>
        list_for_each(p->pages, e) {
    80011b9e:	fd843783          	ld	a5,-40(s0)
    80011ba2:	2807b783          	ld	a5,640(a5)
    80011ba6:	853e                	mv	a0,a5
    80011ba8:	4de030ef          	jal	ra,80015086 <list_elem_start_ascending>
    80011bac:	fea43423          	sd	a0,-24(s0)
    80011bb0:	a839                	j	80011bce <process_free+0x82>
            page_free(list_elem_value_ptr(e));
    80011bb2:	fe843503          	ld	a0,-24(s0)
    80011bb6:	530030ef          	jal	ra,800150e6 <list_elem_value>
    80011bba:	87aa                	mv	a5,a0
    80011bbc:	853e                	mv	a0,a5
    80011bbe:	64f000ef          	jal	ra,80012a0c <page_free>
        list_for_each(p->pages, e) {
    80011bc2:	fe843503          	ld	a0,-24(s0)
    80011bc6:	508030ef          	jal	ra,800150ce <list_elem_prev>
    80011bca:	fea43423          	sd	a0,-24(s0)
    80011bce:	fd843783          	ld	a5,-40(s0)
    80011bd2:	2807b783          	ld	a5,640(a5)
    80011bd6:	fe843583          	ld	a1,-24(s0)
    80011bda:	853e                	mv	a0,a5
    80011bdc:	41c030ef          	jal	ra,80014ff8 <list_elem_valid>
    80011be0:	87aa                	mv	a5,a0
    80011be2:	fbe1                	bnez	a5,80011bb2 <process_free+0x66>
        }
        list_free(p->pages);
    80011be4:	fd843783          	ld	a5,-40(s0)
    80011be8:	2807b783          	ld	a5,640(a5)
    80011bec:	853e                	mv	a0,a5
    80011bee:	3b2030ef          	jal	ra,80014fa0 <list_free>
    }

    if (p->fds) {
    80011bf2:	fd843783          	ld	a5,-40(s0)
    80011bf6:	2887b783          	ld	a5,648(a5)
    80011bfa:	cf9d                	beqz	a5,80011c38 <process_free+0xec>
        for (i = 0;i < vector_size(p->fds);i += 1) {
    80011bfc:	fe042223          	sw	zero,-28(s0)
    80011c00:	a031                	j	80011c0c <process_free+0xc0>
    80011c02:	fe442783          	lw	a5,-28(s0)
    80011c06:	2785                	addiw	a5,a5,1
    80011c08:	fef42223          	sw	a5,-28(s0)
    80011c0c:	fd843783          	ld	a5,-40(s0)
    80011c10:	2887b783          	ld	a5,648(a5)
    80011c14:	853e                	mv	a0,a5
    80011c16:	20f040ef          	jal	ra,80016624 <vector_size>
    80011c1a:	87aa                	mv	a5,a0
    80011c1c:	0007871b          	sext.w	a4,a5
    80011c20:	fe442783          	lw	a5,-28(s0)
    80011c24:	2781                	sext.w	a5,a5
    80011c26:	fce7eee3          	bltu	a5,a4,80011c02 <process_free+0xb6>
            // Clean up any file descriptor stuff here.
        }
        vector_free(p->fds);
    80011c2a:	fd843783          	ld	a5,-40(s0)
    80011c2e:	2887b783          	ld	a5,648(a5)
    80011c32:	853e                	mv	a0,a5
    80011c34:	221040ef          	jal	ra,80016654 <vector_free>
    }
    

    kfree(p);
    80011c38:	fd843503          	ld	a0,-40(s0)
    80011c3c:	f02ff0ef          	jal	ra,8001133e <kfree>

    return 0;
    80011c40:	4781                	li	a5,0
}
    80011c42:	853e                	mv	a0,a5
    80011c44:	70a2                	ld	ra,40(sp)
    80011c46:	7402                	ld	s0,32(sp)
    80011c48:	6145                	addi	sp,sp,48
    80011c4a:	8082                	ret

0000000080011c4c <process_run>:

bool process_run(struct process *p, unsigned int hart)
{
    80011c4c:	7179                	addi	sp,sp,-48
    80011c4e:	f406                	sd	ra,40(sp)
    80011c50:	f022                	sd	s0,32(sp)
    80011c52:	1800                	addi	s0,sp,48
    80011c54:	fca43c23          	sd	a0,-40(s0)
    80011c58:	87ae                	mv	a5,a1
    80011c5a:	fcf42a23          	sw	a5,-44(s0)
    void process_asm_run(void *frame_addr);
    unsigned int me = sbi_whoami();
    80011c5e:	470000ef          	jal	ra,800120ce <sbi_whoami>
    80011c62:	87aa                	mv	a5,a0
    80011c64:	fef42623          	sw	a5,-20(s0)

    if (me == hart) {
    80011c68:	fec42703          	lw	a4,-20(s0)
    80011c6c:	fd442783          	lw	a5,-44(s0)
    80011c70:	2701                	sext.w	a4,a4
    80011c72:	2781                	sext.w	a5,a5
    80011c74:	00f71b63          	bne	a4,a5,80011c8a <process_run+0x3e>
        process_asm_run(&p->frame);
    80011c78:	fd843783          	ld	a5,-40(s0)
    80011c7c:	03878793          	addi	a5,a5,56
    80011c80:	853e                	mv	a0,a5
    80011c82:	783020ef          	jal	ra,80014c04 <process_asm_run>
        // process_asm_run should not return, but if it does
        // something went wrong.
        return false;
    80011c86:	4781                	li	a5,0
    80011c88:	a815                	j	80011cbc <process_run+0x70>
    }

    return sbi_hart_start(hart, trampoline_thread_start, (unsigned long)&p->frame, p->frame.satp);
    80011c8a:	00008797          	auipc	a5,0x8
    80011c8e:	7be78793          	addi	a5,a5,1982 # 8001a448 <trampoline_thread_start>
    80011c92:	6398                	ld	a4,0(a5)
    80011c94:	fd843783          	ld	a5,-40(s0)
    80011c98:	03878793          	addi	a5,a5,56
    80011c9c:	863e                	mv	a2,a5
    80011c9e:	fd843783          	ld	a5,-40(s0)
    80011ca2:	2507b683          	ld	a3,592(a5)
    80011ca6:	fd442783          	lw	a5,-44(s0)
    80011caa:	85ba                	mv	a1,a4
    80011cac:	853e                	mv	a0,a5
    80011cae:	2f8000ef          	jal	ra,80011fa6 <sbi_hart_start>
    80011cb2:	87aa                	mv	a5,a0
    80011cb4:	00f037b3          	snez	a5,a5
    80011cb8:	0ff7f793          	andi	a5,a5,255
}
    80011cbc:	853e                	mv	a0,a5
    80011cbe:	70a2                	ld	ra,40(sp)
    80011cc0:	7402                	ld	s0,32(sp)
    80011cc2:	6145                	addi	sp,sp,48
    80011cc4:	8082                	ret

0000000080011cc6 <lgprefix>:
#include <stdarg.h>
#include <csr.h>

static int k_log_level = 0xFFF;

static const char *lgprefix(log_type lt) {
    80011cc6:	1101                	addi	sp,sp,-32
    80011cc8:	ec22                	sd	s0,24(sp)
    80011cca:	1000                	addi	s0,sp,32
    80011ccc:	87aa                	mv	a5,a0
    80011cce:	fef42623          	sw	a5,-20(s0)
    switch (lt) {
    80011cd2:	fec42783          	lw	a5,-20(s0)
    80011cd6:	0007871b          	sext.w	a4,a5
    80011cda:	47a1                	li	a5,8
    80011cdc:	06f70463          	beq	a4,a5,80011d44 <lgprefix+0x7e>
    80011ce0:	fec42783          	lw	a5,-20(s0)
    80011ce4:	0007871b          	sext.w	a4,a5
    80011ce8:	47a1                	li	a5,8
    80011cea:	06e7e263          	bltu	a5,a4,80011d4e <lgprefix+0x88>
    80011cee:	fec42783          	lw	a5,-20(s0)
    80011cf2:	0007871b          	sext.w	a4,a5
    80011cf6:	4791                	li	a5,4
    80011cf8:	02f70c63          	beq	a4,a5,80011d30 <lgprefix+0x6a>
    80011cfc:	fec42783          	lw	a5,-20(s0)
    80011d00:	0007871b          	sext.w	a4,a5
    80011d04:	4791                	li	a5,4
    80011d06:	04e7e463          	bltu	a5,a4,80011d4e <lgprefix+0x88>
    80011d0a:	fec42783          	lw	a5,-20(s0)
    80011d0e:	0007871b          	sext.w	a4,a5
    80011d12:	4785                	li	a5,1
    80011d14:	02f70363          	beq	a4,a5,80011d3a <lgprefix+0x74>
    80011d18:	fec42783          	lw	a5,-20(s0)
    80011d1c:	0007871b          	sext.w	a4,a5
    80011d20:	4789                	li	a5,2
    80011d22:	02f71663          	bne	a4,a5,80011d4e <lgprefix+0x88>
        case LOG_DEBUG:
            return "[DEBUG]: ";
    80011d26:	00008797          	auipc	a5,0x8
    80011d2a:	a0278793          	addi	a5,a5,-1534 # 80019728 <SYSCALLS+0x728>
    80011d2e:	a025                	j	80011d56 <lgprefix+0x90>
        case LOG_INFO:
            return "[INFO]: ";
    80011d30:	00008797          	auipc	a5,0x8
    80011d34:	a0878793          	addi	a5,a5,-1528 # 80019738 <SYSCALLS+0x738>
    80011d38:	a839                	j	80011d56 <lgprefix+0x90>
        case LOG_ERROR:
            return "[ERROR]: ";
    80011d3a:	00008797          	auipc	a5,0x8
    80011d3e:	a0e78793          	addi	a5,a5,-1522 # 80019748 <SYSCALLS+0x748>
    80011d42:	a811                	j	80011d56 <lgprefix+0x90>
        case LOG_FATAL:
            return "[FATAL]: ";
    80011d44:	00008797          	auipc	a5,0x8
    80011d48:	a1478793          	addi	a5,a5,-1516 # 80019758 <SYSCALLS+0x758>
    80011d4c:	a029                	j	80011d56 <lgprefix+0x90>
        default:
            return "";
    80011d4e:	00008797          	auipc	a5,0x8
    80011d52:	a1a78793          	addi	a5,a5,-1510 # 80019768 <SYSCALLS+0x768>
    }
}
    80011d56:	853e                	mv	a0,a5
    80011d58:	6462                	ld	s0,24(sp)
    80011d5a:	6105                	addi	sp,sp,32
    80011d5c:	8082                	ret

0000000080011d5e <vlogf>:

static int vlogf(log_type lt, const char *fmt, va_list args)
{
    80011d5e:	7179                	addi	sp,sp,-48
    80011d60:	f406                	sd	ra,40(sp)
    80011d62:	f022                	sd	s0,32(sp)
    80011d64:	1800                	addi	s0,sp,48
    80011d66:	87aa                	mv	a5,a0
    80011d68:	feb43023          	sd	a1,-32(s0)
    80011d6c:	fcc43c23          	sd	a2,-40(s0)
    80011d70:	fef42623          	sw	a5,-20(s0)
    if (!(lt & k_log_level)) {
    80011d74:	00009797          	auipc	a5,0x9
    80011d78:	28c78793          	addi	a5,a5,652 # 8001b000 <k_log_level>
    80011d7c:	439c                	lw	a5,0(a5)
    80011d7e:	0007871b          	sext.w	a4,a5
    80011d82:	fec42783          	lw	a5,-20(s0)
    80011d86:	8ff9                	and	a5,a5,a4
    80011d88:	2781                	sext.w	a5,a5
    80011d8a:	e399                	bnez	a5,80011d90 <vlogf+0x32>
        return 0;
    80011d8c:	4781                	li	a5,0
    80011d8e:	a02d                	j	80011db8 <vlogf+0x5a>
    }
    int printf(const char *fmt, ...);
    printf("%s", lgprefix(lt));
    80011d90:	fec42783          	lw	a5,-20(s0)
    80011d94:	853e                	mv	a0,a5
    80011d96:	f31ff0ef          	jal	ra,80011cc6 <lgprefix>
    80011d9a:	87aa                	mv	a5,a0
    80011d9c:	85be                	mv	a1,a5
    80011d9e:	00008517          	auipc	a0,0x8
    80011da2:	9d250513          	addi	a0,a0,-1582 # 80019770 <SYSCALLS+0x770>
    80011da6:	3e9020ef          	jal	ra,8001498e <printf>
    int vprintf_(const char *format, va_list va);
    return vprintf_(fmt, args);
    80011daa:	fd843583          	ld	a1,-40(s0)
    80011dae:	fe043503          	ld	a0,-32(s0)
    80011db2:	50b020ef          	jal	ra,80014abc <vprintf_>
    80011db6:	87aa                	mv	a5,a0
}
    80011db8:	853e                	mv	a0,a5
    80011dba:	70a2                	ld	ra,40(sp)
    80011dbc:	7402                	ld	s0,32(sp)
    80011dbe:	6145                	addi	sp,sp,48
    80011dc0:	8082                	ret

0000000080011dc2 <logf>:

int logf(log_type lt, const char *fmt, ...)
{
    80011dc2:	7159                	addi	sp,sp,-112
    80011dc4:	fc06                	sd	ra,56(sp)
    80011dc6:	f822                	sd	s0,48(sp)
    80011dc8:	0080                	addi	s0,sp,64
    80011dca:	fcb43823          	sd	a1,-48(s0)
    80011dce:	e010                	sd	a2,0(s0)
    80011dd0:	e414                	sd	a3,8(s0)
    80011dd2:	e818                	sd	a4,16(s0)
    80011dd4:	ec1c                	sd	a5,24(s0)
    80011dd6:	03043023          	sd	a6,32(s0)
    80011dda:	03143423          	sd	a7,40(s0)
    80011dde:	87aa                	mv	a5,a0
    80011de0:	fcf42e23          	sw	a5,-36(s0)
    va_list va;
    va_start(va, fmt);
    80011de4:	03040793          	addi	a5,s0,48
    80011de8:	fcf43423          	sd	a5,-56(s0)
    80011dec:	fc843783          	ld	a5,-56(s0)
    80011df0:	fd078793          	addi	a5,a5,-48
    80011df4:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(lt, fmt, va);
    80011df8:	fe043703          	ld	a4,-32(s0)
    80011dfc:	fdc42783          	lw	a5,-36(s0)
    80011e00:	863a                	mv	a2,a4
    80011e02:	fd043583          	ld	a1,-48(s0)
    80011e06:	853e                	mv	a0,a5
    80011e08:	f57ff0ef          	jal	ra,80011d5e <vlogf>
    80011e0c:	87aa                	mv	a5,a0
    80011e0e:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80011e12:	fec42783          	lw	a5,-20(s0)
}
    80011e16:	853e                	mv	a0,a5
    80011e18:	70e2                	ld	ra,56(sp)
    80011e1a:	7442                	ld	s0,48(sp)
    80011e1c:	6165                	addi	sp,sp,112
    80011e1e:	8082                	ret

0000000080011e20 <debugf>:

int debugf(const char *fmt, ...)
{
    80011e20:	7159                	addi	sp,sp,-112
    80011e22:	f406                	sd	ra,40(sp)
    80011e24:	f022                	sd	s0,32(sp)
    80011e26:	1800                	addi	s0,sp,48
    80011e28:	fca43c23          	sd	a0,-40(s0)
    80011e2c:	e40c                	sd	a1,8(s0)
    80011e2e:	e810                	sd	a2,16(s0)
    80011e30:	ec14                	sd	a3,24(s0)
    80011e32:	f018                	sd	a4,32(s0)
    80011e34:	f41c                	sd	a5,40(s0)
    80011e36:	03043823          	sd	a6,48(s0)
    80011e3a:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80011e3e:	04040793          	addi	a5,s0,64
    80011e42:	fcf43823          	sd	a5,-48(s0)
    80011e46:	fd043783          	ld	a5,-48(s0)
    80011e4a:	fc878793          	addi	a5,a5,-56
    80011e4e:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(LOG_DEBUG, fmt, va);
    80011e52:	fe043783          	ld	a5,-32(s0)
    80011e56:	863e                	mv	a2,a5
    80011e58:	fd843583          	ld	a1,-40(s0)
    80011e5c:	4509                	li	a0,2
    80011e5e:	f01ff0ef          	jal	ra,80011d5e <vlogf>
    80011e62:	87aa                	mv	a5,a0
    80011e64:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80011e68:	fec42783          	lw	a5,-20(s0)
}
    80011e6c:	853e                	mv	a0,a5
    80011e6e:	70a2                	ld	ra,40(sp)
    80011e70:	7402                	ld	s0,32(sp)
    80011e72:	6165                	addi	sp,sp,112
    80011e74:	8082                	ret

0000000080011e76 <fatalf>:

ATTR_NORET void fatalf(const char *fmt, ...)
{
    80011e76:	7159                	addi	sp,sp,-112
    80011e78:	f406                	sd	ra,40(sp)
    80011e7a:	f022                	sd	s0,32(sp)
    80011e7c:	1800                	addi	s0,sp,48
    80011e7e:	fca43c23          	sd	a0,-40(s0)
    80011e82:	e40c                	sd	a1,8(s0)
    80011e84:	e810                	sd	a2,16(s0)
    80011e86:	ec14                	sd	a3,24(s0)
    80011e88:	f018                	sd	a4,32(s0)
    80011e8a:	f41c                	sd	a5,40(s0)
    80011e8c:	03043823          	sd	a6,48(s0)
    80011e90:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80011e94:	04040793          	addi	a5,s0,64
    80011e98:	fcf43823          	sd	a5,-48(s0)
    80011e9c:	fd043783          	ld	a5,-48(s0)
    80011ea0:	fc878793          	addi	a5,a5,-56
    80011ea4:	fef43423          	sd	a5,-24(s0)
    vlogf(LOG_FATAL, fmt, va);
    80011ea8:	fe843783          	ld	a5,-24(s0)
    80011eac:	863e                	mv	a2,a5
    80011eae:	fd843583          	ld	a1,-40(s0)
    80011eb2:	4521                	li	a0,8
    80011eb4:	eabff0ef          	jal	ra,80011d5e <vlogf>
    va_end(va);

    CSR_CLEAR("sstatus");
    80011eb8:	10001073          	csrw	sstatus,zero
    WFI_LOOP();
    80011ebc:	10500073          	wfi
    80011ec0:	bff5                	j	80011ebc <fatalf+0x46>

0000000080011ec2 <klogset>:
}

void klogset(log_type lt)
{
    80011ec2:	1101                	addi	sp,sp,-32
    80011ec4:	ec22                	sd	s0,24(sp)
    80011ec6:	1000                	addi	s0,sp,32
    80011ec8:	87aa                	mv	a5,a0
    80011eca:	fef42623          	sw	a5,-20(s0)
    k_log_level |= lt;
    80011ece:	00009797          	auipc	a5,0x9
    80011ed2:	13278793          	addi	a5,a5,306 # 8001b000 <k_log_level>
    80011ed6:	439c                	lw	a5,0(a5)
    80011ed8:	0007871b          	sext.w	a4,a5
    80011edc:	fec42783          	lw	a5,-20(s0)
    80011ee0:	8fd9                	or	a5,a5,a4
    80011ee2:	2781                	sext.w	a5,a5
    80011ee4:	0007871b          	sext.w	a4,a5
    80011ee8:	00009797          	auipc	a5,0x9
    80011eec:	11878793          	addi	a5,a5,280 # 8001b000 <k_log_level>
    80011ef0:	c398                	sw	a4,0(a5)
}
    80011ef2:	0001                	nop
    80011ef4:	6462                	ld	s0,24(sp)
    80011ef6:	6105                	addi	sp,sp,32
    80011ef8:	8082                	ret

0000000080011efa <klogclear>:

void klogclear(log_type lt)
{
    80011efa:	1101                	addi	sp,sp,-32
    80011efc:	ec22                	sd	s0,24(sp)
    80011efe:	1000                	addi	s0,sp,32
    80011f00:	87aa                	mv	a5,a0
    80011f02:	fef42623          	sw	a5,-20(s0)
    k_log_level &= ~lt;
    80011f06:	fec42783          	lw	a5,-20(s0)
    80011f0a:	fff7c793          	not	a5,a5
    80011f0e:	0007871b          	sext.w	a4,a5
    80011f12:	00009797          	auipc	a5,0x9
    80011f16:	0ee78793          	addi	a5,a5,238 # 8001b000 <k_log_level>
    80011f1a:	439c                	lw	a5,0(a5)
    80011f1c:	2781                	sext.w	a5,a5
    80011f1e:	8ff9                	and	a5,a5,a4
    80011f20:	2781                	sext.w	a5,a5
    80011f22:	0007871b          	sext.w	a4,a5
    80011f26:	00009797          	auipc	a5,0x9
    80011f2a:	0da78793          	addi	a5,a5,218 # 8001b000 <k_log_level>
    80011f2e:	c398                	sw	a4,0(a5)
}
    80011f30:	0001                	nop
    80011f32:	6462                	ld	s0,24(sp)
    80011f34:	6105                	addi	sp,sp,32
    80011f36:	8082                	ret

0000000080011f38 <sbi_putchar>:
#include <compiler.h>
#include <config.h>
#include <sbi.h>

void sbi_putchar(char c)
{
    80011f38:	1101                	addi	sp,sp,-32
    80011f3a:	ec22                	sd	s0,24(sp)
    80011f3c:	1000                	addi	s0,sp,32
    80011f3e:	87aa                	mv	a5,a0
    80011f40:	fef407a3          	sb	a5,-17(s0)
    asm volatile("mv a7, %0\nmv a0, %1\necall" ::"r"(SBI_SVCALL_PUTCHAR), "r"(c) : "a7", "a0");
    80011f44:	47a5                	li	a5,9
    80011f46:	fef44703          	lbu	a4,-17(s0)
    80011f4a:	88be                	mv	a7,a5
    80011f4c:	853a                	mv	a0,a4
    80011f4e:	00000073          	ecall
}
    80011f52:	0001                	nop
    80011f54:	6462                	ld	s0,24(sp)
    80011f56:	6105                	addi	sp,sp,32
    80011f58:	8082                	ret

0000000080011f5a <sbi_getchar>:

char sbi_getchar(void)
{
    80011f5a:	1101                	addi	sp,sp,-32
    80011f5c:	ec22                	sd	s0,24(sp)
    80011f5e:	1000                	addi	s0,sp,32
    char c;
    asm volatile("mv a7, %1\necall\nmv %0, a0\n" : "=r"(c) : "r"(SBI_SVCALL_GETCHAR) : "a7", "a0");
    80011f60:	47a9                	li	a5,10
    80011f62:	88be                	mv	a7,a5
    80011f64:	00000073          	ecall
    80011f68:	87aa                	mv	a5,a0
    80011f6a:	fef407a3          	sb	a5,-17(s0)
    return c;
    80011f6e:	fef44783          	lbu	a5,-17(s0)
}
    80011f72:	853e                	mv	a0,a5
    80011f74:	6462                	ld	s0,24(sp)
    80011f76:	6105                	addi	sp,sp,32
    80011f78:	8082                	ret

0000000080011f7a <sbi_hart_get_status>:

int sbi_hart_get_status(unsigned int hart)
{
    80011f7a:	7179                	addi	sp,sp,-48
    80011f7c:	f422                	sd	s0,40(sp)
    80011f7e:	1800                	addi	s0,sp,48
    80011f80:	87aa                	mv	a5,a0
    80011f82:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\necall\nmv %0, a0\n"
    80011f86:	4785                	li	a5,1
    80011f88:	fdc42703          	lw	a4,-36(s0)
    80011f8c:	88be                	mv	a7,a5
    80011f8e:	853a                	mv	a0,a4
    80011f90:	00000073          	ecall
    80011f94:	87aa                	mv	a5,a0
    80011f96:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_STATUS), "r"(hart)
                 : "a0", "a7");
    return stat;
    80011f9a:	fec42783          	lw	a5,-20(s0)
}
    80011f9e:	853e                	mv	a0,a5
    80011fa0:	7422                	ld	s0,40(sp)
    80011fa2:	6145                	addi	sp,sp,48
    80011fa4:	8082                	ret

0000000080011fa6 <sbi_hart_start>:

int sbi_hart_start(unsigned int hart, unsigned long target, unsigned long scratch, unsigned long satp)
{
    80011fa6:	7139                	addi	sp,sp,-64
    80011fa8:	fc22                	sd	s0,56(sp)
    80011faa:	0080                	addi	s0,sp,64
    80011fac:	87aa                	mv	a5,a0
    80011fae:	fcb43823          	sd	a1,-48(s0)
    80011fb2:	fcc43423          	sd	a2,-56(s0)
    80011fb6:	fcd43023          	sd	a3,-64(s0)
    80011fba:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\nmv a1, %3\nmv a2, %4\nmv a3, %5\necall\nmv %0, a0\n"
    80011fbe:	4789                	li	a5,2
    80011fc0:	fdc42703          	lw	a4,-36(s0)
    80011fc4:	fd043683          	ld	a3,-48(s0)
    80011fc8:	fc843803          	ld	a6,-56(s0)
    80011fcc:	fc043303          	ld	t1,-64(s0)
    80011fd0:	88be                	mv	a7,a5
    80011fd2:	853a                	mv	a0,a4
    80011fd4:	85b6                	mv	a1,a3
    80011fd6:	8642                	mv	a2,a6
    80011fd8:	869a                	mv	a3,t1
    80011fda:	00000073          	ecall
    80011fde:	87aa                	mv	a5,a0
    80011fe0:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_START), "r"(hart), "r"(target), "r"(scratch), "r"(satp)
                 : "a0", "a1", "a2", "a7");
    return stat;
    80011fe4:	fec42783          	lw	a5,-20(s0)
}
    80011fe8:	853e                	mv	a0,a5
    80011fea:	7462                	ld	s0,56(sp)
    80011fec:	6121                	addi	sp,sp,64
    80011fee:	8082                	ret

0000000080011ff0 <sbi_hart_stop>:

void sbi_hart_stop(void)
{
    80011ff0:	1141                	addi	sp,sp,-16
    80011ff2:	e422                	sd	s0,8(sp)
    80011ff4:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall\nwfi" : : "r"(SBI_SVCALL_HART_STOP) : "a0", "a7");
    80011ff6:	478d                	li	a5,3
    80011ff8:	88be                	mv	a7,a5
    80011ffa:	00000073          	ecall
    80011ffe:	10500073          	wfi
}
    80012002:	0001                	nop
    80012004:	6422                	ld	s0,8(sp)
    80012006:	0141                	addi	sp,sp,16
    80012008:	8082                	ret

000000008001200a <sbi_poweroff>:

void sbi_poweroff(void)
{
    8001200a:	1141                	addi	sp,sp,-16
    8001200c:	e422                	sd	s0,8(sp)
    8001200e:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" : : "r"(SBI_SVCALL_POWEROFF) : "a0", "a7");
    80012010:	47b1                	li	a5,12
    80012012:	88be                	mv	a7,a5
    80012014:	00000073          	ecall
}
    80012018:	0001                	nop
    8001201a:	6422                	ld	s0,8(sp)
    8001201c:	0141                	addi	sp,sp,16
    8001201e:	8082                	ret

0000000080012020 <sbi_get_time>:

unsigned long sbi_get_time(void)
{
    80012020:	1101                	addi	sp,sp,-32
    80012022:	ec22                	sd	s0,24(sp)
    80012024:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_GET_TIME) : "a0", "a7");
    80012026:	4791                	li	a5,4
    80012028:	88be                	mv	a7,a5
    8001202a:	00000073          	ecall
    8001202e:	87aa                	mv	a5,a0
    80012030:	fef43423          	sd	a5,-24(s0)
    return ret;
    80012034:	fe843783          	ld	a5,-24(s0)
}
    80012038:	853e                	mv	a0,a5
    8001203a:	6462                	ld	s0,24(sp)
    8001203c:	6105                	addi	sp,sp,32
    8001203e:	8082                	ret

0000000080012040 <sbi_set_timer>:

void sbi_set_timer(unsigned int hart, unsigned long val)
{
    80012040:	1101                	addi	sp,sp,-32
    80012042:	ec22                	sd	s0,24(sp)
    80012044:	1000                	addi	s0,sp,32
    80012046:	87aa                	mv	a5,a0
    80012048:	feb43023          	sd	a1,-32(s0)
    8001204c:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_SET_TIMECMP), "r"(hart),
    80012050:	4795                	li	a5,5
    80012052:	fec42703          	lw	a4,-20(s0)
    80012056:	fe043683          	ld	a3,-32(s0)
    8001205a:	88be                	mv	a7,a5
    8001205c:	853a                	mv	a0,a4
    8001205e:	85b6                	mv	a1,a3
    80012060:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    80012064:	0001                	nop
    80012066:	6462                	ld	s0,24(sp)
    80012068:	6105                	addi	sp,sp,32
    8001206a:	8082                	ret

000000008001206c <sbi_add_timer>:

void sbi_add_timer(unsigned int hart, unsigned long val)
{
    8001206c:	1101                	addi	sp,sp,-32
    8001206e:	ec22                	sd	s0,24(sp)
    80012070:	1000                	addi	s0,sp,32
    80012072:	87aa                	mv	a5,a0
    80012074:	feb43023          	sd	a1,-32(s0)
    80012078:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_ADD_TIMECMP), "r"(hart),
    8001207c:	4799                	li	a5,6
    8001207e:	fec42703          	lw	a4,-20(s0)
    80012082:	fe043683          	ld	a3,-32(s0)
    80012086:	88be                	mv	a7,a5
    80012088:	853a                	mv	a0,a4
    8001208a:	85b6                	mv	a1,a3
    8001208c:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    80012090:	0001                	nop
    80012092:	6462                	ld	s0,24(sp)
    80012094:	6105                	addi	sp,sp,32
    80012096:	8082                	ret

0000000080012098 <sbi_ack_timer>:

void sbi_ack_timer(void)
{
    80012098:	1141                	addi	sp,sp,-16
    8001209a:	e422                	sd	s0,8(sp)
    8001209c:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" ::"r"(SBI_SVCALL_ACK_TIMER) : "a7");
    8001209e:	479d                	li	a5,7
    800120a0:	88be                	mv	a7,a5
    800120a2:	00000073          	ecall
}
    800120a6:	0001                	nop
    800120a8:	6422                	ld	s0,8(sp)
    800120aa:	0141                	addi	sp,sp,16
    800120ac:	8082                	ret

00000000800120ae <sbi_rtc_get_time>:

unsigned long sbi_rtc_get_time(void)
{
    800120ae:	1101                	addi	sp,sp,-32
    800120b0:	ec22                	sd	s0,24(sp)
    800120b2:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0"
    800120b4:	47a1                	li	a5,8
    800120b6:	88be                	mv	a7,a5
    800120b8:	00000073          	ecall
    800120bc:	87aa                	mv	a5,a0
    800120be:	fef43423          	sd	a5,-24(s0)
                 : "=r"(ret)
                 : "r"(SBI_SVCALL_RTC_GET_TIME)
                 : "a0", "a7");
    return ret;
    800120c2:	fe843783          	ld	a5,-24(s0)
}
    800120c6:	853e                	mv	a0,a5
    800120c8:	6462                	ld	s0,24(sp)
    800120ca:	6105                	addi	sp,sp,32
    800120cc:	8082                	ret

00000000800120ce <sbi_whoami>:

int sbi_whoami(void)
{
    800120ce:	1101                	addi	sp,sp,-32
    800120d0:	ec22                	sd	s0,24(sp)
    800120d2:	1000                	addi	s0,sp,32
    int ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_WHOAMI) : "a0", "a7");
    800120d4:	47ad                	li	a5,11
    800120d6:	88be                	mv	a7,a5
    800120d8:	00000073          	ecall
    800120dc:	87aa                	mv	a5,a0
    800120de:	fef42623          	sw	a5,-20(s0)
    return ret;
    800120e2:	fec42783          	lw	a5,-20(s0)
}
    800120e6:	853e                	mv	a0,a5
    800120e8:	6462                	ld	s0,24(sp)
    800120ea:	6105                	addi	sp,sp,32
    800120ec:	8082                	ret

00000000800120ee <sbi_num_harts>:

int sbi_num_harts(void)
{
    800120ee:	1101                	addi	sp,sp,-32
    800120f0:	ec06                	sd	ra,24(sp)
    800120f2:	e822                	sd	s0,16(sp)
    800120f4:	1000                	addi	s0,sp,32
    unsigned int i;
    int num_harts = 0;
    800120f6:	fe042423          	sw	zero,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    800120fa:	fe042623          	sw	zero,-20(s0)
    800120fe:	a015                	j	80012122 <sbi_num_harts+0x34>
        if (sbi_hart_get_status(i) != 0) {
    80012100:	fec42783          	lw	a5,-20(s0)
    80012104:	853e                	mv	a0,a5
    80012106:	e75ff0ef          	jal	ra,80011f7a <sbi_hart_get_status>
    8001210a:	87aa                	mv	a5,a0
    8001210c:	c791                	beqz	a5,80012118 <sbi_num_harts+0x2a>
            num_harts += 1;
    8001210e:	fe842783          	lw	a5,-24(s0)
    80012112:	2785                	addiw	a5,a5,1
    80012114:	fef42423          	sw	a5,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80012118:	fec42783          	lw	a5,-20(s0)
    8001211c:	2785                	addiw	a5,a5,1
    8001211e:	fef42623          	sw	a5,-20(s0)
    80012122:	fec42783          	lw	a5,-20(s0)
    80012126:	0007871b          	sext.w	a4,a5
    8001212a:	478d                	li	a5,3
    8001212c:	fce7fae3          	bgeu	a5,a4,80012100 <sbi_num_harts+0x12>
        }
    }
    return num_harts;
    80012130:	fe842783          	lw	a5,-24(s0)
}
    80012134:	853e                	mv	a0,a5
    80012136:	60e2                	ld	ra,24(sp)
    80012138:	6442                	ld	s0,16(sp)
    8001213a:	6105                	addi	sp,sp,32
    8001213c:	8082                	ret

000000008001213e <plic_set_priority>:
#define PLIC_PCI_INTB 33
#define PLIC_PCI_INTC 34
#define PLIC_PCI_INTD 35

void plic_set_priority(int interrupt_id, char priority)
{
    8001213e:	7179                	addi	sp,sp,-48
    80012140:	f422                	sd	s0,40(sp)
    80012142:	1800                	addi	s0,sp,48
    80012144:	87aa                	mv	a5,a0
    80012146:	872e                	mv	a4,a1
    80012148:	fcf42e23          	sw	a5,-36(s0)
    8001214c:	87ba                	mv	a5,a4
    8001214e:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_PRIORITY(interrupt_id);
    80012152:	fdc42783          	lw	a5,-36(s0)
    80012156:	0027979b          	slliw	a5,a5,0x2
    8001215a:	2781                	sext.w	a5,a5
    8001215c:	873e                	mv	a4,a5
    8001215e:	0c0007b7          	lui	a5,0xc000
    80012162:	97ba                	add	a5,a5,a4
    80012164:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    80012168:	fdb44783          	lbu	a5,-37(s0)
    8001216c:	2781                	sext.w	a5,a5
    8001216e:	8b9d                	andi	a5,a5,7
    80012170:	0007871b          	sext.w	a4,a5
    80012174:	fe843783          	ld	a5,-24(s0)
    80012178:	c398                	sw	a4,0(a5)
}
    8001217a:	0001                	nop
    8001217c:	7422                	ld	s0,40(sp)
    8001217e:	6145                	addi	sp,sp,48
    80012180:	8082                	ret

0000000080012182 <plic_set_threshold>:
void plic_set_threshold(int hart, char priority)
{
    80012182:	7179                	addi	sp,sp,-48
    80012184:	f422                	sd	s0,40(sp)
    80012186:	1800                	addi	s0,sp,48
    80012188:	87aa                	mv	a5,a0
    8001218a:	872e                	mv	a4,a1
    8001218c:	fcf42e23          	sw	a5,-36(s0)
    80012190:	87ba                	mv	a5,a4
    80012192:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_THRESHOLD(hart, PLIC_MODE_SUPERVISOR);
    80012196:	fdc42783          	lw	a5,-36(s0)
    8001219a:	0017979b          	slliw	a5,a5,0x1
    8001219e:	2781                	sext.w	a5,a5
    800121a0:	2785                	addiw	a5,a5,1
    800121a2:	2781                	sext.w	a5,a5
    800121a4:	00c7979b          	slliw	a5,a5,0xc
    800121a8:	2781                	sext.w	a5,a5
    800121aa:	873e                	mv	a4,a5
    800121ac:	0c2007b7          	lui	a5,0xc200
    800121b0:	97ba                	add	a5,a5,a4
    800121b2:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    800121b6:	fdb44783          	lbu	a5,-37(s0)
    800121ba:	2781                	sext.w	a5,a5
    800121bc:	8b9d                	andi	a5,a5,7
    800121be:	0007871b          	sext.w	a4,a5
    800121c2:	fe843783          	ld	a5,-24(s0)
    800121c6:	c398                	sw	a4,0(a5)
}
    800121c8:	0001                	nop
    800121ca:	7422                	ld	s0,40(sp)
    800121cc:	6145                	addi	sp,sp,48
    800121ce:	8082                	ret

00000000800121d0 <plic_enable>:
void plic_enable(int hart, int interrupt_id)
{
    800121d0:	7179                	addi	sp,sp,-48
    800121d2:	f422                	sd	s0,40(sp)
    800121d4:	1800                	addi	s0,sp,48
    800121d6:	87aa                	mv	a5,a0
    800121d8:	872e                	mv	a4,a1
    800121da:	fcf42e23          	sw	a5,-36(s0)
    800121de:	87ba                	mv	a5,a4
    800121e0:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    800121e4:	fdc42783          	lw	a5,-36(s0)
    800121e8:	0017979b          	slliw	a5,a5,0x1
    800121ec:	2781                	sext.w	a5,a5
    800121ee:	2785                	addiw	a5,a5,1
    800121f0:	2781                	sext.w	a5,a5
    800121f2:	0077979b          	slliw	a5,a5,0x7
    800121f6:	2781                	sext.w	a5,a5
    800121f8:	873e                	mv	a4,a5
    800121fa:	0c0027b7          	lui	a5,0xc002
    800121fe:	97ba                	add	a5,a5,a4
    80012200:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] |= 1UL << (interrupt_id % 32);
    80012204:	fd842783          	lw	a5,-40(s0)
    80012208:	41f7d71b          	sraiw	a4,a5,0x1f
    8001220c:	01b7571b          	srliw	a4,a4,0x1b
    80012210:	9fb9                	addw	a5,a5,a4
    80012212:	4057d79b          	sraiw	a5,a5,0x5
    80012216:	0007869b          	sext.w	a3,a5
    8001221a:	87b6                	mv	a5,a3
    8001221c:	078a                	slli	a5,a5,0x2
    8001221e:	fe843703          	ld	a4,-24(s0)
    80012222:	97ba                	add	a5,a5,a4
    80012224:	438c                	lw	a1,0(a5)
    80012226:	fd842703          	lw	a4,-40(s0)
    8001222a:	41f7579b          	sraiw	a5,a4,0x1f
    8001222e:	01b7d79b          	srliw	a5,a5,0x1b
    80012232:	9f3d                	addw	a4,a4,a5
    80012234:	8b7d                	andi	a4,a4,31
    80012236:	40f707bb          	subw	a5,a4,a5
    8001223a:	2781                	sext.w	a5,a5
    8001223c:	873e                	mv	a4,a5
    8001223e:	4785                	li	a5,1
    80012240:	00e797b3          	sll	a5,a5,a4
    80012244:	0007861b          	sext.w	a2,a5
    80012248:	87b6                	mv	a5,a3
    8001224a:	078a                	slli	a5,a5,0x2
    8001224c:	fe843703          	ld	a4,-24(s0)
    80012250:	97ba                	add	a5,a5,a4
    80012252:	86ae                	mv	a3,a1
    80012254:	8732                	mv	a4,a2
    80012256:	8f55                	or	a4,a4,a3
    80012258:	2701                	sext.w	a4,a4
    8001225a:	c398                	sw	a4,0(a5)
}
    8001225c:	0001                	nop
    8001225e:	7422                	ld	s0,40(sp)
    80012260:	6145                	addi	sp,sp,48
    80012262:	8082                	ret

0000000080012264 <plic_disable>:
void plic_disable(int hart, int interrupt_id)
{
    80012264:	7179                	addi	sp,sp,-48
    80012266:	f422                	sd	s0,40(sp)
    80012268:	1800                	addi	s0,sp,48
    8001226a:	87aa                	mv	a5,a0
    8001226c:	872e                	mv	a4,a1
    8001226e:	fcf42e23          	sw	a5,-36(s0)
    80012272:	87ba                	mv	a5,a4
    80012274:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    80012278:	fdc42783          	lw	a5,-36(s0)
    8001227c:	0017979b          	slliw	a5,a5,0x1
    80012280:	2781                	sext.w	a5,a5
    80012282:	2785                	addiw	a5,a5,1
    80012284:	2781                	sext.w	a5,a5
    80012286:	0077979b          	slliw	a5,a5,0x7
    8001228a:	2781                	sext.w	a5,a5
    8001228c:	873e                	mv	a4,a5
    8001228e:	0c0027b7          	lui	a5,0xc002
    80012292:	97ba                	add	a5,a5,a4
    80012294:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] &= ~(1UL << (interrupt_id % 32));
    80012298:	fd842783          	lw	a5,-40(s0)
    8001229c:	41f7d71b          	sraiw	a4,a5,0x1f
    800122a0:	01b7571b          	srliw	a4,a4,0x1b
    800122a4:	9fb9                	addw	a5,a5,a4
    800122a6:	4057d79b          	sraiw	a5,a5,0x5
    800122aa:	0007869b          	sext.w	a3,a5
    800122ae:	87b6                	mv	a5,a3
    800122b0:	078a                	slli	a5,a5,0x2
    800122b2:	fe843703          	ld	a4,-24(s0)
    800122b6:	97ba                	add	a5,a5,a4
    800122b8:	438c                	lw	a1,0(a5)
    800122ba:	fd842703          	lw	a4,-40(s0)
    800122be:	41f7579b          	sraiw	a5,a4,0x1f
    800122c2:	01b7d79b          	srliw	a5,a5,0x1b
    800122c6:	9f3d                	addw	a4,a4,a5
    800122c8:	8b7d                	andi	a4,a4,31
    800122ca:	40f707bb          	subw	a5,a4,a5
    800122ce:	2781                	sext.w	a5,a5
    800122d0:	873e                	mv	a4,a5
    800122d2:	4785                	li	a5,1
    800122d4:	00e797b3          	sll	a5,a5,a4
    800122d8:	2781                	sext.w	a5,a5
    800122da:	fff7c793          	not	a5,a5
    800122de:	0007861b          	sext.w	a2,a5
    800122e2:	87b6                	mv	a5,a3
    800122e4:	078a                	slli	a5,a5,0x2
    800122e6:	fe843703          	ld	a4,-24(s0)
    800122ea:	97ba                	add	a5,a5,a4
    800122ec:	86ae                	mv	a3,a1
    800122ee:	8732                	mv	a4,a2
    800122f0:	8f75                	and	a4,a4,a3
    800122f2:	2701                	sext.w	a4,a4
    800122f4:	c398                	sw	a4,0(a5)
}
    800122f6:	0001                	nop
    800122f8:	7422                	ld	s0,40(sp)
    800122fa:	6145                	addi	sp,sp,48
    800122fc:	8082                	ret

00000000800122fe <plic_claim>:
uint32_t plic_claim(int hart)
{
    800122fe:	7179                	addi	sp,sp,-48
    80012300:	f422                	sd	s0,40(sp)
    80012302:	1800                	addi	s0,sp,48
    80012304:	87aa                	mv	a5,a0
    80012306:	fcf42e23          	sw	a5,-36(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    8001230a:	fdc42783          	lw	a5,-36(s0)
    8001230e:	0017979b          	slliw	a5,a5,0x1
    80012312:	2781                	sext.w	a5,a5
    80012314:	2785                	addiw	a5,a5,1
    80012316:	2781                	sext.w	a5,a5
    80012318:	00c7979b          	slliw	a5,a5,0xc
    8001231c:	2781                	sext.w	a5,a5
    8001231e:	873e                	mv	a4,a5
    80012320:	0c2007b7          	lui	a5,0xc200
    80012324:	0791                	addi	a5,a5,4
    80012326:	97ba                	add	a5,a5,a4
    80012328:	fef43423          	sd	a5,-24(s0)
    return *base;
    8001232c:	fe843783          	ld	a5,-24(s0)
    80012330:	439c                	lw	a5,0(a5)
}
    80012332:	853e                	mv	a0,a5
    80012334:	7422                	ld	s0,40(sp)
    80012336:	6145                	addi	sp,sp,48
    80012338:	8082                	ret

000000008001233a <plic_complete>:
void plic_complete(int hart, int id)
{
    8001233a:	7179                	addi	sp,sp,-48
    8001233c:	f422                	sd	s0,40(sp)
    8001233e:	1800                	addi	s0,sp,48
    80012340:	87aa                	mv	a5,a0
    80012342:	872e                	mv	a4,a1
    80012344:	fcf42e23          	sw	a5,-36(s0)
    80012348:	87ba                	mv	a5,a4
    8001234a:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    8001234e:	fdc42783          	lw	a5,-36(s0)
    80012352:	0017979b          	slliw	a5,a5,0x1
    80012356:	2781                	sext.w	a5,a5
    80012358:	2785                	addiw	a5,a5,1
    8001235a:	2781                	sext.w	a5,a5
    8001235c:	00c7979b          	slliw	a5,a5,0xc
    80012360:	2781                	sext.w	a5,a5
    80012362:	873e                	mv	a4,a5
    80012364:	0c2007b7          	lui	a5,0xc200
    80012368:	0791                	addi	a5,a5,4
    8001236a:	97ba                	add	a5,a5,a4
    8001236c:	fef43423          	sd	a5,-24(s0)
    *base          = id;
    80012370:	fd842703          	lw	a4,-40(s0)
    80012374:	fe843783          	ld	a5,-24(s0)
    80012378:	c398                	sw	a4,0(a5)
}
    8001237a:	0001                	nop
    8001237c:	7422                	ld	s0,40(sp)
    8001237e:	6145                	addi	sp,sp,48
    80012380:	8082                	ret

0000000080012382 <plic_handle_irq>:

void plic_handle_irq(int hart)
{
    80012382:	7179                	addi	sp,sp,-48
    80012384:	f406                	sd	ra,40(sp)
    80012386:	f022                	sd	s0,32(sp)
    80012388:	1800                	addi	s0,sp,48
    8001238a:	87aa                	mv	a5,a0
    8001238c:	fcf42e23          	sw	a5,-36(s0)
    int irq = plic_claim(hart);
    80012390:	fdc42783          	lw	a5,-36(s0)
    80012394:	853e                	mv	a0,a5
    80012396:	f69ff0ef          	jal	ra,800122fe <plic_claim>
    8001239a:	87aa                	mv	a5,a0
    8001239c:	2781                	sext.w	a5,a5
    8001239e:	fef42623          	sw	a5,-20(s0)
            pci_dispatch_irq(irq);
#endif
            break;
    }

    plic_complete(hart, irq);
    800123a2:	fec42703          	lw	a4,-20(s0)
    800123a6:	fdc42783          	lw	a5,-36(s0)
    800123aa:	85ba                	mv	a1,a4
    800123ac:	853e                	mv	a0,a5
    800123ae:	f8dff0ef          	jal	ra,8001233a <plic_complete>
}
    800123b2:	0001                	nop
    800123b4:	70a2                	ld	ra,40(sp)
    800123b6:	7402                	ld	s0,32(sp)
    800123b8:	6145                	addi	sp,sp,48
    800123ba:	8082                	ret

00000000800123bc <plic_init>:

void plic_init(void)
{
    800123bc:	1141                	addi	sp,sp,-16
    800123be:	e406                	sd	ra,8(sp)
    800123c0:	e022                	sd	s0,0(sp)
    800123c2:	0800                	addi	s0,sp,16
    plic_enable(0, PLIC_PCI_INTA);
    800123c4:	02000593          	li	a1,32
    800123c8:	4501                	li	a0,0
    800123ca:	e07ff0ef          	jal	ra,800121d0 <plic_enable>
    plic_enable(0, PLIC_PCI_INTB);
    800123ce:	02100593          	li	a1,33
    800123d2:	4501                	li	a0,0
    800123d4:	dfdff0ef          	jal	ra,800121d0 <plic_enable>
    plic_enable(0, PLIC_PCI_INTC);
    800123d8:	02200593          	li	a1,34
    800123dc:	4501                	li	a0,0
    800123de:	df3ff0ef          	jal	ra,800121d0 <plic_enable>
    plic_enable(0, PLIC_PCI_INTD);
    800123e2:	02300593          	li	a1,35
    800123e6:	4501                	li	a0,0
    800123e8:	de9ff0ef          	jal	ra,800121d0 <plic_enable>

    plic_set_threshold(0, 1);
    800123ec:	4585                	li	a1,1
    800123ee:	4501                	li	a0,0
    800123f0:	d93ff0ef          	jal	ra,80012182 <plic_set_threshold>

    plic_set_priority(PLIC_PCI_INTA, 3);
    800123f4:	458d                	li	a1,3
    800123f6:	02000513          	li	a0,32
    800123fa:	d45ff0ef          	jal	ra,8001213e <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTB, 3);
    800123fe:	458d                	li	a1,3
    80012400:	02100513          	li	a0,33
    80012404:	d3bff0ef          	jal	ra,8001213e <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTC, 3);
    80012408:	458d                	li	a1,3
    8001240a:	02200513          	li	a0,34
    8001240e:	d31ff0ef          	jal	ra,8001213e <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTD, 3);
    80012412:	458d                	li	a1,3
    80012414:	02300513          	li	a0,35
    80012418:	d27ff0ef          	jal	ra,8001213e <plic_set_priority>
}
    8001241c:	0001                	nop
    8001241e:	60a2                	ld	ra,8(sp)
    80012420:	6402                	ld	s0,0(sp)
    80012422:	0141                	addi	sp,sp,16
    80012424:	8082                	ret

0000000080012426 <set_taken>:

static uint8_t *bookkeeping;  // Pointer to the bookkeeping area

// For some reason, the macros didn't work for me, so I used the static functions like Marz said and it works.
static void set_taken(uint64_t index)
{
    80012426:	1101                	addi	sp,sp,-32
    80012428:	ec22                	sd	s0,24(sp)
    8001242a:	1000                	addi	s0,sp,32
    8001242c:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2));
    80012430:	00006797          	auipc	a5,0x6
    80012434:	c2078793          	addi	a5,a5,-992 # 80018050 <bookkeeping>
    80012438:	6398                	ld	a4,0(a5)
    8001243a:	fe843783          	ld	a5,-24(s0)
    8001243e:	8389                	srli	a5,a5,0x2
    80012440:	973e                	add	a4,a4,a5
    80012442:	00074703          	lbu	a4,0(a4) # ffffffffc0fff000 <_heap_end+0xffffffff38fef000>
    80012446:	0187169b          	slliw	a3,a4,0x18
    8001244a:	4186d69b          	sraiw	a3,a3,0x18
    8001244e:	fe843703          	ld	a4,-24(s0)
    80012452:	2701                	sext.w	a4,a4
    80012454:	8b0d                	andi	a4,a4,3
    80012456:	2701                	sext.w	a4,a4
    80012458:	0017171b          	slliw	a4,a4,0x1
    8001245c:	2701                	sext.w	a4,a4
    8001245e:	4605                	li	a2,1
    80012460:	00e6173b          	sllw	a4,a2,a4
    80012464:	2701                	sext.w	a4,a4
    80012466:	0187171b          	slliw	a4,a4,0x18
    8001246a:	4187571b          	sraiw	a4,a4,0x18
    8001246e:	8f55                	or	a4,a4,a3
    80012470:	0187169b          	slliw	a3,a4,0x18
    80012474:	4186d69b          	sraiw	a3,a3,0x18
    80012478:	00006717          	auipc	a4,0x6
    8001247c:	bd870713          	addi	a4,a4,-1064 # 80018050 <bookkeeping>
    80012480:	6318                	ld	a4,0(a4)
    80012482:	97ba                	add	a5,a5,a4
    80012484:	0ff6f713          	andi	a4,a3,255
    80012488:	00e78023          	sb	a4,0(a5)
}
    8001248c:	0001                	nop
    8001248e:	6462                	ld	s0,24(sp)
    80012490:	6105                	addi	sp,sp,32
    80012492:	8082                	ret

0000000080012494 <clear_taken>:

static void clear_taken(uint64_t index)
{
    80012494:	1101                	addi	sp,sp,-32
    80012496:	ec22                	sd	s0,24(sp)
    80012498:	1000                	addi	s0,sp,32
    8001249a:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2));
    8001249e:	00006797          	auipc	a5,0x6
    800124a2:	bb278793          	addi	a5,a5,-1102 # 80018050 <bookkeeping>
    800124a6:	6398                	ld	a4,0(a5)
    800124a8:	fe843783          	ld	a5,-24(s0)
    800124ac:	8389                	srli	a5,a5,0x2
    800124ae:	973e                	add	a4,a4,a5
    800124b0:	00074703          	lbu	a4,0(a4)
    800124b4:	0187169b          	slliw	a3,a4,0x18
    800124b8:	4186d69b          	sraiw	a3,a3,0x18
    800124bc:	fe843703          	ld	a4,-24(s0)
    800124c0:	2701                	sext.w	a4,a4
    800124c2:	8b0d                	andi	a4,a4,3
    800124c4:	2701                	sext.w	a4,a4
    800124c6:	0017171b          	slliw	a4,a4,0x1
    800124ca:	2701                	sext.w	a4,a4
    800124cc:	4605                	li	a2,1
    800124ce:	00e6173b          	sllw	a4,a2,a4
    800124d2:	2701                	sext.w	a4,a4
    800124d4:	0187171b          	slliw	a4,a4,0x18
    800124d8:	4187571b          	sraiw	a4,a4,0x18
    800124dc:	fff74713          	not	a4,a4
    800124e0:	0187171b          	slliw	a4,a4,0x18
    800124e4:	4187571b          	sraiw	a4,a4,0x18
    800124e8:	8f75                	and	a4,a4,a3
    800124ea:	0187169b          	slliw	a3,a4,0x18
    800124ee:	4186d69b          	sraiw	a3,a3,0x18
    800124f2:	00006717          	auipc	a4,0x6
    800124f6:	b5e70713          	addi	a4,a4,-1186 # 80018050 <bookkeeping>
    800124fa:	6318                	ld	a4,0(a4)
    800124fc:	97ba                	add	a5,a5,a4
    800124fe:	0ff6f713          	andi	a4,a3,255
    80012502:	00e78023          	sb	a4,0(a5)
}
    80012506:	0001                	nop
    80012508:	6462                	ld	s0,24(sp)
    8001250a:	6105                	addi	sp,sp,32
    8001250c:	8082                	ret

000000008001250e <is_taken>:

static int is_taken(uint64_t index)
{
    8001250e:	1101                	addi	sp,sp,-32
    80012510:	ec22                	sd	s0,24(sp)
    80012512:	1000                	addi	s0,sp,32
    80012514:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2));
    80012518:	00006797          	auipc	a5,0x6
    8001251c:	b3878793          	addi	a5,a5,-1224 # 80018050 <bookkeeping>
    80012520:	6398                	ld	a4,0(a5)
    80012522:	fe843783          	ld	a5,-24(s0)
    80012526:	8389                	srli	a5,a5,0x2
    80012528:	97ba                	add	a5,a5,a4
    8001252a:	0007c783          	lbu	a5,0(a5)
    8001252e:	0007871b          	sext.w	a4,a5
    80012532:	fe843783          	ld	a5,-24(s0)
    80012536:	2781                	sext.w	a5,a5
    80012538:	8b8d                	andi	a5,a5,3
    8001253a:	2781                	sext.w	a5,a5
    8001253c:	0017979b          	slliw	a5,a5,0x1
    80012540:	2781                	sext.w	a5,a5
    80012542:	4685                	li	a3,1
    80012544:	00f697bb          	sllw	a5,a3,a5
    80012548:	2781                	sext.w	a5,a5
    8001254a:	8ff9                	and	a5,a5,a4
    8001254c:	2781                	sext.w	a5,a5
}
    8001254e:	853e                	mv	a0,a5
    80012550:	6462                	ld	s0,24(sp)
    80012552:	6105                	addi	sp,sp,32
    80012554:	8082                	ret

0000000080012556 <set_last>:

static void set_last(uint64_t index)
{
    80012556:	1101                	addi	sp,sp,-32
    80012558:	ec22                	sd	s0,24(sp)
    8001255a:	1000                	addi	s0,sp,32
    8001255c:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2 + 1));
    80012560:	00006797          	auipc	a5,0x6
    80012564:	af078793          	addi	a5,a5,-1296 # 80018050 <bookkeeping>
    80012568:	6398                	ld	a4,0(a5)
    8001256a:	fe843783          	ld	a5,-24(s0)
    8001256e:	8389                	srli	a5,a5,0x2
    80012570:	973e                	add	a4,a4,a5
    80012572:	00074703          	lbu	a4,0(a4)
    80012576:	0187169b          	slliw	a3,a4,0x18
    8001257a:	4186d69b          	sraiw	a3,a3,0x18
    8001257e:	fe843703          	ld	a4,-24(s0)
    80012582:	2701                	sext.w	a4,a4
    80012584:	8b0d                	andi	a4,a4,3
    80012586:	2701                	sext.w	a4,a4
    80012588:	0017171b          	slliw	a4,a4,0x1
    8001258c:	2701                	sext.w	a4,a4
    8001258e:	2705                	addiw	a4,a4,1
    80012590:	2701                	sext.w	a4,a4
    80012592:	4605                	li	a2,1
    80012594:	00e6173b          	sllw	a4,a2,a4
    80012598:	2701                	sext.w	a4,a4
    8001259a:	0187171b          	slliw	a4,a4,0x18
    8001259e:	4187571b          	sraiw	a4,a4,0x18
    800125a2:	8f55                	or	a4,a4,a3
    800125a4:	0187169b          	slliw	a3,a4,0x18
    800125a8:	4186d69b          	sraiw	a3,a3,0x18
    800125ac:	00006717          	auipc	a4,0x6
    800125b0:	aa470713          	addi	a4,a4,-1372 # 80018050 <bookkeeping>
    800125b4:	6318                	ld	a4,0(a4)
    800125b6:	97ba                	add	a5,a5,a4
    800125b8:	0ff6f713          	andi	a4,a3,255
    800125bc:	00e78023          	sb	a4,0(a5)
}
    800125c0:	0001                	nop
    800125c2:	6462                	ld	s0,24(sp)
    800125c4:	6105                	addi	sp,sp,32
    800125c6:	8082                	ret

00000000800125c8 <clear_last>:

static void clear_last(uint64_t index)
{
    800125c8:	1101                	addi	sp,sp,-32
    800125ca:	ec22                	sd	s0,24(sp)
    800125cc:	1000                	addi	s0,sp,32
    800125ce:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2 + 1));
    800125d2:	00006797          	auipc	a5,0x6
    800125d6:	a7e78793          	addi	a5,a5,-1410 # 80018050 <bookkeeping>
    800125da:	6398                	ld	a4,0(a5)
    800125dc:	fe843783          	ld	a5,-24(s0)
    800125e0:	8389                	srli	a5,a5,0x2
    800125e2:	973e                	add	a4,a4,a5
    800125e4:	00074703          	lbu	a4,0(a4)
    800125e8:	0187169b          	slliw	a3,a4,0x18
    800125ec:	4186d69b          	sraiw	a3,a3,0x18
    800125f0:	fe843703          	ld	a4,-24(s0)
    800125f4:	2701                	sext.w	a4,a4
    800125f6:	8b0d                	andi	a4,a4,3
    800125f8:	2701                	sext.w	a4,a4
    800125fa:	0017171b          	slliw	a4,a4,0x1
    800125fe:	2701                	sext.w	a4,a4
    80012600:	2705                	addiw	a4,a4,1
    80012602:	2701                	sext.w	a4,a4
    80012604:	4605                	li	a2,1
    80012606:	00e6173b          	sllw	a4,a2,a4
    8001260a:	2701                	sext.w	a4,a4
    8001260c:	0187171b          	slliw	a4,a4,0x18
    80012610:	4187571b          	sraiw	a4,a4,0x18
    80012614:	fff74713          	not	a4,a4
    80012618:	0187171b          	slliw	a4,a4,0x18
    8001261c:	4187571b          	sraiw	a4,a4,0x18
    80012620:	8f75                	and	a4,a4,a3
    80012622:	0187169b          	slliw	a3,a4,0x18
    80012626:	4186d69b          	sraiw	a3,a3,0x18
    8001262a:	00006717          	auipc	a4,0x6
    8001262e:	a2670713          	addi	a4,a4,-1498 # 80018050 <bookkeeping>
    80012632:	6318                	ld	a4,0(a4)
    80012634:	97ba                	add	a5,a5,a4
    80012636:	0ff6f713          	andi	a4,a3,255
    8001263a:	00e78023          	sb	a4,0(a5)
}
    8001263e:	0001                	nop
    80012640:	6462                	ld	s0,24(sp)
    80012642:	6105                	addi	sp,sp,32
    80012644:	8082                	ret

0000000080012646 <is_last>:

static int is_last(uint64_t index)
{
    80012646:	1101                	addi	sp,sp,-32
    80012648:	ec22                	sd	s0,24(sp)
    8001264a:	1000                	addi	s0,sp,32
    8001264c:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2 + 1));
    80012650:	00006797          	auipc	a5,0x6
    80012654:	a0078793          	addi	a5,a5,-1536 # 80018050 <bookkeeping>
    80012658:	6398                	ld	a4,0(a5)
    8001265a:	fe843783          	ld	a5,-24(s0)
    8001265e:	8389                	srli	a5,a5,0x2
    80012660:	97ba                	add	a5,a5,a4
    80012662:	0007c783          	lbu	a5,0(a5)
    80012666:	0007871b          	sext.w	a4,a5
    8001266a:	fe843783          	ld	a5,-24(s0)
    8001266e:	2781                	sext.w	a5,a5
    80012670:	8b8d                	andi	a5,a5,3
    80012672:	2781                	sext.w	a5,a5
    80012674:	0017979b          	slliw	a5,a5,0x1
    80012678:	2781                	sext.w	a5,a5
    8001267a:	2785                	addiw	a5,a5,1
    8001267c:	2781                	sext.w	a5,a5
    8001267e:	4685                	li	a3,1
    80012680:	00f697bb          	sllw	a5,a3,a5
    80012684:	2781                	sext.w	a5,a5
    80012686:	8ff9                	and	a5,a5,a4
    80012688:	2781                	sext.w	a5,a5
}
    8001268a:	853e                	mv	a0,a5
    8001268c:	6462                	ld	s0,24(sp)
    8001268e:	6105                	addi	sp,sp,32
    80012690:	8082                	ret

0000000080012692 <page_init>:

void page_init(void)
{
    80012692:	1101                	addi	sp,sp,-32
    80012694:	ec06                	sd	ra,24(sp)
    80012696:	e822                	sd	s0,16(sp)
    80012698:	1000                	addi	s0,sp,32
    /* Initialize the page system. */
    bookkeeping = sym_start(heap);
    8001269a:	00006797          	auipc	a5,0x6
    8001269e:	9b678793          	addi	a5,a5,-1610 # 80018050 <bookkeeping>
    800126a2:	00012717          	auipc	a4,0x12
    800126a6:	95e70713          	addi	a4,a4,-1698 # 80024000 <_heap_start>
    800126aa:	e398                	sd	a4,0(a5)
    
    // Print bookkeeping area
    mutex_spinlock(&page_lock);
    800126ac:	00006517          	auipc	a0,0x6
    800126b0:	95c50513          	addi	a0,a0,-1700 # 80018008 <page_lock>
    800126b4:	c46fe0ef          	jal	ra,80010afa <mutex_spinlock>

    // Initialize the bookkeeping area
    memset(bookkeeping, 0, BK_SIZE_IN_BYTES);
    800126b8:	00006797          	auipc	a5,0x6
    800126bc:	99878793          	addi	a5,a5,-1640 # 80018050 <bookkeeping>
    800126c0:	6394                	ld	a3,0(a5)
    800126c2:	07ffe717          	auipc	a4,0x7ffe
    800126c6:	93e70713          	addi	a4,a4,-1730 # 88010000 <_heap_end>
    800126ca:	00012797          	auipc	a5,0x12
    800126ce:	93678793          	addi	a5,a5,-1738 # 80024000 <_heap_start>
    800126d2:	40f707b3          	sub	a5,a4,a5
    800126d6:	83b9                	srli	a5,a5,0xe
    800126d8:	0007871b          	sext.w	a4,a5
    800126dc:	6785                	lui	a5,0x1
    800126de:	37fd                	addiw	a5,a5,-1
    800126e0:	9fb9                	addw	a5,a5,a4
    800126e2:	2781                	sext.w	a5,a5
    800126e4:	0007871b          	sext.w	a4,a5
    800126e8:	77fd                	lui	a5,0xfffff
    800126ea:	8ff9                	and	a5,a5,a4
    800126ec:	2781                	sext.w	a5,a5
    800126ee:	863e                	mv	a2,a5
    800126f0:	4581                	li	a1,0
    800126f2:	8536                	mv	a0,a3
    800126f4:	37f020ef          	jal	ra,80015272 <memset>
    // Mark the bookkeeping pages as taken
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    800126f8:	fe043423          	sd	zero,-24(s0)
    800126fc:	a811                	j	80012710 <page_init+0x7e>
        set_taken(i);
    800126fe:	fe843503          	ld	a0,-24(s0)
    80012702:	d25ff0ef          	jal	ra,80012426 <set_taken>
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    80012706:	fe843783          	ld	a5,-24(s0)
    8001270a:	0785                	addi	a5,a5,1
    8001270c:	fef43423          	sd	a5,-24(s0)
    80012710:	07ffe717          	auipc	a4,0x7ffe
    80012714:	8f070713          	addi	a4,a4,-1808 # 88010000 <_heap_end>
    80012718:	00012797          	auipc	a5,0x12
    8001271c:	8e878793          	addi	a5,a5,-1816 # 80024000 <_heap_start>
    80012720:	40f707b3          	sub	a5,a4,a5
    80012724:	00e7d713          	srli	a4,a5,0xe
    80012728:	6785                	lui	a5,0x1
    8001272a:	17fd                	addi	a5,a5,-1
    8001272c:	97ba                	add	a5,a5,a4
    8001272e:	83b1                	srli	a5,a5,0xc
    80012730:	fe843703          	ld	a4,-24(s0)
    80012734:	fcf765e3          	bltu	a4,a5,800126fe <page_init+0x6c>
    }
    set_last(BK_SIZE_IN_PAGES - 1);
    80012738:	07ffe717          	auipc	a4,0x7ffe
    8001273c:	8c870713          	addi	a4,a4,-1848 # 88010000 <_heap_end>
    80012740:	00012797          	auipc	a5,0x12
    80012744:	8c078793          	addi	a5,a5,-1856 # 80024000 <_heap_start>
    80012748:	40f707b3          	sub	a5,a4,a5
    8001274c:	00e7d713          	srli	a4,a5,0xe
    80012750:	6785                	lui	a5,0x1
    80012752:	17fd                	addi	a5,a5,-1
    80012754:	97ba                	add	a5,a5,a4
    80012756:	83b1                	srli	a5,a5,0xc
    80012758:	17fd                	addi	a5,a5,-1
    8001275a:	853e                	mv	a0,a5
    8001275c:	dfbff0ef          	jal	ra,80012556 <set_last>

    // Print out the bookkeeping area's contents
    mutex_unlock(&page_lock);
    80012760:	00006517          	auipc	a0,0x6
    80012764:	8a850513          	addi	a0,a0,-1880 # 80018008 <page_lock>
    80012768:	bc0fe0ef          	jal	ra,80010b28 <mutex_unlock>

    logf(LOG_INFO, "Page Init: 0x%08lx -> 0x%08lx\n", bookkeeping, bookkeeping + BK_SIZE_IN_BYTES);
    8001276c:	00006797          	auipc	a5,0x6
    80012770:	8e478793          	addi	a5,a5,-1820 # 80018050 <bookkeeping>
    80012774:	6390                	ld	a2,0(a5)
    80012776:	00006797          	auipc	a5,0x6
    8001277a:	8da78793          	addi	a5,a5,-1830 # 80018050 <bookkeeping>
    8001277e:	6398                	ld	a4,0(a5)
    80012780:	07ffe697          	auipc	a3,0x7ffe
    80012784:	88068693          	addi	a3,a3,-1920 # 88010000 <_heap_end>
    80012788:	00012797          	auipc	a5,0x12
    8001278c:	87878793          	addi	a5,a5,-1928 # 80024000 <_heap_start>
    80012790:	40f687b3          	sub	a5,a3,a5
    80012794:	00e7d693          	srli	a3,a5,0xe
    80012798:	6785                	lui	a5,0x1
    8001279a:	17fd                	addi	a5,a5,-1
    8001279c:	96be                	add	a3,a3,a5
    8001279e:	77fd                	lui	a5,0xfffff
    800127a0:	8ff5                	and	a5,a5,a3
    800127a2:	97ba                	add	a5,a5,a4
    800127a4:	86be                	mv	a3,a5
    800127a6:	00007597          	auipc	a1,0x7
    800127aa:	fd258593          	addi	a1,a1,-46 # 80019778 <SYSCALLS+0x778>
    800127ae:	4511                	li	a0,4
    800127b0:	e12ff0ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  Heap size: 0x%lx bytes, %lu pages\n", HEAP_SIZE_IN_BYTES, HEAP_SIZE_IN_PAGES);
    800127b4:	07ffe717          	auipc	a4,0x7ffe
    800127b8:	84c70713          	addi	a4,a4,-1972 # 88010000 <_heap_end>
    800127bc:	00012797          	auipc	a5,0x12
    800127c0:	84478793          	addi	a5,a5,-1980 # 80024000 <_heap_start>
    800127c4:	40f70633          	sub	a2,a4,a5
    800127c8:	07ffe717          	auipc	a4,0x7ffe
    800127cc:	83870713          	addi	a4,a4,-1992 # 88010000 <_heap_end>
    800127d0:	00012797          	auipc	a5,0x12
    800127d4:	83078793          	addi	a5,a5,-2000 # 80024000 <_heap_start>
    800127d8:	40f707b3          	sub	a5,a4,a5
    800127dc:	83b1                	srli	a5,a5,0xc
    800127de:	86be                	mv	a3,a5
    800127e0:	00007597          	auipc	a1,0x7
    800127e4:	fb858593          	addi	a1,a1,-72 # 80019798 <SYSCALLS+0x798>
    800127e8:	4511                	li	a0,4
    800127ea:	dd8ff0ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  Bookkeeping size: 0x%lx bytes, %lu pages\n", BK_SIZE_IN_BYTES, BK_SIZE_IN_PAGES);
    800127ee:	07ffe717          	auipc	a4,0x7ffe
    800127f2:	81270713          	addi	a4,a4,-2030 # 88010000 <_heap_end>
    800127f6:	00012797          	auipc	a5,0x12
    800127fa:	80a78793          	addi	a5,a5,-2038 # 80024000 <_heap_start>
    800127fe:	40f707b3          	sub	a5,a4,a5
    80012802:	00e7d713          	srli	a4,a5,0xe
    80012806:	6785                	lui	a5,0x1
    80012808:	17fd                	addi	a5,a5,-1
    8001280a:	973e                	add	a4,a4,a5
    8001280c:	77fd                	lui	a5,0xfffff
    8001280e:	00f77633          	and	a2,a4,a5
    80012812:	07ffd717          	auipc	a4,0x7ffd
    80012816:	7ee70713          	addi	a4,a4,2030 # 88010000 <_heap_end>
    8001281a:	00011797          	auipc	a5,0x11
    8001281e:	7e678793          	addi	a5,a5,2022 # 80024000 <_heap_start>
    80012822:	40f707b3          	sub	a5,a4,a5
    80012826:	00e7d713          	srli	a4,a5,0xe
    8001282a:	6785                	lui	a5,0x1
    8001282c:	17fd                	addi	a5,a5,-1
    8001282e:	97ba                	add	a5,a5,a4
    80012830:	83b1                	srli	a5,a5,0xc
    80012832:	86be                	mv	a3,a5
    80012834:	00007597          	auipc	a1,0x7
    80012838:	f8c58593          	addi	a1,a1,-116 # 800197c0 <SYSCALLS+0x7c0>
    8001283c:	4511                	li	a0,4
    8001283e:	d84ff0ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  Taken pages: %lu\n", page_count_taken());
    80012842:	308000ef          	jal	ra,80012b4a <page_count_taken>
    80012846:	87aa                	mv	a5,a0
    80012848:	863e                	mv	a2,a5
    8001284a:	00007597          	auipc	a1,0x7
    8001284e:	fa658593          	addi	a1,a1,-90 # 800197f0 <SYSCALLS+0x7f0>
    80012852:	4511                	li	a0,4
    80012854:	d6eff0ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  Free pages: %lu\n", page_count_free());
    80012858:	27c000ef          	jal	ra,80012ad4 <page_count_free>
    8001285c:	87aa                	mv	a5,a0
    8001285e:	863e                	mv	a2,a5
    80012860:	00007597          	auipc	a1,0x7
    80012864:	fa858593          	addi	a1,a1,-88 # 80019808 <SYSCALLS+0x808>
    80012868:	4511                	li	a0,4
    8001286a:	d58ff0ef          	jal	ra,80011dc2 <logf>
    logf(LOG_INFO, "  Heap size: 0x%lx bytes, %lu pages\n", HEAP_SIZE_IN_BYTES, HEAP_SIZE_IN_PAGES);
    logf(LOG_INFO, "  Bookkeeping size: 0x%lx bytes, %lu pages\n", BK_SIZE_IN_BYTES, BK_SIZE_IN_PAGES);
    logf(LOG_INFO, "  Taken pages: %lu\n", page_count_taken());
    logf(LOG_INFO, "  Free pages: %lu\n", page_count_free());
    */
}
    8001286e:	0001                	nop
    80012870:	60e2                	ld	ra,24(sp)
    80012872:	6442                	ld	s0,16(sp)
    80012874:	6105                	addi	sp,sp,32
    80012876:	8082                	ret

0000000080012878 <page_nalloc>:

void *page_nalloc(int n)
{
    80012878:	7139                	addi	sp,sp,-64
    8001287a:	fc06                	sd	ra,56(sp)
    8001287c:	f822                	sd	s0,48(sp)
    8001287e:	0080                	addi	s0,sp,64
    80012880:	87aa                	mv	a5,a0
    80012882:	fcf42623          	sw	a5,-52(s0)
    if (n <= 0) {
    80012886:	fcc42783          	lw	a5,-52(s0)
    8001288a:	2781                	sext.w	a5,a5
    8001288c:	00f04463          	bgtz	a5,80012894 <page_nalloc+0x1c>
        return NULL;
    80012890:	4781                	li	a5,0
    80012892:	aaa9                	j	800129ec <page_nalloc+0x174>
    }

    mutex_spinlock(&page_lock);
    80012894:	00005517          	auipc	a0,0x5
    80012898:	77450513          	addi	a0,a0,1908 # 80018008 <page_lock>
    8001289c:	a5efe0ef          	jal	ra,80010afa <mutex_spinlock>

    int start = 0;
    800128a0:	fe042623          	sw	zero,-20(s0)
    int consecutive = 0;
    800128a4:	fe042423          	sw	zero,-24(s0)

    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    800128a8:	fe043023          	sd	zero,-32(s0)
    800128ac:	aa11                	j	800129c0 <page_nalloc+0x148>
        if (!is_taken(i)) {
    800128ae:	fe043503          	ld	a0,-32(s0)
    800128b2:	c5dff0ef          	jal	ra,8001250e <is_taken>
    800128b6:	87aa                	mv	a5,a0
    800128b8:	0e079563          	bnez	a5,800129a2 <page_nalloc+0x12a>
            if (consecutive == 0) {
    800128bc:	fe842783          	lw	a5,-24(s0)
    800128c0:	2781                	sext.w	a5,a5
    800128c2:	e789                	bnez	a5,800128cc <page_nalloc+0x54>
                start = i;
    800128c4:	fe043783          	ld	a5,-32(s0)
    800128c8:	fef42623          	sw	a5,-20(s0)
            }

            consecutive++;
    800128cc:	fe842783          	lw	a5,-24(s0)
    800128d0:	2785                	addiw	a5,a5,1
    800128d2:	fef42423          	sw	a5,-24(s0)

            if (consecutive >= n) {
    800128d6:	fe842703          	lw	a4,-24(s0)
    800128da:	fcc42783          	lw	a5,-52(s0)
    800128de:	2701                	sext.w	a4,a4
    800128e0:	2781                	sext.w	a5,a5
    800128e2:	0cf74a63          	blt	a4,a5,800129b6 <page_nalloc+0x13e>
                debugf("page_nalloc: found %d consecutive pages starting at 0x%08lx\n", n, start);
    800128e6:	fec42703          	lw	a4,-20(s0)
    800128ea:	fcc42783          	lw	a5,-52(s0)
    800128ee:	863a                	mv	a2,a4
    800128f0:	85be                	mv	a1,a5
    800128f2:	00007517          	auipc	a0,0x7
    800128f6:	f2e50513          	addi	a0,a0,-210 # 80019820 <SYSCALLS+0x820>
    800128fa:	d26ff0ef          	jal	ra,80011e20 <debugf>
                for (int j = 0; j < n; j++) {
    800128fe:	fc042e23          	sw	zero,-36(s0)
    80012902:	a825                	j	8001293a <page_nalloc+0xc2>
                    debugf("page_nalloc: marking page 0x%08lx as taken\n", start + j);
    80012904:	fec42703          	lw	a4,-20(s0)
    80012908:	fdc42783          	lw	a5,-36(s0)
    8001290c:	9fb9                	addw	a5,a5,a4
    8001290e:	2781                	sext.w	a5,a5
    80012910:	85be                	mv	a1,a5
    80012912:	00007517          	auipc	a0,0x7
    80012916:	f4e50513          	addi	a0,a0,-178 # 80019860 <SYSCALLS+0x860>
    8001291a:	d06ff0ef          	jal	ra,80011e20 <debugf>
                    set_taken(start + j);
    8001291e:	fec42703          	lw	a4,-20(s0)
    80012922:	fdc42783          	lw	a5,-36(s0)
    80012926:	9fb9                	addw	a5,a5,a4
    80012928:	2781                	sext.w	a5,a5
    8001292a:	853e                	mv	a0,a5
    8001292c:	afbff0ef          	jal	ra,80012426 <set_taken>
                for (int j = 0; j < n; j++) {
    80012930:	fdc42783          	lw	a5,-36(s0)
    80012934:	2785                	addiw	a5,a5,1
    80012936:	fcf42e23          	sw	a5,-36(s0)
    8001293a:	fdc42703          	lw	a4,-36(s0)
    8001293e:	fcc42783          	lw	a5,-52(s0)
    80012942:	2701                	sext.w	a4,a4
    80012944:	2781                	sext.w	a5,a5
    80012946:	faf74fe3          	blt	a4,a5,80012904 <page_nalloc+0x8c>
                }
                debugf("page_nalloc: marking page 0x%08lx as last\n", start + n - 1);
    8001294a:	fec42703          	lw	a4,-20(s0)
    8001294e:	fcc42783          	lw	a5,-52(s0)
    80012952:	9fb9                	addw	a5,a5,a4
    80012954:	2781                	sext.w	a5,a5
    80012956:	37fd                	addiw	a5,a5,-1
    80012958:	2781                	sext.w	a5,a5
    8001295a:	85be                	mv	a1,a5
    8001295c:	00007517          	auipc	a0,0x7
    80012960:	f3450513          	addi	a0,a0,-204 # 80019890 <SYSCALLS+0x890>
    80012964:	cbcff0ef          	jal	ra,80011e20 <debugf>
                set_last(start + n - 1);
    80012968:	fec42703          	lw	a4,-20(s0)
    8001296c:	fcc42783          	lw	a5,-52(s0)
    80012970:	9fb9                	addw	a5,a5,a4
    80012972:	2781                	sext.w	a5,a5
    80012974:	37fd                	addiw	a5,a5,-1
    80012976:	2781                	sext.w	a5,a5
    80012978:	853e                	mv	a0,a5
    8001297a:	bddff0ef          	jal	ra,80012556 <set_last>

                mutex_unlock(&page_lock);
    8001297e:	00005517          	auipc	a0,0x5
    80012982:	68a50513          	addi	a0,a0,1674 # 80018008 <page_lock>
    80012986:	9a2fe0ef          	jal	ra,80010b28 <mutex_unlock>
                return (void *)(bookkeeping + start * PAGE_SIZE);
    8001298a:	00005797          	auipc	a5,0x5
    8001298e:	6c678793          	addi	a5,a5,1734 # 80018050 <bookkeeping>
    80012992:	639c                	ld	a5,0(a5)
    80012994:	fec42703          	lw	a4,-20(s0)
    80012998:	00c7171b          	slliw	a4,a4,0xc
    8001299c:	2701                	sext.w	a4,a4
    8001299e:	97ba                	add	a5,a5,a4
    800129a0:	a0b1                	j	800129ec <page_nalloc+0x174>
            }
        } else {
            debugf("page_nalloc: page 0x%08lx is taken\n", i);
    800129a2:	fe043583          	ld	a1,-32(s0)
    800129a6:	00007517          	auipc	a0,0x7
    800129aa:	f1a50513          	addi	a0,a0,-230 # 800198c0 <SYSCALLS+0x8c0>
    800129ae:	c72ff0ef          	jal	ra,80011e20 <debugf>
            consecutive = 0;
    800129b2:	fe042423          	sw	zero,-24(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    800129b6:	fe043783          	ld	a5,-32(s0)
    800129ba:	0785                	addi	a5,a5,1
    800129bc:	fef43023          	sd	a5,-32(s0)
    800129c0:	07ffd717          	auipc	a4,0x7ffd
    800129c4:	64070713          	addi	a4,a4,1600 # 88010000 <_heap_end>
    800129c8:	00011797          	auipc	a5,0x11
    800129cc:	63878793          	addi	a5,a5,1592 # 80024000 <_heap_start>
    800129d0:	40f707b3          	sub	a5,a4,a5
    800129d4:	83b1                	srli	a5,a5,0xc
    800129d6:	fe043703          	ld	a4,-32(s0)
    800129da:	ecf76ae3          	bltu	a4,a5,800128ae <page_nalloc+0x36>
        }
    }

    mutex_unlock(&page_lock);
    800129de:	00005517          	auipc	a0,0x5
    800129e2:	62a50513          	addi	a0,a0,1578 # 80018008 <page_lock>
    800129e6:	942fe0ef          	jal	ra,80010b28 <mutex_unlock>
    return NULL;
    800129ea:	4781                	li	a5,0
}
    800129ec:	853e                	mv	a0,a5
    800129ee:	70e2                	ld	ra,56(sp)
    800129f0:	7442                	ld	s0,48(sp)
    800129f2:	6121                	addi	sp,sp,64
    800129f4:	8082                	ret

00000000800129f6 <page_znalloc>:

void *page_znalloc(int n)
{
    800129f6:	1101                	addi	sp,sp,-32
    800129f8:	ec22                	sd	s0,24(sp)
    800129fa:	1000                	addi	s0,sp,32
    800129fc:	87aa                	mv	a5,a0
    800129fe:	fef42623          	sw	a5,-20(s0)
    return NULL;
    80012a02:	4781                	li	a5,0
    void *mem = page_nalloc(n);
    if (mem) {
        memset(mem, 0, n * PAGE_SIZE);
    }
    return mem;
}
    80012a04:	853e                	mv	a0,a5
    80012a06:	6462                	ld	s0,24(sp)
    80012a08:	6105                	addi	sp,sp,32
    80012a0a:	8082                	ret

0000000080012a0c <page_free>:

void page_free(void *p)
{
    80012a0c:	7179                	addi	sp,sp,-48
    80012a0e:	f406                	sd	ra,40(sp)
    80012a10:	f022                	sd	s0,32(sp)
    80012a12:	1800                	addi	s0,sp,48
    80012a14:	fca43c23          	sd	a0,-40(s0)
    if (p == NULL) {
    80012a18:	fd843783          	ld	a5,-40(s0)
    80012a1c:	c7dd                	beqz	a5,80012aca <page_free+0xbe>
        return;
    }
    /* Free the page */
    uint64_t x = ((uint64_t)p - (uint64_t)bookkeeping) / PAGE_SIZE;
    80012a1e:	fd843783          	ld	a5,-40(s0)
    80012a22:	00005717          	auipc	a4,0x5
    80012a26:	62e70713          	addi	a4,a4,1582 # 80018050 <bookkeeping>
    80012a2a:	6318                	ld	a4,0(a4)
    80012a2c:	8f99                	sub	a5,a5,a4
    80012a2e:	83b1                	srli	a5,a5,0xc
    80012a30:	fef43423          	sd	a5,-24(s0)
    logf(LOG_INFO, "page_free: freeing page %lu at address 0x%p\n", x, p);
    80012a34:	fd843683          	ld	a3,-40(s0)
    80012a38:	fe843603          	ld	a2,-24(s0)
    80012a3c:	00007597          	auipc	a1,0x7
    80012a40:	eac58593          	addi	a1,a1,-340 # 800198e8 <SYSCALLS+0x8e8>
    80012a44:	4511                	li	a0,4
    80012a46:	b7cff0ef          	jal	ra,80011dc2 <logf>

    mutex_spinlock(&page_lock);
    80012a4a:	00005517          	auipc	a0,0x5
    80012a4e:	5be50513          	addi	a0,a0,1470 # 80018008 <page_lock>
    80012a52:	8a8fe0ef          	jal	ra,80010afa <mutex_spinlock>


    if (!is_taken(x)) {
    80012a56:	fe843503          	ld	a0,-24(s0)
    80012a5a:	ab5ff0ef          	jal	ra,8001250e <is_taken>
    80012a5e:	87aa                	mv	a5,a0
    80012a60:	eb95                	bnez	a5,80012a94 <page_free+0x88>
        logf(LOG_ERROR, "page_free: page 0x%08lx is already free!\n", x);
    80012a62:	fe843603          	ld	a2,-24(s0)
    80012a66:	00007597          	auipc	a1,0x7
    80012a6a:	eb258593          	addi	a1,a1,-334 # 80019918 <SYSCALLS+0x918>
    80012a6e:	4505                	li	a0,1
    80012a70:	b52ff0ef          	jal	ra,80011dc2 <logf>
        mutex_unlock(&page_lock);
    80012a74:	00005517          	auipc	a0,0x5
    80012a78:	59450513          	addi	a0,a0,1428 # 80018008 <page_lock>
    80012a7c:	8acfe0ef          	jal	ra,80010b28 <mutex_unlock>
        return;
    80012a80:	a0b1                	j	80012acc <page_free+0xc0>
    }

    // Clear all the pages starting at the index until the last page
    while (is_taken(x) && !is_last(x)) {
        clear_taken(x);
    80012a82:	fe843503          	ld	a0,-24(s0)
    80012a86:	a0fff0ef          	jal	ra,80012494 <clear_taken>
        x++;
    80012a8a:	fe843783          	ld	a5,-24(s0)
    80012a8e:	0785                	addi	a5,a5,1
    80012a90:	fef43423          	sd	a5,-24(s0)
    while (is_taken(x) && !is_last(x)) {
    80012a94:	fe843503          	ld	a0,-24(s0)
    80012a98:	a77ff0ef          	jal	ra,8001250e <is_taken>
    80012a9c:	87aa                	mv	a5,a0
    80012a9e:	c799                	beqz	a5,80012aac <page_free+0xa0>
    80012aa0:	fe843503          	ld	a0,-24(s0)
    80012aa4:	ba3ff0ef          	jal	ra,80012646 <is_last>
    80012aa8:	87aa                	mv	a5,a0
    80012aaa:	dfe1                	beqz	a5,80012a82 <page_free+0x76>
    }
    clear_taken(x);
    80012aac:	fe843503          	ld	a0,-24(s0)
    80012ab0:	9e5ff0ef          	jal	ra,80012494 <clear_taken>
    clear_last(x);
    80012ab4:	fe843503          	ld	a0,-24(s0)
    80012ab8:	b11ff0ef          	jal	ra,800125c8 <clear_last>


    mutex_unlock(&page_lock);
    80012abc:	00005517          	auipc	a0,0x5
    80012ac0:	54c50513          	addi	a0,a0,1356 # 80018008 <page_lock>
    80012ac4:	864fe0ef          	jal	ra,80010b28 <mutex_unlock>
    80012ac8:	a011                	j	80012acc <page_free+0xc0>
        return;
    80012aca:	0001                	nop
}
    80012acc:	70a2                	ld	ra,40(sp)
    80012ace:	7402                	ld	s0,32(sp)
    80012ad0:	6145                	addi	sp,sp,48
    80012ad2:	8082                	ret

0000000080012ad4 <page_count_free>:

int page_count_free(void)
{
    80012ad4:	1101                	addi	sp,sp,-32
    80012ad6:	ec06                	sd	ra,24(sp)
    80012ad8:	e822                	sd	s0,16(sp)
    80012ada:	1000                	addi	s0,sp,32
    int ret = 0;
    80012adc:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract taken. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract taken pages from it.
    */

    mutex_spinlock(&page_lock);
    80012ae0:	00005517          	auipc	a0,0x5
    80012ae4:	52850513          	addi	a0,a0,1320 # 80018008 <page_lock>
    80012ae8:	812fe0ef          	jal	ra,80010afa <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80012aec:	fe043023          	sd	zero,-32(s0)
    80012af0:	a00d                	j	80012b12 <page_count_free+0x3e>
       if (!is_taken(i)) {
    80012af2:	fe043503          	ld	a0,-32(s0)
    80012af6:	a19ff0ef          	jal	ra,8001250e <is_taken>
    80012afa:	87aa                	mv	a5,a0
    80012afc:	e791                	bnez	a5,80012b08 <page_count_free+0x34>
           ret++;
    80012afe:	fec42783          	lw	a5,-20(s0)
    80012b02:	2785                	addiw	a5,a5,1
    80012b04:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80012b08:	fe043783          	ld	a5,-32(s0)
    80012b0c:	0785                	addi	a5,a5,1
    80012b0e:	fef43023          	sd	a5,-32(s0)
    80012b12:	07ffd717          	auipc	a4,0x7ffd
    80012b16:	4ee70713          	addi	a4,a4,1262 # 88010000 <_heap_end>
    80012b1a:	00011797          	auipc	a5,0x11
    80012b1e:	4e678793          	addi	a5,a5,1254 # 80024000 <_heap_start>
    80012b22:	40f707b3          	sub	a5,a4,a5
    80012b26:	83b1                	srli	a5,a5,0xc
    80012b28:	fe043703          	ld	a4,-32(s0)
    80012b2c:	fcf763e3          	bltu	a4,a5,80012af2 <page_count_free+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80012b30:	00005517          	auipc	a0,0x5
    80012b34:	4d850513          	addi	a0,a0,1240 # 80018008 <page_lock>
    80012b38:	ff1fd0ef          	jal	ra,80010b28 <mutex_unlock>

    return ret;
    80012b3c:	fec42783          	lw	a5,-20(s0)
}
    80012b40:	853e                	mv	a0,a5
    80012b42:	60e2                	ld	ra,24(sp)
    80012b44:	6442                	ld	s0,16(sp)
    80012b46:	6105                	addi	sp,sp,32
    80012b48:	8082                	ret

0000000080012b4a <page_count_taken>:

int page_count_taken(void)
{
    80012b4a:	1101                	addi	sp,sp,-32
    80012b4c:	ec06                	sd	ra,24(sp)
    80012b4e:	e822                	sd	s0,16(sp)
    80012b50:	1000                	addi	s0,sp,32
    int ret = 0;
    80012b52:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract free. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract free pages from it.
    */

    mutex_spinlock(&page_lock);
    80012b56:	00005517          	auipc	a0,0x5
    80012b5a:	4b250513          	addi	a0,a0,1202 # 80018008 <page_lock>
    80012b5e:	f9dfd0ef          	jal	ra,80010afa <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80012b62:	fe043023          	sd	zero,-32(s0)
    80012b66:	a00d                	j	80012b88 <page_count_taken+0x3e>
       if (is_taken(i)) {
    80012b68:	fe043503          	ld	a0,-32(s0)
    80012b6c:	9a3ff0ef          	jal	ra,8001250e <is_taken>
    80012b70:	87aa                	mv	a5,a0
    80012b72:	c791                	beqz	a5,80012b7e <page_count_taken+0x34>
           ret++;
    80012b74:	fec42783          	lw	a5,-20(s0)
    80012b78:	2785                	addiw	a5,a5,1
    80012b7a:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80012b7e:	fe043783          	ld	a5,-32(s0)
    80012b82:	0785                	addi	a5,a5,1
    80012b84:	fef43023          	sd	a5,-32(s0)
    80012b88:	07ffd717          	auipc	a4,0x7ffd
    80012b8c:	47870713          	addi	a4,a4,1144 # 88010000 <_heap_end>
    80012b90:	00011797          	auipc	a5,0x11
    80012b94:	47078793          	addi	a5,a5,1136 # 80024000 <_heap_start>
    80012b98:	40f707b3          	sub	a5,a4,a5
    80012b9c:	83b1                	srli	a5,a5,0xc
    80012b9e:	fe043703          	ld	a4,-32(s0)
    80012ba2:	fcf763e3          	bltu	a4,a5,80012b68 <page_count_taken+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80012ba6:	00005517          	auipc	a0,0x5
    80012baa:	46250513          	addi	a0,a0,1122 # 80018008 <page_lock>
    80012bae:	f7bfd0ef          	jal	ra,80010b28 <mutex_unlock>

    return ret;
    80012bb2:	fec42783          	lw	a5,-20(s0)
    80012bb6:	853e                	mv	a0,a5
    80012bb8:	60e2                	ld	ra,24(sp)
    80012bba:	6442                	ld	s0,16(sp)
    80012bbc:	6105                	addi	sp,sp,32
    80012bbe:	8082                	ret

0000000080012bc0 <_putchar>:
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>

#include "sbi.h"
void _putchar(char c) { sbi_putchar(c); }
    80012bc0:	1101                	addi	sp,sp,-32
    80012bc2:	ec06                	sd	ra,24(sp)
    80012bc4:	e822                	sd	s0,16(sp)
    80012bc6:	1000                	addi	s0,sp,32
    80012bc8:	87aa                	mv	a5,a0
    80012bca:	fef407a3          	sb	a5,-17(s0)
    80012bce:	fef44783          	lbu	a5,-17(s0)
    80012bd2:	853e                	mv	a0,a5
    80012bd4:	b64ff0ef          	jal	ra,80011f38 <sbi_putchar>
    80012bd8:	0001                	nop
    80012bda:	60e2                	ld	ra,24(sp)
    80012bdc:	6442                	ld	s0,16(sp)
    80012bde:	6105                	addi	sp,sp,32
    80012be0:	8082                	ret

0000000080012be2 <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void *buffer, size_t idx,
                               size_t maxlen)
{
    80012be2:	7179                	addi	sp,sp,-48
    80012be4:	f422                	sd	s0,40(sp)
    80012be6:	1800                	addi	s0,sp,48
    80012be8:	87aa                	mv	a5,a0
    80012bea:	feb43023          	sd	a1,-32(s0)
    80012bee:	fcc43c23          	sd	a2,-40(s0)
    80012bf2:	fcd43823          	sd	a3,-48(s0)
    80012bf6:	fef407a3          	sb	a5,-17(s0)
    if (idx < maxlen) {
    80012bfa:	fd843703          	ld	a4,-40(s0)
    80012bfe:	fd043783          	ld	a5,-48(s0)
    80012c02:	00f77b63          	bgeu	a4,a5,80012c18 <_out_buffer+0x36>
        ((char *)buffer)[idx] = character;
    80012c06:	fe043703          	ld	a4,-32(s0)
    80012c0a:	fd843783          	ld	a5,-40(s0)
    80012c0e:	97ba                	add	a5,a5,a4
    80012c10:	fef44703          	lbu	a4,-17(s0)
    80012c14:	00e78023          	sb	a4,0(a5)
    }
}
    80012c18:	0001                	nop
    80012c1a:	7422                	ld	s0,40(sp)
    80012c1c:	6145                	addi	sp,sp,48
    80012c1e:	8082                	ret

0000000080012c20 <_out_null>:

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    80012c20:	7179                	addi	sp,sp,-48
    80012c22:	f422                	sd	s0,40(sp)
    80012c24:	1800                	addi	s0,sp,48
    80012c26:	87aa                	mv	a5,a0
    80012c28:	feb43023          	sd	a1,-32(s0)
    80012c2c:	fcc43c23          	sd	a2,-40(s0)
    80012c30:	fcd43823          	sd	a3,-48(s0)
    80012c34:	fef407a3          	sb	a5,-17(s0)
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
    80012c38:	0001                	nop
    80012c3a:	7422                	ld	s0,40(sp)
    80012c3c:	6145                	addi	sp,sp,48
    80012c3e:	8082                	ret

0000000080012c40 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    80012c40:	7179                	addi	sp,sp,-48
    80012c42:	f406                	sd	ra,40(sp)
    80012c44:	f022                	sd	s0,32(sp)
    80012c46:	1800                	addi	s0,sp,48
    80012c48:	87aa                	mv	a5,a0
    80012c4a:	feb43023          	sd	a1,-32(s0)
    80012c4e:	fcc43c23          	sd	a2,-40(s0)
    80012c52:	fcd43823          	sd	a3,-48(s0)
    80012c56:	fef407a3          	sb	a5,-17(s0)
    (void)buffer;
    (void)idx;
    (void)maxlen;
    if (character) {
    80012c5a:	fef44783          	lbu	a5,-17(s0)
    80012c5e:	0ff7f793          	andi	a5,a5,255
    80012c62:	c791                	beqz	a5,80012c6e <_out_char+0x2e>
        _putchar(character);
    80012c64:	fef44783          	lbu	a5,-17(s0)
    80012c68:	853e                	mv	a0,a5
    80012c6a:	f57ff0ef          	jal	ra,80012bc0 <_putchar>
    }
}
    80012c6e:	0001                	nop
    80012c70:	70a2                	ld	ra,40(sp)
    80012c72:	7402                	ld	s0,32(sp)
    80012c74:	6145                	addi	sp,sp,48
    80012c76:	8082                	ret

0000000080012c78 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx,
                            size_t maxlen)
{
    80012c78:	7179                	addi	sp,sp,-48
    80012c7a:	f406                	sd	ra,40(sp)
    80012c7c:	f022                	sd	s0,32(sp)
    80012c7e:	1800                	addi	s0,sp,48
    80012c80:	87aa                	mv	a5,a0
    80012c82:	feb43023          	sd	a1,-32(s0)
    80012c86:	fcc43c23          	sd	a2,-40(s0)
    80012c8a:	fcd43823          	sd	a3,-48(s0)
    80012c8e:	fef407a3          	sb	a5,-17(s0)
    (void)idx;
    (void)maxlen;
    if (character) {
    80012c92:	fef44783          	lbu	a5,-17(s0)
    80012c96:	0ff7f793          	andi	a5,a5,255
    80012c9a:	cf81                	beqz	a5,80012cb2 <_out_fct+0x3a>
        // buffer is the output fct pointer
        ((out_fct_wrap_type *)buffer)
            ->fct(character, ((out_fct_wrap_type *)buffer)->arg);
    80012c9c:	fe043783          	ld	a5,-32(s0)
    80012ca0:	6394                	ld	a3,0(a5)
        ((out_fct_wrap_type *)buffer)
    80012ca2:	fe043783          	ld	a5,-32(s0)
    80012ca6:	6798                	ld	a4,8(a5)
    80012ca8:	fef44783          	lbu	a5,-17(s0)
    80012cac:	85ba                	mv	a1,a4
    80012cae:	853e                	mv	a0,a5
    80012cb0:	9682                	jalr	a3
    }
}
    80012cb2:	0001                	nop
    80012cb4:	70a2                	ld	ra,40(sp)
    80012cb6:	7402                	ld	s0,32(sp)
    80012cb8:	6145                	addi	sp,sp,48
    80012cba:	8082                	ret

0000000080012cbc <_strnlen_s>:

// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by
// 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize)
{
    80012cbc:	7179                	addi	sp,sp,-48
    80012cbe:	f422                	sd	s0,40(sp)
    80012cc0:	1800                	addi	s0,sp,48
    80012cc2:	fca43c23          	sd	a0,-40(s0)
    80012cc6:	fcb43823          	sd	a1,-48(s0)
    const char *s;
    for (s = str; *s && maxsize--; ++s)
    80012cca:	fd843783          	ld	a5,-40(s0)
    80012cce:	fef43423          	sd	a5,-24(s0)
    80012cd2:	a031                	j	80012cde <_strnlen_s+0x22>
    80012cd4:	fe843783          	ld	a5,-24(s0)
    80012cd8:	0785                	addi	a5,a5,1
    80012cda:	fef43423          	sd	a5,-24(s0)
    80012cde:	fe843783          	ld	a5,-24(s0)
    80012ce2:	0007c783          	lbu	a5,0(a5)
    80012ce6:	cb81                	beqz	a5,80012cf6 <_strnlen_s+0x3a>
    80012ce8:	fd043783          	ld	a5,-48(s0)
    80012cec:	fff78713          	addi	a4,a5,-1
    80012cf0:	fce43823          	sd	a4,-48(s0)
    80012cf4:	f3e5                	bnez	a5,80012cd4 <_strnlen_s+0x18>
        ;
    return (unsigned int)(s - str);
    80012cf6:	fe843703          	ld	a4,-24(s0)
    80012cfa:	fd843783          	ld	a5,-40(s0)
    80012cfe:	40f707b3          	sub	a5,a4,a5
    80012d02:	2781                	sext.w	a5,a5
}
    80012d04:	853e                	mv	a0,a5
    80012d06:	7422                	ld	s0,40(sp)
    80012d08:	6145                	addi	sp,sp,48
    80012d0a:	8082                	ret

0000000080012d0c <_is_digit>:

// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
    80012d0c:	1101                	addi	sp,sp,-32
    80012d0e:	ec22                	sd	s0,24(sp)
    80012d10:	1000                	addi	s0,sp,32
    80012d12:	87aa                	mv	a5,a0
    80012d14:	fef407a3          	sb	a5,-17(s0)
    80012d18:	fef44783          	lbu	a5,-17(s0)
    80012d1c:	0ff7f713          	andi	a4,a5,255
    80012d20:	02f00793          	li	a5,47
    80012d24:	00e7fc63          	bgeu	a5,a4,80012d3c <_is_digit+0x30>
    80012d28:	fef44783          	lbu	a5,-17(s0)
    80012d2c:	0ff7f713          	andi	a4,a5,255
    80012d30:	03900793          	li	a5,57
    80012d34:	00e7e463          	bltu	a5,a4,80012d3c <_is_digit+0x30>
    80012d38:	4785                	li	a5,1
    80012d3a:	a011                	j	80012d3e <_is_digit+0x32>
    80012d3c:	4781                	li	a5,0
    80012d3e:	8b85                	andi	a5,a5,1
    80012d40:	0ff7f793          	andi	a5,a5,255
    80012d44:	853e                	mv	a0,a5
    80012d46:	6462                	ld	s0,24(sp)
    80012d48:	6105                	addi	sp,sp,32
    80012d4a:	8082                	ret

0000000080012d4c <_atoi>:

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str)
{
    80012d4c:	7179                	addi	sp,sp,-48
    80012d4e:	f406                	sd	ra,40(sp)
    80012d50:	f022                	sd	s0,32(sp)
    80012d52:	1800                	addi	s0,sp,48
    80012d54:	fca43c23          	sd	a0,-40(s0)
    unsigned int i = 0U;
    80012d58:	fe042623          	sw	zero,-20(s0)
    while (_is_digit(**str)) {
    80012d5c:	a825                	j	80012d94 <_atoi+0x48>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
    80012d5e:	fec42703          	lw	a4,-20(s0)
    80012d62:	87ba                	mv	a5,a4
    80012d64:	0027979b          	slliw	a5,a5,0x2
    80012d68:	9fb9                	addw	a5,a5,a4
    80012d6a:	0017979b          	slliw	a5,a5,0x1
    80012d6e:	0007871b          	sext.w	a4,a5
    80012d72:	fd843783          	ld	a5,-40(s0)
    80012d76:	639c                	ld	a5,0(a5)
    80012d78:	00178613          	addi	a2,a5,1
    80012d7c:	fd843683          	ld	a3,-40(s0)
    80012d80:	e290                	sd	a2,0(a3)
    80012d82:	0007c783          	lbu	a5,0(a5)
    80012d86:	2781                	sext.w	a5,a5
    80012d88:	9fb9                	addw	a5,a5,a4
    80012d8a:	2781                	sext.w	a5,a5
    80012d8c:	fd07879b          	addiw	a5,a5,-48
    80012d90:	fef42623          	sw	a5,-20(s0)
    while (_is_digit(**str)) {
    80012d94:	fd843783          	ld	a5,-40(s0)
    80012d98:	639c                	ld	a5,0(a5)
    80012d9a:	0007c783          	lbu	a5,0(a5)
    80012d9e:	853e                	mv	a0,a5
    80012da0:	f6dff0ef          	jal	ra,80012d0c <_is_digit>
    80012da4:	87aa                	mv	a5,a0
    80012da6:	ffc5                	bnez	a5,80012d5e <_atoi+0x12>
    }
    return i;
    80012da8:	fec42783          	lw	a5,-20(s0)
}
    80012dac:	853e                	mv	a0,a5
    80012dae:	70a2                	ld	ra,40(sp)
    80012db0:	7402                	ld	s0,32(sp)
    80012db2:	6145                	addi	sp,sp,48
    80012db4:	8082                	ret

0000000080012db6 <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx,
                       size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags)
{
    80012db6:	711d                	addi	sp,sp,-96
    80012db8:	ec86                	sd	ra,88(sp)
    80012dba:	e8a2                	sd	s0,80(sp)
    80012dbc:	1080                	addi	s0,sp,96
    80012dbe:	fca43c23          	sd	a0,-40(s0)
    80012dc2:	fcb43823          	sd	a1,-48(s0)
    80012dc6:	fcc43423          	sd	a2,-56(s0)
    80012dca:	fcd43023          	sd	a3,-64(s0)
    80012dce:	fae43c23          	sd	a4,-72(s0)
    80012dd2:	faf43823          	sd	a5,-80(s0)
    80012dd6:	87c2                	mv	a5,a6
    80012dd8:	8746                	mv	a4,a7
    80012dda:	faf42623          	sw	a5,-84(s0)
    80012dde:	87ba                	mv	a5,a4
    80012de0:	faf42423          	sw	a5,-88(s0)
    const size_t start_idx = idx;
    80012de4:	fc843783          	ld	a5,-56(s0)
    80012de8:	fef43023          	sd	a5,-32(s0)

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    80012dec:	fa842783          	lw	a5,-88(s0)
    80012df0:	8b89                	andi	a5,a5,2
    80012df2:	2781                	sext.w	a5,a5
    80012df4:	e3c9                	bnez	a5,80012e76 <_out_rev+0xc0>
    80012df6:	fa842783          	lw	a5,-88(s0)
    80012dfa:	8b85                	andi	a5,a5,1
    80012dfc:	2781                	sext.w	a5,a5
    80012dfe:	efa5                	bnez	a5,80012e76 <_out_rev+0xc0>
        for (size_t i = len; i < width; i++) {
    80012e00:	fb043783          	ld	a5,-80(s0)
    80012e04:	fef43423          	sd	a5,-24(s0)
    80012e08:	a035                	j	80012e34 <_out_rev+0x7e>
            out(' ', buffer, idx++, maxlen);
    80012e0a:	fc843783          	ld	a5,-56(s0)
    80012e0e:	00178713          	addi	a4,a5,1
    80012e12:	fce43423          	sd	a4,-56(s0)
    80012e16:	fd843703          	ld	a4,-40(s0)
    80012e1a:	fc043683          	ld	a3,-64(s0)
    80012e1e:	863e                	mv	a2,a5
    80012e20:	fd043583          	ld	a1,-48(s0)
    80012e24:	02000513          	li	a0,32
    80012e28:	9702                	jalr	a4
        for (size_t i = len; i < width; i++) {
    80012e2a:	fe843783          	ld	a5,-24(s0)
    80012e2e:	0785                	addi	a5,a5,1
    80012e30:	fef43423          	sd	a5,-24(s0)
    80012e34:	fac46783          	lwu	a5,-84(s0)
    80012e38:	fe843703          	ld	a4,-24(s0)
    80012e3c:	fcf767e3          	bltu	a4,a5,80012e0a <_out_rev+0x54>
        }
    }

    // reverse string
    while (len) {
    80012e40:	a81d                	j	80012e76 <_out_rev+0xc0>
        out(buf[--len], buffer, idx++, maxlen);
    80012e42:	fb043783          	ld	a5,-80(s0)
    80012e46:	17fd                	addi	a5,a5,-1
    80012e48:	faf43823          	sd	a5,-80(s0)
    80012e4c:	fb843703          	ld	a4,-72(s0)
    80012e50:	fb043783          	ld	a5,-80(s0)
    80012e54:	97ba                	add	a5,a5,a4
    80012e56:	0007c503          	lbu	a0,0(a5)
    80012e5a:	fc843783          	ld	a5,-56(s0)
    80012e5e:	00178713          	addi	a4,a5,1
    80012e62:	fce43423          	sd	a4,-56(s0)
    80012e66:	fd843703          	ld	a4,-40(s0)
    80012e6a:	fc043683          	ld	a3,-64(s0)
    80012e6e:	863e                	mv	a2,a5
    80012e70:	fd043583          	ld	a1,-48(s0)
    80012e74:	9702                	jalr	a4
    while (len) {
    80012e76:	fb043783          	ld	a5,-80(s0)
    80012e7a:	f7e1                	bnez	a5,80012e42 <_out_rev+0x8c>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
    80012e7c:	fa842783          	lw	a5,-88(s0)
    80012e80:	8b89                	andi	a5,a5,2
    80012e82:	2781                	sext.w	a5,a5
    80012e84:	cb9d                	beqz	a5,80012eba <_out_rev+0x104>
        while (idx - start_idx < width) {
    80012e86:	a00d                	j	80012ea8 <_out_rev+0xf2>
            out(' ', buffer, idx++, maxlen);
    80012e88:	fc843783          	ld	a5,-56(s0)
    80012e8c:	00178713          	addi	a4,a5,1
    80012e90:	fce43423          	sd	a4,-56(s0)
    80012e94:	fd843703          	ld	a4,-40(s0)
    80012e98:	fc043683          	ld	a3,-64(s0)
    80012e9c:	863e                	mv	a2,a5
    80012e9e:	fd043583          	ld	a1,-48(s0)
    80012ea2:	02000513          	li	a0,32
    80012ea6:	9702                	jalr	a4
        while (idx - start_idx < width) {
    80012ea8:	fc843703          	ld	a4,-56(s0)
    80012eac:	fe043783          	ld	a5,-32(s0)
    80012eb0:	8f1d                	sub	a4,a4,a5
    80012eb2:	fac46783          	lwu	a5,-84(s0)
    80012eb6:	fcf769e3          	bltu	a4,a5,80012e88 <_out_rev+0xd2>
        }
    }

    return idx;
    80012eba:	fc843783          	ld	a5,-56(s0)
}
    80012ebe:	853e                	mv	a0,a5
    80012ec0:	60e6                	ld	ra,88(sp)
    80012ec2:	6446                	ld	s0,80(sp)
    80012ec4:	6125                	addi	sp,sp,96
    80012ec6:	8082                	ret

0000000080012ec8 <_ntoa_format>:
// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx,
                           size_t maxlen, char *buf, size_t len, bool negative,
                           unsigned int base, unsigned int prec,
                           unsigned int width, unsigned int flags)
{
    80012ec8:	715d                	addi	sp,sp,-80
    80012eca:	e486                	sd	ra,72(sp)
    80012ecc:	e0a2                	sd	s0,64(sp)
    80012ece:	0880                	addi	s0,sp,80
    80012ed0:	fea43423          	sd	a0,-24(s0)
    80012ed4:	feb43023          	sd	a1,-32(s0)
    80012ed8:	fcc43c23          	sd	a2,-40(s0)
    80012edc:	fcd43823          	sd	a3,-48(s0)
    80012ee0:	fce43423          	sd	a4,-56(s0)
    80012ee4:	fcf43023          	sd	a5,-64(s0)
    80012ee8:	87c2                	mv	a5,a6
    80012eea:	8746                	mv	a4,a7
    80012eec:	faf40fa3          	sb	a5,-65(s0)
    80012ef0:	87ba                	mv	a5,a4
    80012ef2:	faf42c23          	sw	a5,-72(s0)
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
    80012ef6:	481c                	lw	a5,16(s0)
    80012ef8:	8b89                	andi	a5,a5,2
    80012efa:	2781                	sext.w	a5,a5
    80012efc:	ebd1                	bnez	a5,80012f90 <_ntoa_format+0xc8>
        if (width && (flags & FLAGS_ZEROPAD) &&
    80012efe:	441c                	lw	a5,8(s0)
    80012f00:	2781                	sext.w	a5,a5
    80012f02:	cf9d                	beqz	a5,80012f40 <_ntoa_format+0x78>
    80012f04:	481c                	lw	a5,16(s0)
    80012f06:	8b85                	andi	a5,a5,1
    80012f08:	2781                	sext.w	a5,a5
    80012f0a:	cb9d                	beqz	a5,80012f40 <_ntoa_format+0x78>
    80012f0c:	fbf44783          	lbu	a5,-65(s0)
    80012f10:	0ff7f793          	andi	a5,a5,255
    80012f14:	e789                	bnez	a5,80012f1e <_ntoa_format+0x56>
            (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    80012f16:	481c                	lw	a5,16(s0)
    80012f18:	8bb1                	andi	a5,a5,12
    80012f1a:	2781                	sext.w	a5,a5
    80012f1c:	c395                	beqz	a5,80012f40 <_ntoa_format+0x78>
            width--;
    80012f1e:	441c                	lw	a5,8(s0)
    80012f20:	37fd                	addiw	a5,a5,-1
    80012f22:	c41c                	sw	a5,8(s0)
        }
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80012f24:	a831                	j	80012f40 <_ntoa_format+0x78>
            buf[len++] = '0';
    80012f26:	fc043783          	ld	a5,-64(s0)
    80012f2a:	00178713          	addi	a4,a5,1
    80012f2e:	fce43023          	sd	a4,-64(s0)
    80012f32:	fc843703          	ld	a4,-56(s0)
    80012f36:	97ba                	add	a5,a5,a4
    80012f38:	03000713          	li	a4,48
    80012f3c:	00e78023          	sb	a4,0(a5)
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80012f40:	00046783          	lwu	a5,0(s0)
    80012f44:	fc043703          	ld	a4,-64(s0)
    80012f48:	02f77563          	bgeu	a4,a5,80012f72 <_ntoa_format+0xaa>
    80012f4c:	fc043703          	ld	a4,-64(s0)
    80012f50:	47fd                	li	a5,31
    80012f52:	fce7fae3          	bgeu	a5,a4,80012f26 <_ntoa_format+0x5e>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    80012f56:	a831                	j	80012f72 <_ntoa_format+0xaa>
               (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
    80012f58:	fc043783          	ld	a5,-64(s0)
    80012f5c:	00178713          	addi	a4,a5,1
    80012f60:	fce43023          	sd	a4,-64(s0)
    80012f64:	fc843703          	ld	a4,-56(s0)
    80012f68:	97ba                	add	a5,a5,a4
    80012f6a:	03000713          	li	a4,48
    80012f6e:	00e78023          	sb	a4,0(a5)
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    80012f72:	481c                	lw	a5,16(s0)
    80012f74:	8b85                	andi	a5,a5,1
    80012f76:	2781                	sext.w	a5,a5
    80012f78:	cf81                	beqz	a5,80012f90 <_ntoa_format+0xc8>
    80012f7a:	00846783          	lwu	a5,8(s0)
    80012f7e:	fc043703          	ld	a4,-64(s0)
    80012f82:	00f77763          	bgeu	a4,a5,80012f90 <_ntoa_format+0xc8>
    80012f86:	fc043703          	ld	a4,-64(s0)
    80012f8a:	47fd                	li	a5,31
    80012f8c:	fce7f6e3          	bgeu	a5,a4,80012f58 <_ntoa_format+0x90>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
    80012f90:	481c                	lw	a5,16(s0)
    80012f92:	8bc1                	andi	a5,a5,16
    80012f94:	2781                	sext.w	a5,a5
    80012f96:	12078363          	beqz	a5,800130bc <_ntoa_format+0x1f4>
        if (!(flags & FLAGS_PRECISION) && len &&
    80012f9a:	481c                	lw	a5,16(s0)
    80012f9c:	4007f793          	andi	a5,a5,1024
    80012fa0:	2781                	sext.w	a5,a5
    80012fa2:	e7a1                	bnez	a5,80012fea <_ntoa_format+0x122>
    80012fa4:	fc043783          	ld	a5,-64(s0)
    80012fa8:	c3a9                	beqz	a5,80012fea <_ntoa_format+0x122>
            ((len == prec) || (len == width))) {
    80012faa:	00046783          	lwu	a5,0(s0)
        if (!(flags & FLAGS_PRECISION) && len &&
    80012fae:	fc043703          	ld	a4,-64(s0)
    80012fb2:	00f70863          	beq	a4,a5,80012fc2 <_ntoa_format+0xfa>
            ((len == prec) || (len == width))) {
    80012fb6:	00846783          	lwu	a5,8(s0)
    80012fba:	fc043703          	ld	a4,-64(s0)
    80012fbe:	02f71663          	bne	a4,a5,80012fea <_ntoa_format+0x122>
            len--;
    80012fc2:	fc043783          	ld	a5,-64(s0)
    80012fc6:	17fd                	addi	a5,a5,-1
    80012fc8:	fcf43023          	sd	a5,-64(s0)
            if (len && (base == 16U)) {
    80012fcc:	fc043783          	ld	a5,-64(s0)
    80012fd0:	cf89                	beqz	a5,80012fea <_ntoa_format+0x122>
    80012fd2:	fb842783          	lw	a5,-72(s0)
    80012fd6:	0007871b          	sext.w	a4,a5
    80012fda:	47c1                	li	a5,16
    80012fdc:	00f71763          	bne	a4,a5,80012fea <_ntoa_format+0x122>
                len--;
    80012fe0:	fc043783          	ld	a5,-64(s0)
    80012fe4:	17fd                	addi	a5,a5,-1
    80012fe6:	fcf43023          	sd	a5,-64(s0)
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) &&
    80012fea:	fb842783          	lw	a5,-72(s0)
    80012fee:	0007871b          	sext.w	a4,a5
    80012ff2:	47c1                	li	a5,16
    80012ff4:	02f71a63          	bne	a4,a5,80013028 <_ntoa_format+0x160>
    80012ff8:	481c                	lw	a5,16(s0)
    80012ffa:	0207f793          	andi	a5,a5,32
    80012ffe:	2781                	sext.w	a5,a5
    80013000:	e785                	bnez	a5,80013028 <_ntoa_format+0x160>
    80013002:	fc043703          	ld	a4,-64(s0)
    80013006:	47fd                	li	a5,31
    80013008:	02e7e063          	bltu	a5,a4,80013028 <_ntoa_format+0x160>
            (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'x';
    8001300c:	fc043783          	ld	a5,-64(s0)
    80013010:	00178713          	addi	a4,a5,1
    80013014:	fce43023          	sd	a4,-64(s0)
    80013018:	fc843703          	ld	a4,-56(s0)
    8001301c:	97ba                	add	a5,a5,a4
    8001301e:	07800713          	li	a4,120
    80013022:	00e78023          	sb	a4,0(a5)
    80013026:	a88d                	j	80013098 <_ntoa_format+0x1d0>
        }
        else if ((base == 16U) && (flags & FLAGS_UPPERCASE) &&
    80013028:	fb842783          	lw	a5,-72(s0)
    8001302c:	0007871b          	sext.w	a4,a5
    80013030:	47c1                	li	a5,16
    80013032:	02f71a63          	bne	a4,a5,80013066 <_ntoa_format+0x19e>
    80013036:	481c                	lw	a5,16(s0)
    80013038:	0207f793          	andi	a5,a5,32
    8001303c:	2781                	sext.w	a5,a5
    8001303e:	c785                	beqz	a5,80013066 <_ntoa_format+0x19e>
    80013040:	fc043703          	ld	a4,-64(s0)
    80013044:	47fd                	li	a5,31
    80013046:	02e7e063          	bltu	a5,a4,80013066 <_ntoa_format+0x19e>
                 (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
    8001304a:	fc043783          	ld	a5,-64(s0)
    8001304e:	00178713          	addi	a4,a5,1
    80013052:	fce43023          	sd	a4,-64(s0)
    80013056:	fc843703          	ld	a4,-56(s0)
    8001305a:	97ba                	add	a5,a5,a4
    8001305c:	05800713          	li	a4,88
    80013060:	00e78023          	sb	a4,0(a5)
    80013064:	a815                	j	80013098 <_ntoa_format+0x1d0>
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    80013066:	fb842783          	lw	a5,-72(s0)
    8001306a:	0007871b          	sext.w	a4,a5
    8001306e:	4789                	li	a5,2
    80013070:	02f71463          	bne	a4,a5,80013098 <_ntoa_format+0x1d0>
    80013074:	fc043703          	ld	a4,-64(s0)
    80013078:	47fd                	li	a5,31
    8001307a:	00e7ef63          	bltu	a5,a4,80013098 <_ntoa_format+0x1d0>
            buf[len++] = 'b';
    8001307e:	fc043783          	ld	a5,-64(s0)
    80013082:	00178713          	addi	a4,a5,1
    80013086:	fce43023          	sd	a4,-64(s0)
    8001308a:	fc843703          	ld	a4,-56(s0)
    8001308e:	97ba                	add	a5,a5,a4
    80013090:	06200713          	li	a4,98
    80013094:	00e78023          	sb	a4,0(a5)
        }
        if (len < PRINTF_NTOA_BUFFER_SIZE) {
    80013098:	fc043703          	ld	a4,-64(s0)
    8001309c:	47fd                	li	a5,31
    8001309e:	00e7ef63          	bltu	a5,a4,800130bc <_ntoa_format+0x1f4>
            buf[len++] = '0';
    800130a2:	fc043783          	ld	a5,-64(s0)
    800130a6:	00178713          	addi	a4,a5,1
    800130aa:	fce43023          	sd	a4,-64(s0)
    800130ae:	fc843703          	ld	a4,-56(s0)
    800130b2:	97ba                	add	a5,a5,a4
    800130b4:	03000713          	li	a4,48
    800130b8:	00e78023          	sb	a4,0(a5)
        }
    }

    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    800130bc:	fc043703          	ld	a4,-64(s0)
    800130c0:	47fd                	li	a5,31
    800130c2:	06e7e863          	bltu	a5,a4,80013132 <_ntoa_format+0x26a>
        if (negative) {
    800130c6:	fbf44783          	lbu	a5,-65(s0)
    800130ca:	0ff7f793          	andi	a5,a5,255
    800130ce:	cf99                	beqz	a5,800130ec <_ntoa_format+0x224>
            buf[len++] = '-';
    800130d0:	fc043783          	ld	a5,-64(s0)
    800130d4:	00178713          	addi	a4,a5,1
    800130d8:	fce43023          	sd	a4,-64(s0)
    800130dc:	fc843703          	ld	a4,-56(s0)
    800130e0:	97ba                	add	a5,a5,a4
    800130e2:	02d00713          	li	a4,45
    800130e6:	00e78023          	sb	a4,0(a5)
    800130ea:	a0a1                	j	80013132 <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_PLUS) {
    800130ec:	481c                	lw	a5,16(s0)
    800130ee:	8b91                	andi	a5,a5,4
    800130f0:	2781                	sext.w	a5,a5
    800130f2:	cf99                	beqz	a5,80013110 <_ntoa_format+0x248>
            buf[len++] = '+';  // ignore the space if the '+' exists
    800130f4:	fc043783          	ld	a5,-64(s0)
    800130f8:	00178713          	addi	a4,a5,1
    800130fc:	fce43023          	sd	a4,-64(s0)
    80013100:	fc843703          	ld	a4,-56(s0)
    80013104:	97ba                	add	a5,a5,a4
    80013106:	02b00713          	li	a4,43
    8001310a:	00e78023          	sb	a4,0(a5)
    8001310e:	a015                	j	80013132 <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_SPACE) {
    80013110:	481c                	lw	a5,16(s0)
    80013112:	8ba1                	andi	a5,a5,8
    80013114:	2781                	sext.w	a5,a5
    80013116:	cf91                	beqz	a5,80013132 <_ntoa_format+0x26a>
            buf[len++] = ' ';
    80013118:	fc043783          	ld	a5,-64(s0)
    8001311c:	00178713          	addi	a4,a5,1
    80013120:	fce43023          	sd	a4,-64(s0)
    80013124:	fc843703          	ld	a4,-56(s0)
    80013128:	97ba                	add	a5,a5,a4
    8001312a:	02000713          	li	a4,32
    8001312e:	00e78023          	sb	a4,0(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    80013132:	4818                	lw	a4,16(s0)
    80013134:	441c                	lw	a5,8(s0)
    80013136:	88ba                	mv	a7,a4
    80013138:	883e                	mv	a6,a5
    8001313a:	fc043783          	ld	a5,-64(s0)
    8001313e:	fc843703          	ld	a4,-56(s0)
    80013142:	fd043683          	ld	a3,-48(s0)
    80013146:	fd843603          	ld	a2,-40(s0)
    8001314a:	fe043583          	ld	a1,-32(s0)
    8001314e:	fe843503          	ld	a0,-24(s0)
    80013152:	c65ff0ef          	jal	ra,80012db6 <_out_rev>
    80013156:	87aa                	mv	a5,a0
}
    80013158:	853e                	mv	a0,a5
    8001315a:	60a6                	ld	ra,72(sp)
    8001315c:	6406                	ld	s0,64(sp)
    8001315e:	6161                	addi	sp,sp,80
    80013160:	8082                	ret

0000000080013162 <_ntoa_long>:
// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx,
                         size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec,
                         unsigned int width, unsigned int flags)
{
    80013162:	7135                	addi	sp,sp,-160
    80013164:	ed06                	sd	ra,152(sp)
    80013166:	e922                	sd	s0,144(sp)
    80013168:	1100                	addi	s0,sp,160
    8001316a:	faa43c23          	sd	a0,-72(s0)
    8001316e:	fab43823          	sd	a1,-80(s0)
    80013172:	fac43423          	sd	a2,-88(s0)
    80013176:	fad43023          	sd	a3,-96(s0)
    8001317a:	f8e43c23          	sd	a4,-104(s0)
    8001317e:	f9043423          	sd	a6,-120(s0)
    80013182:	8746                	mv	a4,a7
    80013184:	f8f40ba3          	sb	a5,-105(s0)
    80013188:	87ba                	mv	a5,a4
    8001318a:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    8001318e:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    80013192:	f9843783          	ld	a5,-104(s0)
    80013196:	e781                	bnez	a5,8001319e <_ntoa_long+0x3c>
        flags &= ~FLAGS_HASH;
    80013198:	441c                	lw	a5,8(s0)
    8001319a:	9bbd                	andi	a5,a5,-17
    8001319c:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    8001319e:	441c                	lw	a5,8(s0)
    800131a0:	4007f793          	andi	a5,a5,1024
    800131a4:	2781                	sext.w	a5,a5
    800131a6:	c781                	beqz	a5,800131ae <_ntoa_long+0x4c>
    800131a8:	f9843783          	ld	a5,-104(s0)
    800131ac:	c7c1                	beqz	a5,80013234 <_ntoa_long+0xd2>
        do {
            const char digit = (char)(value % base);
    800131ae:	f9843703          	ld	a4,-104(s0)
    800131b2:	f8843783          	ld	a5,-120(s0)
    800131b6:	02f777b3          	remu	a5,a4,a5
    800131ba:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    800131be:	fe744783          	lbu	a5,-25(s0)
    800131c2:	0ff7f713          	andi	a4,a5,255
    800131c6:	47a5                	li	a5,9
    800131c8:	00e7e963          	bltu	a5,a4,800131da <_ntoa_long+0x78>
    800131cc:	fe744783          	lbu	a5,-25(s0)
    800131d0:	0307879b          	addiw	a5,a5,48
    800131d4:	0ff7f793          	andi	a5,a5,255
    800131d8:	a01d                	j	800131fe <_ntoa_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    800131da:	441c                	lw	a5,8(s0)
    800131dc:	0207f793          	andi	a5,a5,32
    800131e0:	2781                	sext.w	a5,a5
    800131e2:	c781                	beqz	a5,800131ea <_ntoa_long+0x88>
    800131e4:	04100793          	li	a5,65
    800131e8:	a019                	j	800131ee <_ntoa_long+0x8c>
    800131ea:	06100793          	li	a5,97
    800131ee:	fe744703          	lbu	a4,-25(s0)
    800131f2:	9fb9                	addw	a5,a5,a4
    800131f4:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    800131f8:	37d9                	addiw	a5,a5,-10
    800131fa:	0ff7f793          	andi	a5,a5,255
    800131fe:	fe843703          	ld	a4,-24(s0)
    80013202:	00170693          	addi	a3,a4,1
    80013206:	fed43423          	sd	a3,-24(s0)
    8001320a:	ff040693          	addi	a3,s0,-16
    8001320e:	9736                	add	a4,a4,a3
    80013210:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    80013214:	f9843703          	ld	a4,-104(s0)
    80013218:	f8843783          	ld	a5,-120(s0)
    8001321c:	02f757b3          	divu	a5,a4,a5
    80013220:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    80013224:	f9843783          	ld	a5,-104(s0)
    80013228:	c791                	beqz	a5,80013234 <_ntoa_long+0xd2>
    8001322a:	fe843703          	ld	a4,-24(s0)
    8001322e:	47fd                	li	a5,31
    80013230:	f6e7ffe3          	bgeu	a5,a4,800131ae <_ntoa_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    80013234:	f8843783          	ld	a5,-120(s0)
    80013238:	0007861b          	sext.w	a2,a5
    8001323c:	f9744683          	lbu	a3,-105(s0)
    80013240:	fc040713          	addi	a4,s0,-64
    80013244:	441c                	lw	a5,8(s0)
    80013246:	e83e                	sd	a5,16(sp)
    80013248:	401c                	lw	a5,0(s0)
    8001324a:	e43e                	sd	a5,8(sp)
    8001324c:	f9042783          	lw	a5,-112(s0)
    80013250:	e03e                	sd	a5,0(sp)
    80013252:	88b2                	mv	a7,a2
    80013254:	8836                	mv	a6,a3
    80013256:	fe843783          	ld	a5,-24(s0)
    8001325a:	fa043683          	ld	a3,-96(s0)
    8001325e:	fa843603          	ld	a2,-88(s0)
    80013262:	fb043583          	ld	a1,-80(s0)
    80013266:	fb843503          	ld	a0,-72(s0)
    8001326a:	c5fff0ef          	jal	ra,80012ec8 <_ntoa_format>
    8001326e:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    80013270:	853e                	mv	a0,a5
    80013272:	60ea                	ld	ra,152(sp)
    80013274:	644a                	ld	s0,144(sp)
    80013276:	610d                	addi	sp,sp,160
    80013278:	8082                	ret

000000008001327a <_ntoa_long_long>:
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx,
                              size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base,
                              unsigned int prec, unsigned int width,
                              unsigned int flags)
{
    8001327a:	7135                	addi	sp,sp,-160
    8001327c:	ed06                	sd	ra,152(sp)
    8001327e:	e922                	sd	s0,144(sp)
    80013280:	1100                	addi	s0,sp,160
    80013282:	faa43c23          	sd	a0,-72(s0)
    80013286:	fab43823          	sd	a1,-80(s0)
    8001328a:	fac43423          	sd	a2,-88(s0)
    8001328e:	fad43023          	sd	a3,-96(s0)
    80013292:	f8e43c23          	sd	a4,-104(s0)
    80013296:	f9043423          	sd	a6,-120(s0)
    8001329a:	8746                	mv	a4,a7
    8001329c:	f8f40ba3          	sb	a5,-105(s0)
    800132a0:	87ba                	mv	a5,a4
    800132a2:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    800132a6:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    800132aa:	f9843783          	ld	a5,-104(s0)
    800132ae:	e781                	bnez	a5,800132b6 <_ntoa_long_long+0x3c>
        flags &= ~FLAGS_HASH;
    800132b0:	441c                	lw	a5,8(s0)
    800132b2:	9bbd                	andi	a5,a5,-17
    800132b4:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    800132b6:	441c                	lw	a5,8(s0)
    800132b8:	4007f793          	andi	a5,a5,1024
    800132bc:	2781                	sext.w	a5,a5
    800132be:	c781                	beqz	a5,800132c6 <_ntoa_long_long+0x4c>
    800132c0:	f9843783          	ld	a5,-104(s0)
    800132c4:	c7c1                	beqz	a5,8001334c <_ntoa_long_long+0xd2>
        do {
            const char digit = (char)(value % base);
    800132c6:	f9843703          	ld	a4,-104(s0)
    800132ca:	f8843783          	ld	a5,-120(s0)
    800132ce:	02f777b3          	remu	a5,a4,a5
    800132d2:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    800132d6:	fe744783          	lbu	a5,-25(s0)
    800132da:	0ff7f713          	andi	a4,a5,255
    800132de:	47a5                	li	a5,9
    800132e0:	00e7e963          	bltu	a5,a4,800132f2 <_ntoa_long_long+0x78>
    800132e4:	fe744783          	lbu	a5,-25(s0)
    800132e8:	0307879b          	addiw	a5,a5,48
    800132ec:	0ff7f793          	andi	a5,a5,255
    800132f0:	a01d                	j	80013316 <_ntoa_long_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    800132f2:	441c                	lw	a5,8(s0)
    800132f4:	0207f793          	andi	a5,a5,32
    800132f8:	2781                	sext.w	a5,a5
    800132fa:	c781                	beqz	a5,80013302 <_ntoa_long_long+0x88>
    800132fc:	04100793          	li	a5,65
    80013300:	a019                	j	80013306 <_ntoa_long_long+0x8c>
    80013302:	06100793          	li	a5,97
    80013306:	fe744703          	lbu	a4,-25(s0)
    8001330a:	9fb9                	addw	a5,a5,a4
    8001330c:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    80013310:	37d9                	addiw	a5,a5,-10
    80013312:	0ff7f793          	andi	a5,a5,255
    80013316:	fe843703          	ld	a4,-24(s0)
    8001331a:	00170693          	addi	a3,a4,1
    8001331e:	fed43423          	sd	a3,-24(s0)
    80013322:	ff040693          	addi	a3,s0,-16
    80013326:	9736                	add	a4,a4,a3
    80013328:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    8001332c:	f9843703          	ld	a4,-104(s0)
    80013330:	f8843783          	ld	a5,-120(s0)
    80013334:	02f757b3          	divu	a5,a4,a5
    80013338:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    8001333c:	f9843783          	ld	a5,-104(s0)
    80013340:	c791                	beqz	a5,8001334c <_ntoa_long_long+0xd2>
    80013342:	fe843703          	ld	a4,-24(s0)
    80013346:	47fd                	li	a5,31
    80013348:	f6e7ffe3          	bgeu	a5,a4,800132c6 <_ntoa_long_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    8001334c:	f8843783          	ld	a5,-120(s0)
    80013350:	0007861b          	sext.w	a2,a5
    80013354:	f9744683          	lbu	a3,-105(s0)
    80013358:	fc040713          	addi	a4,s0,-64
    8001335c:	441c                	lw	a5,8(s0)
    8001335e:	e83e                	sd	a5,16(sp)
    80013360:	401c                	lw	a5,0(s0)
    80013362:	e43e                	sd	a5,8(sp)
    80013364:	f9042783          	lw	a5,-112(s0)
    80013368:	e03e                	sd	a5,0(sp)
    8001336a:	88b2                	mv	a7,a2
    8001336c:	8836                	mv	a6,a3
    8001336e:	fe843783          	ld	a5,-24(s0)
    80013372:	fa043683          	ld	a3,-96(s0)
    80013376:	fa843603          	ld	a2,-88(s0)
    8001337a:	fb043583          	ld	a1,-80(s0)
    8001337e:	fb843503          	ld	a0,-72(s0)
    80013382:	b47ff0ef          	jal	ra,80012ec8 <_ntoa_format>
    80013386:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    80013388:	853e                	mv	a0,a5
    8001338a:	60ea                	ld	ra,152(sp)
    8001338c:	644a                	ld	s0,144(sp)
    8001338e:	610d                	addi	sp,sp,160
    80013390:	8082                	ret

0000000080013392 <_ftoa>:

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    80013392:	7135                	addi	sp,sp,-160
    80013394:	ed06                	sd	ra,152(sp)
    80013396:	e922                	sd	s0,144(sp)
    80013398:	1100                	addi	s0,sp,160
    8001339a:	f8a43c23          	sd	a0,-104(s0)
    8001339e:	f8b43823          	sd	a1,-112(s0)
    800133a2:	f8c43423          	sd	a2,-120(s0)
    800133a6:	f8d43023          	sd	a3,-128(s0)
    800133aa:	f6a43c27          	fsd	fa0,-136(s0)
    800133ae:	863a                	mv	a2,a4
    800133b0:	86be                	mv	a3,a5
    800133b2:	8742                	mv	a4,a6
    800133b4:	87b2                	mv	a5,a2
    800133b6:	f6f42a23          	sw	a5,-140(s0)
    800133ba:	87b6                	mv	a5,a3
    800133bc:	f6f42823          	sw	a5,-144(s0)
    800133c0:	87ba                	mv	a5,a4
    800133c2:	f6f42623          	sw	a5,-148(s0)
    char buf[PRINTF_FTOA_BUFFER_SIZE];
    size_t len                  = 0U;
    800133c6:	fe043423          	sd	zero,-24(s0)
    double diff                 = 0.0;
    800133ca:	fc043423          	sd	zero,-56(s0)
    static const double pow10[] = {1,         10,        100,     1000,
                                   10000,     100000,    1000000, 10000000,
                                   100000000, 1000000000};

    // test for special values
    if (value != value)
    800133ce:	f7843707          	fld	fa4,-136(s0)
    800133d2:	f7843787          	fld	fa5,-136(s0)
    800133d6:	a2f727d3          	feq.d	a5,fa4,fa5
    800133da:	eb85                	bnez	a5,8001340a <_ftoa+0x78>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    800133dc:	f6c42703          	lw	a4,-148(s0)
    800133e0:	f7042783          	lw	a5,-144(s0)
    800133e4:	88ba                	mv	a7,a4
    800133e6:	883e                	mv	a6,a5
    800133e8:	478d                	li	a5,3
    800133ea:	00006717          	auipc	a4,0x6
    800133ee:	55e70713          	addi	a4,a4,1374 # 80019948 <SYSCALLS+0x948>
    800133f2:	f8043683          	ld	a3,-128(s0)
    800133f6:	f8843603          	ld	a2,-120(s0)
    800133fa:	f9043583          	ld	a1,-112(s0)
    800133fe:	f9843503          	ld	a0,-104(s0)
    80013402:	9b5ff0ef          	jal	ra,80012db6 <_out_rev>
    80013406:	87aa                	mv	a5,a0
    80013408:	a1f1                	j	800138d4 <_ftoa+0x542>
    if (value < -DBL_MAX)
    8001340a:	f7843707          	fld	fa4,-136(s0)
    8001340e:	00006797          	auipc	a5,0x6
    80013412:	78a78793          	addi	a5,a5,1930 # 80019b98 <pow10.0+0x50>
    80013416:	239c                	fld	fa5,0(a5)
    80013418:	a2f717d3          	flt.d	a5,fa4,fa5
    8001341c:	cb85                	beqz	a5,8001344c <_ftoa+0xba>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    8001341e:	f6c42703          	lw	a4,-148(s0)
    80013422:	f7042783          	lw	a5,-144(s0)
    80013426:	88ba                	mv	a7,a4
    80013428:	883e                	mv	a6,a5
    8001342a:	4791                	li	a5,4
    8001342c:	00006717          	auipc	a4,0x6
    80013430:	52470713          	addi	a4,a4,1316 # 80019950 <SYSCALLS+0x950>
    80013434:	f8043683          	ld	a3,-128(s0)
    80013438:	f8843603          	ld	a2,-120(s0)
    8001343c:	f9043583          	ld	a1,-112(s0)
    80013440:	f9843503          	ld	a0,-104(s0)
    80013444:	973ff0ef          	jal	ra,80012db6 <_out_rev>
    80013448:	87aa                	mv	a5,a0
    8001344a:	a169                	j	800138d4 <_ftoa+0x542>
    if (value > DBL_MAX)
    8001344c:	f7843707          	fld	fa4,-136(s0)
    80013450:	00006797          	auipc	a5,0x6
    80013454:	75078793          	addi	a5,a5,1872 # 80019ba0 <pow10.0+0x58>
    80013458:	239c                	fld	fa5,0(a5)
    8001345a:	a2e797d3          	flt.d	a5,fa5,fa4
    8001345e:	cba9                	beqz	a5,800134b0 <_ftoa+0x11e>
        return _out_rev(out, buffer, idx, maxlen,
                        (flags & FLAGS_PLUS) ? "fni+" : "fni",
    80013460:	f6c42783          	lw	a5,-148(s0)
    80013464:	8b91                	andi	a5,a5,4
    80013466:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    80013468:	c791                	beqz	a5,80013474 <_ftoa+0xe2>
    8001346a:	00006717          	auipc	a4,0x6
    8001346e:	4ee70713          	addi	a4,a4,1262 # 80019958 <SYSCALLS+0x958>
    80013472:	a029                	j	8001347c <_ftoa+0xea>
    80013474:	00006717          	auipc	a4,0x6
    80013478:	4ec70713          	addi	a4,a4,1260 # 80019960 <SYSCALLS+0x960>
                        (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    8001347c:	f6c42783          	lw	a5,-148(s0)
    80013480:	8b91                	andi	a5,a5,4
    80013482:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    80013484:	c399                	beqz	a5,8001348a <_ftoa+0xf8>
    80013486:	4791                	li	a5,4
    80013488:	a011                	j	8001348c <_ftoa+0xfa>
    8001348a:	478d                	li	a5,3
    8001348c:	f6c42603          	lw	a2,-148(s0)
    80013490:	f7042683          	lw	a3,-144(s0)
    80013494:	88b2                	mv	a7,a2
    80013496:	8836                	mv	a6,a3
    80013498:	f8043683          	ld	a3,-128(s0)
    8001349c:	f8843603          	ld	a2,-120(s0)
    800134a0:	f9043583          	ld	a1,-112(s0)
    800134a4:	f9843503          	ld	a0,-104(s0)
    800134a8:	90fff0ef          	jal	ra,80012db6 <_out_rev>
    800134ac:	87aa                	mv	a5,a0
    800134ae:	a11d                	j	800138d4 <_ftoa+0x542>

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which
    // could be 100s of characters overflowing your buffers == bad
    if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    800134b0:	f7843707          	fld	fa4,-136(s0)
    800134b4:	00006797          	auipc	a5,0x6
    800134b8:	6f478793          	addi	a5,a5,1780 # 80019ba8 <pow10.0+0x60>
    800134bc:	239c                	fld	fa5,0(a5)
    800134be:	a2e797d3          	flt.d	a5,fa5,fa4
    800134c2:	eb99                	bnez	a5,800134d8 <_ftoa+0x146>
    800134c4:	f7843707          	fld	fa4,-136(s0)
    800134c8:	00006797          	auipc	a5,0x6
    800134cc:	6e878793          	addi	a5,a5,1768 # 80019bb0 <pow10.0+0x68>
    800134d0:	239c                	fld	fa5,0(a5)
    800134d2:	a2f717d3          	flt.d	a5,fa4,fa5
    800134d6:	c795                	beqz	a5,80013502 <_ftoa+0x170>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    800134d8:	f6c42683          	lw	a3,-148(s0)
    800134dc:	f7042783          	lw	a5,-144(s0)
    800134e0:	f7442703          	lw	a4,-140(s0)
    800134e4:	8836                	mv	a6,a3
    800134e6:	f7843507          	fld	fa0,-136(s0)
    800134ea:	f8043683          	ld	a3,-128(s0)
    800134ee:	f8843603          	ld	a2,-120(s0)
    800134f2:	f9043583          	ld	a1,-112(s0)
    800134f6:	f9843503          	ld	a0,-104(s0)
    800134fa:	3e4000ef          	jal	ra,800138de <_etoa>
    800134fe:	87aa                	mv	a5,a0
    80013500:	aed1                	j	800138d4 <_ftoa+0x542>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
    80013502:	fe0403a3          	sb	zero,-25(s0)
    if (value < 0) {
    80013506:	f7843787          	fld	fa5,-136(s0)
    8001350a:	f2000753          	fmv.d.x	fa4,zero
    8001350e:	a2e797d3          	flt.d	a5,fa5,fa4
    80013512:	cf81                	beqz	a5,8001352a <_ftoa+0x198>
        negative = true;
    80013514:	4785                	li	a5,1
    80013516:	fef403a3          	sb	a5,-25(s0)
        value    = 0 - value;
    8001351a:	f2000753          	fmv.d.x	fa4,zero
    8001351e:	f7843787          	fld	fa5,-136(s0)
    80013522:	0af777d3          	fsub.d	fa5,fa4,fa5
    80013526:	f6f43c27          	fsd	fa5,-136(s0)
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
    8001352a:	f6c42783          	lw	a5,-148(s0)
    8001352e:	4007f793          	andi	a5,a5,1024
    80013532:	2781                	sext.w	a5,a5
    80013534:	e79d                	bnez	a5,80013562 <_ftoa+0x1d0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    80013536:	4799                	li	a5,6
    80013538:	f6f42a23          	sw	a5,-140(s0)
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    8001353c:	a01d                	j	80013562 <_ftoa+0x1d0>
        buf[len++] = '0';
    8001353e:	fe843783          	ld	a5,-24(s0)
    80013542:	00178713          	addi	a4,a5,1
    80013546:	fee43423          	sd	a4,-24(s0)
    8001354a:	ff040713          	addi	a4,s0,-16
    8001354e:	97ba                	add	a5,a5,a4
    80013550:	03000713          	li	a4,48
    80013554:	fae78823          	sb	a4,-80(a5)
        prec--;
    80013558:	f7442783          	lw	a5,-140(s0)
    8001355c:	37fd                	addiw	a5,a5,-1
    8001355e:	f6f42a23          	sw	a5,-140(s0)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    80013562:	fe843703          	ld	a4,-24(s0)
    80013566:	47fd                	li	a5,31
    80013568:	00e7e963          	bltu	a5,a4,8001357a <_ftoa+0x1e8>
    8001356c:	f7442783          	lw	a5,-140(s0)
    80013570:	0007871b          	sext.w	a4,a5
    80013574:	47a5                	li	a5,9
    80013576:	fce7e4e3          	bltu	a5,a4,8001353e <_ftoa+0x1ac>
    }

    int whole          = (int)value;
    8001357a:	f7843787          	fld	fa5,-136(s0)
    8001357e:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80013582:	fef42023          	sw	a5,-32(s0)
    double tmp         = (value - whole) * pow10[prec];
    80013586:	fe042783          	lw	a5,-32(s0)
    8001358a:	d20787d3          	fcvt.d.w	fa5,a5
    8001358e:	f7843707          	fld	fa4,-136(s0)
    80013592:	0af77753          	fsub.d	fa4,fa4,fa5
    80013596:	00006717          	auipc	a4,0x6
    8001359a:	5b270713          	addi	a4,a4,1458 # 80019b48 <pow10.0>
    8001359e:	f7446783          	lwu	a5,-140(s0)
    800135a2:	078e                	slli	a5,a5,0x3
    800135a4:	97ba                	add	a5,a5,a4
    800135a6:	239c                	fld	fa5,0(a5)
    800135a8:	12f777d3          	fmul.d	fa5,fa4,fa5
    800135ac:	fcf43027          	fsd	fa5,-64(s0)
    unsigned long frac = (unsigned long)tmp;
    800135b0:	fc043787          	fld	fa5,-64(s0)
    800135b4:	c23797d3          	fcvt.lu.d	a5,fa5,rtz
    800135b8:	fcf43c23          	sd	a5,-40(s0)
    diff               = tmp - frac;
    800135bc:	fd843783          	ld	a5,-40(s0)
    800135c0:	d237f7d3          	fcvt.d.lu	fa5,a5
    800135c4:	fc043707          	fld	fa4,-64(s0)
    800135c8:	0af777d3          	fsub.d	fa5,fa4,fa5
    800135cc:	fcf43427          	fsd	fa5,-56(s0)

    if (diff > 0.5) {
    800135d0:	fc843707          	fld	fa4,-56(s0)
    800135d4:	00006797          	auipc	a5,0x6
    800135d8:	5e478793          	addi	a5,a5,1508 # 80019bb8 <pow10.0+0x70>
    800135dc:	239c                	fld	fa5,0(a5)
    800135de:	a2e797d3          	flt.d	a5,fa5,fa4
    800135e2:	cf95                	beqz	a5,8001361e <_ftoa+0x28c>
        ++frac;
    800135e4:	fd843783          	ld	a5,-40(s0)
    800135e8:	0785                	addi	a5,a5,1
    800135ea:	fcf43c23          	sd	a5,-40(s0)
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
    800135ee:	fd843783          	ld	a5,-40(s0)
    800135f2:	d237f753          	fcvt.d.lu	fa4,a5
    800135f6:	00006717          	auipc	a4,0x6
    800135fa:	55270713          	addi	a4,a4,1362 # 80019b48 <pow10.0>
    800135fe:	f7446783          	lwu	a5,-140(s0)
    80013602:	078e                	slli	a5,a5,0x3
    80013604:	97ba                	add	a5,a5,a4
    80013606:	239c                	fld	fa5,0(a5)
    80013608:	a2e787d3          	fle.d	a5,fa5,fa4
    8001360c:	cf9d                	beqz	a5,8001364a <_ftoa+0x2b8>
            frac = 0;
    8001360e:	fc043c23          	sd	zero,-40(s0)
            ++whole;
    80013612:	fe042783          	lw	a5,-32(s0)
    80013616:	2785                	addiw	a5,a5,1
    80013618:	fef42023          	sw	a5,-32(s0)
    8001361c:	a03d                	j	8001364a <_ftoa+0x2b8>
        }
    }
    else if (diff < 0.5) {
    8001361e:	fc843707          	fld	fa4,-56(s0)
    80013622:	00006797          	auipc	a5,0x6
    80013626:	59678793          	addi	a5,a5,1430 # 80019bb8 <pow10.0+0x70>
    8001362a:	239c                	fld	fa5,0(a5)
    8001362c:	a2f717d3          	flt.d	a5,fa4,fa5
    80013630:	ef89                	bnez	a5,8001364a <_ftoa+0x2b8>
    }
    else if ((frac == 0U) || (frac & 1U)) {
    80013632:	fd843783          	ld	a5,-40(s0)
    80013636:	c789                	beqz	a5,80013640 <_ftoa+0x2ae>
    80013638:	fd843783          	ld	a5,-40(s0)
    8001363c:	8b85                	andi	a5,a5,1
    8001363e:	c791                	beqz	a5,8001364a <_ftoa+0x2b8>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
    80013640:	fd843783          	ld	a5,-40(s0)
    80013644:	0785                	addi	a5,a5,1
    80013646:	fcf43c23          	sd	a5,-40(s0)
    }

    if (prec == 0U) {
    8001364a:	f7442783          	lw	a5,-140(s0)
    8001364e:	2781                	sext.w	a5,a5
    80013650:	e3bd                	bnez	a5,800136b6 <_ftoa+0x324>
        diff = value - (double)whole;
    80013652:	fe042783          	lw	a5,-32(s0)
    80013656:	d20787d3          	fcvt.d.w	fa5,a5
    8001365a:	f7843707          	fld	fa4,-136(s0)
    8001365e:	0af777d3          	fsub.d	fa5,fa4,fa5
    80013662:	fcf43427          	fsd	fa5,-56(s0)
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    80013666:	fc843707          	fld	fa4,-56(s0)
    8001366a:	00006797          	auipc	a5,0x6
    8001366e:	54e78793          	addi	a5,a5,1358 # 80019bb8 <pow10.0+0x70>
    80013672:	239c                	fld	fa5,0(a5)
    80013674:	a2f717d3          	flt.d	a5,fa4,fa5
    80013678:	00f037b3          	snez	a5,a5
    8001367c:	0ff7f793          	andi	a5,a5,255
    80013680:	0017c793          	xori	a5,a5,1
    80013684:	0ff7f793          	andi	a5,a5,255
    80013688:	eb99                	bnez	a5,8001369e <_ftoa+0x30c>
    8001368a:	fc843707          	fld	fa4,-56(s0)
    8001368e:	00006797          	auipc	a5,0x6
    80013692:	52a78793          	addi	a5,a5,1322 # 80019bb8 <pow10.0+0x70>
    80013696:	239c                	fld	fa5,0(a5)
    80013698:	a2e797d3          	flt.d	a5,fa5,fa4
    8001369c:	cbf1                	beqz	a5,80013770 <_ftoa+0x3de>
    8001369e:	fe042783          	lw	a5,-32(s0)
    800136a2:	8b85                	andi	a5,a5,1
    800136a4:	2781                	sext.w	a5,a5
    800136a6:	10078863          	beqz	a5,800137b6 <_ftoa+0x424>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
    800136aa:	fe042783          	lw	a5,-32(s0)
    800136ae:	2785                	addiw	a5,a5,1
    800136b0:	fef42023          	sw	a5,-32(s0)
    800136b4:	a209                	j	800137b6 <_ftoa+0x424>
        }
    }
    else {
        unsigned int count = prec;
    800136b6:	f7442783          	lw	a5,-140(s0)
    800136ba:	fcf42a23          	sw	a5,-44(s0)
        // now do fractional part, as an unsigned number
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    800136be:	a0b1                	j	8001370a <_ftoa+0x378>
            --count;
    800136c0:	fd442783          	lw	a5,-44(s0)
    800136c4:	37fd                	addiw	a5,a5,-1
    800136c6:	fcf42a23          	sw	a5,-44(s0)
            buf[len++] = (char)(48U + (frac % 10U));
    800136ca:	fd843703          	ld	a4,-40(s0)
    800136ce:	47a9                	li	a5,10
    800136d0:	02f777b3          	remu	a5,a4,a5
    800136d4:	0ff7f713          	andi	a4,a5,255
    800136d8:	fe843783          	ld	a5,-24(s0)
    800136dc:	00178693          	addi	a3,a5,1
    800136e0:	fed43423          	sd	a3,-24(s0)
    800136e4:	0307071b          	addiw	a4,a4,48
    800136e8:	0ff77713          	andi	a4,a4,255
    800136ec:	ff040693          	addi	a3,s0,-16
    800136f0:	97b6                	add	a5,a5,a3
    800136f2:	fae78823          	sb	a4,-80(a5)
            if (!(frac /= 10U)) {
    800136f6:	fd843703          	ld	a4,-40(s0)
    800136fa:	47a9                	li	a5,10
    800136fc:	02f757b3          	divu	a5,a4,a5
    80013700:	fcf43c23          	sd	a5,-40(s0)
    80013704:	fd843783          	ld	a5,-40(s0)
    80013708:	c799                	beqz	a5,80013716 <_ftoa+0x384>
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    8001370a:	fe843703          	ld	a4,-24(s0)
    8001370e:	47fd                	li	a5,31
    80013710:	fae7f8e3          	bgeu	a5,a4,800136c0 <_ftoa+0x32e>
    80013714:	a005                	j	80013734 <_ftoa+0x3a2>
                break;
    80013716:	0001                	nop
            }
        }
        // add extra 0s
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    80013718:	a831                	j	80013734 <_ftoa+0x3a2>
            buf[len++] = '0';
    8001371a:	fe843783          	ld	a5,-24(s0)
    8001371e:	00178713          	addi	a4,a5,1
    80013722:	fee43423          	sd	a4,-24(s0)
    80013726:	ff040713          	addi	a4,s0,-16
    8001372a:	97ba                	add	a5,a5,a4
    8001372c:	03000713          	li	a4,48
    80013730:	fae78823          	sb	a4,-80(a5)
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    80013734:	fe843703          	ld	a4,-24(s0)
    80013738:	47fd                	li	a5,31
    8001373a:	00e7e963          	bltu	a5,a4,8001374c <_ftoa+0x3ba>
    8001373e:	fd442783          	lw	a5,-44(s0)
    80013742:	fff7871b          	addiw	a4,a5,-1
    80013746:	fce42a23          	sw	a4,-44(s0)
    8001374a:	fbe1                	bnez	a5,8001371a <_ftoa+0x388>
        }
        if (len < PRINTF_FTOA_BUFFER_SIZE) {
    8001374c:	fe843703          	ld	a4,-24(s0)
    80013750:	47fd                	li	a5,31
    80013752:	06e7e263          	bltu	a5,a4,800137b6 <_ftoa+0x424>
            // add decimal
            buf[len++] = '.';
    80013756:	fe843783          	ld	a5,-24(s0)
    8001375a:	00178713          	addi	a4,a5,1
    8001375e:	fee43423          	sd	a4,-24(s0)
    80013762:	ff040713          	addi	a4,s0,-16
    80013766:	97ba                	add	a5,a5,a4
    80013768:	02e00713          	li	a4,46
    8001376c:	fae78823          	sb	a4,-80(a5)
        }
    }

    // do whole part, number is reversed
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80013770:	a099                	j	800137b6 <_ftoa+0x424>
        buf[len++] = (char)(48 + (whole % 10));
    80013772:	fe042703          	lw	a4,-32(s0)
    80013776:	47a9                	li	a5,10
    80013778:	02f767bb          	remw	a5,a4,a5
    8001377c:	2781                	sext.w	a5,a5
    8001377e:	0ff7f713          	andi	a4,a5,255
    80013782:	fe843783          	ld	a5,-24(s0)
    80013786:	00178693          	addi	a3,a5,1
    8001378a:	fed43423          	sd	a3,-24(s0)
    8001378e:	0307071b          	addiw	a4,a4,48
    80013792:	0ff77713          	andi	a4,a4,255
    80013796:	ff040693          	addi	a3,s0,-16
    8001379a:	97b6                	add	a5,a5,a3
    8001379c:	fae78823          	sb	a4,-80(a5)
        if (!(whole /= 10)) {
    800137a0:	fe042703          	lw	a4,-32(s0)
    800137a4:	47a9                	li	a5,10
    800137a6:	02f747bb          	divw	a5,a4,a5
    800137aa:	fef42023          	sw	a5,-32(s0)
    800137ae:	fe042783          	lw	a5,-32(s0)
    800137b2:	2781                	sext.w	a5,a5
    800137b4:	c799                	beqz	a5,800137c2 <_ftoa+0x430>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    800137b6:	fe843703          	ld	a4,-24(s0)
    800137ba:	47fd                	li	a5,31
    800137bc:	fae7fbe3          	bgeu	a5,a4,80013772 <_ftoa+0x3e0>
    800137c0:	a011                	j	800137c4 <_ftoa+0x432>
            break;
    800137c2:	0001                	nop
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    800137c4:	f6c42783          	lw	a5,-148(s0)
    800137c8:	8b89                	andi	a5,a5,2
    800137ca:	2781                	sext.w	a5,a5
    800137cc:	e3b5                	bnez	a5,80013830 <_ftoa+0x49e>
    800137ce:	f6c42783          	lw	a5,-148(s0)
    800137d2:	8b85                	andi	a5,a5,1
    800137d4:	2781                	sext.w	a5,a5
    800137d6:	cfa9                	beqz	a5,80013830 <_ftoa+0x49e>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    800137d8:	f7042783          	lw	a5,-144(s0)
    800137dc:	2781                	sext.w	a5,a5
    800137de:	cf95                	beqz	a5,8001381a <_ftoa+0x488>
    800137e0:	fe744783          	lbu	a5,-25(s0)
    800137e4:	0ff7f793          	andi	a5,a5,255
    800137e8:	e791                	bnez	a5,800137f4 <_ftoa+0x462>
    800137ea:	f6c42783          	lw	a5,-148(s0)
    800137ee:	8bb1                	andi	a5,a5,12
    800137f0:	2781                	sext.w	a5,a5
    800137f2:	c785                	beqz	a5,8001381a <_ftoa+0x488>
            width--;
    800137f4:	f7042783          	lw	a5,-144(s0)
    800137f8:	37fd                	addiw	a5,a5,-1
    800137fa:	f6f42823          	sw	a5,-144(s0)
        }
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    800137fe:	a831                	j	8001381a <_ftoa+0x488>
            buf[len++] = '0';
    80013800:	fe843783          	ld	a5,-24(s0)
    80013804:	00178713          	addi	a4,a5,1
    80013808:	fee43423          	sd	a4,-24(s0)
    8001380c:	ff040713          	addi	a4,s0,-16
    80013810:	97ba                	add	a5,a5,a4
    80013812:	03000713          	li	a4,48
    80013816:	fae78823          	sb	a4,-80(a5)
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    8001381a:	f7046783          	lwu	a5,-144(s0)
    8001381e:	fe843703          	ld	a4,-24(s0)
    80013822:	00f77763          	bgeu	a4,a5,80013830 <_ftoa+0x49e>
    80013826:	fe843703          	ld	a4,-24(s0)
    8001382a:	47fd                	li	a5,31
    8001382c:	fce7fae3          	bgeu	a5,a4,80013800 <_ftoa+0x46e>
        }
    }

    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    80013830:	fe843703          	ld	a4,-24(s0)
    80013834:	47fd                	li	a5,31
    80013836:	06e7ea63          	bltu	a5,a4,800138aa <_ftoa+0x518>
        if (negative) {
    8001383a:	fe744783          	lbu	a5,-25(s0)
    8001383e:	0ff7f793          	andi	a5,a5,255
    80013842:	cf99                	beqz	a5,80013860 <_ftoa+0x4ce>
            buf[len++] = '-';
    80013844:	fe843783          	ld	a5,-24(s0)
    80013848:	00178713          	addi	a4,a5,1
    8001384c:	fee43423          	sd	a4,-24(s0)
    80013850:	ff040713          	addi	a4,s0,-16
    80013854:	97ba                	add	a5,a5,a4
    80013856:	02d00713          	li	a4,45
    8001385a:	fae78823          	sb	a4,-80(a5)
    8001385e:	a0b1                	j	800138aa <_ftoa+0x518>
        }
        else if (flags & FLAGS_PLUS) {
    80013860:	f6c42783          	lw	a5,-148(s0)
    80013864:	8b91                	andi	a5,a5,4
    80013866:	2781                	sext.w	a5,a5
    80013868:	cf99                	beqz	a5,80013886 <_ftoa+0x4f4>
            buf[len++] = '+';  // ignore the space if the '+' exists
    8001386a:	fe843783          	ld	a5,-24(s0)
    8001386e:	00178713          	addi	a4,a5,1
    80013872:	fee43423          	sd	a4,-24(s0)
    80013876:	ff040713          	addi	a4,s0,-16
    8001387a:	97ba                	add	a5,a5,a4
    8001387c:	02b00713          	li	a4,43
    80013880:	fae78823          	sb	a4,-80(a5)
    80013884:	a01d                	j	800138aa <_ftoa+0x518>
        }
        else if (flags & FLAGS_SPACE) {
    80013886:	f6c42783          	lw	a5,-148(s0)
    8001388a:	8ba1                	andi	a5,a5,8
    8001388c:	2781                	sext.w	a5,a5
    8001388e:	cf91                	beqz	a5,800138aa <_ftoa+0x518>
            buf[len++] = ' ';
    80013890:	fe843783          	ld	a5,-24(s0)
    80013894:	00178713          	addi	a4,a5,1
    80013898:	fee43423          	sd	a4,-24(s0)
    8001389c:	ff040713          	addi	a4,s0,-16
    800138a0:	97ba                	add	a5,a5,a4
    800138a2:	02000713          	li	a4,32
    800138a6:	fae78823          	sb	a4,-80(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    800138aa:	f6c42683          	lw	a3,-148(s0)
    800138ae:	f7042783          	lw	a5,-144(s0)
    800138b2:	fa040713          	addi	a4,s0,-96
    800138b6:	88b6                	mv	a7,a3
    800138b8:	883e                	mv	a6,a5
    800138ba:	fe843783          	ld	a5,-24(s0)
    800138be:	f8043683          	ld	a3,-128(s0)
    800138c2:	f8843603          	ld	a2,-120(s0)
    800138c6:	f9043583          	ld	a1,-112(s0)
    800138ca:	f9843503          	ld	a0,-104(s0)
    800138ce:	ce8ff0ef          	jal	ra,80012db6 <_out_rev>
    800138d2:	87aa                	mv	a5,a0
}
    800138d4:	853e                	mv	a0,a5
    800138d6:	60ea                	ld	ra,152(sp)
    800138d8:	644a                	ld	s0,144(sp)
    800138da:	610d                	addi	sp,sp,160
    800138dc:	8082                	ret

00000000800138de <_etoa>:
// internal ftoa variant for exponential floating-point type, contributed by
// Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    800138de:	7135                	addi	sp,sp,-160
    800138e0:	ed06                	sd	ra,152(sp)
    800138e2:	e922                	sd	s0,144(sp)
    800138e4:	1100                	addi	s0,sp,160
    800138e6:	faa43423          	sd	a0,-88(s0)
    800138ea:	fab43023          	sd	a1,-96(s0)
    800138ee:	f8c43c23          	sd	a2,-104(s0)
    800138f2:	f8d43823          	sd	a3,-112(s0)
    800138f6:	f8a43427          	fsd	fa0,-120(s0)
    800138fa:	863a                	mv	a2,a4
    800138fc:	86be                	mv	a3,a5
    800138fe:	8742                	mv	a4,a6
    80013900:	87b2                	mv	a5,a2
    80013902:	f8f42223          	sw	a5,-124(s0)
    80013906:	87b6                	mv	a5,a3
    80013908:	f8f42023          	sw	a5,-128(s0)
    8001390c:	87ba                	mv	a5,a4
    8001390e:	f6f42e23          	sw	a5,-132(s0)
    // check for NaN and special values
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    80013912:	f8843707          	fld	fa4,-120(s0)
    80013916:	f8843787          	fld	fa5,-120(s0)
    8001391a:	a2f727d3          	feq.d	a5,fa4,fa5
    8001391e:	c78d                	beqz	a5,80013948 <_etoa+0x6a>
    80013920:	f8843707          	fld	fa4,-120(s0)
    80013924:	00006797          	auipc	a5,0x6
    80013928:	27c78793          	addi	a5,a5,636 # 80019ba0 <pow10.0+0x58>
    8001392c:	239c                	fld	fa5,0(a5)
    8001392e:	a2e797d3          	flt.d	a5,fa5,fa4
    80013932:	eb99                	bnez	a5,80013948 <_etoa+0x6a>
    80013934:	f8843707          	fld	fa4,-120(s0)
    80013938:	00006797          	auipc	a5,0x6
    8001393c:	26078793          	addi	a5,a5,608 # 80019b98 <pow10.0+0x50>
    80013940:	239c                	fld	fa5,0(a5)
    80013942:	a2f717d3          	flt.d	a5,fa4,fa5
    80013946:	c795                	beqz	a5,80013972 <_etoa+0x94>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    80013948:	f7c42683          	lw	a3,-132(s0)
    8001394c:	f8042783          	lw	a5,-128(s0)
    80013950:	f8442703          	lw	a4,-124(s0)
    80013954:	8836                	mv	a6,a3
    80013956:	f8843507          	fld	fa0,-120(s0)
    8001395a:	f9043683          	ld	a3,-112(s0)
    8001395e:	f9843603          	ld	a2,-104(s0)
    80013962:	fa043583          	ld	a1,-96(s0)
    80013966:	fa843503          	ld	a0,-88(s0)
    8001396a:	a29ff0ef          	jal	ra,80013392 <_ftoa>
    8001396e:	87aa                	mv	a5,a0
    80013970:	a11d                	j	80013d96 <_etoa+0x4b8>
    }

    // determine the sign
    const bool negative = value < 0;
    80013972:	f8843787          	fld	fa5,-120(s0)
    80013976:	f2000753          	fmv.d.x	fa4,zero
    8001397a:	a2e797d3          	flt.d	a5,fa5,fa4
    8001397e:	00f037b3          	snez	a5,a5
    80013982:	fef401a3          	sb	a5,-29(s0)
    if (negative) {
    80013986:	fe344783          	lbu	a5,-29(s0)
    8001398a:	0ff7f793          	andi	a5,a5,255
    8001398e:	c799                	beqz	a5,8001399c <_etoa+0xbe>
        value = -value;
    80013990:	f8843787          	fld	fa5,-120(s0)
    80013994:	22f797d3          	fneg.d	fa5,fa5
    80013998:	f8f43427          	fsd	fa5,-120(s0)
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
    8001399c:	f7c42783          	lw	a5,-132(s0)
    800139a0:	4007f793          	andi	a5,a5,1024
    800139a4:	2781                	sext.w	a5,a5
    800139a6:	e781                	bnez	a5,800139ae <_etoa+0xd0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    800139a8:	4799                	li	a5,6
    800139aa:	f8f42223          	sw	a5,-124(s0)
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F   = value;
    800139ae:	f8843787          	fld	fa5,-120(s0)
    800139b2:	faf43c27          	fsd	fa5,-72(s0)
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;  // effectively log2
    800139b6:	fb843783          	ld	a5,-72(s0)
    800139ba:	93d1                	srli	a5,a5,0x34
    800139bc:	2781                	sext.w	a5,a5
    800139be:	7ff7f793          	andi	a5,a5,2047
    800139c2:	2781                	sext.w	a5,a5
    800139c4:	c017879b          	addiw	a5,a5,-1023
    800139c8:	fcf42e23          	sw	a5,-36(s0)
    conv.U   = (conv.U & ((1ULL << 52U) - 1U)) |
    800139cc:	fb843703          	ld	a4,-72(s0)
    800139d0:	57fd                	li	a5,-1
    800139d2:	83b1                	srli	a5,a5,0xc
    800139d4:	8f7d                	and	a4,a4,a5
    800139d6:	3ff00793          	li	a5,1023
    800139da:	17d2                	slli	a5,a5,0x34
    800139dc:	8fd9                	or	a5,a5,a4
    800139de:	faf43c23          	sd	a5,-72(s0)
             (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    // now approximate log10 from the log2 integer part and an expansion of ln
    // around 1.5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    800139e2:	fdc42783          	lw	a5,-36(s0)
    800139e6:	d2078753          	fcvt.d.w	fa4,a5
    800139ea:	00006797          	auipc	a5,0x6
    800139ee:	1d678793          	addi	a5,a5,470 # 80019bc0 <pow10.0+0x78>
    800139f2:	239c                	fld	fa5,0(a5)
    800139f4:	12f77753          	fmul.d	fa4,fa4,fa5
    800139f8:	00006797          	auipc	a5,0x6
    800139fc:	1d078793          	addi	a5,a5,464 # 80019bc8 <pow10.0+0x80>
    80013a00:	239c                	fld	fa5,0(a5)
    80013a02:	02f77753          	fadd.d	fa4,fa4,fa5
                       (conv.F - 1.5) * 0.289529654602168);
    80013a06:	fb843687          	fld	fa3,-72(s0)
    80013a0a:	00006797          	auipc	a5,0x6
    80013a0e:	1c678793          	addi	a5,a5,454 # 80019bd0 <pow10.0+0x88>
    80013a12:	239c                	fld	fa5,0(a5)
    80013a14:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    80013a18:	00006797          	auipc	a5,0x6
    80013a1c:	1c078793          	addi	a5,a5,448 # 80019bd8 <pow10.0+0x90>
    80013a20:	239c                	fld	fa5,0(a5)
    80013a22:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    80013a26:	02f777d3          	fadd.d	fa5,fa4,fa5
    80013a2a:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80013a2e:	fef42623          	sw	a5,-20(s0)
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2            = (int)(expval * 3.321928094887362 + 0.5);
    80013a32:	fec42783          	lw	a5,-20(s0)
    80013a36:	d2078753          	fcvt.d.w	fa4,a5
    80013a3a:	00006797          	auipc	a5,0x6
    80013a3e:	1a678793          	addi	a5,a5,422 # 80019be0 <pow10.0+0x98>
    80013a42:	239c                	fld	fa5,0(a5)
    80013a44:	12f77753          	fmul.d	fa4,fa4,fa5
    80013a48:	00006797          	auipc	a5,0x6
    80013a4c:	17078793          	addi	a5,a5,368 # 80019bb8 <pow10.0+0x70>
    80013a50:	239c                	fld	fa5,0(a5)
    80013a52:	02f777d3          	fadd.d	fa5,fa4,fa5
    80013a56:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80013a5a:	fcf42e23          	sw	a5,-36(s0)
    const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    80013a5e:	fec42783          	lw	a5,-20(s0)
    80013a62:	d2078753          	fcvt.d.w	fa4,a5
    80013a66:	00006797          	auipc	a5,0x6
    80013a6a:	18278793          	addi	a5,a5,386 # 80019be8 <pow10.0+0xa0>
    80013a6e:	239c                	fld	fa5,0(a5)
    80013a70:	12f77753          	fmul.d	fa4,fa4,fa5
    80013a74:	fdc42783          	lw	a5,-36(s0)
    80013a78:	d20786d3          	fcvt.d.w	fa3,a5
    80013a7c:	00006797          	auipc	a5,0x6
    80013a80:	17478793          	addi	a5,a5,372 # 80019bf0 <pow10.0+0xa8>
    80013a84:	239c                	fld	fa5,0(a5)
    80013a86:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    80013a8a:	0af777d3          	fsub.d	fa5,fa4,fa5
    80013a8e:	fcf43827          	fsd	fa5,-48(s0)
    const double z2 = z * z;
    80013a92:	fd043787          	fld	fa5,-48(s0)
    80013a96:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    80013a9a:	fcf43427          	fsd	fa5,-56(s0)
    conv.U          = (uint64_t)(exp2 + 1023) << 52U;
    80013a9e:	fdc42783          	lw	a5,-36(s0)
    80013aa2:	3ff7879b          	addiw	a5,a5,1023
    80013aa6:	2781                	sext.w	a5,a5
    80013aa8:	17d2                	slli	a5,a5,0x34
    80013aaa:	faf43c23          	sd	a5,-72(s0)
    // compute exp(z) using continued fractions, see
    // https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    80013aae:	fb843707          	fld	fa4,-72(s0)
    80013ab2:	fd043787          	fld	fa5,-48(s0)
    80013ab6:	02f7f6d3          	fadd.d	fa3,fa5,fa5
    80013aba:	00006797          	auipc	a5,0x6
    80013abe:	13e78793          	addi	a5,a5,318 # 80019bf8 <pow10.0+0xb0>
    80013ac2:	2390                	fld	fa2,0(a5)
    80013ac4:	fd043787          	fld	fa5,-48(s0)
    80013ac8:	0af67653          	fsub.d	fa2,fa2,fa5
    80013acc:	fc843587          	fld	fa1,-56(s0)
    80013ad0:	00006797          	auipc	a5,0x6
    80013ad4:	13078793          	addi	a5,a5,304 # 80019c00 <pow10.0+0xb8>
    80013ad8:	239c                	fld	fa5,0(a5)
    80013ada:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    80013ade:	00006797          	auipc	a5,0x6
    80013ae2:	12a78793          	addi	a5,a5,298 # 80019c08 <pow10.0+0xc0>
    80013ae6:	239c                	fld	fa5,0(a5)
    80013ae8:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    80013aec:	fc843587          	fld	fa1,-56(s0)
    80013af0:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    80013af4:	00006797          	auipc	a5,0x6
    80013af8:	11c78793          	addi	a5,a5,284 # 80019c10 <pow10.0+0xc8>
    80013afc:	239c                	fld	fa5,0(a5)
    80013afe:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    80013b02:	fc843587          	fld	fa1,-56(s0)
    80013b06:	1af5f7d3          	fdiv.d	fa5,fa1,fa5
    80013b0a:	02f677d3          	fadd.d	fa5,fa2,fa5
    80013b0e:	1af6f6d3          	fdiv.d	fa3,fa3,fa5
    80013b12:	00006797          	auipc	a5,0x6
    80013b16:	10678793          	addi	a5,a5,262 # 80019c18 <pow10.0+0xd0>
    80013b1a:	239c                	fld	fa5,0(a5)
    80013b1c:	02f6f7d3          	fadd.d	fa5,fa3,fa5
    80013b20:	12f777d3          	fmul.d	fa5,fa4,fa5
    80013b24:	faf43c27          	fsd	fa5,-72(s0)
    // correct for rounding errors
    if (value < conv.F) {
    80013b28:	fb843787          	fld	fa5,-72(s0)
    80013b2c:	f8843707          	fld	fa4,-120(s0)
    80013b30:	a2f717d3          	flt.d	a5,fa4,fa5
    80013b34:	c38d                	beqz	a5,80013b56 <_etoa+0x278>
        expval--;
    80013b36:	fec42783          	lw	a5,-20(s0)
    80013b3a:	37fd                	addiw	a5,a5,-1
    80013b3c:	fef42623          	sw	a5,-20(s0)
        conv.F /= 10;
    80013b40:	fb843707          	fld	fa4,-72(s0)
    80013b44:	00006797          	auipc	a5,0x6
    80013b48:	0c478793          	addi	a5,a5,196 # 80019c08 <pow10.0+0xc0>
    80013b4c:	239c                	fld	fa5,0(a5)
    80013b4e:	1af777d3          	fdiv.d	fa5,fa4,fa5
    80013b52:	faf43c27          	fsd	fa5,-72(s0)
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside
    // 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    80013b56:	fec42783          	lw	a5,-20(s0)
    80013b5a:	0007871b          	sext.w	a4,a5
    80013b5e:	06300793          	li	a5,99
    80013b62:	00e7cc63          	blt	a5,a4,80013b7a <_etoa+0x29c>
    80013b66:	fec42783          	lw	a5,-20(s0)
    80013b6a:	0007871b          	sext.w	a4,a5
    80013b6e:	f9d00793          	li	a5,-99
    80013b72:	00f74463          	blt	a4,a5,80013b7a <_etoa+0x29c>
    80013b76:	4791                	li	a5,4
    80013b78:	a011                	j	80013b7c <_etoa+0x29e>
    80013b7a:	4795                	li	a5,5
    80013b7c:	fef42423          	sw	a5,-24(s0)

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
    80013b80:	f7c42703          	lw	a4,-132(s0)
    80013b84:	6785                	lui	a5,0x1
    80013b86:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    80013b8a:	8ff9                	and	a5,a5,a4
    80013b8c:	2781                	sext.w	a5,a5
    80013b8e:	c7c1                	beqz	a5,80013c16 <_etoa+0x338>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
    80013b90:	f8843707          	fld	fa4,-120(s0)
    80013b94:	00006797          	auipc	a5,0x6
    80013b98:	08c78793          	addi	a5,a5,140 # 80019c20 <pow10.0+0xd8>
    80013b9c:	239c                	fld	fa5,0(a5)
    80013b9e:	a2e787d3          	fle.d	a5,fa5,fa4
    80013ba2:	cbb9                	beqz	a5,80013bf8 <_etoa+0x31a>
    80013ba4:	f8843707          	fld	fa4,-120(s0)
    80013ba8:	00006797          	auipc	a5,0x6
    80013bac:	08078793          	addi	a5,a5,128 # 80019c28 <pow10.0+0xe0>
    80013bb0:	239c                	fld	fa5,0(a5)
    80013bb2:	a2f717d3          	flt.d	a5,fa4,fa5
    80013bb6:	c3a9                	beqz	a5,80013bf8 <_etoa+0x31a>
            if ((int)prec > expval) {
    80013bb8:	f8442703          	lw	a4,-124(s0)
    80013bbc:	fec42783          	lw	a5,-20(s0)
    80013bc0:	2781                	sext.w	a5,a5
    80013bc2:	00e7de63          	bge	a5,a4,80013bde <_etoa+0x300>
                prec = (unsigned)((int)prec - expval - 1);
    80013bc6:	f8442703          	lw	a4,-124(s0)
    80013bca:	fec42783          	lw	a5,-20(s0)
    80013bce:	40f707bb          	subw	a5,a4,a5
    80013bd2:	2781                	sext.w	a5,a5
    80013bd4:	37fd                	addiw	a5,a5,-1
    80013bd6:	2781                	sext.w	a5,a5
    80013bd8:	f8f42223          	sw	a5,-124(s0)
    80013bdc:	a019                	j	80013be2 <_etoa+0x304>
            }
            else {
                prec = 0;
    80013bde:	f8042223          	sw	zero,-124(s0)
            }
            flags |= FLAGS_PRECISION;  // make sure _ftoa respects precision
    80013be2:	f7c42783          	lw	a5,-132(s0)
    80013be6:	4007e793          	ori	a5,a5,1024
    80013bea:	f6f42e23          	sw	a5,-132(s0)
            // no characters in exponent
            minwidth = 0U;
    80013bee:	fe042423          	sw	zero,-24(s0)
            expval   = 0;
    80013bf2:	fe042623          	sw	zero,-20(s0)
    80013bf6:	a005                	j	80013c16 <_etoa+0x338>
        }
        else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    80013bf8:	f8442783          	lw	a5,-124(s0)
    80013bfc:	2781                	sext.w	a5,a5
    80013bfe:	cf81                	beqz	a5,80013c16 <_etoa+0x338>
    80013c00:	f7c42783          	lw	a5,-132(s0)
    80013c04:	4007f793          	andi	a5,a5,1024
    80013c08:	2781                	sext.w	a5,a5
    80013c0a:	c791                	beqz	a5,80013c16 <_etoa+0x338>
                --prec;
    80013c0c:	f8442783          	lw	a5,-124(s0)
    80013c10:	37fd                	addiw	a5,a5,-1
    80013c12:	f8f42223          	sw	a5,-124(s0)
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
    80013c16:	f8042783          	lw	a5,-128(s0)
    80013c1a:	fef42223          	sw	a5,-28(s0)
    if (width > minwidth) {
    80013c1e:	f8042703          	lw	a4,-128(s0)
    80013c22:	fe842783          	lw	a5,-24(s0)
    80013c26:	2701                	sext.w	a4,a4
    80013c28:	2781                	sext.w	a5,a5
    80013c2a:	00e7fb63          	bgeu	a5,a4,80013c40 <_etoa+0x362>
        // we didn't fall-back so subtract the characters required for the
        // exponent
        fwidth -= minwidth;
    80013c2e:	fe442703          	lw	a4,-28(s0)
    80013c32:	fe842783          	lw	a5,-24(s0)
    80013c36:	40f707bb          	subw	a5,a4,a5
    80013c3a:	fef42223          	sw	a5,-28(s0)
    80013c3e:	a019                	j	80013c44 <_etoa+0x366>
    }
    else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
    80013c40:	fe042223          	sw	zero,-28(s0)
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
    80013c44:	f7c42783          	lw	a5,-132(s0)
    80013c48:	8b89                	andi	a5,a5,2
    80013c4a:	2781                	sext.w	a5,a5
    80013c4c:	c799                	beqz	a5,80013c5a <_etoa+0x37c>
    80013c4e:	fe842783          	lw	a5,-24(s0)
    80013c52:	2781                	sext.w	a5,a5
    80013c54:	c399                	beqz	a5,80013c5a <_etoa+0x37c>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
    80013c56:	fe042223          	sw	zero,-28(s0)
    }

    // rescale the float value
    if (expval) {
    80013c5a:	fec42783          	lw	a5,-20(s0)
    80013c5e:	2781                	sext.w	a5,a5
    80013c60:	cb89                	beqz	a5,80013c72 <_etoa+0x394>
        value /= conv.F;
    80013c62:	fb843787          	fld	fa5,-72(s0)
    80013c66:	f8843707          	fld	fa4,-120(s0)
    80013c6a:	1af777d3          	fdiv.d	fa5,fa4,fa5
    80013c6e:	f8f43427          	fsd	fa5,-120(s0)
    }

    // output the floating part
    const size_t start_idx = idx;
    80013c72:	f9843783          	ld	a5,-104(s0)
    80013c76:	fcf43023          	sd	a5,-64(s0)
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec,
    80013c7a:	fe344783          	lbu	a5,-29(s0)
    80013c7e:	0ff7f793          	andi	a5,a5,255
    80013c82:	c791                	beqz	a5,80013c8e <_etoa+0x3b0>
    80013c84:	f8843787          	fld	fa5,-120(s0)
    80013c88:	22f797d3          	fneg.d	fa5,fa5
    80013c8c:	a019                	j	80013c92 <_etoa+0x3b4>
    80013c8e:	f8843787          	fld	fa5,-120(s0)
    80013c92:	f7c42703          	lw	a4,-132(s0)
    80013c96:	77fd                	lui	a5,0xfffff
    80013c98:	7ff78793          	addi	a5,a5,2047 # fffffffffffff7ff <_heap_end+0xffffffff77fef7ff>
    80013c9c:	8ff9                	and	a5,a5,a4
    80013c9e:	0007869b          	sext.w	a3,a5
    80013ca2:	fe442783          	lw	a5,-28(s0)
    80013ca6:	f8442703          	lw	a4,-124(s0)
    80013caa:	8836                	mv	a6,a3
    80013cac:	22f78553          	fmv.d	fa0,fa5
    80013cb0:	f9043683          	ld	a3,-112(s0)
    80013cb4:	f9843603          	ld	a2,-104(s0)
    80013cb8:	fa043583          	ld	a1,-96(s0)
    80013cbc:	fa843503          	ld	a0,-88(s0)
    80013cc0:	ed2ff0ef          	jal	ra,80013392 <_ftoa>
    80013cc4:	f8a43c23          	sd	a0,-104(s0)
                fwidth, flags & ~FLAGS_ADAPT_EXP);

    // output the exponent part
    if (minwidth) {
    80013cc8:	fe842783          	lw	a5,-24(s0)
    80013ccc:	2781                	sext.w	a5,a5
    80013cce:	c3f1                	beqz	a5,80013d92 <_etoa+0x4b4>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    80013cd0:	f7c42783          	lw	a5,-132(s0)
    80013cd4:	0207f793          	andi	a5,a5,32
    80013cd8:	2781                	sext.w	a5,a5
    80013cda:	c781                	beqz	a5,80013ce2 <_etoa+0x404>
    80013cdc:	04500793          	li	a5,69
    80013ce0:	a019                	j	80013ce6 <_etoa+0x408>
    80013ce2:	06500793          	li	a5,101
    80013ce6:	f9843703          	ld	a4,-104(s0)
    80013cea:	00170693          	addi	a3,a4,1
    80013cee:	f8d43c23          	sd	a3,-104(s0)
    80013cf2:	fa843803          	ld	a6,-88(s0)
    80013cf6:	f9043683          	ld	a3,-112(s0)
    80013cfa:	863a                	mv	a2,a4
    80013cfc:	fa043583          	ld	a1,-96(s0)
    80013d00:	853e                	mv	a0,a5
    80013d02:	9802                	jalr	a6
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen,
                         (expval < 0) ? -expval : expval, expval < 0, 10, 0,
    80013d04:	fec42783          	lw	a5,-20(s0)
    80013d08:	41f7d79b          	sraiw	a5,a5,0x1f
    80013d0c:	fec42703          	lw	a4,-20(s0)
    80013d10:	8f3d                	xor	a4,a4,a5
    80013d12:	40f707bb          	subw	a5,a4,a5
    80013d16:	2781                	sext.w	a5,a5
        idx = _ntoa_long(out, buffer, idx, maxlen,
    80013d18:	863e                	mv	a2,a5
    80013d1a:	fec42783          	lw	a5,-20(s0)
    80013d1e:	01f7d79b          	srliw	a5,a5,0x1f
    80013d22:	0ff7f693          	andi	a3,a5,255
    80013d26:	fe842783          	lw	a5,-24(s0)
    80013d2a:	37fd                	addiw	a5,a5,-1
    80013d2c:	2781                	sext.w	a5,a5
    80013d2e:	4715                	li	a4,5
    80013d30:	e43a                	sd	a4,8(sp)
    80013d32:	e03e                	sd	a5,0(sp)
    80013d34:	4881                	li	a7,0
    80013d36:	4829                	li	a6,10
    80013d38:	87b6                	mv	a5,a3
    80013d3a:	8732                	mv	a4,a2
    80013d3c:	f9043683          	ld	a3,-112(s0)
    80013d40:	f9843603          	ld	a2,-104(s0)
    80013d44:	fa043583          	ld	a1,-96(s0)
    80013d48:	fa843503          	ld	a0,-88(s0)
    80013d4c:	c16ff0ef          	jal	ra,80013162 <_ntoa_long>
    80013d50:	f8a43c23          	sd	a0,-104(s0)
                         minwidth - 1, FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
    80013d54:	f7c42783          	lw	a5,-132(s0)
    80013d58:	8b89                	andi	a5,a5,2
    80013d5a:	2781                	sext.w	a5,a5
    80013d5c:	cb9d                	beqz	a5,80013d92 <_etoa+0x4b4>
            while (idx - start_idx < width)
    80013d5e:	a00d                	j	80013d80 <_etoa+0x4a2>
                out(' ', buffer, idx++, maxlen);
    80013d60:	f9843783          	ld	a5,-104(s0)
    80013d64:	00178713          	addi	a4,a5,1
    80013d68:	f8e43c23          	sd	a4,-104(s0)
    80013d6c:	fa843703          	ld	a4,-88(s0)
    80013d70:	f9043683          	ld	a3,-112(s0)
    80013d74:	863e                	mv	a2,a5
    80013d76:	fa043583          	ld	a1,-96(s0)
    80013d7a:	02000513          	li	a0,32
    80013d7e:	9702                	jalr	a4
            while (idx - start_idx < width)
    80013d80:	f9843703          	ld	a4,-104(s0)
    80013d84:	fc043783          	ld	a5,-64(s0)
    80013d88:	8f1d                	sub	a4,a4,a5
    80013d8a:	f8046783          	lwu	a5,-128(s0)
    80013d8e:	fcf769e3          	bltu	a4,a5,80013d60 <_etoa+0x482>
        }
    }
    return idx;
    80013d92:	f9843783          	ld	a5,-104(s0)
}
    80013d96:	853e                	mv	a0,a5
    80013d98:	60ea                	ld	ra,152(sp)
    80013d9a:	644a                	ld	s0,144(sp)
    80013d9c:	610d                	addi	sp,sp,160
    80013d9e:	8082                	ret

0000000080013da0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen,
                      const char *format, va_list va)
{
    80013da0:	7135                	addi	sp,sp,-160
    80013da2:	ed06                	sd	ra,152(sp)
    80013da4:	e922                	sd	s0,144(sp)
    80013da6:	1100                	addi	s0,sp,160
    80013da8:	f8a43c23          	sd	a0,-104(s0)
    80013dac:	f8b43823          	sd	a1,-112(s0)
    80013db0:	f8c43423          	sd	a2,-120(s0)
    80013db4:	f8d43023          	sd	a3,-128(s0)
    80013db8:	f6e43c23          	sd	a4,-136(s0)
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
    80013dbc:	fc043c23          	sd	zero,-40(s0)

    if (!buffer) {
    80013dc0:	f9043783          	ld	a5,-112(s0)
    80013dc4:	380792e3          	bnez	a5,80014948 <_vsnprintf+0xba8>
        // use null output function
        out = _out_null;
    80013dc8:	fffff797          	auipc	a5,0xfffff
    80013dcc:	e5878793          	addi	a5,a5,-424 # 80012c20 <_out_null>
    80013dd0:	f8f43c23          	sd	a5,-104(s0)
    }

    while (*format) {
    80013dd4:	3750006f          	j	80014948 <_vsnprintf+0xba8>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
    80013dd8:	f8043783          	ld	a5,-128(s0)
    80013ddc:	0007c783          	lbu	a5,0(a5)
    80013de0:	873e                	mv	a4,a5
    80013de2:	02500793          	li	a5,37
    80013de6:	02f70b63          	beq	a4,a5,80013e1c <_vsnprintf+0x7c>
            // no
            out(*format, buffer, idx++, maxlen);
    80013dea:	f8043783          	ld	a5,-128(s0)
    80013dee:	0007c503          	lbu	a0,0(a5)
    80013df2:	fd843783          	ld	a5,-40(s0)
    80013df6:	00178713          	addi	a4,a5,1
    80013dfa:	fce43c23          	sd	a4,-40(s0)
    80013dfe:	f9843703          	ld	a4,-104(s0)
    80013e02:	f8843683          	ld	a3,-120(s0)
    80013e06:	863e                	mv	a2,a5
    80013e08:	f9043583          	ld	a1,-112(s0)
    80013e0c:	9702                	jalr	a4
            format++;
    80013e0e:	f8043783          	ld	a5,-128(s0)
    80013e12:	0785                	addi	a5,a5,1
    80013e14:	f8f43023          	sd	a5,-128(s0)
            continue;
    80013e18:	3310006f          	j	80014948 <_vsnprintf+0xba8>
        }
        else {
            // yes, evaluate it
            format++;
    80013e1c:	f8043783          	ld	a5,-128(s0)
    80013e20:	0785                	addi	a5,a5,1
    80013e22:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate flags
        flags = 0U;
    80013e26:	fe042623          	sw	zero,-20(s0)
        do {
            switch (*format) {
    80013e2a:	f8043783          	ld	a5,-128(s0)
    80013e2e:	0007c783          	lbu	a5,0(a5)
    80013e32:	2781                	sext.w	a5,a5
    80013e34:	fe07869b          	addiw	a3,a5,-32
    80013e38:	0006871b          	sext.w	a4,a3
    80013e3c:	47c1                	li	a5,16
    80013e3e:	0ce7e063          	bltu	a5,a4,80013efe <_vsnprintf+0x15e>
    80013e42:	02069793          	slli	a5,a3,0x20
    80013e46:	9381                	srli	a5,a5,0x20
    80013e48:	00279713          	slli	a4,a5,0x2
    80013e4c:	00006797          	auipc	a5,0x6
    80013e50:	b1878793          	addi	a5,a5,-1256 # 80019964 <SYSCALLS+0x964>
    80013e54:	97ba                	add	a5,a5,a4
    80013e56:	439c                	lw	a5,0(a5)
    80013e58:	0007871b          	sext.w	a4,a5
    80013e5c:	00006797          	auipc	a5,0x6
    80013e60:	b0878793          	addi	a5,a5,-1272 # 80019964 <SYSCALLS+0x964>
    80013e64:	97ba                	add	a5,a5,a4
    80013e66:	8782                	jr	a5
                case '0':
                    flags |= FLAGS_ZEROPAD;
    80013e68:	fec42783          	lw	a5,-20(s0)
    80013e6c:	0017e793          	ori	a5,a5,1
    80013e70:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013e74:	f8043783          	ld	a5,-128(s0)
    80013e78:	0785                	addi	a5,a5,1
    80013e7a:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013e7e:	4785                	li	a5,1
    80013e80:	fef42023          	sw	a5,-32(s0)
                    break;
    80013e84:	a041                	j	80013f04 <_vsnprintf+0x164>
                case '-':
                    flags |= FLAGS_LEFT;
    80013e86:	fec42783          	lw	a5,-20(s0)
    80013e8a:	0027e793          	ori	a5,a5,2
    80013e8e:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013e92:	f8043783          	ld	a5,-128(s0)
    80013e96:	0785                	addi	a5,a5,1
    80013e98:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013e9c:	4785                	li	a5,1
    80013e9e:	fef42023          	sw	a5,-32(s0)
                    break;
    80013ea2:	a08d                	j	80013f04 <_vsnprintf+0x164>
                case '+':
                    flags |= FLAGS_PLUS;
    80013ea4:	fec42783          	lw	a5,-20(s0)
    80013ea8:	0047e793          	ori	a5,a5,4
    80013eac:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013eb0:	f8043783          	ld	a5,-128(s0)
    80013eb4:	0785                	addi	a5,a5,1
    80013eb6:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013eba:	4785                	li	a5,1
    80013ebc:	fef42023          	sw	a5,-32(s0)
                    break;
    80013ec0:	a091                	j	80013f04 <_vsnprintf+0x164>
                case ' ':
                    flags |= FLAGS_SPACE;
    80013ec2:	fec42783          	lw	a5,-20(s0)
    80013ec6:	0087e793          	ori	a5,a5,8
    80013eca:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013ece:	f8043783          	ld	a5,-128(s0)
    80013ed2:	0785                	addi	a5,a5,1
    80013ed4:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013ed8:	4785                	li	a5,1
    80013eda:	fef42023          	sw	a5,-32(s0)
                    break;
    80013ede:	a01d                	j	80013f04 <_vsnprintf+0x164>
                case '#':
                    flags |= FLAGS_HASH;
    80013ee0:	fec42783          	lw	a5,-20(s0)
    80013ee4:	0107e793          	ori	a5,a5,16
    80013ee8:	fef42623          	sw	a5,-20(s0)
                    format++;
    80013eec:	f8043783          	ld	a5,-128(s0)
    80013ef0:	0785                	addi	a5,a5,1
    80013ef2:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80013ef6:	4785                	li	a5,1
    80013ef8:	fef42023          	sw	a5,-32(s0)
                    break;
    80013efc:	a021                	j	80013f04 <_vsnprintf+0x164>
                default:
                    n = 0U;
    80013efe:	fe042023          	sw	zero,-32(s0)
                    break;
    80013f02:	0001                	nop
            }
        } while (n);
    80013f04:	fe042783          	lw	a5,-32(s0)
    80013f08:	2781                	sext.w	a5,a5
    80013f0a:	f385                	bnez	a5,80013e2a <_vsnprintf+0x8a>

        // evaluate width field
        width = 0U;
    80013f0c:	fe042423          	sw	zero,-24(s0)
        if (_is_digit(*format)) {
    80013f10:	f8043783          	ld	a5,-128(s0)
    80013f14:	0007c783          	lbu	a5,0(a5)
    80013f18:	853e                	mv	a0,a5
    80013f1a:	df3fe0ef          	jal	ra,80012d0c <_is_digit>
    80013f1e:	87aa                	mv	a5,a0
    80013f20:	cb91                	beqz	a5,80013f34 <_vsnprintf+0x194>
            width = _atoi(&format);
    80013f22:	f8040793          	addi	a5,s0,-128
    80013f26:	853e                	mv	a0,a5
    80013f28:	e25fe0ef          	jal	ra,80012d4c <_atoi>
    80013f2c:	87aa                	mv	a5,a0
    80013f2e:	fef42423          	sw	a5,-24(s0)
    80013f32:	a8b9                	j	80013f90 <_vsnprintf+0x1f0>
        }
        else if (*format == '*') {
    80013f34:	f8043783          	ld	a5,-128(s0)
    80013f38:	0007c783          	lbu	a5,0(a5)
    80013f3c:	873e                	mv	a4,a5
    80013f3e:	02a00793          	li	a5,42
    80013f42:	04f71763          	bne	a4,a5,80013f90 <_vsnprintf+0x1f0>
            const int w = va_arg(va, int);
    80013f46:	f7843783          	ld	a5,-136(s0)
    80013f4a:	00878713          	addi	a4,a5,8
    80013f4e:	f6e43c23          	sd	a4,-136(s0)
    80013f52:	439c                	lw	a5,0(a5)
    80013f54:	fcf42023          	sw	a5,-64(s0)
            if (w < 0) {
    80013f58:	fc042783          	lw	a5,-64(s0)
    80013f5c:	2781                	sext.w	a5,a5
    80013f5e:	0207d063          	bgez	a5,80013f7e <_vsnprintf+0x1de>
                flags |= FLAGS_LEFT;  // reverse padding
    80013f62:	fec42783          	lw	a5,-20(s0)
    80013f66:	0027e793          	ori	a5,a5,2
    80013f6a:	fef42623          	sw	a5,-20(s0)
                width = (unsigned int)-w;
    80013f6e:	fc042783          	lw	a5,-64(s0)
    80013f72:	40f007bb          	negw	a5,a5
    80013f76:	2781                	sext.w	a5,a5
    80013f78:	fef42423          	sw	a5,-24(s0)
    80013f7c:	a029                	j	80013f86 <_vsnprintf+0x1e6>
            }
            else {
                width = (unsigned int)w;
    80013f7e:	fc042783          	lw	a5,-64(s0)
    80013f82:	fef42423          	sw	a5,-24(s0)
            }
            format++;
    80013f86:	f8043783          	ld	a5,-128(s0)
    80013f8a:	0785                	addi	a5,a5,1
    80013f8c:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate precision field
        precision = 0U;
    80013f90:	fe042223          	sw	zero,-28(s0)
        if (*format == '.') {
    80013f94:	f8043783          	ld	a5,-128(s0)
    80013f98:	0007c783          	lbu	a5,0(a5)
    80013f9c:	873e                	mv	a4,a5
    80013f9e:	02e00793          	li	a5,46
    80013fa2:	08f71063          	bne	a4,a5,80014022 <_vsnprintf+0x282>
            flags |= FLAGS_PRECISION;
    80013fa6:	fec42783          	lw	a5,-20(s0)
    80013faa:	4007e793          	ori	a5,a5,1024
    80013fae:	fef42623          	sw	a5,-20(s0)
            format++;
    80013fb2:	f8043783          	ld	a5,-128(s0)
    80013fb6:	0785                	addi	a5,a5,1
    80013fb8:	f8f43023          	sd	a5,-128(s0)
            if (_is_digit(*format)) {
    80013fbc:	f8043783          	ld	a5,-128(s0)
    80013fc0:	0007c783          	lbu	a5,0(a5)
    80013fc4:	853e                	mv	a0,a5
    80013fc6:	d47fe0ef          	jal	ra,80012d0c <_is_digit>
    80013fca:	87aa                	mv	a5,a0
    80013fcc:	cb91                	beqz	a5,80013fe0 <_vsnprintf+0x240>
                precision = _atoi(&format);
    80013fce:	f8040793          	addi	a5,s0,-128
    80013fd2:	853e                	mv	a0,a5
    80013fd4:	d79fe0ef          	jal	ra,80012d4c <_atoi>
    80013fd8:	87aa                	mv	a5,a0
    80013fda:	fef42223          	sw	a5,-28(s0)
    80013fde:	a091                	j	80014022 <_vsnprintf+0x282>
            }
            else if (*format == '*') {
    80013fe0:	f8043783          	ld	a5,-128(s0)
    80013fe4:	0007c783          	lbu	a5,0(a5)
    80013fe8:	873e                	mv	a4,a5
    80013fea:	02a00793          	li	a5,42
    80013fee:	02f71a63          	bne	a4,a5,80014022 <_vsnprintf+0x282>
                const int prec = (int)va_arg(va, int);
    80013ff2:	f7843783          	ld	a5,-136(s0)
    80013ff6:	00878713          	addi	a4,a5,8
    80013ffa:	f6e43c23          	sd	a4,-136(s0)
    80013ffe:	439c                	lw	a5,0(a5)
    80014000:	faf42e23          	sw	a5,-68(s0)
                precision      = prec > 0 ? (unsigned int)prec : 0U;
    80014004:	fbc42783          	lw	a5,-68(s0)
    80014008:	0007871b          	sext.w	a4,a5
    8001400c:	00075363          	bgez	a4,80014012 <_vsnprintf+0x272>
    80014010:	4781                	li	a5,0
    80014012:	2781                	sext.w	a5,a5
    80014014:	fef42223          	sw	a5,-28(s0)
                format++;
    80014018:	f8043783          	ld	a5,-128(s0)
    8001401c:	0785                	addi	a5,a5,1
    8001401e:	f8f43023          	sd	a5,-128(s0)
            }
        }

        // evaluate length field
        switch (*format) {
    80014022:	f8043783          	ld	a5,-128(s0)
    80014026:	0007c783          	lbu	a5,0(a5)
    8001402a:	2781                	sext.w	a5,a5
    8001402c:	f987869b          	addiw	a3,a5,-104
    80014030:	0006871b          	sext.w	a4,a3
    80014034:	47c9                	li	a5,18
    80014036:	0ee7e963          	bltu	a5,a4,80014128 <_vsnprintf+0x388>
    8001403a:	02069793          	slli	a5,a3,0x20
    8001403e:	9381                	srli	a5,a5,0x20
    80014040:	00279713          	slli	a4,a5,0x2
    80014044:	00006797          	auipc	a5,0x6
    80014048:	96478793          	addi	a5,a5,-1692 # 800199a8 <SYSCALLS+0x9a8>
    8001404c:	97ba                	add	a5,a5,a4
    8001404e:	439c                	lw	a5,0(a5)
    80014050:	0007871b          	sext.w	a4,a5
    80014054:	00006797          	auipc	a5,0x6
    80014058:	95478793          	addi	a5,a5,-1708 # 800199a8 <SYSCALLS+0x9a8>
    8001405c:	97ba                	add	a5,a5,a4
    8001405e:	8782                	jr	a5
            case 'l':
                flags |= FLAGS_LONG;
    80014060:	fec42783          	lw	a5,-20(s0)
    80014064:	1007e793          	ori	a5,a5,256
    80014068:	fef42623          	sw	a5,-20(s0)
                format++;
    8001406c:	f8043783          	ld	a5,-128(s0)
    80014070:	0785                	addi	a5,a5,1
    80014072:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'l') {
    80014076:	f8043783          	ld	a5,-128(s0)
    8001407a:	0007c783          	lbu	a5,0(a5)
    8001407e:	873e                	mv	a4,a5
    80014080:	06c00793          	li	a5,108
    80014084:	0af71463          	bne	a4,a5,8001412c <_vsnprintf+0x38c>
                    flags |= FLAGS_LONG_LONG;
    80014088:	fec42783          	lw	a5,-20(s0)
    8001408c:	2007e793          	ori	a5,a5,512
    80014090:	fef42623          	sw	a5,-20(s0)
                    format++;
    80014094:	f8043783          	ld	a5,-128(s0)
    80014098:	0785                	addi	a5,a5,1
    8001409a:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    8001409e:	a079                	j	8001412c <_vsnprintf+0x38c>
            case 'h':
                flags |= FLAGS_SHORT;
    800140a0:	fec42783          	lw	a5,-20(s0)
    800140a4:	0807e793          	ori	a5,a5,128
    800140a8:	fef42623          	sw	a5,-20(s0)
                format++;
    800140ac:	f8043783          	ld	a5,-128(s0)
    800140b0:	0785                	addi	a5,a5,1
    800140b2:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'h') {
    800140b6:	f8043783          	ld	a5,-128(s0)
    800140ba:	0007c783          	lbu	a5,0(a5)
    800140be:	873e                	mv	a4,a5
    800140c0:	06800793          	li	a5,104
    800140c4:	06f71663          	bne	a4,a5,80014130 <_vsnprintf+0x390>
                    flags |= FLAGS_CHAR;
    800140c8:	fec42783          	lw	a5,-20(s0)
    800140cc:	0407e793          	ori	a5,a5,64
    800140d0:	fef42623          	sw	a5,-20(s0)
                    format++;
    800140d4:	f8043783          	ld	a5,-128(s0)
    800140d8:	0785                	addi	a5,a5,1
    800140da:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    800140de:	a889                	j	80014130 <_vsnprintf+0x390>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
            case 't':
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG
    800140e0:	fec42783          	lw	a5,-20(s0)
    800140e4:	1007e793          	ori	a5,a5,256
    800140e8:	fef42623          	sw	a5,-20(s0)
                                                            : FLAGS_LONG_LONG);
                format++;
    800140ec:	f8043783          	ld	a5,-128(s0)
    800140f0:	0785                	addi	a5,a5,1
    800140f2:	f8f43023          	sd	a5,-128(s0)
                break;
    800140f6:	a835                	j	80014132 <_vsnprintf+0x392>
#endif
            case 'j':
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG
    800140f8:	fec42783          	lw	a5,-20(s0)
    800140fc:	1007e793          	ori	a5,a5,256
    80014100:	fef42623          	sw	a5,-20(s0)
                                                           : FLAGS_LONG_LONG);
                format++;
    80014104:	f8043783          	ld	a5,-128(s0)
    80014108:	0785                	addi	a5,a5,1
    8001410a:	f8f43023          	sd	a5,-128(s0)
                break;
    8001410e:	a015                	j	80014132 <_vsnprintf+0x392>
            case 'z':
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG
    80014110:	fec42783          	lw	a5,-20(s0)
    80014114:	1007e793          	ori	a5,a5,256
    80014118:	fef42623          	sw	a5,-20(s0)
                                                         : FLAGS_LONG_LONG);
                format++;
    8001411c:	f8043783          	ld	a5,-128(s0)
    80014120:	0785                	addi	a5,a5,1
    80014122:	f8f43023          	sd	a5,-128(s0)
                break;
    80014126:	a031                	j	80014132 <_vsnprintf+0x392>
            default:
                break;
    80014128:	0001                	nop
    8001412a:	a021                	j	80014132 <_vsnprintf+0x392>
                break;
    8001412c:	0001                	nop
    8001412e:	a011                	j	80014132 <_vsnprintf+0x392>
                break;
    80014130:	0001                	nop
        }

        // evaluate specifier
        switch (*format) {
    80014132:	f8043783          	ld	a5,-128(s0)
    80014136:	0007c783          	lbu	a5,0(a5)
    8001413a:	2781                	sext.w	a5,a5
    8001413c:	fdb7869b          	addiw	a3,a5,-37
    80014140:	0006871b          	sext.w	a4,a3
    80014144:	05300793          	li	a5,83
    80014148:	7ce7e863          	bltu	a5,a4,80014918 <_vsnprintf+0xb78>
    8001414c:	02069793          	slli	a5,a3,0x20
    80014150:	9381                	srli	a5,a5,0x20
    80014152:	00279713          	slli	a4,a5,0x2
    80014156:	00006797          	auipc	a5,0x6
    8001415a:	89e78793          	addi	a5,a5,-1890 # 800199f4 <SYSCALLS+0x9f4>
    8001415e:	97ba                	add	a5,a5,a4
    80014160:	439c                	lw	a5,0(a5)
    80014162:	0007871b          	sext.w	a4,a5
    80014166:	00006797          	auipc	a5,0x6
    8001416a:	88e78793          	addi	a5,a5,-1906 # 800199f4 <SYSCALLS+0x9f4>
    8001416e:	97ba                	add	a5,a5,a4
    80014170:	8782                	jr	a5
            case 'X':
            case 'o':
            case 'b': {
                // set the base
                unsigned int base;
                if (*format == 'x' || *format == 'X') {
    80014172:	f8043783          	ld	a5,-128(s0)
    80014176:	0007c783          	lbu	a5,0(a5)
    8001417a:	873e                	mv	a4,a5
    8001417c:	07800793          	li	a5,120
    80014180:	00f70b63          	beq	a4,a5,80014196 <_vsnprintf+0x3f6>
    80014184:	f8043783          	ld	a5,-128(s0)
    80014188:	0007c783          	lbu	a5,0(a5)
    8001418c:	873e                	mv	a4,a5
    8001418e:	05800793          	li	a5,88
    80014192:	00f71663          	bne	a4,a5,8001419e <_vsnprintf+0x3fe>
                    base = 16U;
    80014196:	47c1                	li	a5,16
    80014198:	fcf42a23          	sw	a5,-44(s0)
    8001419c:	a099                	j	800141e2 <_vsnprintf+0x442>
                }
                else if (*format == 'o') {
    8001419e:	f8043783          	ld	a5,-128(s0)
    800141a2:	0007c783          	lbu	a5,0(a5)
    800141a6:	873e                	mv	a4,a5
    800141a8:	06f00793          	li	a5,111
    800141ac:	00f71663          	bne	a4,a5,800141b8 <_vsnprintf+0x418>
                    base = 8U;
    800141b0:	47a1                	li	a5,8
    800141b2:	fcf42a23          	sw	a5,-44(s0)
    800141b6:	a035                	j	800141e2 <_vsnprintf+0x442>
                }
                else if (*format == 'b') {
    800141b8:	f8043783          	ld	a5,-128(s0)
    800141bc:	0007c783          	lbu	a5,0(a5)
    800141c0:	873e                	mv	a4,a5
    800141c2:	06200793          	li	a5,98
    800141c6:	00f71663          	bne	a4,a5,800141d2 <_vsnprintf+0x432>
                    base = 2U;
    800141ca:	4789                	li	a5,2
    800141cc:	fcf42a23          	sw	a5,-44(s0)
    800141d0:	a809                	j	800141e2 <_vsnprintf+0x442>
                }
                else {
                    base = 10U;
    800141d2:	47a9                	li	a5,10
    800141d4:	fcf42a23          	sw	a5,-44(s0)
                    flags &= ~FLAGS_HASH;  // no hash for dec format
    800141d8:	fec42783          	lw	a5,-20(s0)
    800141dc:	9bbd                	andi	a5,a5,-17
    800141de:	fef42623          	sw	a5,-20(s0)
                }
                // uppercase
                if (*format == 'X') {
    800141e2:	f8043783          	ld	a5,-128(s0)
    800141e6:	0007c783          	lbu	a5,0(a5)
    800141ea:	873e                	mv	a4,a5
    800141ec:	05800793          	li	a5,88
    800141f0:	00f71863          	bne	a4,a5,80014200 <_vsnprintf+0x460>
                    flags |= FLAGS_UPPERCASE;
    800141f4:	fec42783          	lw	a5,-20(s0)
    800141f8:	0207e793          	ori	a5,a5,32
    800141fc:	fef42623          	sw	a5,-20(s0)
                }

                // no plus or space flag for u, x, X, o, b
                if ((*format != 'i') && (*format != 'd')) {
    80014200:	f8043783          	ld	a5,-128(s0)
    80014204:	0007c783          	lbu	a5,0(a5)
    80014208:	873e                	mv	a4,a5
    8001420a:	06900793          	li	a5,105
    8001420e:	02f70063          	beq	a4,a5,8001422e <_vsnprintf+0x48e>
    80014212:	f8043783          	ld	a5,-128(s0)
    80014216:	0007c783          	lbu	a5,0(a5)
    8001421a:	873e                	mv	a4,a5
    8001421c:	06400793          	li	a5,100
    80014220:	00f70763          	beq	a4,a5,8001422e <_vsnprintf+0x48e>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    80014224:	fec42783          	lw	a5,-20(s0)
    80014228:	9bcd                	andi	a5,a5,-13
    8001422a:	fef42623          	sw	a5,-20(s0)
                }

                // ignore '0' flag when precision is given
                if (flags & FLAGS_PRECISION) {
    8001422e:	fec42783          	lw	a5,-20(s0)
    80014232:	4007f793          	andi	a5,a5,1024
    80014236:	2781                	sext.w	a5,a5
    80014238:	c791                	beqz	a5,80014244 <_vsnprintf+0x4a4>
                    flags &= ~FLAGS_ZEROPAD;
    8001423a:	fec42783          	lw	a5,-20(s0)
    8001423e:	9bf9                	andi	a5,a5,-2
    80014240:	fef42623          	sw	a5,-20(s0)
                }

                // convert the integer
                if ((*format == 'i') || (*format == 'd')) {
    80014244:	f8043783          	ld	a5,-128(s0)
    80014248:	0007c783          	lbu	a5,0(a5)
    8001424c:	873e                	mv	a4,a5
    8001424e:	06900793          	li	a5,105
    80014252:	00f70b63          	beq	a4,a5,80014268 <_vsnprintf+0x4c8>
    80014256:	f8043783          	ld	a5,-128(s0)
    8001425a:	0007c783          	lbu	a5,0(a5)
    8001425e:	873e                	mv	a4,a5
    80014260:	06400793          	li	a5,100
    80014264:	18f71d63          	bne	a4,a5,800143fe <_vsnprintf+0x65e>
                    // signed
                    if (flags & FLAGS_LONG_LONG) {
    80014268:	fec42783          	lw	a5,-20(s0)
    8001426c:	2007f793          	andi	a5,a5,512
    80014270:	2781                	sext.w	a5,a5
    80014272:	c3bd                	beqz	a5,800142d8 <_vsnprintf+0x538>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        const long long value = va_arg(va, long long);
    80014274:	f7843783          	ld	a5,-136(s0)
    80014278:	00878713          	addi	a4,a5,8
    8001427c:	f6e43c23          	sd	a4,-136(s0)
    80014280:	639c                	ld	a5,0(a5)
    80014282:	faf43023          	sd	a5,-96(s0)
                        idx                   = _ntoa_long_long(
                                              out, buffer, idx, maxlen,
                                              (unsigned long long)(value > 0 ? value : 0 - value),
    80014286:	fa043783          	ld	a5,-96(s0)
    8001428a:	43f7d713          	srai	a4,a5,0x3f
    8001428e:	fa043783          	ld	a5,-96(s0)
    80014292:	8fb9                	xor	a5,a5,a4
    80014294:	8f99                	sub	a5,a5,a4
                        idx                   = _ntoa_long_long(
    80014296:	85be                	mv	a1,a5
    80014298:	fa043783          	ld	a5,-96(s0)
    8001429c:	93fd                	srli	a5,a5,0x3f
    8001429e:	0ff7f713          	andi	a4,a5,255
    800142a2:	fd446683          	lwu	a3,-44(s0)
    800142a6:	fe442603          	lw	a2,-28(s0)
    800142aa:	fec42783          	lw	a5,-20(s0)
    800142ae:	e43e                	sd	a5,8(sp)
    800142b0:	fe842783          	lw	a5,-24(s0)
    800142b4:	e03e                	sd	a5,0(sp)
    800142b6:	88b2                	mv	a7,a2
    800142b8:	8836                	mv	a6,a3
    800142ba:	87ba                	mv	a5,a4
    800142bc:	872e                	mv	a4,a1
    800142be:	f8843683          	ld	a3,-120(s0)
    800142c2:	fd843603          	ld	a2,-40(s0)
    800142c6:	f9043583          	ld	a1,-112(s0)
    800142ca:	f9843503          	ld	a0,-104(s0)
    800142ce:	fadfe0ef          	jal	ra,8001327a <_ntoa_long_long>
    800142d2:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    800142d6:	ac89                	j	80014528 <_vsnprintf+0x788>
                                              value < 0, base, precision, width, flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    800142d8:	fec42783          	lw	a5,-20(s0)
    800142dc:	1007f793          	andi	a5,a5,256
    800142e0:	2781                	sext.w	a5,a5
    800142e2:	c3bd                	beqz	a5,80014348 <_vsnprintf+0x5a8>
                        const long value = va_arg(va, long);
    800142e4:	f7843783          	ld	a5,-136(s0)
    800142e8:	00878713          	addi	a4,a5,8
    800142ec:	f6e43c23          	sd	a4,-136(s0)
    800142f0:	639c                	ld	a5,0(a5)
    800142f2:	faf43423          	sd	a5,-88(s0)
                        idx              = _ntoa_long(
                                         out, buffer, idx, maxlen,
                                         (unsigned long)(value > 0 ? value : 0 - value),
    800142f6:	fa843783          	ld	a5,-88(s0)
    800142fa:	43f7d713          	srai	a4,a5,0x3f
    800142fe:	fa843783          	ld	a5,-88(s0)
    80014302:	8fb9                	xor	a5,a5,a4
    80014304:	8f99                	sub	a5,a5,a4
                        idx              = _ntoa_long(
    80014306:	85be                	mv	a1,a5
    80014308:	fa843783          	ld	a5,-88(s0)
    8001430c:	93fd                	srli	a5,a5,0x3f
    8001430e:	0ff7f713          	andi	a4,a5,255
    80014312:	fd446683          	lwu	a3,-44(s0)
    80014316:	fe442603          	lw	a2,-28(s0)
    8001431a:	fec42783          	lw	a5,-20(s0)
    8001431e:	e43e                	sd	a5,8(sp)
    80014320:	fe842783          	lw	a5,-24(s0)
    80014324:	e03e                	sd	a5,0(sp)
    80014326:	88b2                	mv	a7,a2
    80014328:	8836                	mv	a6,a3
    8001432a:	87ba                	mv	a5,a4
    8001432c:	872e                	mv	a4,a1
    8001432e:	f8843683          	ld	a3,-120(s0)
    80014332:	fd843603          	ld	a2,-40(s0)
    80014336:	f9043583          	ld	a1,-112(s0)
    8001433a:	f9843503          	ld	a0,-104(s0)
    8001433e:	e25fe0ef          	jal	ra,80013162 <_ntoa_long>
    80014342:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80014346:	a2cd                	j	80014528 <_vsnprintf+0x788>
                                         value < 0, base, precision, width, flags);
                    }
                    else {
                        const int value =
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    80014348:	fec42783          	lw	a5,-20(s0)
    8001434c:	0407f793          	andi	a5,a5,64
    80014350:	2781                	sext.w	a5,a5
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80014352:	cf81                	beqz	a5,8001436a <_vsnprintf+0x5ca>
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    80014354:	f7843783          	ld	a5,-136(s0)
    80014358:	00878713          	addi	a4,a5,8
    8001435c:	f6e43c23          	sd	a4,-136(s0)
    80014360:	439c                	lw	a5,0(a5)
    80014362:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80014366:	2781                	sext.w	a5,a5
    80014368:	a81d                	j	8001439e <_vsnprintf+0x5fe>
    8001436a:	fec42783          	lw	a5,-20(s0)
    8001436e:	0807f793          	andi	a5,a5,128
    80014372:	2781                	sext.w	a5,a5
                                                    : va_arg(va, int);
    80014374:	cf91                	beqz	a5,80014390 <_vsnprintf+0x5f0>
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80014376:	f7843783          	ld	a5,-136(s0)
    8001437a:	00878713          	addi	a4,a5,8
    8001437e:	f6e43c23          	sd	a4,-136(s0)
    80014382:	439c                	lw	a5,0(a5)
    80014384:	0107979b          	slliw	a5,a5,0x10
    80014388:	4107d79b          	sraiw	a5,a5,0x10
                                                    : va_arg(va, int);
    8001438c:	2781                	sext.w	a5,a5
    8001438e:	a801                	j	8001439e <_vsnprintf+0x5fe>
    80014390:	f7843783          	ld	a5,-136(s0)
    80014394:	00878713          	addi	a4,a5,8
    80014398:	f6e43c23          	sd	a4,-136(s0)
    8001439c:	439c                	lw	a5,0(a5)
                        const int value =
    8001439e:	faf42823          	sw	a5,-80(s0)
                        idx = _ntoa_long(
                            out, buffer, idx, maxlen,
                            (unsigned int)(value > 0 ? value : 0 - value),
    800143a2:	fb042783          	lw	a5,-80(s0)
    800143a6:	41f7d79b          	sraiw	a5,a5,0x1f
    800143aa:	fb042703          	lw	a4,-80(s0)
    800143ae:	8f3d                	xor	a4,a4,a5
    800143b0:	40f707bb          	subw	a5,a4,a5
    800143b4:	2781                	sext.w	a5,a5
    800143b6:	2781                	sext.w	a5,a5
                        idx = _ntoa_long(
    800143b8:	02079713          	slli	a4,a5,0x20
    800143bc:	9301                	srli	a4,a4,0x20
    800143be:	fb042783          	lw	a5,-80(s0)
    800143c2:	01f7d79b          	srliw	a5,a5,0x1f
    800143c6:	0ff7f693          	andi	a3,a5,255
    800143ca:	fd446603          	lwu	a2,-44(s0)
    800143ce:	fe442583          	lw	a1,-28(s0)
    800143d2:	fec42783          	lw	a5,-20(s0)
    800143d6:	e43e                	sd	a5,8(sp)
    800143d8:	fe842783          	lw	a5,-24(s0)
    800143dc:	e03e                	sd	a5,0(sp)
    800143de:	88ae                	mv	a7,a1
    800143e0:	8832                	mv	a6,a2
    800143e2:	87b6                	mv	a5,a3
    800143e4:	f8843683          	ld	a3,-120(s0)
    800143e8:	fd843603          	ld	a2,-40(s0)
    800143ec:	f9043583          	ld	a1,-112(s0)
    800143f0:	f9843503          	ld	a0,-104(s0)
    800143f4:	d6ffe0ef          	jal	ra,80013162 <_ntoa_long>
    800143f8:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    800143fc:	a235                	j	80014528 <_vsnprintf+0x788>
                            value < 0, base, precision, width, flags);
                    }
                }
                else {
                    // unsigned
                    if (flags & FLAGS_LONG_LONG) {
    800143fe:	fec42783          	lw	a5,-20(s0)
    80014402:	2007f793          	andi	a5,a5,512
    80014406:	2781                	sext.w	a5,a5
    80014408:	c3b1                	beqz	a5,8001444c <_vsnprintf+0x6ac>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
    8001440a:	f7843783          	ld	a5,-136(s0)
    8001440e:	00878713          	addi	a4,a5,8
    80014412:	f6e43c23          	sd	a4,-136(s0)
    80014416:	6398                	ld	a4,0(a5)
    80014418:	fd446683          	lwu	a3,-44(s0)
    8001441c:	fe442603          	lw	a2,-28(s0)
    80014420:	fec42783          	lw	a5,-20(s0)
    80014424:	e43e                	sd	a5,8(sp)
    80014426:	fe842783          	lw	a5,-24(s0)
    8001442a:	e03e                	sd	a5,0(sp)
    8001442c:	88b2                	mv	a7,a2
    8001442e:	8836                	mv	a6,a3
    80014430:	4781                	li	a5,0
    80014432:	f8843683          	ld	a3,-120(s0)
    80014436:	fd843603          	ld	a2,-40(s0)
    8001443a:	f9043583          	ld	a1,-112(s0)
    8001443e:	f9843503          	ld	a0,-104(s0)
    80014442:	e39fe0ef          	jal	ra,8001327a <_ntoa_long_long>
    80014446:	fca43c23          	sd	a0,-40(s0)
    8001444a:	a8f9                	j	80014528 <_vsnprintf+0x788>
                                              va_arg(va, unsigned long long),
                                              false, base, precision, width,
                                              flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    8001444c:	fec42783          	lw	a5,-20(s0)
    80014450:	1007f793          	andi	a5,a5,256
    80014454:	2781                	sext.w	a5,a5
    80014456:	c3b1                	beqz	a5,8001449a <_vsnprintf+0x6fa>
                        idx = _ntoa_long(out, buffer, idx, maxlen,
    80014458:	f7843783          	ld	a5,-136(s0)
    8001445c:	00878713          	addi	a4,a5,8
    80014460:	f6e43c23          	sd	a4,-136(s0)
    80014464:	6398                	ld	a4,0(a5)
    80014466:	fd446683          	lwu	a3,-44(s0)
    8001446a:	fe442603          	lw	a2,-28(s0)
    8001446e:	fec42783          	lw	a5,-20(s0)
    80014472:	e43e                	sd	a5,8(sp)
    80014474:	fe842783          	lw	a5,-24(s0)
    80014478:	e03e                	sd	a5,0(sp)
    8001447a:	88b2                	mv	a7,a2
    8001447c:	8836                	mv	a6,a3
    8001447e:	4781                	li	a5,0
    80014480:	f8843683          	ld	a3,-120(s0)
    80014484:	fd843603          	ld	a2,-40(s0)
    80014488:	f9043583          	ld	a1,-112(s0)
    8001448c:	f9843503          	ld	a0,-104(s0)
    80014490:	cd3fe0ef          	jal	ra,80013162 <_ntoa_long>
    80014494:	fca43c23          	sd	a0,-40(s0)
    80014498:	a841                	j	80014528 <_vsnprintf+0x788>
                                         va_arg(va, unsigned long), false, base,
                                         precision, width, flags);
                    }
                    else {
                        const unsigned int value =
                            (flags & FLAGS_CHAR)
    8001449a:	fec42783          	lw	a5,-20(s0)
    8001449e:	0407f793          	andi	a5,a5,64
    800144a2:	2781                	sext.w	a5,a5
                                ? (unsigned char)va_arg(va, unsigned int)
                            : (flags & FLAGS_SHORT)
    800144a4:	cf81                	beqz	a5,800144bc <_vsnprintf+0x71c>
                                ? (unsigned char)va_arg(va, unsigned int)
    800144a6:	f7843783          	ld	a5,-136(s0)
    800144aa:	00878713          	addi	a4,a5,8
    800144ae:	f6e43c23          	sd	a4,-136(s0)
    800144b2:	439c                	lw	a5,0(a5)
    800144b4:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT)
    800144b8:	2781                	sext.w	a5,a5
    800144ba:	a815                	j	800144ee <_vsnprintf+0x74e>
    800144bc:	fec42783          	lw	a5,-20(s0)
    800144c0:	0807f793          	andi	a5,a5,128
    800144c4:	2781                	sext.w	a5,a5
                                ? (unsigned short int)va_arg(va, unsigned int)
                                : va_arg(va, unsigned int);
    800144c6:	cf81                	beqz	a5,800144de <_vsnprintf+0x73e>
                                ? (unsigned short int)va_arg(va, unsigned int)
    800144c8:	f7843783          	ld	a5,-136(s0)
    800144cc:	00878713          	addi	a4,a5,8
    800144d0:	f6e43c23          	sd	a4,-136(s0)
    800144d4:	439c                	lw	a5,0(a5)
    800144d6:	17c2                	slli	a5,a5,0x30
    800144d8:	93c1                	srli	a5,a5,0x30
                                : va_arg(va, unsigned int);
    800144da:	2781                	sext.w	a5,a5
    800144dc:	a801                	j	800144ec <_vsnprintf+0x74c>
    800144de:	f7843783          	ld	a5,-136(s0)
    800144e2:	00878713          	addi	a4,a5,8
    800144e6:	f6e43c23          	sd	a4,-136(s0)
    800144ea:	439c                	lw	a5,0(a5)
                            : (flags & FLAGS_SHORT)
    800144ec:	2781                	sext.w	a5,a5
                        const unsigned int value =
    800144ee:	faf42a23          	sw	a5,-76(s0)
                        idx = _ntoa_long(out, buffer, idx, maxlen, value, false,
    800144f2:	fb446703          	lwu	a4,-76(s0)
    800144f6:	fd446683          	lwu	a3,-44(s0)
    800144fa:	fe442603          	lw	a2,-28(s0)
    800144fe:	fec42783          	lw	a5,-20(s0)
    80014502:	e43e                	sd	a5,8(sp)
    80014504:	fe842783          	lw	a5,-24(s0)
    80014508:	e03e                	sd	a5,0(sp)
    8001450a:	88b2                	mv	a7,a2
    8001450c:	8836                	mv	a6,a3
    8001450e:	4781                	li	a5,0
    80014510:	f8843683          	ld	a3,-120(s0)
    80014514:	fd843603          	ld	a2,-40(s0)
    80014518:	f9043583          	ld	a1,-112(s0)
    8001451c:	f9843503          	ld	a0,-104(s0)
    80014520:	c43fe0ef          	jal	ra,80013162 <_ntoa_long>
    80014524:	fca43c23          	sd	a0,-40(s0)
                                         base, precision, width, flags);
                    }
                }
                format++;
    80014528:	f8043783          	ld	a5,-128(s0)
    8001452c:	0785                	addi	a5,a5,1
    8001452e:	f8f43023          	sd	a5,-128(s0)
                break;
    80014532:	a919                	j	80014948 <_vsnprintf+0xba8>
            }
#if defined(PRINTF_SUPPORT_FLOAT)
            case 'f':
            case 'F':
                if (*format == 'F')
    80014534:	f8043783          	ld	a5,-128(s0)
    80014538:	0007c783          	lbu	a5,0(a5)
    8001453c:	873e                	mv	a4,a5
    8001453e:	04600793          	li	a5,70
    80014542:	00f71863          	bne	a4,a5,80014552 <_vsnprintf+0x7b2>
                    flags |= FLAGS_UPPERCASE;
    80014546:	fec42783          	lw	a5,-20(s0)
    8001454a:	0207e793          	ori	a5,a5,32
    8001454e:	fef42623          	sw	a5,-20(s0)
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double),
    80014552:	f7843783          	ld	a5,-136(s0)
    80014556:	00878713          	addi	a4,a5,8
    8001455a:	f6e43c23          	sd	a4,-136(s0)
    8001455e:	239c                	fld	fa5,0(a5)
    80014560:	fec42683          	lw	a3,-20(s0)
    80014564:	fe842783          	lw	a5,-24(s0)
    80014568:	fe442703          	lw	a4,-28(s0)
    8001456c:	8836                	mv	a6,a3
    8001456e:	22f78553          	fmv.d	fa0,fa5
    80014572:	f8843683          	ld	a3,-120(s0)
    80014576:	fd843603          	ld	a2,-40(s0)
    8001457a:	f9043583          	ld	a1,-112(s0)
    8001457e:	f9843503          	ld	a0,-104(s0)
    80014582:	e11fe0ef          	jal	ra,80013392 <_ftoa>
    80014586:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    8001458a:	f8043783          	ld	a5,-128(s0)
    8001458e:	0785                	addi	a5,a5,1
    80014590:	f8f43023          	sd	a5,-128(s0)
                break;
    80014594:	ae55                	j	80014948 <_vsnprintf+0xba8>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
            case 'e':
            case 'E':
            case 'g':
            case 'G':
                if ((*format == 'g') || (*format == 'G'))
    80014596:	f8043783          	ld	a5,-128(s0)
    8001459a:	0007c783          	lbu	a5,0(a5)
    8001459e:	873e                	mv	a4,a5
    800145a0:	06700793          	li	a5,103
    800145a4:	00f70b63          	beq	a4,a5,800145ba <_vsnprintf+0x81a>
    800145a8:	f8043783          	ld	a5,-128(s0)
    800145ac:	0007c783          	lbu	a5,0(a5)
    800145b0:	873e                	mv	a4,a5
    800145b2:	04700793          	li	a5,71
    800145b6:	00f71a63          	bne	a4,a5,800145ca <_vsnprintf+0x82a>
                    flags |= FLAGS_ADAPT_EXP;
    800145ba:	fec42703          	lw	a4,-20(s0)
    800145be:	6785                	lui	a5,0x1
    800145c0:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    800145c4:	8fd9                	or	a5,a5,a4
    800145c6:	fef42623          	sw	a5,-20(s0)
                if ((*format == 'E') || (*format == 'G'))
    800145ca:	f8043783          	ld	a5,-128(s0)
    800145ce:	0007c783          	lbu	a5,0(a5)
    800145d2:	873e                	mv	a4,a5
    800145d4:	04500793          	li	a5,69
    800145d8:	00f70b63          	beq	a4,a5,800145ee <_vsnprintf+0x84e>
    800145dc:	f8043783          	ld	a5,-128(s0)
    800145e0:	0007c783          	lbu	a5,0(a5)
    800145e4:	873e                	mv	a4,a5
    800145e6:	04700793          	li	a5,71
    800145ea:	00f71863          	bne	a4,a5,800145fa <_vsnprintf+0x85a>
                    flags |= FLAGS_UPPERCASE;
    800145ee:	fec42783          	lw	a5,-20(s0)
    800145f2:	0207e793          	ori	a5,a5,32
    800145f6:	fef42623          	sw	a5,-20(s0)
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double),
    800145fa:	f7843783          	ld	a5,-136(s0)
    800145fe:	00878713          	addi	a4,a5,8
    80014602:	f6e43c23          	sd	a4,-136(s0)
    80014606:	239c                	fld	fa5,0(a5)
    80014608:	fec42683          	lw	a3,-20(s0)
    8001460c:	fe842783          	lw	a5,-24(s0)
    80014610:	fe442703          	lw	a4,-28(s0)
    80014614:	8836                	mv	a6,a3
    80014616:	22f78553          	fmv.d	fa0,fa5
    8001461a:	f8843683          	ld	a3,-120(s0)
    8001461e:	fd843603          	ld	a2,-40(s0)
    80014622:	f9043583          	ld	a1,-112(s0)
    80014626:	f9843503          	ld	a0,-104(s0)
    8001462a:	ab4ff0ef          	jal	ra,800138de <_etoa>
    8001462e:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    80014632:	f8043783          	ld	a5,-128(s0)
    80014636:	0785                	addi	a5,a5,1
    80014638:	f8f43023          	sd	a5,-128(s0)
                break;
    8001463c:	a631                	j	80014948 <_vsnprintf+0xba8>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
            case 'c': {
                unsigned int l = 1U;
    8001463e:	4785                	li	a5,1
    80014640:	fcf42823          	sw	a5,-48(s0)
                // pre padding
                if (!(flags & FLAGS_LEFT)) {
    80014644:	fec42783          	lw	a5,-20(s0)
    80014648:	8b89                	andi	a5,a5,2
    8001464a:	2781                	sext.w	a5,a5
    8001464c:	ef8d                	bnez	a5,80014686 <_vsnprintf+0x8e6>
                    while (l++ < width) {
    8001464e:	a00d                	j	80014670 <_vsnprintf+0x8d0>
                        out(' ', buffer, idx++, maxlen);
    80014650:	fd843783          	ld	a5,-40(s0)
    80014654:	00178713          	addi	a4,a5,1
    80014658:	fce43c23          	sd	a4,-40(s0)
    8001465c:	f9843703          	ld	a4,-104(s0)
    80014660:	f8843683          	ld	a3,-120(s0)
    80014664:	863e                	mv	a2,a5
    80014666:	f9043583          	ld	a1,-112(s0)
    8001466a:	02000513          	li	a0,32
    8001466e:	9702                	jalr	a4
                    while (l++ < width) {
    80014670:	fd042783          	lw	a5,-48(s0)
    80014674:	0017871b          	addiw	a4,a5,1
    80014678:	fce42823          	sw	a4,-48(s0)
    8001467c:	fe842703          	lw	a4,-24(s0)
    80014680:	2701                	sext.w	a4,a4
    80014682:	fce7e7e3          	bltu	a5,a4,80014650 <_vsnprintf+0x8b0>
                    }
                }
                // char output
                out((char)va_arg(va, int), buffer, idx++, maxlen);
    80014686:	f7843783          	ld	a5,-136(s0)
    8001468a:	00878713          	addi	a4,a5,8
    8001468e:	f6e43c23          	sd	a4,-136(s0)
    80014692:	439c                	lw	a5,0(a5)
    80014694:	0ff7f513          	andi	a0,a5,255
    80014698:	fd843783          	ld	a5,-40(s0)
    8001469c:	00178713          	addi	a4,a5,1
    800146a0:	fce43c23          	sd	a4,-40(s0)
    800146a4:	f9843703          	ld	a4,-104(s0)
    800146a8:	f8843683          	ld	a3,-120(s0)
    800146ac:	863e                	mv	a2,a5
    800146ae:	f9043583          	ld	a1,-112(s0)
    800146b2:	9702                	jalr	a4
                // post padding
                if (flags & FLAGS_LEFT) {
    800146b4:	fec42783          	lw	a5,-20(s0)
    800146b8:	8b89                	andi	a5,a5,2
    800146ba:	2781                	sext.w	a5,a5
    800146bc:	cf8d                	beqz	a5,800146f6 <_vsnprintf+0x956>
                    while (l++ < width) {
    800146be:	a00d                	j	800146e0 <_vsnprintf+0x940>
                        out(' ', buffer, idx++, maxlen);
    800146c0:	fd843783          	ld	a5,-40(s0)
    800146c4:	00178713          	addi	a4,a5,1
    800146c8:	fce43c23          	sd	a4,-40(s0)
    800146cc:	f9843703          	ld	a4,-104(s0)
    800146d0:	f8843683          	ld	a3,-120(s0)
    800146d4:	863e                	mv	a2,a5
    800146d6:	f9043583          	ld	a1,-112(s0)
    800146da:	02000513          	li	a0,32
    800146de:	9702                	jalr	a4
                    while (l++ < width) {
    800146e0:	fd042783          	lw	a5,-48(s0)
    800146e4:	0017871b          	addiw	a4,a5,1
    800146e8:	fce42823          	sw	a4,-48(s0)
    800146ec:	fe842703          	lw	a4,-24(s0)
    800146f0:	2701                	sext.w	a4,a4
    800146f2:	fce7e7e3          	bltu	a5,a4,800146c0 <_vsnprintf+0x920>
                    }
                }
                format++;
    800146f6:	f8043783          	ld	a5,-128(s0)
    800146fa:	0785                	addi	a5,a5,1
    800146fc:	f8f43023          	sd	a5,-128(s0)
                break;
    80014700:	a4a1                	j	80014948 <_vsnprintf+0xba8>
            }

            case 's': {
                const char *p = va_arg(va, char *);
    80014702:	f7843783          	ld	a5,-136(s0)
    80014706:	00878713          	addi	a4,a5,8
    8001470a:	f6e43c23          	sd	a4,-136(s0)
    8001470e:	639c                	ld	a5,0(a5)
    80014710:	fcf43423          	sd	a5,-56(s0)
                unsigned int l =
                    _strnlen_s(p, precision ? precision : (size_t)-1);
    80014714:	fe442783          	lw	a5,-28(s0)
    80014718:	2781                	sext.w	a5,a5
    8001471a:	c781                	beqz	a5,80014722 <_vsnprintf+0x982>
    8001471c:	fe446783          	lwu	a5,-28(s0)
    80014720:	a011                	j	80014724 <_vsnprintf+0x984>
    80014722:	57fd                	li	a5,-1
    80014724:	85be                	mv	a1,a5
    80014726:	fc843503          	ld	a0,-56(s0)
    8001472a:	d92fe0ef          	jal	ra,80012cbc <_strnlen_s>
    8001472e:	87aa                	mv	a5,a0
    80014730:	fcf42223          	sw	a5,-60(s0)
                // pre padding
                if (flags & FLAGS_PRECISION) {
    80014734:	fec42783          	lw	a5,-20(s0)
    80014738:	4007f793          	andi	a5,a5,1024
    8001473c:	2781                	sext.w	a5,a5
    8001473e:	cf91                	beqz	a5,8001475a <_vsnprintf+0x9ba>
                    l = (l < precision ? l : precision);
    80014740:	fc442603          	lw	a2,-60(s0)
    80014744:	fe442783          	lw	a5,-28(s0)
    80014748:	0007869b          	sext.w	a3,a5
    8001474c:	0006071b          	sext.w	a4,a2
    80014750:	00d77363          	bgeu	a4,a3,80014756 <_vsnprintf+0x9b6>
    80014754:	87b2                	mv	a5,a2
    80014756:	fcf42223          	sw	a5,-60(s0)
                }
                if (!(flags & FLAGS_LEFT)) {
    8001475a:	fec42783          	lw	a5,-20(s0)
    8001475e:	8b89                	andi	a5,a5,2
    80014760:	2781                	sext.w	a5,a5
    80014762:	e7a5                	bnez	a5,800147ca <_vsnprintf+0xa2a>
                    while (l++ < width) {
    80014764:	a00d                	j	80014786 <_vsnprintf+0x9e6>
                        out(' ', buffer, idx++, maxlen);
    80014766:	fd843783          	ld	a5,-40(s0)
    8001476a:	00178713          	addi	a4,a5,1
    8001476e:	fce43c23          	sd	a4,-40(s0)
    80014772:	f9843703          	ld	a4,-104(s0)
    80014776:	f8843683          	ld	a3,-120(s0)
    8001477a:	863e                	mv	a2,a5
    8001477c:	f9043583          	ld	a1,-112(s0)
    80014780:	02000513          	li	a0,32
    80014784:	9702                	jalr	a4
                    while (l++ < width) {
    80014786:	fc442783          	lw	a5,-60(s0)
    8001478a:	0017871b          	addiw	a4,a5,1
    8001478e:	fce42223          	sw	a4,-60(s0)
    80014792:	fe842703          	lw	a4,-24(s0)
    80014796:	2701                	sext.w	a4,a4
    80014798:	fce7e7e3          	bltu	a5,a4,80014766 <_vsnprintf+0x9c6>
                    }
                }
                // string output
                while ((*p != 0) &&
    8001479c:	a03d                	j	800147ca <_vsnprintf+0xa2a>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
                    out(*(p++), buffer, idx++, maxlen);
    8001479e:	fc843783          	ld	a5,-56(s0)
    800147a2:	00178713          	addi	a4,a5,1
    800147a6:	fce43423          	sd	a4,-56(s0)
    800147aa:	0007c503          	lbu	a0,0(a5)
    800147ae:	fd843783          	ld	a5,-40(s0)
    800147b2:	00178713          	addi	a4,a5,1
    800147b6:	fce43c23          	sd	a4,-40(s0)
    800147ba:	f9843703          	ld	a4,-104(s0)
    800147be:	f8843683          	ld	a3,-120(s0)
    800147c2:	863e                	mv	a2,a5
    800147c4:	f9043583          	ld	a1,-112(s0)
    800147c8:	9702                	jalr	a4
                while ((*p != 0) &&
    800147ca:	fc843783          	ld	a5,-56(s0)
    800147ce:	0007c783          	lbu	a5,0(a5)
    800147d2:	cf91                	beqz	a5,800147ee <_vsnprintf+0xa4e>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    800147d4:	fec42783          	lw	a5,-20(s0)
    800147d8:	4007f793          	andi	a5,a5,1024
    800147dc:	2781                	sext.w	a5,a5
                while ((*p != 0) &&
    800147de:	d3e1                	beqz	a5,8001479e <_vsnprintf+0x9fe>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    800147e0:	fe442783          	lw	a5,-28(s0)
    800147e4:	fff7871b          	addiw	a4,a5,-1
    800147e8:	fee42223          	sw	a4,-28(s0)
    800147ec:	fbcd                	bnez	a5,8001479e <_vsnprintf+0x9fe>
                }
                // post padding
                if (flags & FLAGS_LEFT) {
    800147ee:	fec42783          	lw	a5,-20(s0)
    800147f2:	8b89                	andi	a5,a5,2
    800147f4:	2781                	sext.w	a5,a5
    800147f6:	cf8d                	beqz	a5,80014830 <_vsnprintf+0xa90>
                    while (l++ < width) {
    800147f8:	a00d                	j	8001481a <_vsnprintf+0xa7a>
                        out(' ', buffer, idx++, maxlen);
    800147fa:	fd843783          	ld	a5,-40(s0)
    800147fe:	00178713          	addi	a4,a5,1
    80014802:	fce43c23          	sd	a4,-40(s0)
    80014806:	f9843703          	ld	a4,-104(s0)
    8001480a:	f8843683          	ld	a3,-120(s0)
    8001480e:	863e                	mv	a2,a5
    80014810:	f9043583          	ld	a1,-112(s0)
    80014814:	02000513          	li	a0,32
    80014818:	9702                	jalr	a4
                    while (l++ < width) {
    8001481a:	fc442783          	lw	a5,-60(s0)
    8001481e:	0017871b          	addiw	a4,a5,1
    80014822:	fce42223          	sw	a4,-60(s0)
    80014826:	fe842703          	lw	a4,-24(s0)
    8001482a:	2701                	sext.w	a4,a4
    8001482c:	fce7e7e3          	bltu	a5,a4,800147fa <_vsnprintf+0xa5a>
                    }
                }
                format++;
    80014830:	f8043783          	ld	a5,-128(s0)
    80014834:	0785                	addi	a5,a5,1
    80014836:	f8f43023          	sd	a5,-128(s0)
                break;
    8001483a:	a239                	j	80014948 <_vsnprintf+0xba8>
            }

            case 'p': {
                width = sizeof(void *) * 2U;
    8001483c:	47c1                	li	a5,16
    8001483e:	fef42423          	sw	a5,-24(s0)
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    80014842:	fec42783          	lw	a5,-20(s0)
    80014846:	0217e793          	ori	a5,a5,33
    8001484a:	fef42623          	sw	a5,-20(s0)
#if defined(PRINTF_SUPPORT_LONG_LONG)
                const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    8001484e:	4785                	li	a5,1
    80014850:	faf40da3          	sb	a5,-69(s0)
                if (is_ll) {
    80014854:	fbb44783          	lbu	a5,-69(s0)
    80014858:	0ff7f793          	andi	a5,a5,255
    8001485c:	c3b1                	beqz	a5,800148a0 <_vsnprintf+0xb00>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                          (uintptr_t)va_arg(va, void *), false,
    8001485e:	f7843783          	ld	a5,-136(s0)
    80014862:	00878713          	addi	a4,a5,8
    80014866:	f6e43c23          	sd	a4,-136(s0)
    8001486a:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
    8001486c:	86be                	mv	a3,a5
    8001486e:	fe442703          	lw	a4,-28(s0)
    80014872:	fec42783          	lw	a5,-20(s0)
    80014876:	e43e                	sd	a5,8(sp)
    80014878:	fe842783          	lw	a5,-24(s0)
    8001487c:	e03e                	sd	a5,0(sp)
    8001487e:	88ba                	mv	a7,a4
    80014880:	4841                	li	a6,16
    80014882:	4781                	li	a5,0
    80014884:	8736                	mv	a4,a3
    80014886:	f8843683          	ld	a3,-120(s0)
    8001488a:	fd843603          	ld	a2,-40(s0)
    8001488e:	f9043583          	ld	a1,-112(s0)
    80014892:	f9843503          	ld	a0,-104(s0)
    80014896:	9e5fe0ef          	jal	ra,8001327a <_ntoa_long_long>
    8001489a:	fca43c23          	sd	a0,-40(s0)
    8001489e:	a089                	j	800148e0 <_vsnprintf+0xb40>
                }
                else {
#endif
                    idx = _ntoa_long(
                        out, buffer, idx, maxlen,
                        (unsigned long)((uintptr_t)va_arg(va, void *)), false,
    800148a0:	f7843783          	ld	a5,-136(s0)
    800148a4:	00878713          	addi	a4,a5,8
    800148a8:	f6e43c23          	sd	a4,-136(s0)
    800148ac:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long(
    800148ae:	86be                	mv	a3,a5
    800148b0:	fe442703          	lw	a4,-28(s0)
    800148b4:	fec42783          	lw	a5,-20(s0)
    800148b8:	e43e                	sd	a5,8(sp)
    800148ba:	fe842783          	lw	a5,-24(s0)
    800148be:	e03e                	sd	a5,0(sp)
    800148c0:	88ba                	mv	a7,a4
    800148c2:	4841                	li	a6,16
    800148c4:	4781                	li	a5,0
    800148c6:	8736                	mv	a4,a3
    800148c8:	f8843683          	ld	a3,-120(s0)
    800148cc:	fd843603          	ld	a2,-40(s0)
    800148d0:	f9043583          	ld	a1,-112(s0)
    800148d4:	f9843503          	ld	a0,-104(s0)
    800148d8:	88bfe0ef          	jal	ra,80013162 <_ntoa_long>
    800148dc:	fca43c23          	sd	a0,-40(s0)
                        16U, precision, width, flags);
#if defined(PRINTF_SUPPORT_LONG_LONG)
                }
#endif
                format++;
    800148e0:	f8043783          	ld	a5,-128(s0)
    800148e4:	0785                	addi	a5,a5,1
    800148e6:	f8f43023          	sd	a5,-128(s0)
                break;
    800148ea:	a8b9                	j	80014948 <_vsnprintf+0xba8>
            }

            case '%':
                out('%', buffer, idx++, maxlen);
    800148ec:	fd843783          	ld	a5,-40(s0)
    800148f0:	00178713          	addi	a4,a5,1
    800148f4:	fce43c23          	sd	a4,-40(s0)
    800148f8:	f9843703          	ld	a4,-104(s0)
    800148fc:	f8843683          	ld	a3,-120(s0)
    80014900:	863e                	mv	a2,a5
    80014902:	f9043583          	ld	a1,-112(s0)
    80014906:	02500513          	li	a0,37
    8001490a:	9702                	jalr	a4
                format++;
    8001490c:	f8043783          	ld	a5,-128(s0)
    80014910:	0785                	addi	a5,a5,1
    80014912:	f8f43023          	sd	a5,-128(s0)
                break;
    80014916:	a80d                	j	80014948 <_vsnprintf+0xba8>

            default:
                out(*format, buffer, idx++, maxlen);
    80014918:	f8043783          	ld	a5,-128(s0)
    8001491c:	0007c503          	lbu	a0,0(a5)
    80014920:	fd843783          	ld	a5,-40(s0)
    80014924:	00178713          	addi	a4,a5,1
    80014928:	fce43c23          	sd	a4,-40(s0)
    8001492c:	f9843703          	ld	a4,-104(s0)
    80014930:	f8843683          	ld	a3,-120(s0)
    80014934:	863e                	mv	a2,a5
    80014936:	f9043583          	ld	a1,-112(s0)
    8001493a:	9702                	jalr	a4
                format++;
    8001493c:	f8043783          	ld	a5,-128(s0)
    80014940:	0785                	addi	a5,a5,1
    80014942:	f8f43023          	sd	a5,-128(s0)
                break;
    80014946:	0001                	nop
    while (*format) {
    80014948:	f8043783          	ld	a5,-128(s0)
    8001494c:	0007c783          	lbu	a5,0(a5)
    80014950:	c8079463          	bnez	a5,80013dd8 <_vsnprintf+0x38>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    80014954:	fd843703          	ld	a4,-40(s0)
    80014958:	f8843783          	ld	a5,-120(s0)
    8001495c:	00f76663          	bltu	a4,a5,80014968 <_vsnprintf+0xbc8>
    80014960:	f8843783          	ld	a5,-120(s0)
    80014964:	17fd                	addi	a5,a5,-1
    80014966:	a019                	j	8001496c <_vsnprintf+0xbcc>
    80014968:	fd843783          	ld	a5,-40(s0)
    8001496c:	f9843703          	ld	a4,-104(s0)
    80014970:	f8843683          	ld	a3,-120(s0)
    80014974:	863e                	mv	a2,a5
    80014976:	f9043583          	ld	a1,-112(s0)
    8001497a:	4501                	li	a0,0
    8001497c:	9702                	jalr	a4

    // return written chars without terminating \0
    return (int)idx;
    8001497e:	fd843783          	ld	a5,-40(s0)
    80014982:	2781                	sext.w	a5,a5
}
    80014984:	853e                	mv	a0,a5
    80014986:	60ea                	ld	ra,152(sp)
    80014988:	644a                	ld	s0,144(sp)
    8001498a:	610d                	addi	sp,sp,160
    8001498c:	8082                	ret

000000008001498e <printf>:

///////////////////////////////////////////////////////////////////////////////

int printf(const char *format, ...)
{
    8001498e:	7119                	addi	sp,sp,-128
    80014990:	fc06                	sd	ra,56(sp)
    80014992:	f822                	sd	s0,48(sp)
    80014994:	0080                	addi	s0,sp,64
    80014996:	fca43423          	sd	a0,-56(s0)
    8001499a:	e40c                	sd	a1,8(s0)
    8001499c:	e810                	sd	a2,16(s0)
    8001499e:	ec14                	sd	a3,24(s0)
    800149a0:	f018                	sd	a4,32(s0)
    800149a2:	f41c                	sd	a5,40(s0)
    800149a4:	03043823          	sd	a6,48(s0)
    800149a8:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, format);
    800149ac:	04040793          	addi	a5,s0,64
    800149b0:	fcf43023          	sd	a5,-64(s0)
    800149b4:	fc043783          	ld	a5,-64(s0)
    800149b8:	fc878793          	addi	a5,a5,-56
    800149bc:	fef43023          	sd	a5,-32(s0)
    char buffer[1];
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    800149c0:	fe043703          	ld	a4,-32(s0)
    800149c4:	fd840793          	addi	a5,s0,-40
    800149c8:	fc843683          	ld	a3,-56(s0)
    800149cc:	567d                	li	a2,-1
    800149ce:	85be                	mv	a1,a5
    800149d0:	ffffe517          	auipc	a0,0xffffe
    800149d4:	27050513          	addi	a0,a0,624 # 80012c40 <_out_char>
    800149d8:	bc8ff0ef          	jal	ra,80013da0 <_vsnprintf>
    800149dc:	87aa                	mv	a5,a0
    800149de:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    800149e2:	fec42783          	lw	a5,-20(s0)
}
    800149e6:	853e                	mv	a0,a5
    800149e8:	70e2                	ld	ra,56(sp)
    800149ea:	7442                	ld	s0,48(sp)
    800149ec:	6109                	addi	sp,sp,128
    800149ee:	8082                	ret

00000000800149f0 <sprintf>:

int sprintf(char *buffer, const char *format, ...)
{
    800149f0:	7159                	addi	sp,sp,-112
    800149f2:	fc06                	sd	ra,56(sp)
    800149f4:	f822                	sd	s0,48(sp)
    800149f6:	0080                	addi	s0,sp,64
    800149f8:	fca43c23          	sd	a0,-40(s0)
    800149fc:	fcb43823          	sd	a1,-48(s0)
    80014a00:	e010                	sd	a2,0(s0)
    80014a02:	e414                	sd	a3,8(s0)
    80014a04:	e818                	sd	a4,16(s0)
    80014a06:	ec1c                	sd	a5,24(s0)
    80014a08:	03043023          	sd	a6,32(s0)
    80014a0c:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    80014a10:	03040793          	addi	a5,s0,48
    80014a14:	fcf43423          	sd	a5,-56(s0)
    80014a18:	fc843783          	ld	a5,-56(s0)
    80014a1c:	fd078793          	addi	a5,a5,-48
    80014a20:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    80014a24:	fe043783          	ld	a5,-32(s0)
    80014a28:	873e                	mv	a4,a5
    80014a2a:	fd043683          	ld	a3,-48(s0)
    80014a2e:	567d                	li	a2,-1
    80014a30:	fd843583          	ld	a1,-40(s0)
    80014a34:	ffffe517          	auipc	a0,0xffffe
    80014a38:	1ae50513          	addi	a0,a0,430 # 80012be2 <_out_buffer>
    80014a3c:	b64ff0ef          	jal	ra,80013da0 <_vsnprintf>
    80014a40:	87aa                	mv	a5,a0
    80014a42:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    80014a46:	fec42783          	lw	a5,-20(s0)
}
    80014a4a:	853e                	mv	a0,a5
    80014a4c:	70e2                	ld	ra,56(sp)
    80014a4e:	7442                	ld	s0,48(sp)
    80014a50:	6165                	addi	sp,sp,112
    80014a52:	8082                	ret

0000000080014a54 <snprintf>:

int snprintf(char *buffer, size_t count, const char *format, ...)
{
    80014a54:	7159                	addi	sp,sp,-112
    80014a56:	fc06                	sd	ra,56(sp)
    80014a58:	f822                	sd	s0,48(sp)
    80014a5a:	0080                	addi	s0,sp,64
    80014a5c:	fca43c23          	sd	a0,-40(s0)
    80014a60:	fcb43823          	sd	a1,-48(s0)
    80014a64:	fcc43423          	sd	a2,-56(s0)
    80014a68:	e414                	sd	a3,8(s0)
    80014a6a:	e818                	sd	a4,16(s0)
    80014a6c:	ec1c                	sd	a5,24(s0)
    80014a6e:	03043023          	sd	a6,32(s0)
    80014a72:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    80014a76:	03040793          	addi	a5,s0,48
    80014a7a:	fcf43023          	sd	a5,-64(s0)
    80014a7e:	fc043783          	ld	a5,-64(s0)
    80014a82:	fd878793          	addi	a5,a5,-40
    80014a86:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    80014a8a:	fe043783          	ld	a5,-32(s0)
    80014a8e:	873e                	mv	a4,a5
    80014a90:	fc843683          	ld	a3,-56(s0)
    80014a94:	fd043603          	ld	a2,-48(s0)
    80014a98:	fd843583          	ld	a1,-40(s0)
    80014a9c:	ffffe517          	auipc	a0,0xffffe
    80014aa0:	14650513          	addi	a0,a0,326 # 80012be2 <_out_buffer>
    80014aa4:	afcff0ef          	jal	ra,80013da0 <_vsnprintf>
    80014aa8:	87aa                	mv	a5,a0
    80014aaa:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    80014aae:	fec42783          	lw	a5,-20(s0)
}
    80014ab2:	853e                	mv	a0,a5
    80014ab4:	70e2                	ld	ra,56(sp)
    80014ab6:	7442                	ld	s0,48(sp)
    80014ab8:	6165                	addi	sp,sp,112
    80014aba:	8082                	ret

0000000080014abc <vprintf_>:

int vprintf_(const char *format, va_list va)
{
    80014abc:	7179                	addi	sp,sp,-48
    80014abe:	f406                	sd	ra,40(sp)
    80014ac0:	f022                	sd	s0,32(sp)
    80014ac2:	1800                	addi	s0,sp,48
    80014ac4:	fca43c23          	sd	a0,-40(s0)
    80014ac8:	fcb43823          	sd	a1,-48(s0)
    char buffer[1];
    return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80014acc:	fe840793          	addi	a5,s0,-24
    80014ad0:	fd043703          	ld	a4,-48(s0)
    80014ad4:	fd843683          	ld	a3,-40(s0)
    80014ad8:	567d                	li	a2,-1
    80014ada:	85be                	mv	a1,a5
    80014adc:	ffffe517          	auipc	a0,0xffffe
    80014ae0:	16450513          	addi	a0,a0,356 # 80012c40 <_out_char>
    80014ae4:	abcff0ef          	jal	ra,80013da0 <_vsnprintf>
    80014ae8:	87aa                	mv	a5,a0
}
    80014aea:	853e                	mv	a0,a5
    80014aec:	70a2                	ld	ra,40(sp)
    80014aee:	7402                	ld	s0,32(sp)
    80014af0:	6145                	addi	sp,sp,48
    80014af2:	8082                	ret

0000000080014af4 <vsnprintf_>:

int vsnprintf_(char *buffer, size_t count, const char *format, va_list va)
{
    80014af4:	7179                	addi	sp,sp,-48
    80014af6:	f406                	sd	ra,40(sp)
    80014af8:	f022                	sd	s0,32(sp)
    80014afa:	1800                	addi	s0,sp,48
    80014afc:	fea43423          	sd	a0,-24(s0)
    80014b00:	feb43023          	sd	a1,-32(s0)
    80014b04:	fcc43c23          	sd	a2,-40(s0)
    80014b08:	fcd43823          	sd	a3,-48(s0)
    return _vsnprintf(_out_buffer, buffer, count, format, va);
    80014b0c:	fd043703          	ld	a4,-48(s0)
    80014b10:	fd843683          	ld	a3,-40(s0)
    80014b14:	fe043603          	ld	a2,-32(s0)
    80014b18:	fe843583          	ld	a1,-24(s0)
    80014b1c:	ffffe517          	auipc	a0,0xffffe
    80014b20:	0c650513          	addi	a0,a0,198 # 80012be2 <_out_buffer>
    80014b24:	a7cff0ef          	jal	ra,80013da0 <_vsnprintf>
    80014b28:	87aa                	mv	a5,a0
}
    80014b2a:	853e                	mv	a0,a5
    80014b2c:	70a2                	ld	ra,40(sp)
    80014b2e:	7402                	ld	s0,32(sp)
    80014b30:	6145                	addi	sp,sp,48
    80014b32:	8082                	ret

0000000080014b34 <fctprintf>:

int fctprintf(void (*out)(char character, void *arg), void *arg,
              const char *format, ...)
{
    80014b34:	7119                	addi	sp,sp,-128
    80014b36:	e486                	sd	ra,72(sp)
    80014b38:	e0a2                	sd	s0,64(sp)
    80014b3a:	0880                	addi	s0,sp,80
    80014b3c:	fca43423          	sd	a0,-56(s0)
    80014b40:	fcb43023          	sd	a1,-64(s0)
    80014b44:	fac43c23          	sd	a2,-72(s0)
    80014b48:	e414                	sd	a3,8(s0)
    80014b4a:	e818                	sd	a4,16(s0)
    80014b4c:	ec1c                	sd	a5,24(s0)
    80014b4e:	03043023          	sd	a6,32(s0)
    80014b52:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    80014b56:	03040793          	addi	a5,s0,48
    80014b5a:	faf43823          	sd	a5,-80(s0)
    80014b5e:	fb043783          	ld	a5,-80(s0)
    80014b62:	fd878793          	addi	a5,a5,-40
    80014b66:	fef43023          	sd	a5,-32(s0)
    const out_fct_wrap_type out_fct_wrap = {out, arg};
    80014b6a:	fc843783          	ld	a5,-56(s0)
    80014b6e:	fcf43823          	sd	a5,-48(s0)
    80014b72:	fc043783          	ld	a5,-64(s0)
    80014b76:	fcf43c23          	sd	a5,-40(s0)
    const int ret = _vsnprintf(_out_fct, (char *)(uintptr_t)&out_fct_wrap,
    80014b7a:	fe043703          	ld	a4,-32(s0)
    80014b7e:	fd040793          	addi	a5,s0,-48
    80014b82:	fb843683          	ld	a3,-72(s0)
    80014b86:	567d                	li	a2,-1
    80014b88:	85be                	mv	a1,a5
    80014b8a:	ffffe517          	auipc	a0,0xffffe
    80014b8e:	0ee50513          	addi	a0,a0,238 # 80012c78 <_out_fct>
    80014b92:	a0eff0ef          	jal	ra,80013da0 <_vsnprintf>
    80014b96:	87aa                	mv	a5,a0
    80014b98:	fef42623          	sw	a5,-20(s0)
                               (size_t)-1, format, va);
    va_end(va);
    return ret;
    80014b9c:	fec42783          	lw	a5,-20(s0)
}
    80014ba0:	853e                	mv	a0,a5
    80014ba2:	60a6                	ld	ra,72(sp)
    80014ba4:	6406                	ld	s0,64(sp)
    80014ba6:	6109                	addi	sp,sp,128
    80014ba8:	8082                	ret
    80014baa:	0000                	unimp
    80014bac:	0000                	unimp
	...

0000000080014bb0 <_start>:
.section .text
.global _start
_start:
.option push
.option norelax
	la		sp, _stack_end
    80014bb0:	0000f117          	auipc	sp,0xf
    80014bb4:	45010113          	addi	sp,sp,1104 # 80024000 <_heap_start>
	la		gp, __global_pointer$
    80014bb8:	00003197          	auipc	gp,0x3
    80014bbc:	44818193          	addi	gp,gp,1096 # 80018000 <kernel_mmu_table>
    # Unlike the SBI, we will be trap returning so that
    # we know the registers sstatus, sip, stvec, and sepc are
    # in a place where we expect them to be. We can just jump
    # into main (tail main) like the SBI, but this ensures the CSRs
    # are what we say they are instead of just assuming from the SBI.
	la		t0, main
    80014bc0:	ffffd297          	auipc	t0,0xffffd
    80014bc4:	82228293          	addi	t0,t0,-2014 # 800113e2 <main>
	csrw	sepc, t0
    80014bc8:	14129073          	csrw	sepc,t0
	li		t0, 1 << 9
    80014bcc:	20000293          	li	t0,512
	csrw	sie, t0
    80014bd0:	10429073          	csrw	sie,t0
    # 1 << 13 - FS:  in the "initial" position
    # 1 << 8  - SPP: into Supervisor Mode
    # 1 << 5  - SPIE: enable interrupts
	li		t0, (1 << 13) | (1 << 8) | (1 << 5)
    80014bd4:	6289                	lui	t0,0x2
    80014bd6:	1202829b          	addiw	t0,t0,288
	csrw	sstatus, t0
    80014bda:	10029073          	csrw	sstatus,t0
    # Load the return address (RA) to the park. When main
    # returns, it will park the HART.
	la		ra, park
    80014bde:	00000097          	auipc	ra,0x0
    80014be2:	01208093          	addi	ra,ra,18 # 80014bf0 <park>
	csrr	a0, sscratch
    80014be6:	14002573          	csrr	a0,sscratch
	sret
    80014bea:	10200073          	sret
    80014bee:	0001                	nop

0000000080014bf0 <park>:

.section .text
.global park
.align 4
park:
	wfi
    80014bf0:	10500073          	wfi
	j	park
    80014bf4:	bff5                	j	80014bf0 <park>

0000000080014bf6 <park_end>:
	...

0000000080014c04 <process_asm_run>:

.section .text
.global process_asm_run
process_asm_run:
    # a0 - Trap frame
    csrw    sscratch, a0
    80014c04:	14051073          	csrw	sscratch,a0
    tail    _spawn_kthread
    80014c08:	3f80206f          	j	80017000 <_spawn_kthread>

0000000080014c0c <list_init>:
typedef struct List {
    ListElem head;
} List;

static List *list_init(List *lst)
{
    80014c0c:	1101                	addi	sp,sp,-32
    80014c0e:	ec22                	sd	s0,24(sp)
    80014c10:	1000                	addi	s0,sp,32
    80014c12:	fea43423          	sd	a0,-24(s0)
    lst->head.next = &lst->head;
    80014c16:	fe843703          	ld	a4,-24(s0)
    80014c1a:	fe843783          	ld	a5,-24(s0)
    80014c1e:	e798                	sd	a4,8(a5)
    lst->head.prev = &lst->head;
    80014c20:	fe843703          	ld	a4,-24(s0)
    80014c24:	fe843783          	ld	a5,-24(s0)
    80014c28:	eb98                	sd	a4,16(a5)

    return lst;
    80014c2a:	fe843783          	ld	a5,-24(s0)
}
    80014c2e:	853e                	mv	a0,a5
    80014c30:	6462                	ld	s0,24(sp)
    80014c32:	6105                	addi	sp,sp,32
    80014c34:	8082                	ret

0000000080014c36 <list_new>:

List *list_new(void)
{
    80014c36:	1101                	addi	sp,sp,-32
    80014c38:	ec06                	sd	ra,24(sp)
    80014c3a:	e822                	sd	s0,16(sp)
    80014c3c:	1000                	addi	s0,sp,32
    List *m = (List *)g_kmalloc(sizeof(List));
    80014c3e:	4561                	li	a0,24
    80014c40:	363010ef          	jal	ra,800167a2 <g_kmalloc>
    80014c44:	fea43423          	sd	a0,-24(s0)
    if (m == NULL) {
    80014c48:	fe843783          	ld	a5,-24(s0)
    80014c4c:	e399                	bnez	a5,80014c52 <list_new+0x1c>
        return NULL;
    80014c4e:	4781                	li	a5,0
    80014c50:	a031                	j	80014c5c <list_new+0x26>
    }
    return list_init(m);
    80014c52:	fe843503          	ld	a0,-24(s0)
    80014c56:	fb7ff0ef          	jal	ra,80014c0c <list_init>
    80014c5a:	87aa                	mv	a5,a0
}
    80014c5c:	853e                	mv	a0,a5
    80014c5e:	60e2                	ld	ra,24(sp)
    80014c60:	6442                	ld	s0,16(sp)
    80014c62:	6105                	addi	sp,sp,32
    80014c64:	8082                	ret

0000000080014c66 <list_add>:

void list_add(List *lst, uint64_t value)
{
    80014c66:	7179                	addi	sp,sp,-48
    80014c68:	f406                	sd	ra,40(sp)
    80014c6a:	f022                	sd	s0,32(sp)
    80014c6c:	1800                	addi	s0,sp,48
    80014c6e:	fca43c23          	sd	a0,-40(s0)
    80014c72:	fcb43823          	sd	a1,-48(s0)
    ListElem *l;
    l             = (ListElem *)g_kzalloc(sizeof(ListElem));
    80014c76:	4561                	li	a0,24
    80014c78:	3a3010ef          	jal	ra,8001681a <g_kzalloc>
    80014c7c:	fea43423          	sd	a0,-24(s0)
    l->next       = lst->head.next;
    80014c80:	fd843783          	ld	a5,-40(s0)
    80014c84:	6798                	ld	a4,8(a5)
    80014c86:	fe843783          	ld	a5,-24(s0)
    80014c8a:	e798                	sd	a4,8(a5)
    l->prev       = &lst->head;
    80014c8c:	fd843703          	ld	a4,-40(s0)
    80014c90:	fe843783          	ld	a5,-24(s0)
    80014c94:	eb98                	sd	a4,16(a5)
    l->next->prev = l;
    80014c96:	fe843783          	ld	a5,-24(s0)
    80014c9a:	679c                	ld	a5,8(a5)
    80014c9c:	fe843703          	ld	a4,-24(s0)
    80014ca0:	eb98                	sd	a4,16(a5)
    l->prev->next = l;
    80014ca2:	fe843783          	ld	a5,-24(s0)
    80014ca6:	6b9c                	ld	a5,16(a5)
    80014ca8:	fe843703          	ld	a4,-24(s0)
    80014cac:	e798                	sd	a4,8(a5)
    l->value      = value;
    80014cae:	fe843783          	ld	a5,-24(s0)
    80014cb2:	fd043703          	ld	a4,-48(s0)
    80014cb6:	e398                	sd	a4,0(a5)
}
    80014cb8:	0001                	nop
    80014cba:	70a2                	ld	ra,40(sp)
    80014cbc:	7402                	ld	s0,32(sp)
    80014cbe:	6145                	addi	sp,sp,48
    80014cc0:	8082                	ret

0000000080014cc2 <list_clear>:

void list_clear(List *lst)
{
    80014cc2:	7179                	addi	sp,sp,-48
    80014cc4:	f406                	sd	ra,40(sp)
    80014cc6:	f022                	sd	s0,32(sp)
    80014cc8:	1800                	addi	s0,sp,48
    80014cca:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014cce:	fd843783          	ld	a5,-40(s0)
    80014cd2:	679c                	ld	a5,8(a5)
    80014cd4:	fef43423          	sd	a5,-24(s0)
    80014cd8:	a831                	j	80014cf4 <list_clear+0x32>
        n = e->next;
    80014cda:	fe843783          	ld	a5,-24(s0)
    80014cde:	679c                	ld	a5,8(a5)
    80014ce0:	fef43023          	sd	a5,-32(s0)
        list_remove_elem(e);
    80014ce4:	fe843503          	ld	a0,-24(s0)
    80014ce8:	120000ef          	jal	ra,80014e08 <list_remove_elem>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014cec:	fe043783          	ld	a5,-32(s0)
    80014cf0:	fef43423          	sd	a5,-24(s0)
    80014cf4:	fd843783          	ld	a5,-40(s0)
    80014cf8:	fe843703          	ld	a4,-24(s0)
    80014cfc:	fcf71fe3          	bne	a4,a5,80014cda <list_clear+0x18>
    }
}
    80014d00:	0001                	nop
    80014d02:	0001                	nop
    80014d04:	70a2                	ld	ra,40(sp)
    80014d06:	7402                	ld	s0,32(sp)
    80014d08:	6145                	addi	sp,sp,48
    80014d0a:	8082                	ret

0000000080014d0c <list_sort>:

void list_sort(List *lst, LIST_COMPARATOR_PARAM(comp))
{
    80014d0c:	7139                	addi	sp,sp,-64
    80014d0e:	fc06                	sd	ra,56(sp)
    80014d10:	f822                	sd	s0,48(sp)
    80014d12:	0080                	addi	s0,sp,64
    80014d14:	fca43423          	sd	a0,-56(s0)
    80014d18:	fcb43023          	sd	a1,-64(s0)
    ListElem *e;
    bool swapped;
    uint64_t tmp;

    do {
        swapped = false;
    80014d1c:	fe0403a3          	sb	zero,-25(s0)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80014d20:	fc843783          	ld	a5,-56(s0)
    80014d24:	6b9c                	ld	a5,16(a5)
    80014d26:	fef43423          	sd	a5,-24(s0)
    80014d2a:	a8a9                	j	80014d84 <list_sort+0x78>
            if (!comp(e->value, e->prev->value)) {
    80014d2c:	fe843783          	ld	a5,-24(s0)
    80014d30:	6398                	ld	a4,0(a5)
    80014d32:	fe843783          	ld	a5,-24(s0)
    80014d36:	6b9c                	ld	a5,16(a5)
    80014d38:	639c                	ld	a5,0(a5)
    80014d3a:	fc043683          	ld	a3,-64(s0)
    80014d3e:	85be                	mv	a1,a5
    80014d40:	853a                	mv	a0,a4
    80014d42:	9682                	jalr	a3
    80014d44:	87aa                	mv	a5,a0
    80014d46:	0017c793          	xori	a5,a5,1
    80014d4a:	0ff7f793          	andi	a5,a5,255
    80014d4e:	c795                	beqz	a5,80014d7a <list_sort+0x6e>
                swapped        = true;
    80014d50:	4785                	li	a5,1
    80014d52:	fef403a3          	sb	a5,-25(s0)
                tmp            = e->value;
    80014d56:	fe843783          	ld	a5,-24(s0)
    80014d5a:	639c                	ld	a5,0(a5)
    80014d5c:	fcf43c23          	sd	a5,-40(s0)
                e->value       = e->prev->value;
    80014d60:	fe843783          	ld	a5,-24(s0)
    80014d64:	6b9c                	ld	a5,16(a5)
    80014d66:	6398                	ld	a4,0(a5)
    80014d68:	fe843783          	ld	a5,-24(s0)
    80014d6c:	e398                	sd	a4,0(a5)
                e->prev->value = tmp;
    80014d6e:	fe843783          	ld	a5,-24(s0)
    80014d72:	6b9c                	ld	a5,16(a5)
    80014d74:	fd843703          	ld	a4,-40(s0)
    80014d78:	e398                	sd	a4,0(a5)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80014d7a:	fe843783          	ld	a5,-24(s0)
    80014d7e:	6b9c                	ld	a5,16(a5)
    80014d80:	fef43423          	sd	a5,-24(s0)
    80014d84:	fe843783          	ld	a5,-24(s0)
    80014d88:	6b98                	ld	a4,16(a5)
    80014d8a:	fc843783          	ld	a5,-56(s0)
    80014d8e:	f8f71fe3          	bne	a4,a5,80014d2c <list_sort+0x20>
            }
        }
    } while (swapped);
    80014d92:	fe744783          	lbu	a5,-25(s0)
    80014d96:	0ff7f793          	andi	a5,a5,255
    80014d9a:	f3c9                	bnez	a5,80014d1c <list_sort+0x10>
}
    80014d9c:	0001                	nop
    80014d9e:	0001                	nop
    80014da0:	70e2                	ld	ra,56(sp)
    80014da2:	7442                	ld	s0,48(sp)
    80014da4:	6121                	addi	sp,sp,64
    80014da6:	8082                	ret

0000000080014da8 <list_remove>:

bool list_remove(List *lst, uint64_t value)
{
    80014da8:	7179                	addi	sp,sp,-48
    80014daa:	f406                	sd	ra,40(sp)
    80014dac:	f022                	sd	s0,32(sp)
    80014dae:	1800                	addi	s0,sp,48
    80014db0:	fca43c23          	sd	a0,-40(s0)
    80014db4:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(lst, e)
    80014db8:	fd843503          	ld	a0,-40(s0)
    80014dbc:	2ca000ef          	jal	ra,80015086 <list_elem_start_ascending>
    80014dc0:	fea43423          	sd	a0,-24(s0)
    80014dc4:	a025                	j	80014dec <list_remove+0x44>
    {
        if (e->value == value) {
    80014dc6:	fe843783          	ld	a5,-24(s0)
    80014dca:	639c                	ld	a5,0(a5)
    80014dcc:	fd043703          	ld	a4,-48(s0)
    80014dd0:	00f71863          	bne	a4,a5,80014de0 <list_remove+0x38>
            list_remove_elem(e);
    80014dd4:	fe843503          	ld	a0,-24(s0)
    80014dd8:	030000ef          	jal	ra,80014e08 <list_remove_elem>
            return true;
    80014ddc:	4785                	li	a5,1
    80014dde:	a005                	j	80014dfe <list_remove+0x56>
    list_for_each(lst, e)
    80014de0:	fe843503          	ld	a0,-24(s0)
    80014de4:	2ea000ef          	jal	ra,800150ce <list_elem_prev>
    80014de8:	fea43423          	sd	a0,-24(s0)
    80014dec:	fe843583          	ld	a1,-24(s0)
    80014df0:	fd843503          	ld	a0,-40(s0)
    80014df4:	204000ef          	jal	ra,80014ff8 <list_elem_valid>
    80014df8:	87aa                	mv	a5,a0
    80014dfa:	f7f1                	bnez	a5,80014dc6 <list_remove+0x1e>
        }
    }
    return false;
    80014dfc:	4781                	li	a5,0
}
    80014dfe:	853e                	mv	a0,a5
    80014e00:	70a2                	ld	ra,40(sp)
    80014e02:	7402                	ld	s0,32(sp)
    80014e04:	6145                	addi	sp,sp,48
    80014e06:	8082                	ret

0000000080014e08 <list_remove_elem>:

void list_remove_elem(ListElem *e)
{
    80014e08:	1101                	addi	sp,sp,-32
    80014e0a:	ec06                	sd	ra,24(sp)
    80014e0c:	e822                	sd	s0,16(sp)
    80014e0e:	1000                	addi	s0,sp,32
    80014e10:	fea43423          	sd	a0,-24(s0)
    e->next->prev = e->prev;
    80014e14:	fe843783          	ld	a5,-24(s0)
    80014e18:	679c                	ld	a5,8(a5)
    80014e1a:	fe843703          	ld	a4,-24(s0)
    80014e1e:	6b18                	ld	a4,16(a4)
    80014e20:	eb98                	sd	a4,16(a5)
    e->prev->next = e->next;
    80014e22:	fe843783          	ld	a5,-24(s0)
    80014e26:	6b9c                	ld	a5,16(a5)
    80014e28:	fe843703          	ld	a4,-24(s0)
    80014e2c:	6718                	ld	a4,8(a4)
    80014e2e:	e798                	sd	a4,8(a5)
    g_kfree(e);
    80014e30:	fe843503          	ld	a0,-24(s0)
    80014e34:	209010ef          	jal	ra,8001683c <g_kfree>
}
    80014e38:	0001                	nop
    80014e3a:	60e2                	ld	ra,24(sp)
    80014e3c:	6442                	ld	s0,16(sp)
    80014e3e:	6105                	addi	sp,sp,32
    80014e40:	8082                	ret

0000000080014e42 <list_find_elem>:

ListElem *list_find_elem(List *l, uint64_t value)
{
    80014e42:	7179                	addi	sp,sp,-48
    80014e44:	f406                	sd	ra,40(sp)
    80014e46:	f022                	sd	s0,32(sp)
    80014e48:	1800                	addi	s0,sp,48
    80014e4a:	fca43c23          	sd	a0,-40(s0)
    80014e4e:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(l, e)
    80014e52:	fd843503          	ld	a0,-40(s0)
    80014e56:	230000ef          	jal	ra,80015086 <list_elem_start_ascending>
    80014e5a:	fea43423          	sd	a0,-24(s0)
    80014e5e:	a00d                	j	80014e80 <list_find_elem+0x3e>
    {
        if (e->value == value) {
    80014e60:	fe843783          	ld	a5,-24(s0)
    80014e64:	639c                	ld	a5,0(a5)
    80014e66:	fd043703          	ld	a4,-48(s0)
    80014e6a:	00f71563          	bne	a4,a5,80014e74 <list_find_elem+0x32>
            return e;
    80014e6e:	fe843783          	ld	a5,-24(s0)
    80014e72:	a005                	j	80014e92 <list_find_elem+0x50>
    list_for_each(l, e)
    80014e74:	fe843503          	ld	a0,-24(s0)
    80014e78:	256000ef          	jal	ra,800150ce <list_elem_prev>
    80014e7c:	fea43423          	sd	a0,-24(s0)
    80014e80:	fe843583          	ld	a1,-24(s0)
    80014e84:	fd843503          	ld	a0,-40(s0)
    80014e88:	170000ef          	jal	ra,80014ff8 <list_elem_valid>
    80014e8c:	87aa                	mv	a5,a0
    80014e8e:	fbe9                	bnez	a5,80014e60 <list_find_elem+0x1e>
        }
    }
    return NULL;
    80014e90:	4781                	li	a5,0
}
    80014e92:	853e                	mv	a0,a5
    80014e94:	70a2                	ld	ra,40(sp)
    80014e96:	7402                	ld	s0,32(sp)
    80014e98:	6145                	addi	sp,sp,48
    80014e9a:	8082                	ret

0000000080014e9c <list_contains>:

bool list_contains(const List *lst, uint64_t value)
{
    80014e9c:	7179                	addi	sp,sp,-48
    80014e9e:	f406                	sd	ra,40(sp)
    80014ea0:	f022                	sd	s0,32(sp)
    80014ea2:	1800                	addi	s0,sp,48
    80014ea4:	fca43c23          	sd	a0,-40(s0)
    80014ea8:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e = list_find_celem(lst, value);
    80014eac:	fd043583          	ld	a1,-48(s0)
    80014eb0:	fd843503          	ld	a0,-40(s0)
    80014eb4:	178000ef          	jal	ra,8001502c <list_find_celem>
    80014eb8:	fea43423          	sd	a0,-24(s0)

    return e == NULL ? false : true;
    80014ebc:	fe843783          	ld	a5,-24(s0)
    80014ec0:	00f037b3          	snez	a5,a5
    80014ec4:	0ff7f793          	andi	a5,a5,255
}
    80014ec8:	853e                	mv	a0,a5
    80014eca:	70a2                	ld	ra,40(sp)
    80014ecc:	7402                	ld	s0,32(sp)
    80014ece:	6145                	addi	sp,sp,48
    80014ed0:	8082                	ret

0000000080014ed2 <list_pop_back>:

ListElem *list_pop_back(List *l)
{
    80014ed2:	7179                	addi	sp,sp,-48
    80014ed4:	f406                	sd	ra,40(sp)
    80014ed6:	f022                	sd	s0,32(sp)
    80014ed8:	1800                	addi	s0,sp,48
    80014eda:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.next) {
    80014ede:	fd843703          	ld	a4,-40(s0)
    80014ee2:	fd843783          	ld	a5,-40(s0)
    80014ee6:	679c                	ld	a5,8(a5)
    80014ee8:	00f71463          	bne	a4,a5,80014ef0 <list_pop_back+0x1e>
        return NULL;
    80014eec:	4781                	li	a5,0
    80014eee:	a821                	j	80014f06 <list_pop_back+0x34>
    }
    ListElem *e = l->head.next;
    80014ef0:	fd843783          	ld	a5,-40(s0)
    80014ef4:	679c                	ld	a5,8(a5)
    80014ef6:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    80014efa:	fe843503          	ld	a0,-24(s0)
    80014efe:	f0bff0ef          	jal	ra,80014e08 <list_remove_elem>
    return e;
    80014f02:	fe843783          	ld	a5,-24(s0)
}
    80014f06:	853e                	mv	a0,a5
    80014f08:	70a2                	ld	ra,40(sp)
    80014f0a:	7402                	ld	s0,32(sp)
    80014f0c:	6145                	addi	sp,sp,48
    80014f0e:	8082                	ret

0000000080014f10 <list_pop>:

ListElem *list_pop(List *l)
{
    80014f10:	7179                	addi	sp,sp,-48
    80014f12:	f406                	sd	ra,40(sp)
    80014f14:	f022                	sd	s0,32(sp)
    80014f16:	1800                	addi	s0,sp,48
    80014f18:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.prev) {
    80014f1c:	fd843703          	ld	a4,-40(s0)
    80014f20:	fd843783          	ld	a5,-40(s0)
    80014f24:	6b9c                	ld	a5,16(a5)
    80014f26:	00f71463          	bne	a4,a5,80014f2e <list_pop+0x1e>
        return NULL;
    80014f2a:	4781                	li	a5,0
    80014f2c:	a821                	j	80014f44 <list_pop+0x34>
    }
    ListElem *e = l->head.prev;
    80014f2e:	fd843783          	ld	a5,-40(s0)
    80014f32:	6b9c                	ld	a5,16(a5)
    80014f34:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    80014f38:	fe843503          	ld	a0,-24(s0)
    80014f3c:	ecdff0ef          	jal	ra,80014e08 <list_remove_elem>
    return e;
    80014f40:	fe843783          	ld	a5,-24(s0)
}
    80014f44:	853e                	mv	a0,a5
    80014f46:	70a2                	ld	ra,40(sp)
    80014f48:	7402                	ld	s0,32(sp)
    80014f4a:	6145                	addi	sp,sp,48
    80014f4c:	8082                	ret

0000000080014f4e <list_size>:

uint64_t list_size(const List *lst)
{
    80014f4e:	7179                	addi	sp,sp,-48
    80014f50:	f406                	sd	ra,40(sp)
    80014f52:	f022                	sd	s0,32(sp)
    80014f54:	1800                	addi	s0,sp,48
    80014f56:	fca43c23          	sd	a0,-40(s0)
    uint64_t s = 0;
    80014f5a:	fe043423          	sd	zero,-24(s0)
    const ListElem *e;
    list_for_ceach(lst, e)
    80014f5e:	fd843503          	ld	a0,-40(s0)
    80014f62:	19c000ef          	jal	ra,800150fe <list_celem_start_ascending>
    80014f66:	fea43023          	sd	a0,-32(s0)
    80014f6a:	a821                	j	80014f82 <list_size+0x34>
    {
        s += 1;
    80014f6c:	fe843783          	ld	a5,-24(s0)
    80014f70:	0785                	addi	a5,a5,1
    80014f72:	fef43423          	sd	a5,-24(s0)
    list_for_ceach(lst, e)
    80014f76:	fe043503          	ld	a0,-32(s0)
    80014f7a:	1cc000ef          	jal	ra,80015146 <list_celem_prev>
    80014f7e:	fea43023          	sd	a0,-32(s0)
    80014f82:	fe043583          	ld	a1,-32(s0)
    80014f86:	fd843503          	ld	a0,-40(s0)
    80014f8a:	06e000ef          	jal	ra,80014ff8 <list_elem_valid>
    80014f8e:	87aa                	mv	a5,a0
    80014f90:	fff1                	bnez	a5,80014f6c <list_size+0x1e>
    }
    return s;
    80014f92:	fe843783          	ld	a5,-24(s0)
}
    80014f96:	853e                	mv	a0,a5
    80014f98:	70a2                	ld	ra,40(sp)
    80014f9a:	7402                	ld	s0,32(sp)
    80014f9c:	6145                	addi	sp,sp,48
    80014f9e:	8082                	ret

0000000080014fa0 <list_free>:

void list_free(List *lst)
{
    80014fa0:	7179                	addi	sp,sp,-48
    80014fa2:	f406                	sd	ra,40(sp)
    80014fa4:	f022                	sd	s0,32(sp)
    80014fa6:	1800                	addi	s0,sp,48
    80014fa8:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    if (lst == NULL) {
    80014fac:	fd843783          	ld	a5,-40(s0)
    80014fb0:	cf9d                	beqz	a5,80014fee <list_free+0x4e>
        return;
    }
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014fb2:	fd843783          	ld	a5,-40(s0)
    80014fb6:	679c                	ld	a5,8(a5)
    80014fb8:	fef43423          	sd	a5,-24(s0)
    80014fbc:	a831                	j	80014fd8 <list_free+0x38>
        n = e->next;
    80014fbe:	fe843783          	ld	a5,-24(s0)
    80014fc2:	679c                	ld	a5,8(a5)
    80014fc4:	fef43023          	sd	a5,-32(s0)
        g_kfree(e);
    80014fc8:	fe843503          	ld	a0,-24(s0)
    80014fcc:	071010ef          	jal	ra,8001683c <g_kfree>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014fd0:	fe043783          	ld	a5,-32(s0)
    80014fd4:	fef43423          	sd	a5,-24(s0)
    80014fd8:	fd843783          	ld	a5,-40(s0)
    80014fdc:	fe843703          	ld	a4,-24(s0)
    80014fe0:	fcf71fe3          	bne	a4,a5,80014fbe <list_free+0x1e>
    }
    g_kfree(lst);
    80014fe4:	fd843503          	ld	a0,-40(s0)
    80014fe8:	055010ef          	jal	ra,8001683c <g_kfree>
    80014fec:	a011                	j	80014ff0 <list_free+0x50>
        return;
    80014fee:	0001                	nop
}
    80014ff0:	70a2                	ld	ra,40(sp)
    80014ff2:	7402                	ld	s0,32(sp)
    80014ff4:	6145                	addi	sp,sp,48
    80014ff6:	8082                	ret

0000000080014ff8 <list_elem_valid>:

bool list_elem_valid(const List *l, const ListElem *e)
{
    80014ff8:	1101                	addi	sp,sp,-32
    80014ffa:	ec22                	sd	s0,24(sp)
    80014ffc:	1000                	addi	s0,sp,32
    80014ffe:	fea43423          	sd	a0,-24(s0)
    80015002:	feb43023          	sd	a1,-32(s0)
    return e != NULL && e != &l->head;
    80015006:	fe043783          	ld	a5,-32(s0)
    8001500a:	cb89                	beqz	a5,8001501c <list_elem_valid+0x24>
    8001500c:	fe843783          	ld	a5,-24(s0)
    80015010:	fe043703          	ld	a4,-32(s0)
    80015014:	00f70463          	beq	a4,a5,8001501c <list_elem_valid+0x24>
    80015018:	4785                	li	a5,1
    8001501a:	a011                	j	8001501e <list_elem_valid+0x26>
    8001501c:	4781                	li	a5,0
    8001501e:	8b85                	andi	a5,a5,1
    80015020:	0ff7f793          	andi	a5,a5,255
}
    80015024:	853e                	mv	a0,a5
    80015026:	6462                	ld	s0,24(sp)
    80015028:	6105                	addi	sp,sp,32
    8001502a:	8082                	ret

000000008001502c <list_find_celem>:

const ListElem *list_find_celem(const List *l, uint64_t value) 
{
    8001502c:	7179                	addi	sp,sp,-48
    8001502e:	f406                	sd	ra,40(sp)
    80015030:	f022                	sd	s0,32(sp)
    80015032:	1800                	addi	s0,sp,48
    80015034:	fca43c23          	sd	a0,-40(s0)
    80015038:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e;
    list_for_ceach(l, e) 
    8001503c:	fd843503          	ld	a0,-40(s0)
    80015040:	0be000ef          	jal	ra,800150fe <list_celem_start_ascending>
    80015044:	fea43423          	sd	a0,-24(s0)
    80015048:	a00d                	j	8001506a <list_find_celem+0x3e>
    {
        if (e->value == value) {
    8001504a:	fe843783          	ld	a5,-24(s0)
    8001504e:	639c                	ld	a5,0(a5)
    80015050:	fd043703          	ld	a4,-48(s0)
    80015054:	00f71563          	bne	a4,a5,8001505e <list_find_celem+0x32>
            return e;
    80015058:	fe843783          	ld	a5,-24(s0)
    8001505c:	a005                	j	8001507c <list_find_celem+0x50>
    list_for_ceach(l, e) 
    8001505e:	fe843503          	ld	a0,-24(s0)
    80015062:	0e4000ef          	jal	ra,80015146 <list_celem_prev>
    80015066:	fea43423          	sd	a0,-24(s0)
    8001506a:	fe843583          	ld	a1,-24(s0)
    8001506e:	fd843503          	ld	a0,-40(s0)
    80015072:	f87ff0ef          	jal	ra,80014ff8 <list_elem_valid>
    80015076:	87aa                	mv	a5,a0
    80015078:	fbe9                	bnez	a5,8001504a <list_find_celem+0x1e>
        }
    }
    return NULL;
    8001507a:	4781                	li	a5,0
}
    8001507c:	853e                	mv	a0,a5
    8001507e:	70a2                	ld	ra,40(sp)
    80015080:	7402                	ld	s0,32(sp)
    80015082:	6145                	addi	sp,sp,48
    80015084:	8082                	ret

0000000080015086 <list_elem_start_ascending>:

ListElem *list_elem_start_ascending(List *l)
{
    80015086:	1101                	addi	sp,sp,-32
    80015088:	ec22                	sd	s0,24(sp)
    8001508a:	1000                	addi	s0,sp,32
    8001508c:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    80015090:	fe843783          	ld	a5,-24(s0)
    80015094:	6b9c                	ld	a5,16(a5)
}
    80015096:	853e                	mv	a0,a5
    80015098:	6462                	ld	s0,24(sp)
    8001509a:	6105                	addi	sp,sp,32
    8001509c:	8082                	ret

000000008001509e <list_elem_start_descending>:

ListElem *list_elem_start_descending(List *l)
{
    8001509e:	1101                	addi	sp,sp,-32
    800150a0:	ec22                	sd	s0,24(sp)
    800150a2:	1000                	addi	s0,sp,32
    800150a4:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    800150a8:	fe843783          	ld	a5,-24(s0)
    800150ac:	679c                	ld	a5,8(a5)
}
    800150ae:	853e                	mv	a0,a5
    800150b0:	6462                	ld	s0,24(sp)
    800150b2:	6105                	addi	sp,sp,32
    800150b4:	8082                	ret

00000000800150b6 <list_elem_next>:

ListElem *list_elem_next(ListElem *e)
{
    800150b6:	1101                	addi	sp,sp,-32
    800150b8:	ec22                	sd	s0,24(sp)
    800150ba:	1000                	addi	s0,sp,32
    800150bc:	fea43423          	sd	a0,-24(s0)
    return e->next;
    800150c0:	fe843783          	ld	a5,-24(s0)
    800150c4:	679c                	ld	a5,8(a5)
}
    800150c6:	853e                	mv	a0,a5
    800150c8:	6462                	ld	s0,24(sp)
    800150ca:	6105                	addi	sp,sp,32
    800150cc:	8082                	ret

00000000800150ce <list_elem_prev>:

ListElem *list_elem_prev(ListElem *e)
{
    800150ce:	1101                	addi	sp,sp,-32
    800150d0:	ec22                	sd	s0,24(sp)
    800150d2:	1000                	addi	s0,sp,32
    800150d4:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    800150d8:	fe843783          	ld	a5,-24(s0)
    800150dc:	6b9c                	ld	a5,16(a5)
}
    800150de:	853e                	mv	a0,a5
    800150e0:	6462                	ld	s0,24(sp)
    800150e2:	6105                	addi	sp,sp,32
    800150e4:	8082                	ret

00000000800150e6 <list_elem_value>:

uint64_t list_elem_value(const ListElem *e)
{
    800150e6:	1101                	addi	sp,sp,-32
    800150e8:	ec22                	sd	s0,24(sp)
    800150ea:	1000                	addi	s0,sp,32
    800150ec:	fea43423          	sd	a0,-24(s0)
    return e->value;
    800150f0:	fe843783          	ld	a5,-24(s0)
    800150f4:	639c                	ld	a5,0(a5)
}
    800150f6:	853e                	mv	a0,a5
    800150f8:	6462                	ld	s0,24(sp)
    800150fa:	6105                	addi	sp,sp,32
    800150fc:	8082                	ret

00000000800150fe <list_celem_start_ascending>:

const ListElem *list_celem_start_ascending(const List *l) {
    800150fe:	1101                	addi	sp,sp,-32
    80015100:	ec22                	sd	s0,24(sp)
    80015102:	1000                	addi	s0,sp,32
    80015104:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    80015108:	fe843783          	ld	a5,-24(s0)
    8001510c:	6b9c                	ld	a5,16(a5)
}
    8001510e:	853e                	mv	a0,a5
    80015110:	6462                	ld	s0,24(sp)
    80015112:	6105                	addi	sp,sp,32
    80015114:	8082                	ret

0000000080015116 <list_celem_start_descending>:
const ListElem *list_celem_start_descending(const List *l) {
    80015116:	1101                	addi	sp,sp,-32
    80015118:	ec22                	sd	s0,24(sp)
    8001511a:	1000                	addi	s0,sp,32
    8001511c:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    80015120:	fe843783          	ld	a5,-24(s0)
    80015124:	679c                	ld	a5,8(a5)
}
    80015126:	853e                	mv	a0,a5
    80015128:	6462                	ld	s0,24(sp)
    8001512a:	6105                	addi	sp,sp,32
    8001512c:	8082                	ret

000000008001512e <list_celem_next>:
const ListElem *list_celem_next(const ListElem *e) {
    8001512e:	1101                	addi	sp,sp,-32
    80015130:	ec22                	sd	s0,24(sp)
    80015132:	1000                	addi	s0,sp,32
    80015134:	fea43423          	sd	a0,-24(s0)
    return e->next;
    80015138:	fe843783          	ld	a5,-24(s0)
    8001513c:	679c                	ld	a5,8(a5)
}
    8001513e:	853e                	mv	a0,a5
    80015140:	6462                	ld	s0,24(sp)
    80015142:	6105                	addi	sp,sp,32
    80015144:	8082                	ret

0000000080015146 <list_celem_prev>:
const ListElem *list_celem_prev(const ListElem *e) {
    80015146:	1101                	addi	sp,sp,-32
    80015148:	ec22                	sd	s0,24(sp)
    8001514a:	1000                	addi	s0,sp,32
    8001514c:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    80015150:	fe843783          	ld	a5,-24(s0)
    80015154:	6b9c                	ld	a5,16(a5)
}
    80015156:	853e                	mv	a0,a5
    80015158:	6462                	ld	s0,24(sp)
    8001515a:	6105                	addi	sp,sp,32
    8001515c:	8082                	ret

000000008001515e <list_sort_signed_long_comparator_ascending>:

// Default list comparators
LIST_COMPARATOR(list_sort_signed_long_comparator_ascending)
{
    8001515e:	1101                	addi	sp,sp,-32
    80015160:	ec22                	sd	s0,24(sp)
    80015162:	1000                	addi	s0,sp,32
    80015164:	fea43423          	sd	a0,-24(s0)
    80015168:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    8001516c:	fe843703          	ld	a4,-24(s0)
    80015170:	fe043783          	ld	a5,-32(s0)
    80015174:	00e7a7b3          	slt	a5,a5,a4
    80015178:	0017c793          	xori	a5,a5,1
    8001517c:	0ff7f793          	andi	a5,a5,255
}
    80015180:	853e                	mv	a0,a5
    80015182:	6462                	ld	s0,24(sp)
    80015184:	6105                	addi	sp,sp,32
    80015186:	8082                	ret

0000000080015188 <list_sort_signed_long_comparator_descending>:
LIST_COMPARATOR(list_sort_signed_long_comparator_descending)
{
    80015188:	1101                	addi	sp,sp,-32
    8001518a:	ec22                	sd	s0,24(sp)
    8001518c:	1000                	addi	s0,sp,32
    8001518e:	fea43423          	sd	a0,-24(s0)
    80015192:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    80015196:	fe843703          	ld	a4,-24(s0)
    8001519a:	fe043783          	ld	a5,-32(s0)
    8001519e:	00f727b3          	slt	a5,a4,a5
    800151a2:	0017c793          	xori	a5,a5,1
    800151a6:	0ff7f793          	andi	a5,a5,255
}
    800151aa:	853e                	mv	a0,a5
    800151ac:	6462                	ld	s0,24(sp)
    800151ae:	6105                	addi	sp,sp,32
    800151b0:	8082                	ret

00000000800151b2 <list_sort_unsigned_long_comparator_ascending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_ascending)
{
    800151b2:	1101                	addi	sp,sp,-32
    800151b4:	ec22                	sd	s0,24(sp)
    800151b6:	1000                	addi	s0,sp,32
    800151b8:	fea43423          	sd	a0,-24(s0)
    800151bc:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    800151c0:	fe843703          	ld	a4,-24(s0)
    800151c4:	fe043783          	ld	a5,-32(s0)
    800151c8:	00e7b7b3          	sltu	a5,a5,a4
    800151cc:	0017c793          	xori	a5,a5,1
    800151d0:	0ff7f793          	andi	a5,a5,255
}
    800151d4:	853e                	mv	a0,a5
    800151d6:	6462                	ld	s0,24(sp)
    800151d8:	6105                	addi	sp,sp,32
    800151da:	8082                	ret

00000000800151dc <list_sort_unsigned_long_comparator_descending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_descending)
{
    800151dc:	1101                	addi	sp,sp,-32
    800151de:	ec22                	sd	s0,24(sp)
    800151e0:	1000                	addi	s0,sp,32
    800151e2:	fea43423          	sd	a0,-24(s0)
    800151e6:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    800151ea:	fe843703          	ld	a4,-24(s0)
    800151ee:	fe043783          	ld	a5,-32(s0)
    800151f2:	00f737b3          	sltu	a5,a4,a5
    800151f6:	0017c793          	xori	a5,a5,1
    800151fa:	0ff7f793          	andi	a5,a5,255
}
    800151fe:	853e                	mv	a0,a5
    80015200:	6462                	ld	s0,24(sp)
    80015202:	6105                	addi	sp,sp,32
    80015204:	8082                	ret

0000000080015206 <list_sort_string_comparator_ascending>:
LIST_COMPARATOR(list_sort_string_comparator_ascending)
{
    80015206:	1101                	addi	sp,sp,-32
    80015208:	ec06                	sd	ra,24(sp)
    8001520a:	e822                	sd	s0,16(sp)
    8001520c:	1000                	addi	s0,sp,32
    8001520e:	fea43423          	sd	a0,-24(s0)
    80015212:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    80015216:	fe843783          	ld	a5,-24(s0)
    8001521a:	fe043703          	ld	a4,-32(s0)
    8001521e:	85ba                	mv	a1,a4
    80015220:	853e                	mv	a0,a5
    80015222:	4e0000ef          	jal	ra,80015702 <strcmp>
    80015226:	87aa                	mv	a5,a0
    80015228:	0017a793          	slti	a5,a5,1
    8001522c:	0ff7f793          	andi	a5,a5,255
}
    80015230:	853e                	mv	a0,a5
    80015232:	60e2                	ld	ra,24(sp)
    80015234:	6442                	ld	s0,16(sp)
    80015236:	6105                	addi	sp,sp,32
    80015238:	8082                	ret

000000008001523a <list_sort_string_comparator_descending>:
LIST_COMPARATOR(list_sort_string_comparator_descending)
{
    8001523a:	1101                	addi	sp,sp,-32
    8001523c:	ec06                	sd	ra,24(sp)
    8001523e:	e822                	sd	s0,16(sp)
    80015240:	1000                	addi	s0,sp,32
    80015242:	fea43423          	sd	a0,-24(s0)
    80015246:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    8001524a:	fe843783          	ld	a5,-24(s0)
    8001524e:	fe043703          	ld	a4,-32(s0)
    80015252:	85ba                	mv	a1,a4
    80015254:	853e                	mv	a0,a5
    80015256:	4ac000ef          	jal	ra,80015702 <strcmp>
    8001525a:	87aa                	mv	a5,a0
    8001525c:	fff7c793          	not	a5,a5
    80015260:	01f7d79b          	srliw	a5,a5,0x1f
    80015264:	0ff7f793          	andi	a5,a5,255
}
    80015268:	853e                	mv	a0,a5
    8001526a:	60e2                	ld	ra,24(sp)
    8001526c:	6442                	ld	s0,16(sp)
    8001526e:	6105                	addi	sp,sp,32
    80015270:	8082                	ret

0000000080015272 <memset>:
#include <alloc.h>
#include <stdint.h>
#include <util.h>

void *memset(void *dst, char data, int size)
{
    80015272:	715d                	addi	sp,sp,-80
    80015274:	e4a2                	sd	s0,72(sp)
    80015276:	0880                	addi	s0,sp,80
    80015278:	faa43c23          	sd	a0,-72(s0)
    8001527c:	87ae                	mv	a5,a1
    8001527e:	8732                	mv	a4,a2
    80015280:	faf40ba3          	sb	a5,-73(s0)
    80015284:	87ba                	mv	a5,a4
    80015286:	faf42823          	sw	a5,-80(s0)
    int64_t i;
    long *ldst = (long *)dst;
    8001528a:	fb843783          	ld	a5,-72(s0)
    8001528e:	fef43023          	sd	a5,-32(s0)
    char *cdst;
    char l[]              = {data, data, data, data, data, data, data, data};
    80015292:	fb744783          	lbu	a5,-73(s0)
    80015296:	fcf40423          	sb	a5,-56(s0)
    8001529a:	fb744783          	lbu	a5,-73(s0)
    8001529e:	fcf404a3          	sb	a5,-55(s0)
    800152a2:	fb744783          	lbu	a5,-73(s0)
    800152a6:	fcf40523          	sb	a5,-54(s0)
    800152aa:	fb744783          	lbu	a5,-73(s0)
    800152ae:	fcf405a3          	sb	a5,-53(s0)
    800152b2:	fb744783          	lbu	a5,-73(s0)
    800152b6:	fcf40623          	sb	a5,-52(s0)
    800152ba:	fb744783          	lbu	a5,-73(s0)
    800152be:	fcf406a3          	sb	a5,-51(s0)
    800152c2:	fb744783          	lbu	a5,-73(s0)
    800152c6:	fcf40723          	sb	a5,-50(s0)
    800152ca:	fb744783          	lbu	a5,-73(s0)
    800152ce:	fcf407a3          	sb	a5,-49(s0)

    int num_8_byte_copies = size / 8;
    800152d2:	fb042783          	lw	a5,-80(s0)
    800152d6:	41f7d71b          	sraiw	a4,a5,0x1f
    800152da:	01d7571b          	srliw	a4,a4,0x1d
    800152de:	9fb9                	addw	a5,a5,a4
    800152e0:	4037d79b          	sraiw	a5,a5,0x3
    800152e4:	fcf42a23          	sw	a5,-44(s0)
    int num_1_byte_copies = size % 8;
    800152e8:	fb042703          	lw	a4,-80(s0)
    800152ec:	41f7579b          	sraiw	a5,a4,0x1f
    800152f0:	01d7d79b          	srliw	a5,a5,0x1d
    800152f4:	9f3d                	addw	a4,a4,a5
    800152f6:	8b1d                	andi	a4,a4,7
    800152f8:	40f707bb          	subw	a5,a4,a5
    800152fc:	fcf42823          	sw	a5,-48(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    80015300:	fe043423          	sd	zero,-24(s0)
    80015304:	a005                	j	80015324 <memset+0xb2>
        *ldst++ = *((long *)l);
    80015306:	fc840713          	addi	a4,s0,-56
    8001530a:	fe043783          	ld	a5,-32(s0)
    8001530e:	00878693          	addi	a3,a5,8
    80015312:	fed43023          	sd	a3,-32(s0)
    80015316:	6318                	ld	a4,0(a4)
    80015318:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    8001531a:	fe843783          	ld	a5,-24(s0)
    8001531e:	0785                	addi	a5,a5,1
    80015320:	fef43423          	sd	a5,-24(s0)
    80015324:	fd442783          	lw	a5,-44(s0)
    80015328:	fe843703          	ld	a4,-24(s0)
    8001532c:	fcf74de3          	blt	a4,a5,80015306 <memset+0x94>
    }

    cdst = (char *)ldst;
    80015330:	fe043783          	ld	a5,-32(s0)
    80015334:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    80015338:	fe043423          	sd	zero,-24(s0)
    8001533c:	a005                	j	8001535c <memset+0xea>
        *cdst++ = data;
    8001533e:	fd843783          	ld	a5,-40(s0)
    80015342:	00178713          	addi	a4,a5,1
    80015346:	fce43c23          	sd	a4,-40(s0)
    8001534a:	fb744703          	lbu	a4,-73(s0)
    8001534e:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    80015352:	fe843783          	ld	a5,-24(s0)
    80015356:	0785                	addi	a5,a5,1
    80015358:	fef43423          	sd	a5,-24(s0)
    8001535c:	fd042783          	lw	a5,-48(s0)
    80015360:	fe843703          	ld	a4,-24(s0)
    80015364:	fcf74de3          	blt	a4,a5,8001533e <memset+0xcc>
    }

    return dst;
    80015368:	fb843783          	ld	a5,-72(s0)
}
    8001536c:	853e                	mv	a0,a5
    8001536e:	6426                	ld	s0,72(sp)
    80015370:	6161                	addi	sp,sp,80
    80015372:	8082                	ret

0000000080015374 <memcpy>:

void *memcpy(void *dst, const void *src, int size)
{
    80015374:	711d                	addi	sp,sp,-96
    80015376:	eca2                	sd	s0,88(sp)
    80015378:	1080                	addi	s0,sp,96
    8001537a:	faa43c23          	sd	a0,-72(s0)
    8001537e:	fab43823          	sd	a1,-80(s0)
    80015382:	87b2                	mv	a5,a2
    80015384:	faf42623          	sw	a5,-84(s0)
    int i;
    char *cdst;
    const char *csrc;
    long *ldst            = (long *)dst;
    80015388:	fb843783          	ld	a5,-72(s0)
    8001538c:	fcf43823          	sd	a5,-48(s0)
    const long *lsrc      = (long *)src;
    80015390:	fb043783          	ld	a5,-80(s0)
    80015394:	fcf43423          	sd	a5,-56(s0)

    int num_8_byte_copies = size / 8;
    80015398:	fac42783          	lw	a5,-84(s0)
    8001539c:	41f7d71b          	sraiw	a4,a5,0x1f
    800153a0:	01d7571b          	srliw	a4,a4,0x1d
    800153a4:	9fb9                	addw	a5,a5,a4
    800153a6:	4037d79b          	sraiw	a5,a5,0x3
    800153aa:	fcf42223          	sw	a5,-60(s0)
    int num_1_byte_copies = size % 8;
    800153ae:	fac42703          	lw	a4,-84(s0)
    800153b2:	41f7579b          	sraiw	a5,a4,0x1f
    800153b6:	01d7d79b          	srliw	a5,a5,0x1d
    800153ba:	9f3d                	addw	a4,a4,a5
    800153bc:	8b1d                	andi	a4,a4,7
    800153be:	40f707bb          	subw	a5,a4,a5
    800153c2:	fcf42023          	sw	a5,-64(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    800153c6:	fe042623          	sw	zero,-20(s0)
    800153ca:	a025                	j	800153f2 <memcpy+0x7e>
        *ldst++ = *lsrc++;
    800153cc:	fc843703          	ld	a4,-56(s0)
    800153d0:	00870793          	addi	a5,a4,8
    800153d4:	fcf43423          	sd	a5,-56(s0)
    800153d8:	fd043783          	ld	a5,-48(s0)
    800153dc:	00878693          	addi	a3,a5,8
    800153e0:	fcd43823          	sd	a3,-48(s0)
    800153e4:	6318                	ld	a4,0(a4)
    800153e6:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    800153e8:	fec42783          	lw	a5,-20(s0)
    800153ec:	2785                	addiw	a5,a5,1
    800153ee:	fef42623          	sw	a5,-20(s0)
    800153f2:	fec42703          	lw	a4,-20(s0)
    800153f6:	fc442783          	lw	a5,-60(s0)
    800153fa:	2701                	sext.w	a4,a4
    800153fc:	2781                	sext.w	a5,a5
    800153fe:	fcf747e3          	blt	a4,a5,800153cc <memcpy+0x58>
    }

    cdst = (char *)ldst;
    80015402:	fd043783          	ld	a5,-48(s0)
    80015406:	fef43023          	sd	a5,-32(s0)
    csrc = (char *)lsrc;
    8001540a:	fc843783          	ld	a5,-56(s0)
    8001540e:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    80015412:	fe042623          	sw	zero,-20(s0)
    80015416:	a035                	j	80015442 <memcpy+0xce>
        *cdst++ = *csrc++;
    80015418:	fd843703          	ld	a4,-40(s0)
    8001541c:	00170793          	addi	a5,a4,1
    80015420:	fcf43c23          	sd	a5,-40(s0)
    80015424:	fe043783          	ld	a5,-32(s0)
    80015428:	00178693          	addi	a3,a5,1
    8001542c:	fed43023          	sd	a3,-32(s0)
    80015430:	00074703          	lbu	a4,0(a4)
    80015434:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    80015438:	fec42783          	lw	a5,-20(s0)
    8001543c:	2785                	addiw	a5,a5,1
    8001543e:	fef42623          	sw	a5,-20(s0)
    80015442:	fec42703          	lw	a4,-20(s0)
    80015446:	fc042783          	lw	a5,-64(s0)
    8001544a:	2701                	sext.w	a4,a4
    8001544c:	2781                	sext.w	a5,a5
    8001544e:	fcf745e3          	blt	a4,a5,80015418 <memcpy+0xa4>
    }

    return dst;
    80015452:	fb843783          	ld	a5,-72(s0)
}
    80015456:	853e                	mv	a0,a5
    80015458:	6466                	ld	s0,88(sp)
    8001545a:	6125                	addi	sp,sp,96
    8001545c:	8082                	ret

000000008001545e <memmove>:

void *memmove(void *_dst, const void *_src, int n)
{
    8001545e:	7139                	addi	sp,sp,-64
    80015460:	fc22                	sd	s0,56(sp)
    80015462:	0080                	addi	s0,sp,64
    80015464:	fca43c23          	sd	a0,-40(s0)
    80015468:	fcb43823          	sd	a1,-48(s0)
    8001546c:	87b2                	mv	a5,a2
    8001546e:	fcf42623          	sw	a5,-52(s0)
    const char *src = _src;
    80015472:	fd043783          	ld	a5,-48(s0)
    80015476:	fef43423          	sd	a5,-24(s0)
    char *dst       = _dst;
    8001547a:	fd843783          	ld	a5,-40(s0)
    8001547e:	fef43023          	sd	a5,-32(s0)

    if (n == 0)
    80015482:	fcc42783          	lw	a5,-52(s0)
    80015486:	2781                	sext.w	a5,a5
    80015488:	e781                	bnez	a5,80015490 <memmove+0x32>
        return _dst;
    8001548a:	fd843783          	ld	a5,-40(s0)
    8001548e:	a845                	j	8001553e <memmove+0xe0>

    if (src < dst && src + n > dst) {
    80015490:	fe843703          	ld	a4,-24(s0)
    80015494:	fe043783          	ld	a5,-32(s0)
    80015498:	08f77c63          	bgeu	a4,a5,80015530 <memmove+0xd2>
    8001549c:	fcc42783          	lw	a5,-52(s0)
    800154a0:	fe843703          	ld	a4,-24(s0)
    800154a4:	97ba                	add	a5,a5,a4
    800154a6:	fe043703          	ld	a4,-32(s0)
    800154aa:	08f77363          	bgeu	a4,a5,80015530 <memmove+0xd2>
        src += n;
    800154ae:	fcc42783          	lw	a5,-52(s0)
    800154b2:	fe843703          	ld	a4,-24(s0)
    800154b6:	97ba                	add	a5,a5,a4
    800154b8:	fef43423          	sd	a5,-24(s0)
        dst += n;
    800154bc:	fcc42783          	lw	a5,-52(s0)
    800154c0:	fe043703          	ld	a4,-32(s0)
    800154c4:	97ba                	add	a5,a5,a4
    800154c6:	fef43023          	sd	a5,-32(s0)
        for (; n > 0; n -= 1) {
    800154ca:	a805                	j	800154fa <memmove+0x9c>
            *--dst = *--src;
    800154cc:	fe843783          	ld	a5,-24(s0)
    800154d0:	17fd                	addi	a5,a5,-1
    800154d2:	fef43423          	sd	a5,-24(s0)
    800154d6:	fe043783          	ld	a5,-32(s0)
    800154da:	17fd                	addi	a5,a5,-1
    800154dc:	fef43023          	sd	a5,-32(s0)
    800154e0:	fe843783          	ld	a5,-24(s0)
    800154e4:	0007c703          	lbu	a4,0(a5)
    800154e8:	fe043783          	ld	a5,-32(s0)
    800154ec:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    800154f0:	fcc42783          	lw	a5,-52(s0)
    800154f4:	37fd                	addiw	a5,a5,-1
    800154f6:	fcf42623          	sw	a5,-52(s0)
    800154fa:	fcc42783          	lw	a5,-52(s0)
    800154fe:	2781                	sext.w	a5,a5
    80015500:	fcf046e3          	bgtz	a5,800154cc <memmove+0x6e>
    if (src < dst && src + n > dst) {
    80015504:	a81d                	j	8001553a <memmove+0xdc>
        }
    }
    else {
        for (; n > 0; n -= 1) {
            *dst++ = *src++;
    80015506:	fe843703          	ld	a4,-24(s0)
    8001550a:	00170793          	addi	a5,a4,1
    8001550e:	fef43423          	sd	a5,-24(s0)
    80015512:	fe043783          	ld	a5,-32(s0)
    80015516:	00178693          	addi	a3,a5,1
    8001551a:	fed43023          	sd	a3,-32(s0)
    8001551e:	00074703          	lbu	a4,0(a4)
    80015522:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    80015526:	fcc42783          	lw	a5,-52(s0)
    8001552a:	37fd                	addiw	a5,a5,-1
    8001552c:	fcf42623          	sw	a5,-52(s0)
    80015530:	fcc42783          	lw	a5,-52(s0)
    80015534:	2781                	sext.w	a5,a5
    80015536:	fcf048e3          	bgtz	a5,80015506 <memmove+0xa8>
        }
    }

    return _dst;
    8001553a:	fd843783          	ld	a5,-40(s0)
}
    8001553e:	853e                	mv	a0,a5
    80015540:	7462                	ld	s0,56(sp)
    80015542:	6121                	addi	sp,sp,64
    80015544:	8082                	ret

0000000080015546 <memcmp>:

int memcmp(const void *haystack, const void *needle, int size)
{
    80015546:	715d                	addi	sp,sp,-80
    80015548:	e4a2                	sd	s0,72(sp)
    8001554a:	0880                	addi	s0,sp,80
    8001554c:	fca43423          	sd	a0,-56(s0)
    80015550:	fcb43023          	sd	a1,-64(s0)
    80015554:	87b2                	mv	a5,a2
    80015556:	faf42e23          	sw	a5,-68(s0)
    const char *hay  = (char *)haystack;
    8001555a:	fc843783          	ld	a5,-56(s0)
    8001555e:	fef43023          	sd	a5,-32(s0)
    const char *need = (char *)needle;
    80015562:	fc043783          	ld	a5,-64(s0)
    80015566:	fcf43c23          	sd	a5,-40(s0)
    int i;

    for (i = 0; i < (size - 1); i++) {
    8001556a:	fe042623          	sw	zero,-20(s0)
    8001556e:	a8a1                	j	800155c6 <memcmp+0x80>
        if (hay[i] != need[i]) {
    80015570:	fec42783          	lw	a5,-20(s0)
    80015574:	fe043703          	ld	a4,-32(s0)
    80015578:	97ba                	add	a5,a5,a4
    8001557a:	0007c683          	lbu	a3,0(a5)
    8001557e:	fec42783          	lw	a5,-20(s0)
    80015582:	fd843703          	ld	a4,-40(s0)
    80015586:	97ba                	add	a5,a5,a4
    80015588:	0007c783          	lbu	a5,0(a5)
    8001558c:	8736                	mv	a4,a3
    8001558e:	02f70763          	beq	a4,a5,800155bc <memcmp+0x76>
            return hay[i] - need[i];
    80015592:	fec42783          	lw	a5,-20(s0)
    80015596:	fe043703          	ld	a4,-32(s0)
    8001559a:	97ba                	add	a5,a5,a4
    8001559c:	0007c783          	lbu	a5,0(a5)
    800155a0:	0007871b          	sext.w	a4,a5
    800155a4:	fec42783          	lw	a5,-20(s0)
    800155a8:	fd843683          	ld	a3,-40(s0)
    800155ac:	97b6                	add	a5,a5,a3
    800155ae:	0007c783          	lbu	a5,0(a5)
    800155b2:	2781                	sext.w	a5,a5
    800155b4:	40f707bb          	subw	a5,a4,a5
    800155b8:	2781                	sext.w	a5,a5
    800155ba:	a0a1                	j	80015602 <memcmp+0xbc>
    for (i = 0; i < (size - 1); i++) {
    800155bc:	fec42783          	lw	a5,-20(s0)
    800155c0:	2785                	addiw	a5,a5,1
    800155c2:	fef42623          	sw	a5,-20(s0)
    800155c6:	fbc42783          	lw	a5,-68(s0)
    800155ca:	37fd                	addiw	a5,a5,-1
    800155cc:	0007871b          	sext.w	a4,a5
    800155d0:	fec42783          	lw	a5,-20(s0)
    800155d4:	2781                	sext.w	a5,a5
    800155d6:	f8e7cde3          	blt	a5,a4,80015570 <memcmp+0x2a>
        }
    }

    return hay[i] - need[i];
    800155da:	fec42783          	lw	a5,-20(s0)
    800155de:	fe043703          	ld	a4,-32(s0)
    800155e2:	97ba                	add	a5,a5,a4
    800155e4:	0007c783          	lbu	a5,0(a5)
    800155e8:	0007871b          	sext.w	a4,a5
    800155ec:	fec42783          	lw	a5,-20(s0)
    800155f0:	fd843683          	ld	a3,-40(s0)
    800155f4:	97b6                	add	a5,a5,a3
    800155f6:	0007c783          	lbu	a5,0(a5)
    800155fa:	2781                	sext.w	a5,a5
    800155fc:	40f707bb          	subw	a5,a4,a5
    80015600:	2781                	sext.w	a5,a5
}
    80015602:	853e                	mv	a0,a5
    80015604:	6426                	ld	s0,72(sp)
    80015606:	6161                	addi	sp,sp,80
    80015608:	8082                	ret

000000008001560a <atoi>:

int atoi(const char *st)
{
    8001560a:	7139                	addi	sp,sp,-64
    8001560c:	fc22                	sd	s0,56(sp)
    8001560e:	0080                	addi	s0,sp,64
    80015610:	fca43423          	sd	a0,-56(s0)
    int r = 0;
    80015614:	fe042623          	sw	zero,-20(s0)
    int p = 1;
    80015618:	4785                	li	a5,1
    8001561a:	fef42423          	sw	a5,-24(s0)
    int i;
    int l = 0;
    8001561e:	fe042023          	sw	zero,-32(s0)
    int n = 0;
    80015622:	fc042e23          	sw	zero,-36(s0)

    if (st[0] == '-') {
    80015626:	fc843783          	ld	a5,-56(s0)
    8001562a:	0007c783          	lbu	a5,0(a5)
    8001562e:	873e                	mv	a4,a5
    80015630:	02d00793          	li	a5,45
    80015634:	02f71063          	bne	a4,a5,80015654 <atoi+0x4a>
        st++;
    80015638:	fc843783          	ld	a5,-56(s0)
    8001563c:	0785                	addi	a5,a5,1
    8001563e:	fcf43423          	sd	a5,-56(s0)
        n = 1;
    80015642:	4785                	li	a5,1
    80015644:	fcf42e23          	sw	a5,-36(s0)
    }

    while (st[l] >= '0' && st[l] <= '9')
    80015648:	a031                	j	80015654 <atoi+0x4a>
        l++;
    8001564a:	fe042783          	lw	a5,-32(s0)
    8001564e:	2785                	addiw	a5,a5,1
    80015650:	fef42023          	sw	a5,-32(s0)
    while (st[l] >= '0' && st[l] <= '9')
    80015654:	fe042783          	lw	a5,-32(s0)
    80015658:	fc843703          	ld	a4,-56(s0)
    8001565c:	97ba                	add	a5,a5,a4
    8001565e:	0007c783          	lbu	a5,0(a5)
    80015662:	873e                	mv	a4,a5
    80015664:	02f00793          	li	a5,47
    80015668:	00e7fe63          	bgeu	a5,a4,80015684 <atoi+0x7a>
    8001566c:	fe042783          	lw	a5,-32(s0)
    80015670:	fc843703          	ld	a4,-56(s0)
    80015674:	97ba                	add	a5,a5,a4
    80015676:	0007c783          	lbu	a5,0(a5)
    8001567a:	873e                	mv	a4,a5
    8001567c:	03900793          	li	a5,57
    80015680:	fce7f5e3          	bgeu	a5,a4,8001564a <atoi+0x40>

    for (i = l - 1; i >= 0; i--) {
    80015684:	fe042783          	lw	a5,-32(s0)
    80015688:	37fd                	addiw	a5,a5,-1
    8001568a:	fef42223          	sw	a5,-28(s0)
    8001568e:	a0a9                	j	800156d8 <atoi+0xce>
        r += p * (st[i] - '0');
    80015690:	fe442783          	lw	a5,-28(s0)
    80015694:	fc843703          	ld	a4,-56(s0)
    80015698:	97ba                	add	a5,a5,a4
    8001569a:	0007c783          	lbu	a5,0(a5)
    8001569e:	2781                	sext.w	a5,a5
    800156a0:	fd07879b          	addiw	a5,a5,-48
    800156a4:	2781                	sext.w	a5,a5
    800156a6:	fe842703          	lw	a4,-24(s0)
    800156aa:	02f707bb          	mulw	a5,a4,a5
    800156ae:	2781                	sext.w	a5,a5
    800156b0:	fec42703          	lw	a4,-20(s0)
    800156b4:	9fb9                	addw	a5,a5,a4
    800156b6:	fef42623          	sw	a5,-20(s0)
        p *= 10;
    800156ba:	fe842703          	lw	a4,-24(s0)
    800156be:	87ba                	mv	a5,a4
    800156c0:	0027979b          	slliw	a5,a5,0x2
    800156c4:	9fb9                	addw	a5,a5,a4
    800156c6:	0017979b          	slliw	a5,a5,0x1
    800156ca:	fef42423          	sw	a5,-24(s0)
    for (i = l - 1; i >= 0; i--) {
    800156ce:	fe442783          	lw	a5,-28(s0)
    800156d2:	37fd                	addiw	a5,a5,-1
    800156d4:	fef42223          	sw	a5,-28(s0)
    800156d8:	fe442783          	lw	a5,-28(s0)
    800156dc:	2781                	sext.w	a5,a5
    800156de:	fa07d9e3          	bgez	a5,80015690 <atoi+0x86>
    }

    return (n ? -r : r);
    800156e2:	fdc42783          	lw	a5,-36(s0)
    800156e6:	2781                	sext.w	a5,a5
    800156e8:	c799                	beqz	a5,800156f6 <atoi+0xec>
    800156ea:	fec42783          	lw	a5,-20(s0)
    800156ee:	40f007bb          	negw	a5,a5
    800156f2:	2781                	sext.w	a5,a5
    800156f4:	a019                	j	800156fa <atoi+0xf0>
    800156f6:	fec42783          	lw	a5,-20(s0)
}
    800156fa:	853e                	mv	a0,a5
    800156fc:	7462                	ld	s0,56(sp)
    800156fe:	6121                	addi	sp,sp,64
    80015700:	8082                	ret

0000000080015702 <strcmp>:

int strcmp(const char *l, const char *r)
{
    80015702:	7139                	addi	sp,sp,-64
    80015704:	fc22                	sd	s0,56(sp)
    80015706:	0080                	addi	s0,sp,64
    80015708:	fca43423          	sd	a0,-56(s0)
    8001570c:	fcb43023          	sd	a1,-64(s0)
    const unsigned char *s1 = (const unsigned char *)l;
    80015710:	fc843783          	ld	a5,-56(s0)
    80015714:	fef43423          	sd	a5,-24(s0)
    const unsigned char *s2 = (const unsigned char *)r;
    80015718:	fc043783          	ld	a5,-64(s0)
    8001571c:	fef43023          	sd	a5,-32(s0)
    unsigned int c1, c2;

    do {
        c1 = (unsigned char)*s1++;
    80015720:	fe843783          	ld	a5,-24(s0)
    80015724:	00178713          	addi	a4,a5,1
    80015728:	fee43423          	sd	a4,-24(s0)
    8001572c:	0007c783          	lbu	a5,0(a5)
    80015730:	fcf42e23          	sw	a5,-36(s0)
        c2 = (unsigned char)*s2++;
    80015734:	fe043783          	ld	a5,-32(s0)
    80015738:	00178713          	addi	a4,a5,1
    8001573c:	fee43023          	sd	a4,-32(s0)
    80015740:	0007c783          	lbu	a5,0(a5)
    80015744:	fcf42c23          	sw	a5,-40(s0)
        if (c1 == '\0')
    80015748:	fdc42783          	lw	a5,-36(s0)
    8001574c:	2781                	sext.w	a5,a5
    8001574e:	eb91                	bnez	a5,80015762 <strcmp+0x60>
            return c1 - c2;
    80015750:	fdc42703          	lw	a4,-36(s0)
    80015754:	fd842783          	lw	a5,-40(s0)
    80015758:	40f707bb          	subw	a5,a4,a5
    8001575c:	2781                	sext.w	a5,a5
    8001575e:	2781                	sext.w	a5,a5
    80015760:	a00d                	j	80015782 <strcmp+0x80>
    } while (c1 == c2);
    80015762:	fdc42703          	lw	a4,-36(s0)
    80015766:	fd842783          	lw	a5,-40(s0)
    8001576a:	2701                	sext.w	a4,a4
    8001576c:	2781                	sext.w	a5,a5
    8001576e:	faf709e3          	beq	a4,a5,80015720 <strcmp+0x1e>

    return c1 - c2;
    80015772:	fdc42703          	lw	a4,-36(s0)
    80015776:	fd842783          	lw	a5,-40(s0)
    8001577a:	40f707bb          	subw	a5,a4,a5
    8001577e:	2781                	sext.w	a5,a5
    80015780:	2781                	sext.w	a5,a5
}
    80015782:	853e                	mv	a0,a5
    80015784:	7462                	ld	s0,56(sp)
    80015786:	6121                	addi	sp,sp,64
    80015788:	8082                	ret

000000008001578a <strncmp>:

int strncmp(const char *left, const char *right, int n)
{
    8001578a:	7139                	addi	sp,sp,-64
    8001578c:	fc22                	sd	s0,56(sp)
    8001578e:	0080                	addi	s0,sp,64
    80015790:	fca43c23          	sd	a0,-40(s0)
    80015794:	fcb43823          	sd	a1,-48(s0)
    80015798:	87b2                	mv	a5,a2
    8001579a:	fcf42623          	sw	a5,-52(s0)
    unsigned int c1 = '\0';
    8001579e:	fe042623          	sw	zero,-20(s0)
    unsigned int c2 = '\0';
    800157a2:	fe042423          	sw	zero,-24(s0)

    if (n >= 4) {
    800157a6:	fcc42783          	lw	a5,-52(s0)
    800157aa:	0007871b          	sext.w	a4,a5
    800157ae:	478d                	li	a5,3
    800157b0:	1ce7da63          	bge	a5,a4,80015984 <strncmp+0x1fa>
        int n4 = n >> 2;
    800157b4:	fcc42783          	lw	a5,-52(s0)
    800157b8:	4027d79b          	sraiw	a5,a5,0x2
    800157bc:	fef42223          	sw	a5,-28(s0)
        do {
            c1 = (unsigned char)*left++;
    800157c0:	fd843783          	ld	a5,-40(s0)
    800157c4:	00178713          	addi	a4,a5,1
    800157c8:	fce43c23          	sd	a4,-40(s0)
    800157cc:	0007c783          	lbu	a5,0(a5)
    800157d0:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    800157d4:	fd043783          	ld	a5,-48(s0)
    800157d8:	00178713          	addi	a4,a5,1
    800157dc:	fce43823          	sd	a4,-48(s0)
    800157e0:	0007c783          	lbu	a5,0(a5)
    800157e4:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    800157e8:	fec42783          	lw	a5,-20(s0)
    800157ec:	2781                	sext.w	a5,a5
    800157ee:	cb89                	beqz	a5,80015800 <strncmp+0x76>
    800157f0:	fec42703          	lw	a4,-20(s0)
    800157f4:	fe842783          	lw	a5,-24(s0)
    800157f8:	2701                	sext.w	a4,a4
    800157fa:	2781                	sext.w	a5,a5
    800157fc:	00f70b63          	beq	a4,a5,80015812 <strncmp+0x88>
                return c1 - c2;
    80015800:	fec42703          	lw	a4,-20(s0)
    80015804:	fe842783          	lw	a5,-24(s0)
    80015808:	40f707bb          	subw	a5,a4,a5
    8001580c:	2781                	sext.w	a5,a5
    8001580e:	2781                	sext.w	a5,a5
    80015810:	a279                	j	8001599e <strncmp+0x214>
            }

            c1 = (unsigned char)*left++;
    80015812:	fd843783          	ld	a5,-40(s0)
    80015816:	00178713          	addi	a4,a5,1
    8001581a:	fce43c23          	sd	a4,-40(s0)
    8001581e:	0007c783          	lbu	a5,0(a5)
    80015822:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80015826:	fd043783          	ld	a5,-48(s0)
    8001582a:	00178713          	addi	a4,a5,1
    8001582e:	fce43823          	sd	a4,-48(s0)
    80015832:	0007c783          	lbu	a5,0(a5)
    80015836:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    8001583a:	fec42783          	lw	a5,-20(s0)
    8001583e:	2781                	sext.w	a5,a5
    80015840:	cb89                	beqz	a5,80015852 <strncmp+0xc8>
    80015842:	fec42703          	lw	a4,-20(s0)
    80015846:	fe842783          	lw	a5,-24(s0)
    8001584a:	2701                	sext.w	a4,a4
    8001584c:	2781                	sext.w	a5,a5
    8001584e:	00f70b63          	beq	a4,a5,80015864 <strncmp+0xda>
                return c1 - c2;
    80015852:	fec42703          	lw	a4,-20(s0)
    80015856:	fe842783          	lw	a5,-24(s0)
    8001585a:	40f707bb          	subw	a5,a4,a5
    8001585e:	2781                	sext.w	a5,a5
    80015860:	2781                	sext.w	a5,a5
    80015862:	aa35                	j	8001599e <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    80015864:	fd843783          	ld	a5,-40(s0)
    80015868:	00178713          	addi	a4,a5,1
    8001586c:	fce43c23          	sd	a4,-40(s0)
    80015870:	0007c783          	lbu	a5,0(a5)
    80015874:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80015878:	fd043783          	ld	a5,-48(s0)
    8001587c:	00178713          	addi	a4,a5,1
    80015880:	fce43823          	sd	a4,-48(s0)
    80015884:	0007c783          	lbu	a5,0(a5)
    80015888:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    8001588c:	fec42783          	lw	a5,-20(s0)
    80015890:	2781                	sext.w	a5,a5
    80015892:	cb89                	beqz	a5,800158a4 <strncmp+0x11a>
    80015894:	fec42703          	lw	a4,-20(s0)
    80015898:	fe842783          	lw	a5,-24(s0)
    8001589c:	2701                	sext.w	a4,a4
    8001589e:	2781                	sext.w	a5,a5
    800158a0:	00f70b63          	beq	a4,a5,800158b6 <strncmp+0x12c>
                return c1 - c2;
    800158a4:	fec42703          	lw	a4,-20(s0)
    800158a8:	fe842783          	lw	a5,-24(s0)
    800158ac:	40f707bb          	subw	a5,a4,a5
    800158b0:	2781                	sext.w	a5,a5
    800158b2:	2781                	sext.w	a5,a5
    800158b4:	a0ed                	j	8001599e <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    800158b6:	fd843783          	ld	a5,-40(s0)
    800158ba:	00178713          	addi	a4,a5,1
    800158be:	fce43c23          	sd	a4,-40(s0)
    800158c2:	0007c783          	lbu	a5,0(a5)
    800158c6:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    800158ca:	fd043783          	ld	a5,-48(s0)
    800158ce:	00178713          	addi	a4,a5,1
    800158d2:	fce43823          	sd	a4,-48(s0)
    800158d6:	0007c783          	lbu	a5,0(a5)
    800158da:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    800158de:	fec42783          	lw	a5,-20(s0)
    800158e2:	2781                	sext.w	a5,a5
    800158e4:	cb89                	beqz	a5,800158f6 <strncmp+0x16c>
    800158e6:	fec42703          	lw	a4,-20(s0)
    800158ea:	fe842783          	lw	a5,-24(s0)
    800158ee:	2701                	sext.w	a4,a4
    800158f0:	2781                	sext.w	a5,a5
    800158f2:	00f70b63          	beq	a4,a5,80015908 <strncmp+0x17e>
                return c1 - c2;
    800158f6:	fec42703          	lw	a4,-20(s0)
    800158fa:	fe842783          	lw	a5,-24(s0)
    800158fe:	40f707bb          	subw	a5,a4,a5
    80015902:	2781                	sext.w	a5,a5
    80015904:	2781                	sext.w	a5,a5
    80015906:	a861                	j	8001599e <strncmp+0x214>
            }
        } while (--n4 > 0);
    80015908:	fe442783          	lw	a5,-28(s0)
    8001590c:	37fd                	addiw	a5,a5,-1
    8001590e:	fef42223          	sw	a5,-28(s0)
    80015912:	fe442783          	lw	a5,-28(s0)
    80015916:	2781                	sext.w	a5,a5
    80015918:	eaf044e3          	bgtz	a5,800157c0 <strncmp+0x36>
        n &= 3;
    8001591c:	fcc42783          	lw	a5,-52(s0)
    80015920:	8b8d                	andi	a5,a5,3
    80015922:	fcf42623          	sw	a5,-52(s0)
    }

    while (n > 0) {
    80015926:	a8b9                	j	80015984 <strncmp+0x1fa>
        c1 = (unsigned char)*left++;
    80015928:	fd843783          	ld	a5,-40(s0)
    8001592c:	00178713          	addi	a4,a5,1
    80015930:	fce43c23          	sd	a4,-40(s0)
    80015934:	0007c783          	lbu	a5,0(a5)
    80015938:	fef42623          	sw	a5,-20(s0)
        c2 = (unsigned char)*right++;
    8001593c:	fd043783          	ld	a5,-48(s0)
    80015940:	00178713          	addi	a4,a5,1
    80015944:	fce43823          	sd	a4,-48(s0)
    80015948:	0007c783          	lbu	a5,0(a5)
    8001594c:	fef42423          	sw	a5,-24(s0)
        if (c1 == '\0' || c1 != c2)
    80015950:	fec42783          	lw	a5,-20(s0)
    80015954:	2781                	sext.w	a5,a5
    80015956:	cb89                	beqz	a5,80015968 <strncmp+0x1de>
    80015958:	fec42703          	lw	a4,-20(s0)
    8001595c:	fe842783          	lw	a5,-24(s0)
    80015960:	2701                	sext.w	a4,a4
    80015962:	2781                	sext.w	a5,a5
    80015964:	00f70b63          	beq	a4,a5,8001597a <strncmp+0x1f0>
            return c1 - c2;
    80015968:	fec42703          	lw	a4,-20(s0)
    8001596c:	fe842783          	lw	a5,-24(s0)
    80015970:	40f707bb          	subw	a5,a4,a5
    80015974:	2781                	sext.w	a5,a5
    80015976:	2781                	sext.w	a5,a5
    80015978:	a01d                	j	8001599e <strncmp+0x214>
        n--;
    8001597a:	fcc42783          	lw	a5,-52(s0)
    8001597e:	37fd                	addiw	a5,a5,-1
    80015980:	fcf42623          	sw	a5,-52(s0)
    while (n > 0) {
    80015984:	fcc42783          	lw	a5,-52(s0)
    80015988:	2781                	sext.w	a5,a5
    8001598a:	f8f04fe3          	bgtz	a5,80015928 <strncmp+0x19e>
    }

    return c1 - c2;
    8001598e:	fec42703          	lw	a4,-20(s0)
    80015992:	fe842783          	lw	a5,-24(s0)
    80015996:	40f707bb          	subw	a5,a4,a5
    8001599a:	2781                	sext.w	a5,a5
    8001599c:	2781                	sext.w	a5,a5
}
    8001599e:	853e                	mv	a0,a5
    800159a0:	7462                	ld	s0,56(sp)
    800159a2:	6121                	addi	sp,sp,64
    800159a4:	8082                	ret

00000000800159a6 <strfindchr>:

int strfindchr(const char *r, char t)
{
    800159a6:	7179                	addi	sp,sp,-48
    800159a8:	f422                	sd	s0,40(sp)
    800159aa:	1800                	addi	s0,sp,48
    800159ac:	fca43c23          	sd	a0,-40(s0)
    800159b0:	87ae                	mv	a5,a1
    800159b2:	fcf40ba3          	sb	a5,-41(s0)
    int i = 0;
    800159b6:	fe042623          	sw	zero,-20(s0)
    while (r[i] != t) {
    800159ba:	a005                	j	800159da <strfindchr+0x34>
        if (r[i] == '\0') {
    800159bc:	fec42783          	lw	a5,-20(s0)
    800159c0:	fd843703          	ld	a4,-40(s0)
    800159c4:	97ba                	add	a5,a5,a4
    800159c6:	0007c783          	lbu	a5,0(a5)
    800159ca:	e399                	bnez	a5,800159d0 <strfindchr+0x2a>
            return -1;
    800159cc:	57fd                	li	a5,-1
    800159ce:	a02d                	j	800159f8 <strfindchr+0x52>
        }
        i++;
    800159d0:	fec42783          	lw	a5,-20(s0)
    800159d4:	2785                	addiw	a5,a5,1
    800159d6:	fef42623          	sw	a5,-20(s0)
    while (r[i] != t) {
    800159da:	fec42783          	lw	a5,-20(s0)
    800159de:	fd843703          	ld	a4,-40(s0)
    800159e2:	97ba                	add	a5,a5,a4
    800159e4:	0007c703          	lbu	a4,0(a5)
    800159e8:	fd744783          	lbu	a5,-41(s0)
    800159ec:	0ff7f793          	andi	a5,a5,255
    800159f0:	fce796e3          	bne	a5,a4,800159bc <strfindchr+0x16>
    }
    return i;
    800159f4:	fec42783          	lw	a5,-20(s0)
}
    800159f8:	853e                	mv	a0,a5
    800159fa:	7422                	ld	s0,40(sp)
    800159fc:	6145                	addi	sp,sp,48
    800159fe:	8082                	ret

0000000080015a00 <strlen>:

int strlen(const char *s)
{
    80015a00:	7179                	addi	sp,sp,-48
    80015a02:	f422                	sd	s0,40(sp)
    80015a04:	1800                	addi	s0,sp,48
    80015a06:	fca43c23          	sd	a0,-40(s0)
    int len = 0;
    80015a0a:	fe042623          	sw	zero,-20(s0)
    while (s[len] && ++len)
    80015a0e:	0001                	nop
    80015a10:	fec42783          	lw	a5,-20(s0)
    80015a14:	fd843703          	ld	a4,-40(s0)
    80015a18:	97ba                	add	a5,a5,a4
    80015a1a:	0007c783          	lbu	a5,0(a5)
    80015a1e:	cb91                	beqz	a5,80015a32 <strlen+0x32>
    80015a20:	fec42783          	lw	a5,-20(s0)
    80015a24:	2785                	addiw	a5,a5,1
    80015a26:	fef42623          	sw	a5,-20(s0)
    80015a2a:	fec42783          	lw	a5,-20(s0)
    80015a2e:	2781                	sext.w	a5,a5
    80015a30:	f3e5                	bnez	a5,80015a10 <strlen+0x10>
        ;
    return len;
    80015a32:	fec42783          	lw	a5,-20(s0)
}
    80015a36:	853e                	mv	a0,a5
    80015a38:	7422                	ld	s0,40(sp)
    80015a3a:	6145                	addi	sp,sp,48
    80015a3c:	8082                	ret

0000000080015a3e <strcpy>:

char *strcpy(char *dest, const char *s)
{
    80015a3e:	7179                	addi	sp,sp,-48
    80015a40:	f422                	sd	s0,40(sp)
    80015a42:	1800                	addi	s0,sp,48
    80015a44:	fca43c23          	sd	a0,-40(s0)
    80015a48:	fcb43823          	sd	a1,-48(s0)
    char *o = dest;
    80015a4c:	fd843783          	ld	a5,-40(s0)
    80015a50:	fef43423          	sd	a5,-24(s0)
    while (*s) {
    80015a54:	a00d                	j	80015a76 <strcpy+0x38>
        *dest++ = *s++;
    80015a56:	fd043703          	ld	a4,-48(s0)
    80015a5a:	00170793          	addi	a5,a4,1
    80015a5e:	fcf43823          	sd	a5,-48(s0)
    80015a62:	fd843783          	ld	a5,-40(s0)
    80015a66:	00178693          	addi	a3,a5,1
    80015a6a:	fcd43c23          	sd	a3,-40(s0)
    80015a6e:	00074703          	lbu	a4,0(a4)
    80015a72:	00e78023          	sb	a4,0(a5)
    while (*s) {
    80015a76:	fd043783          	ld	a5,-48(s0)
    80015a7a:	0007c783          	lbu	a5,0(a5)
    80015a7e:	ffe1                	bnez	a5,80015a56 <strcpy+0x18>
    }
    *dest = '\0';
    80015a80:	fd843783          	ld	a5,-40(s0)
    80015a84:	00078023          	sb	zero,0(a5)
    return o;
    80015a88:	fe843783          	ld	a5,-24(s0)
}
    80015a8c:	853e                	mv	a0,a5
    80015a8e:	7422                	ld	s0,40(sp)
    80015a90:	6145                	addi	sp,sp,48
    80015a92:	8082                	ret

0000000080015a94 <strncpy>:

char *strncpy(char *dest, const char *s, int n)
{
    80015a94:	7139                	addi	sp,sp,-64
    80015a96:	fc22                	sd	s0,56(sp)
    80015a98:	0080                	addi	s0,sp,64
    80015a9a:	fca43c23          	sd	a0,-40(s0)
    80015a9e:	fcb43823          	sd	a1,-48(s0)
    80015aa2:	87b2                	mv	a5,a2
    80015aa4:	fcf42623          	sw	a5,-52(s0)
    char *o = dest;
    80015aa8:	fd843783          	ld	a5,-40(s0)
    80015aac:	fef43423          	sd	a5,-24(s0)
    while (*s && n-- > 0) {
    80015ab0:	a00d                	j	80015ad2 <strncpy+0x3e>
        *dest++ = *s++;
    80015ab2:	fd043703          	ld	a4,-48(s0)
    80015ab6:	00170793          	addi	a5,a4,1
    80015aba:	fcf43823          	sd	a5,-48(s0)
    80015abe:	fd843783          	ld	a5,-40(s0)
    80015ac2:	00178693          	addi	a3,a5,1
    80015ac6:	fcd43c23          	sd	a3,-40(s0)
    80015aca:	00074703          	lbu	a4,0(a4)
    80015ace:	00e78023          	sb	a4,0(a5)
    while (*s && n-- > 0) {
    80015ad2:	fd043783          	ld	a5,-48(s0)
    80015ad6:	0007c783          	lbu	a5,0(a5)
    80015ada:	cb89                	beqz	a5,80015aec <strncpy+0x58>
    80015adc:	fcc42783          	lw	a5,-52(s0)
    80015ae0:	fff7871b          	addiw	a4,a5,-1
    80015ae4:	fce42623          	sw	a4,-52(s0)
    80015ae8:	fcf045e3          	bgtz	a5,80015ab2 <strncpy+0x1e>
    }
    *dest = '\0';
    80015aec:	fd843783          	ld	a5,-40(s0)
    80015af0:	00078023          	sb	zero,0(a5)
    return o;
    80015af4:	fe843783          	ld	a5,-24(s0)
}
    80015af8:	853e                	mv	a0,a5
    80015afa:	7462                	ld	s0,56(sp)
    80015afc:	6121                	addi	sp,sp,64
    80015afe:	8082                	ret

0000000080015b00 <strdup>:


char *strdup(const char *src)
{
    80015b00:	7179                	addi	sp,sp,-48
    80015b02:	f406                	sd	ra,40(sp)
    80015b04:	f022                	sd	s0,32(sp)
    80015b06:	1800                	addi	s0,sp,48
    80015b08:	fca43c23          	sd	a0,-40(s0)
    int len   = strlen(src);
    80015b0c:	fd843503          	ld	a0,-40(s0)
    80015b10:	ef1ff0ef          	jal	ra,80015a00 <strlen>
    80015b14:	87aa                	mv	a5,a0
    80015b16:	fef42623          	sw	a5,-20(s0)
    char *ret = (char *)g_kmalloc(len + 1);
    80015b1a:	fec42783          	lw	a5,-20(s0)
    80015b1e:	2785                	addiw	a5,a5,1
    80015b20:	2781                	sext.w	a5,a5
    80015b22:	853e                	mv	a0,a5
    80015b24:	47f000ef          	jal	ra,800167a2 <g_kmalloc>
    80015b28:	fea43023          	sd	a0,-32(s0)
    if (!ret) {
    80015b2c:	fe043783          	ld	a5,-32(s0)
    80015b30:	e399                	bnez	a5,80015b36 <strdup+0x36>
        return NULL;
    80015b32:	4781                	li	a5,0
    80015b34:	a801                	j	80015b44 <strdup+0x44>
    }
    return strcpy(ret, src);
    80015b36:	fd843583          	ld	a1,-40(s0)
    80015b3a:	fe043503          	ld	a0,-32(s0)
    80015b3e:	f01ff0ef          	jal	ra,80015a3e <strcpy>
    80015b42:	87aa                	mv	a5,a0
}
    80015b44:	853e                	mv	a0,a5
    80015b46:	70a2                	ld	ra,40(sp)
    80015b48:	7402                	ld	s0,32(sp)
    80015b4a:	6145                	addi	sp,sp,48
    80015b4c:	8082                	ret

0000000080015b4e <strstartswith>:

bool strstartswith(const char *src, const char *start)
{
    80015b4e:	7179                	addi	sp,sp,-48
    80015b50:	f406                	sd	ra,40(sp)
    80015b52:	f022                	sd	s0,32(sp)
    80015b54:	1800                	addi	s0,sp,48
    80015b56:	fca43c23          	sd	a0,-40(s0)
    80015b5a:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80015b5e:	fd843503          	ld	a0,-40(s0)
    80015b62:	e9fff0ef          	jal	ra,80015a00 <strlen>
    80015b66:	87aa                	mv	a5,a0
    80015b68:	fef42423          	sw	a5,-24(s0)
    int start_len = strlen(start);
    80015b6c:	fd043503          	ld	a0,-48(s0)
    80015b70:	e91ff0ef          	jal	ra,80015a00 <strlen>
    80015b74:	87aa                	mv	a5,a0
    80015b76:	fef42223          	sw	a5,-28(s0)
    int i;
    
    if (src_len < start_len) {
    80015b7a:	fe842703          	lw	a4,-24(s0)
    80015b7e:	fe442783          	lw	a5,-28(s0)
    80015b82:	2701                	sext.w	a4,a4
    80015b84:	2781                	sext.w	a5,a5
    80015b86:	00f75463          	bge	a4,a5,80015b8e <strstartswith+0x40>
        return false;
    80015b8a:	4781                	li	a5,0
    80015b8c:	a0a9                	j	80015bd6 <strstartswith+0x88>
    }

    for (i = 0;i < start_len;i++) {
    80015b8e:	fe042623          	sw	zero,-20(s0)
    80015b92:	a80d                	j	80015bc4 <strstartswith+0x76>
        if (src[i] != start[i]) {
    80015b94:	fec42783          	lw	a5,-20(s0)
    80015b98:	fd843703          	ld	a4,-40(s0)
    80015b9c:	97ba                	add	a5,a5,a4
    80015b9e:	0007c683          	lbu	a3,0(a5)
    80015ba2:	fec42783          	lw	a5,-20(s0)
    80015ba6:	fd043703          	ld	a4,-48(s0)
    80015baa:	97ba                	add	a5,a5,a4
    80015bac:	0007c783          	lbu	a5,0(a5)
    80015bb0:	8736                	mv	a4,a3
    80015bb2:	00f70463          	beq	a4,a5,80015bba <strstartswith+0x6c>
            return false;
    80015bb6:	4781                	li	a5,0
    80015bb8:	a839                	j	80015bd6 <strstartswith+0x88>
    for (i = 0;i < start_len;i++) {
    80015bba:	fec42783          	lw	a5,-20(s0)
    80015bbe:	2785                	addiw	a5,a5,1
    80015bc0:	fef42623          	sw	a5,-20(s0)
    80015bc4:	fec42703          	lw	a4,-20(s0)
    80015bc8:	fe442783          	lw	a5,-28(s0)
    80015bcc:	2701                	sext.w	a4,a4
    80015bce:	2781                	sext.w	a5,a5
    80015bd0:	fcf742e3          	blt	a4,a5,80015b94 <strstartswith+0x46>
        }
    }

    return true;
    80015bd4:	4785                	li	a5,1
}
    80015bd6:	853e                	mv	a0,a5
    80015bd8:	70a2                	ld	ra,40(sp)
    80015bda:	7402                	ld	s0,32(sp)
    80015bdc:	6145                	addi	sp,sp,48
    80015bde:	8082                	ret

0000000080015be0 <strendswith>:

bool strendswith(const char *src, const char *end)
{
    80015be0:	7179                	addi	sp,sp,-48
    80015be2:	f406                	sd	ra,40(sp)
    80015be4:	f022                	sd	s0,32(sp)
    80015be6:	1800                	addi	s0,sp,48
    80015be8:	fca43c23          	sd	a0,-40(s0)
    80015bec:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80015bf0:	fd843503          	ld	a0,-40(s0)
    80015bf4:	e0dff0ef          	jal	ra,80015a00 <strlen>
    80015bf8:	87aa                	mv	a5,a0
    80015bfa:	fef42423          	sw	a5,-24(s0)
    int end_len = strlen(end);
    80015bfe:	fd043503          	ld	a0,-48(s0)
    80015c02:	dffff0ef          	jal	ra,80015a00 <strlen>
    80015c06:	87aa                	mv	a5,a0
    80015c08:	fef42223          	sw	a5,-28(s0)
    int cmp = src_len - end_len;
    80015c0c:	fe842703          	lw	a4,-24(s0)
    80015c10:	fe442783          	lw	a5,-28(s0)
    80015c14:	40f707bb          	subw	a5,a4,a5
    80015c18:	fef42023          	sw	a5,-32(s0)
    int i;
    
    if (src_len < end_len) {
    80015c1c:	fe842703          	lw	a4,-24(s0)
    80015c20:	fe442783          	lw	a5,-28(s0)
    80015c24:	2701                	sext.w	a4,a4
    80015c26:	2781                	sext.w	a5,a5
    80015c28:	00f75463          	bge	a4,a5,80015c30 <strendswith+0x50>
        return false;
    80015c2c:	4781                	li	a5,0
    80015c2e:	a891                	j	80015c82 <strendswith+0xa2>
    }

    for (i = 0;i < end_len;i++) {
    80015c30:	fe042623          	sw	zero,-20(s0)
    80015c34:	a835                	j	80015c70 <strendswith+0x90>
        if (src[i + cmp] != end[i]) {
    80015c36:	fec42703          	lw	a4,-20(s0)
    80015c3a:	fe042783          	lw	a5,-32(s0)
    80015c3e:	9fb9                	addw	a5,a5,a4
    80015c40:	2781                	sext.w	a5,a5
    80015c42:	873e                	mv	a4,a5
    80015c44:	fd843783          	ld	a5,-40(s0)
    80015c48:	97ba                	add	a5,a5,a4
    80015c4a:	0007c683          	lbu	a3,0(a5)
    80015c4e:	fec42783          	lw	a5,-20(s0)
    80015c52:	fd043703          	ld	a4,-48(s0)
    80015c56:	97ba                	add	a5,a5,a4
    80015c58:	0007c783          	lbu	a5,0(a5)
    80015c5c:	8736                	mv	a4,a3
    80015c5e:	00f70463          	beq	a4,a5,80015c66 <strendswith+0x86>
            return false;
    80015c62:	4781                	li	a5,0
    80015c64:	a839                	j	80015c82 <strendswith+0xa2>
    for (i = 0;i < end_len;i++) {
    80015c66:	fec42783          	lw	a5,-20(s0)
    80015c6a:	2785                	addiw	a5,a5,1
    80015c6c:	fef42623          	sw	a5,-20(s0)
    80015c70:	fec42703          	lw	a4,-20(s0)
    80015c74:	fe442783          	lw	a5,-28(s0)
    80015c78:	2701                	sext.w	a4,a4
    80015c7a:	2781                	sext.w	a5,a5
    80015c7c:	faf74de3          	blt	a4,a5,80015c36 <strendswith+0x56>
        }
    }

    return true;    
    80015c80:	4785                	li	a5,1
}
    80015c82:	853e                	mv	a0,a5
    80015c84:	70a2                	ld	ra,40(sp)
    80015c86:	7402                	ld	s0,32(sp)
    80015c88:	6145                	addi	sp,sp,48
    80015c8a:	8082                	ret

0000000080015c8c <vector_init>:
    uint32_t size;
    uint32_t capacity;
    uint64_t *values;
} Vector;

static Vector *vector_init(Vector *vec) {
    80015c8c:	1101                	addi	sp,sp,-32
    80015c8e:	ec22                	sd	s0,24(sp)
    80015c90:	1000                	addi	s0,sp,32
    80015c92:	fea43423          	sd	a0,-24(s0)
    if (vec == NULL) {
    80015c96:	fe843783          	ld	a5,-24(s0)
    80015c9a:	e399                	bnez	a5,80015ca0 <vector_init+0x14>
        return NULL;
    80015c9c:	4781                	li	a5,0
    80015c9e:	a839                	j	80015cbc <vector_init+0x30>
    }
    vec->size = 0;
    80015ca0:	fe843783          	ld	a5,-24(s0)
    80015ca4:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    80015ca8:	fe843783          	ld	a5,-24(s0)
    80015cac:	0007a223          	sw	zero,4(a5)
    vec->values = NULL;
    80015cb0:	fe843783          	ld	a5,-24(s0)
    80015cb4:	0007b423          	sd	zero,8(a5)
    return vec;
    80015cb8:	fe843783          	ld	a5,-24(s0)
}
    80015cbc:	853e                	mv	a0,a5
    80015cbe:	6462                	ld	s0,24(sp)
    80015cc0:	6105                	addi	sp,sp,32
    80015cc2:	8082                	ret

0000000080015cc4 <vector_new>:

Vector *vector_new(void) {
    80015cc4:	1141                	addi	sp,sp,-16
    80015cc6:	e406                	sd	ra,8(sp)
    80015cc8:	e022                	sd	s0,0(sp)
    80015cca:	0800                	addi	s0,sp,16
    return vector_init((Vector *)g_kmalloc(sizeof(Vector)));
    80015ccc:	4541                	li	a0,16
    80015cce:	2d5000ef          	jal	ra,800167a2 <g_kmalloc>
    80015cd2:	87aa                	mv	a5,a0
    80015cd4:	853e                	mv	a0,a5
    80015cd6:	fb7ff0ef          	jal	ra,80015c8c <vector_init>
    80015cda:	87aa                	mv	a5,a0
}
    80015cdc:	853e                	mv	a0,a5
    80015cde:	60a2                	ld	ra,8(sp)
    80015ce0:	6402                	ld	s0,0(sp)
    80015ce2:	0141                	addi	sp,sp,16
    80015ce4:	8082                	ret

0000000080015ce6 <vector_init_with_capacity>:

static Vector *vector_init_with_capacity(Vector *vec, uint32_t capacity) {
    80015ce6:	1101                	addi	sp,sp,-32
    80015ce8:	ec06                	sd	ra,24(sp)
    80015cea:	e822                	sd	s0,16(sp)
    80015cec:	1000                	addi	s0,sp,32
    80015cee:	fea43423          	sd	a0,-24(s0)
    80015cf2:	87ae                	mv	a5,a1
    80015cf4:	fef42223          	sw	a5,-28(s0)
    if (vec == NULL) {
    80015cf8:	fe843783          	ld	a5,-24(s0)
    80015cfc:	e399                	bnez	a5,80015d02 <vector_init_with_capacity+0x1c>
        return NULL;
    80015cfe:	4781                	li	a5,0
    80015d00:	a035                	j	80015d2c <vector_init_with_capacity+0x46>
    }
    vec->size = 0;
    80015d02:	fe843783          	ld	a5,-24(s0)
    80015d06:	0007a023          	sw	zero,0(a5)
    vec->capacity = capacity;
    80015d0a:	fe843783          	ld	a5,-24(s0)
    80015d0e:	fe442703          	lw	a4,-28(s0)
    80015d12:	c3d8                	sw	a4,4(a5)
    vec->values = (uint64_t *)g_kcalloc(capacity, sizeof(uint64_t));
    80015d14:	fe446783          	lwu	a5,-28(s0)
    80015d18:	45a1                	li	a1,8
    80015d1a:	853e                	mv	a0,a5
    80015d1c:	2bf000ef          	jal	ra,800167da <g_kcalloc>
    80015d20:	872a                	mv	a4,a0
    80015d22:	fe843783          	ld	a5,-24(s0)
    80015d26:	e798                	sd	a4,8(a5)
    return vec;
    80015d28:	fe843783          	ld	a5,-24(s0)
}
    80015d2c:	853e                	mv	a0,a5
    80015d2e:	60e2                	ld	ra,24(sp)
    80015d30:	6442                	ld	s0,16(sp)
    80015d32:	6105                	addi	sp,sp,32
    80015d34:	8082                	ret

0000000080015d36 <vector_new_with_capacity>:

Vector *vector_new_with_capacity(uint32_t capacity) {
    80015d36:	1101                	addi	sp,sp,-32
    80015d38:	ec06                	sd	ra,24(sp)
    80015d3a:	e822                	sd	s0,16(sp)
    80015d3c:	1000                	addi	s0,sp,32
    80015d3e:	87aa                	mv	a5,a0
    80015d40:	fef42623          	sw	a5,-20(s0)
    return vector_init_with_capacity((Vector *)g_kmalloc(sizeof(Vector)), capacity);
    80015d44:	4541                	li	a0,16
    80015d46:	25d000ef          	jal	ra,800167a2 <g_kmalloc>
    80015d4a:	872a                	mv	a4,a0
    80015d4c:	fec42783          	lw	a5,-20(s0)
    80015d50:	85be                	mv	a1,a5
    80015d52:	853a                	mv	a0,a4
    80015d54:	f93ff0ef          	jal	ra,80015ce6 <vector_init_with_capacity>
    80015d58:	87aa                	mv	a5,a0
}
    80015d5a:	853e                	mv	a0,a5
    80015d5c:	60e2                	ld	ra,24(sp)
    80015d5e:	6442                	ld	s0,16(sp)
    80015d60:	6105                	addi	sp,sp,32
    80015d62:	8082                	ret

0000000080015d64 <vector_push>:

void vector_push(Vector *vec, uint64_t value) {
    80015d64:	1101                	addi	sp,sp,-32
    80015d66:	ec06                	sd	ra,24(sp)
    80015d68:	e822                	sd	s0,16(sp)
    80015d6a:	1000                	addi	s0,sp,32
    80015d6c:	fea43423          	sd	a0,-24(s0)
    80015d70:	feb43023          	sd	a1,-32(s0)
    vector_insert(vec, vec->size, value);
    80015d74:	fe843783          	ld	a5,-24(s0)
    80015d78:	439c                	lw	a5,0(a5)
    80015d7a:	fe043603          	ld	a2,-32(s0)
    80015d7e:	85be                	mv	a1,a5
    80015d80:	fe843503          	ld	a0,-24(s0)
    80015d84:	00e000ef          	jal	ra,80015d92 <vector_insert>
}
    80015d88:	0001                	nop
    80015d8a:	60e2                	ld	ra,24(sp)
    80015d8c:	6442                	ld	s0,16(sp)
    80015d8e:	6105                	addi	sp,sp,32
    80015d90:	8082                	ret

0000000080015d92 <vector_insert>:

void vector_insert(Vector *vec, uint32_t idx, uint64_t value) {
    80015d92:	7139                	addi	sp,sp,-64
    80015d94:	fc06                	sd	ra,56(sp)
    80015d96:	f822                	sd	s0,48(sp)
    80015d98:	0080                	addi	s0,sp,64
    80015d9a:	fca43c23          	sd	a0,-40(s0)
    80015d9e:	87ae                	mv	a5,a1
    80015da0:	fcc43423          	sd	a2,-56(s0)
    80015da4:	fcf42a23          	sw	a5,-44(s0)
    uint32_t i;
    vector_resize(vec, vec->size + 1);
    80015da8:	fd843783          	ld	a5,-40(s0)
    80015dac:	439c                	lw	a5,0(a5)
    80015dae:	2785                	addiw	a5,a5,1
    80015db0:	2781                	sext.w	a5,a5
    80015db2:	85be                	mv	a1,a5
    80015db4:	fd843503          	ld	a0,-40(s0)
    80015db8:	214000ef          	jal	ra,80015fcc <vector_resize>
    for (i = vec->size - 1;i > idx;i--) {
    80015dbc:	fd843783          	ld	a5,-40(s0)
    80015dc0:	439c                	lw	a5,0(a5)
    80015dc2:	37fd                	addiw	a5,a5,-1
    80015dc4:	fef42623          	sw	a5,-20(s0)
    80015dc8:	a805                	j	80015df8 <vector_insert+0x66>
        vector_set(vec, i, vector_get_unchecked(vec, i - 1));
    80015dca:	fec42783          	lw	a5,-20(s0)
    80015dce:	37fd                	addiw	a5,a5,-1
    80015dd0:	2781                	sext.w	a5,a5
    80015dd2:	85be                	mv	a1,a5
    80015dd4:	fd843503          	ld	a0,-40(s0)
    80015dd8:	13a000ef          	jal	ra,80015f12 <vector_get_unchecked>
    80015ddc:	872a                	mv	a4,a0
    80015dde:	fec42783          	lw	a5,-20(s0)
    80015de2:	863a                	mv	a2,a4
    80015de4:	85be                	mv	a1,a5
    80015de6:	fd843503          	ld	a0,-40(s0)
    80015dea:	094000ef          	jal	ra,80015e7e <vector_set>
    for (i = vec->size - 1;i > idx;i--) {
    80015dee:	fec42783          	lw	a5,-20(s0)
    80015df2:	37fd                	addiw	a5,a5,-1
    80015df4:	fef42623          	sw	a5,-20(s0)
    80015df8:	fec42703          	lw	a4,-20(s0)
    80015dfc:	fd442783          	lw	a5,-44(s0)
    80015e00:	2701                	sext.w	a4,a4
    80015e02:	2781                	sext.w	a5,a5
    80015e04:	fce7e3e3          	bltu	a5,a4,80015dca <vector_insert+0x38>
    }
    vector_set(vec, idx, value);
    80015e08:	fd442783          	lw	a5,-44(s0)
    80015e0c:	fc843603          	ld	a2,-56(s0)
    80015e10:	85be                	mv	a1,a5
    80015e12:	fd843503          	ld	a0,-40(s0)
    80015e16:	068000ef          	jal	ra,80015e7e <vector_set>
}
    80015e1a:	0001                	nop
    80015e1c:	70e2                	ld	ra,56(sp)
    80015e1e:	7442                	ld	s0,48(sp)
    80015e20:	6121                	addi	sp,sp,64
    80015e22:	8082                	ret

0000000080015e24 <vector_find>:

int vector_find(Vector *vec, uint64_t val) {
    80015e24:	7179                	addi	sp,sp,-48
    80015e26:	f422                	sd	s0,40(sp)
    80015e28:	1800                	addi	s0,sp,48
    80015e2a:	fca43c23          	sd	a0,-40(s0)
    80015e2e:	fcb43823          	sd	a1,-48(s0)
    int i;
    for (i = 0;i < (int)vec->size;i++) {
    80015e32:	fe042623          	sw	zero,-20(s0)
    80015e36:	a02d                	j	80015e60 <vector_find+0x3c>
        if (vec->values[i] == val) {
    80015e38:	fd843783          	ld	a5,-40(s0)
    80015e3c:	6798                	ld	a4,8(a5)
    80015e3e:	fec42783          	lw	a5,-20(s0)
    80015e42:	078e                	slli	a5,a5,0x3
    80015e44:	97ba                	add	a5,a5,a4
    80015e46:	639c                	ld	a5,0(a5)
    80015e48:	fd043703          	ld	a4,-48(s0)
    80015e4c:	00f71563          	bne	a4,a5,80015e56 <vector_find+0x32>
            return i;
    80015e50:	fec42783          	lw	a5,-20(s0)
    80015e54:	a00d                	j	80015e76 <vector_find+0x52>
    for (i = 0;i < (int)vec->size;i++) {
    80015e56:	fec42783          	lw	a5,-20(s0)
    80015e5a:	2785                	addiw	a5,a5,1
    80015e5c:	fef42623          	sw	a5,-20(s0)
    80015e60:	fd843783          	ld	a5,-40(s0)
    80015e64:	439c                	lw	a5,0(a5)
    80015e66:	0007871b          	sext.w	a4,a5
    80015e6a:	fec42783          	lw	a5,-20(s0)
    80015e6e:	2781                	sext.w	a5,a5
    80015e70:	fce7c4e3          	blt	a5,a4,80015e38 <vector_find+0x14>
        }
    }
    return -1;
    80015e74:	57fd                	li	a5,-1
}
    80015e76:	853e                	mv	a0,a5
    80015e78:	7422                	ld	s0,40(sp)
    80015e7a:	6145                	addi	sp,sp,48
    80015e7c:	8082                	ret

0000000080015e7e <vector_set>:

bool vector_set(Vector *vec, uint32_t idx, uint64_t val) {
    80015e7e:	7179                	addi	sp,sp,-48
    80015e80:	f422                	sd	s0,40(sp)
    80015e82:	1800                	addi	s0,sp,48
    80015e84:	fea43423          	sd	a0,-24(s0)
    80015e88:	87ae                	mv	a5,a1
    80015e8a:	fcc43c23          	sd	a2,-40(s0)
    80015e8e:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015e92:	fe843783          	ld	a5,-24(s0)
    80015e96:	4398                	lw	a4,0(a5)
    80015e98:	fe442783          	lw	a5,-28(s0)
    80015e9c:	2781                	sext.w	a5,a5
    80015e9e:	00e7e463          	bltu	a5,a4,80015ea6 <vector_set+0x28>
        return false;
    80015ea2:	4781                	li	a5,0
    80015ea4:	a821                	j	80015ebc <vector_set+0x3e>
    }
    vec->values[idx] = val;
    80015ea6:	fe843783          	ld	a5,-24(s0)
    80015eaa:	6798                	ld	a4,8(a5)
    80015eac:	fe446783          	lwu	a5,-28(s0)
    80015eb0:	078e                	slli	a5,a5,0x3
    80015eb2:	97ba                	add	a5,a5,a4
    80015eb4:	fd843703          	ld	a4,-40(s0)
    80015eb8:	e398                	sd	a4,0(a5)
    return true;
    80015eba:	4785                	li	a5,1
}
    80015ebc:	853e                	mv	a0,a5
    80015ebe:	7422                	ld	s0,40(sp)
    80015ec0:	6145                	addi	sp,sp,48
    80015ec2:	8082                	ret

0000000080015ec4 <vector_get>:

bool vector_get(Vector *vec, uint32_t idx, uint64_t *val) {
    80015ec4:	7179                	addi	sp,sp,-48
    80015ec6:	f422                	sd	s0,40(sp)
    80015ec8:	1800                	addi	s0,sp,48
    80015eca:	fea43423          	sd	a0,-24(s0)
    80015ece:	87ae                	mv	a5,a1
    80015ed0:	fcc43c23          	sd	a2,-40(s0)
    80015ed4:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015ed8:	fe843783          	ld	a5,-24(s0)
    80015edc:	4398                	lw	a4,0(a5)
    80015ede:	fe442783          	lw	a5,-28(s0)
    80015ee2:	2781                	sext.w	a5,a5
    80015ee4:	00e7e463          	bltu	a5,a4,80015eec <vector_get+0x28>
        return false;
    80015ee8:	4781                	li	a5,0
    80015eea:	a005                	j	80015f0a <vector_get+0x46>
    }
    if (val != NULL) {
    80015eec:	fd843783          	ld	a5,-40(s0)
    80015ef0:	cf81                	beqz	a5,80015f08 <vector_get+0x44>
        *val = vec->values[idx];
    80015ef2:	fe843783          	ld	a5,-24(s0)
    80015ef6:	6798                	ld	a4,8(a5)
    80015ef8:	fe446783          	lwu	a5,-28(s0)
    80015efc:	078e                	slli	a5,a5,0x3
    80015efe:	97ba                	add	a5,a5,a4
    80015f00:	6398                	ld	a4,0(a5)
    80015f02:	fd843783          	ld	a5,-40(s0)
    80015f06:	e398                	sd	a4,0(a5)
    }
    return true;
    80015f08:	4785                	li	a5,1
}
    80015f0a:	853e                	mv	a0,a5
    80015f0c:	7422                	ld	s0,40(sp)
    80015f0e:	6145                	addi	sp,sp,48
    80015f10:	8082                	ret

0000000080015f12 <vector_get_unchecked>:

uint64_t vector_get_unchecked(Vector *vec, uint32_t idx) {
    80015f12:	1101                	addi	sp,sp,-32
    80015f14:	ec22                	sd	s0,24(sp)
    80015f16:	1000                	addi	s0,sp,32
    80015f18:	fea43423          	sd	a0,-24(s0)
    80015f1c:	87ae                	mv	a5,a1
    80015f1e:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015f22:	fe843783          	ld	a5,-24(s0)
    80015f26:	4398                	lw	a4,0(a5)
    80015f28:	fe442783          	lw	a5,-28(s0)
    80015f2c:	2781                	sext.w	a5,a5
    80015f2e:	00e7e463          	bltu	a5,a4,80015f36 <vector_get_unchecked+0x24>
        return 0;
    80015f32:	4781                	li	a5,0
    80015f34:	a809                	j	80015f46 <vector_get_unchecked+0x34>
    }
    return vec->values[idx];
    80015f36:	fe843783          	ld	a5,-24(s0)
    80015f3a:	6798                	ld	a4,8(a5)
    80015f3c:	fe446783          	lwu	a5,-28(s0)
    80015f40:	078e                	slli	a5,a5,0x3
    80015f42:	97ba                	add	a5,a5,a4
    80015f44:	639c                	ld	a5,0(a5)
}
    80015f46:	853e                	mv	a0,a5
    80015f48:	6462                	ld	s0,24(sp)
    80015f4a:	6105                	addi	sp,sp,32
    80015f4c:	8082                	ret

0000000080015f4e <vector_resize_with_default>:


void vector_resize_with_default(Vector *vec, uint32_t new_size, uint64_t def) {
    80015f4e:	7139                	addi	sp,sp,-64
    80015f50:	fc06                	sd	ra,56(sp)
    80015f52:	f822                	sd	s0,48(sp)
    80015f54:	0080                	addi	s0,sp,64
    80015f56:	fca43c23          	sd	a0,-40(s0)
    80015f5a:	87ae                	mv	a5,a1
    80015f5c:	fcc43423          	sd	a2,-56(s0)
    80015f60:	fcf42a23          	sw	a5,-44(s0)
    uint32_t old_size = vec->size;
    80015f64:	fd843783          	ld	a5,-40(s0)
    80015f68:	439c                	lw	a5,0(a5)
    80015f6a:	fef42423          	sw	a5,-24(s0)
    vector_resize(vec, new_size);
    80015f6e:	fd442783          	lw	a5,-44(s0)
    80015f72:	85be                	mv	a1,a5
    80015f74:	fd843503          	ld	a0,-40(s0)
    80015f78:	054000ef          	jal	ra,80015fcc <vector_resize>
    if (old_size < new_size) {
    80015f7c:	fe842703          	lw	a4,-24(s0)
    80015f80:	fd442783          	lw	a5,-44(s0)
    80015f84:	2701                	sext.w	a4,a4
    80015f86:	2781                	sext.w	a5,a5
    80015f88:	02f77d63          	bgeu	a4,a5,80015fc2 <vector_resize_with_default+0x74>
        uint32_t i;
        for (i = old_size;i < new_size;i++) {
    80015f8c:	fe842783          	lw	a5,-24(s0)
    80015f90:	fef42623          	sw	a5,-20(s0)
    80015f94:	a839                	j	80015fb2 <vector_resize_with_default+0x64>
            vector_set(vec, i, def);
    80015f96:	fec42783          	lw	a5,-20(s0)
    80015f9a:	fc843603          	ld	a2,-56(s0)
    80015f9e:	85be                	mv	a1,a5
    80015fa0:	fd843503          	ld	a0,-40(s0)
    80015fa4:	edbff0ef          	jal	ra,80015e7e <vector_set>
        for (i = old_size;i < new_size;i++) {
    80015fa8:	fec42783          	lw	a5,-20(s0)
    80015fac:	2785                	addiw	a5,a5,1
    80015fae:	fef42623          	sw	a5,-20(s0)
    80015fb2:	fec42703          	lw	a4,-20(s0)
    80015fb6:	fd442783          	lw	a5,-44(s0)
    80015fba:	2701                	sext.w	a4,a4
    80015fbc:	2781                	sext.w	a5,a5
    80015fbe:	fcf76ce3          	bltu	a4,a5,80015f96 <vector_resize_with_default+0x48>
        }
    }
}
    80015fc2:	0001                	nop
    80015fc4:	70e2                	ld	ra,56(sp)
    80015fc6:	7442                	ld	s0,48(sp)
    80015fc8:	6121                	addi	sp,sp,64
    80015fca:	8082                	ret

0000000080015fcc <vector_resize>:

void vector_resize(Vector *vec, uint32_t new_size) {
    80015fcc:	7179                	addi	sp,sp,-48
    80015fce:	f406                	sd	ra,40(sp)
    80015fd0:	f022                	sd	s0,32(sp)
    80015fd2:	1800                	addi	s0,sp,48
    80015fd4:	fca43c23          	sd	a0,-40(s0)
    80015fd8:	87ae                	mv	a5,a1
    80015fda:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_size > vec->capacity) {
    80015fde:	fd843783          	ld	a5,-40(s0)
    80015fe2:	43d8                	lw	a4,4(a5)
    80015fe4:	fd442783          	lw	a5,-44(s0)
    80015fe8:	2781                	sext.w	a5,a5
    80015fea:	06f77963          	bgeu	a4,a5,8001605c <vector_resize+0x90>
        vals = (uint64_t *)g_kcalloc(new_size, sizeof(uint64_t));
    80015fee:	fd446783          	lwu	a5,-44(s0)
    80015ff2:	45a1                	li	a1,8
    80015ff4:	853e                	mv	a0,a5
    80015ff6:	7e4000ef          	jal	ra,800167da <g_kcalloc>
    80015ffa:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    80015ffe:	fe042623          	sw	zero,-20(s0)
    80016002:	a02d                	j	8001602c <vector_resize+0x60>
            vals[i] = vec->values[i];
    80016004:	fd843783          	ld	a5,-40(s0)
    80016008:	6798                	ld	a4,8(a5)
    8001600a:	fec46783          	lwu	a5,-20(s0)
    8001600e:	078e                	slli	a5,a5,0x3
    80016010:	973e                	add	a4,a4,a5
    80016012:	fec46783          	lwu	a5,-20(s0)
    80016016:	078e                	slli	a5,a5,0x3
    80016018:	fe043683          	ld	a3,-32(s0)
    8001601c:	97b6                	add	a5,a5,a3
    8001601e:	6318                	ld	a4,0(a4)
    80016020:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80016022:	fec42783          	lw	a5,-20(s0)
    80016026:	2785                	addiw	a5,a5,1
    80016028:	fef42623          	sw	a5,-20(s0)
    8001602c:	fd843783          	ld	a5,-40(s0)
    80016030:	4398                	lw	a4,0(a5)
    80016032:	fec42783          	lw	a5,-20(s0)
    80016036:	2781                	sext.w	a5,a5
    80016038:	fce7e6e3          	bltu	a5,a4,80016004 <vector_resize+0x38>
        }
        g_kfree(vec->values);
    8001603c:	fd843783          	ld	a5,-40(s0)
    80016040:	679c                	ld	a5,8(a5)
    80016042:	853e                	mv	a0,a5
    80016044:	7f8000ef          	jal	ra,8001683c <g_kfree>
        vec->values = vals;
    80016048:	fd843783          	ld	a5,-40(s0)
    8001604c:	fe043703          	ld	a4,-32(s0)
    80016050:	e798                	sd	a4,8(a5)
        vec->capacity = new_size;
    80016052:	fd843783          	ld	a5,-40(s0)
    80016056:	fd442703          	lw	a4,-44(s0)
    8001605a:	c3d8                	sw	a4,4(a5)
    }        
    vec->size = new_size;    
    8001605c:	fd843783          	ld	a5,-40(s0)
    80016060:	fd442703          	lw	a4,-44(s0)
    80016064:	c398                	sw	a4,0(a5)
}
    80016066:	0001                	nop
    80016068:	70a2                	ld	ra,40(sp)
    8001606a:	7402                	ld	s0,32(sp)
    8001606c:	6145                	addi	sp,sp,48
    8001606e:	8082                	ret

0000000080016070 <vector_reserve>:

void vector_reserve(Vector *vec, uint32_t new_capacity) {
    80016070:	7179                	addi	sp,sp,-48
    80016072:	f406                	sd	ra,40(sp)
    80016074:	f022                	sd	s0,32(sp)
    80016076:	1800                	addi	s0,sp,48
    80016078:	fca43c23          	sd	a0,-40(s0)
    8001607c:	87ae                	mv	a5,a1
    8001607e:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_capacity > vec->capacity) {
    80016082:	fd843783          	ld	a5,-40(s0)
    80016086:	43d8                	lw	a4,4(a5)
    80016088:	fd442783          	lw	a5,-44(s0)
    8001608c:	2781                	sext.w	a5,a5
    8001608e:	06f77a63          	bgeu	a4,a5,80016102 <vector_reserve+0x92>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    80016092:	fd446783          	lwu	a5,-44(s0)
    80016096:	45a1                	li	a1,8
    80016098:	853e                	mv	a0,a5
    8001609a:	740000ef          	jal	ra,800167da <g_kcalloc>
    8001609e:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    800160a2:	fe042623          	sw	zero,-20(s0)
    800160a6:	a02d                	j	800160d0 <vector_reserve+0x60>
            vals[i] = vec->values[i];
    800160a8:	fd843783          	ld	a5,-40(s0)
    800160ac:	6798                	ld	a4,8(a5)
    800160ae:	fec46783          	lwu	a5,-20(s0)
    800160b2:	078e                	slli	a5,a5,0x3
    800160b4:	973e                	add	a4,a4,a5
    800160b6:	fec46783          	lwu	a5,-20(s0)
    800160ba:	078e                	slli	a5,a5,0x3
    800160bc:	fe043683          	ld	a3,-32(s0)
    800160c0:	97b6                	add	a5,a5,a3
    800160c2:	6318                	ld	a4,0(a4)
    800160c4:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    800160c6:	fec42783          	lw	a5,-20(s0)
    800160ca:	2785                	addiw	a5,a5,1
    800160cc:	fef42623          	sw	a5,-20(s0)
    800160d0:	fd843783          	ld	a5,-40(s0)
    800160d4:	4398                	lw	a4,0(a5)
    800160d6:	fec42783          	lw	a5,-20(s0)
    800160da:	2781                	sext.w	a5,a5
    800160dc:	fce7e6e3          	bltu	a5,a4,800160a8 <vector_reserve+0x38>
        }
        g_kfree(vec->values);
    800160e0:	fd843783          	ld	a5,-40(s0)
    800160e4:	679c                	ld	a5,8(a5)
    800160e6:	853e                	mv	a0,a5
    800160e8:	754000ef          	jal	ra,8001683c <g_kfree>
        vec->values = vals;
    800160ec:	fd843783          	ld	a5,-40(s0)
    800160f0:	fe043703          	ld	a4,-32(s0)
    800160f4:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    800160f6:	fd843783          	ld	a5,-40(s0)
    800160fa:	fd442703          	lw	a4,-44(s0)
    800160fe:	c3d8                	sw	a4,4(a5)
        }
        g_kfree(vec->values);
        vec->values = vals;
        vec->capacity = new_capacity;
    }
}
    80016100:	a04d                	j	800161a2 <vector_reserve+0x132>
    else if (new_capacity > 0 && new_capacity < vec->capacity) {
    80016102:	fd442783          	lw	a5,-44(s0)
    80016106:	2781                	sext.w	a5,a5
    80016108:	cfc9                	beqz	a5,800161a2 <vector_reserve+0x132>
    8001610a:	fd843783          	ld	a5,-40(s0)
    8001610e:	43d8                	lw	a4,4(a5)
    80016110:	fd442783          	lw	a5,-44(s0)
    80016114:	2781                	sext.w	a5,a5
    80016116:	08e7f663          	bgeu	a5,a4,800161a2 <vector_reserve+0x132>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    8001611a:	fd446783          	lwu	a5,-44(s0)
    8001611e:	45a1                	li	a1,8
    80016120:	853e                	mv	a0,a5
    80016122:	6b8000ef          	jal	ra,800167da <g_kcalloc>
    80016126:	fea43023          	sd	a0,-32(s0)
        if (new_capacity < vec->size) {
    8001612a:	fd843783          	ld	a5,-40(s0)
    8001612e:	4398                	lw	a4,0(a5)
    80016130:	fd442783          	lw	a5,-44(s0)
    80016134:	2781                	sext.w	a5,a5
    80016136:	00e7f763          	bgeu	a5,a4,80016144 <vector_reserve+0xd4>
            vec->size = new_capacity;
    8001613a:	fd843783          	ld	a5,-40(s0)
    8001613e:	fd442703          	lw	a4,-44(s0)
    80016142:	c398                	sw	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80016144:	fe042623          	sw	zero,-20(s0)
    80016148:	a02d                	j	80016172 <vector_reserve+0x102>
            vals[i] = vec->values[i];
    8001614a:	fd843783          	ld	a5,-40(s0)
    8001614e:	6798                	ld	a4,8(a5)
    80016150:	fec46783          	lwu	a5,-20(s0)
    80016154:	078e                	slli	a5,a5,0x3
    80016156:	973e                	add	a4,a4,a5
    80016158:	fec46783          	lwu	a5,-20(s0)
    8001615c:	078e                	slli	a5,a5,0x3
    8001615e:	fe043683          	ld	a3,-32(s0)
    80016162:	97b6                	add	a5,a5,a3
    80016164:	6318                	ld	a4,0(a4)
    80016166:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80016168:	fec42783          	lw	a5,-20(s0)
    8001616c:	2785                	addiw	a5,a5,1
    8001616e:	fef42623          	sw	a5,-20(s0)
    80016172:	fd843783          	ld	a5,-40(s0)
    80016176:	4398                	lw	a4,0(a5)
    80016178:	fec42783          	lw	a5,-20(s0)
    8001617c:	2781                	sext.w	a5,a5
    8001617e:	fce7e6e3          	bltu	a5,a4,8001614a <vector_reserve+0xda>
        g_kfree(vec->values);
    80016182:	fd843783          	ld	a5,-40(s0)
    80016186:	679c                	ld	a5,8(a5)
    80016188:	853e                	mv	a0,a5
    8001618a:	6b2000ef          	jal	ra,8001683c <g_kfree>
        vec->values = vals;
    8001618e:	fd843783          	ld	a5,-40(s0)
    80016192:	fe043703          	ld	a4,-32(s0)
    80016196:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    80016198:	fd843783          	ld	a5,-40(s0)
    8001619c:	fd442703          	lw	a4,-44(s0)
    800161a0:	c3d8                	sw	a4,4(a5)
}
    800161a2:	0001                	nop
    800161a4:	70a2                	ld	ra,40(sp)
    800161a6:	7402                	ld	s0,32(sp)
    800161a8:	6145                	addi	sp,sp,48
    800161aa:	8082                	ret

00000000800161ac <vector_remove>:

bool vector_remove(Vector *vec, uint32_t idx) {
    800161ac:	1101                	addi	sp,sp,-32
    800161ae:	ec22                	sd	s0,24(sp)
    800161b0:	1000                	addi	s0,sp,32
    800161b2:	fea43423          	sd	a0,-24(s0)
    800161b6:	87ae                	mv	a5,a1
    800161b8:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    800161bc:	fe843783          	ld	a5,-24(s0)
    800161c0:	4398                	lw	a4,0(a5)
    800161c2:	fe442783          	lw	a5,-28(s0)
    800161c6:	2781                	sext.w	a5,a5
    800161c8:	00e7e463          	bltu	a5,a4,800161d0 <vector_remove+0x24>
        return false;
    800161cc:	4781                	li	a5,0
    800161ce:	a8a9                	j	80016228 <vector_remove+0x7c>
    }
    vec->size -= 1;
    800161d0:	fe843783          	ld	a5,-24(s0)
    800161d4:	439c                	lw	a5,0(a5)
    800161d6:	37fd                	addiw	a5,a5,-1
    800161d8:	0007871b          	sext.w	a4,a5
    800161dc:	fe843783          	ld	a5,-24(s0)
    800161e0:	c398                	sw	a4,0(a5)
    for (;idx < vec->size;idx++) {
    800161e2:	a815                	j	80016216 <vector_remove+0x6a>
        vec->values[idx] = vec->values[idx + 1];
    800161e4:	fe843783          	ld	a5,-24(s0)
    800161e8:	6798                	ld	a4,8(a5)
    800161ea:	fe442783          	lw	a5,-28(s0)
    800161ee:	2785                	addiw	a5,a5,1
    800161f0:	2781                	sext.w	a5,a5
    800161f2:	1782                	slli	a5,a5,0x20
    800161f4:	9381                	srli	a5,a5,0x20
    800161f6:	078e                	slli	a5,a5,0x3
    800161f8:	973e                	add	a4,a4,a5
    800161fa:	fe843783          	ld	a5,-24(s0)
    800161fe:	6794                	ld	a3,8(a5)
    80016200:	fe446783          	lwu	a5,-28(s0)
    80016204:	078e                	slli	a5,a5,0x3
    80016206:	97b6                	add	a5,a5,a3
    80016208:	6318                	ld	a4,0(a4)
    8001620a:	e398                	sd	a4,0(a5)
    for (;idx < vec->size;idx++) {
    8001620c:	fe442783          	lw	a5,-28(s0)
    80016210:	2785                	addiw	a5,a5,1
    80016212:	fef42223          	sw	a5,-28(s0)
    80016216:	fe843783          	ld	a5,-24(s0)
    8001621a:	4398                	lw	a4,0(a5)
    8001621c:	fe442783          	lw	a5,-28(s0)
    80016220:	2781                	sext.w	a5,a5
    80016222:	fce7e1e3          	bltu	a5,a4,800161e4 <vector_remove+0x38>
    }
    return true;
    80016226:	4785                	li	a5,1
}
    80016228:	853e                	mv	a0,a5
    8001622a:	6462                	ld	s0,24(sp)
    8001622c:	6105                	addi	sp,sp,32
    8001622e:	8082                	ret

0000000080016230 <vector_remove_value>:

bool vector_remove_value(Vector *vec, uint64_t val) {
    80016230:	7179                	addi	sp,sp,-48
    80016232:	f406                	sd	ra,40(sp)
    80016234:	f022                	sd	s0,32(sp)
    80016236:	1800                	addi	s0,sp,48
    80016238:	fca43c23          	sd	a0,-40(s0)
    8001623c:	fcb43823          	sd	a1,-48(s0)
    uint32_t i;
    for (i = 0;i < vec->size;i++) {
    80016240:	fe042623          	sw	zero,-20(s0)
    80016244:	a81d                	j	8001627a <vector_remove_value+0x4a>
        if (vec->values[i] == val) {
    80016246:	fd843783          	ld	a5,-40(s0)
    8001624a:	6798                	ld	a4,8(a5)
    8001624c:	fec46783          	lwu	a5,-20(s0)
    80016250:	078e                	slli	a5,a5,0x3
    80016252:	97ba                	add	a5,a5,a4
    80016254:	639c                	ld	a5,0(a5)
    80016256:	fd043703          	ld	a4,-48(s0)
    8001625a:	00f71b63          	bne	a4,a5,80016270 <vector_remove_value+0x40>
            vector_remove(vec, i);
    8001625e:	fec42783          	lw	a5,-20(s0)
    80016262:	85be                	mv	a1,a5
    80016264:	fd843503          	ld	a0,-40(s0)
    80016268:	f45ff0ef          	jal	ra,800161ac <vector_remove>
            return true;
    8001626c:	4785                	li	a5,1
    8001626e:	a839                	j	8001628c <vector_remove_value+0x5c>
    for (i = 0;i < vec->size;i++) {
    80016270:	fec42783          	lw	a5,-20(s0)
    80016274:	2785                	addiw	a5,a5,1
    80016276:	fef42623          	sw	a5,-20(s0)
    8001627a:	fd843783          	ld	a5,-40(s0)
    8001627e:	4398                	lw	a4,0(a5)
    80016280:	fec42783          	lw	a5,-20(s0)
    80016284:	2781                	sext.w	a5,a5
    80016286:	fce7e0e3          	bltu	a5,a4,80016246 <vector_remove_value+0x16>
        }
    }
    return false;
    8001628a:	4781                	li	a5,0
}
    8001628c:	853e                	mv	a0,a5
    8001628e:	70a2                	ld	ra,40(sp)
    80016290:	7402                	ld	s0,32(sp)
    80016292:	6145                	addi	sp,sp,48
    80016294:	8082                	ret

0000000080016296 <vector_clear>:

void vector_clear(Vector *vec) {
    80016296:	1101                	addi	sp,sp,-32
    80016298:	ec06                	sd	ra,24(sp)
    8001629a:	e822                	sd	s0,16(sp)
    8001629c:	1000                	addi	s0,sp,32
    8001629e:	fea43423          	sd	a0,-24(s0)
    vector_resize(vec, 0);
    800162a2:	4581                	li	a1,0
    800162a4:	fe843503          	ld	a0,-24(s0)
    800162a8:	d25ff0ef          	jal	ra,80015fcc <vector_resize>
}
    800162ac:	0001                	nop
    800162ae:	60e2                	ld	ra,24(sp)
    800162b0:	6442                	ld	s0,16(sp)
    800162b2:	6105                	addi	sp,sp,32
    800162b4:	8082                	ret

00000000800162b6 <vector_binsearch_ascending>:

int vector_binsearch_ascending(struct Vector *vec, uint64_t key) {
    800162b6:	7179                	addi	sp,sp,-48
    800162b8:	f406                	sd	ra,40(sp)
    800162ba:	f022                	sd	s0,32(sp)
    800162bc:	1800                	addi	s0,sp,48
    800162be:	fca43c23          	sd	a0,-40(s0)
    800162c2:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    800162c6:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec);
    800162ca:	fd843503          	ld	a0,-40(s0)
    800162ce:	356000ef          	jal	ra,80016624 <vector_size>
    800162d2:	87aa                	mv	a5,a0
    800162d4:	2781                	sext.w	a5,a5
    800162d6:	fef42423          	sw	a5,-24(s0)

    while (low < high) {
    800162da:	a0ad                	j	80016344 <vector_binsearch_ascending+0x8e>
        int mid = (low + high) / 2;
    800162dc:	fec42703          	lw	a4,-20(s0)
    800162e0:	fe842783          	lw	a5,-24(s0)
    800162e4:	9fb9                	addw	a5,a5,a4
    800162e6:	2781                	sext.w	a5,a5
    800162e8:	01f7d71b          	srliw	a4,a5,0x1f
    800162ec:	9fb9                	addw	a5,a5,a4
    800162ee:	4017d79b          	sraiw	a5,a5,0x1
    800162f2:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) > key) {
    800162f6:	fe442783          	lw	a5,-28(s0)
    800162fa:	85be                	mv	a1,a5
    800162fc:	fd843503          	ld	a0,-40(s0)
    80016300:	c13ff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    80016304:	872a                	mv	a4,a0
    80016306:	fd043783          	ld	a5,-48(s0)
    8001630a:	00e7f863          	bgeu	a5,a4,8001631a <vector_binsearch_ascending+0x64>
            high = mid - 1;
    8001630e:	fe442783          	lw	a5,-28(s0)
    80016312:	37fd                	addiw	a5,a5,-1
    80016314:	fef42423          	sw	a5,-24(s0)
    80016318:	a035                	j	80016344 <vector_binsearch_ascending+0x8e>
        }
        else if (vector_get_unchecked(vec, mid) < key) {
    8001631a:	fe442783          	lw	a5,-28(s0)
    8001631e:	85be                	mv	a1,a5
    80016320:	fd843503          	ld	a0,-40(s0)
    80016324:	befff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    80016328:	872a                	mv	a4,a0
    8001632a:	fd043783          	ld	a5,-48(s0)
    8001632e:	00f77863          	bgeu	a4,a5,8001633e <vector_binsearch_ascending+0x88>
            low = mid + 1;
    80016332:	fe442783          	lw	a5,-28(s0)
    80016336:	2785                	addiw	a5,a5,1
    80016338:	fef42623          	sw	a5,-20(s0)
    8001633c:	a021                	j	80016344 <vector_binsearch_ascending+0x8e>
        }
        else {
            return mid;
    8001633e:	fe442783          	lw	a5,-28(s0)
    80016342:	a811                	j	80016356 <vector_binsearch_ascending+0xa0>
    while (low < high) {
    80016344:	fec42703          	lw	a4,-20(s0)
    80016348:	fe842783          	lw	a5,-24(s0)
    8001634c:	2701                	sext.w	a4,a4
    8001634e:	2781                	sext.w	a5,a5
    80016350:	f8f746e3          	blt	a4,a5,800162dc <vector_binsearch_ascending+0x26>
        }
    }
    return -1;
    80016354:	57fd                	li	a5,-1
}
    80016356:	853e                	mv	a0,a5
    80016358:	70a2                	ld	ra,40(sp)
    8001635a:	7402                	ld	s0,32(sp)
    8001635c:	6145                	addi	sp,sp,48
    8001635e:	8082                	ret

0000000080016360 <vector_binsearch_descending>:

int vector_binsearch_descending(struct Vector *vec, uint64_t key) {
    80016360:	7179                	addi	sp,sp,-48
    80016362:	f406                	sd	ra,40(sp)
    80016364:	f022                	sd	s0,32(sp)
    80016366:	1800                	addi	s0,sp,48
    80016368:	fca43c23          	sd	a0,-40(s0)
    8001636c:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    80016370:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec) - 1;
    80016374:	fd843503          	ld	a0,-40(s0)
    80016378:	2ac000ef          	jal	ra,80016624 <vector_size>
    8001637c:	87aa                	mv	a5,a0
    8001637e:	2781                	sext.w	a5,a5
    80016380:	37fd                	addiw	a5,a5,-1
    80016382:	2781                	sext.w	a5,a5
    80016384:	fef42423          	sw	a5,-24(s0)

    while (low <= high) {
    80016388:	a0ad                	j	800163f2 <vector_binsearch_descending+0x92>
        int mid = (low + high) / 2;
    8001638a:	fec42703          	lw	a4,-20(s0)
    8001638e:	fe842783          	lw	a5,-24(s0)
    80016392:	9fb9                	addw	a5,a5,a4
    80016394:	2781                	sext.w	a5,a5
    80016396:	01f7d71b          	srliw	a4,a5,0x1f
    8001639a:	9fb9                	addw	a5,a5,a4
    8001639c:	4017d79b          	sraiw	a5,a5,0x1
    800163a0:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) < key) {
    800163a4:	fe442783          	lw	a5,-28(s0)
    800163a8:	85be                	mv	a1,a5
    800163aa:	fd843503          	ld	a0,-40(s0)
    800163ae:	b65ff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    800163b2:	872a                	mv	a4,a0
    800163b4:	fd043783          	ld	a5,-48(s0)
    800163b8:	00f77863          	bgeu	a4,a5,800163c8 <vector_binsearch_descending+0x68>
            high = mid - 1;
    800163bc:	fe442783          	lw	a5,-28(s0)
    800163c0:	37fd                	addiw	a5,a5,-1
    800163c2:	fef42423          	sw	a5,-24(s0)
    800163c6:	a035                	j	800163f2 <vector_binsearch_descending+0x92>
        }
        else if (vector_get_unchecked(vec, mid) > key) {
    800163c8:	fe442783          	lw	a5,-28(s0)
    800163cc:	85be                	mv	a1,a5
    800163ce:	fd843503          	ld	a0,-40(s0)
    800163d2:	b41ff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    800163d6:	872a                	mv	a4,a0
    800163d8:	fd043783          	ld	a5,-48(s0)
    800163dc:	00e7f863          	bgeu	a5,a4,800163ec <vector_binsearch_descending+0x8c>
            low = mid + 1;
    800163e0:	fe442783          	lw	a5,-28(s0)
    800163e4:	2785                	addiw	a5,a5,1
    800163e6:	fef42623          	sw	a5,-20(s0)
    800163ea:	a021                	j	800163f2 <vector_binsearch_descending+0x92>
        }
        else {
            return mid;
    800163ec:	fe442783          	lw	a5,-28(s0)
    800163f0:	a811                	j	80016404 <vector_binsearch_descending+0xa4>
    while (low <= high) {
    800163f2:	fec42703          	lw	a4,-20(s0)
    800163f6:	fe842783          	lw	a5,-24(s0)
    800163fa:	2701                	sext.w	a4,a4
    800163fc:	2781                	sext.w	a5,a5
    800163fe:	f8e7d6e3          	bge	a5,a4,8001638a <vector_binsearch_descending+0x2a>
        }
    }
    return -1;
    80016402:	57fd                	li	a5,-1
}
    80016404:	853e                	mv	a0,a5
    80016406:	70a2                	ld	ra,40(sp)
    80016408:	7402                	ld	s0,32(sp)
    8001640a:	6145                	addi	sp,sp,48
    8001640c:	8082                	ret

000000008001640e <vector_sort>:

void vector_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    8001640e:	1101                	addi	sp,sp,-32
    80016410:	ec06                	sd	ra,24(sp)
    80016412:	e822                	sd	s0,16(sp)
    80016414:	1000                	addi	s0,sp,32
    80016416:	fea43423          	sd	a0,-24(s0)
    8001641a:	feb43023          	sd	a1,-32(s0)
    vector_insertion_sort(vec, comp);
    8001641e:	fe043583          	ld	a1,-32(s0)
    80016422:	fe843503          	ld	a0,-24(s0)
    80016426:	10e000ef          	jal	ra,80016534 <vector_insertion_sort>
}
    8001642a:	0001                	nop
    8001642c:	60e2                	ld	ra,24(sp)
    8001642e:	6442                	ld	s0,16(sp)
    80016430:	6105                	addi	sp,sp,32
    80016432:	8082                	ret

0000000080016434 <vector_selection_sort>:

void vector_selection_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    80016434:	715d                	addi	sp,sp,-80
    80016436:	e486                	sd	ra,72(sp)
    80016438:	e0a2                	sd	s0,64(sp)
    8001643a:	fc26                	sd	s1,56(sp)
    8001643c:	0880                	addi	s0,sp,80
    8001643e:	faa43c23          	sd	a0,-72(s0)
    80016442:	fab43823          	sd	a1,-80(s0)
    uint32_t i;
    uint32_t j;
    uint32_t min_idx;
    uint64_t tmp;

    for (i = 0;i < vector_size(vec);i++) {
    80016446:	fc042e23          	sw	zero,-36(s0)
    8001644a:	a0d1                	j	8001650e <vector_selection_sort+0xda>
        min_idx = i;
    8001644c:	fdc42783          	lw	a5,-36(s0)
    80016450:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    80016454:	fdc42783          	lw	a5,-36(s0)
    80016458:	2785                	addiw	a5,a5,1
    8001645a:	fcf42c23          	sw	a5,-40(s0)
    8001645e:	a0a9                	j	800164a8 <vector_selection_sort+0x74>
            if (!comp(vector_get_unchecked(vec, min_idx), vector_get_unchecked(vec, j))) {
    80016460:	fd442783          	lw	a5,-44(s0)
    80016464:	85be                	mv	a1,a5
    80016466:	fb843503          	ld	a0,-72(s0)
    8001646a:	aa9ff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    8001646e:	84aa                	mv	s1,a0
    80016470:	fd842783          	lw	a5,-40(s0)
    80016474:	85be                	mv	a1,a5
    80016476:	fb843503          	ld	a0,-72(s0)
    8001647a:	a99ff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    8001647e:	87aa                	mv	a5,a0
    80016480:	fb043703          	ld	a4,-80(s0)
    80016484:	85be                	mv	a1,a5
    80016486:	8526                	mv	a0,s1
    80016488:	9702                	jalr	a4
    8001648a:	87aa                	mv	a5,a0
    8001648c:	0017c793          	xori	a5,a5,1
    80016490:	0ff7f793          	andi	a5,a5,255
    80016494:	c789                	beqz	a5,8001649e <vector_selection_sort+0x6a>
                min_idx = j;
    80016496:	fd842783          	lw	a5,-40(s0)
    8001649a:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    8001649e:	fd842783          	lw	a5,-40(s0)
    800164a2:	2785                	addiw	a5,a5,1
    800164a4:	fcf42c23          	sw	a5,-40(s0)
    800164a8:	fb843503          	ld	a0,-72(s0)
    800164ac:	178000ef          	jal	ra,80016624 <vector_size>
    800164b0:	87aa                	mv	a5,a0
    800164b2:	0007871b          	sext.w	a4,a5
    800164b6:	fd842783          	lw	a5,-40(s0)
    800164ba:	2781                	sext.w	a5,a5
    800164bc:	fae7e2e3          	bltu	a5,a4,80016460 <vector_selection_sort+0x2c>
            }
        }
        tmp = vector_get_unchecked(vec, i);
    800164c0:	fdc42783          	lw	a5,-36(s0)
    800164c4:	85be                	mv	a1,a5
    800164c6:	fb843503          	ld	a0,-72(s0)
    800164ca:	a49ff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    800164ce:	fca43423          	sd	a0,-56(s0)
        vector_set(vec, i, vector_get_unchecked(vec, min_idx));
    800164d2:	fd442783          	lw	a5,-44(s0)
    800164d6:	85be                	mv	a1,a5
    800164d8:	fb843503          	ld	a0,-72(s0)
    800164dc:	a37ff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    800164e0:	872a                	mv	a4,a0
    800164e2:	fdc42783          	lw	a5,-36(s0)
    800164e6:	863a                	mv	a2,a4
    800164e8:	85be                	mv	a1,a5
    800164ea:	fb843503          	ld	a0,-72(s0)
    800164ee:	991ff0ef          	jal	ra,80015e7e <vector_set>
        vector_set(vec, min_idx, tmp);
    800164f2:	fd442783          	lw	a5,-44(s0)
    800164f6:	fc843603          	ld	a2,-56(s0)
    800164fa:	85be                	mv	a1,a5
    800164fc:	fb843503          	ld	a0,-72(s0)
    80016500:	97fff0ef          	jal	ra,80015e7e <vector_set>
    for (i = 0;i < vector_size(vec);i++) {
    80016504:	fdc42783          	lw	a5,-36(s0)
    80016508:	2785                	addiw	a5,a5,1
    8001650a:	fcf42e23          	sw	a5,-36(s0)
    8001650e:	fb843503          	ld	a0,-72(s0)
    80016512:	112000ef          	jal	ra,80016624 <vector_size>
    80016516:	87aa                	mv	a5,a0
    80016518:	0007871b          	sext.w	a4,a5
    8001651c:	fdc42783          	lw	a5,-36(s0)
    80016520:	2781                	sext.w	a5,a5
    80016522:	f2e7e5e3          	bltu	a5,a4,8001644c <vector_selection_sort+0x18>
    }
}
    80016526:	0001                	nop
    80016528:	0001                	nop
    8001652a:	60a6                	ld	ra,72(sp)
    8001652c:	6406                	ld	s0,64(sp)
    8001652e:	74e2                	ld	s1,56(sp)
    80016530:	6161                	addi	sp,sp,80
    80016532:	8082                	ret

0000000080016534 <vector_insertion_sort>:

void vector_insertion_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    80016534:	715d                	addi	sp,sp,-80
    80016536:	e486                	sd	ra,72(sp)
    80016538:	e0a2                	sd	s0,64(sp)
    8001653a:	fc26                	sd	s1,56(sp)
    8001653c:	0880                	addi	s0,sp,80
    8001653e:	faa43c23          	sd	a0,-72(s0)
    80016542:	fab43823          	sd	a1,-80(s0)
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    80016546:	4785                	li	a5,1
    80016548:	fcf42e23          	sw	a5,-36(s0)
    8001654c:	a84d                	j	800165fe <vector_insertion_sort+0xca>
        uint32_t j = i;
    8001654e:	fdc42783          	lw	a5,-36(s0)
    80016552:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    80016556:	a8b1                	j	800165b2 <vector_insertion_sort+0x7e>
            uint64_t left = vector_get_unchecked(vec, j - 1);
    80016558:	fd842783          	lw	a5,-40(s0)
    8001655c:	37fd                	addiw	a5,a5,-1
    8001655e:	2781                	sext.w	a5,a5
    80016560:	85be                	mv	a1,a5
    80016562:	fb843503          	ld	a0,-72(s0)
    80016566:	9adff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    8001656a:	fca43823          	sd	a0,-48(s0)
            uint64_t right = vector_get_unchecked(vec, j);
    8001656e:	fd842783          	lw	a5,-40(s0)
    80016572:	85be                	mv	a1,a5
    80016574:	fb843503          	ld	a0,-72(s0)
    80016578:	99bff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    8001657c:	fca43423          	sd	a0,-56(s0)

            vector_set(vec, j, left);
    80016580:	fd842783          	lw	a5,-40(s0)
    80016584:	fd043603          	ld	a2,-48(s0)
    80016588:	85be                	mv	a1,a5
    8001658a:	fb843503          	ld	a0,-72(s0)
    8001658e:	8f1ff0ef          	jal	ra,80015e7e <vector_set>
            vector_set(vec, j - 1, right);
    80016592:	fd842783          	lw	a5,-40(s0)
    80016596:	37fd                	addiw	a5,a5,-1
    80016598:	2781                	sext.w	a5,a5
    8001659a:	fc843603          	ld	a2,-56(s0)
    8001659e:	85be                	mv	a1,a5
    800165a0:	fb843503          	ld	a0,-72(s0)
    800165a4:	8dbff0ef          	jal	ra,80015e7e <vector_set>

            j -= 1;
    800165a8:	fd842783          	lw	a5,-40(s0)
    800165ac:	37fd                	addiw	a5,a5,-1
    800165ae:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    800165b2:	fd842783          	lw	a5,-40(s0)
    800165b6:	2781                	sext.w	a5,a5
    800165b8:	cf95                	beqz	a5,800165f4 <vector_insertion_sort+0xc0>
    800165ba:	fd842783          	lw	a5,-40(s0)
    800165be:	37fd                	addiw	a5,a5,-1
    800165c0:	2781                	sext.w	a5,a5
    800165c2:	85be                	mv	a1,a5
    800165c4:	fb843503          	ld	a0,-72(s0)
    800165c8:	94bff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    800165cc:	84aa                	mv	s1,a0
    800165ce:	fd842783          	lw	a5,-40(s0)
    800165d2:	85be                	mv	a1,a5
    800165d4:	fb843503          	ld	a0,-72(s0)
    800165d8:	93bff0ef          	jal	ra,80015f12 <vector_get_unchecked>
    800165dc:	87aa                	mv	a5,a0
    800165de:	fb043703          	ld	a4,-80(s0)
    800165e2:	85be                	mv	a1,a5
    800165e4:	8526                	mv	a0,s1
    800165e6:	9702                	jalr	a4
    800165e8:	87aa                	mv	a5,a0
    800165ea:	0017c793          	xori	a5,a5,1
    800165ee:	0ff7f793          	andi	a5,a5,255
    800165f2:	f3bd                	bnez	a5,80016558 <vector_insertion_sort+0x24>
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    800165f4:	fdc42783          	lw	a5,-36(s0)
    800165f8:	2785                	addiw	a5,a5,1
    800165fa:	fcf42e23          	sw	a5,-36(s0)
    800165fe:	fb843503          	ld	a0,-72(s0)
    80016602:	022000ef          	jal	ra,80016624 <vector_size>
    80016606:	87aa                	mv	a5,a0
    80016608:	0007871b          	sext.w	a4,a5
    8001660c:	fdc42783          	lw	a5,-36(s0)
    80016610:	2781                	sext.w	a5,a5
    80016612:	f2e7eee3          	bltu	a5,a4,8001654e <vector_insertion_sort+0x1a>
        }
    }
}
    80016616:	0001                	nop
    80016618:	0001                	nop
    8001661a:	60a6                	ld	ra,72(sp)
    8001661c:	6406                	ld	s0,64(sp)
    8001661e:	74e2                	ld	s1,56(sp)
    80016620:	6161                	addi	sp,sp,80
    80016622:	8082                	ret

0000000080016624 <vector_size>:

uint32_t vector_size(Vector *vec) {
    80016624:	1101                	addi	sp,sp,-32
    80016626:	ec22                	sd	s0,24(sp)
    80016628:	1000                	addi	s0,sp,32
    8001662a:	fea43423          	sd	a0,-24(s0)
    return vec->size;
    8001662e:	fe843783          	ld	a5,-24(s0)
    80016632:	439c                	lw	a5,0(a5)
}
    80016634:	853e                	mv	a0,a5
    80016636:	6462                	ld	s0,24(sp)
    80016638:	6105                	addi	sp,sp,32
    8001663a:	8082                	ret

000000008001663c <vector_capacity>:

uint32_t vector_capacity(Vector *vec) {
    8001663c:	1101                	addi	sp,sp,-32
    8001663e:	ec22                	sd	s0,24(sp)
    80016640:	1000                	addi	s0,sp,32
    80016642:	fea43423          	sd	a0,-24(s0)
    return vec->capacity;
    80016646:	fe843783          	ld	a5,-24(s0)
    8001664a:	43dc                	lw	a5,4(a5)
}
    8001664c:	853e                	mv	a0,a5
    8001664e:	6462                	ld	s0,24(sp)
    80016650:	6105                	addi	sp,sp,32
    80016652:	8082                	ret

0000000080016654 <vector_free>:

void vector_free(Vector *vec) {
    80016654:	1101                	addi	sp,sp,-32
    80016656:	ec06                	sd	ra,24(sp)
    80016658:	e822                	sd	s0,16(sp)
    8001665a:	1000                	addi	s0,sp,32
    8001665c:	fea43423          	sd	a0,-24(s0)
    g_kfree(vec->values);
    80016660:	fe843783          	ld	a5,-24(s0)
    80016664:	679c                	ld	a5,8(a5)
    80016666:	853e                	mv	a0,a5
    80016668:	1d4000ef          	jal	ra,8001683c <g_kfree>
    vec->size = 0;
    8001666c:	fe843783          	ld	a5,-24(s0)
    80016670:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    80016674:	fe843783          	ld	a5,-24(s0)
    80016678:	0007a223          	sw	zero,4(a5)
    g_kfree(vec);
    8001667c:	fe843503          	ld	a0,-24(s0)
    80016680:	1bc000ef          	jal	ra,8001683c <g_kfree>
}
    80016684:	0001                	nop
    80016686:	60e2                	ld	ra,24(sp)
    80016688:	6442                	ld	s0,16(sp)
    8001668a:	6105                	addi	sp,sp,32
    8001668c:	8082                	ret

000000008001668e <vector_sort_signed_long_comparator_ascending>:

VECTOR_COMPARATOR(vector_sort_signed_long_comparator_ascending) {
    8001668e:	1101                	addi	sp,sp,-32
    80016690:	ec22                	sd	s0,24(sp)
    80016692:	1000                	addi	s0,sp,32
    80016694:	fea43423          	sd	a0,-24(s0)
    80016698:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    8001669c:	fe843703          	ld	a4,-24(s0)
    800166a0:	fe043783          	ld	a5,-32(s0)
    800166a4:	00e7a7b3          	slt	a5,a5,a4
    800166a8:	0017c793          	xori	a5,a5,1
    800166ac:	0ff7f793          	andi	a5,a5,255
}
    800166b0:	853e                	mv	a0,a5
    800166b2:	6462                	ld	s0,24(sp)
    800166b4:	6105                	addi	sp,sp,32
    800166b6:	8082                	ret

00000000800166b8 <vector_sort_signed_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_signed_long_comparator_descending) {
    800166b8:	1101                	addi	sp,sp,-32
    800166ba:	ec22                	sd	s0,24(sp)
    800166bc:	1000                	addi	s0,sp,32
    800166be:	fea43423          	sd	a0,-24(s0)
    800166c2:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    800166c6:	fe843703          	ld	a4,-24(s0)
    800166ca:	fe043783          	ld	a5,-32(s0)
    800166ce:	00f727b3          	slt	a5,a4,a5
    800166d2:	0017c793          	xori	a5,a5,1
    800166d6:	0ff7f793          	andi	a5,a5,255
}
    800166da:	853e                	mv	a0,a5
    800166dc:	6462                	ld	s0,24(sp)
    800166de:	6105                	addi	sp,sp,32
    800166e0:	8082                	ret

00000000800166e2 <vector_sort_unsigned_long_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_ascending) {
    800166e2:	1101                	addi	sp,sp,-32
    800166e4:	ec22                	sd	s0,24(sp)
    800166e6:	1000                	addi	s0,sp,32
    800166e8:	fea43423          	sd	a0,-24(s0)
    800166ec:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    800166f0:	fe843703          	ld	a4,-24(s0)
    800166f4:	fe043783          	ld	a5,-32(s0)
    800166f8:	00e7b7b3          	sltu	a5,a5,a4
    800166fc:	0017c793          	xori	a5,a5,1
    80016700:	0ff7f793          	andi	a5,a5,255
}
    80016704:	853e                	mv	a0,a5
    80016706:	6462                	ld	s0,24(sp)
    80016708:	6105                	addi	sp,sp,32
    8001670a:	8082                	ret

000000008001670c <vector_sort_unsigned_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_descending) {
    8001670c:	1101                	addi	sp,sp,-32
    8001670e:	ec22                	sd	s0,24(sp)
    80016710:	1000                	addi	s0,sp,32
    80016712:	fea43423          	sd	a0,-24(s0)
    80016716:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    8001671a:	fe843703          	ld	a4,-24(s0)
    8001671e:	fe043783          	ld	a5,-32(s0)
    80016722:	00f737b3          	sltu	a5,a4,a5
    80016726:	0017c793          	xori	a5,a5,1
    8001672a:	0ff7f793          	andi	a5,a5,255
}
    8001672e:	853e                	mv	a0,a5
    80016730:	6462                	ld	s0,24(sp)
    80016732:	6105                	addi	sp,sp,32
    80016734:	8082                	ret

0000000080016736 <vector_sort_string_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_ascending) {
    80016736:	1101                	addi	sp,sp,-32
    80016738:	ec06                	sd	ra,24(sp)
    8001673a:	e822                	sd	s0,16(sp)
    8001673c:	1000                	addi	s0,sp,32
    8001673e:	fea43423          	sd	a0,-24(s0)
    80016742:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    80016746:	fe843783          	ld	a5,-24(s0)
    8001674a:	fe043703          	ld	a4,-32(s0)
    8001674e:	85ba                	mv	a1,a4
    80016750:	853e                	mv	a0,a5
    80016752:	fb1fe0ef          	jal	ra,80015702 <strcmp>
    80016756:	87aa                	mv	a5,a0
    80016758:	0017a793          	slti	a5,a5,1
    8001675c:	0ff7f793          	andi	a5,a5,255
}
    80016760:	853e                	mv	a0,a5
    80016762:	60e2                	ld	ra,24(sp)
    80016764:	6442                	ld	s0,16(sp)
    80016766:	6105                	addi	sp,sp,32
    80016768:	8082                	ret

000000008001676a <vector_sort_string_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_descending) {
    8001676a:	1101                	addi	sp,sp,-32
    8001676c:	ec06                	sd	ra,24(sp)
    8001676e:	e822                	sd	s0,16(sp)
    80016770:	1000                	addi	s0,sp,32
    80016772:	fea43423          	sd	a0,-24(s0)
    80016776:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    8001677a:	fe843783          	ld	a5,-24(s0)
    8001677e:	fe043703          	ld	a4,-32(s0)
    80016782:	85ba                	mv	a1,a4
    80016784:	853e                	mv	a0,a5
    80016786:	f7dfe0ef          	jal	ra,80015702 <strcmp>
    8001678a:	87aa                	mv	a5,a0
    8001678c:	fff7c793          	not	a5,a5
    80016790:	01f7d79b          	srliw	a5,a5,0x1f
    80016794:	0ff7f793          	andi	a5,a5,255
}
    80016798:	853e                	mv	a0,a5
    8001679a:	60e2                	ld	ra,24(sp)
    8001679c:	6442                	ld	s0,16(sp)
    8001679e:	6105                	addi	sp,sp,32
    800167a0:	8082                	ret

00000000800167a2 <g_kmalloc>:
void *(*__global_kmalloc)(uint64_t size);
void *(*__global_kcalloc)(uint64_t num, uint64_t size);
void (*__global_kfree)(void *ptr);

void *g_kmalloc(uint64_t size)
{
    800167a2:	1101                	addi	sp,sp,-32
    800167a4:	ec06                	sd	ra,24(sp)
    800167a6:	e822                	sd	s0,16(sp)
    800167a8:	1000                	addi	s0,sp,32
    800167aa:	fea43423          	sd	a0,-24(s0)
    if (__global_kmalloc == NULL) {
    800167ae:	00002797          	auipc	a5,0x2
    800167b2:	86278793          	addi	a5,a5,-1950 # 80018010 <__global_kmalloc>
    800167b6:	639c                	ld	a5,0(a5)
    800167b8:	e399                	bnez	a5,800167be <g_kmalloc+0x1c>
        return NULL;
    800167ba:	4781                	li	a5,0
    800167bc:	a811                	j	800167d0 <g_kmalloc+0x2e>
    }
    return __global_kmalloc(size);
    800167be:	00002797          	auipc	a5,0x2
    800167c2:	85278793          	addi	a5,a5,-1966 # 80018010 <__global_kmalloc>
    800167c6:	639c                	ld	a5,0(a5)
    800167c8:	fe843503          	ld	a0,-24(s0)
    800167cc:	9782                	jalr	a5
    800167ce:	87aa                	mv	a5,a0
}
    800167d0:	853e                	mv	a0,a5
    800167d2:	60e2                	ld	ra,24(sp)
    800167d4:	6442                	ld	s0,16(sp)
    800167d6:	6105                	addi	sp,sp,32
    800167d8:	8082                	ret

00000000800167da <g_kcalloc>:
void *g_kcalloc(uint64_t num, uint64_t size)
{
    800167da:	1101                	addi	sp,sp,-32
    800167dc:	ec06                	sd	ra,24(sp)
    800167de:	e822                	sd	s0,16(sp)
    800167e0:	1000                	addi	s0,sp,32
    800167e2:	fea43423          	sd	a0,-24(s0)
    800167e6:	feb43023          	sd	a1,-32(s0)
    if (__global_kcalloc == NULL) {
    800167ea:	00002797          	auipc	a5,0x2
    800167ee:	82e78793          	addi	a5,a5,-2002 # 80018018 <__global_kcalloc>
    800167f2:	639c                	ld	a5,0(a5)
    800167f4:	e399                	bnez	a5,800167fa <g_kcalloc+0x20>
        return NULL;
    800167f6:	4781                	li	a5,0
    800167f8:	a821                	j	80016810 <g_kcalloc+0x36>
    }
    return __global_kcalloc(num, size);
    800167fa:	00002797          	auipc	a5,0x2
    800167fe:	81e78793          	addi	a5,a5,-2018 # 80018018 <__global_kcalloc>
    80016802:	639c                	ld	a5,0(a5)
    80016804:	fe043583          	ld	a1,-32(s0)
    80016808:	fe843503          	ld	a0,-24(s0)
    8001680c:	9782                	jalr	a5
    8001680e:	87aa                	mv	a5,a0
}
    80016810:	853e                	mv	a0,a5
    80016812:	60e2                	ld	ra,24(sp)
    80016814:	6442                	ld	s0,16(sp)
    80016816:	6105                	addi	sp,sp,32
    80016818:	8082                	ret

000000008001681a <g_kzalloc>:
void *g_kzalloc(uint64_t size)
{
    8001681a:	1101                	addi	sp,sp,-32
    8001681c:	ec06                	sd	ra,24(sp)
    8001681e:	e822                	sd	s0,16(sp)
    80016820:	1000                	addi	s0,sp,32
    80016822:	fea43423          	sd	a0,-24(s0)
    return g_kcalloc(1, size);
    80016826:	fe843583          	ld	a1,-24(s0)
    8001682a:	4505                	li	a0,1
    8001682c:	fafff0ef          	jal	ra,800167da <g_kcalloc>
    80016830:	87aa                	mv	a5,a0
}
    80016832:	853e                	mv	a0,a5
    80016834:	60e2                	ld	ra,24(sp)
    80016836:	6442                	ld	s0,16(sp)
    80016838:	6105                	addi	sp,sp,32
    8001683a:	8082                	ret

000000008001683c <g_kfree>:
void g_kfree(void *ptr)
{
    8001683c:	1101                	addi	sp,sp,-32
    8001683e:	ec06                	sd	ra,24(sp)
    80016840:	e822                	sd	s0,16(sp)
    80016842:	1000                	addi	s0,sp,32
    80016844:	fea43423          	sd	a0,-24(s0)
    if (__global_kfree != NULL) {
    80016848:	00001797          	auipc	a5,0x1
    8001684c:	7d878793          	addi	a5,a5,2008 # 80018020 <__global_kfree>
    80016850:	639c                	ld	a5,0(a5)
    80016852:	cb89                	beqz	a5,80016864 <g_kfree+0x28>
        __global_kfree(ptr);
    80016854:	00001797          	auipc	a5,0x1
    80016858:	7cc78793          	addi	a5,a5,1996 # 80018020 <__global_kfree>
    8001685c:	639c                	ld	a5,0(a5)
    8001685e:	fe843503          	ld	a0,-24(s0)
    80016862:	9782                	jalr	a5
    }
}
    80016864:	0001                	nop
    80016866:	60e2                	ld	ra,24(sp)
    80016868:	6442                	ld	s0,16(sp)
    8001686a:	6105                	addi	sp,sp,32
    8001686c:	8082                	ret

000000008001686e <util_connect_galloc>:

void util_connect_galloc(void *(*malloc)(uint64_t size),
                         void *(*calloc)(uint64_t elem, uint64_t size), void (*free)(void *ptr))
{
    8001686e:	7179                	addi	sp,sp,-48
    80016870:	f422                	sd	s0,40(sp)
    80016872:	1800                	addi	s0,sp,48
    80016874:	fea43423          	sd	a0,-24(s0)
    80016878:	feb43023          	sd	a1,-32(s0)
    8001687c:	fcc43c23          	sd	a2,-40(s0)
    __global_kmalloc = malloc;
    80016880:	00001797          	auipc	a5,0x1
    80016884:	79078793          	addi	a5,a5,1936 # 80018010 <__global_kmalloc>
    80016888:	fe843703          	ld	a4,-24(s0)
    8001688c:	e398                	sd	a4,0(a5)
    __global_kcalloc = calloc;
    8001688e:	00001797          	auipc	a5,0x1
    80016892:	78a78793          	addi	a5,a5,1930 # 80018018 <__global_kcalloc>
    80016896:	fe043703          	ld	a4,-32(s0)
    8001689a:	e398                	sd	a4,0(a5)
    __global_kfree   = free;
    8001689c:	00001797          	auipc	a5,0x1
    800168a0:	78478793          	addi	a5,a5,1924 # 80018020 <__global_kfree>
    800168a4:	fd843703          	ld	a4,-40(s0)
    800168a8:	e398                	sd	a4,0(a5)
}
    800168aa:	0001                	nop
    800168ac:	7422                	ld	s0,40(sp)
    800168ae:	6145                	addi	sp,sp,48
    800168b0:	8082                	ret
