
cosc562.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080010000 <_memory_start>:
    80010000:	fe22                	sd	s0,312(sp)
    80010002:	f1ca                	sd	s2,224(sp)
    80010004:	0bee                	slli	s7,s7,0x1b
    80010006:	dead                	beqz	a3,8000ff80 <i+0x8000ff60>
    80010008:	5ae0                	lw	s0,116(a3)
    8001000a:	8001                	c.srli64	s0
	...

0000000080010102 <copy_from>:
*/
unsigned long copy_from(void *dst, 
                        const struct page_table *from_table, 
                        const void *from, 
                        unsigned long size)
{
    80010102:	7119                	addi	sp,sp,-128
    80010104:	fc86                	sd	ra,120(sp)
    80010106:	f8a2                	sd	s0,112(sp)
    80010108:	0100                	addi	s0,sp,128
    8001010a:	f8a43c23          	sd	a0,-104(s0)
    8001010e:	f8b43823          	sd	a1,-112(s0)
    80010112:	f8c43423          	sd	a2,-120(s0)
    80010116:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    8001011a:	fe043423          	sd	zero,-24(s0)

    unsigned long src_start_addr = (unsigned long)from;
    8001011e:	f8843783          	ld	a5,-120(s0)
    80010122:	fcf43423          	sd	a5,-56(s0)
    unsigned long src_end_addr = (unsigned long)from+size;
    80010126:	f8843783          	ld	a5,-120(s0)
    8001012a:	f8043703          	ld	a4,-128(s0)
    8001012e:	97ba                	add	a5,a5,a4
    80010130:	fcf43023          	sd	a5,-64(s0)
    unsigned long src_first_page = ALIGN_DOWN_POT(src_start_addr, PAGE_SIZE_4K);
    80010134:	fc843703          	ld	a4,-56(s0)
    80010138:	77fd                	lui	a5,0xfffff
    8001013a:	8ff9                	and	a5,a5,a4
    8001013c:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    80010140:	fb843783          	ld	a5,-72(s0)
    80010144:	fef43023          	sd	a5,-32(s0)
    80010148:	a06d                	j	800101f2 <copy_from+0xf0>
        void *physical_address = (void*)mmu_translate(from_table, i);
    8001014a:	fe043583          	ld	a1,-32(s0)
    8001014e:	f9043503          	ld	a0,-112(s0)
    80010152:	2a8030ef          	jal	ra,800133fa <mmu_translate>
    80010156:	87aa                	mv	a5,a0
    80010158:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    8001015c:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == src_start_addr;
    80010160:	fe043703          	ld	a4,-32(s0)
    80010164:	fc843783          	ld	a5,-56(s0)
    80010168:	40f707b3          	sub	a5,a4,a5
    8001016c:	0017b793          	seqz	a5,a5
    80010170:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    80010174:	faf44783          	lbu	a5,-81(s0)
    80010178:	0ff7f793          	andi	a5,a5,255
    8001017c:	cb81                	beqz	a5,8001018c <copy_from+0x8a>
            offset = src_start_addr % PAGE_SIZE_4K;
    8001017e:	fc843703          	ld	a4,-56(s0)
    80010182:	6785                	lui	a5,0x1
    80010184:	17fd                	addi	a5,a5,-1
    80010186:	8ff9                	and	a5,a5,a4
    80010188:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    8001018c:	6785                	lui	a5,0x1
    8001018e:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > src_end_addr) {
    80010192:	fe043703          	ld	a4,-32(s0)
    80010196:	6785                	lui	a5,0x1
    80010198:	97ba                	add	a5,a5,a4
    8001019a:	fc043703          	ld	a4,-64(s0)
    8001019e:	00f77a63          	bgeu	a4,a5,800101b2 <copy_from+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = src_end_addr - i;
    800101a2:	fc043703          	ld	a4,-64(s0)
    800101a6:	fe043783          	ld	a5,-32(s0)
    800101aa:	40f707b3          	sub	a5,a4,a5
    800101ae:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(dst + bytes_copied, physical_address + offset, bytes_to_copy_from_page);
    800101b2:	f9843703          	ld	a4,-104(s0)
    800101b6:	fe843783          	ld	a5,-24(s0)
    800101ba:	00f706b3          	add	a3,a4,a5
    800101be:	fb043703          	ld	a4,-80(s0)
    800101c2:	fd843783          	ld	a5,-40(s0)
    800101c6:	97ba                	add	a5,a5,a4
    800101c8:	fd043703          	ld	a4,-48(s0)
    800101cc:	2701                	sext.w	a4,a4
    800101ce:	863a                	mv	a2,a4
    800101d0:	85be                	mv	a1,a5
    800101d2:	8536                	mv	a0,a3
    800101d4:	1e0060ef          	jal	ra,800163b4 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800101d8:	fe843703          	ld	a4,-24(s0)
    800101dc:	fd043783          	ld	a5,-48(s0)
    800101e0:	97ba                	add	a5,a5,a4
    800101e2:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    800101e6:	fe043703          	ld	a4,-32(s0)
    800101ea:	6785                	lui	a5,0x1
    800101ec:	97ba                	add	a5,a5,a4
    800101ee:	fef43023          	sd	a5,-32(s0)
    800101f2:	fe043703          	ld	a4,-32(s0)
    800101f6:	fc043783          	ld	a5,-64(s0)
    800101fa:	f4f768e3          	bltu	a4,a5,8001014a <copy_from+0x48>
    }

    return bytes_copied;
    800101fe:	fe843783          	ld	a5,-24(s0)
}
    80010202:	853e                	mv	a0,a5
    80010204:	70e6                	ld	ra,120(sp)
    80010206:	7446                	ld	s0,112(sp)
    80010208:	6109                	addi	sp,sp,128
    8001020a:	8082                	ret

000000008001020c <copy_to>:
*/
unsigned long copy_to(void *to, 
                      const struct page_table *to_table, 
                      const void *src, 
                      unsigned long size)
{
    8001020c:	7119                	addi	sp,sp,-128
    8001020e:	fc86                	sd	ra,120(sp)
    80010210:	f8a2                	sd	s0,112(sp)
    80010212:	0100                	addi	s0,sp,128
    80010214:	f8a43c23          	sd	a0,-104(s0)
    80010218:	f8b43823          	sd	a1,-112(s0)
    8001021c:	f8c43423          	sd	a2,-120(s0)
    80010220:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    80010224:	fe043423          	sd	zero,-24(s0)

    unsigned long dst_start_addr = (unsigned long)to;
    80010228:	f9843783          	ld	a5,-104(s0)
    8001022c:	fcf43423          	sd	a5,-56(s0)
    unsigned long dst_end_addr = (unsigned long)to+size;
    80010230:	f9843783          	ld	a5,-104(s0)
    80010234:	f8043703          	ld	a4,-128(s0)
    80010238:	97ba                	add	a5,a5,a4
    8001023a:	fcf43023          	sd	a5,-64(s0)
    unsigned long dst_first_page = ALIGN_DOWN_POT(dst_start_addr, PAGE_SIZE_4K);
    8001023e:	fc843703          	ld	a4,-56(s0)
    80010242:	77fd                	lui	a5,0xfffff
    80010244:	8ff9                	and	a5,a5,a4
    80010246:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    8001024a:	fb843783          	ld	a5,-72(s0)
    8001024e:	fef43023          	sd	a5,-32(s0)
    80010252:	a06d                	j	800102fc <copy_to+0xf0>
        void *physical_address = (void*)mmu_translate(to_table, i);
    80010254:	fe043583          	ld	a1,-32(s0)
    80010258:	f9043503          	ld	a0,-112(s0)
    8001025c:	19e030ef          	jal	ra,800133fa <mmu_translate>
    80010260:	87aa                	mv	a5,a0
    80010262:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    80010266:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == dst_start_addr;
    8001026a:	fe043703          	ld	a4,-32(s0)
    8001026e:	fc843783          	ld	a5,-56(s0)
    80010272:	40f707b3          	sub	a5,a4,a5
    80010276:	0017b793          	seqz	a5,a5
    8001027a:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    8001027e:	faf44783          	lbu	a5,-81(s0)
    80010282:	0ff7f793          	andi	a5,a5,255
    80010286:	cb81                	beqz	a5,80010296 <copy_to+0x8a>
            offset = dst_start_addr % PAGE_SIZE_4K;
    80010288:	fc843703          	ld	a4,-56(s0)
    8001028c:	6785                	lui	a5,0x1
    8001028e:	17fd                	addi	a5,a5,-1
    80010290:	8ff9                	and	a5,a5,a4
    80010292:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    80010296:	6785                	lui	a5,0x1
    80010298:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > dst_end_addr) {
    8001029c:	fe043703          	ld	a4,-32(s0)
    800102a0:	6785                	lui	a5,0x1
    800102a2:	97ba                	add	a5,a5,a4
    800102a4:	fc043703          	ld	a4,-64(s0)
    800102a8:	00f77a63          	bgeu	a4,a5,800102bc <copy_to+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = dst_end_addr - i;
    800102ac:	fc043703          	ld	a4,-64(s0)
    800102b0:	fe043783          	ld	a5,-32(s0)
    800102b4:	40f707b3          	sub	a5,a4,a5
    800102b8:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(physical_address + offset, src + bytes_copied, bytes_to_copy_from_page);
    800102bc:	fb043703          	ld	a4,-80(s0)
    800102c0:	fd843783          	ld	a5,-40(s0)
    800102c4:	00f706b3          	add	a3,a4,a5
    800102c8:	f8843703          	ld	a4,-120(s0)
    800102cc:	fe843783          	ld	a5,-24(s0)
    800102d0:	97ba                	add	a5,a5,a4
    800102d2:	fd043703          	ld	a4,-48(s0)
    800102d6:	2701                	sext.w	a4,a4
    800102d8:	863a                	mv	a2,a4
    800102da:	85be                	mv	a1,a5
    800102dc:	8536                	mv	a0,a3
    800102de:	0d6060ef          	jal	ra,800163b4 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800102e2:	fe843703          	ld	a4,-24(s0)
    800102e6:	fd043783          	ld	a5,-48(s0)
    800102ea:	97ba                	add	a5,a5,a4
    800102ec:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    800102f0:	fe043703          	ld	a4,-32(s0)
    800102f4:	6785                	lui	a5,0x1
    800102f6:	97ba                	add	a5,a5,a4
    800102f8:	fef43023          	sd	a5,-32(s0)
    800102fc:	fe043703          	ld	a4,-32(s0)
    80010300:	fc043783          	ld	a5,-64(s0)
    80010304:	f4f768e3          	bltu	a4,a5,80010254 <copy_to+0x48>
    }

    return bytes_copied;
    80010308:	fe843783          	ld	a5,-24(s0)
    8001030c:	853e                	mv	a0,a5
    8001030e:	70e6                	ld	ra,120(sp)
    80010310:	7446                	ld	s0,112(sp)
    80010312:	6109                	addi	sp,sp,128
    80010314:	8082                	ret

0000000080010316 <syscall_exit>:
    (void)hart;         \
    (void)epc;          \
    (void)scratch

SYSCALL(exit)
{
    80010316:	7179                	addi	sp,sp,-48
    80010318:	f422                	sd	s0,40(sp)
    8001031a:	1800                	addi	s0,sp,48
    8001031c:	87aa                	mv	a5,a0
    8001031e:	feb43023          	sd	a1,-32(s0)
    80010322:	fcc43c23          	sd	a2,-40(s0)
    80010326:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Kill the current process on this HART and schedule the next
    // one.
}
    8001032a:	0001                	nop
    8001032c:	7422                	ld	s0,40(sp)
    8001032e:	6145                	addi	sp,sp,48
    80010330:	8082                	ret

0000000080010332 <syscall_putchar>:

SYSCALL(putchar)
{
    80010332:	7179                	addi	sp,sp,-48
    80010334:	f406                	sd	ra,40(sp)
    80010336:	f022                	sd	s0,32(sp)
    80010338:	1800                	addi	s0,sp,48
    8001033a:	87aa                	mv	a5,a0
    8001033c:	feb43023          	sd	a1,-32(s0)
    80010340:	fcc43c23          	sd	a2,-40(s0)
    80010344:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    sbi_putchar(XREG(A0));
    80010348:	fd843783          	ld	a5,-40(s0)
    8001034c:	05078793          	addi	a5,a5,80 # 1050 <i+0x1030>
    80010350:	639c                	ld	a5,0(a5)
    80010352:	0ff7f793          	andi	a5,a5,255
    80010356:	853e                	mv	a0,a5
    80010358:	2af040ef          	jal	ra,80014e06 <sbi_putchar>
}
    8001035c:	0001                	nop
    8001035e:	70a2                	ld	ra,40(sp)
    80010360:	7402                	ld	s0,32(sp)
    80010362:	6145                	addi	sp,sp,48
    80010364:	8082                	ret

0000000080010366 <syscall_getchar>:

SYSCALL(getchar)
{
    80010366:	7179                	addi	sp,sp,-48
    80010368:	f406                	sd	ra,40(sp)
    8001036a:	f022                	sd	s0,32(sp)
    8001036c:	1800                	addi	s0,sp,48
    8001036e:	87aa                	mv	a5,a0
    80010370:	feb43023          	sd	a1,-32(s0)
    80010374:	fcc43c23          	sd	a2,-40(s0)
    80010378:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    XREG(A0) = sbi_getchar();
    8001037c:	2ad040ef          	jal	ra,80014e28 <sbi_getchar>
    80010380:	87aa                	mv	a5,a0
    80010382:	873e                	mv	a4,a5
    80010384:	fd843783          	ld	a5,-40(s0)
    80010388:	05078793          	addi	a5,a5,80
    8001038c:	e398                	sd	a4,0(a5)
}
    8001038e:	0001                	nop
    80010390:	70a2                	ld	ra,40(sp)
    80010392:	7402                	ld	s0,32(sp)
    80010394:	6145                	addi	sp,sp,48
    80010396:	8082                	ret

0000000080010398 <syscall_yield>:

SYSCALL(yield)
{
    80010398:	7179                	addi	sp,sp,-48
    8001039a:	f422                	sd	s0,40(sp)
    8001039c:	1800                	addi	s0,sp,48
    8001039e:	87aa                	mv	a5,a0
    800103a0:	feb43023          	sd	a1,-32(s0)
    800103a4:	fcc43c23          	sd	a2,-40(s0)
    800103a8:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // sched_invoke(hart);
}
    800103ac:	0001                	nop
    800103ae:	7422                	ld	s0,40(sp)
    800103b0:	6145                	addi	sp,sp,48
    800103b2:	8082                	ret

00000000800103b4 <syscall_sleep>:

SYSCALL(sleep)
{
    800103b4:	7179                	addi	sp,sp,-48
    800103b6:	f422                	sd	s0,40(sp)
    800103b8:	1800                	addi	s0,sp,48
    800103ba:	87aa                	mv	a5,a0
    800103bc:	feb43023          	sd	a1,-32(s0)
    800103c0:	fcc43c23          	sd	a2,-40(s0)
    800103c4:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Sleep the process. VIRT_TIMER_FREQ is 10MHz, divided by 1000, we get 10KHz
    //     p->sleep_until = sbi_get_time() + XREG(A0) * VIRT_TIMER_FREQ / 1000;
    //     p->state = PS_SLEEPING;
}
    800103c8:	0001                	nop
    800103ca:	7422                	ld	s0,40(sp)
    800103cc:	6145                	addi	sp,sp,48
    800103ce:	8082                	ret

00000000800103d0 <syscall_events>:

SYSCALL(events)
{
    800103d0:	7179                	addi	sp,sp,-48
    800103d2:	f422                	sd	s0,40(sp)
    800103d4:	1800                	addi	s0,sp,48
    800103d6:	87aa                	mv	a5,a0
    800103d8:	feb43023          	sd	a1,-32(s0)
    800103dc:	fcc43c23          	sd	a2,-40(s0)
    800103e0:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    
}
    800103e4:	0001                	nop
    800103e6:	7422                	ld	s0,40(sp)
    800103e8:	6145                	addi	sp,sp,48
    800103ea:	8082                	ret

00000000800103ec <syscall_handle>:

static const int NUM_SYSCALLS = sizeof(SYSCALLS) / sizeof(SYSCALLS[0]);

// We get here from the trap.c if this is an ECALL from U-MODE
void syscall_handle(int hart, uint64_t epc, int64_t *scratch)
{
    800103ec:	7179                	addi	sp,sp,-48
    800103ee:	f406                	sd	ra,40(sp)
    800103f0:	f022                	sd	s0,32(sp)
    800103f2:	1800                	addi	s0,sp,48
    800103f4:	87aa                	mv	a5,a0
    800103f6:	feb43023          	sd	a1,-32(s0)
    800103fa:	fcc43c23          	sd	a2,-40(s0)
    800103fe:	fef42623          	sw	a5,-20(s0)
    // Sched invoke will save sepc, so we want it to resume
    // 4 bytes ahead, which will be the next instruction.
    CSR_WRITE("sepc", epc + 4);
    80010402:	fe043783          	ld	a5,-32(s0)
    80010406:	0791                	addi	a5,a5,4
    80010408:	14179073          	csrw	sepc,a5

    if (XREG(A7) >= NUM_SYSCALLS || SYSCALLS[XREG(A7)] == NULL) {
    8001040c:	fd843783          	ld	a5,-40(s0)
    80010410:	08878793          	addi	a5,a5,136
    80010414:	639c                	ld	a5,0(a5)
    80010416:	4719                	li	a4,6
    80010418:	00e7df63          	bge	a5,a4,80010436 <syscall_handle+0x4a>
    8001041c:	fd843783          	ld	a5,-40(s0)
    80010420:	08878793          	addi	a5,a5,136
    80010424:	639c                	ld	a5,0(a5)
    80010426:	0000a717          	auipc	a4,0xa
    8001042a:	bda70713          	addi	a4,a4,-1062 # 8001a000 <SYSCALLS>
    8001042e:	078e                	slli	a5,a5,0x3
    80010430:	97ba                	add	a5,a5,a4
    80010432:	639c                	ld	a5,0(a5)
    80010434:	eb81                	bnez	a5,80010444 <syscall_handle+0x58>
        // Invalid syscall
        XREG(A0) = -EINVAL;
    80010436:	fd843783          	ld	a5,-40(s0)
    8001043a:	05078793          	addi	a5,a5,80
    8001043e:	5729                	li	a4,-22
    80010440:	e398                	sd	a4,0(a5)
    80010442:	a035                	j	8001046e <syscall_handle+0x82>
    }
    else {
        SYSCALL_EXEC(XREG(A7));
    80010444:	fd843783          	ld	a5,-40(s0)
    80010448:	08878793          	addi	a5,a5,136
    8001044c:	639c                	ld	a5,0(a5)
    8001044e:	0000a717          	auipc	a4,0xa
    80010452:	bb270713          	addi	a4,a4,-1102 # 8001a000 <SYSCALLS>
    80010456:	078e                	slli	a5,a5,0x3
    80010458:	97ba                	add	a5,a5,a4
    8001045a:	6398                	ld	a4,0(a5)
    8001045c:	fec42783          	lw	a5,-20(s0)
    80010460:	fd843603          	ld	a2,-40(s0)
    80010464:	fe043583          	ld	a1,-32(s0)
    80010468:	853e                	mv	a0,a5
    8001046a:	9702                	jalr	a4
    }
}
    8001046c:	0001                	nop
    8001046e:	0001                	nop
    80010470:	70a2                	ld	ra,40(sp)
    80010472:	7402                	ld	s0,32(sp)
    80010474:	6145                	addi	sp,sp,48
    80010476:	8082                	ret

0000000080010478 <_putchar>:
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>

#include "sbi.h"
void _putchar(char c) { sbi_putchar(c); }
    80010478:	1101                	addi	sp,sp,-32
    8001047a:	ec06                	sd	ra,24(sp)
    8001047c:	e822                	sd	s0,16(sp)
    8001047e:	1000                	addi	s0,sp,32
    80010480:	87aa                	mv	a5,a0
    80010482:	fef407a3          	sb	a5,-17(s0)
    80010486:	fef44783          	lbu	a5,-17(s0)
    8001048a:	853e                	mv	a0,a5
    8001048c:	17b040ef          	jal	ra,80014e06 <sbi_putchar>
    80010490:	0001                	nop
    80010492:	60e2                	ld	ra,24(sp)
    80010494:	6442                	ld	s0,16(sp)
    80010496:	6105                	addi	sp,sp,32
    80010498:	8082                	ret

000000008001049a <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void *buffer, size_t idx,
                               size_t maxlen)
{
    8001049a:	7179                	addi	sp,sp,-48
    8001049c:	f422                	sd	s0,40(sp)
    8001049e:	1800                	addi	s0,sp,48
    800104a0:	87aa                	mv	a5,a0
    800104a2:	feb43023          	sd	a1,-32(s0)
    800104a6:	fcc43c23          	sd	a2,-40(s0)
    800104aa:	fcd43823          	sd	a3,-48(s0)
    800104ae:	fef407a3          	sb	a5,-17(s0)
    if (idx < maxlen) {
    800104b2:	fd843703          	ld	a4,-40(s0)
    800104b6:	fd043783          	ld	a5,-48(s0)
    800104ba:	00f77b63          	bgeu	a4,a5,800104d0 <_out_buffer+0x36>
        ((char *)buffer)[idx] = character;
    800104be:	fe043703          	ld	a4,-32(s0)
    800104c2:	fd843783          	ld	a5,-40(s0)
    800104c6:	97ba                	add	a5,a5,a4
    800104c8:	fef44703          	lbu	a4,-17(s0)
    800104cc:	00e78023          	sb	a4,0(a5)
    }
}
    800104d0:	0001                	nop
    800104d2:	7422                	ld	s0,40(sp)
    800104d4:	6145                	addi	sp,sp,48
    800104d6:	8082                	ret

00000000800104d8 <_out_null>:

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    800104d8:	7179                	addi	sp,sp,-48
    800104da:	f422                	sd	s0,40(sp)
    800104dc:	1800                	addi	s0,sp,48
    800104de:	87aa                	mv	a5,a0
    800104e0:	feb43023          	sd	a1,-32(s0)
    800104e4:	fcc43c23          	sd	a2,-40(s0)
    800104e8:	fcd43823          	sd	a3,-48(s0)
    800104ec:	fef407a3          	sb	a5,-17(s0)
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
    800104f0:	0001                	nop
    800104f2:	7422                	ld	s0,40(sp)
    800104f4:	6145                	addi	sp,sp,48
    800104f6:	8082                	ret

00000000800104f8 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    800104f8:	7179                	addi	sp,sp,-48
    800104fa:	f406                	sd	ra,40(sp)
    800104fc:	f022                	sd	s0,32(sp)
    800104fe:	1800                	addi	s0,sp,48
    80010500:	87aa                	mv	a5,a0
    80010502:	feb43023          	sd	a1,-32(s0)
    80010506:	fcc43c23          	sd	a2,-40(s0)
    8001050a:	fcd43823          	sd	a3,-48(s0)
    8001050e:	fef407a3          	sb	a5,-17(s0)
    (void)buffer;
    (void)idx;
    (void)maxlen;
    if (character) {
    80010512:	fef44783          	lbu	a5,-17(s0)
    80010516:	0ff7f793          	andi	a5,a5,255
    8001051a:	c791                	beqz	a5,80010526 <_out_char+0x2e>
        _putchar(character);
    8001051c:	fef44783          	lbu	a5,-17(s0)
    80010520:	853e                	mv	a0,a5
    80010522:	f57ff0ef          	jal	ra,80010478 <_putchar>
    }
}
    80010526:	0001                	nop
    80010528:	70a2                	ld	ra,40(sp)
    8001052a:	7402                	ld	s0,32(sp)
    8001052c:	6145                	addi	sp,sp,48
    8001052e:	8082                	ret

0000000080010530 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx,
                            size_t maxlen)
{
    80010530:	7179                	addi	sp,sp,-48
    80010532:	f406                	sd	ra,40(sp)
    80010534:	f022                	sd	s0,32(sp)
    80010536:	1800                	addi	s0,sp,48
    80010538:	87aa                	mv	a5,a0
    8001053a:	feb43023          	sd	a1,-32(s0)
    8001053e:	fcc43c23          	sd	a2,-40(s0)
    80010542:	fcd43823          	sd	a3,-48(s0)
    80010546:	fef407a3          	sb	a5,-17(s0)
    (void)idx;
    (void)maxlen;
    if (character) {
    8001054a:	fef44783          	lbu	a5,-17(s0)
    8001054e:	0ff7f793          	andi	a5,a5,255
    80010552:	cf81                	beqz	a5,8001056a <_out_fct+0x3a>
        // buffer is the output fct pointer
        ((out_fct_wrap_type *)buffer)
            ->fct(character, ((out_fct_wrap_type *)buffer)->arg);
    80010554:	fe043783          	ld	a5,-32(s0)
    80010558:	6394                	ld	a3,0(a5)
        ((out_fct_wrap_type *)buffer)
    8001055a:	fe043783          	ld	a5,-32(s0)
    8001055e:	6798                	ld	a4,8(a5)
    80010560:	fef44783          	lbu	a5,-17(s0)
    80010564:	85ba                	mv	a1,a4
    80010566:	853e                	mv	a0,a5
    80010568:	9682                	jalr	a3
    }
}
    8001056a:	0001                	nop
    8001056c:	70a2                	ld	ra,40(sp)
    8001056e:	7402                	ld	s0,32(sp)
    80010570:	6145                	addi	sp,sp,48
    80010572:	8082                	ret

0000000080010574 <_strnlen_s>:

// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by
// 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize)
{
    80010574:	7179                	addi	sp,sp,-48
    80010576:	f422                	sd	s0,40(sp)
    80010578:	1800                	addi	s0,sp,48
    8001057a:	fca43c23          	sd	a0,-40(s0)
    8001057e:	fcb43823          	sd	a1,-48(s0)
    const char *s;
    for (s = str; *s && maxsize--; ++s)
    80010582:	fd843783          	ld	a5,-40(s0)
    80010586:	fef43423          	sd	a5,-24(s0)
    8001058a:	a031                	j	80010596 <_strnlen_s+0x22>
    8001058c:	fe843783          	ld	a5,-24(s0)
    80010590:	0785                	addi	a5,a5,1
    80010592:	fef43423          	sd	a5,-24(s0)
    80010596:	fe843783          	ld	a5,-24(s0)
    8001059a:	0007c783          	lbu	a5,0(a5)
    8001059e:	cb81                	beqz	a5,800105ae <_strnlen_s+0x3a>
    800105a0:	fd043783          	ld	a5,-48(s0)
    800105a4:	fff78713          	addi	a4,a5,-1
    800105a8:	fce43823          	sd	a4,-48(s0)
    800105ac:	f3e5                	bnez	a5,8001058c <_strnlen_s+0x18>
        ;
    return (unsigned int)(s - str);
    800105ae:	fe843703          	ld	a4,-24(s0)
    800105b2:	fd843783          	ld	a5,-40(s0)
    800105b6:	40f707b3          	sub	a5,a4,a5
    800105ba:	2781                	sext.w	a5,a5
}
    800105bc:	853e                	mv	a0,a5
    800105be:	7422                	ld	s0,40(sp)
    800105c0:	6145                	addi	sp,sp,48
    800105c2:	8082                	ret

00000000800105c4 <_is_digit>:

// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
    800105c4:	1101                	addi	sp,sp,-32
    800105c6:	ec22                	sd	s0,24(sp)
    800105c8:	1000                	addi	s0,sp,32
    800105ca:	87aa                	mv	a5,a0
    800105cc:	fef407a3          	sb	a5,-17(s0)
    800105d0:	fef44783          	lbu	a5,-17(s0)
    800105d4:	0ff7f713          	andi	a4,a5,255
    800105d8:	02f00793          	li	a5,47
    800105dc:	00e7fc63          	bgeu	a5,a4,800105f4 <_is_digit+0x30>
    800105e0:	fef44783          	lbu	a5,-17(s0)
    800105e4:	0ff7f713          	andi	a4,a5,255
    800105e8:	03900793          	li	a5,57
    800105ec:	00e7e463          	bltu	a5,a4,800105f4 <_is_digit+0x30>
    800105f0:	4785                	li	a5,1
    800105f2:	a011                	j	800105f6 <_is_digit+0x32>
    800105f4:	4781                	li	a5,0
    800105f6:	8b85                	andi	a5,a5,1
    800105f8:	0ff7f793          	andi	a5,a5,255
    800105fc:	853e                	mv	a0,a5
    800105fe:	6462                	ld	s0,24(sp)
    80010600:	6105                	addi	sp,sp,32
    80010602:	8082                	ret

0000000080010604 <_atoi>:

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str)
{
    80010604:	7179                	addi	sp,sp,-48
    80010606:	f406                	sd	ra,40(sp)
    80010608:	f022                	sd	s0,32(sp)
    8001060a:	1800                	addi	s0,sp,48
    8001060c:	fca43c23          	sd	a0,-40(s0)
    unsigned int i = 0U;
    80010610:	fe042623          	sw	zero,-20(s0)
    while (_is_digit(**str)) {
    80010614:	a825                	j	8001064c <_atoi+0x48>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
    80010616:	fec42703          	lw	a4,-20(s0)
    8001061a:	87ba                	mv	a5,a4
    8001061c:	0027979b          	slliw	a5,a5,0x2
    80010620:	9fb9                	addw	a5,a5,a4
    80010622:	0017979b          	slliw	a5,a5,0x1
    80010626:	0007871b          	sext.w	a4,a5
    8001062a:	fd843783          	ld	a5,-40(s0)
    8001062e:	639c                	ld	a5,0(a5)
    80010630:	00178613          	addi	a2,a5,1
    80010634:	fd843683          	ld	a3,-40(s0)
    80010638:	e290                	sd	a2,0(a3)
    8001063a:	0007c783          	lbu	a5,0(a5)
    8001063e:	2781                	sext.w	a5,a5
    80010640:	9fb9                	addw	a5,a5,a4
    80010642:	2781                	sext.w	a5,a5
    80010644:	fd07879b          	addiw	a5,a5,-48
    80010648:	fef42623          	sw	a5,-20(s0)
    while (_is_digit(**str)) {
    8001064c:	fd843783          	ld	a5,-40(s0)
    80010650:	639c                	ld	a5,0(a5)
    80010652:	0007c783          	lbu	a5,0(a5)
    80010656:	853e                	mv	a0,a5
    80010658:	f6dff0ef          	jal	ra,800105c4 <_is_digit>
    8001065c:	87aa                	mv	a5,a0
    8001065e:	ffc5                	bnez	a5,80010616 <_atoi+0x12>
    }
    return i;
    80010660:	fec42783          	lw	a5,-20(s0)
}
    80010664:	853e                	mv	a0,a5
    80010666:	70a2                	ld	ra,40(sp)
    80010668:	7402                	ld	s0,32(sp)
    8001066a:	6145                	addi	sp,sp,48
    8001066c:	8082                	ret

000000008001066e <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx,
                       size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags)
{
    8001066e:	711d                	addi	sp,sp,-96
    80010670:	ec86                	sd	ra,88(sp)
    80010672:	e8a2                	sd	s0,80(sp)
    80010674:	1080                	addi	s0,sp,96
    80010676:	fca43c23          	sd	a0,-40(s0)
    8001067a:	fcb43823          	sd	a1,-48(s0)
    8001067e:	fcc43423          	sd	a2,-56(s0)
    80010682:	fcd43023          	sd	a3,-64(s0)
    80010686:	fae43c23          	sd	a4,-72(s0)
    8001068a:	faf43823          	sd	a5,-80(s0)
    8001068e:	87c2                	mv	a5,a6
    80010690:	8746                	mv	a4,a7
    80010692:	faf42623          	sw	a5,-84(s0)
    80010696:	87ba                	mv	a5,a4
    80010698:	faf42423          	sw	a5,-88(s0)
    const size_t start_idx = idx;
    8001069c:	fc843783          	ld	a5,-56(s0)
    800106a0:	fef43023          	sd	a5,-32(s0)

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    800106a4:	fa842783          	lw	a5,-88(s0)
    800106a8:	8b89                	andi	a5,a5,2
    800106aa:	2781                	sext.w	a5,a5
    800106ac:	e3c9                	bnez	a5,8001072e <_out_rev+0xc0>
    800106ae:	fa842783          	lw	a5,-88(s0)
    800106b2:	8b85                	andi	a5,a5,1
    800106b4:	2781                	sext.w	a5,a5
    800106b6:	efa5                	bnez	a5,8001072e <_out_rev+0xc0>
        for (size_t i = len; i < width; i++) {
    800106b8:	fb043783          	ld	a5,-80(s0)
    800106bc:	fef43423          	sd	a5,-24(s0)
    800106c0:	a035                	j	800106ec <_out_rev+0x7e>
            out(' ', buffer, idx++, maxlen);
    800106c2:	fc843783          	ld	a5,-56(s0)
    800106c6:	00178713          	addi	a4,a5,1
    800106ca:	fce43423          	sd	a4,-56(s0)
    800106ce:	fd843703          	ld	a4,-40(s0)
    800106d2:	fc043683          	ld	a3,-64(s0)
    800106d6:	863e                	mv	a2,a5
    800106d8:	fd043583          	ld	a1,-48(s0)
    800106dc:	02000513          	li	a0,32
    800106e0:	9702                	jalr	a4
        for (size_t i = len; i < width; i++) {
    800106e2:	fe843783          	ld	a5,-24(s0)
    800106e6:	0785                	addi	a5,a5,1
    800106e8:	fef43423          	sd	a5,-24(s0)
    800106ec:	fac46783          	lwu	a5,-84(s0)
    800106f0:	fe843703          	ld	a4,-24(s0)
    800106f4:	fcf767e3          	bltu	a4,a5,800106c2 <_out_rev+0x54>
        }
    }

    // reverse string
    while (len) {
    800106f8:	a81d                	j	8001072e <_out_rev+0xc0>
        out(buf[--len], buffer, idx++, maxlen);
    800106fa:	fb043783          	ld	a5,-80(s0)
    800106fe:	17fd                	addi	a5,a5,-1
    80010700:	faf43823          	sd	a5,-80(s0)
    80010704:	fb843703          	ld	a4,-72(s0)
    80010708:	fb043783          	ld	a5,-80(s0)
    8001070c:	97ba                	add	a5,a5,a4
    8001070e:	0007c503          	lbu	a0,0(a5)
    80010712:	fc843783          	ld	a5,-56(s0)
    80010716:	00178713          	addi	a4,a5,1
    8001071a:	fce43423          	sd	a4,-56(s0)
    8001071e:	fd843703          	ld	a4,-40(s0)
    80010722:	fc043683          	ld	a3,-64(s0)
    80010726:	863e                	mv	a2,a5
    80010728:	fd043583          	ld	a1,-48(s0)
    8001072c:	9702                	jalr	a4
    while (len) {
    8001072e:	fb043783          	ld	a5,-80(s0)
    80010732:	f7e1                	bnez	a5,800106fa <_out_rev+0x8c>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
    80010734:	fa842783          	lw	a5,-88(s0)
    80010738:	8b89                	andi	a5,a5,2
    8001073a:	2781                	sext.w	a5,a5
    8001073c:	cb9d                	beqz	a5,80010772 <_out_rev+0x104>
        while (idx - start_idx < width) {
    8001073e:	a00d                	j	80010760 <_out_rev+0xf2>
            out(' ', buffer, idx++, maxlen);
    80010740:	fc843783          	ld	a5,-56(s0)
    80010744:	00178713          	addi	a4,a5,1
    80010748:	fce43423          	sd	a4,-56(s0)
    8001074c:	fd843703          	ld	a4,-40(s0)
    80010750:	fc043683          	ld	a3,-64(s0)
    80010754:	863e                	mv	a2,a5
    80010756:	fd043583          	ld	a1,-48(s0)
    8001075a:	02000513          	li	a0,32
    8001075e:	9702                	jalr	a4
        while (idx - start_idx < width) {
    80010760:	fc843703          	ld	a4,-56(s0)
    80010764:	fe043783          	ld	a5,-32(s0)
    80010768:	8f1d                	sub	a4,a4,a5
    8001076a:	fac46783          	lwu	a5,-84(s0)
    8001076e:	fcf769e3          	bltu	a4,a5,80010740 <_out_rev+0xd2>
        }
    }

    return idx;
    80010772:	fc843783          	ld	a5,-56(s0)
}
    80010776:	853e                	mv	a0,a5
    80010778:	60e6                	ld	ra,88(sp)
    8001077a:	6446                	ld	s0,80(sp)
    8001077c:	6125                	addi	sp,sp,96
    8001077e:	8082                	ret

0000000080010780 <_ntoa_format>:
// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx,
                           size_t maxlen, char *buf, size_t len, bool negative,
                           unsigned int base, unsigned int prec,
                           unsigned int width, unsigned int flags)
{
    80010780:	715d                	addi	sp,sp,-80
    80010782:	e486                	sd	ra,72(sp)
    80010784:	e0a2                	sd	s0,64(sp)
    80010786:	0880                	addi	s0,sp,80
    80010788:	fea43423          	sd	a0,-24(s0)
    8001078c:	feb43023          	sd	a1,-32(s0)
    80010790:	fcc43c23          	sd	a2,-40(s0)
    80010794:	fcd43823          	sd	a3,-48(s0)
    80010798:	fce43423          	sd	a4,-56(s0)
    8001079c:	fcf43023          	sd	a5,-64(s0)
    800107a0:	87c2                	mv	a5,a6
    800107a2:	8746                	mv	a4,a7
    800107a4:	faf40fa3          	sb	a5,-65(s0)
    800107a8:	87ba                	mv	a5,a4
    800107aa:	faf42c23          	sw	a5,-72(s0)
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
    800107ae:	481c                	lw	a5,16(s0)
    800107b0:	8b89                	andi	a5,a5,2
    800107b2:	2781                	sext.w	a5,a5
    800107b4:	ebd1                	bnez	a5,80010848 <_ntoa_format+0xc8>
        if (width && (flags & FLAGS_ZEROPAD) &&
    800107b6:	441c                	lw	a5,8(s0)
    800107b8:	2781                	sext.w	a5,a5
    800107ba:	cf9d                	beqz	a5,800107f8 <_ntoa_format+0x78>
    800107bc:	481c                	lw	a5,16(s0)
    800107be:	8b85                	andi	a5,a5,1
    800107c0:	2781                	sext.w	a5,a5
    800107c2:	cb9d                	beqz	a5,800107f8 <_ntoa_format+0x78>
    800107c4:	fbf44783          	lbu	a5,-65(s0)
    800107c8:	0ff7f793          	andi	a5,a5,255
    800107cc:	e789                	bnez	a5,800107d6 <_ntoa_format+0x56>
            (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    800107ce:	481c                	lw	a5,16(s0)
    800107d0:	8bb1                	andi	a5,a5,12
    800107d2:	2781                	sext.w	a5,a5
    800107d4:	c395                	beqz	a5,800107f8 <_ntoa_format+0x78>
            width--;
    800107d6:	441c                	lw	a5,8(s0)
    800107d8:	37fd                	addiw	a5,a5,-1
    800107da:	c41c                	sw	a5,8(s0)
        }
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    800107dc:	a831                	j	800107f8 <_ntoa_format+0x78>
            buf[len++] = '0';
    800107de:	fc043783          	ld	a5,-64(s0)
    800107e2:	00178713          	addi	a4,a5,1
    800107e6:	fce43023          	sd	a4,-64(s0)
    800107ea:	fc843703          	ld	a4,-56(s0)
    800107ee:	97ba                	add	a5,a5,a4
    800107f0:	03000713          	li	a4,48
    800107f4:	00e78023          	sb	a4,0(a5)
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    800107f8:	00046783          	lwu	a5,0(s0)
    800107fc:	fc043703          	ld	a4,-64(s0)
    80010800:	02f77563          	bgeu	a4,a5,8001082a <_ntoa_format+0xaa>
    80010804:	fc043703          	ld	a4,-64(s0)
    80010808:	47fd                	li	a5,31
    8001080a:	fce7fae3          	bgeu	a5,a4,800107de <_ntoa_format+0x5e>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    8001080e:	a831                	j	8001082a <_ntoa_format+0xaa>
               (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
    80010810:	fc043783          	ld	a5,-64(s0)
    80010814:	00178713          	addi	a4,a5,1
    80010818:	fce43023          	sd	a4,-64(s0)
    8001081c:	fc843703          	ld	a4,-56(s0)
    80010820:	97ba                	add	a5,a5,a4
    80010822:	03000713          	li	a4,48
    80010826:	00e78023          	sb	a4,0(a5)
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    8001082a:	481c                	lw	a5,16(s0)
    8001082c:	8b85                	andi	a5,a5,1
    8001082e:	2781                	sext.w	a5,a5
    80010830:	cf81                	beqz	a5,80010848 <_ntoa_format+0xc8>
    80010832:	00846783          	lwu	a5,8(s0)
    80010836:	fc043703          	ld	a4,-64(s0)
    8001083a:	00f77763          	bgeu	a4,a5,80010848 <_ntoa_format+0xc8>
    8001083e:	fc043703          	ld	a4,-64(s0)
    80010842:	47fd                	li	a5,31
    80010844:	fce7f6e3          	bgeu	a5,a4,80010810 <_ntoa_format+0x90>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
    80010848:	481c                	lw	a5,16(s0)
    8001084a:	8bc1                	andi	a5,a5,16
    8001084c:	2781                	sext.w	a5,a5
    8001084e:	12078363          	beqz	a5,80010974 <_ntoa_format+0x1f4>
        if (!(flags & FLAGS_PRECISION) && len &&
    80010852:	481c                	lw	a5,16(s0)
    80010854:	4007f793          	andi	a5,a5,1024
    80010858:	2781                	sext.w	a5,a5
    8001085a:	e7a1                	bnez	a5,800108a2 <_ntoa_format+0x122>
    8001085c:	fc043783          	ld	a5,-64(s0)
    80010860:	c3a9                	beqz	a5,800108a2 <_ntoa_format+0x122>
            ((len == prec) || (len == width))) {
    80010862:	00046783          	lwu	a5,0(s0)
        if (!(flags & FLAGS_PRECISION) && len &&
    80010866:	fc043703          	ld	a4,-64(s0)
    8001086a:	00f70863          	beq	a4,a5,8001087a <_ntoa_format+0xfa>
            ((len == prec) || (len == width))) {
    8001086e:	00846783          	lwu	a5,8(s0)
    80010872:	fc043703          	ld	a4,-64(s0)
    80010876:	02f71663          	bne	a4,a5,800108a2 <_ntoa_format+0x122>
            len--;
    8001087a:	fc043783          	ld	a5,-64(s0)
    8001087e:	17fd                	addi	a5,a5,-1
    80010880:	fcf43023          	sd	a5,-64(s0)
            if (len && (base == 16U)) {
    80010884:	fc043783          	ld	a5,-64(s0)
    80010888:	cf89                	beqz	a5,800108a2 <_ntoa_format+0x122>
    8001088a:	fb842783          	lw	a5,-72(s0)
    8001088e:	0007871b          	sext.w	a4,a5
    80010892:	47c1                	li	a5,16
    80010894:	00f71763          	bne	a4,a5,800108a2 <_ntoa_format+0x122>
                len--;
    80010898:	fc043783          	ld	a5,-64(s0)
    8001089c:	17fd                	addi	a5,a5,-1
    8001089e:	fcf43023          	sd	a5,-64(s0)
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) &&
    800108a2:	fb842783          	lw	a5,-72(s0)
    800108a6:	0007871b          	sext.w	a4,a5
    800108aa:	47c1                	li	a5,16
    800108ac:	02f71a63          	bne	a4,a5,800108e0 <_ntoa_format+0x160>
    800108b0:	481c                	lw	a5,16(s0)
    800108b2:	0207f793          	andi	a5,a5,32
    800108b6:	2781                	sext.w	a5,a5
    800108b8:	e785                	bnez	a5,800108e0 <_ntoa_format+0x160>
    800108ba:	fc043703          	ld	a4,-64(s0)
    800108be:	47fd                	li	a5,31
    800108c0:	02e7e063          	bltu	a5,a4,800108e0 <_ntoa_format+0x160>
            (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'x';
    800108c4:	fc043783          	ld	a5,-64(s0)
    800108c8:	00178713          	addi	a4,a5,1
    800108cc:	fce43023          	sd	a4,-64(s0)
    800108d0:	fc843703          	ld	a4,-56(s0)
    800108d4:	97ba                	add	a5,a5,a4
    800108d6:	07800713          	li	a4,120
    800108da:	00e78023          	sb	a4,0(a5)
    800108de:	a88d                	j	80010950 <_ntoa_format+0x1d0>
        }
        else if ((base == 16U) && (flags & FLAGS_UPPERCASE) &&
    800108e0:	fb842783          	lw	a5,-72(s0)
    800108e4:	0007871b          	sext.w	a4,a5
    800108e8:	47c1                	li	a5,16
    800108ea:	02f71a63          	bne	a4,a5,8001091e <_ntoa_format+0x19e>
    800108ee:	481c                	lw	a5,16(s0)
    800108f0:	0207f793          	andi	a5,a5,32
    800108f4:	2781                	sext.w	a5,a5
    800108f6:	c785                	beqz	a5,8001091e <_ntoa_format+0x19e>
    800108f8:	fc043703          	ld	a4,-64(s0)
    800108fc:	47fd                	li	a5,31
    800108fe:	02e7e063          	bltu	a5,a4,8001091e <_ntoa_format+0x19e>
                 (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
    80010902:	fc043783          	ld	a5,-64(s0)
    80010906:	00178713          	addi	a4,a5,1
    8001090a:	fce43023          	sd	a4,-64(s0)
    8001090e:	fc843703          	ld	a4,-56(s0)
    80010912:	97ba                	add	a5,a5,a4
    80010914:	05800713          	li	a4,88
    80010918:	00e78023          	sb	a4,0(a5)
    8001091c:	a815                	j	80010950 <_ntoa_format+0x1d0>
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    8001091e:	fb842783          	lw	a5,-72(s0)
    80010922:	0007871b          	sext.w	a4,a5
    80010926:	4789                	li	a5,2
    80010928:	02f71463          	bne	a4,a5,80010950 <_ntoa_format+0x1d0>
    8001092c:	fc043703          	ld	a4,-64(s0)
    80010930:	47fd                	li	a5,31
    80010932:	00e7ef63          	bltu	a5,a4,80010950 <_ntoa_format+0x1d0>
            buf[len++] = 'b';
    80010936:	fc043783          	ld	a5,-64(s0)
    8001093a:	00178713          	addi	a4,a5,1
    8001093e:	fce43023          	sd	a4,-64(s0)
    80010942:	fc843703          	ld	a4,-56(s0)
    80010946:	97ba                	add	a5,a5,a4
    80010948:	06200713          	li	a4,98
    8001094c:	00e78023          	sb	a4,0(a5)
        }
        if (len < PRINTF_NTOA_BUFFER_SIZE) {
    80010950:	fc043703          	ld	a4,-64(s0)
    80010954:	47fd                	li	a5,31
    80010956:	00e7ef63          	bltu	a5,a4,80010974 <_ntoa_format+0x1f4>
            buf[len++] = '0';
    8001095a:	fc043783          	ld	a5,-64(s0)
    8001095e:	00178713          	addi	a4,a5,1
    80010962:	fce43023          	sd	a4,-64(s0)
    80010966:	fc843703          	ld	a4,-56(s0)
    8001096a:	97ba                	add	a5,a5,a4
    8001096c:	03000713          	li	a4,48
    80010970:	00e78023          	sb	a4,0(a5)
        }
    }

    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    80010974:	fc043703          	ld	a4,-64(s0)
    80010978:	47fd                	li	a5,31
    8001097a:	06e7e863          	bltu	a5,a4,800109ea <_ntoa_format+0x26a>
        if (negative) {
    8001097e:	fbf44783          	lbu	a5,-65(s0)
    80010982:	0ff7f793          	andi	a5,a5,255
    80010986:	cf99                	beqz	a5,800109a4 <_ntoa_format+0x224>
            buf[len++] = '-';
    80010988:	fc043783          	ld	a5,-64(s0)
    8001098c:	00178713          	addi	a4,a5,1
    80010990:	fce43023          	sd	a4,-64(s0)
    80010994:	fc843703          	ld	a4,-56(s0)
    80010998:	97ba                	add	a5,a5,a4
    8001099a:	02d00713          	li	a4,45
    8001099e:	00e78023          	sb	a4,0(a5)
    800109a2:	a0a1                	j	800109ea <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_PLUS) {
    800109a4:	481c                	lw	a5,16(s0)
    800109a6:	8b91                	andi	a5,a5,4
    800109a8:	2781                	sext.w	a5,a5
    800109aa:	cf99                	beqz	a5,800109c8 <_ntoa_format+0x248>
            buf[len++] = '+';  // ignore the space if the '+' exists
    800109ac:	fc043783          	ld	a5,-64(s0)
    800109b0:	00178713          	addi	a4,a5,1
    800109b4:	fce43023          	sd	a4,-64(s0)
    800109b8:	fc843703          	ld	a4,-56(s0)
    800109bc:	97ba                	add	a5,a5,a4
    800109be:	02b00713          	li	a4,43
    800109c2:	00e78023          	sb	a4,0(a5)
    800109c6:	a015                	j	800109ea <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_SPACE) {
    800109c8:	481c                	lw	a5,16(s0)
    800109ca:	8ba1                	andi	a5,a5,8
    800109cc:	2781                	sext.w	a5,a5
    800109ce:	cf91                	beqz	a5,800109ea <_ntoa_format+0x26a>
            buf[len++] = ' ';
    800109d0:	fc043783          	ld	a5,-64(s0)
    800109d4:	00178713          	addi	a4,a5,1
    800109d8:	fce43023          	sd	a4,-64(s0)
    800109dc:	fc843703          	ld	a4,-56(s0)
    800109e0:	97ba                	add	a5,a5,a4
    800109e2:	02000713          	li	a4,32
    800109e6:	00e78023          	sb	a4,0(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    800109ea:	4818                	lw	a4,16(s0)
    800109ec:	441c                	lw	a5,8(s0)
    800109ee:	88ba                	mv	a7,a4
    800109f0:	883e                	mv	a6,a5
    800109f2:	fc043783          	ld	a5,-64(s0)
    800109f6:	fc843703          	ld	a4,-56(s0)
    800109fa:	fd043683          	ld	a3,-48(s0)
    800109fe:	fd843603          	ld	a2,-40(s0)
    80010a02:	fe043583          	ld	a1,-32(s0)
    80010a06:	fe843503          	ld	a0,-24(s0)
    80010a0a:	c65ff0ef          	jal	ra,8001066e <_out_rev>
    80010a0e:	87aa                	mv	a5,a0
}
    80010a10:	853e                	mv	a0,a5
    80010a12:	60a6                	ld	ra,72(sp)
    80010a14:	6406                	ld	s0,64(sp)
    80010a16:	6161                	addi	sp,sp,80
    80010a18:	8082                	ret

0000000080010a1a <_ntoa_long>:
// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx,
                         size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec,
                         unsigned int width, unsigned int flags)
{
    80010a1a:	7135                	addi	sp,sp,-160
    80010a1c:	ed06                	sd	ra,152(sp)
    80010a1e:	e922                	sd	s0,144(sp)
    80010a20:	1100                	addi	s0,sp,160
    80010a22:	faa43c23          	sd	a0,-72(s0)
    80010a26:	fab43823          	sd	a1,-80(s0)
    80010a2a:	fac43423          	sd	a2,-88(s0)
    80010a2e:	fad43023          	sd	a3,-96(s0)
    80010a32:	f8e43c23          	sd	a4,-104(s0)
    80010a36:	f9043423          	sd	a6,-120(s0)
    80010a3a:	8746                	mv	a4,a7
    80010a3c:	f8f40ba3          	sb	a5,-105(s0)
    80010a40:	87ba                	mv	a5,a4
    80010a42:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    80010a46:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    80010a4a:	f9843783          	ld	a5,-104(s0)
    80010a4e:	e781                	bnez	a5,80010a56 <_ntoa_long+0x3c>
        flags &= ~FLAGS_HASH;
    80010a50:	441c                	lw	a5,8(s0)
    80010a52:	9bbd                	andi	a5,a5,-17
    80010a54:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    80010a56:	441c                	lw	a5,8(s0)
    80010a58:	4007f793          	andi	a5,a5,1024
    80010a5c:	2781                	sext.w	a5,a5
    80010a5e:	c781                	beqz	a5,80010a66 <_ntoa_long+0x4c>
    80010a60:	f9843783          	ld	a5,-104(s0)
    80010a64:	c7c1                	beqz	a5,80010aec <_ntoa_long+0xd2>
        do {
            const char digit = (char)(value % base);
    80010a66:	f9843703          	ld	a4,-104(s0)
    80010a6a:	f8843783          	ld	a5,-120(s0)
    80010a6e:	02f777b3          	remu	a5,a4,a5
    80010a72:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    80010a76:	fe744783          	lbu	a5,-25(s0)
    80010a7a:	0ff7f713          	andi	a4,a5,255
    80010a7e:	47a5                	li	a5,9
    80010a80:	00e7e963          	bltu	a5,a4,80010a92 <_ntoa_long+0x78>
    80010a84:	fe744783          	lbu	a5,-25(s0)
    80010a88:	0307879b          	addiw	a5,a5,48
    80010a8c:	0ff7f793          	andi	a5,a5,255
    80010a90:	a01d                	j	80010ab6 <_ntoa_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    80010a92:	441c                	lw	a5,8(s0)
    80010a94:	0207f793          	andi	a5,a5,32
    80010a98:	2781                	sext.w	a5,a5
    80010a9a:	c781                	beqz	a5,80010aa2 <_ntoa_long+0x88>
    80010a9c:	04100793          	li	a5,65
    80010aa0:	a019                	j	80010aa6 <_ntoa_long+0x8c>
    80010aa2:	06100793          	li	a5,97
    80010aa6:	fe744703          	lbu	a4,-25(s0)
    80010aaa:	9fb9                	addw	a5,a5,a4
    80010aac:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    80010ab0:	37d9                	addiw	a5,a5,-10
    80010ab2:	0ff7f793          	andi	a5,a5,255
    80010ab6:	fe843703          	ld	a4,-24(s0)
    80010aba:	00170693          	addi	a3,a4,1
    80010abe:	fed43423          	sd	a3,-24(s0)
    80010ac2:	ff040693          	addi	a3,s0,-16
    80010ac6:	9736                	add	a4,a4,a3
    80010ac8:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    80010acc:	f9843703          	ld	a4,-104(s0)
    80010ad0:	f8843783          	ld	a5,-120(s0)
    80010ad4:	02f757b3          	divu	a5,a4,a5
    80010ad8:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    80010adc:	f9843783          	ld	a5,-104(s0)
    80010ae0:	c791                	beqz	a5,80010aec <_ntoa_long+0xd2>
    80010ae2:	fe843703          	ld	a4,-24(s0)
    80010ae6:	47fd                	li	a5,31
    80010ae8:	f6e7ffe3          	bgeu	a5,a4,80010a66 <_ntoa_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    80010aec:	f8843783          	ld	a5,-120(s0)
    80010af0:	0007861b          	sext.w	a2,a5
    80010af4:	f9744683          	lbu	a3,-105(s0)
    80010af8:	fc040713          	addi	a4,s0,-64
    80010afc:	441c                	lw	a5,8(s0)
    80010afe:	e83e                	sd	a5,16(sp)
    80010b00:	401c                	lw	a5,0(s0)
    80010b02:	e43e                	sd	a5,8(sp)
    80010b04:	f9042783          	lw	a5,-112(s0)
    80010b08:	e03e                	sd	a5,0(sp)
    80010b0a:	88b2                	mv	a7,a2
    80010b0c:	8836                	mv	a6,a3
    80010b0e:	fe843783          	ld	a5,-24(s0)
    80010b12:	fa043683          	ld	a3,-96(s0)
    80010b16:	fa843603          	ld	a2,-88(s0)
    80010b1a:	fb043583          	ld	a1,-80(s0)
    80010b1e:	fb843503          	ld	a0,-72(s0)
    80010b22:	c5fff0ef          	jal	ra,80010780 <_ntoa_format>
    80010b26:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    80010b28:	853e                	mv	a0,a5
    80010b2a:	60ea                	ld	ra,152(sp)
    80010b2c:	644a                	ld	s0,144(sp)
    80010b2e:	610d                	addi	sp,sp,160
    80010b30:	8082                	ret

0000000080010b32 <_ntoa_long_long>:
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx,
                              size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base,
                              unsigned int prec, unsigned int width,
                              unsigned int flags)
{
    80010b32:	7135                	addi	sp,sp,-160
    80010b34:	ed06                	sd	ra,152(sp)
    80010b36:	e922                	sd	s0,144(sp)
    80010b38:	1100                	addi	s0,sp,160
    80010b3a:	faa43c23          	sd	a0,-72(s0)
    80010b3e:	fab43823          	sd	a1,-80(s0)
    80010b42:	fac43423          	sd	a2,-88(s0)
    80010b46:	fad43023          	sd	a3,-96(s0)
    80010b4a:	f8e43c23          	sd	a4,-104(s0)
    80010b4e:	f9043423          	sd	a6,-120(s0)
    80010b52:	8746                	mv	a4,a7
    80010b54:	f8f40ba3          	sb	a5,-105(s0)
    80010b58:	87ba                	mv	a5,a4
    80010b5a:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    80010b5e:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    80010b62:	f9843783          	ld	a5,-104(s0)
    80010b66:	e781                	bnez	a5,80010b6e <_ntoa_long_long+0x3c>
        flags &= ~FLAGS_HASH;
    80010b68:	441c                	lw	a5,8(s0)
    80010b6a:	9bbd                	andi	a5,a5,-17
    80010b6c:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    80010b6e:	441c                	lw	a5,8(s0)
    80010b70:	4007f793          	andi	a5,a5,1024
    80010b74:	2781                	sext.w	a5,a5
    80010b76:	c781                	beqz	a5,80010b7e <_ntoa_long_long+0x4c>
    80010b78:	f9843783          	ld	a5,-104(s0)
    80010b7c:	c7c1                	beqz	a5,80010c04 <_ntoa_long_long+0xd2>
        do {
            const char digit = (char)(value % base);
    80010b7e:	f9843703          	ld	a4,-104(s0)
    80010b82:	f8843783          	ld	a5,-120(s0)
    80010b86:	02f777b3          	remu	a5,a4,a5
    80010b8a:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    80010b8e:	fe744783          	lbu	a5,-25(s0)
    80010b92:	0ff7f713          	andi	a4,a5,255
    80010b96:	47a5                	li	a5,9
    80010b98:	00e7e963          	bltu	a5,a4,80010baa <_ntoa_long_long+0x78>
    80010b9c:	fe744783          	lbu	a5,-25(s0)
    80010ba0:	0307879b          	addiw	a5,a5,48
    80010ba4:	0ff7f793          	andi	a5,a5,255
    80010ba8:	a01d                	j	80010bce <_ntoa_long_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    80010baa:	441c                	lw	a5,8(s0)
    80010bac:	0207f793          	andi	a5,a5,32
    80010bb0:	2781                	sext.w	a5,a5
    80010bb2:	c781                	beqz	a5,80010bba <_ntoa_long_long+0x88>
    80010bb4:	04100793          	li	a5,65
    80010bb8:	a019                	j	80010bbe <_ntoa_long_long+0x8c>
    80010bba:	06100793          	li	a5,97
    80010bbe:	fe744703          	lbu	a4,-25(s0)
    80010bc2:	9fb9                	addw	a5,a5,a4
    80010bc4:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    80010bc8:	37d9                	addiw	a5,a5,-10
    80010bca:	0ff7f793          	andi	a5,a5,255
    80010bce:	fe843703          	ld	a4,-24(s0)
    80010bd2:	00170693          	addi	a3,a4,1
    80010bd6:	fed43423          	sd	a3,-24(s0)
    80010bda:	ff040693          	addi	a3,s0,-16
    80010bde:	9736                	add	a4,a4,a3
    80010be0:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    80010be4:	f9843703          	ld	a4,-104(s0)
    80010be8:	f8843783          	ld	a5,-120(s0)
    80010bec:	02f757b3          	divu	a5,a4,a5
    80010bf0:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    80010bf4:	f9843783          	ld	a5,-104(s0)
    80010bf8:	c791                	beqz	a5,80010c04 <_ntoa_long_long+0xd2>
    80010bfa:	fe843703          	ld	a4,-24(s0)
    80010bfe:	47fd                	li	a5,31
    80010c00:	f6e7ffe3          	bgeu	a5,a4,80010b7e <_ntoa_long_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    80010c04:	f8843783          	ld	a5,-120(s0)
    80010c08:	0007861b          	sext.w	a2,a5
    80010c0c:	f9744683          	lbu	a3,-105(s0)
    80010c10:	fc040713          	addi	a4,s0,-64
    80010c14:	441c                	lw	a5,8(s0)
    80010c16:	e83e                	sd	a5,16(sp)
    80010c18:	401c                	lw	a5,0(s0)
    80010c1a:	e43e                	sd	a5,8(sp)
    80010c1c:	f9042783          	lw	a5,-112(s0)
    80010c20:	e03e                	sd	a5,0(sp)
    80010c22:	88b2                	mv	a7,a2
    80010c24:	8836                	mv	a6,a3
    80010c26:	fe843783          	ld	a5,-24(s0)
    80010c2a:	fa043683          	ld	a3,-96(s0)
    80010c2e:	fa843603          	ld	a2,-88(s0)
    80010c32:	fb043583          	ld	a1,-80(s0)
    80010c36:	fb843503          	ld	a0,-72(s0)
    80010c3a:	b47ff0ef          	jal	ra,80010780 <_ntoa_format>
    80010c3e:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    80010c40:	853e                	mv	a0,a5
    80010c42:	60ea                	ld	ra,152(sp)
    80010c44:	644a                	ld	s0,144(sp)
    80010c46:	610d                	addi	sp,sp,160
    80010c48:	8082                	ret

0000000080010c4a <_ftoa>:

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    80010c4a:	7135                	addi	sp,sp,-160
    80010c4c:	ed06                	sd	ra,152(sp)
    80010c4e:	e922                	sd	s0,144(sp)
    80010c50:	1100                	addi	s0,sp,160
    80010c52:	f8a43c23          	sd	a0,-104(s0)
    80010c56:	f8b43823          	sd	a1,-112(s0)
    80010c5a:	f8c43423          	sd	a2,-120(s0)
    80010c5e:	f8d43023          	sd	a3,-128(s0)
    80010c62:	f6a43c27          	fsd	fa0,-136(s0)
    80010c66:	863a                	mv	a2,a4
    80010c68:	86be                	mv	a3,a5
    80010c6a:	8742                	mv	a4,a6
    80010c6c:	87b2                	mv	a5,a2
    80010c6e:	f6f42a23          	sw	a5,-140(s0)
    80010c72:	87b6                	mv	a5,a3
    80010c74:	f6f42823          	sw	a5,-144(s0)
    80010c78:	87ba                	mv	a5,a4
    80010c7a:	f6f42623          	sw	a5,-148(s0)
    char buf[PRINTF_FTOA_BUFFER_SIZE];
    size_t len                  = 0U;
    80010c7e:	fe043423          	sd	zero,-24(s0)
    double diff                 = 0.0;
    80010c82:	fc043423          	sd	zero,-56(s0)
    static const double pow10[] = {1,         10,        100,     1000,
                                   10000,     100000,    1000000, 10000000,
                                   100000000, 1000000000};

    // test for special values
    if (value != value)
    80010c86:	f7843707          	fld	fa4,-136(s0)
    80010c8a:	f7843787          	fld	fa5,-136(s0)
    80010c8e:	a2f727d3          	feq.d	a5,fa4,fa5
    80010c92:	eb85                	bnez	a5,80010cc2 <_ftoa+0x78>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    80010c94:	f6c42703          	lw	a4,-148(s0)
    80010c98:	f7042783          	lw	a5,-144(s0)
    80010c9c:	88ba                	mv	a7,a4
    80010c9e:	883e                	mv	a6,a5
    80010ca0:	478d                	li	a5,3
    80010ca2:	00009717          	auipc	a4,0x9
    80010ca6:	38e70713          	addi	a4,a4,910 # 8001a030 <SYSCALLS+0x30>
    80010caa:	f8043683          	ld	a3,-128(s0)
    80010cae:	f8843603          	ld	a2,-120(s0)
    80010cb2:	f9043583          	ld	a1,-112(s0)
    80010cb6:	f9843503          	ld	a0,-104(s0)
    80010cba:	9b5ff0ef          	jal	ra,8001066e <_out_rev>
    80010cbe:	87aa                	mv	a5,a0
    80010cc0:	a1f1                	j	8001118c <_ftoa+0x542>
    if (value < -DBL_MAX)
    80010cc2:	f7843707          	fld	fa4,-136(s0)
    80010cc6:	00009797          	auipc	a5,0x9
    80010cca:	5ba78793          	addi	a5,a5,1466 # 8001a280 <pow10.0+0x50>
    80010cce:	239c                	fld	fa5,0(a5)
    80010cd0:	a2f717d3          	flt.d	a5,fa4,fa5
    80010cd4:	cb85                	beqz	a5,80010d04 <_ftoa+0xba>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    80010cd6:	f6c42703          	lw	a4,-148(s0)
    80010cda:	f7042783          	lw	a5,-144(s0)
    80010cde:	88ba                	mv	a7,a4
    80010ce0:	883e                	mv	a6,a5
    80010ce2:	4791                	li	a5,4
    80010ce4:	00009717          	auipc	a4,0x9
    80010ce8:	35470713          	addi	a4,a4,852 # 8001a038 <SYSCALLS+0x38>
    80010cec:	f8043683          	ld	a3,-128(s0)
    80010cf0:	f8843603          	ld	a2,-120(s0)
    80010cf4:	f9043583          	ld	a1,-112(s0)
    80010cf8:	f9843503          	ld	a0,-104(s0)
    80010cfc:	973ff0ef          	jal	ra,8001066e <_out_rev>
    80010d00:	87aa                	mv	a5,a0
    80010d02:	a169                	j	8001118c <_ftoa+0x542>
    if (value > DBL_MAX)
    80010d04:	f7843707          	fld	fa4,-136(s0)
    80010d08:	00009797          	auipc	a5,0x9
    80010d0c:	58078793          	addi	a5,a5,1408 # 8001a288 <pow10.0+0x58>
    80010d10:	239c                	fld	fa5,0(a5)
    80010d12:	a2e797d3          	flt.d	a5,fa5,fa4
    80010d16:	cba9                	beqz	a5,80010d68 <_ftoa+0x11e>
        return _out_rev(out, buffer, idx, maxlen,
                        (flags & FLAGS_PLUS) ? "fni+" : "fni",
    80010d18:	f6c42783          	lw	a5,-148(s0)
    80010d1c:	8b91                	andi	a5,a5,4
    80010d1e:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    80010d20:	c791                	beqz	a5,80010d2c <_ftoa+0xe2>
    80010d22:	00009717          	auipc	a4,0x9
    80010d26:	31e70713          	addi	a4,a4,798 # 8001a040 <SYSCALLS+0x40>
    80010d2a:	a029                	j	80010d34 <_ftoa+0xea>
    80010d2c:	00009717          	auipc	a4,0x9
    80010d30:	31c70713          	addi	a4,a4,796 # 8001a048 <SYSCALLS+0x48>
                        (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    80010d34:	f6c42783          	lw	a5,-148(s0)
    80010d38:	8b91                	andi	a5,a5,4
    80010d3a:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    80010d3c:	c399                	beqz	a5,80010d42 <_ftoa+0xf8>
    80010d3e:	4791                	li	a5,4
    80010d40:	a011                	j	80010d44 <_ftoa+0xfa>
    80010d42:	478d                	li	a5,3
    80010d44:	f6c42603          	lw	a2,-148(s0)
    80010d48:	f7042683          	lw	a3,-144(s0)
    80010d4c:	88b2                	mv	a7,a2
    80010d4e:	8836                	mv	a6,a3
    80010d50:	f8043683          	ld	a3,-128(s0)
    80010d54:	f8843603          	ld	a2,-120(s0)
    80010d58:	f9043583          	ld	a1,-112(s0)
    80010d5c:	f9843503          	ld	a0,-104(s0)
    80010d60:	90fff0ef          	jal	ra,8001066e <_out_rev>
    80010d64:	87aa                	mv	a5,a0
    80010d66:	a11d                	j	8001118c <_ftoa+0x542>

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which
    // could be 100s of characters overflowing your buffers == bad
    if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    80010d68:	f7843707          	fld	fa4,-136(s0)
    80010d6c:	00009797          	auipc	a5,0x9
    80010d70:	52478793          	addi	a5,a5,1316 # 8001a290 <pow10.0+0x60>
    80010d74:	239c                	fld	fa5,0(a5)
    80010d76:	a2e797d3          	flt.d	a5,fa5,fa4
    80010d7a:	eb99                	bnez	a5,80010d90 <_ftoa+0x146>
    80010d7c:	f7843707          	fld	fa4,-136(s0)
    80010d80:	00009797          	auipc	a5,0x9
    80010d84:	51878793          	addi	a5,a5,1304 # 8001a298 <pow10.0+0x68>
    80010d88:	239c                	fld	fa5,0(a5)
    80010d8a:	a2f717d3          	flt.d	a5,fa4,fa5
    80010d8e:	c795                	beqz	a5,80010dba <_ftoa+0x170>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    80010d90:	f6c42683          	lw	a3,-148(s0)
    80010d94:	f7042783          	lw	a5,-144(s0)
    80010d98:	f7442703          	lw	a4,-140(s0)
    80010d9c:	8836                	mv	a6,a3
    80010d9e:	f7843507          	fld	fa0,-136(s0)
    80010da2:	f8043683          	ld	a3,-128(s0)
    80010da6:	f8843603          	ld	a2,-120(s0)
    80010daa:	f9043583          	ld	a1,-112(s0)
    80010dae:	f9843503          	ld	a0,-104(s0)
    80010db2:	3e4000ef          	jal	ra,80011196 <_etoa>
    80010db6:	87aa                	mv	a5,a0
    80010db8:	aed1                	j	8001118c <_ftoa+0x542>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
    80010dba:	fe0403a3          	sb	zero,-25(s0)
    if (value < 0) {
    80010dbe:	f7843787          	fld	fa5,-136(s0)
    80010dc2:	f2000753          	fmv.d.x	fa4,zero
    80010dc6:	a2e797d3          	flt.d	a5,fa5,fa4
    80010dca:	cf81                	beqz	a5,80010de2 <_ftoa+0x198>
        negative = true;
    80010dcc:	4785                	li	a5,1
    80010dce:	fef403a3          	sb	a5,-25(s0)
        value    = 0 - value;
    80010dd2:	f2000753          	fmv.d.x	fa4,zero
    80010dd6:	f7843787          	fld	fa5,-136(s0)
    80010dda:	0af777d3          	fsub.d	fa5,fa4,fa5
    80010dde:	f6f43c27          	fsd	fa5,-136(s0)
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
    80010de2:	f6c42783          	lw	a5,-148(s0)
    80010de6:	4007f793          	andi	a5,a5,1024
    80010dea:	2781                	sext.w	a5,a5
    80010dec:	e79d                	bnez	a5,80010e1a <_ftoa+0x1d0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    80010dee:	4799                	li	a5,6
    80010df0:	f6f42a23          	sw	a5,-140(s0)
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    80010df4:	a01d                	j	80010e1a <_ftoa+0x1d0>
        buf[len++] = '0';
    80010df6:	fe843783          	ld	a5,-24(s0)
    80010dfa:	00178713          	addi	a4,a5,1
    80010dfe:	fee43423          	sd	a4,-24(s0)
    80010e02:	ff040713          	addi	a4,s0,-16
    80010e06:	97ba                	add	a5,a5,a4
    80010e08:	03000713          	li	a4,48
    80010e0c:	fae78823          	sb	a4,-80(a5)
        prec--;
    80010e10:	f7442783          	lw	a5,-140(s0)
    80010e14:	37fd                	addiw	a5,a5,-1
    80010e16:	f6f42a23          	sw	a5,-140(s0)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    80010e1a:	fe843703          	ld	a4,-24(s0)
    80010e1e:	47fd                	li	a5,31
    80010e20:	00e7e963          	bltu	a5,a4,80010e32 <_ftoa+0x1e8>
    80010e24:	f7442783          	lw	a5,-140(s0)
    80010e28:	0007871b          	sext.w	a4,a5
    80010e2c:	47a5                	li	a5,9
    80010e2e:	fce7e4e3          	bltu	a5,a4,80010df6 <_ftoa+0x1ac>
    }

    int whole          = (int)value;
    80010e32:	f7843787          	fld	fa5,-136(s0)
    80010e36:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80010e3a:	fef42023          	sw	a5,-32(s0)
    double tmp         = (value - whole) * pow10[prec];
    80010e3e:	fe042783          	lw	a5,-32(s0)
    80010e42:	d20787d3          	fcvt.d.w	fa5,a5
    80010e46:	f7843707          	fld	fa4,-136(s0)
    80010e4a:	0af77753          	fsub.d	fa4,fa4,fa5
    80010e4e:	00009717          	auipc	a4,0x9
    80010e52:	3e270713          	addi	a4,a4,994 # 8001a230 <pow10.0>
    80010e56:	f7446783          	lwu	a5,-140(s0)
    80010e5a:	078e                	slli	a5,a5,0x3
    80010e5c:	97ba                	add	a5,a5,a4
    80010e5e:	239c                	fld	fa5,0(a5)
    80010e60:	12f777d3          	fmul.d	fa5,fa4,fa5
    80010e64:	fcf43027          	fsd	fa5,-64(s0)
    unsigned long frac = (unsigned long)tmp;
    80010e68:	fc043787          	fld	fa5,-64(s0)
    80010e6c:	c23797d3          	fcvt.lu.d	a5,fa5,rtz
    80010e70:	fcf43c23          	sd	a5,-40(s0)
    diff               = tmp - frac;
    80010e74:	fd843783          	ld	a5,-40(s0)
    80010e78:	d237f7d3          	fcvt.d.lu	fa5,a5
    80010e7c:	fc043707          	fld	fa4,-64(s0)
    80010e80:	0af777d3          	fsub.d	fa5,fa4,fa5
    80010e84:	fcf43427          	fsd	fa5,-56(s0)

    if (diff > 0.5) {
    80010e88:	fc843707          	fld	fa4,-56(s0)
    80010e8c:	00009797          	auipc	a5,0x9
    80010e90:	41478793          	addi	a5,a5,1044 # 8001a2a0 <pow10.0+0x70>
    80010e94:	239c                	fld	fa5,0(a5)
    80010e96:	a2e797d3          	flt.d	a5,fa5,fa4
    80010e9a:	cf95                	beqz	a5,80010ed6 <_ftoa+0x28c>
        ++frac;
    80010e9c:	fd843783          	ld	a5,-40(s0)
    80010ea0:	0785                	addi	a5,a5,1
    80010ea2:	fcf43c23          	sd	a5,-40(s0)
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
    80010ea6:	fd843783          	ld	a5,-40(s0)
    80010eaa:	d237f753          	fcvt.d.lu	fa4,a5
    80010eae:	00009717          	auipc	a4,0x9
    80010eb2:	38270713          	addi	a4,a4,898 # 8001a230 <pow10.0>
    80010eb6:	f7446783          	lwu	a5,-140(s0)
    80010eba:	078e                	slli	a5,a5,0x3
    80010ebc:	97ba                	add	a5,a5,a4
    80010ebe:	239c                	fld	fa5,0(a5)
    80010ec0:	a2e787d3          	fle.d	a5,fa5,fa4
    80010ec4:	cf9d                	beqz	a5,80010f02 <_ftoa+0x2b8>
            frac = 0;
    80010ec6:	fc043c23          	sd	zero,-40(s0)
            ++whole;
    80010eca:	fe042783          	lw	a5,-32(s0)
    80010ece:	2785                	addiw	a5,a5,1
    80010ed0:	fef42023          	sw	a5,-32(s0)
    80010ed4:	a03d                	j	80010f02 <_ftoa+0x2b8>
        }
    }
    else if (diff < 0.5) {
    80010ed6:	fc843707          	fld	fa4,-56(s0)
    80010eda:	00009797          	auipc	a5,0x9
    80010ede:	3c678793          	addi	a5,a5,966 # 8001a2a0 <pow10.0+0x70>
    80010ee2:	239c                	fld	fa5,0(a5)
    80010ee4:	a2f717d3          	flt.d	a5,fa4,fa5
    80010ee8:	ef89                	bnez	a5,80010f02 <_ftoa+0x2b8>
    }
    else if ((frac == 0U) || (frac & 1U)) {
    80010eea:	fd843783          	ld	a5,-40(s0)
    80010eee:	c789                	beqz	a5,80010ef8 <_ftoa+0x2ae>
    80010ef0:	fd843783          	ld	a5,-40(s0)
    80010ef4:	8b85                	andi	a5,a5,1
    80010ef6:	c791                	beqz	a5,80010f02 <_ftoa+0x2b8>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
    80010ef8:	fd843783          	ld	a5,-40(s0)
    80010efc:	0785                	addi	a5,a5,1
    80010efe:	fcf43c23          	sd	a5,-40(s0)
    }

    if (prec == 0U) {
    80010f02:	f7442783          	lw	a5,-140(s0)
    80010f06:	2781                	sext.w	a5,a5
    80010f08:	e3bd                	bnez	a5,80010f6e <_ftoa+0x324>
        diff = value - (double)whole;
    80010f0a:	fe042783          	lw	a5,-32(s0)
    80010f0e:	d20787d3          	fcvt.d.w	fa5,a5
    80010f12:	f7843707          	fld	fa4,-136(s0)
    80010f16:	0af777d3          	fsub.d	fa5,fa4,fa5
    80010f1a:	fcf43427          	fsd	fa5,-56(s0)
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    80010f1e:	fc843707          	fld	fa4,-56(s0)
    80010f22:	00009797          	auipc	a5,0x9
    80010f26:	37e78793          	addi	a5,a5,894 # 8001a2a0 <pow10.0+0x70>
    80010f2a:	239c                	fld	fa5,0(a5)
    80010f2c:	a2f717d3          	flt.d	a5,fa4,fa5
    80010f30:	00f037b3          	snez	a5,a5
    80010f34:	0ff7f793          	andi	a5,a5,255
    80010f38:	0017c793          	xori	a5,a5,1
    80010f3c:	0ff7f793          	andi	a5,a5,255
    80010f40:	eb99                	bnez	a5,80010f56 <_ftoa+0x30c>
    80010f42:	fc843707          	fld	fa4,-56(s0)
    80010f46:	00009797          	auipc	a5,0x9
    80010f4a:	35a78793          	addi	a5,a5,858 # 8001a2a0 <pow10.0+0x70>
    80010f4e:	239c                	fld	fa5,0(a5)
    80010f50:	a2e797d3          	flt.d	a5,fa5,fa4
    80010f54:	cbf1                	beqz	a5,80011028 <_ftoa+0x3de>
    80010f56:	fe042783          	lw	a5,-32(s0)
    80010f5a:	8b85                	andi	a5,a5,1
    80010f5c:	2781                	sext.w	a5,a5
    80010f5e:	10078863          	beqz	a5,8001106e <_ftoa+0x424>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
    80010f62:	fe042783          	lw	a5,-32(s0)
    80010f66:	2785                	addiw	a5,a5,1
    80010f68:	fef42023          	sw	a5,-32(s0)
    80010f6c:	a209                	j	8001106e <_ftoa+0x424>
        }
    }
    else {
        unsigned int count = prec;
    80010f6e:	f7442783          	lw	a5,-140(s0)
    80010f72:	fcf42a23          	sw	a5,-44(s0)
        // now do fractional part, as an unsigned number
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80010f76:	a0b1                	j	80010fc2 <_ftoa+0x378>
            --count;
    80010f78:	fd442783          	lw	a5,-44(s0)
    80010f7c:	37fd                	addiw	a5,a5,-1
    80010f7e:	fcf42a23          	sw	a5,-44(s0)
            buf[len++] = (char)(48U + (frac % 10U));
    80010f82:	fd843703          	ld	a4,-40(s0)
    80010f86:	47a9                	li	a5,10
    80010f88:	02f777b3          	remu	a5,a4,a5
    80010f8c:	0ff7f713          	andi	a4,a5,255
    80010f90:	fe843783          	ld	a5,-24(s0)
    80010f94:	00178693          	addi	a3,a5,1
    80010f98:	fed43423          	sd	a3,-24(s0)
    80010f9c:	0307071b          	addiw	a4,a4,48
    80010fa0:	0ff77713          	andi	a4,a4,255
    80010fa4:	ff040693          	addi	a3,s0,-16
    80010fa8:	97b6                	add	a5,a5,a3
    80010faa:	fae78823          	sb	a4,-80(a5)
            if (!(frac /= 10U)) {
    80010fae:	fd843703          	ld	a4,-40(s0)
    80010fb2:	47a9                	li	a5,10
    80010fb4:	02f757b3          	divu	a5,a4,a5
    80010fb8:	fcf43c23          	sd	a5,-40(s0)
    80010fbc:	fd843783          	ld	a5,-40(s0)
    80010fc0:	c799                	beqz	a5,80010fce <_ftoa+0x384>
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80010fc2:	fe843703          	ld	a4,-24(s0)
    80010fc6:	47fd                	li	a5,31
    80010fc8:	fae7f8e3          	bgeu	a5,a4,80010f78 <_ftoa+0x32e>
    80010fcc:	a005                	j	80010fec <_ftoa+0x3a2>
                break;
    80010fce:	0001                	nop
            }
        }
        // add extra 0s
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    80010fd0:	a831                	j	80010fec <_ftoa+0x3a2>
            buf[len++] = '0';
    80010fd2:	fe843783          	ld	a5,-24(s0)
    80010fd6:	00178713          	addi	a4,a5,1
    80010fda:	fee43423          	sd	a4,-24(s0)
    80010fde:	ff040713          	addi	a4,s0,-16
    80010fe2:	97ba                	add	a5,a5,a4
    80010fe4:	03000713          	li	a4,48
    80010fe8:	fae78823          	sb	a4,-80(a5)
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    80010fec:	fe843703          	ld	a4,-24(s0)
    80010ff0:	47fd                	li	a5,31
    80010ff2:	00e7e963          	bltu	a5,a4,80011004 <_ftoa+0x3ba>
    80010ff6:	fd442783          	lw	a5,-44(s0)
    80010ffa:	fff7871b          	addiw	a4,a5,-1
    80010ffe:	fce42a23          	sw	a4,-44(s0)
    80011002:	fbe1                	bnez	a5,80010fd2 <_ftoa+0x388>
        }
        if (len < PRINTF_FTOA_BUFFER_SIZE) {
    80011004:	fe843703          	ld	a4,-24(s0)
    80011008:	47fd                	li	a5,31
    8001100a:	06e7e263          	bltu	a5,a4,8001106e <_ftoa+0x424>
            // add decimal
            buf[len++] = '.';
    8001100e:	fe843783          	ld	a5,-24(s0)
    80011012:	00178713          	addi	a4,a5,1
    80011016:	fee43423          	sd	a4,-24(s0)
    8001101a:	ff040713          	addi	a4,s0,-16
    8001101e:	97ba                	add	a5,a5,a4
    80011020:	02e00713          	li	a4,46
    80011024:	fae78823          	sb	a4,-80(a5)
        }
    }

    // do whole part, number is reversed
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80011028:	a099                	j	8001106e <_ftoa+0x424>
        buf[len++] = (char)(48 + (whole % 10));
    8001102a:	fe042703          	lw	a4,-32(s0)
    8001102e:	47a9                	li	a5,10
    80011030:	02f767bb          	remw	a5,a4,a5
    80011034:	2781                	sext.w	a5,a5
    80011036:	0ff7f713          	andi	a4,a5,255
    8001103a:	fe843783          	ld	a5,-24(s0)
    8001103e:	00178693          	addi	a3,a5,1
    80011042:	fed43423          	sd	a3,-24(s0)
    80011046:	0307071b          	addiw	a4,a4,48
    8001104a:	0ff77713          	andi	a4,a4,255
    8001104e:	ff040693          	addi	a3,s0,-16
    80011052:	97b6                	add	a5,a5,a3
    80011054:	fae78823          	sb	a4,-80(a5)
        if (!(whole /= 10)) {
    80011058:	fe042703          	lw	a4,-32(s0)
    8001105c:	47a9                	li	a5,10
    8001105e:	02f747bb          	divw	a5,a4,a5
    80011062:	fef42023          	sw	a5,-32(s0)
    80011066:	fe042783          	lw	a5,-32(s0)
    8001106a:	2781                	sext.w	a5,a5
    8001106c:	c799                	beqz	a5,8001107a <_ftoa+0x430>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    8001106e:	fe843703          	ld	a4,-24(s0)
    80011072:	47fd                	li	a5,31
    80011074:	fae7fbe3          	bgeu	a5,a4,8001102a <_ftoa+0x3e0>
    80011078:	a011                	j	8001107c <_ftoa+0x432>
            break;
    8001107a:	0001                	nop
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    8001107c:	f6c42783          	lw	a5,-148(s0)
    80011080:	8b89                	andi	a5,a5,2
    80011082:	2781                	sext.w	a5,a5
    80011084:	e3b5                	bnez	a5,800110e8 <_ftoa+0x49e>
    80011086:	f6c42783          	lw	a5,-148(s0)
    8001108a:	8b85                	andi	a5,a5,1
    8001108c:	2781                	sext.w	a5,a5
    8001108e:	cfa9                	beqz	a5,800110e8 <_ftoa+0x49e>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    80011090:	f7042783          	lw	a5,-144(s0)
    80011094:	2781                	sext.w	a5,a5
    80011096:	cf95                	beqz	a5,800110d2 <_ftoa+0x488>
    80011098:	fe744783          	lbu	a5,-25(s0)
    8001109c:	0ff7f793          	andi	a5,a5,255
    800110a0:	e791                	bnez	a5,800110ac <_ftoa+0x462>
    800110a2:	f6c42783          	lw	a5,-148(s0)
    800110a6:	8bb1                	andi	a5,a5,12
    800110a8:	2781                	sext.w	a5,a5
    800110aa:	c785                	beqz	a5,800110d2 <_ftoa+0x488>
            width--;
    800110ac:	f7042783          	lw	a5,-144(s0)
    800110b0:	37fd                	addiw	a5,a5,-1
    800110b2:	f6f42823          	sw	a5,-144(s0)
        }
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    800110b6:	a831                	j	800110d2 <_ftoa+0x488>
            buf[len++] = '0';
    800110b8:	fe843783          	ld	a5,-24(s0)
    800110bc:	00178713          	addi	a4,a5,1
    800110c0:	fee43423          	sd	a4,-24(s0)
    800110c4:	ff040713          	addi	a4,s0,-16
    800110c8:	97ba                	add	a5,a5,a4
    800110ca:	03000713          	li	a4,48
    800110ce:	fae78823          	sb	a4,-80(a5)
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    800110d2:	f7046783          	lwu	a5,-144(s0)
    800110d6:	fe843703          	ld	a4,-24(s0)
    800110da:	00f77763          	bgeu	a4,a5,800110e8 <_ftoa+0x49e>
    800110de:	fe843703          	ld	a4,-24(s0)
    800110e2:	47fd                	li	a5,31
    800110e4:	fce7fae3          	bgeu	a5,a4,800110b8 <_ftoa+0x46e>
        }
    }

    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    800110e8:	fe843703          	ld	a4,-24(s0)
    800110ec:	47fd                	li	a5,31
    800110ee:	06e7ea63          	bltu	a5,a4,80011162 <_ftoa+0x518>
        if (negative) {
    800110f2:	fe744783          	lbu	a5,-25(s0)
    800110f6:	0ff7f793          	andi	a5,a5,255
    800110fa:	cf99                	beqz	a5,80011118 <_ftoa+0x4ce>
            buf[len++] = '-';
    800110fc:	fe843783          	ld	a5,-24(s0)
    80011100:	00178713          	addi	a4,a5,1
    80011104:	fee43423          	sd	a4,-24(s0)
    80011108:	ff040713          	addi	a4,s0,-16
    8001110c:	97ba                	add	a5,a5,a4
    8001110e:	02d00713          	li	a4,45
    80011112:	fae78823          	sb	a4,-80(a5)
    80011116:	a0b1                	j	80011162 <_ftoa+0x518>
        }
        else if (flags & FLAGS_PLUS) {
    80011118:	f6c42783          	lw	a5,-148(s0)
    8001111c:	8b91                	andi	a5,a5,4
    8001111e:	2781                	sext.w	a5,a5
    80011120:	cf99                	beqz	a5,8001113e <_ftoa+0x4f4>
            buf[len++] = '+';  // ignore the space if the '+' exists
    80011122:	fe843783          	ld	a5,-24(s0)
    80011126:	00178713          	addi	a4,a5,1
    8001112a:	fee43423          	sd	a4,-24(s0)
    8001112e:	ff040713          	addi	a4,s0,-16
    80011132:	97ba                	add	a5,a5,a4
    80011134:	02b00713          	li	a4,43
    80011138:	fae78823          	sb	a4,-80(a5)
    8001113c:	a01d                	j	80011162 <_ftoa+0x518>
        }
        else if (flags & FLAGS_SPACE) {
    8001113e:	f6c42783          	lw	a5,-148(s0)
    80011142:	8ba1                	andi	a5,a5,8
    80011144:	2781                	sext.w	a5,a5
    80011146:	cf91                	beqz	a5,80011162 <_ftoa+0x518>
            buf[len++] = ' ';
    80011148:	fe843783          	ld	a5,-24(s0)
    8001114c:	00178713          	addi	a4,a5,1
    80011150:	fee43423          	sd	a4,-24(s0)
    80011154:	ff040713          	addi	a4,s0,-16
    80011158:	97ba                	add	a5,a5,a4
    8001115a:	02000713          	li	a4,32
    8001115e:	fae78823          	sb	a4,-80(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    80011162:	f6c42683          	lw	a3,-148(s0)
    80011166:	f7042783          	lw	a5,-144(s0)
    8001116a:	fa040713          	addi	a4,s0,-96
    8001116e:	88b6                	mv	a7,a3
    80011170:	883e                	mv	a6,a5
    80011172:	fe843783          	ld	a5,-24(s0)
    80011176:	f8043683          	ld	a3,-128(s0)
    8001117a:	f8843603          	ld	a2,-120(s0)
    8001117e:	f9043583          	ld	a1,-112(s0)
    80011182:	f9843503          	ld	a0,-104(s0)
    80011186:	ce8ff0ef          	jal	ra,8001066e <_out_rev>
    8001118a:	87aa                	mv	a5,a0
}
    8001118c:	853e                	mv	a0,a5
    8001118e:	60ea                	ld	ra,152(sp)
    80011190:	644a                	ld	s0,144(sp)
    80011192:	610d                	addi	sp,sp,160
    80011194:	8082                	ret

0000000080011196 <_etoa>:
// internal ftoa variant for exponential floating-point type, contributed by
// Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    80011196:	7135                	addi	sp,sp,-160
    80011198:	ed06                	sd	ra,152(sp)
    8001119a:	e922                	sd	s0,144(sp)
    8001119c:	1100                	addi	s0,sp,160
    8001119e:	faa43423          	sd	a0,-88(s0)
    800111a2:	fab43023          	sd	a1,-96(s0)
    800111a6:	f8c43c23          	sd	a2,-104(s0)
    800111aa:	f8d43823          	sd	a3,-112(s0)
    800111ae:	f8a43427          	fsd	fa0,-120(s0)
    800111b2:	863a                	mv	a2,a4
    800111b4:	86be                	mv	a3,a5
    800111b6:	8742                	mv	a4,a6
    800111b8:	87b2                	mv	a5,a2
    800111ba:	f8f42223          	sw	a5,-124(s0)
    800111be:	87b6                	mv	a5,a3
    800111c0:	f8f42023          	sw	a5,-128(s0)
    800111c4:	87ba                	mv	a5,a4
    800111c6:	f6f42e23          	sw	a5,-132(s0)
    // check for NaN and special values
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    800111ca:	f8843707          	fld	fa4,-120(s0)
    800111ce:	f8843787          	fld	fa5,-120(s0)
    800111d2:	a2f727d3          	feq.d	a5,fa4,fa5
    800111d6:	c78d                	beqz	a5,80011200 <_etoa+0x6a>
    800111d8:	f8843707          	fld	fa4,-120(s0)
    800111dc:	00009797          	auipc	a5,0x9
    800111e0:	0ac78793          	addi	a5,a5,172 # 8001a288 <pow10.0+0x58>
    800111e4:	239c                	fld	fa5,0(a5)
    800111e6:	a2e797d3          	flt.d	a5,fa5,fa4
    800111ea:	eb99                	bnez	a5,80011200 <_etoa+0x6a>
    800111ec:	f8843707          	fld	fa4,-120(s0)
    800111f0:	00009797          	auipc	a5,0x9
    800111f4:	09078793          	addi	a5,a5,144 # 8001a280 <pow10.0+0x50>
    800111f8:	239c                	fld	fa5,0(a5)
    800111fa:	a2f717d3          	flt.d	a5,fa4,fa5
    800111fe:	c795                	beqz	a5,8001122a <_etoa+0x94>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    80011200:	f7c42683          	lw	a3,-132(s0)
    80011204:	f8042783          	lw	a5,-128(s0)
    80011208:	f8442703          	lw	a4,-124(s0)
    8001120c:	8836                	mv	a6,a3
    8001120e:	f8843507          	fld	fa0,-120(s0)
    80011212:	f9043683          	ld	a3,-112(s0)
    80011216:	f9843603          	ld	a2,-104(s0)
    8001121a:	fa043583          	ld	a1,-96(s0)
    8001121e:	fa843503          	ld	a0,-88(s0)
    80011222:	a29ff0ef          	jal	ra,80010c4a <_ftoa>
    80011226:	87aa                	mv	a5,a0
    80011228:	a11d                	j	8001164e <_etoa+0x4b8>
    }

    // determine the sign
    const bool negative = value < 0;
    8001122a:	f8843787          	fld	fa5,-120(s0)
    8001122e:	f2000753          	fmv.d.x	fa4,zero
    80011232:	a2e797d3          	flt.d	a5,fa5,fa4
    80011236:	00f037b3          	snez	a5,a5
    8001123a:	fef401a3          	sb	a5,-29(s0)
    if (negative) {
    8001123e:	fe344783          	lbu	a5,-29(s0)
    80011242:	0ff7f793          	andi	a5,a5,255
    80011246:	c799                	beqz	a5,80011254 <_etoa+0xbe>
        value = -value;
    80011248:	f8843787          	fld	fa5,-120(s0)
    8001124c:	22f797d3          	fneg.d	fa5,fa5
    80011250:	f8f43427          	fsd	fa5,-120(s0)
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
    80011254:	f7c42783          	lw	a5,-132(s0)
    80011258:	4007f793          	andi	a5,a5,1024
    8001125c:	2781                	sext.w	a5,a5
    8001125e:	e781                	bnez	a5,80011266 <_etoa+0xd0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    80011260:	4799                	li	a5,6
    80011262:	f8f42223          	sw	a5,-124(s0)
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F   = value;
    80011266:	f8843787          	fld	fa5,-120(s0)
    8001126a:	faf43c27          	fsd	fa5,-72(s0)
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;  // effectively log2
    8001126e:	fb843783          	ld	a5,-72(s0)
    80011272:	93d1                	srli	a5,a5,0x34
    80011274:	2781                	sext.w	a5,a5
    80011276:	7ff7f793          	andi	a5,a5,2047
    8001127a:	2781                	sext.w	a5,a5
    8001127c:	c017879b          	addiw	a5,a5,-1023
    80011280:	fcf42e23          	sw	a5,-36(s0)
    conv.U   = (conv.U & ((1ULL << 52U) - 1U)) |
    80011284:	fb843703          	ld	a4,-72(s0)
    80011288:	57fd                	li	a5,-1
    8001128a:	83b1                	srli	a5,a5,0xc
    8001128c:	8f7d                	and	a4,a4,a5
    8001128e:	3ff00793          	li	a5,1023
    80011292:	17d2                	slli	a5,a5,0x34
    80011294:	8fd9                	or	a5,a5,a4
    80011296:	faf43c23          	sd	a5,-72(s0)
             (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    // now approximate log10 from the log2 integer part and an expansion of ln
    // around 1.5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    8001129a:	fdc42783          	lw	a5,-36(s0)
    8001129e:	d2078753          	fcvt.d.w	fa4,a5
    800112a2:	00009797          	auipc	a5,0x9
    800112a6:	00678793          	addi	a5,a5,6 # 8001a2a8 <pow10.0+0x78>
    800112aa:	239c                	fld	fa5,0(a5)
    800112ac:	12f77753          	fmul.d	fa4,fa4,fa5
    800112b0:	00009797          	auipc	a5,0x9
    800112b4:	00078793          	mv	a5,a5
    800112b8:	239c                	fld	fa5,0(a5)
    800112ba:	02f77753          	fadd.d	fa4,fa4,fa5
                       (conv.F - 1.5) * 0.289529654602168);
    800112be:	fb843687          	fld	fa3,-72(s0)
    800112c2:	00009797          	auipc	a5,0x9
    800112c6:	ff678793          	addi	a5,a5,-10 # 8001a2b8 <pow10.0+0x88>
    800112ca:	239c                	fld	fa5,0(a5)
    800112cc:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    800112d0:	00009797          	auipc	a5,0x9
    800112d4:	ff078793          	addi	a5,a5,-16 # 8001a2c0 <pow10.0+0x90>
    800112d8:	239c                	fld	fa5,0(a5)
    800112da:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    800112de:	02f777d3          	fadd.d	fa5,fa4,fa5
    800112e2:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    800112e6:	fef42623          	sw	a5,-20(s0)
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2            = (int)(expval * 3.321928094887362 + 0.5);
    800112ea:	fec42783          	lw	a5,-20(s0)
    800112ee:	d2078753          	fcvt.d.w	fa4,a5
    800112f2:	00009797          	auipc	a5,0x9
    800112f6:	fd678793          	addi	a5,a5,-42 # 8001a2c8 <pow10.0+0x98>
    800112fa:	239c                	fld	fa5,0(a5)
    800112fc:	12f77753          	fmul.d	fa4,fa4,fa5
    80011300:	00009797          	auipc	a5,0x9
    80011304:	fa078793          	addi	a5,a5,-96 # 8001a2a0 <pow10.0+0x70>
    80011308:	239c                	fld	fa5,0(a5)
    8001130a:	02f777d3          	fadd.d	fa5,fa4,fa5
    8001130e:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80011312:	fcf42e23          	sw	a5,-36(s0)
    const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    80011316:	fec42783          	lw	a5,-20(s0)
    8001131a:	d2078753          	fcvt.d.w	fa4,a5
    8001131e:	00009797          	auipc	a5,0x9
    80011322:	fb278793          	addi	a5,a5,-78 # 8001a2d0 <pow10.0+0xa0>
    80011326:	239c                	fld	fa5,0(a5)
    80011328:	12f77753          	fmul.d	fa4,fa4,fa5
    8001132c:	fdc42783          	lw	a5,-36(s0)
    80011330:	d20786d3          	fcvt.d.w	fa3,a5
    80011334:	00009797          	auipc	a5,0x9
    80011338:	fa478793          	addi	a5,a5,-92 # 8001a2d8 <pow10.0+0xa8>
    8001133c:	239c                	fld	fa5,0(a5)
    8001133e:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    80011342:	0af777d3          	fsub.d	fa5,fa4,fa5
    80011346:	fcf43827          	fsd	fa5,-48(s0)
    const double z2 = z * z;
    8001134a:	fd043787          	fld	fa5,-48(s0)
    8001134e:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    80011352:	fcf43427          	fsd	fa5,-56(s0)
    conv.U          = (uint64_t)(exp2 + 1023) << 52U;
    80011356:	fdc42783          	lw	a5,-36(s0)
    8001135a:	3ff7879b          	addiw	a5,a5,1023
    8001135e:	2781                	sext.w	a5,a5
    80011360:	17d2                	slli	a5,a5,0x34
    80011362:	faf43c23          	sd	a5,-72(s0)
    // compute exp(z) using continued fractions, see
    // https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    80011366:	fb843707          	fld	fa4,-72(s0)
    8001136a:	fd043787          	fld	fa5,-48(s0)
    8001136e:	02f7f6d3          	fadd.d	fa3,fa5,fa5
    80011372:	00009797          	auipc	a5,0x9
    80011376:	f6e78793          	addi	a5,a5,-146 # 8001a2e0 <pow10.0+0xb0>
    8001137a:	2390                	fld	fa2,0(a5)
    8001137c:	fd043787          	fld	fa5,-48(s0)
    80011380:	0af67653          	fsub.d	fa2,fa2,fa5
    80011384:	fc843587          	fld	fa1,-56(s0)
    80011388:	00009797          	auipc	a5,0x9
    8001138c:	f6078793          	addi	a5,a5,-160 # 8001a2e8 <pow10.0+0xb8>
    80011390:	239c                	fld	fa5,0(a5)
    80011392:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    80011396:	00009797          	auipc	a5,0x9
    8001139a:	f5a78793          	addi	a5,a5,-166 # 8001a2f0 <pow10.0+0xc0>
    8001139e:	239c                	fld	fa5,0(a5)
    800113a0:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    800113a4:	fc843587          	fld	fa1,-56(s0)
    800113a8:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    800113ac:	00009797          	auipc	a5,0x9
    800113b0:	f4c78793          	addi	a5,a5,-180 # 8001a2f8 <pow10.0+0xc8>
    800113b4:	239c                	fld	fa5,0(a5)
    800113b6:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    800113ba:	fc843587          	fld	fa1,-56(s0)
    800113be:	1af5f7d3          	fdiv.d	fa5,fa1,fa5
    800113c2:	02f677d3          	fadd.d	fa5,fa2,fa5
    800113c6:	1af6f6d3          	fdiv.d	fa3,fa3,fa5
    800113ca:	00009797          	auipc	a5,0x9
    800113ce:	f3678793          	addi	a5,a5,-202 # 8001a300 <pow10.0+0xd0>
    800113d2:	239c                	fld	fa5,0(a5)
    800113d4:	02f6f7d3          	fadd.d	fa5,fa3,fa5
    800113d8:	12f777d3          	fmul.d	fa5,fa4,fa5
    800113dc:	faf43c27          	fsd	fa5,-72(s0)
    // correct for rounding errors
    if (value < conv.F) {
    800113e0:	fb843787          	fld	fa5,-72(s0)
    800113e4:	f8843707          	fld	fa4,-120(s0)
    800113e8:	a2f717d3          	flt.d	a5,fa4,fa5
    800113ec:	c38d                	beqz	a5,8001140e <_etoa+0x278>
        expval--;
    800113ee:	fec42783          	lw	a5,-20(s0)
    800113f2:	37fd                	addiw	a5,a5,-1
    800113f4:	fef42623          	sw	a5,-20(s0)
        conv.F /= 10;
    800113f8:	fb843707          	fld	fa4,-72(s0)
    800113fc:	00009797          	auipc	a5,0x9
    80011400:	ef478793          	addi	a5,a5,-268 # 8001a2f0 <pow10.0+0xc0>
    80011404:	239c                	fld	fa5,0(a5)
    80011406:	1af777d3          	fdiv.d	fa5,fa4,fa5
    8001140a:	faf43c27          	fsd	fa5,-72(s0)
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside
    // 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    8001140e:	fec42783          	lw	a5,-20(s0)
    80011412:	0007871b          	sext.w	a4,a5
    80011416:	06300793          	li	a5,99
    8001141a:	00e7cc63          	blt	a5,a4,80011432 <_etoa+0x29c>
    8001141e:	fec42783          	lw	a5,-20(s0)
    80011422:	0007871b          	sext.w	a4,a5
    80011426:	f9d00793          	li	a5,-99
    8001142a:	00f74463          	blt	a4,a5,80011432 <_etoa+0x29c>
    8001142e:	4791                	li	a5,4
    80011430:	a011                	j	80011434 <_etoa+0x29e>
    80011432:	4795                	li	a5,5
    80011434:	fef42423          	sw	a5,-24(s0)

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
    80011438:	f7c42703          	lw	a4,-132(s0)
    8001143c:	6785                	lui	a5,0x1
    8001143e:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    80011442:	8ff9                	and	a5,a5,a4
    80011444:	2781                	sext.w	a5,a5
    80011446:	c7c1                	beqz	a5,800114ce <_etoa+0x338>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
    80011448:	f8843707          	fld	fa4,-120(s0)
    8001144c:	00009797          	auipc	a5,0x9
    80011450:	ebc78793          	addi	a5,a5,-324 # 8001a308 <pow10.0+0xd8>
    80011454:	239c                	fld	fa5,0(a5)
    80011456:	a2e787d3          	fle.d	a5,fa5,fa4
    8001145a:	cbb9                	beqz	a5,800114b0 <_etoa+0x31a>
    8001145c:	f8843707          	fld	fa4,-120(s0)
    80011460:	00009797          	auipc	a5,0x9
    80011464:	eb078793          	addi	a5,a5,-336 # 8001a310 <pow10.0+0xe0>
    80011468:	239c                	fld	fa5,0(a5)
    8001146a:	a2f717d3          	flt.d	a5,fa4,fa5
    8001146e:	c3a9                	beqz	a5,800114b0 <_etoa+0x31a>
            if ((int)prec > expval) {
    80011470:	f8442703          	lw	a4,-124(s0)
    80011474:	fec42783          	lw	a5,-20(s0)
    80011478:	2781                	sext.w	a5,a5
    8001147a:	00e7de63          	bge	a5,a4,80011496 <_etoa+0x300>
                prec = (unsigned)((int)prec - expval - 1);
    8001147e:	f8442703          	lw	a4,-124(s0)
    80011482:	fec42783          	lw	a5,-20(s0)
    80011486:	40f707bb          	subw	a5,a4,a5
    8001148a:	2781                	sext.w	a5,a5
    8001148c:	37fd                	addiw	a5,a5,-1
    8001148e:	2781                	sext.w	a5,a5
    80011490:	f8f42223          	sw	a5,-124(s0)
    80011494:	a019                	j	8001149a <_etoa+0x304>
            }
            else {
                prec = 0;
    80011496:	f8042223          	sw	zero,-124(s0)
            }
            flags |= FLAGS_PRECISION;  // make sure _ftoa respects precision
    8001149a:	f7c42783          	lw	a5,-132(s0)
    8001149e:	4007e793          	ori	a5,a5,1024
    800114a2:	f6f42e23          	sw	a5,-132(s0)
            // no characters in exponent
            minwidth = 0U;
    800114a6:	fe042423          	sw	zero,-24(s0)
            expval   = 0;
    800114aa:	fe042623          	sw	zero,-20(s0)
    800114ae:	a005                	j	800114ce <_etoa+0x338>
        }
        else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    800114b0:	f8442783          	lw	a5,-124(s0)
    800114b4:	2781                	sext.w	a5,a5
    800114b6:	cf81                	beqz	a5,800114ce <_etoa+0x338>
    800114b8:	f7c42783          	lw	a5,-132(s0)
    800114bc:	4007f793          	andi	a5,a5,1024
    800114c0:	2781                	sext.w	a5,a5
    800114c2:	c791                	beqz	a5,800114ce <_etoa+0x338>
                --prec;
    800114c4:	f8442783          	lw	a5,-124(s0)
    800114c8:	37fd                	addiw	a5,a5,-1
    800114ca:	f8f42223          	sw	a5,-124(s0)
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
    800114ce:	f8042783          	lw	a5,-128(s0)
    800114d2:	fef42223          	sw	a5,-28(s0)
    if (width > minwidth) {
    800114d6:	f8042703          	lw	a4,-128(s0)
    800114da:	fe842783          	lw	a5,-24(s0)
    800114de:	2701                	sext.w	a4,a4
    800114e0:	2781                	sext.w	a5,a5
    800114e2:	00e7fb63          	bgeu	a5,a4,800114f8 <_etoa+0x362>
        // we didn't fall-back so subtract the characters required for the
        // exponent
        fwidth -= minwidth;
    800114e6:	fe442703          	lw	a4,-28(s0)
    800114ea:	fe842783          	lw	a5,-24(s0)
    800114ee:	40f707bb          	subw	a5,a4,a5
    800114f2:	fef42223          	sw	a5,-28(s0)
    800114f6:	a019                	j	800114fc <_etoa+0x366>
    }
    else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
    800114f8:	fe042223          	sw	zero,-28(s0)
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
    800114fc:	f7c42783          	lw	a5,-132(s0)
    80011500:	8b89                	andi	a5,a5,2
    80011502:	2781                	sext.w	a5,a5
    80011504:	c799                	beqz	a5,80011512 <_etoa+0x37c>
    80011506:	fe842783          	lw	a5,-24(s0)
    8001150a:	2781                	sext.w	a5,a5
    8001150c:	c399                	beqz	a5,80011512 <_etoa+0x37c>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
    8001150e:	fe042223          	sw	zero,-28(s0)
    }

    // rescale the float value
    if (expval) {
    80011512:	fec42783          	lw	a5,-20(s0)
    80011516:	2781                	sext.w	a5,a5
    80011518:	cb89                	beqz	a5,8001152a <_etoa+0x394>
        value /= conv.F;
    8001151a:	fb843787          	fld	fa5,-72(s0)
    8001151e:	f8843707          	fld	fa4,-120(s0)
    80011522:	1af777d3          	fdiv.d	fa5,fa4,fa5
    80011526:	f8f43427          	fsd	fa5,-120(s0)
    }

    // output the floating part
    const size_t start_idx = idx;
    8001152a:	f9843783          	ld	a5,-104(s0)
    8001152e:	fcf43023          	sd	a5,-64(s0)
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec,
    80011532:	fe344783          	lbu	a5,-29(s0)
    80011536:	0ff7f793          	andi	a5,a5,255
    8001153a:	c791                	beqz	a5,80011546 <_etoa+0x3b0>
    8001153c:	f8843787          	fld	fa5,-120(s0)
    80011540:	22f797d3          	fneg.d	fa5,fa5
    80011544:	a019                	j	8001154a <_etoa+0x3b4>
    80011546:	f8843787          	fld	fa5,-120(s0)
    8001154a:	f7c42703          	lw	a4,-132(s0)
    8001154e:	77fd                	lui	a5,0xfffff
    80011550:	7ff78793          	addi	a5,a5,2047 # fffffffffffff7ff <_heap_end+0xffffffff77fef7ff>
    80011554:	8ff9                	and	a5,a5,a4
    80011556:	0007869b          	sext.w	a3,a5
    8001155a:	fe442783          	lw	a5,-28(s0)
    8001155e:	f8442703          	lw	a4,-124(s0)
    80011562:	8836                	mv	a6,a3
    80011564:	22f78553          	fmv.d	fa0,fa5
    80011568:	f9043683          	ld	a3,-112(s0)
    8001156c:	f9843603          	ld	a2,-104(s0)
    80011570:	fa043583          	ld	a1,-96(s0)
    80011574:	fa843503          	ld	a0,-88(s0)
    80011578:	ed2ff0ef          	jal	ra,80010c4a <_ftoa>
    8001157c:	f8a43c23          	sd	a0,-104(s0)
                fwidth, flags & ~FLAGS_ADAPT_EXP);

    // output the exponent part
    if (minwidth) {
    80011580:	fe842783          	lw	a5,-24(s0)
    80011584:	2781                	sext.w	a5,a5
    80011586:	c3f1                	beqz	a5,8001164a <_etoa+0x4b4>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    80011588:	f7c42783          	lw	a5,-132(s0)
    8001158c:	0207f793          	andi	a5,a5,32
    80011590:	2781                	sext.w	a5,a5
    80011592:	c781                	beqz	a5,8001159a <_etoa+0x404>
    80011594:	04500793          	li	a5,69
    80011598:	a019                	j	8001159e <_etoa+0x408>
    8001159a:	06500793          	li	a5,101
    8001159e:	f9843703          	ld	a4,-104(s0)
    800115a2:	00170693          	addi	a3,a4,1
    800115a6:	f8d43c23          	sd	a3,-104(s0)
    800115aa:	fa843803          	ld	a6,-88(s0)
    800115ae:	f9043683          	ld	a3,-112(s0)
    800115b2:	863a                	mv	a2,a4
    800115b4:	fa043583          	ld	a1,-96(s0)
    800115b8:	853e                	mv	a0,a5
    800115ba:	9802                	jalr	a6
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen,
                         (expval < 0) ? -expval : expval, expval < 0, 10, 0,
    800115bc:	fec42783          	lw	a5,-20(s0)
    800115c0:	41f7d79b          	sraiw	a5,a5,0x1f
    800115c4:	fec42703          	lw	a4,-20(s0)
    800115c8:	8f3d                	xor	a4,a4,a5
    800115ca:	40f707bb          	subw	a5,a4,a5
    800115ce:	2781                	sext.w	a5,a5
        idx = _ntoa_long(out, buffer, idx, maxlen,
    800115d0:	863e                	mv	a2,a5
    800115d2:	fec42783          	lw	a5,-20(s0)
    800115d6:	01f7d79b          	srliw	a5,a5,0x1f
    800115da:	0ff7f693          	andi	a3,a5,255
    800115de:	fe842783          	lw	a5,-24(s0)
    800115e2:	37fd                	addiw	a5,a5,-1
    800115e4:	2781                	sext.w	a5,a5
    800115e6:	4715                	li	a4,5
    800115e8:	e43a                	sd	a4,8(sp)
    800115ea:	e03e                	sd	a5,0(sp)
    800115ec:	4881                	li	a7,0
    800115ee:	4829                	li	a6,10
    800115f0:	87b6                	mv	a5,a3
    800115f2:	8732                	mv	a4,a2
    800115f4:	f9043683          	ld	a3,-112(s0)
    800115f8:	f9843603          	ld	a2,-104(s0)
    800115fc:	fa043583          	ld	a1,-96(s0)
    80011600:	fa843503          	ld	a0,-88(s0)
    80011604:	c16ff0ef          	jal	ra,80010a1a <_ntoa_long>
    80011608:	f8a43c23          	sd	a0,-104(s0)
                         minwidth - 1, FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
    8001160c:	f7c42783          	lw	a5,-132(s0)
    80011610:	8b89                	andi	a5,a5,2
    80011612:	2781                	sext.w	a5,a5
    80011614:	cb9d                	beqz	a5,8001164a <_etoa+0x4b4>
            while (idx - start_idx < width)
    80011616:	a00d                	j	80011638 <_etoa+0x4a2>
                out(' ', buffer, idx++, maxlen);
    80011618:	f9843783          	ld	a5,-104(s0)
    8001161c:	00178713          	addi	a4,a5,1
    80011620:	f8e43c23          	sd	a4,-104(s0)
    80011624:	fa843703          	ld	a4,-88(s0)
    80011628:	f9043683          	ld	a3,-112(s0)
    8001162c:	863e                	mv	a2,a5
    8001162e:	fa043583          	ld	a1,-96(s0)
    80011632:	02000513          	li	a0,32
    80011636:	9702                	jalr	a4
            while (idx - start_idx < width)
    80011638:	f9843703          	ld	a4,-104(s0)
    8001163c:	fc043783          	ld	a5,-64(s0)
    80011640:	8f1d                	sub	a4,a4,a5
    80011642:	f8046783          	lwu	a5,-128(s0)
    80011646:	fcf769e3          	bltu	a4,a5,80011618 <_etoa+0x482>
        }
    }
    return idx;
    8001164a:	f9843783          	ld	a5,-104(s0)
}
    8001164e:	853e                	mv	a0,a5
    80011650:	60ea                	ld	ra,152(sp)
    80011652:	644a                	ld	s0,144(sp)
    80011654:	610d                	addi	sp,sp,160
    80011656:	8082                	ret

0000000080011658 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen,
                      const char *format, va_list va)
{
    80011658:	7135                	addi	sp,sp,-160
    8001165a:	ed06                	sd	ra,152(sp)
    8001165c:	e922                	sd	s0,144(sp)
    8001165e:	1100                	addi	s0,sp,160
    80011660:	f8a43c23          	sd	a0,-104(s0)
    80011664:	f8b43823          	sd	a1,-112(s0)
    80011668:	f8c43423          	sd	a2,-120(s0)
    8001166c:	f8d43023          	sd	a3,-128(s0)
    80011670:	f6e43c23          	sd	a4,-136(s0)
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
    80011674:	fc043c23          	sd	zero,-40(s0)

    if (!buffer) {
    80011678:	f9043783          	ld	a5,-112(s0)
    8001167c:	380792e3          	bnez	a5,80012200 <_vsnprintf+0xba8>
        // use null output function
        out = _out_null;
    80011680:	fffff797          	auipc	a5,0xfffff
    80011684:	e5878793          	addi	a5,a5,-424 # 800104d8 <_out_null>
    80011688:	f8f43c23          	sd	a5,-104(s0)
    }

    while (*format) {
    8001168c:	3750006f          	j	80012200 <_vsnprintf+0xba8>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
    80011690:	f8043783          	ld	a5,-128(s0)
    80011694:	0007c783          	lbu	a5,0(a5)
    80011698:	873e                	mv	a4,a5
    8001169a:	02500793          	li	a5,37
    8001169e:	02f70b63          	beq	a4,a5,800116d4 <_vsnprintf+0x7c>
            // no
            out(*format, buffer, idx++, maxlen);
    800116a2:	f8043783          	ld	a5,-128(s0)
    800116a6:	0007c503          	lbu	a0,0(a5)
    800116aa:	fd843783          	ld	a5,-40(s0)
    800116ae:	00178713          	addi	a4,a5,1
    800116b2:	fce43c23          	sd	a4,-40(s0)
    800116b6:	f9843703          	ld	a4,-104(s0)
    800116ba:	f8843683          	ld	a3,-120(s0)
    800116be:	863e                	mv	a2,a5
    800116c0:	f9043583          	ld	a1,-112(s0)
    800116c4:	9702                	jalr	a4
            format++;
    800116c6:	f8043783          	ld	a5,-128(s0)
    800116ca:	0785                	addi	a5,a5,1
    800116cc:	f8f43023          	sd	a5,-128(s0)
            continue;
    800116d0:	3310006f          	j	80012200 <_vsnprintf+0xba8>
        }
        else {
            // yes, evaluate it
            format++;
    800116d4:	f8043783          	ld	a5,-128(s0)
    800116d8:	0785                	addi	a5,a5,1
    800116da:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate flags
        flags = 0U;
    800116de:	fe042623          	sw	zero,-20(s0)
        do {
            switch (*format) {
    800116e2:	f8043783          	ld	a5,-128(s0)
    800116e6:	0007c783          	lbu	a5,0(a5)
    800116ea:	2781                	sext.w	a5,a5
    800116ec:	fe07869b          	addiw	a3,a5,-32
    800116f0:	0006871b          	sext.w	a4,a3
    800116f4:	47c1                	li	a5,16
    800116f6:	0ce7e063          	bltu	a5,a4,800117b6 <_vsnprintf+0x15e>
    800116fa:	02069793          	slli	a5,a3,0x20
    800116fe:	9381                	srli	a5,a5,0x20
    80011700:	00279713          	slli	a4,a5,0x2
    80011704:	00009797          	auipc	a5,0x9
    80011708:	94878793          	addi	a5,a5,-1720 # 8001a04c <SYSCALLS+0x4c>
    8001170c:	97ba                	add	a5,a5,a4
    8001170e:	439c                	lw	a5,0(a5)
    80011710:	0007871b          	sext.w	a4,a5
    80011714:	00009797          	auipc	a5,0x9
    80011718:	93878793          	addi	a5,a5,-1736 # 8001a04c <SYSCALLS+0x4c>
    8001171c:	97ba                	add	a5,a5,a4
    8001171e:	8782                	jr	a5
                case '0':
                    flags |= FLAGS_ZEROPAD;
    80011720:	fec42783          	lw	a5,-20(s0)
    80011724:	0017e793          	ori	a5,a5,1
    80011728:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001172c:	f8043783          	ld	a5,-128(s0)
    80011730:	0785                	addi	a5,a5,1
    80011732:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011736:	4785                	li	a5,1
    80011738:	fef42023          	sw	a5,-32(s0)
                    break;
    8001173c:	a041                	j	800117bc <_vsnprintf+0x164>
                case '-':
                    flags |= FLAGS_LEFT;
    8001173e:	fec42783          	lw	a5,-20(s0)
    80011742:	0027e793          	ori	a5,a5,2
    80011746:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001174a:	f8043783          	ld	a5,-128(s0)
    8001174e:	0785                	addi	a5,a5,1
    80011750:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011754:	4785                	li	a5,1
    80011756:	fef42023          	sw	a5,-32(s0)
                    break;
    8001175a:	a08d                	j	800117bc <_vsnprintf+0x164>
                case '+':
                    flags |= FLAGS_PLUS;
    8001175c:	fec42783          	lw	a5,-20(s0)
    80011760:	0047e793          	ori	a5,a5,4
    80011764:	fef42623          	sw	a5,-20(s0)
                    format++;
    80011768:	f8043783          	ld	a5,-128(s0)
    8001176c:	0785                	addi	a5,a5,1
    8001176e:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011772:	4785                	li	a5,1
    80011774:	fef42023          	sw	a5,-32(s0)
                    break;
    80011778:	a091                	j	800117bc <_vsnprintf+0x164>
                case ' ':
                    flags |= FLAGS_SPACE;
    8001177a:	fec42783          	lw	a5,-20(s0)
    8001177e:	0087e793          	ori	a5,a5,8
    80011782:	fef42623          	sw	a5,-20(s0)
                    format++;
    80011786:	f8043783          	ld	a5,-128(s0)
    8001178a:	0785                	addi	a5,a5,1
    8001178c:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011790:	4785                	li	a5,1
    80011792:	fef42023          	sw	a5,-32(s0)
                    break;
    80011796:	a01d                	j	800117bc <_vsnprintf+0x164>
                case '#':
                    flags |= FLAGS_HASH;
    80011798:	fec42783          	lw	a5,-20(s0)
    8001179c:	0107e793          	ori	a5,a5,16
    800117a0:	fef42623          	sw	a5,-20(s0)
                    format++;
    800117a4:	f8043783          	ld	a5,-128(s0)
    800117a8:	0785                	addi	a5,a5,1
    800117aa:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    800117ae:	4785                	li	a5,1
    800117b0:	fef42023          	sw	a5,-32(s0)
                    break;
    800117b4:	a021                	j	800117bc <_vsnprintf+0x164>
                default:
                    n = 0U;
    800117b6:	fe042023          	sw	zero,-32(s0)
                    break;
    800117ba:	0001                	nop
            }
        } while (n);
    800117bc:	fe042783          	lw	a5,-32(s0)
    800117c0:	2781                	sext.w	a5,a5
    800117c2:	f385                	bnez	a5,800116e2 <_vsnprintf+0x8a>

        // evaluate width field
        width = 0U;
    800117c4:	fe042423          	sw	zero,-24(s0)
        if (_is_digit(*format)) {
    800117c8:	f8043783          	ld	a5,-128(s0)
    800117cc:	0007c783          	lbu	a5,0(a5)
    800117d0:	853e                	mv	a0,a5
    800117d2:	df3fe0ef          	jal	ra,800105c4 <_is_digit>
    800117d6:	87aa                	mv	a5,a0
    800117d8:	cb91                	beqz	a5,800117ec <_vsnprintf+0x194>
            width = _atoi(&format);
    800117da:	f8040793          	addi	a5,s0,-128
    800117de:	853e                	mv	a0,a5
    800117e0:	e25fe0ef          	jal	ra,80010604 <_atoi>
    800117e4:	87aa                	mv	a5,a0
    800117e6:	fef42423          	sw	a5,-24(s0)
    800117ea:	a8b9                	j	80011848 <_vsnprintf+0x1f0>
        }
        else if (*format == '*') {
    800117ec:	f8043783          	ld	a5,-128(s0)
    800117f0:	0007c783          	lbu	a5,0(a5)
    800117f4:	873e                	mv	a4,a5
    800117f6:	02a00793          	li	a5,42
    800117fa:	04f71763          	bne	a4,a5,80011848 <_vsnprintf+0x1f0>
            const int w = va_arg(va, int);
    800117fe:	f7843783          	ld	a5,-136(s0)
    80011802:	00878713          	addi	a4,a5,8
    80011806:	f6e43c23          	sd	a4,-136(s0)
    8001180a:	439c                	lw	a5,0(a5)
    8001180c:	fcf42023          	sw	a5,-64(s0)
            if (w < 0) {
    80011810:	fc042783          	lw	a5,-64(s0)
    80011814:	2781                	sext.w	a5,a5
    80011816:	0207d063          	bgez	a5,80011836 <_vsnprintf+0x1de>
                flags |= FLAGS_LEFT;  // reverse padding
    8001181a:	fec42783          	lw	a5,-20(s0)
    8001181e:	0027e793          	ori	a5,a5,2
    80011822:	fef42623          	sw	a5,-20(s0)
                width = (unsigned int)-w;
    80011826:	fc042783          	lw	a5,-64(s0)
    8001182a:	40f007bb          	negw	a5,a5
    8001182e:	2781                	sext.w	a5,a5
    80011830:	fef42423          	sw	a5,-24(s0)
    80011834:	a029                	j	8001183e <_vsnprintf+0x1e6>
            }
            else {
                width = (unsigned int)w;
    80011836:	fc042783          	lw	a5,-64(s0)
    8001183a:	fef42423          	sw	a5,-24(s0)
            }
            format++;
    8001183e:	f8043783          	ld	a5,-128(s0)
    80011842:	0785                	addi	a5,a5,1
    80011844:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate precision field
        precision = 0U;
    80011848:	fe042223          	sw	zero,-28(s0)
        if (*format == '.') {
    8001184c:	f8043783          	ld	a5,-128(s0)
    80011850:	0007c783          	lbu	a5,0(a5)
    80011854:	873e                	mv	a4,a5
    80011856:	02e00793          	li	a5,46
    8001185a:	08f71063          	bne	a4,a5,800118da <_vsnprintf+0x282>
            flags |= FLAGS_PRECISION;
    8001185e:	fec42783          	lw	a5,-20(s0)
    80011862:	4007e793          	ori	a5,a5,1024
    80011866:	fef42623          	sw	a5,-20(s0)
            format++;
    8001186a:	f8043783          	ld	a5,-128(s0)
    8001186e:	0785                	addi	a5,a5,1
    80011870:	f8f43023          	sd	a5,-128(s0)
            if (_is_digit(*format)) {
    80011874:	f8043783          	ld	a5,-128(s0)
    80011878:	0007c783          	lbu	a5,0(a5)
    8001187c:	853e                	mv	a0,a5
    8001187e:	d47fe0ef          	jal	ra,800105c4 <_is_digit>
    80011882:	87aa                	mv	a5,a0
    80011884:	cb91                	beqz	a5,80011898 <_vsnprintf+0x240>
                precision = _atoi(&format);
    80011886:	f8040793          	addi	a5,s0,-128
    8001188a:	853e                	mv	a0,a5
    8001188c:	d79fe0ef          	jal	ra,80010604 <_atoi>
    80011890:	87aa                	mv	a5,a0
    80011892:	fef42223          	sw	a5,-28(s0)
    80011896:	a091                	j	800118da <_vsnprintf+0x282>
            }
            else if (*format == '*') {
    80011898:	f8043783          	ld	a5,-128(s0)
    8001189c:	0007c783          	lbu	a5,0(a5)
    800118a0:	873e                	mv	a4,a5
    800118a2:	02a00793          	li	a5,42
    800118a6:	02f71a63          	bne	a4,a5,800118da <_vsnprintf+0x282>
                const int prec = (int)va_arg(va, int);
    800118aa:	f7843783          	ld	a5,-136(s0)
    800118ae:	00878713          	addi	a4,a5,8
    800118b2:	f6e43c23          	sd	a4,-136(s0)
    800118b6:	439c                	lw	a5,0(a5)
    800118b8:	faf42e23          	sw	a5,-68(s0)
                precision      = prec > 0 ? (unsigned int)prec : 0U;
    800118bc:	fbc42783          	lw	a5,-68(s0)
    800118c0:	0007871b          	sext.w	a4,a5
    800118c4:	00075363          	bgez	a4,800118ca <_vsnprintf+0x272>
    800118c8:	4781                	li	a5,0
    800118ca:	2781                	sext.w	a5,a5
    800118cc:	fef42223          	sw	a5,-28(s0)
                format++;
    800118d0:	f8043783          	ld	a5,-128(s0)
    800118d4:	0785                	addi	a5,a5,1
    800118d6:	f8f43023          	sd	a5,-128(s0)
            }
        }

        // evaluate length field
        switch (*format) {
    800118da:	f8043783          	ld	a5,-128(s0)
    800118de:	0007c783          	lbu	a5,0(a5)
    800118e2:	2781                	sext.w	a5,a5
    800118e4:	f987869b          	addiw	a3,a5,-104
    800118e8:	0006871b          	sext.w	a4,a3
    800118ec:	47c9                	li	a5,18
    800118ee:	0ee7e963          	bltu	a5,a4,800119e0 <_vsnprintf+0x388>
    800118f2:	02069793          	slli	a5,a3,0x20
    800118f6:	9381                	srli	a5,a5,0x20
    800118f8:	00279713          	slli	a4,a5,0x2
    800118fc:	00008797          	auipc	a5,0x8
    80011900:	79478793          	addi	a5,a5,1940 # 8001a090 <SYSCALLS+0x90>
    80011904:	97ba                	add	a5,a5,a4
    80011906:	439c                	lw	a5,0(a5)
    80011908:	0007871b          	sext.w	a4,a5
    8001190c:	00008797          	auipc	a5,0x8
    80011910:	78478793          	addi	a5,a5,1924 # 8001a090 <SYSCALLS+0x90>
    80011914:	97ba                	add	a5,a5,a4
    80011916:	8782                	jr	a5
            case 'l':
                flags |= FLAGS_LONG;
    80011918:	fec42783          	lw	a5,-20(s0)
    8001191c:	1007e793          	ori	a5,a5,256
    80011920:	fef42623          	sw	a5,-20(s0)
                format++;
    80011924:	f8043783          	ld	a5,-128(s0)
    80011928:	0785                	addi	a5,a5,1
    8001192a:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'l') {
    8001192e:	f8043783          	ld	a5,-128(s0)
    80011932:	0007c783          	lbu	a5,0(a5)
    80011936:	873e                	mv	a4,a5
    80011938:	06c00793          	li	a5,108
    8001193c:	0af71463          	bne	a4,a5,800119e4 <_vsnprintf+0x38c>
                    flags |= FLAGS_LONG_LONG;
    80011940:	fec42783          	lw	a5,-20(s0)
    80011944:	2007e793          	ori	a5,a5,512
    80011948:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001194c:	f8043783          	ld	a5,-128(s0)
    80011950:	0785                	addi	a5,a5,1
    80011952:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    80011956:	a079                	j	800119e4 <_vsnprintf+0x38c>
            case 'h':
                flags |= FLAGS_SHORT;
    80011958:	fec42783          	lw	a5,-20(s0)
    8001195c:	0807e793          	ori	a5,a5,128
    80011960:	fef42623          	sw	a5,-20(s0)
                format++;
    80011964:	f8043783          	ld	a5,-128(s0)
    80011968:	0785                	addi	a5,a5,1
    8001196a:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'h') {
    8001196e:	f8043783          	ld	a5,-128(s0)
    80011972:	0007c783          	lbu	a5,0(a5)
    80011976:	873e                	mv	a4,a5
    80011978:	06800793          	li	a5,104
    8001197c:	06f71663          	bne	a4,a5,800119e8 <_vsnprintf+0x390>
                    flags |= FLAGS_CHAR;
    80011980:	fec42783          	lw	a5,-20(s0)
    80011984:	0407e793          	ori	a5,a5,64
    80011988:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001198c:	f8043783          	ld	a5,-128(s0)
    80011990:	0785                	addi	a5,a5,1
    80011992:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    80011996:	a889                	j	800119e8 <_vsnprintf+0x390>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
            case 't':
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG
    80011998:	fec42783          	lw	a5,-20(s0)
    8001199c:	1007e793          	ori	a5,a5,256
    800119a0:	fef42623          	sw	a5,-20(s0)
                                                            : FLAGS_LONG_LONG);
                format++;
    800119a4:	f8043783          	ld	a5,-128(s0)
    800119a8:	0785                	addi	a5,a5,1
    800119aa:	f8f43023          	sd	a5,-128(s0)
                break;
    800119ae:	a835                	j	800119ea <_vsnprintf+0x392>
#endif
            case 'j':
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG
    800119b0:	fec42783          	lw	a5,-20(s0)
    800119b4:	1007e793          	ori	a5,a5,256
    800119b8:	fef42623          	sw	a5,-20(s0)
                                                           : FLAGS_LONG_LONG);
                format++;
    800119bc:	f8043783          	ld	a5,-128(s0)
    800119c0:	0785                	addi	a5,a5,1
    800119c2:	f8f43023          	sd	a5,-128(s0)
                break;
    800119c6:	a015                	j	800119ea <_vsnprintf+0x392>
            case 'z':
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG
    800119c8:	fec42783          	lw	a5,-20(s0)
    800119cc:	1007e793          	ori	a5,a5,256
    800119d0:	fef42623          	sw	a5,-20(s0)
                                                         : FLAGS_LONG_LONG);
                format++;
    800119d4:	f8043783          	ld	a5,-128(s0)
    800119d8:	0785                	addi	a5,a5,1
    800119da:	f8f43023          	sd	a5,-128(s0)
                break;
    800119de:	a031                	j	800119ea <_vsnprintf+0x392>
            default:
                break;
    800119e0:	0001                	nop
    800119e2:	a021                	j	800119ea <_vsnprintf+0x392>
                break;
    800119e4:	0001                	nop
    800119e6:	a011                	j	800119ea <_vsnprintf+0x392>
                break;
    800119e8:	0001                	nop
        }

        // evaluate specifier
        switch (*format) {
    800119ea:	f8043783          	ld	a5,-128(s0)
    800119ee:	0007c783          	lbu	a5,0(a5)
    800119f2:	2781                	sext.w	a5,a5
    800119f4:	fdb7869b          	addiw	a3,a5,-37
    800119f8:	0006871b          	sext.w	a4,a3
    800119fc:	05300793          	li	a5,83
    80011a00:	7ce7e863          	bltu	a5,a4,800121d0 <_vsnprintf+0xb78>
    80011a04:	02069793          	slli	a5,a3,0x20
    80011a08:	9381                	srli	a5,a5,0x20
    80011a0a:	00279713          	slli	a4,a5,0x2
    80011a0e:	00008797          	auipc	a5,0x8
    80011a12:	6ce78793          	addi	a5,a5,1742 # 8001a0dc <SYSCALLS+0xdc>
    80011a16:	97ba                	add	a5,a5,a4
    80011a18:	439c                	lw	a5,0(a5)
    80011a1a:	0007871b          	sext.w	a4,a5
    80011a1e:	00008797          	auipc	a5,0x8
    80011a22:	6be78793          	addi	a5,a5,1726 # 8001a0dc <SYSCALLS+0xdc>
    80011a26:	97ba                	add	a5,a5,a4
    80011a28:	8782                	jr	a5
            case 'X':
            case 'o':
            case 'b': {
                // set the base
                unsigned int base;
                if (*format == 'x' || *format == 'X') {
    80011a2a:	f8043783          	ld	a5,-128(s0)
    80011a2e:	0007c783          	lbu	a5,0(a5)
    80011a32:	873e                	mv	a4,a5
    80011a34:	07800793          	li	a5,120
    80011a38:	00f70b63          	beq	a4,a5,80011a4e <_vsnprintf+0x3f6>
    80011a3c:	f8043783          	ld	a5,-128(s0)
    80011a40:	0007c783          	lbu	a5,0(a5)
    80011a44:	873e                	mv	a4,a5
    80011a46:	05800793          	li	a5,88
    80011a4a:	00f71663          	bne	a4,a5,80011a56 <_vsnprintf+0x3fe>
                    base = 16U;
    80011a4e:	47c1                	li	a5,16
    80011a50:	fcf42a23          	sw	a5,-44(s0)
    80011a54:	a099                	j	80011a9a <_vsnprintf+0x442>
                }
                else if (*format == 'o') {
    80011a56:	f8043783          	ld	a5,-128(s0)
    80011a5a:	0007c783          	lbu	a5,0(a5)
    80011a5e:	873e                	mv	a4,a5
    80011a60:	06f00793          	li	a5,111
    80011a64:	00f71663          	bne	a4,a5,80011a70 <_vsnprintf+0x418>
                    base = 8U;
    80011a68:	47a1                	li	a5,8
    80011a6a:	fcf42a23          	sw	a5,-44(s0)
    80011a6e:	a035                	j	80011a9a <_vsnprintf+0x442>
                }
                else if (*format == 'b') {
    80011a70:	f8043783          	ld	a5,-128(s0)
    80011a74:	0007c783          	lbu	a5,0(a5)
    80011a78:	873e                	mv	a4,a5
    80011a7a:	06200793          	li	a5,98
    80011a7e:	00f71663          	bne	a4,a5,80011a8a <_vsnprintf+0x432>
                    base = 2U;
    80011a82:	4789                	li	a5,2
    80011a84:	fcf42a23          	sw	a5,-44(s0)
    80011a88:	a809                	j	80011a9a <_vsnprintf+0x442>
                }
                else {
                    base = 10U;
    80011a8a:	47a9                	li	a5,10
    80011a8c:	fcf42a23          	sw	a5,-44(s0)
                    flags &= ~FLAGS_HASH;  // no hash for dec format
    80011a90:	fec42783          	lw	a5,-20(s0)
    80011a94:	9bbd                	andi	a5,a5,-17
    80011a96:	fef42623          	sw	a5,-20(s0)
                }
                // uppercase
                if (*format == 'X') {
    80011a9a:	f8043783          	ld	a5,-128(s0)
    80011a9e:	0007c783          	lbu	a5,0(a5)
    80011aa2:	873e                	mv	a4,a5
    80011aa4:	05800793          	li	a5,88
    80011aa8:	00f71863          	bne	a4,a5,80011ab8 <_vsnprintf+0x460>
                    flags |= FLAGS_UPPERCASE;
    80011aac:	fec42783          	lw	a5,-20(s0)
    80011ab0:	0207e793          	ori	a5,a5,32
    80011ab4:	fef42623          	sw	a5,-20(s0)
                }

                // no plus or space flag for u, x, X, o, b
                if ((*format != 'i') && (*format != 'd')) {
    80011ab8:	f8043783          	ld	a5,-128(s0)
    80011abc:	0007c783          	lbu	a5,0(a5)
    80011ac0:	873e                	mv	a4,a5
    80011ac2:	06900793          	li	a5,105
    80011ac6:	02f70063          	beq	a4,a5,80011ae6 <_vsnprintf+0x48e>
    80011aca:	f8043783          	ld	a5,-128(s0)
    80011ace:	0007c783          	lbu	a5,0(a5)
    80011ad2:	873e                	mv	a4,a5
    80011ad4:	06400793          	li	a5,100
    80011ad8:	00f70763          	beq	a4,a5,80011ae6 <_vsnprintf+0x48e>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    80011adc:	fec42783          	lw	a5,-20(s0)
    80011ae0:	9bcd                	andi	a5,a5,-13
    80011ae2:	fef42623          	sw	a5,-20(s0)
                }

                // ignore '0' flag when precision is given
                if (flags & FLAGS_PRECISION) {
    80011ae6:	fec42783          	lw	a5,-20(s0)
    80011aea:	4007f793          	andi	a5,a5,1024
    80011aee:	2781                	sext.w	a5,a5
    80011af0:	c791                	beqz	a5,80011afc <_vsnprintf+0x4a4>
                    flags &= ~FLAGS_ZEROPAD;
    80011af2:	fec42783          	lw	a5,-20(s0)
    80011af6:	9bf9                	andi	a5,a5,-2
    80011af8:	fef42623          	sw	a5,-20(s0)
                }

                // convert the integer
                if ((*format == 'i') || (*format == 'd')) {
    80011afc:	f8043783          	ld	a5,-128(s0)
    80011b00:	0007c783          	lbu	a5,0(a5)
    80011b04:	873e                	mv	a4,a5
    80011b06:	06900793          	li	a5,105
    80011b0a:	00f70b63          	beq	a4,a5,80011b20 <_vsnprintf+0x4c8>
    80011b0e:	f8043783          	ld	a5,-128(s0)
    80011b12:	0007c783          	lbu	a5,0(a5)
    80011b16:	873e                	mv	a4,a5
    80011b18:	06400793          	li	a5,100
    80011b1c:	18f71d63          	bne	a4,a5,80011cb6 <_vsnprintf+0x65e>
                    // signed
                    if (flags & FLAGS_LONG_LONG) {
    80011b20:	fec42783          	lw	a5,-20(s0)
    80011b24:	2007f793          	andi	a5,a5,512
    80011b28:	2781                	sext.w	a5,a5
    80011b2a:	c3bd                	beqz	a5,80011b90 <_vsnprintf+0x538>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        const long long value = va_arg(va, long long);
    80011b2c:	f7843783          	ld	a5,-136(s0)
    80011b30:	00878713          	addi	a4,a5,8
    80011b34:	f6e43c23          	sd	a4,-136(s0)
    80011b38:	639c                	ld	a5,0(a5)
    80011b3a:	faf43023          	sd	a5,-96(s0)
                        idx                   = _ntoa_long_long(
                                              out, buffer, idx, maxlen,
                                              (unsigned long long)(value > 0 ? value : 0 - value),
    80011b3e:	fa043783          	ld	a5,-96(s0)
    80011b42:	43f7d713          	srai	a4,a5,0x3f
    80011b46:	fa043783          	ld	a5,-96(s0)
    80011b4a:	8fb9                	xor	a5,a5,a4
    80011b4c:	8f99                	sub	a5,a5,a4
                        idx                   = _ntoa_long_long(
    80011b4e:	85be                	mv	a1,a5
    80011b50:	fa043783          	ld	a5,-96(s0)
    80011b54:	93fd                	srli	a5,a5,0x3f
    80011b56:	0ff7f713          	andi	a4,a5,255
    80011b5a:	fd446683          	lwu	a3,-44(s0)
    80011b5e:	fe442603          	lw	a2,-28(s0)
    80011b62:	fec42783          	lw	a5,-20(s0)
    80011b66:	e43e                	sd	a5,8(sp)
    80011b68:	fe842783          	lw	a5,-24(s0)
    80011b6c:	e03e                	sd	a5,0(sp)
    80011b6e:	88b2                	mv	a7,a2
    80011b70:	8836                	mv	a6,a3
    80011b72:	87ba                	mv	a5,a4
    80011b74:	872e                	mv	a4,a1
    80011b76:	f8843683          	ld	a3,-120(s0)
    80011b7a:	fd843603          	ld	a2,-40(s0)
    80011b7e:	f9043583          	ld	a1,-112(s0)
    80011b82:	f9843503          	ld	a0,-104(s0)
    80011b86:	fadfe0ef          	jal	ra,80010b32 <_ntoa_long_long>
    80011b8a:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80011b8e:	ac89                	j	80011de0 <_vsnprintf+0x788>
                                              value < 0, base, precision, width, flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    80011b90:	fec42783          	lw	a5,-20(s0)
    80011b94:	1007f793          	andi	a5,a5,256
    80011b98:	2781                	sext.w	a5,a5
    80011b9a:	c3bd                	beqz	a5,80011c00 <_vsnprintf+0x5a8>
                        const long value = va_arg(va, long);
    80011b9c:	f7843783          	ld	a5,-136(s0)
    80011ba0:	00878713          	addi	a4,a5,8
    80011ba4:	f6e43c23          	sd	a4,-136(s0)
    80011ba8:	639c                	ld	a5,0(a5)
    80011baa:	faf43423          	sd	a5,-88(s0)
                        idx              = _ntoa_long(
                                         out, buffer, idx, maxlen,
                                         (unsigned long)(value > 0 ? value : 0 - value),
    80011bae:	fa843783          	ld	a5,-88(s0)
    80011bb2:	43f7d713          	srai	a4,a5,0x3f
    80011bb6:	fa843783          	ld	a5,-88(s0)
    80011bba:	8fb9                	xor	a5,a5,a4
    80011bbc:	8f99                	sub	a5,a5,a4
                        idx              = _ntoa_long(
    80011bbe:	85be                	mv	a1,a5
    80011bc0:	fa843783          	ld	a5,-88(s0)
    80011bc4:	93fd                	srli	a5,a5,0x3f
    80011bc6:	0ff7f713          	andi	a4,a5,255
    80011bca:	fd446683          	lwu	a3,-44(s0)
    80011bce:	fe442603          	lw	a2,-28(s0)
    80011bd2:	fec42783          	lw	a5,-20(s0)
    80011bd6:	e43e                	sd	a5,8(sp)
    80011bd8:	fe842783          	lw	a5,-24(s0)
    80011bdc:	e03e                	sd	a5,0(sp)
    80011bde:	88b2                	mv	a7,a2
    80011be0:	8836                	mv	a6,a3
    80011be2:	87ba                	mv	a5,a4
    80011be4:	872e                	mv	a4,a1
    80011be6:	f8843683          	ld	a3,-120(s0)
    80011bea:	fd843603          	ld	a2,-40(s0)
    80011bee:	f9043583          	ld	a1,-112(s0)
    80011bf2:	f9843503          	ld	a0,-104(s0)
    80011bf6:	e25fe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011bfa:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80011bfe:	a2cd                	j	80011de0 <_vsnprintf+0x788>
                                         value < 0, base, precision, width, flags);
                    }
                    else {
                        const int value =
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    80011c00:	fec42783          	lw	a5,-20(s0)
    80011c04:	0407f793          	andi	a5,a5,64
    80011c08:	2781                	sext.w	a5,a5
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80011c0a:	cf81                	beqz	a5,80011c22 <_vsnprintf+0x5ca>
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    80011c0c:	f7843783          	ld	a5,-136(s0)
    80011c10:	00878713          	addi	a4,a5,8
    80011c14:	f6e43c23          	sd	a4,-136(s0)
    80011c18:	439c                	lw	a5,0(a5)
    80011c1a:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80011c1e:	2781                	sext.w	a5,a5
    80011c20:	a81d                	j	80011c56 <_vsnprintf+0x5fe>
    80011c22:	fec42783          	lw	a5,-20(s0)
    80011c26:	0807f793          	andi	a5,a5,128
    80011c2a:	2781                	sext.w	a5,a5
                                                    : va_arg(va, int);
    80011c2c:	cf91                	beqz	a5,80011c48 <_vsnprintf+0x5f0>
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80011c2e:	f7843783          	ld	a5,-136(s0)
    80011c32:	00878713          	addi	a4,a5,8
    80011c36:	f6e43c23          	sd	a4,-136(s0)
    80011c3a:	439c                	lw	a5,0(a5)
    80011c3c:	0107979b          	slliw	a5,a5,0x10
    80011c40:	4107d79b          	sraiw	a5,a5,0x10
                                                    : va_arg(va, int);
    80011c44:	2781                	sext.w	a5,a5
    80011c46:	a801                	j	80011c56 <_vsnprintf+0x5fe>
    80011c48:	f7843783          	ld	a5,-136(s0)
    80011c4c:	00878713          	addi	a4,a5,8
    80011c50:	f6e43c23          	sd	a4,-136(s0)
    80011c54:	439c                	lw	a5,0(a5)
                        const int value =
    80011c56:	faf42823          	sw	a5,-80(s0)
                        idx = _ntoa_long(
                            out, buffer, idx, maxlen,
                            (unsigned int)(value > 0 ? value : 0 - value),
    80011c5a:	fb042783          	lw	a5,-80(s0)
    80011c5e:	41f7d79b          	sraiw	a5,a5,0x1f
    80011c62:	fb042703          	lw	a4,-80(s0)
    80011c66:	8f3d                	xor	a4,a4,a5
    80011c68:	40f707bb          	subw	a5,a4,a5
    80011c6c:	2781                	sext.w	a5,a5
    80011c6e:	2781                	sext.w	a5,a5
                        idx = _ntoa_long(
    80011c70:	02079713          	slli	a4,a5,0x20
    80011c74:	9301                	srli	a4,a4,0x20
    80011c76:	fb042783          	lw	a5,-80(s0)
    80011c7a:	01f7d79b          	srliw	a5,a5,0x1f
    80011c7e:	0ff7f693          	andi	a3,a5,255
    80011c82:	fd446603          	lwu	a2,-44(s0)
    80011c86:	fe442583          	lw	a1,-28(s0)
    80011c8a:	fec42783          	lw	a5,-20(s0)
    80011c8e:	e43e                	sd	a5,8(sp)
    80011c90:	fe842783          	lw	a5,-24(s0)
    80011c94:	e03e                	sd	a5,0(sp)
    80011c96:	88ae                	mv	a7,a1
    80011c98:	8832                	mv	a6,a2
    80011c9a:	87b6                	mv	a5,a3
    80011c9c:	f8843683          	ld	a3,-120(s0)
    80011ca0:	fd843603          	ld	a2,-40(s0)
    80011ca4:	f9043583          	ld	a1,-112(s0)
    80011ca8:	f9843503          	ld	a0,-104(s0)
    80011cac:	d6ffe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011cb0:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80011cb4:	a235                	j	80011de0 <_vsnprintf+0x788>
                            value < 0, base, precision, width, flags);
                    }
                }
                else {
                    // unsigned
                    if (flags & FLAGS_LONG_LONG) {
    80011cb6:	fec42783          	lw	a5,-20(s0)
    80011cba:	2007f793          	andi	a5,a5,512
    80011cbe:	2781                	sext.w	a5,a5
    80011cc0:	c3b1                	beqz	a5,80011d04 <_vsnprintf+0x6ac>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
    80011cc2:	f7843783          	ld	a5,-136(s0)
    80011cc6:	00878713          	addi	a4,a5,8
    80011cca:	f6e43c23          	sd	a4,-136(s0)
    80011cce:	6398                	ld	a4,0(a5)
    80011cd0:	fd446683          	lwu	a3,-44(s0)
    80011cd4:	fe442603          	lw	a2,-28(s0)
    80011cd8:	fec42783          	lw	a5,-20(s0)
    80011cdc:	e43e                	sd	a5,8(sp)
    80011cde:	fe842783          	lw	a5,-24(s0)
    80011ce2:	e03e                	sd	a5,0(sp)
    80011ce4:	88b2                	mv	a7,a2
    80011ce6:	8836                	mv	a6,a3
    80011ce8:	4781                	li	a5,0
    80011cea:	f8843683          	ld	a3,-120(s0)
    80011cee:	fd843603          	ld	a2,-40(s0)
    80011cf2:	f9043583          	ld	a1,-112(s0)
    80011cf6:	f9843503          	ld	a0,-104(s0)
    80011cfa:	e39fe0ef          	jal	ra,80010b32 <_ntoa_long_long>
    80011cfe:	fca43c23          	sd	a0,-40(s0)
    80011d02:	a8f9                	j	80011de0 <_vsnprintf+0x788>
                                              va_arg(va, unsigned long long),
                                              false, base, precision, width,
                                              flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    80011d04:	fec42783          	lw	a5,-20(s0)
    80011d08:	1007f793          	andi	a5,a5,256
    80011d0c:	2781                	sext.w	a5,a5
    80011d0e:	c3b1                	beqz	a5,80011d52 <_vsnprintf+0x6fa>
                        idx = _ntoa_long(out, buffer, idx, maxlen,
    80011d10:	f7843783          	ld	a5,-136(s0)
    80011d14:	00878713          	addi	a4,a5,8
    80011d18:	f6e43c23          	sd	a4,-136(s0)
    80011d1c:	6398                	ld	a4,0(a5)
    80011d1e:	fd446683          	lwu	a3,-44(s0)
    80011d22:	fe442603          	lw	a2,-28(s0)
    80011d26:	fec42783          	lw	a5,-20(s0)
    80011d2a:	e43e                	sd	a5,8(sp)
    80011d2c:	fe842783          	lw	a5,-24(s0)
    80011d30:	e03e                	sd	a5,0(sp)
    80011d32:	88b2                	mv	a7,a2
    80011d34:	8836                	mv	a6,a3
    80011d36:	4781                	li	a5,0
    80011d38:	f8843683          	ld	a3,-120(s0)
    80011d3c:	fd843603          	ld	a2,-40(s0)
    80011d40:	f9043583          	ld	a1,-112(s0)
    80011d44:	f9843503          	ld	a0,-104(s0)
    80011d48:	cd3fe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011d4c:	fca43c23          	sd	a0,-40(s0)
    80011d50:	a841                	j	80011de0 <_vsnprintf+0x788>
                                         va_arg(va, unsigned long), false, base,
                                         precision, width, flags);
                    }
                    else {
                        const unsigned int value =
                            (flags & FLAGS_CHAR)
    80011d52:	fec42783          	lw	a5,-20(s0)
    80011d56:	0407f793          	andi	a5,a5,64
    80011d5a:	2781                	sext.w	a5,a5
                                ? (unsigned char)va_arg(va, unsigned int)
                            : (flags & FLAGS_SHORT)
    80011d5c:	cf81                	beqz	a5,80011d74 <_vsnprintf+0x71c>
                                ? (unsigned char)va_arg(va, unsigned int)
    80011d5e:	f7843783          	ld	a5,-136(s0)
    80011d62:	00878713          	addi	a4,a5,8
    80011d66:	f6e43c23          	sd	a4,-136(s0)
    80011d6a:	439c                	lw	a5,0(a5)
    80011d6c:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT)
    80011d70:	2781                	sext.w	a5,a5
    80011d72:	a815                	j	80011da6 <_vsnprintf+0x74e>
    80011d74:	fec42783          	lw	a5,-20(s0)
    80011d78:	0807f793          	andi	a5,a5,128
    80011d7c:	2781                	sext.w	a5,a5
                                ? (unsigned short int)va_arg(va, unsigned int)
                                : va_arg(va, unsigned int);
    80011d7e:	cf81                	beqz	a5,80011d96 <_vsnprintf+0x73e>
                                ? (unsigned short int)va_arg(va, unsigned int)
    80011d80:	f7843783          	ld	a5,-136(s0)
    80011d84:	00878713          	addi	a4,a5,8
    80011d88:	f6e43c23          	sd	a4,-136(s0)
    80011d8c:	439c                	lw	a5,0(a5)
    80011d8e:	17c2                	slli	a5,a5,0x30
    80011d90:	93c1                	srli	a5,a5,0x30
                                : va_arg(va, unsigned int);
    80011d92:	2781                	sext.w	a5,a5
    80011d94:	a801                	j	80011da4 <_vsnprintf+0x74c>
    80011d96:	f7843783          	ld	a5,-136(s0)
    80011d9a:	00878713          	addi	a4,a5,8
    80011d9e:	f6e43c23          	sd	a4,-136(s0)
    80011da2:	439c                	lw	a5,0(a5)
                            : (flags & FLAGS_SHORT)
    80011da4:	2781                	sext.w	a5,a5
                        const unsigned int value =
    80011da6:	faf42a23          	sw	a5,-76(s0)
                        idx = _ntoa_long(out, buffer, idx, maxlen, value, false,
    80011daa:	fb446703          	lwu	a4,-76(s0)
    80011dae:	fd446683          	lwu	a3,-44(s0)
    80011db2:	fe442603          	lw	a2,-28(s0)
    80011db6:	fec42783          	lw	a5,-20(s0)
    80011dba:	e43e                	sd	a5,8(sp)
    80011dbc:	fe842783          	lw	a5,-24(s0)
    80011dc0:	e03e                	sd	a5,0(sp)
    80011dc2:	88b2                	mv	a7,a2
    80011dc4:	8836                	mv	a6,a3
    80011dc6:	4781                	li	a5,0
    80011dc8:	f8843683          	ld	a3,-120(s0)
    80011dcc:	fd843603          	ld	a2,-40(s0)
    80011dd0:	f9043583          	ld	a1,-112(s0)
    80011dd4:	f9843503          	ld	a0,-104(s0)
    80011dd8:	c43fe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011ddc:	fca43c23          	sd	a0,-40(s0)
                                         base, precision, width, flags);
                    }
                }
                format++;
    80011de0:	f8043783          	ld	a5,-128(s0)
    80011de4:	0785                	addi	a5,a5,1
    80011de6:	f8f43023          	sd	a5,-128(s0)
                break;
    80011dea:	a919                	j	80012200 <_vsnprintf+0xba8>
            }
#if defined(PRINTF_SUPPORT_FLOAT)
            case 'f':
            case 'F':
                if (*format == 'F')
    80011dec:	f8043783          	ld	a5,-128(s0)
    80011df0:	0007c783          	lbu	a5,0(a5)
    80011df4:	873e                	mv	a4,a5
    80011df6:	04600793          	li	a5,70
    80011dfa:	00f71863          	bne	a4,a5,80011e0a <_vsnprintf+0x7b2>
                    flags |= FLAGS_UPPERCASE;
    80011dfe:	fec42783          	lw	a5,-20(s0)
    80011e02:	0207e793          	ori	a5,a5,32
    80011e06:	fef42623          	sw	a5,-20(s0)
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double),
    80011e0a:	f7843783          	ld	a5,-136(s0)
    80011e0e:	00878713          	addi	a4,a5,8
    80011e12:	f6e43c23          	sd	a4,-136(s0)
    80011e16:	239c                	fld	fa5,0(a5)
    80011e18:	fec42683          	lw	a3,-20(s0)
    80011e1c:	fe842783          	lw	a5,-24(s0)
    80011e20:	fe442703          	lw	a4,-28(s0)
    80011e24:	8836                	mv	a6,a3
    80011e26:	22f78553          	fmv.d	fa0,fa5
    80011e2a:	f8843683          	ld	a3,-120(s0)
    80011e2e:	fd843603          	ld	a2,-40(s0)
    80011e32:	f9043583          	ld	a1,-112(s0)
    80011e36:	f9843503          	ld	a0,-104(s0)
    80011e3a:	e11fe0ef          	jal	ra,80010c4a <_ftoa>
    80011e3e:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    80011e42:	f8043783          	ld	a5,-128(s0)
    80011e46:	0785                	addi	a5,a5,1
    80011e48:	f8f43023          	sd	a5,-128(s0)
                break;
    80011e4c:	ae55                	j	80012200 <_vsnprintf+0xba8>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
            case 'e':
            case 'E':
            case 'g':
            case 'G':
                if ((*format == 'g') || (*format == 'G'))
    80011e4e:	f8043783          	ld	a5,-128(s0)
    80011e52:	0007c783          	lbu	a5,0(a5)
    80011e56:	873e                	mv	a4,a5
    80011e58:	06700793          	li	a5,103
    80011e5c:	00f70b63          	beq	a4,a5,80011e72 <_vsnprintf+0x81a>
    80011e60:	f8043783          	ld	a5,-128(s0)
    80011e64:	0007c783          	lbu	a5,0(a5)
    80011e68:	873e                	mv	a4,a5
    80011e6a:	04700793          	li	a5,71
    80011e6e:	00f71a63          	bne	a4,a5,80011e82 <_vsnprintf+0x82a>
                    flags |= FLAGS_ADAPT_EXP;
    80011e72:	fec42703          	lw	a4,-20(s0)
    80011e76:	6785                	lui	a5,0x1
    80011e78:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    80011e7c:	8fd9                	or	a5,a5,a4
    80011e7e:	fef42623          	sw	a5,-20(s0)
                if ((*format == 'E') || (*format == 'G'))
    80011e82:	f8043783          	ld	a5,-128(s0)
    80011e86:	0007c783          	lbu	a5,0(a5)
    80011e8a:	873e                	mv	a4,a5
    80011e8c:	04500793          	li	a5,69
    80011e90:	00f70b63          	beq	a4,a5,80011ea6 <_vsnprintf+0x84e>
    80011e94:	f8043783          	ld	a5,-128(s0)
    80011e98:	0007c783          	lbu	a5,0(a5)
    80011e9c:	873e                	mv	a4,a5
    80011e9e:	04700793          	li	a5,71
    80011ea2:	00f71863          	bne	a4,a5,80011eb2 <_vsnprintf+0x85a>
                    flags |= FLAGS_UPPERCASE;
    80011ea6:	fec42783          	lw	a5,-20(s0)
    80011eaa:	0207e793          	ori	a5,a5,32
    80011eae:	fef42623          	sw	a5,-20(s0)
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double),
    80011eb2:	f7843783          	ld	a5,-136(s0)
    80011eb6:	00878713          	addi	a4,a5,8
    80011eba:	f6e43c23          	sd	a4,-136(s0)
    80011ebe:	239c                	fld	fa5,0(a5)
    80011ec0:	fec42683          	lw	a3,-20(s0)
    80011ec4:	fe842783          	lw	a5,-24(s0)
    80011ec8:	fe442703          	lw	a4,-28(s0)
    80011ecc:	8836                	mv	a6,a3
    80011ece:	22f78553          	fmv.d	fa0,fa5
    80011ed2:	f8843683          	ld	a3,-120(s0)
    80011ed6:	fd843603          	ld	a2,-40(s0)
    80011eda:	f9043583          	ld	a1,-112(s0)
    80011ede:	f9843503          	ld	a0,-104(s0)
    80011ee2:	ab4ff0ef          	jal	ra,80011196 <_etoa>
    80011ee6:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    80011eea:	f8043783          	ld	a5,-128(s0)
    80011eee:	0785                	addi	a5,a5,1
    80011ef0:	f8f43023          	sd	a5,-128(s0)
                break;
    80011ef4:	a631                	j	80012200 <_vsnprintf+0xba8>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
            case 'c': {
                unsigned int l = 1U;
    80011ef6:	4785                	li	a5,1
    80011ef8:	fcf42823          	sw	a5,-48(s0)
                // pre padding
                if (!(flags & FLAGS_LEFT)) {
    80011efc:	fec42783          	lw	a5,-20(s0)
    80011f00:	8b89                	andi	a5,a5,2
    80011f02:	2781                	sext.w	a5,a5
    80011f04:	ef8d                	bnez	a5,80011f3e <_vsnprintf+0x8e6>
                    while (l++ < width) {
    80011f06:	a00d                	j	80011f28 <_vsnprintf+0x8d0>
                        out(' ', buffer, idx++, maxlen);
    80011f08:	fd843783          	ld	a5,-40(s0)
    80011f0c:	00178713          	addi	a4,a5,1
    80011f10:	fce43c23          	sd	a4,-40(s0)
    80011f14:	f9843703          	ld	a4,-104(s0)
    80011f18:	f8843683          	ld	a3,-120(s0)
    80011f1c:	863e                	mv	a2,a5
    80011f1e:	f9043583          	ld	a1,-112(s0)
    80011f22:	02000513          	li	a0,32
    80011f26:	9702                	jalr	a4
                    while (l++ < width) {
    80011f28:	fd042783          	lw	a5,-48(s0)
    80011f2c:	0017871b          	addiw	a4,a5,1
    80011f30:	fce42823          	sw	a4,-48(s0)
    80011f34:	fe842703          	lw	a4,-24(s0)
    80011f38:	2701                	sext.w	a4,a4
    80011f3a:	fce7e7e3          	bltu	a5,a4,80011f08 <_vsnprintf+0x8b0>
                    }
                }
                // char output
                out((char)va_arg(va, int), buffer, idx++, maxlen);
    80011f3e:	f7843783          	ld	a5,-136(s0)
    80011f42:	00878713          	addi	a4,a5,8
    80011f46:	f6e43c23          	sd	a4,-136(s0)
    80011f4a:	439c                	lw	a5,0(a5)
    80011f4c:	0ff7f513          	andi	a0,a5,255
    80011f50:	fd843783          	ld	a5,-40(s0)
    80011f54:	00178713          	addi	a4,a5,1
    80011f58:	fce43c23          	sd	a4,-40(s0)
    80011f5c:	f9843703          	ld	a4,-104(s0)
    80011f60:	f8843683          	ld	a3,-120(s0)
    80011f64:	863e                	mv	a2,a5
    80011f66:	f9043583          	ld	a1,-112(s0)
    80011f6a:	9702                	jalr	a4
                // post padding
                if (flags & FLAGS_LEFT) {
    80011f6c:	fec42783          	lw	a5,-20(s0)
    80011f70:	8b89                	andi	a5,a5,2
    80011f72:	2781                	sext.w	a5,a5
    80011f74:	cf8d                	beqz	a5,80011fae <_vsnprintf+0x956>
                    while (l++ < width) {
    80011f76:	a00d                	j	80011f98 <_vsnprintf+0x940>
                        out(' ', buffer, idx++, maxlen);
    80011f78:	fd843783          	ld	a5,-40(s0)
    80011f7c:	00178713          	addi	a4,a5,1
    80011f80:	fce43c23          	sd	a4,-40(s0)
    80011f84:	f9843703          	ld	a4,-104(s0)
    80011f88:	f8843683          	ld	a3,-120(s0)
    80011f8c:	863e                	mv	a2,a5
    80011f8e:	f9043583          	ld	a1,-112(s0)
    80011f92:	02000513          	li	a0,32
    80011f96:	9702                	jalr	a4
                    while (l++ < width) {
    80011f98:	fd042783          	lw	a5,-48(s0)
    80011f9c:	0017871b          	addiw	a4,a5,1
    80011fa0:	fce42823          	sw	a4,-48(s0)
    80011fa4:	fe842703          	lw	a4,-24(s0)
    80011fa8:	2701                	sext.w	a4,a4
    80011faa:	fce7e7e3          	bltu	a5,a4,80011f78 <_vsnprintf+0x920>
                    }
                }
                format++;
    80011fae:	f8043783          	ld	a5,-128(s0)
    80011fb2:	0785                	addi	a5,a5,1
    80011fb4:	f8f43023          	sd	a5,-128(s0)
                break;
    80011fb8:	a4a1                	j	80012200 <_vsnprintf+0xba8>
            }

            case 's': {
                const char *p = va_arg(va, char *);
    80011fba:	f7843783          	ld	a5,-136(s0)
    80011fbe:	00878713          	addi	a4,a5,8
    80011fc2:	f6e43c23          	sd	a4,-136(s0)
    80011fc6:	639c                	ld	a5,0(a5)
    80011fc8:	fcf43423          	sd	a5,-56(s0)
                unsigned int l =
                    _strnlen_s(p, precision ? precision : (size_t)-1);
    80011fcc:	fe442783          	lw	a5,-28(s0)
    80011fd0:	2781                	sext.w	a5,a5
    80011fd2:	c781                	beqz	a5,80011fda <_vsnprintf+0x982>
    80011fd4:	fe446783          	lwu	a5,-28(s0)
    80011fd8:	a011                	j	80011fdc <_vsnprintf+0x984>
    80011fda:	57fd                	li	a5,-1
    80011fdc:	85be                	mv	a1,a5
    80011fde:	fc843503          	ld	a0,-56(s0)
    80011fe2:	d92fe0ef          	jal	ra,80010574 <_strnlen_s>
    80011fe6:	87aa                	mv	a5,a0
    80011fe8:	fcf42223          	sw	a5,-60(s0)
                // pre padding
                if (flags & FLAGS_PRECISION) {
    80011fec:	fec42783          	lw	a5,-20(s0)
    80011ff0:	4007f793          	andi	a5,a5,1024
    80011ff4:	2781                	sext.w	a5,a5
    80011ff6:	cf91                	beqz	a5,80012012 <_vsnprintf+0x9ba>
                    l = (l < precision ? l : precision);
    80011ff8:	fc442603          	lw	a2,-60(s0)
    80011ffc:	fe442783          	lw	a5,-28(s0)
    80012000:	0007869b          	sext.w	a3,a5
    80012004:	0006071b          	sext.w	a4,a2
    80012008:	00d77363          	bgeu	a4,a3,8001200e <_vsnprintf+0x9b6>
    8001200c:	87b2                	mv	a5,a2
    8001200e:	fcf42223          	sw	a5,-60(s0)
                }
                if (!(flags & FLAGS_LEFT)) {
    80012012:	fec42783          	lw	a5,-20(s0)
    80012016:	8b89                	andi	a5,a5,2
    80012018:	2781                	sext.w	a5,a5
    8001201a:	e7a5                	bnez	a5,80012082 <_vsnprintf+0xa2a>
                    while (l++ < width) {
    8001201c:	a00d                	j	8001203e <_vsnprintf+0x9e6>
                        out(' ', buffer, idx++, maxlen);
    8001201e:	fd843783          	ld	a5,-40(s0)
    80012022:	00178713          	addi	a4,a5,1
    80012026:	fce43c23          	sd	a4,-40(s0)
    8001202a:	f9843703          	ld	a4,-104(s0)
    8001202e:	f8843683          	ld	a3,-120(s0)
    80012032:	863e                	mv	a2,a5
    80012034:	f9043583          	ld	a1,-112(s0)
    80012038:	02000513          	li	a0,32
    8001203c:	9702                	jalr	a4
                    while (l++ < width) {
    8001203e:	fc442783          	lw	a5,-60(s0)
    80012042:	0017871b          	addiw	a4,a5,1
    80012046:	fce42223          	sw	a4,-60(s0)
    8001204a:	fe842703          	lw	a4,-24(s0)
    8001204e:	2701                	sext.w	a4,a4
    80012050:	fce7e7e3          	bltu	a5,a4,8001201e <_vsnprintf+0x9c6>
                    }
                }
                // string output
                while ((*p != 0) &&
    80012054:	a03d                	j	80012082 <_vsnprintf+0xa2a>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
                    out(*(p++), buffer, idx++, maxlen);
    80012056:	fc843783          	ld	a5,-56(s0)
    8001205a:	00178713          	addi	a4,a5,1
    8001205e:	fce43423          	sd	a4,-56(s0)
    80012062:	0007c503          	lbu	a0,0(a5)
    80012066:	fd843783          	ld	a5,-40(s0)
    8001206a:	00178713          	addi	a4,a5,1
    8001206e:	fce43c23          	sd	a4,-40(s0)
    80012072:	f9843703          	ld	a4,-104(s0)
    80012076:	f8843683          	ld	a3,-120(s0)
    8001207a:	863e                	mv	a2,a5
    8001207c:	f9043583          	ld	a1,-112(s0)
    80012080:	9702                	jalr	a4
                while ((*p != 0) &&
    80012082:	fc843783          	ld	a5,-56(s0)
    80012086:	0007c783          	lbu	a5,0(a5)
    8001208a:	cf91                	beqz	a5,800120a6 <_vsnprintf+0xa4e>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    8001208c:	fec42783          	lw	a5,-20(s0)
    80012090:	4007f793          	andi	a5,a5,1024
    80012094:	2781                	sext.w	a5,a5
                while ((*p != 0) &&
    80012096:	d3e1                	beqz	a5,80012056 <_vsnprintf+0x9fe>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    80012098:	fe442783          	lw	a5,-28(s0)
    8001209c:	fff7871b          	addiw	a4,a5,-1
    800120a0:	fee42223          	sw	a4,-28(s0)
    800120a4:	fbcd                	bnez	a5,80012056 <_vsnprintf+0x9fe>
                }
                // post padding
                if (flags & FLAGS_LEFT) {
    800120a6:	fec42783          	lw	a5,-20(s0)
    800120aa:	8b89                	andi	a5,a5,2
    800120ac:	2781                	sext.w	a5,a5
    800120ae:	cf8d                	beqz	a5,800120e8 <_vsnprintf+0xa90>
                    while (l++ < width) {
    800120b0:	a00d                	j	800120d2 <_vsnprintf+0xa7a>
                        out(' ', buffer, idx++, maxlen);
    800120b2:	fd843783          	ld	a5,-40(s0)
    800120b6:	00178713          	addi	a4,a5,1
    800120ba:	fce43c23          	sd	a4,-40(s0)
    800120be:	f9843703          	ld	a4,-104(s0)
    800120c2:	f8843683          	ld	a3,-120(s0)
    800120c6:	863e                	mv	a2,a5
    800120c8:	f9043583          	ld	a1,-112(s0)
    800120cc:	02000513          	li	a0,32
    800120d0:	9702                	jalr	a4
                    while (l++ < width) {
    800120d2:	fc442783          	lw	a5,-60(s0)
    800120d6:	0017871b          	addiw	a4,a5,1
    800120da:	fce42223          	sw	a4,-60(s0)
    800120de:	fe842703          	lw	a4,-24(s0)
    800120e2:	2701                	sext.w	a4,a4
    800120e4:	fce7e7e3          	bltu	a5,a4,800120b2 <_vsnprintf+0xa5a>
                    }
                }
                format++;
    800120e8:	f8043783          	ld	a5,-128(s0)
    800120ec:	0785                	addi	a5,a5,1
    800120ee:	f8f43023          	sd	a5,-128(s0)
                break;
    800120f2:	a239                	j	80012200 <_vsnprintf+0xba8>
            }

            case 'p': {
                width = sizeof(void *) * 2U;
    800120f4:	47c1                	li	a5,16
    800120f6:	fef42423          	sw	a5,-24(s0)
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    800120fa:	fec42783          	lw	a5,-20(s0)
    800120fe:	0217e793          	ori	a5,a5,33
    80012102:	fef42623          	sw	a5,-20(s0)
#if defined(PRINTF_SUPPORT_LONG_LONG)
                const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    80012106:	4785                	li	a5,1
    80012108:	faf40da3          	sb	a5,-69(s0)
                if (is_ll) {
    8001210c:	fbb44783          	lbu	a5,-69(s0)
    80012110:	0ff7f793          	andi	a5,a5,255
    80012114:	c3b1                	beqz	a5,80012158 <_vsnprintf+0xb00>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                          (uintptr_t)va_arg(va, void *), false,
    80012116:	f7843783          	ld	a5,-136(s0)
    8001211a:	00878713          	addi	a4,a5,8
    8001211e:	f6e43c23          	sd	a4,-136(s0)
    80012122:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
    80012124:	86be                	mv	a3,a5
    80012126:	fe442703          	lw	a4,-28(s0)
    8001212a:	fec42783          	lw	a5,-20(s0)
    8001212e:	e43e                	sd	a5,8(sp)
    80012130:	fe842783          	lw	a5,-24(s0)
    80012134:	e03e                	sd	a5,0(sp)
    80012136:	88ba                	mv	a7,a4
    80012138:	4841                	li	a6,16
    8001213a:	4781                	li	a5,0
    8001213c:	8736                	mv	a4,a3
    8001213e:	f8843683          	ld	a3,-120(s0)
    80012142:	fd843603          	ld	a2,-40(s0)
    80012146:	f9043583          	ld	a1,-112(s0)
    8001214a:	f9843503          	ld	a0,-104(s0)
    8001214e:	9e5fe0ef          	jal	ra,80010b32 <_ntoa_long_long>
    80012152:	fca43c23          	sd	a0,-40(s0)
    80012156:	a089                	j	80012198 <_vsnprintf+0xb40>
                }
                else {
#endif
                    idx = _ntoa_long(
                        out, buffer, idx, maxlen,
                        (unsigned long)((uintptr_t)va_arg(va, void *)), false,
    80012158:	f7843783          	ld	a5,-136(s0)
    8001215c:	00878713          	addi	a4,a5,8
    80012160:	f6e43c23          	sd	a4,-136(s0)
    80012164:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long(
    80012166:	86be                	mv	a3,a5
    80012168:	fe442703          	lw	a4,-28(s0)
    8001216c:	fec42783          	lw	a5,-20(s0)
    80012170:	e43e                	sd	a5,8(sp)
    80012172:	fe842783          	lw	a5,-24(s0)
    80012176:	e03e                	sd	a5,0(sp)
    80012178:	88ba                	mv	a7,a4
    8001217a:	4841                	li	a6,16
    8001217c:	4781                	li	a5,0
    8001217e:	8736                	mv	a4,a3
    80012180:	f8843683          	ld	a3,-120(s0)
    80012184:	fd843603          	ld	a2,-40(s0)
    80012188:	f9043583          	ld	a1,-112(s0)
    8001218c:	f9843503          	ld	a0,-104(s0)
    80012190:	88bfe0ef          	jal	ra,80010a1a <_ntoa_long>
    80012194:	fca43c23          	sd	a0,-40(s0)
                        16U, precision, width, flags);
#if defined(PRINTF_SUPPORT_LONG_LONG)
                }
#endif
                format++;
    80012198:	f8043783          	ld	a5,-128(s0)
    8001219c:	0785                	addi	a5,a5,1
    8001219e:	f8f43023          	sd	a5,-128(s0)
                break;
    800121a2:	a8b9                	j	80012200 <_vsnprintf+0xba8>
            }

            case '%':
                out('%', buffer, idx++, maxlen);
    800121a4:	fd843783          	ld	a5,-40(s0)
    800121a8:	00178713          	addi	a4,a5,1
    800121ac:	fce43c23          	sd	a4,-40(s0)
    800121b0:	f9843703          	ld	a4,-104(s0)
    800121b4:	f8843683          	ld	a3,-120(s0)
    800121b8:	863e                	mv	a2,a5
    800121ba:	f9043583          	ld	a1,-112(s0)
    800121be:	02500513          	li	a0,37
    800121c2:	9702                	jalr	a4
                format++;
    800121c4:	f8043783          	ld	a5,-128(s0)
    800121c8:	0785                	addi	a5,a5,1
    800121ca:	f8f43023          	sd	a5,-128(s0)
                break;
    800121ce:	a80d                	j	80012200 <_vsnprintf+0xba8>

            default:
                out(*format, buffer, idx++, maxlen);
    800121d0:	f8043783          	ld	a5,-128(s0)
    800121d4:	0007c503          	lbu	a0,0(a5)
    800121d8:	fd843783          	ld	a5,-40(s0)
    800121dc:	00178713          	addi	a4,a5,1
    800121e0:	fce43c23          	sd	a4,-40(s0)
    800121e4:	f9843703          	ld	a4,-104(s0)
    800121e8:	f8843683          	ld	a3,-120(s0)
    800121ec:	863e                	mv	a2,a5
    800121ee:	f9043583          	ld	a1,-112(s0)
    800121f2:	9702                	jalr	a4
                format++;
    800121f4:	f8043783          	ld	a5,-128(s0)
    800121f8:	0785                	addi	a5,a5,1
    800121fa:	f8f43023          	sd	a5,-128(s0)
                break;
    800121fe:	0001                	nop
    while (*format) {
    80012200:	f8043783          	ld	a5,-128(s0)
    80012204:	0007c783          	lbu	a5,0(a5)
    80012208:	c8079463          	bnez	a5,80011690 <_vsnprintf+0x38>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    8001220c:	fd843703          	ld	a4,-40(s0)
    80012210:	f8843783          	ld	a5,-120(s0)
    80012214:	00f76663          	bltu	a4,a5,80012220 <_vsnprintf+0xbc8>
    80012218:	f8843783          	ld	a5,-120(s0)
    8001221c:	17fd                	addi	a5,a5,-1
    8001221e:	a019                	j	80012224 <_vsnprintf+0xbcc>
    80012220:	fd843783          	ld	a5,-40(s0)
    80012224:	f9843703          	ld	a4,-104(s0)
    80012228:	f8843683          	ld	a3,-120(s0)
    8001222c:	863e                	mv	a2,a5
    8001222e:	f9043583          	ld	a1,-112(s0)
    80012232:	4501                	li	a0,0
    80012234:	9702                	jalr	a4

    // return written chars without terminating \0
    return (int)idx;
    80012236:	fd843783          	ld	a5,-40(s0)
    8001223a:	2781                	sext.w	a5,a5
}
    8001223c:	853e                	mv	a0,a5
    8001223e:	60ea                	ld	ra,152(sp)
    80012240:	644a                	ld	s0,144(sp)
    80012242:	610d                	addi	sp,sp,160
    80012244:	8082                	ret

0000000080012246 <printf>:

///////////////////////////////////////////////////////////////////////////////

int printf(const char *format, ...)
{
    80012246:	7119                	addi	sp,sp,-128
    80012248:	fc06                	sd	ra,56(sp)
    8001224a:	f822                	sd	s0,48(sp)
    8001224c:	0080                	addi	s0,sp,64
    8001224e:	fca43423          	sd	a0,-56(s0)
    80012252:	e40c                	sd	a1,8(s0)
    80012254:	e810                	sd	a2,16(s0)
    80012256:	ec14                	sd	a3,24(s0)
    80012258:	f018                	sd	a4,32(s0)
    8001225a:	f41c                	sd	a5,40(s0)
    8001225c:	03043823          	sd	a6,48(s0)
    80012260:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, format);
    80012264:	04040793          	addi	a5,s0,64
    80012268:	fcf43023          	sd	a5,-64(s0)
    8001226c:	fc043783          	ld	a5,-64(s0)
    80012270:	fc878793          	addi	a5,a5,-56
    80012274:	fef43023          	sd	a5,-32(s0)
    char buffer[1];
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80012278:	fe043703          	ld	a4,-32(s0)
    8001227c:	fd840793          	addi	a5,s0,-40
    80012280:	fc843683          	ld	a3,-56(s0)
    80012284:	567d                	li	a2,-1
    80012286:	85be                	mv	a1,a5
    80012288:	ffffe517          	auipc	a0,0xffffe
    8001228c:	27050513          	addi	a0,a0,624 # 800104f8 <_out_char>
    80012290:	bc8ff0ef          	jal	ra,80011658 <_vsnprintf>
    80012294:	87aa                	mv	a5,a0
    80012296:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    8001229a:	fec42783          	lw	a5,-20(s0)
}
    8001229e:	853e                	mv	a0,a5
    800122a0:	70e2                	ld	ra,56(sp)
    800122a2:	7442                	ld	s0,48(sp)
    800122a4:	6109                	addi	sp,sp,128
    800122a6:	8082                	ret

00000000800122a8 <sprintf>:

int sprintf(char *buffer, const char *format, ...)
{
    800122a8:	7159                	addi	sp,sp,-112
    800122aa:	fc06                	sd	ra,56(sp)
    800122ac:	f822                	sd	s0,48(sp)
    800122ae:	0080                	addi	s0,sp,64
    800122b0:	fca43c23          	sd	a0,-40(s0)
    800122b4:	fcb43823          	sd	a1,-48(s0)
    800122b8:	e010                	sd	a2,0(s0)
    800122ba:	e414                	sd	a3,8(s0)
    800122bc:	e818                	sd	a4,16(s0)
    800122be:	ec1c                	sd	a5,24(s0)
    800122c0:	03043023          	sd	a6,32(s0)
    800122c4:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    800122c8:	03040793          	addi	a5,s0,48
    800122cc:	fcf43423          	sd	a5,-56(s0)
    800122d0:	fc843783          	ld	a5,-56(s0)
    800122d4:	fd078793          	addi	a5,a5,-48
    800122d8:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    800122dc:	fe043783          	ld	a5,-32(s0)
    800122e0:	873e                	mv	a4,a5
    800122e2:	fd043683          	ld	a3,-48(s0)
    800122e6:	567d                	li	a2,-1
    800122e8:	fd843583          	ld	a1,-40(s0)
    800122ec:	ffffe517          	auipc	a0,0xffffe
    800122f0:	1ae50513          	addi	a0,a0,430 # 8001049a <_out_buffer>
    800122f4:	b64ff0ef          	jal	ra,80011658 <_vsnprintf>
    800122f8:	87aa                	mv	a5,a0
    800122fa:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    800122fe:	fec42783          	lw	a5,-20(s0)
}
    80012302:	853e                	mv	a0,a5
    80012304:	70e2                	ld	ra,56(sp)
    80012306:	7442                	ld	s0,48(sp)
    80012308:	6165                	addi	sp,sp,112
    8001230a:	8082                	ret

000000008001230c <snprintf>:

int snprintf(char *buffer, size_t count, const char *format, ...)
{
    8001230c:	7159                	addi	sp,sp,-112
    8001230e:	fc06                	sd	ra,56(sp)
    80012310:	f822                	sd	s0,48(sp)
    80012312:	0080                	addi	s0,sp,64
    80012314:	fca43c23          	sd	a0,-40(s0)
    80012318:	fcb43823          	sd	a1,-48(s0)
    8001231c:	fcc43423          	sd	a2,-56(s0)
    80012320:	e414                	sd	a3,8(s0)
    80012322:	e818                	sd	a4,16(s0)
    80012324:	ec1c                	sd	a5,24(s0)
    80012326:	03043023          	sd	a6,32(s0)
    8001232a:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    8001232e:	03040793          	addi	a5,s0,48
    80012332:	fcf43023          	sd	a5,-64(s0)
    80012336:	fc043783          	ld	a5,-64(s0)
    8001233a:	fd878793          	addi	a5,a5,-40
    8001233e:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    80012342:	fe043783          	ld	a5,-32(s0)
    80012346:	873e                	mv	a4,a5
    80012348:	fc843683          	ld	a3,-56(s0)
    8001234c:	fd043603          	ld	a2,-48(s0)
    80012350:	fd843583          	ld	a1,-40(s0)
    80012354:	ffffe517          	auipc	a0,0xffffe
    80012358:	14650513          	addi	a0,a0,326 # 8001049a <_out_buffer>
    8001235c:	afcff0ef          	jal	ra,80011658 <_vsnprintf>
    80012360:	87aa                	mv	a5,a0
    80012362:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    80012366:	fec42783          	lw	a5,-20(s0)
}
    8001236a:	853e                	mv	a0,a5
    8001236c:	70e2                	ld	ra,56(sp)
    8001236e:	7442                	ld	s0,48(sp)
    80012370:	6165                	addi	sp,sp,112
    80012372:	8082                	ret

0000000080012374 <vprintf_>:

int vprintf_(const char *format, va_list va)
{
    80012374:	7179                	addi	sp,sp,-48
    80012376:	f406                	sd	ra,40(sp)
    80012378:	f022                	sd	s0,32(sp)
    8001237a:	1800                	addi	s0,sp,48
    8001237c:	fca43c23          	sd	a0,-40(s0)
    80012380:	fcb43823          	sd	a1,-48(s0)
    char buffer[1];
    return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80012384:	fe840793          	addi	a5,s0,-24
    80012388:	fd043703          	ld	a4,-48(s0)
    8001238c:	fd843683          	ld	a3,-40(s0)
    80012390:	567d                	li	a2,-1
    80012392:	85be                	mv	a1,a5
    80012394:	ffffe517          	auipc	a0,0xffffe
    80012398:	16450513          	addi	a0,a0,356 # 800104f8 <_out_char>
    8001239c:	abcff0ef          	jal	ra,80011658 <_vsnprintf>
    800123a0:	87aa                	mv	a5,a0
}
    800123a2:	853e                	mv	a0,a5
    800123a4:	70a2                	ld	ra,40(sp)
    800123a6:	7402                	ld	s0,32(sp)
    800123a8:	6145                	addi	sp,sp,48
    800123aa:	8082                	ret

00000000800123ac <vsnprintf_>:

int vsnprintf_(char *buffer, size_t count, const char *format, va_list va)
{
    800123ac:	7179                	addi	sp,sp,-48
    800123ae:	f406                	sd	ra,40(sp)
    800123b0:	f022                	sd	s0,32(sp)
    800123b2:	1800                	addi	s0,sp,48
    800123b4:	fea43423          	sd	a0,-24(s0)
    800123b8:	feb43023          	sd	a1,-32(s0)
    800123bc:	fcc43c23          	sd	a2,-40(s0)
    800123c0:	fcd43823          	sd	a3,-48(s0)
    return _vsnprintf(_out_buffer, buffer, count, format, va);
    800123c4:	fd043703          	ld	a4,-48(s0)
    800123c8:	fd843683          	ld	a3,-40(s0)
    800123cc:	fe043603          	ld	a2,-32(s0)
    800123d0:	fe843583          	ld	a1,-24(s0)
    800123d4:	ffffe517          	auipc	a0,0xffffe
    800123d8:	0c650513          	addi	a0,a0,198 # 8001049a <_out_buffer>
    800123dc:	a7cff0ef          	jal	ra,80011658 <_vsnprintf>
    800123e0:	87aa                	mv	a5,a0
}
    800123e2:	853e                	mv	a0,a5
    800123e4:	70a2                	ld	ra,40(sp)
    800123e6:	7402                	ld	s0,32(sp)
    800123e8:	6145                	addi	sp,sp,48
    800123ea:	8082                	ret

00000000800123ec <fctprintf>:

int fctprintf(void (*out)(char character, void *arg), void *arg,
              const char *format, ...)
{
    800123ec:	7119                	addi	sp,sp,-128
    800123ee:	e486                	sd	ra,72(sp)
    800123f0:	e0a2                	sd	s0,64(sp)
    800123f2:	0880                	addi	s0,sp,80
    800123f4:	fca43423          	sd	a0,-56(s0)
    800123f8:	fcb43023          	sd	a1,-64(s0)
    800123fc:	fac43c23          	sd	a2,-72(s0)
    80012400:	e414                	sd	a3,8(s0)
    80012402:	e818                	sd	a4,16(s0)
    80012404:	ec1c                	sd	a5,24(s0)
    80012406:	03043023          	sd	a6,32(s0)
    8001240a:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    8001240e:	03040793          	addi	a5,s0,48
    80012412:	faf43823          	sd	a5,-80(s0)
    80012416:	fb043783          	ld	a5,-80(s0)
    8001241a:	fd878793          	addi	a5,a5,-40
    8001241e:	fef43023          	sd	a5,-32(s0)
    const out_fct_wrap_type out_fct_wrap = {out, arg};
    80012422:	fc843783          	ld	a5,-56(s0)
    80012426:	fcf43823          	sd	a5,-48(s0)
    8001242a:	fc043783          	ld	a5,-64(s0)
    8001242e:	fcf43c23          	sd	a5,-40(s0)
    const int ret = _vsnprintf(_out_fct, (char *)(uintptr_t)&out_fct_wrap,
    80012432:	fe043703          	ld	a4,-32(s0)
    80012436:	fd040793          	addi	a5,s0,-48
    8001243a:	fb843683          	ld	a3,-72(s0)
    8001243e:	567d                	li	a2,-1
    80012440:	85be                	mv	a1,a5
    80012442:	ffffe517          	auipc	a0,0xffffe
    80012446:	0ee50513          	addi	a0,a0,238 # 80010530 <_out_fct>
    8001244a:	a0eff0ef          	jal	ra,80011658 <_vsnprintf>
    8001244e:	87aa                	mv	a5,a0
    80012450:	fef42623          	sw	a5,-20(s0)
                               (size_t)-1, format, va);
    va_end(va);
    return ret;
    80012454:	fec42783          	lw	a5,-20(s0)
}
    80012458:	853e                	mv	a0,a5
    8001245a:	60a6                	ld	ra,72(sp)
    8001245c:	6406                	ld	s0,64(sp)
    8001245e:	6109                	addi	sp,sp,128
    80012460:	8082                	ret

0000000080012462 <c_trap_handler>:
// From src/syscall.c
void syscall_handle(int hart, uint64_t epc, int64_t *scratch);

// Called from asm/spawn.S: _spawn_trap
void c_trap_handler(void)
{
    80012462:	7139                	addi	sp,sp,-64
    80012464:	fc06                	sd	ra,56(sp)
    80012466:	f822                	sd	s0,48(sp)
    80012468:	0080                	addi	s0,sp,64
    unsigned long cause;
    long *scratch;
    unsigned long epc;
    unsigned long tval;
    CSR_READ(cause, "scause");
    8001246a:	142027f3          	csrr	a5,scause
    8001246e:	fef43423          	sd	a5,-24(s0)
    CSR_READ(scratch, "sscratch");
    80012472:	140027f3          	csrr	a5,sscratch
    80012476:	fef43023          	sd	a5,-32(s0)
    CSR_READ(epc, "sepc");
    8001247a:	141027f3          	csrr	a5,sepc
    8001247e:	fcf43c23          	sd	a5,-40(s0)
    CSR_READ(tval, "stval");
    80012482:	143027f3          	csrr	a5,stval
    80012486:	fcf43823          	sd	a5,-48(s0)
    
    int hart = sbi_whoami();
    8001248a:	313020ef          	jal	ra,80014f9c <sbi_whoami>
    8001248e:	87aa                	mv	a5,a0
    80012490:	fcf42623          	sw	a5,-52(s0)

    if (SCAUSE_IS_ASYNC(cause)) {
    80012494:	fe843783          	ld	a5,-24(s0)
    80012498:	0407d563          	bgez	a5,800124e2 <c_trap_handler+0x80>
        cause = SCAUSE_NUM(cause);
    8001249c:	fe843783          	ld	a5,-24(s0)
    800124a0:	0ff7f793          	andi	a5,a5,255
    800124a4:	fef43423          	sd	a5,-24(s0)
        switch (cause) {
    800124a8:	fe843703          	ld	a4,-24(s0)
    800124ac:	4795                	li	a5,5
    800124ae:	00f70863          	beq	a4,a5,800124be <c_trap_handler+0x5c>
    800124b2:	fe843703          	ld	a4,-24(s0)
    800124b6:	47a5                	li	a5,9
    800124b8:	00f70663          	beq	a4,a5,800124c4 <c_trap_handler+0x62>
    800124bc:	a811                	j	800124d0 <c_trap_handler+0x6e>
            case CAUSE_STIP:
                // Ack timer will reset the timer to INFINITE
                // In src/sbi.c
                sbi_ack_timer();
    800124be:	2a9020ef          	jal	ra,80014f66 <sbi_ack_timer>
                // We typically invoke our scheduler if we get a timer
                // sched_invoke(hart);
                break;
    800124c2:	a08d                	j	80012524 <c_trap_handler+0xc2>
            case CAUSE_SEIP:
                // Forward to src/plic.c
                plic_handle_irq(hart);
    800124c4:	fcc42783          	lw	a5,-52(s0)
    800124c8:	853e                	mv	a0,a5
    800124ca:	587020ef          	jal	ra,80015250 <plic_handle_irq>
                break;
    800124ce:	a899                	j	80012524 <c_trap_handler+0xc2>
            default:
                debugf("Unhandled Asynchronous interrupt %ld\n", cause);
    800124d0:	fe843583          	ld	a1,-24(s0)
    800124d4:	00008517          	auipc	a0,0x8
    800124d8:	e4450513          	addi	a0,a0,-444 # 8001a318 <pow10.0+0xe8>
    800124dc:	013020ef          	jal	ra,80014cee <debugf>
                break;
    800124e0:	a091                	j	80012524 <c_trap_handler+0xc2>
        }
    }
    else {
        switch (cause) {
    800124e2:	fe843703          	ld	a4,-24(s0)
    800124e6:	47a1                	li	a5,8
    800124e8:	00f71c63          	bne	a4,a5,80012500 <c_trap_handler+0x9e>
            case CAUSE_ECALL_U_MODE:  // ECALL U-Mode
                // Forward to src/syscall.c
                syscall_handle(hart, epc, scratch);
    800124ec:	fcc42783          	lw	a5,-52(s0)
    800124f0:	fe043603          	ld	a2,-32(s0)
    800124f4:	fd843583          	ld	a1,-40(s0)
    800124f8:	853e                	mv	a0,a5
    800124fa:	ef3fd0ef          	jal	ra,800103ec <syscall_handle>
                break;
    800124fe:	a01d                	j	80012524 <c_trap_handler+0xc2>
            default:
                debugf(
    80012500:	fcc42783          	lw	a5,-52(s0)
    80012504:	873e                	mv	a4,a5
    80012506:	fd043683          	ld	a3,-48(s0)
    8001250a:	fd843603          	ld	a2,-40(s0)
    8001250e:	fe843583          	ld	a1,-24(s0)
    80012512:	00008517          	auipc	a0,0x8
    80012516:	e2e50513          	addi	a0,a0,-466 # 8001a340 <pow10.0+0x110>
    8001251a:	7d4020ef          	jal	ra,80014cee <debugf>
                    "Unhandled Synchronous interrupt %ld @ 0x%08lx [0x%08lx]. "
                    "Hanging hart %d\n",
                    cause, epc, tval, hart);
                WFI_LOOP();
    8001251e:	10500073          	wfi
    80012522:	bff5                	j	8001251e <c_trap_handler+0xbc>
                break;
        }
    }
}
    80012524:	0001                	nop
    80012526:	70e2                	ld	ra,56(sp)
    80012528:	7442                	ld	s0,48(sp)
    8001252a:	6121                	addi	sp,sp,64
    8001252c:	8082                	ret

000000008001252e <pci_device_exists>:
// `irq_pci_devices` vector contains devices that share an IRQ number (32, 33, 34, and 35).
// These vectors contain the pointers to the devices in the ECAM address space.
static struct Vector *all_pci_devices, *irq_pci_devices[4];

static inline bool pci_device_exists(uint16_t vendor_id)
{
    8001252e:	1101                	addi	sp,sp,-32
    80012530:	ec22                	sd	s0,24(sp)
    80012532:	1000                	addi	s0,sp,32
    80012534:	87aa                	mv	a5,a0
    80012536:	fef41723          	sh	a5,-18(s0)
    return vendor_id != 0xFFFF;
    8001253a:	fee45783          	lhu	a5,-18(s0)
    8001253e:	0007871b          	sext.w	a4,a5
    80012542:	67c1                	lui	a5,0x10
    80012544:	17fd                	addi	a5,a5,-1
    80012546:	40f707b3          	sub	a5,a4,a5
    8001254a:	00f037b3          	snez	a5,a5
    8001254e:	0ff7f793          	andi	a5,a5,255
}
    80012552:	853e                	mv	a0,a5
    80012554:	6462                	ld	s0,24(sp)
    80012556:	6105                	addi	sp,sp,32
    80012558:	8082                	ret

000000008001255a <pci_find_saved_device>:

PCIDevice *pci_find_saved_device(uint16_t vendor_id, uint16_t device_id) {
    8001255a:	7179                	addi	sp,sp,-48
    8001255c:	f406                	sd	ra,40(sp)
    8001255e:	f022                	sd	s0,32(sp)
    80012560:	1800                	addi	s0,sp,48
    80012562:	87aa                	mv	a5,a0
    80012564:	872e                	mv	a4,a1
    80012566:	fcf41f23          	sh	a5,-34(s0)
    8001256a:	87ba                	mv	a5,a4
    8001256c:	fcf41e23          	sh	a5,-36(s0)
    debugf("Searching for device with vendor ID: 0x%04x, device ID: 0x%04x\n", vendor_id, device_id);
    80012570:	fde45783          	lhu	a5,-34(s0)
    80012574:	2781                	sext.w	a5,a5
    80012576:	fdc45703          	lhu	a4,-36(s0)
    8001257a:	2701                	sext.w	a4,a4
    8001257c:	863a                	mv	a2,a4
    8001257e:	85be                	mv	a1,a5
    80012580:	00008517          	auipc	a0,0x8
    80012584:	e1050513          	addi	a0,a0,-496 # 8001a390 <pow10.0+0x160>
    80012588:	766020ef          	jal	ra,80014cee <debugf>
    for (uint32_t i=0; i<vector_size(all_pci_devices); i++) {
    8001258c:	fe042623          	sw	zero,-20(s0)
    80012590:	a8ad                	j	8001260a <pci_find_saved_device+0xb0>
        PCIDevice *pcidev = pci_get_nth_saved_device(i);
    80012592:	fec42783          	lw	a5,-20(s0)
    80012596:	17c2                	slli	a5,a5,0x30
    80012598:	93c1                	srli	a5,a5,0x30
    8001259a:	853e                	mv	a0,a5
    8001259c:	334000ef          	jal	ra,800128d0 <pci_get_nth_saved_device>
    800125a0:	fea43023          	sd	a0,-32(s0)
        debugf("Checking device with vendor ID: 0x%04x, device ID: 0x%04x\n", pcidev->ecam_header->vendor_id, pcidev->ecam_header->device_id);
    800125a4:	fe043783          	ld	a5,-32(s0)
    800125a8:	639c                	ld	a5,0(a5)
    800125aa:	0007d783          	lhu	a5,0(a5) # 10000 <i+0xffe0>
    800125ae:	0007871b          	sext.w	a4,a5
    800125b2:	fe043783          	ld	a5,-32(s0)
    800125b6:	639c                	ld	a5,0(a5)
    800125b8:	0027d783          	lhu	a5,2(a5)
    800125bc:	2781                	sext.w	a5,a5
    800125be:	863e                	mv	a2,a5
    800125c0:	85ba                	mv	a1,a4
    800125c2:	00008517          	auipc	a0,0x8
    800125c6:	e0e50513          	addi	a0,a0,-498 # 8001a3d0 <pow10.0+0x1a0>
    800125ca:	724020ef          	jal	ra,80014cee <debugf>
        if (pcidev->ecam_header->vendor_id == vendor_id && pcidev->ecam_header->device_id == device_id) {
    800125ce:	fe043783          	ld	a5,-32(s0)
    800125d2:	639c                	ld	a5,0(a5)
    800125d4:	0007d783          	lhu	a5,0(a5)
    800125d8:	fde45703          	lhu	a4,-34(s0)
    800125dc:	2701                	sext.w	a4,a4
    800125de:	2781                	sext.w	a5,a5
    800125e0:	02f71063          	bne	a4,a5,80012600 <pci_find_saved_device+0xa6>
    800125e4:	fe043783          	ld	a5,-32(s0)
    800125e8:	639c                	ld	a5,0(a5)
    800125ea:	0027d783          	lhu	a5,2(a5)
    800125ee:	fdc45703          	lhu	a4,-36(s0)
    800125f2:	2701                	sext.w	a4,a4
    800125f4:	2781                	sext.w	a5,a5
    800125f6:	00f71563          	bne	a4,a5,80012600 <pci_find_saved_device+0xa6>
            return pcidev;
    800125fa:	fe043783          	ld	a5,-32(s0)
    800125fe:	a03d                	j	8001262c <pci_find_saved_device+0xd2>
    for (uint32_t i=0; i<vector_size(all_pci_devices); i++) {
    80012600:	fec42783          	lw	a5,-20(s0)
    80012604:	2785                	addiw	a5,a5,1
    80012606:	fef42623          	sw	a5,-20(s0)
    8001260a:	00007797          	auipc	a5,0x7
    8001260e:	a1e78793          	addi	a5,a5,-1506 # 80019028 <all_pci_devices>
    80012612:	639c                	ld	a5,0(a5)
    80012614:	853e                	mv	a0,a5
    80012616:	04e050ef          	jal	ra,80017664 <vector_size>
    8001261a:	87aa                	mv	a5,a0
    8001261c:	0007871b          	sext.w	a4,a5
    80012620:	fec42783          	lw	a5,-20(s0)
    80012624:	2781                	sext.w	a5,a5
    80012626:	f6e7e6e3          	bltu	a5,a4,80012592 <pci_find_saved_device+0x38>
        }
    }
    return NULL;
    8001262a:	4781                	li	a5,0
}
    8001262c:	853e                	mv	a0,a5
    8001262e:	70a2                	ld	ra,40(sp)
    80012630:	7402                	ld	s0,32(sp)
    80012632:	6145                	addi	sp,sp,48
    80012634:	8082                	ret

0000000080012636 <pci_get_capability>:

struct pci_cape *pci_get_capability(PCIDevice *device, uint8_t type, uint8_t nth) {
    80012636:	7139                	addi	sp,sp,-64
    80012638:	fc22                	sd	s0,56(sp)
    8001263a:	0080                	addi	s0,sp,64
    8001263c:	fca43423          	sd	a0,-56(s0)
    80012640:	87ae                	mv	a5,a1
    80012642:	8732                	mv	a4,a2
    80012644:	fcf403a3          	sb	a5,-57(s0)
    80012648:	87ba                	mv	a5,a4
    8001264a:	fcf40323          	sb	a5,-58(s0)
    struct pci_ecam *header = device->ecam_header;
    8001264e:	fc843783          	ld	a5,-56(s0)
    80012652:	639c                	ld	a5,0(a5)
    80012654:	fef43023          	sd	a5,-32(s0)
    uint8_t cap_pointer = header->type0.capes_pointer;
    80012658:	fe043783          	ld	a5,-32(s0)
    8001265c:	0347c783          	lbu	a5,52(a5)
    80012660:	fef407a3          	sb	a5,-17(s0)
    uint8_t count = 0;
    80012664:	fe040723          	sb	zero,-18(s0)
    
    while (cap_pointer) {
    80012668:	a0b9                	j	800126b6 <pci_get_capability+0x80>
        struct pci_cape* cape = (struct pci_cape*)((uintptr_t)header + cap_pointer);
    8001266a:	fef44703          	lbu	a4,-17(s0)
    8001266e:	fe043783          	ld	a5,-32(s0)
    80012672:	97ba                	add	a5,a5,a4
    80012674:	fcf43c23          	sd	a5,-40(s0)
        if (cape->id == type) {
    80012678:	fd843783          	ld	a5,-40(s0)
    8001267c:	0007c703          	lbu	a4,0(a5)
    80012680:	fc744783          	lbu	a5,-57(s0)
    80012684:	0ff7f793          	andi	a5,a5,255
    80012688:	02e79163          	bne	a5,a4,800126aa <pci_get_capability+0x74>
            if (count++ == nth) {
    8001268c:	fee44783          	lbu	a5,-18(s0)
    80012690:	0017871b          	addiw	a4,a5,1
    80012694:	fee40723          	sb	a4,-18(s0)
    80012698:	fc644703          	lbu	a4,-58(s0)
    8001269c:	0ff77713          	andi	a4,a4,255
    800126a0:	00f71563          	bne	a4,a5,800126aa <pci_get_capability+0x74>
                return cape;
    800126a4:	fd843783          	ld	a5,-40(s0)
    800126a8:	a829                	j	800126c2 <pci_get_capability+0x8c>
            }
        }
        cap_pointer = cape->next;  
    800126aa:	fd843783          	ld	a5,-40(s0)
    800126ae:	0017c783          	lbu	a5,1(a5)
    800126b2:	fef407a3          	sb	a5,-17(s0)
    while (cap_pointer) {
    800126b6:	fef44783          	lbu	a5,-17(s0)
    800126ba:	0ff7f793          	andi	a5,a5,255
    800126be:	f7d5                	bnez	a5,8001266a <pci_get_capability+0x34>
    }
    return NULL;
    800126c0:	4781                	li	a5,0
}
    800126c2:	853e                	mv	a0,a5
    800126c4:	7462                	ld	s0,56(sp)
    800126c6:	6121                	addi	sp,sp,64
    800126c8:	8082                	ret

00000000800126ca <pci_get_virtio_capability>:

struct VirtioCapability *pci_get_virtio_capability(PCIDevice *device, uint8_t virtio_cap_type) {
    800126ca:	7139                	addi	sp,sp,-64
    800126cc:	fc06                	sd	ra,56(sp)
    800126ce:	f822                	sd	s0,48(sp)
    800126d0:	0080                	addi	s0,sp,64
    800126d2:	fca43423          	sd	a0,-56(s0)
    800126d6:	87ae                	mv	a5,a1
    800126d8:	fcf403a3          	sb	a5,-57(s0)
    for (uint8_t i=0; i<10; i++) {
    800126dc:	fe0407a3          	sb	zero,-17(s0)
    800126e0:	a0a1                	j	80012728 <pci_get_virtio_capability+0x5e>
        struct pci_cape *cape = pci_get_capability(device, 0x09, i);
    800126e2:	fef44783          	lbu	a5,-17(s0)
    800126e6:	863e                	mv	a2,a5
    800126e8:	45a5                	li	a1,9
    800126ea:	fc843503          	ld	a0,-56(s0)
    800126ee:	f49ff0ef          	jal	ra,80012636 <pci_get_capability>
    800126f2:	fea43023          	sd	a0,-32(s0)
        struct VirtioCapability *virtio_cap = (struct VirtioCapability *)cape;
    800126f6:	fe043783          	ld	a5,-32(s0)
    800126fa:	fcf43c23          	sd	a5,-40(s0)
        if (virtio_cap && virtio_cap->type == virtio_cap_type) {
    800126fe:	fd843783          	ld	a5,-40(s0)
    80012702:	cf91                	beqz	a5,8001271e <pci_get_virtio_capability+0x54>
    80012704:	fd843783          	ld	a5,-40(s0)
    80012708:	0037c703          	lbu	a4,3(a5)
    8001270c:	fc744783          	lbu	a5,-57(s0)
    80012710:	0ff7f793          	andi	a5,a5,255
    80012714:	00e79563          	bne	a5,a4,8001271e <pci_get_virtio_capability+0x54>
            return virtio_cap;
    80012718:	fd843783          	ld	a5,-40(s0)
    8001271c:	a831                	j	80012738 <pci_get_virtio_capability+0x6e>
    for (uint8_t i=0; i<10; i++) {
    8001271e:	fef44783          	lbu	a5,-17(s0)
    80012722:	2785                	addiw	a5,a5,1
    80012724:	fef407a3          	sb	a5,-17(s0)
    80012728:	fef44783          	lbu	a5,-17(s0)
    8001272c:	0ff7f713          	andi	a4,a5,255
    80012730:	47a5                	li	a5,9
    80012732:	fae7f8e3          	bgeu	a5,a4,800126e2 <pci_get_virtio_capability+0x18>
        }
    }

    return NULL;
    80012736:	4781                	li	a5,0
}
    80012738:	853e                	mv	a0,a5
    8001273a:	70e2                	ld	ra,56(sp)
    8001273c:	7442                	ld	s0,48(sp)
    8001273e:	6121                	addi	sp,sp,64
    80012740:	8082                	ret

0000000080012742 <pci_count_saved_devices>:

uint64_t pci_count_saved_devices(void) {
    80012742:	1141                	addi	sp,sp,-16
    80012744:	e406                	sd	ra,8(sp)
    80012746:	e022                	sd	s0,0(sp)
    80012748:	0800                	addi	s0,sp,16
    return vector_size(all_pci_devices);
    8001274a:	00007797          	auipc	a5,0x7
    8001274e:	8de78793          	addi	a5,a5,-1826 # 80019028 <all_pci_devices>
    80012752:	639c                	ld	a5,0(a5)
    80012754:	853e                	mv	a0,a5
    80012756:	70f040ef          	jal	ra,80017664 <vector_size>
    8001275a:	87aa                	mv	a5,a0
    8001275c:	2781                	sext.w	a5,a5
    8001275e:	1782                	slli	a5,a5,0x20
    80012760:	9381                	srli	a5,a5,0x20
}
    80012762:	853e                	mv	a0,a5
    80012764:	60a2                	ld	ra,8(sp)
    80012766:	6402                	ld	s0,0(sp)
    80012768:	0141                	addi	sp,sp,16
    8001276a:	8082                	ret

000000008001276c <pci_count_irq_listeners>:

uint64_t pci_count_irq_listeners(uint8_t irq) {
    8001276c:	7179                	addi	sp,sp,-48
    8001276e:	f406                	sd	ra,40(sp)
    80012770:	f022                	sd	s0,32(sp)
    80012772:	1800                	addi	s0,sp,48
    80012774:	87aa                	mv	a5,a0
    80012776:	fcf40fa3          	sb	a5,-33(s0)
    uint32_t vector_idx = irq - 32;
    8001277a:	fdf44783          	lbu	a5,-33(s0)
    8001277e:	2781                	sext.w	a5,a5
    80012780:	3781                	addiw	a5,a5,-32
    80012782:	2781                	sext.w	a5,a5
    80012784:	fef42623          	sw	a5,-20(s0)
    return vector_size(irq_pci_devices[vector_idx]);
    80012788:	00007717          	auipc	a4,0x7
    8001278c:	8a870713          	addi	a4,a4,-1880 # 80019030 <irq_pci_devices>
    80012790:	fec46783          	lwu	a5,-20(s0)
    80012794:	078e                	slli	a5,a5,0x3
    80012796:	97ba                	add	a5,a5,a4
    80012798:	639c                	ld	a5,0(a5)
    8001279a:	853e                	mv	a0,a5
    8001279c:	6c9040ef          	jal	ra,80017664 <vector_size>
    800127a0:	87aa                	mv	a5,a0
    800127a2:	2781                	sext.w	a5,a5
    800127a4:	1782                	slli	a5,a5,0x20
    800127a6:	9381                	srli	a5,a5,0x20
}
    800127a8:	853e                	mv	a0,a5
    800127aa:	70a2                	ld	ra,40(sp)
    800127ac:	7402                	ld	s0,32(sp)
    800127ae:	6145                	addi	sp,sp,48
    800127b0:	8082                	ret

00000000800127b2 <pci_get_bus_number>:

uint8_t pci_get_bus_number(PCIDevice *dev) {
    800127b2:	1101                	addi	sp,sp,-32
    800127b4:	ec22                	sd	s0,24(sp)
    800127b6:	1000                	addi	s0,sp,32
    800127b8:	fea43423          	sd	a0,-24(s0)
    return ((uintptr_t)dev->ecam_header >> 20) & 0xF;
    800127bc:	fe843783          	ld	a5,-24(s0)
    800127c0:	639c                	ld	a5,0(a5)
    800127c2:	83d1                	srli	a5,a5,0x14
    800127c4:	0ff7f793          	andi	a5,a5,255
    800127c8:	8bbd                	andi	a5,a5,15
    800127ca:	0ff7f793          	andi	a5,a5,255
}
    800127ce:	853e                	mv	a0,a5
    800127d0:	6462                	ld	s0,24(sp)
    800127d2:	6105                	addi	sp,sp,32
    800127d4:	8082                	ret

00000000800127d6 <pci_get_slot_number>:

uint8_t pci_get_slot_number(PCIDevice *dev) {
    800127d6:	1101                	addi	sp,sp,-32
    800127d8:	ec22                	sd	s0,24(sp)
    800127da:	1000                	addi	s0,sp,32
    800127dc:	fea43423          	sd	a0,-24(s0)
    return ((uintptr_t)dev->ecam_header >> 15) & 0x1F;
    800127e0:	fe843783          	ld	a5,-24(s0)
    800127e4:	639c                	ld	a5,0(a5)
    800127e6:	83bd                	srli	a5,a5,0xf
    800127e8:	0ff7f793          	andi	a5,a5,255
    800127ec:	8bfd                	andi	a5,a5,31
    800127ee:	0ff7f793          	andi	a5,a5,255
}
    800127f2:	853e                	mv	a0,a5
    800127f4:	6462                	ld	s0,24(sp)
    800127f6:	6105                	addi	sp,sp,32
    800127f8:	8082                	ret

00000000800127fa <pci_save_device>:

PCIDevice *pci_save_device(PCIDevice device) {
    800127fa:	7179                	addi	sp,sp,-48
    800127fc:	f406                	sd	ra,40(sp)
    800127fe:	f022                	sd	s0,32(sp)
    80012800:	1800                	addi	s0,sp,48
    80012802:	fca43c23          	sd	a0,-40(s0)
    PCIDevice *pcidev = (PCIDevice *)kmalloc(sizeof(PCIDevice));
    80012806:	4521                	li	a0,8
    80012808:	013010ef          	jal	ra,8001401a <kmalloc>
    8001280c:	fea43423          	sd	a0,-24(s0)
    pcidev->ecam_header = device.ecam_header;
    80012810:	fd843703          	ld	a4,-40(s0)
    80012814:	fe843783          	ld	a5,-24(s0)
    80012818:	e398                	sd	a4,0(a5)
    // pcidev->capabilities = device.capabilities;
    vector_push_ptr(all_pci_devices, pcidev);
    8001281a:	00007797          	auipc	a5,0x7
    8001281e:	80e78793          	addi	a5,a5,-2034 # 80019028 <all_pci_devices>
    80012822:	639c                	ld	a5,0(a5)
    80012824:	fe843703          	ld	a4,-24(s0)
    80012828:	85ba                	mv	a1,a4
    8001282a:	853e                	mv	a0,a5
    8001282c:	578040ef          	jal	ra,80016da4 <vector_push>
    uint8_t bus = pci_get_bus_number(pcidev);
    80012830:	fe843503          	ld	a0,-24(s0)
    80012834:	f7fff0ef          	jal	ra,800127b2 <pci_get_bus_number>
    80012838:	87aa                	mv	a5,a0
    8001283a:	fef403a3          	sb	a5,-25(s0)
    uint8_t slot = pci_get_slot_number(pcidev);
    8001283e:	fe843503          	ld	a0,-24(s0)
    80012842:	f95ff0ef          	jal	ra,800127d6 <pci_get_slot_number>
    80012846:	87aa                	mv	a5,a0
    80012848:	fef40323          	sb	a5,-26(s0)
    debugf("Saving device with vendor ID: 0x%04x, device ID: 0x%04x\n", device.ecam_header->vendor_id, device.ecam_header->device_id);
    8001284c:	fd843783          	ld	a5,-40(s0)
    80012850:	0007d783          	lhu	a5,0(a5)
    80012854:	0007871b          	sext.w	a4,a5
    80012858:	fd843783          	ld	a5,-40(s0)
    8001285c:	0027d783          	lhu	a5,2(a5)
    80012860:	2781                	sext.w	a5,a5
    80012862:	863e                	mv	a2,a5
    80012864:	85ba                	mv	a1,a4
    80012866:	00008517          	auipc	a0,0x8
    8001286a:	baa50513          	addi	a0,a0,-1110 # 8001a410 <pow10.0+0x1e0>
    8001286e:	480020ef          	jal	ra,80014cee <debugf>
    debugf("  Bus: %d, slot: %d\n", bus, slot);
    80012872:	fe744783          	lbu	a5,-25(s0)
    80012876:	2781                	sext.w	a5,a5
    80012878:	fe644703          	lbu	a4,-26(s0)
    8001287c:	2701                	sext.w	a4,a4
    8001287e:	863a                	mv	a2,a4
    80012880:	85be                	mv	a1,a5
    80012882:	00008517          	auipc	a0,0x8
    80012886:	bce50513          	addi	a0,a0,-1074 # 8001a450 <pow10.0+0x220>
    8001288a:	464020ef          	jal	ra,80014cee <debugf>
    uint32_t vector_idx = (bus + slot) % 4;
    8001288e:	fe744703          	lbu	a4,-25(s0)
    80012892:	fe644783          	lbu	a5,-26(s0)
    80012896:	9fb9                	addw	a5,a5,a4
    80012898:	0ff7f793          	andi	a5,a5,255
    8001289c:	2781                	sext.w	a5,a5
    8001289e:	8b8d                	andi	a5,a5,3
    800128a0:	fef42023          	sw	a5,-32(s0)
    vector_push_ptr(irq_pci_devices[vector_idx], pcidev);
    800128a4:	00006717          	auipc	a4,0x6
    800128a8:	78c70713          	addi	a4,a4,1932 # 80019030 <irq_pci_devices>
    800128ac:	fe046783          	lwu	a5,-32(s0)
    800128b0:	078e                	slli	a5,a5,0x3
    800128b2:	97ba                	add	a5,a5,a4
    800128b4:	639c                	ld	a5,0(a5)
    800128b6:	fe843703          	ld	a4,-24(s0)
    800128ba:	85ba                	mv	a1,a4
    800128bc:	853e                	mv	a0,a5
    800128be:	4e6040ef          	jal	ra,80016da4 <vector_push>
    return pcidev;
    800128c2:	fe843783          	ld	a5,-24(s0)
}
    800128c6:	853e                	mv	a0,a5
    800128c8:	70a2                	ld	ra,40(sp)
    800128ca:	7402                	ld	s0,32(sp)
    800128cc:	6145                	addi	sp,sp,48
    800128ce:	8082                	ret

00000000800128d0 <pci_get_nth_saved_device>:

PCIDevice *pci_get_nth_saved_device(uint16_t n) {
    800128d0:	7179                	addi	sp,sp,-48
    800128d2:	f406                	sd	ra,40(sp)
    800128d4:	f022                	sd	s0,32(sp)
    800128d6:	1800                	addi	s0,sp,48
    800128d8:	87aa                	mv	a5,a0
    800128da:	fcf41f23          	sh	a5,-34(s0)
    PCIDevice *pcidev;
    vector_get_ptr(all_pci_devices, n, &pcidev);
    800128de:	00006797          	auipc	a5,0x6
    800128e2:	74a78793          	addi	a5,a5,1866 # 80019028 <all_pci_devices>
    800128e6:	639c                	ld	a5,0(a5)
    800128e8:	fde45703          	lhu	a4,-34(s0)
    800128ec:	2701                	sext.w	a4,a4
    800128ee:	fe840693          	addi	a3,s0,-24
    800128f2:	8636                	mv	a2,a3
    800128f4:	85ba                	mv	a1,a4
    800128f6:	853e                	mv	a0,a5
    800128f8:	60c040ef          	jal	ra,80016f04 <vector_get>
    return pcidev;
    800128fc:	fe843783          	ld	a5,-24(s0)
}
    80012900:	853e                	mv	a0,a5
    80012902:	70a2                	ld	ra,40(sp)
    80012904:	7402                	ld	s0,32(sp)
    80012906:	6145                	addi	sp,sp,48
    80012908:	8082                	ret

000000008001290a <pci_find_device_by_irq>:

PCIDevice *pci_find_device_by_irq(uint8_t irq) {
    8001290a:	7179                	addi	sp,sp,-48
    8001290c:	f406                	sd	ra,40(sp)
    8001290e:	f022                	sd	s0,32(sp)
    80012910:	1800                	addi	s0,sp,48
    80012912:	87aa                	mv	a5,a0
    80012914:	fcf40fa3          	sb	a5,-33(s0)
    uint32_t vector_idx = irq - 32;
    80012918:	fdf44783          	lbu	a5,-33(s0)
    8001291c:	2781                	sext.w	a5,a5
    8001291e:	3781                	addiw	a5,a5,-32
    80012920:	2781                	sext.w	a5,a5
    80012922:	fef42423          	sw	a5,-24(s0)

    // Check all devices in the vector
    for (uint32_t i=0; i<vector_size(irq_pci_devices[vector_idx]); i++) {
    80012926:	fe042623          	sw	zero,-20(s0)
    8001292a:	a8b1                	j	80012986 <pci_find_device_by_irq+0x7c>
        PCIDevice *device;
        vector_get_ptr(irq_pci_devices[vector_idx], i, &device);
    8001292c:	00006717          	auipc	a4,0x6
    80012930:	70470713          	addi	a4,a4,1796 # 80019030 <irq_pci_devices>
    80012934:	fe846783          	lwu	a5,-24(s0)
    80012938:	078e                	slli	a5,a5,0x3
    8001293a:	97ba                	add	a5,a5,a4
    8001293c:	639c                	ld	a5,0(a5)
    8001293e:	fe040693          	addi	a3,s0,-32
    80012942:	fec42703          	lw	a4,-20(s0)
    80012946:	8636                	mv	a2,a3
    80012948:	85ba                	mv	a1,a4
    8001294a:	853e                	mv	a0,a5
    8001294c:	5b8040ef          	jal	ra,80016f04 <vector_get>
        if (device->ecam_header->vendor_id != 0x1AF4) continue;  
    80012950:	fe043783          	ld	a5,-32(s0)
    80012954:	639c                	ld	a5,0(a5)
    80012956:	0007d783          	lhu	a5,0(a5)
    8001295a:	0007871b          	sext.w	a4,a5
    8001295e:	6789                	lui	a5,0x2
    80012960:	af478793          	addi	a5,a5,-1292 # 1af4 <i+0x1ad4>
    80012964:	00f71b63          	bne	a4,a5,8001297a <pci_find_device_by_irq+0x70>
        
        if (!pci_device_exists(device->ecam_header->vendor_id)) {
    80012968:	fe043783          	ld	a5,-32(s0)
    8001296c:	639c                	ld	a5,0(a5)
    8001296e:	0007d783          	lhu	a5,0(a5)
    80012972:	853e                	mv	a0,a5
    80012974:	bbbff0ef          	jal	ra,8001252e <pci_device_exists>
    80012978:	a011                	j	8001297c <pci_find_device_by_irq+0x72>
        if (device->ecam_header->vendor_id != 0x1AF4) continue;  
    8001297a:	0001                	nop
    for (uint32_t i=0; i<vector_size(irq_pci_devices[vector_idx]); i++) {
    8001297c:	fec42783          	lw	a5,-20(s0)
    80012980:	2785                	addiw	a5,a5,1
    80012982:	fef42623          	sw	a5,-20(s0)
    80012986:	00006717          	auipc	a4,0x6
    8001298a:	6aa70713          	addi	a4,a4,1706 # 80019030 <irq_pci_devices>
    8001298e:	fe846783          	lwu	a5,-24(s0)
    80012992:	078e                	slli	a5,a5,0x3
    80012994:	97ba                	add	a5,a5,a4
    80012996:	639c                	ld	a5,0(a5)
    80012998:	853e                	mv	a0,a5
    8001299a:	4cb040ef          	jal	ra,80017664 <vector_size>
    8001299e:	87aa                	mv	a5,a0
    800129a0:	0007871b          	sext.w	a4,a5
    800129a4:	fec42783          	lw	a5,-20(s0)
    800129a8:	2781                	sext.w	a5,a5
    800129aa:	f8e7e1e3          	bltu	a5,a4,8001292c <pci_find_device_by_irq+0x22>
            continue;
        }
    }
    return NULL;
    800129ae:	4781                	li	a5,0
}
    800129b0:	853e                	mv	a0,a5
    800129b2:	70a2                	ld	ra,40(sp)
    800129b4:	7402                	ld	s0,32(sp)
    800129b6:	6145                	addi	sp,sp,48
    800129b8:	8082                	ret

00000000800129ba <pci_get_virtio_common_config>:

struct VirtioPciCommonCfg *pci_get_virtio_common_config(PCIDevice *device) {
    800129ba:	1101                	addi	sp,sp,-32
    800129bc:	ec06                	sd	ra,24(sp)
    800129be:	e822                	sd	s0,16(sp)
    800129c0:	1000                	addi	s0,sp,32
    800129c2:	fea43423          	sd	a0,-24(s0)
    return (struct VirtioPciCommonCfg *)pci_get_virtio_capability(device, VIRTIO_PCI_CAP_COMMON_CFG);
    800129c6:	4585                	li	a1,1
    800129c8:	fe843503          	ld	a0,-24(s0)
    800129cc:	cffff0ef          	jal	ra,800126ca <pci_get_virtio_capability>
    800129d0:	87aa                	mv	a5,a0
}
    800129d2:	853e                	mv	a0,a5
    800129d4:	60e2                	ld	ra,24(sp)
    800129d6:	6442                	ld	s0,16(sp)
    800129d8:	6105                	addi	sp,sp,32
    800129da:	8082                	ret

00000000800129dc <pci_get_virtio_notify_capability>:
struct VirtioPciNotifyCfg *pci_get_virtio_notify_capability(PCIDevice *device) {
    800129dc:	1101                	addi	sp,sp,-32
    800129de:	ec06                	sd	ra,24(sp)
    800129e0:	e822                	sd	s0,16(sp)
    800129e2:	1000                	addi	s0,sp,32
    800129e4:	fea43423          	sd	a0,-24(s0)
    return (struct VirtioPciNotifyCfg *)pci_get_virtio_capability(device, VIRTIO_PCI_CAP_NOTIFY_CFG);
    800129e8:	4589                	li	a1,2
    800129ea:	fe843503          	ld	a0,-24(s0)
    800129ee:	cddff0ef          	jal	ra,800126ca <pci_get_virtio_capability>
    800129f2:	87aa                	mv	a5,a0
}
    800129f4:	853e                	mv	a0,a5
    800129f6:	60e2                	ld	ra,24(sp)
    800129f8:	6442                	ld	s0,16(sp)
    800129fa:	6105                	addi	sp,sp,32
    800129fc:	8082                	ret

00000000800129fe <pci_get_virtio_isr_status>:
struct VirtioPciISRStatus *pci_get_virtio_isr_status(PCIDevice *device) {
    800129fe:	1101                	addi	sp,sp,-32
    80012a00:	ec06                	sd	ra,24(sp)
    80012a02:	e822                	sd	s0,16(sp)
    80012a04:	1000                	addi	s0,sp,32
    80012a06:	fea43423          	sd	a0,-24(s0)
    return (struct VirtioPciISRStatus *)pci_get_virtio_capability(device, VIRTIO_PCI_CAP_ISR_CFG);
    80012a0a:	458d                	li	a1,3
    80012a0c:	fe843503          	ld	a0,-24(s0)
    80012a10:	cbbff0ef          	jal	ra,800126ca <pci_get_virtio_capability>
    80012a14:	87aa                	mv	a5,a0
}
    80012a16:	853e                	mv	a0,a5
    80012a18:	60e2                	ld	ra,24(sp)
    80012a1a:	6442                	ld	s0,16(sp)
    80012a1c:	6105                	addi	sp,sp,32
    80012a1e:	8082                	ret

0000000080012a20 <pci_get_ecam>:

static volatile struct pci_ecam *pci_get_ecam(uint8_t bus,
                                               uint8_t device,
                                               uint8_t function,
                                               uint16_t reg) 
{
    80012a20:	7139                	addi	sp,sp,-64
    80012a22:	fc22                	sd	s0,56(sp)
    80012a24:	0080                	addi	s0,sp,64
    80012a26:	87aa                	mv	a5,a0
    80012a28:	8736                	mv	a4,a3
    80012a2a:	fcf407a3          	sb	a5,-49(s0)
    80012a2e:	87ae                	mv	a5,a1
    80012a30:	fcf40723          	sb	a5,-50(s0)
    80012a34:	87b2                	mv	a5,a2
    80012a36:	fcf406a3          	sb	a5,-51(s0)
    80012a3a:	87ba                	mv	a5,a4
    80012a3c:	fcf41523          	sh	a5,-54(s0)
    // Since we're shifting, we need to make sure we
    // have enough space to shift into.
    uint64_t bus64 = bus & 0xff;
    80012a40:	fcf44783          	lbu	a5,-49(s0)
    80012a44:	fef43423          	sd	a5,-24(s0)
    uint64_t device64 = device & 0x1f;
    80012a48:	fce44783          	lbu	a5,-50(s0)
    80012a4c:	8bfd                	andi	a5,a5,31
    80012a4e:	fef43023          	sd	a5,-32(s0)
    uint64_t function64 = function & 0x7;
    80012a52:	fcd44783          	lbu	a5,-51(s0)
    80012a56:	8b9d                	andi	a5,a5,7
    80012a58:	fcf43c23          	sd	a5,-40(s0)
    uint64_t reg64 = reg & 0x3ff; 
    80012a5c:	fca45783          	lhu	a5,-54(s0)
    80012a60:	3ff7f793          	andi	a5,a5,1023
    80012a64:	fcf43823          	sd	a5,-48(s0)
    // Finally, put the address together
    return (struct pci_ecam *)
                 (MMIO_ECAM_BASE |     // base 0x3000_0000
                 (bus64 << 20) |       // bus number A[(20+n-1):20] (up to 8 bits)
    80012a68:	fe843783          	ld	a5,-24(s0)
    80012a6c:	01479713          	slli	a4,a5,0x14
                 (device64 << 15) |    // device number A[19:15]
    80012a70:	fe043783          	ld	a5,-32(s0)
    80012a74:	07be                	slli	a5,a5,0xf
                 (bus64 << 20) |       // bus number A[(20+n-1):20] (up to 8 bits)
    80012a76:	8f5d                	or	a4,a4,a5
                 (function64 << 12) |  // function number A[14:12]
    80012a78:	fd843783          	ld	a5,-40(s0)
    80012a7c:	07b2                	slli	a5,a5,0xc
                 (device64 << 15) |    // device number A[19:15]
    80012a7e:	8f5d                	or	a4,a4,a5
                 (reg64 << 2));        // register number A[11:2]
    80012a80:	fd043783          	ld	a5,-48(s0)
    80012a84:	078a                	slli	a5,a5,0x2
                 (function64 << 12) |  // function number A[14:12]
    80012a86:	8f5d                	or	a4,a4,a5
    80012a88:	300007b7          	lui	a5,0x30000
    80012a8c:	8fd9                	or	a5,a5,a4
}
    80012a8e:	853e                	mv	a0,a5
    80012a90:	7462                	ld	s0,56(sp)
    80012a92:	6121                	addi	sp,sp,64
    80012a94:	8082                	ret

0000000080012a96 <pci_get_config_address>:

static inline uint32_t pci_get_config_address(uint8_t bus, uint8_t device, uint8_t offset)
{
    80012a96:	7179                	addi	sp,sp,-48
    80012a98:	f406                	sd	ra,40(sp)
    80012a9a:	f022                	sd	s0,32(sp)
    80012a9c:	1800                	addi	s0,sp,48
    80012a9e:	87aa                	mv	a5,a0
    80012aa0:	86ae                	mv	a3,a1
    80012aa2:	8732                	mv	a4,a2
    80012aa4:	fcf40fa3          	sb	a5,-33(s0)
    80012aa8:	87b6                	mv	a5,a3
    80012aaa:	fcf40f23          	sb	a5,-34(s0)
    80012aae:	87ba                	mv	a5,a4
    80012ab0:	fcf40ea3          	sb	a5,-35(s0)
    uint32_t addr = MMIO_ECAM_BASE | (bus << 20) | (device << 15) | (offset & 0xFC);
    80012ab4:	fdf44783          	lbu	a5,-33(s0)
    80012ab8:	2781                	sext.w	a5,a5
    80012aba:	0147979b          	slliw	a5,a5,0x14
    80012abe:	0007871b          	sext.w	a4,a5
    80012ac2:	300007b7          	lui	a5,0x30000
    80012ac6:	8fd9                	or	a5,a5,a4
    80012ac8:	0007871b          	sext.w	a4,a5
    80012acc:	fde44783          	lbu	a5,-34(s0)
    80012ad0:	2781                	sext.w	a5,a5
    80012ad2:	00f7979b          	slliw	a5,a5,0xf
    80012ad6:	2781                	sext.w	a5,a5
    80012ad8:	8fd9                	or	a5,a5,a4
    80012ada:	0007871b          	sext.w	a4,a5
    80012ade:	fdd44783          	lbu	a5,-35(s0)
    80012ae2:	2781                	sext.w	a5,a5
    80012ae4:	0fc7f793          	andi	a5,a5,252
    80012ae8:	2781                	sext.w	a5,a5
    80012aea:	8fd9                	or	a5,a5,a4
    80012aec:	2781                	sext.w	a5,a5
    80012aee:	fef42623          	sw	a5,-20(s0)
    if (addr >= MMIO_ECAM_BASE && addr <= MMIO_ECAM_END) {
    80012af2:	fec42783          	lw	a5,-20(s0)
    80012af6:	0007871b          	sext.w	a4,a5
    80012afa:	300007b7          	lui	a5,0x30000
    80012afe:	00f76d63          	bltu	a4,a5,80012b18 <pci_get_config_address+0x82>
    80012b02:	fec42783          	lw	a5,-20(s0)
    80012b06:	0007871b          	sext.w	a4,a5
    80012b0a:	310007b7          	lui	a5,0x31000
    80012b0e:	00f77563          	bgeu	a4,a5,80012b18 <pci_get_config_address+0x82>
        return addr;
    80012b12:	fec42783          	lw	a5,-20(s0)
    80012b16:	a801                	j	80012b26 <pci_get_config_address+0x90>
    } else {
        debugf("Warning: PCI address out of bounds!\n");
    80012b18:	00008517          	auipc	a0,0x8
    80012b1c:	95050513          	addi	a0,a0,-1712 # 8001a468 <pow10.0+0x238>
    80012b20:	1ce020ef          	jal	ra,80014cee <debugf>
        return 0; 
    80012b24:	4781                	li	a5,0
    }
}
    80012b26:	853e                	mv	a0,a5
    80012b28:	70a2                	ld	ra,40(sp)
    80012b2a:	7402                	ld	s0,32(sp)
    80012b2c:	6145                	addi	sp,sp,48
    80012b2e:	8082                	ret

0000000080012b30 <pci_enumerate_bus>:
static void pci_enumerate_bus(uint8_t bus) {
    80012b30:	7139                	addi	sp,sp,-64
    80012b32:	fc06                	sd	ra,56(sp)
    80012b34:	f822                	sd	s0,48(sp)
    80012b36:	0080                	addi	s0,sp,64
    80012b38:	87aa                	mv	a5,a0
    80012b3a:	fcf407a3          	sb	a5,-49(s0)
    for (uint8_t device = 0; device < 32; device++) {
    80012b3e:	fe0407a3          	sb	zero,-17(s0)
    80012b42:	a87d                	j	80012c00 <pci_enumerate_bus+0xd0>
        volatile struct pci_ecam *header = (volatile struct pci_ecam *)(uintptr_t)pci_get_config_address(bus, device, 0);
    80012b44:	fef44703          	lbu	a4,-17(s0)
    80012b48:	fcf44783          	lbu	a5,-49(s0)
    80012b4c:	4601                	li	a2,0
    80012b4e:	85ba                	mv	a1,a4
    80012b50:	853e                	mv	a0,a5
    80012b52:	f45ff0ef          	jal	ra,80012a96 <pci_get_config_address>
    80012b56:	87aa                	mv	a5,a0
    80012b58:	2781                	sext.w	a5,a5
    80012b5a:	1782                	slli	a5,a5,0x20
    80012b5c:	9381                	srli	a5,a5,0x20
    80012b5e:	fef43023          	sd	a5,-32(s0)

        if (!pci_device_exists(header->vendor_id)) {
    80012b62:	fe043783          	ld	a5,-32(s0)
    80012b66:	0007d783          	lhu	a5,0(a5) # 31000000 <i+0x30ffffe0>
    80012b6a:	17c2                	slli	a5,a5,0x30
    80012b6c:	93c1                	srli	a5,a5,0x30
    80012b6e:	853e                	mv	a0,a5
    80012b70:	9bfff0ef          	jal	ra,8001252e <pci_device_exists>
    80012b74:	87aa                	mv	a5,a0
    80012b76:	0017c793          	xori	a5,a5,1
    80012b7a:	0ff7f793          	andi	a5,a5,255
    80012b7e:	ebbd                	bnez	a5,80012bf4 <pci_enumerate_bus+0xc4>
            // debugf("No device found at bus %d, device %d, function %d\n", bus, device, function);
            continue;
        }


        if ((header->header_type & 0x7F) == 1) {
    80012b80:	fe043783          	ld	a5,-32(s0)
    80012b84:	00e7c783          	lbu	a5,14(a5)
    80012b88:	0ff7f793          	andi	a5,a5,255
    80012b8c:	2781                	sext.w	a5,a5
    80012b8e:	07f7f793          	andi	a5,a5,127
    80012b92:	2781                	sext.w	a5,a5
    80012b94:	873e                	mv	a4,a5
    80012b96:	4785                	li	a5,1
    80012b98:	00f71763          	bne	a4,a5,80012ba6 <pci_enumerate_bus+0x76>
            pci_configure_bridge(header);
    80012b9c:	fe043503          	ld	a0,-32(s0)
    80012ba0:	07a000ef          	jal	ra,80012c1a <pci_configure_bridge>
    80012ba4:	a889                	j	80012bf6 <pci_enumerate_bus+0xc6>
        } else if ((header->header_type & 0x7F) == 0) {
    80012ba6:	fe043783          	ld	a5,-32(s0)
    80012baa:	00e7c783          	lbu	a5,14(a5)
    80012bae:	0ff7f793          	andi	a5,a5,255
    80012bb2:	2781                	sext.w	a5,a5
    80012bb4:	07f7f793          	andi	a5,a5,127
    80012bb8:	2781                	sext.w	a5,a5
    80012bba:	ef95                	bnez	a5,80012bf6 <pci_enumerate_bus+0xc6>
            pci_configure_device(header);
    80012bbc:	fe043503          	ld	a0,-32(s0)
    80012bc0:	170000ef          	jal	ra,80012d30 <pci_configure_device>
            // print_vendor_specific_capabilities(PCIDevice);
            PCIDevice *device = pci_find_saved_device(header->vendor_id, header->device_id);
    80012bc4:	fe043783          	ld	a5,-32(s0)
    80012bc8:	0007d783          	lhu	a5,0(a5)
    80012bcc:	03079713          	slli	a4,a5,0x30
    80012bd0:	9341                	srli	a4,a4,0x30
    80012bd2:	fe043783          	ld	a5,-32(s0)
    80012bd6:	0027d783          	lhu	a5,2(a5)
    80012bda:	17c2                	slli	a5,a5,0x30
    80012bdc:	93c1                	srli	a5,a5,0x30
    80012bde:	85be                	mv	a1,a5
    80012be0:	853a                	mv	a0,a4
    80012be2:	979ff0ef          	jal	ra,8001255a <pci_find_saved_device>
    80012be6:	fca43c23          	sd	a0,-40(s0)
            print_vendor_specific_capabilities(device);
    80012bea:	fd843503          	ld	a0,-40(s0)
    80012bee:	2ea000ef          	jal	ra,80012ed8 <print_vendor_specific_capabilities>
    80012bf2:	a011                	j	80012bf6 <pci_enumerate_bus+0xc6>
            continue;
    80012bf4:	0001                	nop
    for (uint8_t device = 0; device < 32; device++) {
    80012bf6:	fef44783          	lbu	a5,-17(s0)
    80012bfa:	2785                	addiw	a5,a5,1
    80012bfc:	fef407a3          	sb	a5,-17(s0)
    80012c00:	fef44783          	lbu	a5,-17(s0)
    80012c04:	0ff7f713          	andi	a4,a5,255
    80012c08:	47fd                	li	a5,31
    80012c0a:	f2e7fde3          	bgeu	a5,a4,80012b44 <pci_enumerate_bus+0x14>
        }
    }
}
    80012c0e:	0001                	nop
    80012c10:	0001                	nop
    80012c12:	70e2                	ld	ra,56(sp)
    80012c14:	7442                	ld	s0,48(sp)
    80012c16:	6121                	addi	sp,sp,64
    80012c18:	8082                	ret

0000000080012c1a <pci_configure_bridge>:

static void pci_configure_bridge(struct pci_ecam *bridge)
{
    80012c1a:	7179                	addi	sp,sp,-48
    80012c1c:	f406                	sd	ra,40(sp)
    80012c1e:	f022                	sd	s0,32(sp)
    80012c20:	1800                	addi	s0,sp,48
    80012c22:	fca43c23          	sd	a0,-40(s0)
    bridge->type1.primary_bus_no = next_bus_number;
    80012c26:	00009797          	auipc	a5,0x9
    80012c2a:	3e278793          	addi	a5,a5,994 # 8001c008 <next_bus_number>
    80012c2e:	0007c703          	lbu	a4,0(a5)
    80012c32:	fd843783          	ld	a5,-40(s0)
    80012c36:	00e78c23          	sb	a4,24(a5)
    bridge->type1.secondary_bus_no = ++next_bus_number;  
    80012c3a:	00009797          	auipc	a5,0x9
    80012c3e:	3ce78793          	addi	a5,a5,974 # 8001c008 <next_bus_number>
    80012c42:	0007c783          	lbu	a5,0(a5)
    80012c46:	2785                	addiw	a5,a5,1
    80012c48:	0ff7f713          	andi	a4,a5,255
    80012c4c:	00009797          	auipc	a5,0x9
    80012c50:	3bc78793          	addi	a5,a5,956 # 8001c008 <next_bus_number>
    80012c54:	00e78023          	sb	a4,0(a5)
    80012c58:	00009797          	auipc	a5,0x9
    80012c5c:	3b078793          	addi	a5,a5,944 # 8001c008 <next_bus_number>
    80012c60:	0007c703          	lbu	a4,0(a5)
    80012c64:	fd843783          	ld	a5,-40(s0)
    80012c68:	00e78ca3          	sb	a4,25(a5)
    bridge->type1.subordinate_bus_no = next_bus_number;  
    80012c6c:	00009797          	auipc	a5,0x9
    80012c70:	39c78793          	addi	a5,a5,924 # 8001c008 <next_bus_number>
    80012c74:	0007c703          	lbu	a4,0(a5)
    80012c78:	fd843783          	ld	a5,-40(s0)
    80012c7c:	00e78d23          	sb	a4,26(a5)

    uint32_t base_address = next_mmio_address;
    80012c80:	00009797          	auipc	a5,0x9
    80012c84:	39078793          	addi	a5,a5,912 # 8001c010 <next_mmio_address>
    80012c88:	639c                	ld	a5,0(a5)
    80012c8a:	fef42623          	sw	a5,-20(s0)
    uint32_t end_address = base_address + 0x01000000 - 1;  // Adjust for 16MB
    80012c8e:	fec42703          	lw	a4,-20(s0)
    80012c92:	010007b7          	lui	a5,0x1000
    80012c96:	37fd                	addiw	a5,a5,-1
    80012c98:	9fb9                	addw	a5,a5,a4
    80012c9a:	fef42423          	sw	a5,-24(s0)

    bridge->type1.memory_base = base_address >> 16;
    80012c9e:	fec42783          	lw	a5,-20(s0)
    80012ca2:	0107d79b          	srliw	a5,a5,0x10
    80012ca6:	2781                	sext.w	a5,a5
    80012ca8:	03079713          	slli	a4,a5,0x30
    80012cac:	9341                	srli	a4,a4,0x30
    80012cae:	fd843783          	ld	a5,-40(s0)
    80012cb2:	02e79023          	sh	a4,32(a5) # 1000020 <i+0x1000000>
    bridge->type1.memory_limit = end_address >> 16;
    80012cb6:	fe842783          	lw	a5,-24(s0)
    80012cba:	0107d79b          	srliw	a5,a5,0x10
    80012cbe:	2781                	sext.w	a5,a5
    80012cc0:	03079713          	slli	a4,a5,0x30
    80012cc4:	9341                	srli	a4,a4,0x30
    80012cc6:	fd843783          	ld	a5,-40(s0)
    80012cca:	02e79123          	sh	a4,34(a5)
    bridge->type1.prefetch_memory_base = base_address >> 16;
    80012cce:	fec42783          	lw	a5,-20(s0)
    80012cd2:	0107d79b          	srliw	a5,a5,0x10
    80012cd6:	2781                	sext.w	a5,a5
    80012cd8:	03079713          	slli	a4,a5,0x30
    80012cdc:	9341                	srli	a4,a4,0x30
    80012cde:	fd843783          	ld	a5,-40(s0)
    80012ce2:	02e79223          	sh	a4,36(a5)
    bridge->type1.prefetch_memory_limit = end_address >> 16;
    80012ce6:	fe842783          	lw	a5,-24(s0)
    80012cea:	0107d79b          	srliw	a5,a5,0x10
    80012cee:	2781                	sext.w	a5,a5
    80012cf0:	03079713          	slli	a4,a5,0x30
    80012cf4:	9341                	srli	a4,a4,0x30
    80012cf6:	fd843783          	ld	a5,-40(s0)
    80012cfa:	02e79323          	sh	a4,38(a5)

    pci_enumerate_bus(bridge->type1.secondary_bus_no);  
    80012cfe:	fd843783          	ld	a5,-40(s0)
    80012d02:	0197c783          	lbu	a5,25(a5)
    80012d06:	853e                	mv	a0,a5
    80012d08:	e29ff0ef          	jal	ra,80012b30 <pci_enumerate_bus>
    next_mmio_address += 0x01000000;
    80012d0c:	00009797          	auipc	a5,0x9
    80012d10:	30478793          	addi	a5,a5,772 # 8001c010 <next_mmio_address>
    80012d14:	6398                	ld	a4,0(a5)
    80012d16:	010007b7          	lui	a5,0x1000
    80012d1a:	973e                	add	a4,a4,a5
    80012d1c:	00009797          	auipc	a5,0x9
    80012d20:	2f478793          	addi	a5,a5,756 # 8001c010 <next_mmio_address>
    80012d24:	e398                	sd	a4,0(a5)
}
    80012d26:	0001                	nop
    80012d28:	70a2                	ld	ra,40(sp)
    80012d2a:	7402                	ld	s0,32(sp)
    80012d2c:	6145                	addi	sp,sp,48
    80012d2e:	8082                	ret

0000000080012d30 <pci_configure_device>:

static void pci_configure_device(struct pci_ecam *device)
{
    80012d30:	7139                	addi	sp,sp,-64
    80012d32:	fc06                	sd	ra,56(sp)
    80012d34:	f822                	sd	s0,48(sp)
    80012d36:	0080                	addi	s0,sp,64
    80012d38:	fca43423          	sd	a0,-56(s0)
    // Push the device into the appropriate vector.
    // The appropriate vector is the (bus + slot) % 4 for the device.
    // This is to simplify IRQ handling.
    // Get the bus number from the device address.
    uint8_t bus = ((uintptr_t)device >> 20) & 0xF;
    80012d3c:	fc843783          	ld	a5,-56(s0)
    80012d40:	83d1                	srli	a5,a5,0x14
    80012d42:	0ff7f793          	andi	a5,a5,255
    80012d46:	8bbd                	andi	a5,a5,15
    80012d48:	fef405a3          	sb	a5,-21(s0)
    // Get the slot number from the device address.
    uint8_t slot = ((uintptr_t)device >> 15) & 0x1F;
    80012d4c:	fc843783          	ld	a5,-56(s0)
    80012d50:	83bd                	srli	a5,a5,0xf
    80012d52:	0ff7f793          	andi	a5,a5,255
    80012d56:	8bfd                	andi	a5,a5,31
    80012d58:	fef40523          	sb	a5,-22(s0)
    // The vector index is the sum of the bus and slot numbers, modulo 4.
    uint32_t vector_idx = (bus + slot) % 4;
    80012d5c:	feb44703          	lbu	a4,-21(s0)
    80012d60:	fea44783          	lbu	a5,-22(s0)
    80012d64:	9fb9                	addw	a5,a5,a4
    80012d66:	0ff7f793          	andi	a5,a5,255
    80012d6a:	2781                	sext.w	a5,a5
    80012d6c:	8b8d                	andi	a5,a5,3
    80012d6e:	fef42223          	sw	a5,-28(s0)
    // debugf("Pushing device at bus %d, slot %d into vector %d\n", bus, slot, vector_idx);
    // vector_push(all_pci_devices, (uint64_t)device);
    // vector_push(irq_pci_devices[vector_idx], (uint64_t)device);
    PCIDevice pcidev;
    pcidev.ecam_header = device;
    80012d72:	fc843783          	ld	a5,-56(s0)
    80012d76:	fcf43823          	sd	a5,-48(s0)
    pci_save_device(pcidev);
    80012d7a:	fd043503          	ld	a0,-48(s0)
    80012d7e:	a7dff0ef          	jal	ra,800127fa <pci_save_device>

    for (int i = 0; i < 6; i++) {
    80012d82:	fe042623          	sw	zero,-20(s0)
    80012d86:	aa25                	j	80012ebe <pci_configure_device+0x18e>
        // Disable the device before modifying the BAR
        device->command_reg &= ~(1 << 1);  // Clear Memory Space bit
    80012d88:	fc843783          	ld	a5,-56(s0)
    80012d8c:	0047d783          	lhu	a5,4(a5)
    80012d90:	9bf5                	andi	a5,a5,-3
    80012d92:	03079713          	slli	a4,a5,0x30
    80012d96:	9341                	srli	a4,a4,0x30
    80012d98:	fc843783          	ld	a5,-56(s0)
    80012d9c:	00e79223          	sh	a4,4(a5)
        MEMORY_BARRIER();

        device->type0.bar[i] = 0xFFFFFFFF;
    80012da0:	fc843703          	ld	a4,-56(s0)
    80012da4:	fec42783          	lw	a5,-20(s0)
    80012da8:	0791                	addi	a5,a5,4
    80012daa:	078a                	slli	a5,a5,0x2
    80012dac:	97ba                	add	a5,a5,a4
    80012dae:	577d                	li	a4,-1
    80012db0:	c398                	sw	a4,0(a5)
        MEMORY_BARRIER();
        
        uint32_t bar_value = device->type0.bar[i];
    80012db2:	fc843703          	ld	a4,-56(s0)
    80012db6:	fec42783          	lw	a5,-20(s0)
    80012dba:	0791                	addi	a5,a5,4
    80012dbc:	078a                	slli	a5,a5,0x2
    80012dbe:	97ba                	add	a5,a5,a4
    80012dc0:	439c                	lw	a5,0(a5)
    80012dc2:	fef42023          	sw	a5,-32(s0)

        // BAR not writable
        if (bar_value == 0) {
    80012dc6:	fe042783          	lw	a5,-32(s0)
    80012dca:	2781                	sext.w	a5,a5
    80012dcc:	c3fd                	beqz	a5,80012eb2 <pci_configure_device+0x182>
            continue;
        }
        
        uint32_t size = ~(bar_value & ~0xF) + 1;
    80012dce:	fe042783          	lw	a5,-32(s0)
    80012dd2:	9bc1                	andi	a5,a5,-16
    80012dd4:	2781                	sext.w	a5,a5
    80012dd6:	40f007bb          	negw	a5,a5
    80012dda:	fcf42e23          	sw	a5,-36(s0)
        next_mmio_address = (next_mmio_address + size - 1) & ~(size - 1);
    80012dde:	fdc46703          	lwu	a4,-36(s0)
    80012de2:	00009797          	auipc	a5,0x9
    80012de6:	22e78793          	addi	a5,a5,558 # 8001c010 <next_mmio_address>
    80012dea:	639c                	ld	a5,0(a5)
    80012dec:	97ba                	add	a5,a5,a4
    80012dee:	fff78713          	addi	a4,a5,-1
    80012df2:	fdc42783          	lw	a5,-36(s0)
    80012df6:	40f007bb          	negw	a5,a5
    80012dfa:	2781                	sext.w	a5,a5
    80012dfc:	1782                	slli	a5,a5,0x20
    80012dfe:	9381                	srli	a5,a5,0x20
    80012e00:	8f7d                	and	a4,a4,a5
    80012e02:	00009797          	auipc	a5,0x9
    80012e06:	20e78793          	addi	a5,a5,526 # 8001c010 <next_mmio_address>
    80012e0a:	e398                	sd	a4,0(a5)
    
        device->type0.bar[i] = next_mmio_address;  
    80012e0c:	00009797          	auipc	a5,0x9
    80012e10:	20478793          	addi	a5,a5,516 # 8001c010 <next_mmio_address>
    80012e14:	639c                	ld	a5,0(a5)
    80012e16:	0007871b          	sext.w	a4,a5
    80012e1a:	fc843683          	ld	a3,-56(s0)
    80012e1e:	fec42783          	lw	a5,-20(s0)
    80012e22:	0791                	addi	a5,a5,4
    80012e24:	078a                	slli	a5,a5,0x2
    80012e26:	97b6                	add	a5,a5,a3
    80012e28:	c398                	sw	a4,0(a5)
        next_mmio_address += size;
    80012e2a:	fdc46703          	lwu	a4,-36(s0)
    80012e2e:	00009797          	auipc	a5,0x9
    80012e32:	1e278793          	addi	a5,a5,482 # 8001c010 <next_mmio_address>
    80012e36:	639c                	ld	a5,0(a5)
    80012e38:	973e                	add	a4,a4,a5
    80012e3a:	00009797          	auipc	a5,0x9
    80012e3e:	1d678793          	addi	a5,a5,470 # 8001c010 <next_mmio_address>
    80012e42:	e398                	sd	a4,0(a5)

        // 64-bit BAR
        if ((bar_value & 0x6) == 0x4) {
    80012e44:	fe042783          	lw	a5,-32(s0)
    80012e48:	8b99                	andi	a5,a5,6
    80012e4a:	2781                	sext.w	a5,a5
    80012e4c:	873e                	mv	a4,a5
    80012e4e:	4791                	li	a5,4
    80012e50:	04f71363          	bne	a4,a5,80012e96 <pci_configure_device+0x166>
            i++;
    80012e54:	fec42783          	lw	a5,-20(s0)
    80012e58:	2785                	addiw	a5,a5,1
    80012e5a:	fef42623          	sw	a5,-20(s0)
            device->type0.bar[i] = next_mmio_address >> 32; 
    80012e5e:	00009797          	auipc	a5,0x9
    80012e62:	1b278793          	addi	a5,a5,434 # 8001c010 <next_mmio_address>
    80012e66:	639c                	ld	a5,0(a5)
    80012e68:	9381                	srli	a5,a5,0x20
    80012e6a:	0007871b          	sext.w	a4,a5
    80012e6e:	fc843683          	ld	a3,-56(s0)
    80012e72:	fec42783          	lw	a5,-20(s0)
    80012e76:	0791                	addi	a5,a5,4
    80012e78:	078a                	slli	a5,a5,0x2
    80012e7a:	97b6                	add	a5,a5,a3
    80012e7c:	c398                	sw	a4,0(a5)
            next_mmio_address += 4;  
    80012e7e:	00009797          	auipc	a5,0x9
    80012e82:	19278793          	addi	a5,a5,402 # 8001c010 <next_mmio_address>
    80012e86:	639c                	ld	a5,0(a5)
    80012e88:	00478713          	addi	a4,a5,4
    80012e8c:	00009797          	auipc	a5,0x9
    80012e90:	18478793          	addi	a5,a5,388 # 8001c010 <next_mmio_address>
    80012e94:	e398                	sd	a4,0(a5)
        }

        // Re-enable the device after modifying the BAR
        device->command_reg |= (1 << 1);
    80012e96:	fc843783          	ld	a5,-56(s0)
    80012e9a:	0047d783          	lhu	a5,4(a5)
    80012e9e:	0027e793          	ori	a5,a5,2
    80012ea2:	03079713          	slli	a4,a5,0x30
    80012ea6:	9341                	srli	a4,a4,0x30
    80012ea8:	fc843783          	ld	a5,-56(s0)
    80012eac:	00e79223          	sh	a4,4(a5)
        MEMORY_BARRIER();
    80012eb0:	a011                	j	80012eb4 <pci_configure_device+0x184>
            continue;
    80012eb2:	0001                	nop
    for (int i = 0; i < 6; i++) {
    80012eb4:	fec42783          	lw	a5,-20(s0)
    80012eb8:	2785                	addiw	a5,a5,1
    80012eba:	fef42623          	sw	a5,-20(s0)
    80012ebe:	fec42783          	lw	a5,-20(s0)
    80012ec2:	0007871b          	sext.w	a4,a5
    80012ec6:	4795                	li	a5,5
    80012ec8:	ece7d0e3          	bge	a5,a4,80012d88 <pci_configure_device+0x58>
    }
}
    80012ecc:	0001                	nop
    80012ece:	0001                	nop
    80012ed0:	70e2                	ld	ra,56(sp)
    80012ed2:	7442                	ld	s0,48(sp)
    80012ed4:	6121                	addi	sp,sp,64
    80012ed6:	8082                	ret

0000000080012ed8 <print_vendor_specific_capabilities>:

void print_vendor_specific_capabilities(PCIDevice *pcidevice)
{
    80012ed8:	7179                	addi	sp,sp,-48
    80012eda:	f406                	sd	ra,40(sp)
    80012edc:	f022                	sd	s0,32(sp)
    80012ede:	1800                	addi	s0,sp,48
    80012ee0:	fca43c23          	sd	a0,-40(s0)
    struct pci_ecam *header = pcidevice->ecam_header;
    80012ee4:	fd843783          	ld	a5,-40(s0)
    80012ee8:	639c                	ld	a5,0(a5)
    80012eea:	fef43423          	sd	a5,-24(s0)
    if (header->vendor_id != 0x1AF4) return;  
    80012eee:	fe843783          	ld	a5,-24(s0)
    80012ef2:	0007d783          	lhu	a5,0(a5)
    80012ef6:	0007871b          	sext.w	a4,a5
    80012efa:	6789                	lui	a5,0x2
    80012efc:	af478793          	addi	a5,a5,-1292 # 1af4 <i+0x1ad4>
    80012f00:	0af71163          	bne	a4,a5,80012fa2 <print_vendor_specific_capabilities+0xca>

    uint8_t cap_pointer = header->type0.capes_pointer;  
    80012f04:	fe843783          	ld	a5,-24(s0)
    80012f08:	0347c783          	lbu	a5,52(a5)
    80012f0c:	fef403a3          	sb	a5,-25(s0)
    debugf("Vendor specific capabilities with offset 0x%02x\n", cap_pointer);
    80012f10:	fe744783          	lbu	a5,-25(s0)
    80012f14:	2781                	sext.w	a5,a5
    80012f16:	85be                	mv	a1,a5
    80012f18:	00007517          	auipc	a0,0x7
    80012f1c:	57850513          	addi	a0,a0,1400 # 8001a490 <pow10.0+0x260>
    80012f20:	5cf010ef          	jal	ra,80014cee <debugf>
    debugf("  Common configuration capability at: 0x%08x\n", pci_get_virtio_common_config(pcidevice));
    80012f24:	fd843503          	ld	a0,-40(s0)
    80012f28:	a93ff0ef          	jal	ra,800129ba <pci_get_virtio_common_config>
    80012f2c:	87aa                	mv	a5,a0
    80012f2e:	85be                	mv	a1,a5
    80012f30:	00007517          	auipc	a0,0x7
    80012f34:	59850513          	addi	a0,a0,1432 # 8001a4c8 <pow10.0+0x298>
    80012f38:	5b7010ef          	jal	ra,80014cee <debugf>
    debugf("  Notify configuration capability at: 0x%08x\n", pci_get_virtio_notify_capability(pcidevice));
    80012f3c:	fd843503          	ld	a0,-40(s0)
    80012f40:	a9dff0ef          	jal	ra,800129dc <pci_get_virtio_notify_capability>
    80012f44:	87aa                	mv	a5,a0
    80012f46:	85be                	mv	a1,a5
    80012f48:	00007517          	auipc	a0,0x7
    80012f4c:	5b050513          	addi	a0,a0,1456 # 8001a4f8 <pow10.0+0x2c8>
    80012f50:	59f010ef          	jal	ra,80014cee <debugf>
    debugf("  ISR configuration capability at: 0x%08x\n", pci_get_virtio_isr_status(pcidevice));
    80012f54:	fd843503          	ld	a0,-40(s0)
    80012f58:	aa7ff0ef          	jal	ra,800129fe <pci_get_virtio_isr_status>
    80012f5c:	87aa                	mv	a5,a0
    80012f5e:	85be                	mv	a1,a5
    80012f60:	00007517          	auipc	a0,0x7
    80012f64:	5c850513          	addi	a0,a0,1480 # 8001a528 <pow10.0+0x2f8>
    80012f68:	587010ef          	jal	ra,80014cee <debugf>
    debugf("  Device configuration capability at: 0x%08x\n", pci_get_virtio_capability(pcidevice, 0x04));
    80012f6c:	4591                	li	a1,4
    80012f6e:	fd843503          	ld	a0,-40(s0)
    80012f72:	f58ff0ef          	jal	ra,800126ca <pci_get_virtio_capability>
    80012f76:	87aa                	mv	a5,a0
    80012f78:	85be                	mv	a1,a5
    80012f7a:	00007517          	auipc	a0,0x7
    80012f7e:	5de50513          	addi	a0,a0,1502 # 8001a558 <pow10.0+0x328>
    80012f82:	56d010ef          	jal	ra,80014cee <debugf>
    debugf("  PCI configuration access capability at: 0x%08x\n", pci_get_virtio_capability(pcidevice, 0x05));
    80012f86:	4595                	li	a1,5
    80012f88:	fd843503          	ld	a0,-40(s0)
    80012f8c:	f3eff0ef          	jal	ra,800126ca <pci_get_virtio_capability>
    80012f90:	87aa                	mv	a5,a0
    80012f92:	85be                	mv	a1,a5
    80012f94:	00007517          	auipc	a0,0x7
    80012f98:	5f450513          	addi	a0,a0,1524 # 8001a588 <pow10.0+0x358>
    80012f9c:	553010ef          	jal	ra,80014cee <debugf>
    80012fa0:	a011                	j	80012fa4 <print_vendor_specific_capabilities+0xcc>
    if (header->vendor_id != 0x1AF4) return;  
    80012fa2:	0001                	nop
        }

        cap_pointer = cape->next;  
    }
    */
}
    80012fa4:	70a2                	ld	ra,40(sp)
    80012fa6:	7402                	ld	s0,32(sp)
    80012fa8:	6145                	addi	sp,sp,48
    80012faa:	8082                	ret

0000000080012fac <pci_init>:

void pci_init(void)
{
    80012fac:	1101                	addi	sp,sp,-32
    80012fae:	ec06                	sd	ra,24(sp)
    80012fb0:	e822                	sd	s0,16(sp)
    80012fb2:	1000                	addi	s0,sp,32
    next_bus_number = 0;
    80012fb4:	00009797          	auipc	a5,0x9
    80012fb8:	05478793          	addi	a5,a5,84 # 8001c008 <next_bus_number>
    80012fbc:	00078023          	sb	zero,0(a5)
    next_mmio_address = 0x41000000;
    80012fc0:	00009797          	auipc	a5,0x9
    80012fc4:	05078793          	addi	a5,a5,80 # 8001c010 <next_mmio_address>
    80012fc8:	41000737          	lui	a4,0x41000
    80012fcc:	e398                	sd	a4,0(a5)
    all_pci_devices = vector_new();
    80012fce:	537030ef          	jal	ra,80016d04 <vector_new>
    80012fd2:	872a                	mv	a4,a0
    80012fd4:	00006797          	auipc	a5,0x6
    80012fd8:	05478793          	addi	a5,a5,84 # 80019028 <all_pci_devices>
    80012fdc:	e398                	sd	a4,0(a5)
    for (int i=0; i<4; i++) {
    80012fde:	fe042623          	sw	zero,-20(s0)
    80012fe2:	a015                	j	80013006 <pci_init+0x5a>
        irq_pci_devices[i] = vector_new();
    80012fe4:	521030ef          	jal	ra,80016d04 <vector_new>
    80012fe8:	86aa                	mv	a3,a0
    80012fea:	00006717          	auipc	a4,0x6
    80012fee:	04670713          	addi	a4,a4,70 # 80019030 <irq_pci_devices>
    80012ff2:	fec42783          	lw	a5,-20(s0)
    80012ff6:	078e                	slli	a5,a5,0x3
    80012ff8:	97ba                	add	a5,a5,a4
    80012ffa:	e394                	sd	a3,0(a5)
    for (int i=0; i<4; i++) {
    80012ffc:	fec42783          	lw	a5,-20(s0)
    80013000:	2785                	addiw	a5,a5,1
    80013002:	fef42623          	sw	a5,-20(s0)
    80013006:	fec42783          	lw	a5,-20(s0)
    8001300a:	0007871b          	sext.w	a4,a5
    8001300e:	478d                	li	a5,3
    80013010:	fce7dae3          	bge	a5,a4,80012fe4 <pci_init+0x38>
    }

    pci_enumerate_bus(0);
    80013014:	4501                	li	a0,0
    80013016:	b1bff0ef          	jal	ra,80012b30 <pci_enumerate_bus>

    debugf("PCI devices: %d\n", pci_count_saved_devices());
    8001301a:	f28ff0ef          	jal	ra,80012742 <pci_count_saved_devices>
    8001301e:	87aa                	mv	a5,a0
    80013020:	85be                	mv	a1,a5
    80013022:	00007517          	auipc	a0,0x7
    80013026:	59e50513          	addi	a0,a0,1438 # 8001a5c0 <pow10.0+0x390>
    8001302a:	4c5010ef          	jal	ra,80014cee <debugf>
    debugf("PCI devices sharing IRQ 32: %d\n", pci_count_irq_listeners(32));
    8001302e:	02000513          	li	a0,32
    80013032:	f3aff0ef          	jal	ra,8001276c <pci_count_irq_listeners>
    80013036:	87aa                	mv	a5,a0
    80013038:	85be                	mv	a1,a5
    8001303a:	00007517          	auipc	a0,0x7
    8001303e:	59e50513          	addi	a0,a0,1438 # 8001a5d8 <pow10.0+0x3a8>
    80013042:	4ad010ef          	jal	ra,80014cee <debugf>
    debugf("PCI devices sharing IRQ 33: %d\n", pci_count_irq_listeners(33));
    80013046:	02100513          	li	a0,33
    8001304a:	f22ff0ef          	jal	ra,8001276c <pci_count_irq_listeners>
    8001304e:	87aa                	mv	a5,a0
    80013050:	85be                	mv	a1,a5
    80013052:	00007517          	auipc	a0,0x7
    80013056:	5a650513          	addi	a0,a0,1446 # 8001a5f8 <pow10.0+0x3c8>
    8001305a:	495010ef          	jal	ra,80014cee <debugf>
    debugf("PCI devices sharing IRQ 34: %d\n", pci_count_irq_listeners(34));
    8001305e:	02200513          	li	a0,34
    80013062:	f0aff0ef          	jal	ra,8001276c <pci_count_irq_listeners>
    80013066:	87aa                	mv	a5,a0
    80013068:	85be                	mv	a1,a5
    8001306a:	00007517          	auipc	a0,0x7
    8001306e:	5ae50513          	addi	a0,a0,1454 # 8001a618 <pow10.0+0x3e8>
    80013072:	47d010ef          	jal	ra,80014cee <debugf>
    debugf("PCI devices sharing IRQ 35: %d\n", pci_count_irq_listeners(35));
    80013076:	02300513          	li	a0,35
    8001307a:	ef2ff0ef          	jal	ra,8001276c <pci_count_irq_listeners>
    8001307e:	87aa                	mv	a5,a0
    80013080:	85be                	mv	a1,a5
    80013082:	00007517          	auipc	a0,0x7
    80013086:	5b650513          	addi	a0,a0,1462 # 8001a638 <pow10.0+0x408>
    8001308a:	465010ef          	jal	ra,80014cee <debugf>
}
    8001308e:	0001                	nop
    80013090:	60e2                	ld	ra,24(sp)
    80013092:	6442                	ld	s0,16(sp)
    80013094:	6105                	addi	sp,sp,32
    80013096:	8082                	ret

0000000080013098 <pci_dispatch_irq>:
/**
 * @brief Dispatch an interrupt to the PCI subsystem
 * @param irq - the IRQ number that interrupted
 */
void pci_dispatch_irq(int irq)
{
    80013098:	7179                	addi	sp,sp,-48
    8001309a:	f406                	sd	ra,40(sp)
    8001309c:	f022                	sd	s0,32(sp)
    8001309e:	1800                	addi	s0,sp,48
    800130a0:	87aa                	mv	a5,a0
    800130a2:	fcf42e23          	sw	a5,-36(s0)
    // device changed its configuration, and that was the reason
    // the interrupt occurred.

    // IRQ#=32+(bus+slot)mod4
    // uint32_t vector_idx = irq - 32;
    PCIDevice *pcidevice = pci_find_device_by_irq(irq);
    800130a6:	fdc42783          	lw	a5,-36(s0)
    800130aa:	0ff7f793          	andi	a5,a5,255
    800130ae:	853e                	mv	a0,a5
    800130b0:	85bff0ef          	jal	ra,8001290a <pci_find_device_by_irq>
    800130b4:	fea43423          	sd	a0,-24(s0)
    debugf("PCI device with IRQ %d: 0x%04x\n", irq, pcidevice->ecam_header->device_id);
    800130b8:	fe843783          	ld	a5,-24(s0)
    800130bc:	639c                	ld	a5,0(a5)
    800130be:	0027d783          	lhu	a5,2(a5)
    800130c2:	0007871b          	sext.w	a4,a5
    800130c6:	fdc42783          	lw	a5,-36(s0)
    800130ca:	863a                	mv	a2,a4
    800130cc:	85be                	mv	a1,a5
    800130ce:	00007517          	auipc	a0,0x7
    800130d2:	58a50513          	addi	a0,a0,1418 # 8001a658 <pow10.0+0x428>
    800130d6:	419010ef          	jal	ra,80014cee <debugf>
    if (pcidevice == NULL) {
    800130da:	fe843783          	ld	a5,-24(s0)
    800130de:	eb99                	bnez	a5,800130f4 <pci_dispatch_irq+0x5c>
        debugf("No PCI device found with IRQ %d\n", irq);
    800130e0:	fdc42783          	lw	a5,-36(s0)
    800130e4:	85be                	mv	a1,a5
    800130e6:	00007517          	auipc	a0,0x7
    800130ea:	59250513          	addi	a0,a0,1426 # 8001a678 <pow10.0+0x448>
    800130ee:	401010ef          	jal	ra,80014cee <debugf>
        return;
    800130f2:	0001                	nop
    }
}
    800130f4:	70a2                	ld	ra,40(sp)
    800130f6:	7402                	ld	s0,32(sp)
    800130f8:	6145                	addi	sp,sp,48
    800130fa:	8082                	ret

00000000800130fc <mutex_trylock>:
#include <config.h>
#include <lock.h>
#include <compiler.h>

bool mutex_trylock(Mutex *mutex)
{
    800130fc:	7179                	addi	sp,sp,-48
    800130fe:	f422                	sd	s0,40(sp)
    80013100:	1800                	addi	s0,sp,48
    80013102:	fca43c23          	sd	a0,-40(s0)
    int old;
    asm volatile("amoswap.w.aq %0, %1, (%2)" : "=r"(old) : "r"(MUTEX_LOCKED), "r"(mutex));
    80013106:	4785                	li	a5,1
    80013108:	fd843703          	ld	a4,-40(s0)
    8001310c:	0cf727af          	amoswap.w.aq	a5,a5,(a4)
    80013110:	fef42623          	sw	a5,-20(s0)
    // If old == MUTEX_LOCKED, that means the mutex was already
    // locked when we tried to lock it. That means we didn't acquire
    // it.
    return old != MUTEX_LOCKED;
    80013114:	fec42783          	lw	a5,-20(s0)
    80013118:	0007871b          	sext.w	a4,a5
    8001311c:	4785                	li	a5,1
    8001311e:	40f707b3          	sub	a5,a4,a5
    80013122:	00f037b3          	snez	a5,a5
    80013126:	0ff7f793          	andi	a5,a5,255
}
    8001312a:	853e                	mv	a0,a5
    8001312c:	7422                	ld	s0,40(sp)
    8001312e:	6145                	addi	sp,sp,48
    80013130:	8082                	ret

0000000080013132 <mutex_spinlock>:

void mutex_spinlock(Mutex *mutex)
{
    80013132:	1101                	addi	sp,sp,-32
    80013134:	ec06                	sd	ra,24(sp)
    80013136:	e822                	sd	s0,16(sp)
    80013138:	1000                	addi	s0,sp,32
    8001313a:	fea43423          	sd	a0,-24(s0)
    while (!mutex_trylock(mutex))
    8001313e:	0001                	nop
    80013140:	fe843503          	ld	a0,-24(s0)
    80013144:	fb9ff0ef          	jal	ra,800130fc <mutex_trylock>
    80013148:	87aa                	mv	a5,a0
    8001314a:	0017c793          	xori	a5,a5,1
    8001314e:	0ff7f793          	andi	a5,a5,255
    80013152:	f7fd                	bnez	a5,80013140 <mutex_spinlock+0xe>
        ;
}
    80013154:	0001                	nop
    80013156:	0001                	nop
    80013158:	60e2                	ld	ra,24(sp)
    8001315a:	6442                	ld	s0,16(sp)
    8001315c:	6105                	addi	sp,sp,32
    8001315e:	8082                	ret

0000000080013160 <mutex_unlock>:

void mutex_unlock(Mutex *mutex)
{
    80013160:	1101                	addi	sp,sp,-32
    80013162:	ec22                	sd	s0,24(sp)
    80013164:	1000                	addi	s0,sp,32
    80013166:	fea43423          	sd	a0,-24(s0)
    asm volatile("amoswap.w.rl zero, zero, (%0)" : : "r"(mutex));
    8001316a:	fe843783          	ld	a5,-24(s0)
    8001316e:	0a07a02f          	amoswap.w.rl	zero,zero,(a5)
}
    80013172:	0001                	nop
    80013174:	6462                	ld	s0,24(sp)
    80013176:	6105                	addi	sp,sp,32
    80013178:	8082                	ret

000000008001317a <mmu_table_create>:
#define ADDR_1_BIT   21
#define ADDR_2_BIT   30


struct page_table *mmu_table_create(void)
{
    8001317a:	1141                	addi	sp,sp,-16
    8001317c:	e406                	sd	ra,8(sp)
    8001317e:	e022                	sd	s0,0(sp)
    80013180:	0800                	addi	s0,sp,16
    return page_zalloc();
    80013182:	4505                	li	a0,1
    80013184:	770020ef          	jal	ra,800158f4 <page_znalloc>
    80013188:	87aa                	mv	a5,a0
}
    8001318a:	853e                	mv	a0,a5
    8001318c:	60a2                	ld	ra,8(sp)
    8001318e:	6402                	ld	s0,0(sp)
    80013190:	0141                	addi	sp,sp,16
    80013192:	8082                	ret

0000000080013194 <is_valid>:

// Check the valid bit of a page table entry.
static inline bool is_valid(unsigned long pte)
{
    80013194:	1101                	addi	sp,sp,-32
    80013196:	ec22                	sd	s0,24(sp)
    80013198:	1000                	addi	s0,sp,32
    8001319a:	fea43423          	sd	a0,-24(s0)
    return pte & 1UL;
    8001319e:	fe843783          	ld	a5,-24(s0)
    800131a2:	8b85                	andi	a5,a5,1
    800131a4:	00f037b3          	snez	a5,a5
    800131a8:	0ff7f793          	andi	a5,a5,255
}
    800131ac:	853e                	mv	a0,a5
    800131ae:	6462                	ld	s0,24(sp)
    800131b0:	6105                	addi	sp,sp,32
    800131b2:	8082                	ret

00000000800131b4 <is_leaf>:

// Check if a page table entry is a leaf, return false if it's a branch.
static inline bool is_leaf(unsigned long pte)
{
    800131b4:	1101                	addi	sp,sp,-32
    800131b6:	ec22                	sd	s0,24(sp)
    800131b8:	1000                	addi	s0,sp,32
    800131ba:	fea43423          	sd	a0,-24(s0)
    return (pte & 0xE) != 0;
    800131be:	fe843783          	ld	a5,-24(s0)
    800131c2:	8bb9                	andi	a5,a5,14
    800131c4:	00f037b3          	snez	a5,a5
    800131c8:	0ff7f793          	andi	a5,a5,255
}
    800131cc:	853e                	mv	a0,a5
    800131ce:	6462                	ld	s0,24(sp)
    800131d0:	6105                	addi	sp,sp,32
    800131d2:	8082                	ret

00000000800131d4 <mmu_map>:

bool mmu_map(struct page_table *tab, uint64_t vaddr, uint64_t paddr, uint8_t lvl, uint64_t bits)
{
    800131d4:	7135                	addi	sp,sp,-160
    800131d6:	ed06                	sd	ra,152(sp)
    800131d8:	e922                	sd	s0,144(sp)
    800131da:	1100                	addi	s0,sp,160
    800131dc:	f8a43423          	sd	a0,-120(s0)
    800131e0:	f8b43023          	sd	a1,-128(s0)
    800131e4:	f6c43c23          	sd	a2,-136(s0)
    800131e8:	87b6                	mv	a5,a3
    800131ea:	f6e43423          	sd	a4,-152(s0)
    800131ee:	f6f40ba3          	sb	a5,-137(s0)
    if (tab == NULL || lvl > MMU_LEVEL_1G || (bits & 0xE) == 0) {
    800131f2:	f8843783          	ld	a5,-120(s0)
    800131f6:	cf81                	beqz	a5,8001320e <mmu_map+0x3a>
    800131f8:	f7744783          	lbu	a5,-137(s0)
    800131fc:	0ff7f713          	andi	a4,a5,255
    80013200:	4789                	li	a5,2
    80013202:	00e7e663          	bltu	a5,a4,8001320e <mmu_map+0x3a>
    80013206:	f6843783          	ld	a5,-152(s0)
    8001320a:	8bb9                	andi	a5,a5,14
    8001320c:	e399                	bnez	a5,80013212 <mmu_map+0x3e>
        // debugf("mmu_map: invalid argument");
        return false;
    8001320e:	4781                	li	a5,0
    80013210:	aab9                	j	8001336e <mmu_map+0x19a>

    // debugf("mmu_map: page table at 0x%08lx\n", tab);
    // debugf("mmu_map: vaddr == 0x%08lx\n", vaddr);
    // debugf("mmu_map: paddr == 0x%08lx\n", paddr);

    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    80013212:	f8043783          	ld	a5,-128(s0)
    80013216:	83b1                	srli	a5,a5,0xc
    80013218:	1ff7f793          	andi	a5,a5,511
    8001321c:	faf43823          	sd	a5,-80(s0)
    80013220:	f8043783          	ld	a5,-128(s0)
    80013224:	83d5                	srli	a5,a5,0x15
    80013226:	1ff7f793          	andi	a5,a5,511
    8001322a:	faf43c23          	sd	a5,-72(s0)
                            (vaddr >> ADDR_2_BIT) & 0x1FF};
    8001322e:	f8043783          	ld	a5,-128(s0)
    80013232:	83f9                	srli	a5,a5,0x1e
    80013234:	1ff7f793          	andi	a5,a5,511
    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    80013238:	fcf43023          	sd	a5,-64(s0)
    // debugf("mmu_map: vpn = {%d, %d, %d}\n", vpn[0], vpn[1], vpn[2]);
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    8001323c:	f7843783          	ld	a5,-136(s0)
    80013240:	83b1                	srli	a5,a5,0xc
    80013242:	1ff7f793          	andi	a5,a5,511
    80013246:	f8f43c23          	sd	a5,-104(s0)
    8001324a:	f7843783          	ld	a5,-136(s0)
    8001324e:	83d5                	srli	a5,a5,0x15
    80013250:	1ff7f793          	andi	a5,a5,511
    80013254:	faf43023          	sd	a5,-96(s0)
                            (paddr >> ADDR_2_BIT) & 0x3FFFFFF};
    80013258:	f7843783          	ld	a5,-136(s0)
    8001325c:	01e7d713          	srli	a4,a5,0x1e
    80013260:	040007b7          	lui	a5,0x4000
    80013264:	17fd                	addi	a5,a5,-1
    80013266:	8ff9                	and	a5,a5,a4
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    80013268:	faf43423          	sd	a5,-88(s0)

    int i;
    struct page_table *pt = tab;
    8001326c:	f8843783          	ld	a5,-120(s0)
    80013270:	fef43023          	sd	a5,-32(s0)

    for (i = MMU_LEVEL_1G; i > lvl; i--) {
    80013274:	4789                	li	a5,2
    80013276:	fef42623          	sw	a5,-20(s0)
    8001327a:	a871                	j	80013316 <mmu_map+0x142>
        unsigned long pte = pt->entries[vpn[i]];
    8001327c:	fec42783          	lw	a5,-20(s0)
    80013280:	078e                	slli	a5,a5,0x3
    80013282:	ff040713          	addi	a4,s0,-16
    80013286:	97ba                	add	a5,a5,a4
    80013288:	fc07b783          	ld	a5,-64(a5) # 3ffffc0 <i+0x3ffffa0>
    8001328c:	fe043703          	ld	a4,-32(s0)
    80013290:	078e                	slli	a5,a5,0x3
    80013292:	97ba                	add	a5,a5,a4
    80013294:	639c                	ld	a5,0(a5)
    80013296:	fcf43823          	sd	a5,-48(s0)

        if (!is_valid(pte)) {
    8001329a:	fd043503          	ld	a0,-48(s0)
    8001329e:	ef7ff0ef          	jal	ra,80013194 <is_valid>
    800132a2:	87aa                	mv	a5,a0
    800132a4:	0017c793          	xori	a5,a5,1
    800132a8:	0ff7f793          	andi	a5,a5,255
    800132ac:	cf8d                	beqz	a5,800132e6 <mmu_map+0x112>
            // debugf("mmu_map: entry %d in page table at 0x%08lx is invalid\n", vpn[i], pt);
            struct page_table *new_pt = mmu_table_create();
    800132ae:	ecdff0ef          	jal	ra,8001317a <mmu_table_create>
    800132b2:	fca43423          	sd	a0,-56(s0)
            if (new_pt == NULL) {
    800132b6:	fc843783          	ld	a5,-56(s0)
    800132ba:	e399                	bnez	a5,800132c0 <mmu_map+0xec>
                // debugf("mmu_map: mmu_table_create returned null");
                return false;
    800132bc:	4781                	li	a5,0
    800132be:	a845                	j	8001336e <mmu_map+0x19a>
            }
            // debugf("mmu_map: create a new page table at 0x%08lx\n", new_pt);
            pt->entries[vpn[i]] = (unsigned long)new_pt >> 2 | PB_VALID;
    800132c0:	fc843783          	ld	a5,-56(s0)
    800132c4:	0027d713          	srli	a4,a5,0x2
    800132c8:	fec42783          	lw	a5,-20(s0)
    800132cc:	078e                	slli	a5,a5,0x3
    800132ce:	ff040693          	addi	a3,s0,-16
    800132d2:	97b6                	add	a5,a5,a3
    800132d4:	fc07b783          	ld	a5,-64(a5)
    800132d8:	00176713          	ori	a4,a4,1
    800132dc:	fe043683          	ld	a3,-32(s0)
    800132e0:	078e                	slli	a5,a5,0x3
    800132e2:	97b6                	add	a5,a5,a3
    800132e4:	e398                	sd	a4,0(a5)
            // debugf("mmu_map: set entry %d in page table at 0x%08lx as lvl %d branch to 0x%08lx\n", vpn[i], pt, i, new_pt);
        } else {
            // debugf("mmu_map: entry %d in page table at 0x%08lx is valid\n", vpn[i], pt);
        }
        pt = (struct page_table*)((pt->entries[vpn[i]] & ~0x3FF) << 2);
    800132e6:	fec42783          	lw	a5,-20(s0)
    800132ea:	078e                	slli	a5,a5,0x3
    800132ec:	ff040713          	addi	a4,s0,-16
    800132f0:	97ba                	add	a5,a5,a4
    800132f2:	fc07b783          	ld	a5,-64(a5)
    800132f6:	fe043703          	ld	a4,-32(s0)
    800132fa:	078e                	slli	a5,a5,0x3
    800132fc:	97ba                	add	a5,a5,a4
    800132fe:	639c                	ld	a5,0(a5)
    80013300:	00279713          	slli	a4,a5,0x2
    80013304:	77fd                	lui	a5,0xfffff
    80013306:	8ff9                	and	a5,a5,a4
    80013308:	fef43023          	sd	a5,-32(s0)
    for (i = MMU_LEVEL_1G; i > lvl; i--) {
    8001330c:	fec42783          	lw	a5,-20(s0)
    80013310:	37fd                	addiw	a5,a5,-1
    80013312:	fef42623          	sw	a5,-20(s0)
    80013316:	f7744783          	lbu	a5,-137(s0)
    8001331a:	0007871b          	sext.w	a4,a5
    8001331e:	fec42783          	lw	a5,-20(s0)
    80013322:	2781                	sext.w	a5,a5
    80013324:	f4f74ce3          	blt	a4,a5,8001327c <mmu_map+0xa8>
    }

    unsigned long ppn_leaf = ppn[2] << PTE_PPN2_BIT |
    80013328:	fa843783          	ld	a5,-88(s0)
    8001332c:	01c79713          	slli	a4,a5,0x1c
                             ppn[1] << PTE_PPN1_BIT |
    80013330:	fa043783          	ld	a5,-96(s0)
    80013334:	07ce                	slli	a5,a5,0x13
    unsigned long ppn_leaf = ppn[2] << PTE_PPN2_BIT |
    80013336:	8f5d                	or	a4,a4,a5
                             ppn[0] << PTE_PPN0_BIT;
    80013338:	f9843783          	ld	a5,-104(s0)
    8001333c:	07aa                	slli	a5,a5,0xa
    unsigned long ppn_leaf = ppn[2] << PTE_PPN2_BIT |
    8001333e:	8fd9                	or	a5,a5,a4
    80013340:	fcf43c23          	sd	a5,-40(s0)
    
    // debugf("mmu_map: ppn_leaf == 0x%x\n", (ppn_leaf << 2));
    pt->entries[vpn[i]] = ppn_leaf | bits | PB_VALID;
    80013344:	fd843703          	ld	a4,-40(s0)
    80013348:	f6843783          	ld	a5,-152(s0)
    8001334c:	8f5d                	or	a4,a4,a5
    8001334e:	fec42783          	lw	a5,-20(s0)
    80013352:	078e                	slli	a5,a5,0x3
    80013354:	ff040693          	addi	a3,s0,-16
    80013358:	97b6                	add	a5,a5,a3
    8001335a:	fc07b783          	ld	a5,-64(a5) # ffffffffffffefc0 <_heap_end+0xffffffff77feefc0>
    8001335e:	00176713          	ori	a4,a4,1
    80013362:	fe043683          	ld	a3,-32(s0)
    80013366:	078e                	slli	a5,a5,0x3
    80013368:	97b6                	add	a5,a5,a3
    8001336a:	e398                	sd	a4,0(a5)

    // debugf("mmu_map: set bits of address 0x%08lx to 0x%08lx\n", &pt->entries[vpn[i]], ppn_leaf | bits | PB_VALID);

    // debugf("mmu_map: set entry %d in page table at 0x%08lx as lvl %d leaf to 0x%08lx\n", vpn[i], pt, i, ppn_leaf << 2);
    return true;
    8001336c:	4785                	li	a5,1
}
    8001336e:	853e                	mv	a0,a5
    80013370:	60ea                	ld	ra,152(sp)
    80013372:	644a                	ld	s0,144(sp)
    80013374:	610d                	addi	sp,sp,160
    80013376:	8082                	ret

0000000080013378 <mmu_free>:

void mmu_free(struct page_table *tab) 
{ 
    80013378:	7179                	addi	sp,sp,-48
    8001337a:	f406                	sd	ra,40(sp)
    8001337c:	f022                	sd	s0,32(sp)
    8001337e:	1800                	addi	s0,sp,48
    80013380:	fca43c23          	sd	a0,-40(s0)
    uint64_t entry; 
    int i; 

    if (tab == NULL) { 
    80013384:	fd843783          	ld	a5,-40(s0)
    80013388:	c7a5                	beqz	a5,800133f0 <mmu_free+0x78>
        return; 
    } 

    for (i = 0; i < (PAGE_SIZE / 8); i++) { 
    8001338a:	fe042623          	sw	zero,-20(s0)
    8001338e:	a0a1                	j	800133d6 <mmu_free+0x5e>
        entry = tab->entries[i]; 
    80013390:	fd843703          	ld	a4,-40(s0)
    80013394:	fec42783          	lw	a5,-20(s0)
    80013398:	078e                	slli	a5,a5,0x3
    8001339a:	97ba                	add	a5,a5,a4
    8001339c:	639c                	ld	a5,0(a5)
    8001339e:	fef43023          	sd	a5,-32(s0)
        if (entry & PB_VALID) {
    800133a2:	fe043783          	ld	a5,-32(s0)
    800133a6:	8b85                	andi	a5,a5,1
    800133a8:	cb91                	beqz	a5,800133bc <mmu_free+0x44>
            mmu_free((struct page_table *)((entry & ~0x3FF) << 2)); // Recurse into the next level
    800133aa:	fe043783          	ld	a5,-32(s0)
    800133ae:	00279713          	slli	a4,a5,0x2
    800133b2:	77fd                	lui	a5,0xfffff
    800133b4:	8ff9                	and	a5,a5,a4
    800133b6:	853e                	mv	a0,a5
    800133b8:	fc1ff0ef          	jal	ra,80013378 <mmu_free>
        }
        tab->entries[i] = 0; 
    800133bc:	fd843703          	ld	a4,-40(s0)
    800133c0:	fec42783          	lw	a5,-20(s0)
    800133c4:	078e                	slli	a5,a5,0x3
    800133c6:	97ba                	add	a5,a5,a4
    800133c8:	0007b023          	sd	zero,0(a5) # fffffffffffff000 <_heap_end+0xffffffff77fef000>
    for (i = 0; i < (PAGE_SIZE / 8); i++) { 
    800133cc:	fec42783          	lw	a5,-20(s0)
    800133d0:	2785                	addiw	a5,a5,1
    800133d2:	fef42623          	sw	a5,-20(s0)
    800133d6:	fec42783          	lw	a5,-20(s0)
    800133da:	0007871b          	sext.w	a4,a5
    800133de:	1ff00793          	li	a5,511
    800133e2:	fae7d7e3          	bge	a5,a4,80013390 <mmu_free+0x18>
    } 

    page_free(tab); 
    800133e6:	fd843503          	ld	a0,-40(s0)
    800133ea:	55e020ef          	jal	ra,80015948 <page_free>
    800133ee:	a011                	j	800133f2 <mmu_free+0x7a>
        return; 
    800133f0:	0001                	nop
}
    800133f2:	70a2                	ld	ra,40(sp)
    800133f4:	7402                	ld	s0,32(sp)
    800133f6:	6145                	addi	sp,sp,48
    800133f8:	8082                	ret

00000000800133fa <mmu_translate>:

uint64_t mmu_translate(const struct page_table *tab, uint64_t vaddr) 
{ 
    800133fa:	7159                	addi	sp,sp,-112
    800133fc:	f486                	sd	ra,104(sp)
    800133fe:	f0a2                	sd	s0,96(sp)
    80013400:	1880                	addi	s0,sp,112
    80013402:	f8a43c23          	sd	a0,-104(s0)
    80013406:	f8b43823          	sd	a1,-112(s0)
    int i; 

    // debugf("mmu_translate: page table at 0x%016lx\n", tab);
    // debugf("mmu_translate: vaddr == 0x%016lx\n", vaddr);

    if (tab == NULL) { 
    8001340a:	f9843783          	ld	a5,-104(s0)
    8001340e:	e399                	bnez	a5,80013414 <mmu_translate+0x1a>
        // debugf("mmu_translate: tab == NULL\n");
        return MMU_TRANSLATE_PAGE_FAULT; 
    80013410:	57fd                	li	a5,-1
    80013412:	aaa9                	j	8001356c <mmu_translate+0x172>
    } 

    // Extract the virtual page numbers
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    80013414:	f9043783          	ld	a5,-112(s0)
    80013418:	83b1                	srli	a5,a5,0xc
    8001341a:	1ff7f793          	andi	a5,a5,511
    8001341e:	faf43423          	sd	a5,-88(s0)
                      (vaddr >> ADDR_1_BIT) & 0x1FF, 
    80013422:	f9043783          	ld	a5,-112(s0)
    80013426:	83d5                	srli	a5,a5,0x15
    80013428:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    8001342c:	faf43823          	sd	a5,-80(s0)
                      (vaddr >> ADDR_2_BIT) & 0x1FF};
    80013430:	f9043783          	ld	a5,-112(s0)
    80013434:	83f9                	srli	a5,a5,0x1e
    80013436:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    8001343a:	faf43c23          	sd	a5,-72(s0)
    // debugf("mmu_translate: vpn[0] == 0x%03lx\n", vpn[0]);
    // debugf("mmu_translate: vpn[1] == 0x%03lx\n", vpn[1]);
    // debugf("mmu_translate: vpn[2] == 0x%03lx\n", vpn[2]);

    uint64_t lvl = MMU_LEVEL_4K;
    8001343e:	fe043023          	sd	zero,-32(s0)
    // Traverse the page table hierarchy using the virtual page numbers
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    80013442:	4789                	li	a5,2
    80013444:	fef42623          	sw	a5,-20(s0)
    80013448:	a075                	j	800134f4 <mmu_translate+0xfa>
        // Iterate through and print the page table entries
        // debugf("mmu_translate: tab->entries == 0x%08lx\n", tab->entries);
        for (int j = 0; j < (PAGE_SIZE / 8); j++) {
    8001344a:	fc042e23          	sw	zero,-36(s0)
    8001344e:	a031                	j	8001345a <mmu_translate+0x60>
    80013450:	fdc42783          	lw	a5,-36(s0)
    80013454:	2785                	addiw	a5,a5,1
    80013456:	fcf42e23          	sw	a5,-36(s0)
    8001345a:	fdc42783          	lw	a5,-36(s0)
    8001345e:	0007871b          	sext.w	a4,a5
    80013462:	1ff00793          	li	a5,511
    80013466:	fee7d5e3          	bge	a5,a4,80013450 <mmu_translate+0x56>
            if (tab->entries[j] & PB_VALID) {
                // debugf("mmu_translate: tab->entries[%x] == 0x%0lx\n", j, tab->entries[j]);
            }
        }

        if (!(tab->entries[vpn[i]] & PB_VALID)) {
    8001346a:	fec42783          	lw	a5,-20(s0)
    8001346e:	078e                	slli	a5,a5,0x3
    80013470:	ff040713          	addi	a4,s0,-16
    80013474:	97ba                	add	a5,a5,a4
    80013476:	fb87b783          	ld	a5,-72(a5)
    8001347a:	f9843703          	ld	a4,-104(s0)
    8001347e:	078e                	slli	a5,a5,0x3
    80013480:	97ba                	add	a5,a5,a4
    80013482:	639c                	ld	a5,0(a5)
    80013484:	8b85                	andi	a5,a5,1
    80013486:	e399                	bnez	a5,8001348c <mmu_translate+0x92>
            // debugf("mmu_translate: entry %x in page table at 0x%08lx is invalid\n", vpn[i], tab);
            return MMU_TRANSLATE_PAGE_FAULT; // Entry is not valid
    80013488:	57fd                	li	a5,-1
    8001348a:	a0cd                	j	8001356c <mmu_translate+0x172>
        } else if (!is_leaf(tab->entries[vpn[i]])) {
    8001348c:	fec42783          	lw	a5,-20(s0)
    80013490:	078e                	slli	a5,a5,0x3
    80013492:	ff040713          	addi	a4,s0,-16
    80013496:	97ba                	add	a5,a5,a4
    80013498:	fb87b783          	ld	a5,-72(a5)
    8001349c:	f9843703          	ld	a4,-104(s0)
    800134a0:	078e                	slli	a5,a5,0x3
    800134a2:	97ba                	add	a5,a5,a4
    800134a4:	639c                	ld	a5,0(a5)
    800134a6:	853e                	mv	a0,a5
    800134a8:	d0dff0ef          	jal	ra,800131b4 <is_leaf>
    800134ac:	87aa                	mv	a5,a0
    800134ae:	0017c793          	xori	a5,a5,1
    800134b2:	0ff7f793          	andi	a5,a5,255
    800134b6:	c78d                	beqz	a5,800134e0 <mmu_translate+0xe6>
            // debugf("mmu_translate: entry %x in page table at 0x%08lx is a branch to 0x%08lx\n", vpn[i], tab, (tab->entries[vpn[i]] & ~0x3FF) << 2);
            tab = (struct page_table *)((tab->entries[vpn[i]] & ~0x3FF) << 2);
    800134b8:	fec42783          	lw	a5,-20(s0)
    800134bc:	078e                	slli	a5,a5,0x3
    800134be:	ff040713          	addi	a4,s0,-16
    800134c2:	97ba                	add	a5,a5,a4
    800134c4:	fb87b783          	ld	a5,-72(a5)
    800134c8:	f9843703          	ld	a4,-104(s0)
    800134cc:	078e                	slli	a5,a5,0x3
    800134ce:	97ba                	add	a5,a5,a4
    800134d0:	639c                	ld	a5,0(a5)
    800134d2:	00279713          	slli	a4,a5,0x2
    800134d6:	77fd                	lui	a5,0xfffff
    800134d8:	8ff9                	and	a5,a5,a4
    800134da:	f8f43c23          	sd	a5,-104(s0)
    800134de:	a031                	j	800134ea <mmu_translate+0xf0>
        } else {
            // debugf("mmu_translate: entry %x in page table at 0x%08lx is a leaf\n", vpn[i], tab);
            lvl = i;
    800134e0:	fec42783          	lw	a5,-20(s0)
    800134e4:	fef43023          	sd	a5,-32(s0)
            break; // Entry is a leaf
    800134e8:	a819                	j	800134fe <mmu_translate+0x104>
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    800134ea:	fec42783          	lw	a5,-20(s0)
    800134ee:	37fd                	addiw	a5,a5,-1
    800134f0:	fef42623          	sw	a5,-20(s0)
    800134f4:	fec42783          	lw	a5,-20(s0)
    800134f8:	2781                	sext.w	a5,a5
    800134fa:	f407d8e3          	bgez	a5,8001344a <mmu_translate+0x50>
        }
    }

    // debugf("mmu_translate: vaddr == 0x%08lx\n", vaddr);

    uint64_t page_mask = PAGE_SIZE_AT_LVL(lvl) - 1;
    800134fe:	fe043783          	ld	a5,-32(s0)
    80013502:	2781                	sext.w	a5,a5
    80013504:	873e                	mv	a4,a5
    80013506:	87ba                	mv	a5,a4
    80013508:	0037979b          	slliw	a5,a5,0x3
    8001350c:	9fb9                	addw	a5,a5,a4
    8001350e:	2781                	sext.w	a5,a5
    80013510:	27b1                	addiw	a5,a5,12
    80013512:	2781                	sext.w	a5,a5
    80013514:	4705                	li	a4,1
    80013516:	00f717bb          	sllw	a5,a4,a5
    8001351a:	2781                	sext.w	a5,a5
    8001351c:	37fd                	addiw	a5,a5,-1
    8001351e:	2781                	sext.w	a5,a5
    80013520:	fcf43823          	sd	a5,-48(s0)
    
    // Extract the physical address from the final page table entry
    uint64_t paddr = ((tab->entries[vpn[lvl]] & ~0x3FF) << 2) & ~page_mask;
    80013524:	fe043783          	ld	a5,-32(s0)
    80013528:	078e                	slli	a5,a5,0x3
    8001352a:	ff040713          	addi	a4,s0,-16
    8001352e:	97ba                	add	a5,a5,a4
    80013530:	fb87b783          	ld	a5,-72(a5) # ffffffffffffefb8 <_heap_end+0xffffffff77feefb8>
    80013534:	f9843703          	ld	a4,-104(s0)
    80013538:	078e                	slli	a5,a5,0x3
    8001353a:	97ba                	add	a5,a5,a4
    8001353c:	639c                	ld	a5,0(a5)
    8001353e:	00279713          	slli	a4,a5,0x2
    80013542:	fd043783          	ld	a5,-48(s0)
    80013546:	fff7c793          	not	a5,a5
    8001354a:	8f7d                	and	a4,a4,a5
    8001354c:	77fd                	lui	a5,0xfffff
    8001354e:	8ff9                	and	a5,a5,a4
    80013550:	fcf43423          	sd	a5,-56(s0)

    uint64_t result = paddr | (vaddr & page_mask);
    80013554:	f9043703          	ld	a4,-112(s0)
    80013558:	fd043783          	ld	a5,-48(s0)
    8001355c:	8ff9                	and	a5,a5,a4
    8001355e:	fc843703          	ld	a4,-56(s0)
    80013562:	8fd9                	or	a5,a5,a4
    80013564:	fcf43023          	sd	a5,-64(s0)
    // debugf("mmu_translate: paddr == 0x%08lx\n", result);

    return result; // Combine with the offset within the page
    80013568:	fc043783          	ld	a5,-64(s0)
} 
    8001356c:	853e                	mv	a0,a5
    8001356e:	70a6                	ld	ra,104(sp)
    80013570:	7406                	ld	s0,96(sp)
    80013572:	6165                	addi	sp,sp,112
    80013574:	8082                	ret

0000000080013576 <mmu_map_range>:
                       uint64_t start_virt, 
                       uint64_t end_virt, 
                       uint64_t start_phys,
                       uint8_t lvl, 
                       uint64_t bits)
{
    80013576:	711d                	addi	sp,sp,-96
    80013578:	ec86                	sd	ra,88(sp)
    8001357a:	e8a2                	sd	s0,80(sp)
    8001357c:	1080                	addi	s0,sp,96
    8001357e:	fca43423          	sd	a0,-56(s0)
    80013582:	fcb43023          	sd	a1,-64(s0)
    80013586:	fac43c23          	sd	a2,-72(s0)
    8001358a:	fad43823          	sd	a3,-80(s0)
    8001358e:	faf43023          	sd	a5,-96(s0)
    80013592:	87ba                	mv	a5,a4
    80013594:	faf407a3          	sb	a5,-81(s0)
    // debugf("mmu_map_range: page table at 0x%08lx\n", tab);
    start_virt            = ALIGN_DOWN_POT(start_virt, PAGE_SIZE_AT_LVL(lvl));
    80013598:	faf44783          	lbu	a5,-81(s0)
    8001359c:	2781                	sext.w	a5,a5
    8001359e:	873e                	mv	a4,a5
    800135a0:	87ba                	mv	a5,a4
    800135a2:	0037979b          	slliw	a5,a5,0x3
    800135a6:	9fb9                	addw	a5,a5,a4
    800135a8:	2781                	sext.w	a5,a5
    800135aa:	27b1                	addiw	a5,a5,12
    800135ac:	2781                	sext.w	a5,a5
    800135ae:	4705                	li	a4,1
    800135b0:	00f717bb          	sllw	a5,a4,a5
    800135b4:	2781                	sext.w	a5,a5
    800135b6:	40f007bb          	negw	a5,a5
    800135ba:	2781                	sext.w	a5,a5
    800135bc:	873e                	mv	a4,a5
    800135be:	fc043783          	ld	a5,-64(s0)
    800135c2:	8ff9                	and	a5,a5,a4
    800135c4:	fcf43023          	sd	a5,-64(s0)
    start_phys            = ALIGN_DOWN_POT(start_phys, PAGE_SIZE_AT_LVL(lvl));
    800135c8:	faf44783          	lbu	a5,-81(s0)
    800135cc:	2781                	sext.w	a5,a5
    800135ce:	873e                	mv	a4,a5
    800135d0:	87ba                	mv	a5,a4
    800135d2:	0037979b          	slliw	a5,a5,0x3
    800135d6:	9fb9                	addw	a5,a5,a4
    800135d8:	2781                	sext.w	a5,a5
    800135da:	27b1                	addiw	a5,a5,12
    800135dc:	2781                	sext.w	a5,a5
    800135de:	4705                	li	a4,1
    800135e0:	00f717bb          	sllw	a5,a4,a5
    800135e4:	2781                	sext.w	a5,a5
    800135e6:	40f007bb          	negw	a5,a5
    800135ea:	2781                	sext.w	a5,a5
    800135ec:	873e                	mv	a4,a5
    800135ee:	fb043783          	ld	a5,-80(s0)
    800135f2:	8ff9                	and	a5,a5,a4
    800135f4:	faf43823          	sd	a5,-80(s0)
    end_virt              = ALIGN_UP_POT(end_virt, PAGE_SIZE_AT_LVL(lvl));
    800135f8:	faf44783          	lbu	a5,-81(s0)
    800135fc:	2781                	sext.w	a5,a5
    800135fe:	873e                	mv	a4,a5
    80013600:	87ba                	mv	a5,a4
    80013602:	0037979b          	slliw	a5,a5,0x3
    80013606:	9fb9                	addw	a5,a5,a4
    80013608:	2781                	sext.w	a5,a5
    8001360a:	27b1                	addiw	a5,a5,12
    8001360c:	2781                	sext.w	a5,a5
    8001360e:	4705                	li	a4,1
    80013610:	00f717bb          	sllw	a5,a4,a5
    80013614:	2781                	sext.w	a5,a5
    80013616:	873e                	mv	a4,a5
    80013618:	fb843783          	ld	a5,-72(s0)
    8001361c:	97ba                	add	a5,a5,a4
    8001361e:	fff78713          	addi	a4,a5,-1 # ffffffffffffefff <_heap_end+0xffffffff77feefff>
    80013622:	faf44783          	lbu	a5,-81(s0)
    80013626:	2781                	sext.w	a5,a5
    80013628:	86be                	mv	a3,a5
    8001362a:	87b6                	mv	a5,a3
    8001362c:	0037979b          	slliw	a5,a5,0x3
    80013630:	9fb5                	addw	a5,a5,a3
    80013632:	2781                	sext.w	a5,a5
    80013634:	27b1                	addiw	a5,a5,12
    80013636:	2781                	sext.w	a5,a5
    80013638:	4685                	li	a3,1
    8001363a:	00f697bb          	sllw	a5,a3,a5
    8001363e:	2781                	sext.w	a5,a5
    80013640:	40f007bb          	negw	a5,a5
    80013644:	2781                	sext.w	a5,a5
    80013646:	8ff9                	and	a5,a5,a4
    80013648:	faf43c23          	sd	a5,-72(s0)
    uint64_t num_bytes    = end_virt - start_virt;
    8001364c:	fb843703          	ld	a4,-72(s0)
    80013650:	fc043783          	ld	a5,-64(s0)
    80013654:	40f707b3          	sub	a5,a4,a5
    80013658:	fcf43c23          	sd	a5,-40(s0)
    // debugf("mmu_map_range: start_virt = 0x%08lx\n", start_virt);
    // debugf("mmu_map_range: start_phys = 0x%08lx\n", start_phys);
    // debugf("mmu_map_range: mapping = %d bytes\n", num_bytes);
    uint64_t pages_mapped = 0;
    8001365c:	fe043423          	sd	zero,-24(s0)

    uint64_t i;
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    80013660:	fe043023          	sd	zero,-32(s0)
    80013664:	a0ad                	j	800136ce <mmu_map_range+0x158>
        // debugf("mmu_map_range: mapping %d bytes for page %d\n", PAGE_SIZE_AT_LVL(lvl), i / PAGE_SIZE_AT_LVL(lvl));
        if (!mmu_map(tab, start_virt + i, start_phys + i, lvl, bits)) {
    80013666:	fc043703          	ld	a4,-64(s0)
    8001366a:	fe043783          	ld	a5,-32(s0)
    8001366e:	00f705b3          	add	a1,a4,a5
    80013672:	fb043703          	ld	a4,-80(s0)
    80013676:	fe043783          	ld	a5,-32(s0)
    8001367a:	97ba                	add	a5,a5,a4
    8001367c:	faf44683          	lbu	a3,-81(s0)
    80013680:	fa043703          	ld	a4,-96(s0)
    80013684:	863e                	mv	a2,a5
    80013686:	fc843503          	ld	a0,-56(s0)
    8001368a:	b4bff0ef          	jal	ra,800131d4 <mmu_map>
    8001368e:	87aa                	mv	a5,a0
    80013690:	0017c793          	xori	a5,a5,1
    80013694:	0ff7f793          	andi	a5,a5,255
    80013698:	e3b1                	bnez	a5,800136dc <mmu_map_range+0x166>
            break;
        }
        pages_mapped += 1;
    8001369a:	fe843783          	ld	a5,-24(s0)
    8001369e:	0785                	addi	a5,a5,1
    800136a0:	fef43423          	sd	a5,-24(s0)
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    800136a4:	faf44783          	lbu	a5,-81(s0)
    800136a8:	2781                	sext.w	a5,a5
    800136aa:	873e                	mv	a4,a5
    800136ac:	87ba                	mv	a5,a4
    800136ae:	0037979b          	slliw	a5,a5,0x3
    800136b2:	9fb9                	addw	a5,a5,a4
    800136b4:	2781                	sext.w	a5,a5
    800136b6:	27b1                	addiw	a5,a5,12
    800136b8:	2781                	sext.w	a5,a5
    800136ba:	4705                	li	a4,1
    800136bc:	00f717bb          	sllw	a5,a4,a5
    800136c0:	2781                	sext.w	a5,a5
    800136c2:	873e                	mv	a4,a5
    800136c4:	fe043783          	ld	a5,-32(s0)
    800136c8:	97ba                	add	a5,a5,a4
    800136ca:	fef43023          	sd	a5,-32(s0)
    800136ce:	fe043703          	ld	a4,-32(s0)
    800136d2:	fd843783          	ld	a5,-40(s0)
    800136d6:	f8f768e3          	bltu	a4,a5,80013666 <mmu_map_range+0xf0>
    800136da:	a011                	j	800136de <mmu_map_range+0x168>
            break;
    800136dc:	0001                	nop
    }
    // debugf("mmu_map_range: mapped %d pages\n", pages_mapped);

    return pages_mapped;
    800136de:	fe843783          	ld	a5,-24(s0)
} 
    800136e2:	853e                	mv	a0,a5
    800136e4:	60e6                	ld	ra,88(sp)
    800136e6:	6446                	ld	s0,80(sp)
    800136e8:	6125                	addi	sp,sp,96
    800136ea:	8082                	ret

00000000800136ec <debug_page_table>:

// This function performs some basic sanity checks on the page table.
// For each level of the page table, it prints out the entries that are valid.
void debug_page_table(struct page_table *tab, uint8_t lvl) {
    800136ec:	715d                	addi	sp,sp,-80
    800136ee:	e486                	sd	ra,72(sp)
    800136f0:	e0a2                	sd	s0,64(sp)
    800136f2:	0880                	addi	s0,sp,80
    800136f4:	faa43c23          	sd	a0,-72(s0)
    800136f8:	87ae                	mv	a5,a1
    800136fa:	faf40ba3          	sb	a5,-73(s0)
    // debugf("debug_page_table: debugging page table at 0x%016lx\n", tab);
    uint64_t page_mask = PAGE_SIZE_AT_LVL(lvl) - 1;
    800136fe:	fb744783          	lbu	a5,-73(s0)
    80013702:	2781                	sext.w	a5,a5
    80013704:	873e                	mv	a4,a5
    80013706:	87ba                	mv	a5,a4
    80013708:	0037979b          	slliw	a5,a5,0x3
    8001370c:	9fb9                	addw	a5,a5,a4
    8001370e:	2781                	sext.w	a5,a5
    80013710:	27b1                	addiw	a5,a5,12
    80013712:	2781                	sext.w	a5,a5
    80013714:	4705                	li	a4,1
    80013716:	00f717bb          	sllw	a5,a4,a5
    8001371a:	2781                	sext.w	a5,a5
    8001371c:	37fd                	addiw	a5,a5,-1
    8001371e:	2781                	sext.w	a5,a5
    80013720:	fef43023          	sd	a5,-32(s0)

    for (uint64_t i=0; i < 512; i++) {
    80013724:	fe043423          	sd	zero,-24(s0)
    80013728:	a21d                	j	8001384e <debug_page_table+0x162>
        // Is the entry a leaf?
        bool is_leaf = (tab->entries[i] & 0xE) != 0;
    8001372a:	fb843703          	ld	a4,-72(s0)
    8001372e:	fe843783          	ld	a5,-24(s0)
    80013732:	078e                	slli	a5,a5,0x3
    80013734:	97ba                	add	a5,a5,a4
    80013736:	639c                	ld	a5,0(a5)
    80013738:	8bb9                	andi	a5,a5,14
    8001373a:	00f037b3          	snez	a5,a5
    8001373e:	fcf40fa3          	sb	a5,-33(s0)

        // Is the entry valid?
        bool is_valid = tab->entries[i] & PB_VALID;
    80013742:	fb843703          	ld	a4,-72(s0)
    80013746:	fe843783          	ld	a5,-24(s0)
    8001374a:	078e                	slli	a5,a5,0x3
    8001374c:	97ba                	add	a5,a5,a4
    8001374e:	639c                	ld	a5,0(a5)
    80013750:	8b85                	andi	a5,a5,1
    80013752:	00f037b3          	snez	a5,a5
    80013756:	fcf40f23          	sb	a5,-34(s0)

        // Is the entry a branch?
        bool is_branch = is_valid && !is_leaf;
    8001375a:	fde44783          	lbu	a5,-34(s0)
    8001375e:	0ff7f793          	andi	a5,a5,255
    80013762:	cb91                	beqz	a5,80013776 <debug_page_table+0x8a>
    80013764:	fdf44783          	lbu	a5,-33(s0)
    80013768:	0017c793          	xori	a5,a5,1
    8001376c:	0ff7f793          	andi	a5,a5,255
    80013770:	c399                	beqz	a5,80013776 <debug_page_table+0x8a>
    80013772:	4785                	li	a5,1
    80013774:	a011                	j	80013778 <debug_page_table+0x8c>
    80013776:	4781                	li	a5,0
    80013778:	fcf40ea3          	sb	a5,-35(s0)
    8001377c:	fdd44783          	lbu	a5,-35(s0)
    80013780:	8b85                	andi	a5,a5,1
    80013782:	fcf40ea3          	sb	a5,-35(s0)

        uint64_t paddr = ((tab->entries[i] & ~0x3FF) << 2) & ~page_mask;
    80013786:	fb843703          	ld	a4,-72(s0)
    8001378a:	fe843783          	ld	a5,-24(s0)
    8001378e:	078e                	slli	a5,a5,0x3
    80013790:	97ba                	add	a5,a5,a4
    80013792:	639c                	ld	a5,0(a5)
    80013794:	00279713          	slli	a4,a5,0x2
    80013798:	fe043783          	ld	a5,-32(s0)
    8001379c:	fff7c793          	not	a5,a5
    800137a0:	8f7d                	and	a4,a4,a5
    800137a2:	77fd                	lui	a5,0xfffff
    800137a4:	8ff9                	and	a5,a5,a4
    800137a6:	fcf43823          	sd	a5,-48(s0)
        if (paddr == (uint64_t)tab) {
    800137aa:	fb843783          	ld	a5,-72(s0)
    800137ae:	fd043703          	ld	a4,-48(s0)
    800137b2:	08f70663          	beq	a4,a5,8001383e <debug_page_table+0x152>
            continue;
        }

        uint64_t vaddr = paddr;
    800137b6:	fd043783          	ld	a5,-48(s0)
    800137ba:	fcf43423          	sd	a5,-56(s0)
        if (is_valid && is_leaf) {
    800137be:	fde44783          	lbu	a5,-34(s0)
    800137c2:	0ff7f793          	andi	a5,a5,255
    800137c6:	cf9d                	beqz	a5,80013804 <debug_page_table+0x118>
    800137c8:	fdf44783          	lbu	a5,-33(s0)
    800137cc:	0ff7f793          	andi	a5,a5,255
    800137d0:	cb95                	beqz	a5,80013804 <debug_page_table+0x118>
            // Confirm that we can translate the address
            uint64_t translated = mmu_translate(tab, vaddr);
    800137d2:	fc843583          	ld	a1,-56(s0)
    800137d6:	fb843503          	ld	a0,-72(s0)
    800137da:	c21ff0ef          	jal	ra,800133fa <mmu_translate>
    800137de:	fca43023          	sd	a0,-64(s0)
            if (translated != paddr) {
    800137e2:	fc043703          	ld	a4,-64(s0)
    800137e6:	fd043783          	ld	a5,-48(s0)
    800137ea:	04f70c63          	beq	a4,a5,80013842 <debug_page_table+0x156>
                // debugf("debug_page_table: page table at 0x%08lx is invalid\n", tab);
                // debugf("debug_page_table: expected 0x%08lx, got 0x%08lx\n", paddr, translated);
                fatalf("debug_page_table: entry 0x%x in page table at 0x%08lx is invalid\n", i, tab);
    800137ee:	fb843603          	ld	a2,-72(s0)
    800137f2:	fe843583          	ld	a1,-24(s0)
    800137f6:	00007517          	auipc	a0,0x7
    800137fa:	eaa50513          	addi	a0,a0,-342 # 8001a6a0 <pow10.0+0x470>
    800137fe:	546010ef          	jal	ra,80014d44 <fatalf>
        if (is_valid && is_leaf) {
    80013802:	a081                	j	80013842 <debug_page_table+0x156>
            } else {
                // debugf("debug_page_table: page table at 0x%08lx is valid\n", tab);
            }
        } else if (is_branch && lvl > MMU_LEVEL_4K) {
    80013804:	fdd44783          	lbu	a5,-35(s0)
    80013808:	0ff7f793          	andi	a5,a5,255
    8001380c:	c791                	beqz	a5,80013818 <debug_page_table+0x12c>
    8001380e:	fb744783          	lbu	a5,-73(s0)
    80013812:	0ff7f793          	andi	a5,a5,255
    80013816:	e79d                	bnez	a5,80013844 <debug_page_table+0x158>
            // Recurse into the next level
            // debugf("debug_page_table: entry %d in page table at 0x%08lx is a branch to 0x%08lx\n", i, tab, (tab->entries[i] & ~0x3FF) << 2);
            // debug_page_table((struct page_table *)((tab->entries[i] & ~0x3FF) << 2), lvl - 1);
        } else {
            // Invalid entry, confirm that it's all zeroes
            if (tab->entries[i] != 0) {
    80013818:	fb843703          	ld	a4,-72(s0)
    8001381c:	fe843783          	ld	a5,-24(s0)
    80013820:	078e                	slli	a5,a5,0x3
    80013822:	97ba                	add	a5,a5,a4
    80013824:	639c                	ld	a5,0(a5)
    80013826:	cf99                	beqz	a5,80013844 <debug_page_table+0x158>
                // debugf("debug_page_table: page table at 0x%08lx is invalid\n", tab);
                // debugf("debug_page_table: expected all zeroes, got 0x%08lx\n", tab->entries[i]);
                fatalf("debug_page_table: entry 0x%x in page table at 0x%08lx is invalid\n", i, tab);
    80013828:	fb843603          	ld	a2,-72(s0)
    8001382c:	fe843583          	ld	a1,-24(s0)
    80013830:	00007517          	auipc	a0,0x7
    80013834:	e7050513          	addi	a0,a0,-400 # 8001a6a0 <pow10.0+0x470>
    80013838:	50c010ef          	jal	ra,80014d44 <fatalf>
    8001383c:	a021                	j	80013844 <debug_page_table+0x158>
            continue;
    8001383e:	0001                	nop
    80013840:	a011                	j	80013844 <debug_page_table+0x158>
        if (is_valid && is_leaf) {
    80013842:	0001                	nop
    for (uint64_t i=0; i < 512; i++) {
    80013844:	fe843783          	ld	a5,-24(s0)
    80013848:	0785                	addi	a5,a5,1
    8001384a:	fef43423          	sd	a5,-24(s0)
    8001384e:	fe843703          	ld	a4,-24(s0)
    80013852:	1ff00793          	li	a5,511
    80013856:	ece7fae3          	bgeu	a5,a4,8001372a <debug_page_table+0x3e>
            }
        }
    }

    // debugf("debug_page_table: page table at 0x%08lx is valid\n", tab);
    8001385a:	0001                	nop
    8001385c:	0001                	nop
    8001385e:	60a6                	ld	ra,72(sp)
    80013860:	6406                	ld	s0,64(sp)
    80013862:	6161                	addi	sp,sp,80
    80013864:	8082                	ret

0000000080013866 <insert_block>:
 * into free list, sorted by addr.
 * If disabled, add block has new head of
 * the free list.
 */
static void insert_block(Block *block)
{
    80013866:	7179                	addi	sp,sp,-48
    80013868:	f422                	sd	s0,40(sp)
    8001386a:	1800                	addi	s0,sp,48
    8001386c:	fca43c23          	sd	a0,-40(s0)
    Block *ptr  = heap->free;
    80013870:	00005797          	auipc	a5,0x5
    80013874:	7e078793          	addi	a5,a5,2016 # 80019050 <heap>
    80013878:	639c                	ld	a5,0(a5)
    8001387a:	639c                	ld	a5,0(a5)
    8001387c:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80013880:	fe043023          	sd	zero,-32(s0)
    while (ptr != NULL) {
    80013884:	a01d                	j	800138aa <insert_block+0x44>
        if ((size_t)block->addr <= (size_t)ptr->addr) {
    80013886:	fd843783          	ld	a5,-40(s0)
    8001388a:	639c                	ld	a5,0(a5)
    8001388c:	873e                	mv	a4,a5
    8001388e:	fe843783          	ld	a5,-24(s0)
    80013892:	639c                	ld	a5,0(a5)
    80013894:	00e7ff63          	bgeu	a5,a4,800138b2 <insert_block+0x4c>
            break;
        }
        prev = ptr;
    80013898:	fe843783          	ld	a5,-24(s0)
    8001389c:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    800138a0:	fe843783          	ld	a5,-24(s0)
    800138a4:	679c                	ld	a5,8(a5)
    800138a6:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    800138aa:	fe843783          	ld	a5,-24(s0)
    800138ae:	ffe1                	bnez	a5,80013886 <insert_block+0x20>
    800138b0:	a011                	j	800138b4 <insert_block+0x4e>
            break;
    800138b2:	0001                	nop
    }
    if (prev != NULL) {
    800138b4:	fe043783          	ld	a5,-32(s0)
    800138b8:	c799                	beqz	a5,800138c6 <insert_block+0x60>
        prev->next = block;
    800138ba:	fe043783          	ld	a5,-32(s0)
    800138be:	fd843703          	ld	a4,-40(s0)
    800138c2:	e798                	sd	a4,8(a5)
    800138c4:	a809                	j	800138d6 <insert_block+0x70>
    }
    else {
        heap->free = block;
    800138c6:	00005797          	auipc	a5,0x5
    800138ca:	78a78793          	addi	a5,a5,1930 # 80019050 <heap>
    800138ce:	639c                	ld	a5,0(a5)
    800138d0:	fd843703          	ld	a4,-40(s0)
    800138d4:	e398                	sd	a4,0(a5)
    }
    block->next = ptr;
    800138d6:	fd843783          	ld	a5,-40(s0)
    800138da:	fe843703          	ld	a4,-24(s0)
    800138de:	e798                	sd	a4,8(a5)
}
    800138e0:	0001                	nop
    800138e2:	7422                	ld	s0,40(sp)
    800138e4:	6145                	addi	sp,sp,48
    800138e6:	8082                	ret

00000000800138e8 <release_blocks>:

#ifndef TA_DISABLE_COMPACT
static void release_blocks(Block *scan, Block *to)
{
    800138e8:	7179                	addi	sp,sp,-48
    800138ea:	f422                	sd	s0,40(sp)
    800138ec:	1800                	addi	s0,sp,48
    800138ee:	fca43c23          	sd	a0,-40(s0)
    800138f2:	fcb43823          	sd	a1,-48(s0)
    Block *scan_next;
    while (scan != to) {
    800138f6:	a099                	j	8001393c <release_blocks+0x54>
        scan_next   = scan->next;
    800138f8:	fd843783          	ld	a5,-40(s0)
    800138fc:	679c                	ld	a5,8(a5)
    800138fe:	fef43423          	sd	a5,-24(s0)
        scan->next  = heap->fresh;
    80013902:	00005797          	auipc	a5,0x5
    80013906:	74e78793          	addi	a5,a5,1870 # 80019050 <heap>
    8001390a:	639c                	ld	a5,0(a5)
    8001390c:	6b98                	ld	a4,16(a5)
    8001390e:	fd843783          	ld	a5,-40(s0)
    80013912:	e798                	sd	a4,8(a5)
        heap->fresh = scan;
    80013914:	00005797          	auipc	a5,0x5
    80013918:	73c78793          	addi	a5,a5,1852 # 80019050 <heap>
    8001391c:	639c                	ld	a5,0(a5)
    8001391e:	fd843703          	ld	a4,-40(s0)
    80013922:	eb98                	sd	a4,16(a5)
        scan->addr  = 0;
    80013924:	fd843783          	ld	a5,-40(s0)
    80013928:	0007b023          	sd	zero,0(a5)
        scan->size  = 0;
    8001392c:	fd843783          	ld	a5,-40(s0)
    80013930:	0007b823          	sd	zero,16(a5)
        scan        = scan_next;
    80013934:	fe843783          	ld	a5,-24(s0)
    80013938:	fcf43c23          	sd	a5,-40(s0)
    while (scan != to) {
    8001393c:	fd843703          	ld	a4,-40(s0)
    80013940:	fd043783          	ld	a5,-48(s0)
    80013944:	faf71ae3          	bne	a4,a5,800138f8 <release_blocks+0x10>
    }
}
    80013948:	0001                	nop
    8001394a:	0001                	nop
    8001394c:	7422                	ld	s0,40(sp)
    8001394e:	6145                	addi	sp,sp,48
    80013950:	8082                	ret

0000000080013952 <compact>:

static void compact()
{
    80013952:	7139                	addi	sp,sp,-64
    80013954:	fc06                	sd	ra,56(sp)
    80013956:	f822                	sd	s0,48(sp)
    80013958:	0080                	addi	s0,sp,64
    Block *ptr = heap->free;
    8001395a:	00005797          	auipc	a5,0x5
    8001395e:	6f678793          	addi	a5,a5,1782 # 80019050 <heap>
    80013962:	639c                	ld	a5,0(a5)
    80013964:	639c                	ld	a5,0(a5)
    80013966:	fef43423          	sd	a5,-24(s0)
    Block *prev;
    Block *scan;
    while (ptr != NULL) {
    8001396a:	a075                	j	80013a16 <compact+0xc4>
        prev = ptr;
    8001396c:	fe843783          	ld	a5,-24(s0)
    80013970:	fef43023          	sd	a5,-32(s0)
        scan = ptr->next;
    80013974:	fe843783          	ld	a5,-24(s0)
    80013978:	679c                	ld	a5,8(a5)
    8001397a:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    8001397e:	a811                	j	80013992 <compact+0x40>
            prev = scan;
    80013980:	fd843783          	ld	a5,-40(s0)
    80013984:	fef43023          	sd	a5,-32(s0)
            scan = scan->next;
    80013988:	fd843783          	ld	a5,-40(s0)
    8001398c:	679c                	ld	a5,8(a5)
    8001398e:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    80013992:	fd843783          	ld	a5,-40(s0)
    80013996:	cf91                	beqz	a5,800139b2 <compact+0x60>
    80013998:	fe043783          	ld	a5,-32(s0)
    8001399c:	639c                	ld	a5,0(a5)
    8001399e:	873e                	mv	a4,a5
    800139a0:	fe043783          	ld	a5,-32(s0)
    800139a4:	6b9c                	ld	a5,16(a5)
    800139a6:	97ba                	add	a5,a5,a4
    800139a8:	fd843703          	ld	a4,-40(s0)
    800139ac:	6318                	ld	a4,0(a4)
    800139ae:	fce789e3          	beq	a5,a4,80013980 <compact+0x2e>
        }
        if (prev != ptr) {
    800139b2:	fe043703          	ld	a4,-32(s0)
    800139b6:	fe843783          	ld	a5,-24(s0)
    800139ba:	04f70963          	beq	a4,a5,80013a0c <compact+0xba>
            size_t new_size = (size_t)prev->addr - (size_t)ptr->addr + prev->size;
    800139be:	fe043783          	ld	a5,-32(s0)
    800139c2:	639c                	ld	a5,0(a5)
    800139c4:	873e                	mv	a4,a5
    800139c6:	fe843783          	ld	a5,-24(s0)
    800139ca:	639c                	ld	a5,0(a5)
    800139cc:	8f1d                	sub	a4,a4,a5
    800139ce:	fe043783          	ld	a5,-32(s0)
    800139d2:	6b9c                	ld	a5,16(a5)
    800139d4:	97ba                	add	a5,a5,a4
    800139d6:	fcf43823          	sd	a5,-48(s0)
            ptr->size       = new_size;
    800139da:	fe843783          	ld	a5,-24(s0)
    800139de:	fd043703          	ld	a4,-48(s0)
    800139e2:	eb98                	sd	a4,16(a5)
            Block *next     = prev->next;
    800139e4:	fe043783          	ld	a5,-32(s0)
    800139e8:	679c                	ld	a5,8(a5)
    800139ea:	fcf43423          	sd	a5,-56(s0)
            // make merged blocks available
            release_blocks(ptr->next, prev->next);
    800139ee:	fe843783          	ld	a5,-24(s0)
    800139f2:	6798                	ld	a4,8(a5)
    800139f4:	fe043783          	ld	a5,-32(s0)
    800139f8:	679c                	ld	a5,8(a5)
    800139fa:	85be                	mv	a1,a5
    800139fc:	853a                	mv	a0,a4
    800139fe:	eebff0ef          	jal	ra,800138e8 <release_blocks>
            // relink
            ptr->next = next;
    80013a02:	fe843783          	ld	a5,-24(s0)
    80013a06:	fc843703          	ld	a4,-56(s0)
    80013a0a:	e798                	sd	a4,8(a5)
        }
        ptr = ptr->next;
    80013a0c:	fe843783          	ld	a5,-24(s0)
    80013a10:	679c                	ld	a5,8(a5)
    80013a12:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80013a16:	fe843783          	ld	a5,-24(s0)
    80013a1a:	fba9                	bnez	a5,8001396c <compact+0x1a>
    }
}
    80013a1c:	0001                	nop
    80013a1e:	0001                	nop
    80013a20:	70e2                	ld	ra,56(sp)
    80013a22:	7442                	ld	s0,48(sp)
    80013a24:	6121                	addi	sp,sp,64
    80013a26:	8082                	ret

0000000080013a28 <init>:
#endif

static bool init(const void *base, const void *limit, const size_t heap_blocks,
                 const size_t split_thresh, const size_t alignment)
{
    80013a28:	715d                	addi	sp,sp,-80
    80013a2a:	e4a2                	sd	s0,72(sp)
    80013a2c:	0880                	addi	s0,sp,80
    80013a2e:	fca43c23          	sd	a0,-40(s0)
    80013a32:	fcb43823          	sd	a1,-48(s0)
    80013a36:	fcc43423          	sd	a2,-56(s0)
    80013a3a:	fcd43023          	sd	a3,-64(s0)
    80013a3e:	fae43c23          	sd	a4,-72(s0)
    heap              = (Heap *)base;
    80013a42:	00005797          	auipc	a5,0x5
    80013a46:	60e78793          	addi	a5,a5,1550 # 80019050 <heap>
    80013a4a:	fd843703          	ld	a4,-40(s0)
    80013a4e:	e398                	sd	a4,0(a5)
    heap_limit        = limit;
    80013a50:	00005797          	auipc	a5,0x5
    80013a54:	60878793          	addi	a5,a5,1544 # 80019058 <heap_limit>
    80013a58:	fd043703          	ld	a4,-48(s0)
    80013a5c:	e398                	sd	a4,0(a5)
    heap_split_thresh = split_thresh;
    80013a5e:	00005797          	auipc	a5,0x5
    80013a62:	60278793          	addi	a5,a5,1538 # 80019060 <heap_split_thresh>
    80013a66:	fc043703          	ld	a4,-64(s0)
    80013a6a:	e398                	sd	a4,0(a5)
    heap_alignment    = alignment;
    80013a6c:	00005797          	auipc	a5,0x5
    80013a70:	5fc78793          	addi	a5,a5,1532 # 80019068 <heap_alignment>
    80013a74:	fb843703          	ld	a4,-72(s0)
    80013a78:	e398                	sd	a4,0(a5)
    heap_max_blocks   = heap_blocks;
    80013a7a:	00005797          	auipc	a5,0x5
    80013a7e:	5f678793          	addi	a5,a5,1526 # 80019070 <heap_max_blocks>
    80013a82:	fc843703          	ld	a4,-56(s0)
    80013a86:	e398                	sd	a4,0(a5)

    heap->free        = NULL;
    80013a88:	00005797          	auipc	a5,0x5
    80013a8c:	5c878793          	addi	a5,a5,1480 # 80019050 <heap>
    80013a90:	639c                	ld	a5,0(a5)
    80013a92:	0007b023          	sd	zero,0(a5)
    heap->used        = NULL;
    80013a96:	00005797          	auipc	a5,0x5
    80013a9a:	5ba78793          	addi	a5,a5,1466 # 80019050 <heap>
    80013a9e:	639c                	ld	a5,0(a5)
    80013aa0:	0007b423          	sd	zero,8(a5)
    heap->fresh       = (Block *)(heap + 1);
    80013aa4:	00005797          	auipc	a5,0x5
    80013aa8:	5ac78793          	addi	a5,a5,1452 # 80019050 <heap>
    80013aac:	6398                	ld	a4,0(a5)
    80013aae:	00005797          	auipc	a5,0x5
    80013ab2:	5a278793          	addi	a5,a5,1442 # 80019050 <heap>
    80013ab6:	639c                	ld	a5,0(a5)
    80013ab8:	02070713          	addi	a4,a4,32
    80013abc:	eb98                	sd	a4,16(a5)
    heap->top         = (size_t)(heap->fresh + heap_blocks);
    80013abe:	00005797          	auipc	a5,0x5
    80013ac2:	59278793          	addi	a5,a5,1426 # 80019050 <heap>
    80013ac6:	639c                	ld	a5,0(a5)
    80013ac8:	6b94                	ld	a3,16(a5)
    80013aca:	fc843703          	ld	a4,-56(s0)
    80013ace:	87ba                	mv	a5,a4
    80013ad0:	0786                	slli	a5,a5,0x1
    80013ad2:	97ba                	add	a5,a5,a4
    80013ad4:	078e                	slli	a5,a5,0x3
    80013ad6:	00f68733          	add	a4,a3,a5
    80013ada:	00005797          	auipc	a5,0x5
    80013ade:	57678793          	addi	a5,a5,1398 # 80019050 <heap>
    80013ae2:	639c                	ld	a5,0(a5)
    80013ae4:	ef98                	sd	a4,24(a5)

    Block *block      = heap->fresh;
    80013ae6:	00005797          	auipc	a5,0x5
    80013aea:	56a78793          	addi	a5,a5,1386 # 80019050 <heap>
    80013aee:	639c                	ld	a5,0(a5)
    80013af0:	6b9c                	ld	a5,16(a5)
    80013af2:	fef43423          	sd	a5,-24(s0)
    size_t i          = heap_max_blocks - 1;
    80013af6:	00005797          	auipc	a5,0x5
    80013afa:	57a78793          	addi	a5,a5,1402 # 80019070 <heap_max_blocks>
    80013afe:	639c                	ld	a5,0(a5)
    80013b00:	17fd                	addi	a5,a5,-1
    80013b02:	fef43023          	sd	a5,-32(s0)
    while (i--) {
    80013b06:	a829                	j	80013b20 <init+0xf8>
        block->next = block + 1;
    80013b08:	fe843783          	ld	a5,-24(s0)
    80013b0c:	01878713          	addi	a4,a5,24
    80013b10:	fe843783          	ld	a5,-24(s0)
    80013b14:	e798                	sd	a4,8(a5)
        block++;
    80013b16:	fe843783          	ld	a5,-24(s0)
    80013b1a:	07e1                	addi	a5,a5,24
    80013b1c:	fef43423          	sd	a5,-24(s0)
    while (i--) {
    80013b20:	fe043783          	ld	a5,-32(s0)
    80013b24:	fff78713          	addi	a4,a5,-1
    80013b28:	fee43023          	sd	a4,-32(s0)
    80013b2c:	fff1                	bnez	a5,80013b08 <init+0xe0>
    }
    block->next = NULL;
    80013b2e:	fe843783          	ld	a5,-24(s0)
    80013b32:	0007b423          	sd	zero,8(a5)
    return true;
    80013b36:	4785                	li	a5,1
}
    80013b38:	853e                	mv	a0,a5
    80013b3a:	6426                	ld	s0,72(sp)
    80013b3c:	6161                	addi	sp,sp,80
    80013b3e:	8082                	ret

0000000080013b40 <free>:

static bool free(const void *free)
{
    80013b40:	7179                	addi	sp,sp,-48
    80013b42:	f406                	sd	ra,40(sp)
    80013b44:	f022                	sd	s0,32(sp)
    80013b46:	1800                	addi	s0,sp,48
    80013b48:	fca43c23          	sd	a0,-40(s0)
    Block *block = heap->used;
    80013b4c:	00005797          	auipc	a5,0x5
    80013b50:	50478793          	addi	a5,a5,1284 # 80019050 <heap>
    80013b54:	639c                	ld	a5,0(a5)
    80013b56:	679c                	ld	a5,8(a5)
    80013b58:	fef43423          	sd	a5,-24(s0)
    Block *prev  = NULL;
    80013b5c:	fe043023          	sd	zero,-32(s0)
    while (block != NULL) {
    80013b60:	a8a1                	j	80013bb8 <free+0x78>
        if (free == block->addr) {
    80013b62:	fe843783          	ld	a5,-24(s0)
    80013b66:	639c                	ld	a5,0(a5)
    80013b68:	fd843703          	ld	a4,-40(s0)
    80013b6c:	02f71d63          	bne	a4,a5,80013ba6 <free+0x66>
            if (prev) {
    80013b70:	fe043783          	ld	a5,-32(s0)
    80013b74:	cb81                	beqz	a5,80013b84 <free+0x44>
                prev->next = block->next;
    80013b76:	fe843783          	ld	a5,-24(s0)
    80013b7a:	6798                	ld	a4,8(a5)
    80013b7c:	fe043783          	ld	a5,-32(s0)
    80013b80:	e798                	sd	a4,8(a5)
    80013b82:	a811                	j	80013b96 <free+0x56>
            }
            else {
                heap->used = block->next;
    80013b84:	00005797          	auipc	a5,0x5
    80013b88:	4cc78793          	addi	a5,a5,1228 # 80019050 <heap>
    80013b8c:	639c                	ld	a5,0(a5)
    80013b8e:	fe843703          	ld	a4,-24(s0)
    80013b92:	6718                	ld	a4,8(a4)
    80013b94:	e798                	sd	a4,8(a5)
            }
            insert_block(block);
    80013b96:	fe843503          	ld	a0,-24(s0)
    80013b9a:	ccdff0ef          	jal	ra,80013866 <insert_block>
            compact();
    80013b9e:	db5ff0ef          	jal	ra,80013952 <compact>
            return true;
    80013ba2:	4785                	li	a5,1
    80013ba4:	a831                	j	80013bc0 <free+0x80>
        }
        prev  = block;
    80013ba6:	fe843783          	ld	a5,-24(s0)
    80013baa:	fef43023          	sd	a5,-32(s0)
        block = block->next;
    80013bae:	fe843783          	ld	a5,-24(s0)
    80013bb2:	679c                	ld	a5,8(a5)
    80013bb4:	fef43423          	sd	a5,-24(s0)
    while (block != NULL) {
    80013bb8:	fe843783          	ld	a5,-24(s0)
    80013bbc:	f3dd                	bnez	a5,80013b62 <free+0x22>
    }
    return false;
    80013bbe:	4781                	li	a5,0
}
    80013bc0:	853e                	mv	a0,a5
    80013bc2:	70a2                	ld	ra,40(sp)
    80013bc4:	7402                	ld	s0,32(sp)
    80013bc6:	6145                	addi	sp,sp,48
    80013bc8:	8082                	ret

0000000080013bca <alloc_block>:

static Block *alloc_block(size_t num)
{
    80013bca:	711d                	addi	sp,sp,-96
    80013bcc:	ec86                	sd	ra,88(sp)
    80013bce:	e8a2                	sd	s0,80(sp)
    80013bd0:	1080                	addi	s0,sp,96
    80013bd2:	faa43423          	sd	a0,-88(s0)
    Block *ptr  = heap->free;
    80013bd6:	00005797          	auipc	a5,0x5
    80013bda:	47a78793          	addi	a5,a5,1146 # 80019050 <heap>
    80013bde:	639c                	ld	a5,0(a5)
    80013be0:	639c                	ld	a5,0(a5)
    80013be2:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80013be6:	fe043023          	sd	zero,-32(s0)
    size_t top  = heap->top;
    80013bea:	00005797          	auipc	a5,0x5
    80013bee:	46678793          	addi	a5,a5,1126 # 80019050 <heap>
    80013bf2:	639c                	ld	a5,0(a5)
    80013bf4:	6f9c                	ld	a5,24(a5)
    80013bf6:	fcf43c23          	sd	a5,-40(s0)
    num         = (num + heap_alignment - 1) & -heap_alignment;
    80013bfa:	00005797          	auipc	a5,0x5
    80013bfe:	46e78793          	addi	a5,a5,1134 # 80019068 <heap_alignment>
    80013c02:	6398                	ld	a4,0(a5)
    80013c04:	fa843783          	ld	a5,-88(s0)
    80013c08:	97ba                	add	a5,a5,a4
    80013c0a:	fff78713          	addi	a4,a5,-1
    80013c0e:	00005797          	auipc	a5,0x5
    80013c12:	45a78793          	addi	a5,a5,1114 # 80019068 <heap_alignment>
    80013c16:	639c                	ld	a5,0(a5)
    80013c18:	40f007b3          	neg	a5,a5
    80013c1c:	8ff9                	and	a5,a5,a4
    80013c1e:	faf43423          	sd	a5,-88(s0)
    while (ptr != NULL) {
    80013c22:	a2bd                	j	80013d90 <alloc_block+0x1c6>
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80013c24:	fe843783          	ld	a5,-24(s0)
    80013c28:	639c                	ld	a5,0(a5)
    80013c2a:	873e                	mv	a4,a5
    80013c2c:	fe843783          	ld	a5,-24(s0)
    80013c30:	6b9c                	ld	a5,16(a5)
    80013c32:	97ba                	add	a5,a5,a4
    80013c34:	fd843703          	ld	a4,-40(s0)
    80013c38:	02e7e263          	bltu	a5,a4,80013c5c <alloc_block+0x92>
                           ((size_t)ptr->addr + num <= (size_t)heap_limit);
    80013c3c:	fe843783          	ld	a5,-24(s0)
    80013c40:	639c                	ld	a5,0(a5)
    80013c42:	873e                	mv	a4,a5
    80013c44:	fa843783          	ld	a5,-88(s0)
    80013c48:	97ba                	add	a5,a5,a4
    80013c4a:	00005717          	auipc	a4,0x5
    80013c4e:	40e70713          	addi	a4,a4,1038 # 80019058 <heap_limit>
    80013c52:	6318                	ld	a4,0(a4)
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80013c54:	00f76463          	bltu	a4,a5,80013c5c <alloc_block+0x92>
    80013c58:	4785                	li	a5,1
    80013c5a:	a011                	j	80013c5e <alloc_block+0x94>
    80013c5c:	4781                	li	a5,0
    80013c5e:	fcf42623          	sw	a5,-52(s0)
        if (is_top || ptr->size >= num) {
    80013c62:	fcc42783          	lw	a5,-52(s0)
    80013c66:	2781                	sext.w	a5,a5
    80013c68:	eb81                	bnez	a5,80013c78 <alloc_block+0xae>
    80013c6a:	fe843783          	ld	a5,-24(s0)
    80013c6e:	6b9c                	ld	a5,16(a5)
    80013c70:	fa843703          	ld	a4,-88(s0)
    80013c74:	10e7e563          	bltu	a5,a4,80013d7e <alloc_block+0x1b4>
            if (prev != NULL) {
    80013c78:	fe043783          	ld	a5,-32(s0)
    80013c7c:	cb81                	beqz	a5,80013c8c <alloc_block+0xc2>
                prev->next = ptr->next;
    80013c7e:	fe843783          	ld	a5,-24(s0)
    80013c82:	6798                	ld	a4,8(a5)
    80013c84:	fe043783          	ld	a5,-32(s0)
    80013c88:	e798                	sd	a4,8(a5)
    80013c8a:	a811                	j	80013c9e <alloc_block+0xd4>
            }
            else {
                heap->free = ptr->next;
    80013c8c:	00005797          	auipc	a5,0x5
    80013c90:	3c478793          	addi	a5,a5,964 # 80019050 <heap>
    80013c94:	639c                	ld	a5,0(a5)
    80013c96:	fe843703          	ld	a4,-24(s0)
    80013c9a:	6718                	ld	a4,8(a4)
    80013c9c:	e398                	sd	a4,0(a5)
            }
            ptr->next  = heap->used;
    80013c9e:	00005797          	auipc	a5,0x5
    80013ca2:	3b278793          	addi	a5,a5,946 # 80019050 <heap>
    80013ca6:	639c                	ld	a5,0(a5)
    80013ca8:	6798                	ld	a4,8(a5)
    80013caa:	fe843783          	ld	a5,-24(s0)
    80013cae:	e798                	sd	a4,8(a5)
            heap->used = ptr;
    80013cb0:	00005797          	auipc	a5,0x5
    80013cb4:	3a078793          	addi	a5,a5,928 # 80019050 <heap>
    80013cb8:	639c                	ld	a5,0(a5)
    80013cba:	fe843703          	ld	a4,-24(s0)
    80013cbe:	e798                	sd	a4,8(a5)
            if (is_top) {
    80013cc0:	fcc42783          	lw	a5,-52(s0)
    80013cc4:	2781                	sext.w	a5,a5
    80013cc6:	c785                	beqz	a5,80013cee <alloc_block+0x124>
                ptr->size = num;
    80013cc8:	fe843783          	ld	a5,-24(s0)
    80013ccc:	fa843703          	ld	a4,-88(s0)
    80013cd0:	eb98                	sd	a4,16(a5)
                heap->top = (size_t)ptr->addr + num;
    80013cd2:	fe843783          	ld	a5,-24(s0)
    80013cd6:	639c                	ld	a5,0(a5)
    80013cd8:	86be                	mv	a3,a5
    80013cda:	00005797          	auipc	a5,0x5
    80013cde:	37678793          	addi	a5,a5,886 # 80019050 <heap>
    80013ce2:	639c                	ld	a5,0(a5)
    80013ce4:	fa843703          	ld	a4,-88(s0)
    80013ce8:	9736                	add	a4,a4,a3
    80013cea:	ef98                	sd	a4,24(a5)
    80013cec:	a071                	j	80013d78 <alloc_block+0x1ae>
            }
            else if (heap->fresh != NULL) {
    80013cee:	00005797          	auipc	a5,0x5
    80013cf2:	36278793          	addi	a5,a5,866 # 80019050 <heap>
    80013cf6:	639c                	ld	a5,0(a5)
    80013cf8:	6b9c                	ld	a5,16(a5)
    80013cfa:	cfbd                	beqz	a5,80013d78 <alloc_block+0x1ae>
                size_t excess = ptr->size - num;
    80013cfc:	fe843783          	ld	a5,-24(s0)
    80013d00:	6b98                	ld	a4,16(a5)
    80013d02:	fa843783          	ld	a5,-88(s0)
    80013d06:	40f707b3          	sub	a5,a4,a5
    80013d0a:	fcf43023          	sd	a5,-64(s0)
                if (excess >= heap_split_thresh) {
    80013d0e:	00005797          	auipc	a5,0x5
    80013d12:	35278793          	addi	a5,a5,850 # 80019060 <heap_split_thresh>
    80013d16:	639c                	ld	a5,0(a5)
    80013d18:	fc043703          	ld	a4,-64(s0)
    80013d1c:	04f76e63          	bltu	a4,a5,80013d78 <alloc_block+0x1ae>
                    ptr->size    = num;
    80013d20:	fe843783          	ld	a5,-24(s0)
    80013d24:	fa843703          	ld	a4,-88(s0)
    80013d28:	eb98                	sd	a4,16(a5)
                    Block *split = heap->fresh;
    80013d2a:	00005797          	auipc	a5,0x5
    80013d2e:	32678793          	addi	a5,a5,806 # 80019050 <heap>
    80013d32:	639c                	ld	a5,0(a5)
    80013d34:	6b9c                	ld	a5,16(a5)
    80013d36:	faf43c23          	sd	a5,-72(s0)
                    heap->fresh  = split->next;
    80013d3a:	00005797          	auipc	a5,0x5
    80013d3e:	31678793          	addi	a5,a5,790 # 80019050 <heap>
    80013d42:	639c                	ld	a5,0(a5)
    80013d44:	fb843703          	ld	a4,-72(s0)
    80013d48:	6718                	ld	a4,8(a4)
    80013d4a:	eb98                	sd	a4,16(a5)
                    split->addr  = (void *)((size_t)ptr->addr + num);
    80013d4c:	fe843783          	ld	a5,-24(s0)
    80013d50:	639c                	ld	a5,0(a5)
    80013d52:	873e                	mv	a4,a5
    80013d54:	fa843783          	ld	a5,-88(s0)
    80013d58:	97ba                	add	a5,a5,a4
    80013d5a:	873e                	mv	a4,a5
    80013d5c:	fb843783          	ld	a5,-72(s0)
    80013d60:	e398                	sd	a4,0(a5)
                    split->size  = excess;
    80013d62:	fb843783          	ld	a5,-72(s0)
    80013d66:	fc043703          	ld	a4,-64(s0)
    80013d6a:	eb98                	sd	a4,16(a5)
                    insert_block(split);
    80013d6c:	fb843503          	ld	a0,-72(s0)
    80013d70:	af7ff0ef          	jal	ra,80013866 <insert_block>
                    compact();
    80013d74:	bdfff0ef          	jal	ra,80013952 <compact>
                }
            }
            return ptr;
    80013d78:	fe843783          	ld	a5,-24(s0)
    80013d7c:	a875                	j	80013e38 <alloc_block+0x26e>
        }
        prev = ptr;
    80013d7e:	fe843783          	ld	a5,-24(s0)
    80013d82:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    80013d86:	fe843783          	ld	a5,-24(s0)
    80013d8a:	679c                	ld	a5,8(a5)
    80013d8c:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80013d90:	fe843783          	ld	a5,-24(s0)
    80013d94:	e80798e3          	bnez	a5,80013c24 <alloc_block+0x5a>
    }
    // no matching free blocks
    // see if any other blocks available
    size_t new_top = top + num;
    80013d98:	fd843703          	ld	a4,-40(s0)
    80013d9c:	fa843783          	ld	a5,-88(s0)
    80013da0:	97ba                	add	a5,a5,a4
    80013da2:	fcf43823          	sd	a5,-48(s0)
    if (heap->fresh != NULL && new_top <= (size_t)heap_limit) {
    80013da6:	00005797          	auipc	a5,0x5
    80013daa:	2aa78793          	addi	a5,a5,682 # 80019050 <heap>
    80013dae:	639c                	ld	a5,0(a5)
    80013db0:	6b9c                	ld	a5,16(a5)
    80013db2:	c3d1                	beqz	a5,80013e36 <alloc_block+0x26c>
    80013db4:	00005797          	auipc	a5,0x5
    80013db8:	2a478793          	addi	a5,a5,676 # 80019058 <heap_limit>
    80013dbc:	639c                	ld	a5,0(a5)
    80013dbe:	873e                	mv	a4,a5
    80013dc0:	fd043783          	ld	a5,-48(s0)
    80013dc4:	06f76963          	bltu	a4,a5,80013e36 <alloc_block+0x26c>
        ptr         = heap->fresh;
    80013dc8:	00005797          	auipc	a5,0x5
    80013dcc:	28878793          	addi	a5,a5,648 # 80019050 <heap>
    80013dd0:	639c                	ld	a5,0(a5)
    80013dd2:	6b9c                	ld	a5,16(a5)
    80013dd4:	fef43423          	sd	a5,-24(s0)
        heap->fresh = ptr->next;
    80013dd8:	00005797          	auipc	a5,0x5
    80013ddc:	27878793          	addi	a5,a5,632 # 80019050 <heap>
    80013de0:	639c                	ld	a5,0(a5)
    80013de2:	fe843703          	ld	a4,-24(s0)
    80013de6:	6718                	ld	a4,8(a4)
    80013de8:	eb98                	sd	a4,16(a5)
        ptr->addr   = (void *)top;
    80013dea:	fd843703          	ld	a4,-40(s0)
    80013dee:	fe843783          	ld	a5,-24(s0)
    80013df2:	e398                	sd	a4,0(a5)
        ptr->next   = heap->used;
    80013df4:	00005797          	auipc	a5,0x5
    80013df8:	25c78793          	addi	a5,a5,604 # 80019050 <heap>
    80013dfc:	639c                	ld	a5,0(a5)
    80013dfe:	6798                	ld	a4,8(a5)
    80013e00:	fe843783          	ld	a5,-24(s0)
    80013e04:	e798                	sd	a4,8(a5)
        ptr->size   = num;
    80013e06:	fe843783          	ld	a5,-24(s0)
    80013e0a:	fa843703          	ld	a4,-88(s0)
    80013e0e:	eb98                	sd	a4,16(a5)
        heap->used  = ptr;
    80013e10:	00005797          	auipc	a5,0x5
    80013e14:	24078793          	addi	a5,a5,576 # 80019050 <heap>
    80013e18:	639c                	ld	a5,0(a5)
    80013e1a:	fe843703          	ld	a4,-24(s0)
    80013e1e:	e798                	sd	a4,8(a5)
        heap->top   = new_top;
    80013e20:	00005797          	auipc	a5,0x5
    80013e24:	23078793          	addi	a5,a5,560 # 80019050 <heap>
    80013e28:	639c                	ld	a5,0(a5)
    80013e2a:	fd043703          	ld	a4,-48(s0)
    80013e2e:	ef98                	sd	a4,24(a5)
        return ptr;
    80013e30:	fe843783          	ld	a5,-24(s0)
    80013e34:	a011                	j	80013e38 <alloc_block+0x26e>
    }
    return NULL;
    80013e36:	4781                	li	a5,0
}
    80013e38:	853e                	mv	a0,a5
    80013e3a:	60e6                	ld	ra,88(sp)
    80013e3c:	6446                	ld	s0,80(sp)
    80013e3e:	6125                	addi	sp,sp,96
    80013e40:	8082                	ret

0000000080013e42 <alloc>:

static void *alloc(size_t num)
{
    80013e42:	7179                	addi	sp,sp,-48
    80013e44:	f406                	sd	ra,40(sp)
    80013e46:	f022                	sd	s0,32(sp)
    80013e48:	1800                	addi	s0,sp,48
    80013e4a:	fca43c23          	sd	a0,-40(s0)
    Block *block = alloc_block(num);
    80013e4e:	fd843503          	ld	a0,-40(s0)
    80013e52:	d79ff0ef          	jal	ra,80013bca <alloc_block>
    80013e56:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    80013e5a:	fe843783          	ld	a5,-24(s0)
    80013e5e:	c789                	beqz	a5,80013e68 <alloc+0x26>
        return block->addr;
    80013e60:	fe843783          	ld	a5,-24(s0)
    80013e64:	639c                	ld	a5,0(a5)
    80013e66:	a011                	j	80013e6a <alloc+0x28>
    }
    return NULL;
    80013e68:	4781                	li	a5,0
}
    80013e6a:	853e                	mv	a0,a5
    80013e6c:	70a2                	ld	ra,40(sp)
    80013e6e:	7402                	ld	s0,32(sp)
    80013e70:	6145                	addi	sp,sp,48
    80013e72:	8082                	ret

0000000080013e74 <calloc>:

static void *calloc(size_t num, size_t size)
{
    80013e74:	7179                	addi	sp,sp,-48
    80013e76:	f406                	sd	ra,40(sp)
    80013e78:	f022                	sd	s0,32(sp)
    80013e7a:	1800                	addi	s0,sp,48
    80013e7c:	fca43c23          	sd	a0,-40(s0)
    80013e80:	fcb43823          	sd	a1,-48(s0)
    num *= size;
    80013e84:	fd843703          	ld	a4,-40(s0)
    80013e88:	fd043783          	ld	a5,-48(s0)
    80013e8c:	02f707b3          	mul	a5,a4,a5
    80013e90:	fcf43c23          	sd	a5,-40(s0)
    Block *block = alloc_block(num);
    80013e94:	fd843503          	ld	a0,-40(s0)
    80013e98:	d33ff0ef          	jal	ra,80013bca <alloc_block>
    80013e9c:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    80013ea0:	fe843783          	ld	a5,-24(s0)
    80013ea4:	c385                	beqz	a5,80013ec4 <calloc+0x50>
        memset(block->addr, 0, num);
    80013ea6:	fe843783          	ld	a5,-24(s0)
    80013eaa:	639c                	ld	a5,0(a5)
    80013eac:	fd843703          	ld	a4,-40(s0)
    80013eb0:	2701                	sext.w	a4,a4
    80013eb2:	863a                	mv	a2,a4
    80013eb4:	4581                	li	a1,0
    80013eb6:	853e                	mv	a0,a5
    80013eb8:	3fa020ef          	jal	ra,800162b2 <memset>
        return block->addr;
    80013ebc:	fe843783          	ld	a5,-24(s0)
    80013ec0:	639c                	ld	a5,0(a5)
    80013ec2:	a011                	j	80013ec6 <calloc+0x52>
    }
    return NULL;
    80013ec4:	4781                	li	a5,0
}
    80013ec6:	853e                	mv	a0,a5
    80013ec8:	70a2                	ld	ra,40(sp)
    80013eca:	7402                	ld	s0,32(sp)
    80013ecc:	6145                	addi	sp,sp,48
    80013ece:	8082                	ret

0000000080013ed0 <count_blocks>:

static size_t count_blocks(Block *ptr)
{
    80013ed0:	7179                	addi	sp,sp,-48
    80013ed2:	f422                	sd	s0,40(sp)
    80013ed4:	1800                	addi	s0,sp,48
    80013ed6:	fca43c23          	sd	a0,-40(s0)
    size_t num = 0;
    80013eda:	fe043423          	sd	zero,-24(s0)
    while (ptr != NULL) {
    80013ede:	a819                	j	80013ef4 <count_blocks+0x24>
        num++;
    80013ee0:	fe843783          	ld	a5,-24(s0)
    80013ee4:	0785                	addi	a5,a5,1
    80013ee6:	fef43423          	sd	a5,-24(s0)
        ptr = ptr->next;
    80013eea:	fd843783          	ld	a5,-40(s0)
    80013eee:	679c                	ld	a5,8(a5)
    80013ef0:	fcf43c23          	sd	a5,-40(s0)
    while (ptr != NULL) {
    80013ef4:	fd843783          	ld	a5,-40(s0)
    80013ef8:	f7e5                	bnez	a5,80013ee0 <count_blocks+0x10>
    }
    return num;
    80013efa:	fe843783          	ld	a5,-24(s0)
}
    80013efe:	853e                	mv	a0,a5
    80013f00:	7422                	ld	s0,40(sp)
    80013f02:	6145                	addi	sp,sp,48
    80013f04:	8082                	ret

0000000080013f06 <heap_num_free>:
static size_t heap_num_free()
{
    80013f06:	1141                	addi	sp,sp,-16
    80013f08:	e406                	sd	ra,8(sp)
    80013f0a:	e022                	sd	s0,0(sp)
    80013f0c:	0800                	addi	s0,sp,16
    return count_blocks(heap->free);
    80013f0e:	00005797          	auipc	a5,0x5
    80013f12:	14278793          	addi	a5,a5,322 # 80019050 <heap>
    80013f16:	639c                	ld	a5,0(a5)
    80013f18:	639c                	ld	a5,0(a5)
    80013f1a:	853e                	mv	a0,a5
    80013f1c:	fb5ff0ef          	jal	ra,80013ed0 <count_blocks>
    80013f20:	87aa                	mv	a5,a0
}
    80013f22:	853e                	mv	a0,a5
    80013f24:	60a2                	ld	ra,8(sp)
    80013f26:	6402                	ld	s0,0(sp)
    80013f28:	0141                	addi	sp,sp,16
    80013f2a:	8082                	ret

0000000080013f2c <heap_num_used>:
static size_t heap_num_used()
{
    80013f2c:	1141                	addi	sp,sp,-16
    80013f2e:	e406                	sd	ra,8(sp)
    80013f30:	e022                	sd	s0,0(sp)
    80013f32:	0800                	addi	s0,sp,16
    return count_blocks(heap->used);
    80013f34:	00005797          	auipc	a5,0x5
    80013f38:	11c78793          	addi	a5,a5,284 # 80019050 <heap>
    80013f3c:	639c                	ld	a5,0(a5)
    80013f3e:	679c                	ld	a5,8(a5)
    80013f40:	853e                	mv	a0,a5
    80013f42:	f8fff0ef          	jal	ra,80013ed0 <count_blocks>
    80013f46:	87aa                	mv	a5,a0
}
    80013f48:	853e                	mv	a0,a5
    80013f4a:	60a2                	ld	ra,8(sp)
    80013f4c:	6402                	ld	s0,0(sp)
    80013f4e:	0141                	addi	sp,sp,16
    80013f50:	8082                	ret

0000000080013f52 <heap_num_fresh>:
static size_t heap_num_fresh()
{
    80013f52:	1141                	addi	sp,sp,-16
    80013f54:	e406                	sd	ra,8(sp)
    80013f56:	e022                	sd	s0,0(sp)
    80013f58:	0800                	addi	s0,sp,16
    return count_blocks(heap->fresh);
    80013f5a:	00005797          	auipc	a5,0x5
    80013f5e:	0f678793          	addi	a5,a5,246 # 80019050 <heap>
    80013f62:	639c                	ld	a5,0(a5)
    80013f64:	6b9c                	ld	a5,16(a5)
    80013f66:	853e                	mv	a0,a5
    80013f68:	f69ff0ef          	jal	ra,80013ed0 <count_blocks>
    80013f6c:	87aa                	mv	a5,a0
}
    80013f6e:	853e                	mv	a0,a5
    80013f70:	60a2                	ld	ra,8(sp)
    80013f72:	6402                	ld	s0,0(sp)
    80013f74:	0141                	addi	sp,sp,16
    80013f76:	8082                	ret

0000000080013f78 <heap_check>:
static bool heap_check()
{
    80013f78:	1101                	addi	sp,sp,-32
    80013f7a:	ec06                	sd	ra,24(sp)
    80013f7c:	e822                	sd	s0,16(sp)
    80013f7e:	e426                	sd	s1,8(sp)
    80013f80:	1000                	addi	s0,sp,32
    return heap_max_blocks == heap_num_free() + heap_num_used() + heap_num_fresh();
    80013f82:	f85ff0ef          	jal	ra,80013f06 <heap_num_free>
    80013f86:	84aa                	mv	s1,a0
    80013f88:	fa5ff0ef          	jal	ra,80013f2c <heap_num_used>
    80013f8c:	87aa                	mv	a5,a0
    80013f8e:	94be                	add	s1,s1,a5
    80013f90:	fc3ff0ef          	jal	ra,80013f52 <heap_num_fresh>
    80013f94:	87aa                	mv	a5,a0
    80013f96:	00f48733          	add	a4,s1,a5
    80013f9a:	00005797          	auipc	a5,0x5
    80013f9e:	0d678793          	addi	a5,a5,214 # 80019070 <heap_max_blocks>
    80013fa2:	639c                	ld	a5,0(a5)
    80013fa4:	40f707b3          	sub	a5,a4,a5
    80013fa8:	0017b793          	seqz	a5,a5
    80013fac:	0ff7f793          	andi	a5,a5,255
}
    80013fb0:	853e                	mv	a0,a5
    80013fb2:	60e2                	ld	ra,24(sp)
    80013fb4:	6442                	ld	s0,16(sp)
    80013fb6:	64a2                	ld	s1,8(sp)
    80013fb8:	6105                	addi	sp,sp,32
    80013fba:	8082                	ret

0000000080013fbc <heap_print_stats>:

void heap_print_stats(void)
{
    80013fbc:	7179                	addi	sp,sp,-48
    80013fbe:	f406                	sd	ra,40(sp)
    80013fc0:	f022                	sd	s0,32(sp)
    80013fc2:	ec26                	sd	s1,24(sp)
    80013fc4:	e84a                	sd	s2,16(sp)
    80013fc6:	e44e                	sd	s3,8(sp)
    80013fc8:	1800                	addi	s0,sp,48
    debugf(
    80013fca:	f3dff0ef          	jal	ra,80013f06 <heap_num_free>
    80013fce:	84aa                	mv	s1,a0
    80013fd0:	f5dff0ef          	jal	ra,80013f2c <heap_num_used>
    80013fd4:	892a                	mv	s2,a0
    80013fd6:	f7dff0ef          	jal	ra,80013f52 <heap_num_fresh>
    80013fda:	89aa                	mv	s3,a0
        "HEAP\n~~~~\nFree blocks:    %lu\nUsed blocks:    %lu\nFresh blocks:   %lu\nHeap "
        "check:     %s\n",
        heap_num_free(), heap_num_used(), heap_num_fresh(), heap_check() ? "good" : "bad");
    80013fdc:	f9dff0ef          	jal	ra,80013f78 <heap_check>
    80013fe0:	87aa                	mv	a5,a0
    debugf(
    80013fe2:	c791                	beqz	a5,80013fee <heap_print_stats+0x32>
    80013fe4:	00006797          	auipc	a5,0x6
    80013fe8:	70478793          	addi	a5,a5,1796 # 8001a6e8 <pow10.0+0x4b8>
    80013fec:	a029                	j	80013ff6 <heap_print_stats+0x3a>
    80013fee:	00006797          	auipc	a5,0x6
    80013ff2:	70278793          	addi	a5,a5,1794 # 8001a6f0 <pow10.0+0x4c0>
    80013ff6:	873e                	mv	a4,a5
    80013ff8:	86ce                	mv	a3,s3
    80013ffa:	864a                	mv	a2,s2
    80013ffc:	85a6                	mv	a1,s1
    80013ffe:	00006517          	auipc	a0,0x6
    80014002:	6fa50513          	addi	a0,a0,1786 # 8001a6f8 <pow10.0+0x4c8>
    80014006:	4e9000ef          	jal	ra,80014cee <debugf>
}
    8001400a:	0001                	nop
    8001400c:	70a2                	ld	ra,40(sp)
    8001400e:	7402                	ld	s0,32(sp)
    80014010:	64e2                	ld	s1,24(sp)
    80014012:	6942                	ld	s2,16(sp)
    80014014:	69a2                	ld	s3,8(sp)
    80014016:	6145                	addi	sp,sp,48
    80014018:	8082                	ret

000000008001401a <kmalloc>:
void *kmalloc(size_t sz)
{
    8001401a:	7139                	addi	sp,sp,-64
    8001401c:	fc06                	sd	ra,56(sp)
    8001401e:	f822                	sd	s0,48(sp)
    80014020:	f426                	sd	s1,40(sp)
    80014022:	f04a                	sd	s2,32(sp)
    80014024:	ec4e                	sd	s3,24(sp)
    80014026:	0080                	addi	s0,sp,64
    80014028:	fca43423          	sd	a0,-56(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kmalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
    8001402c:	edbff0ef          	jal	ra,80013f06 <heap_num_free>
    80014030:	84aa                	mv	s1,a0
    80014032:	efbff0ef          	jal	ra,80013f2c <heap_num_used>
    80014036:	892a                	mv	s2,a0
    80014038:	f1bff0ef          	jal	ra,80013f52 <heap_num_fresh>
    8001403c:	89aa                	mv	s3,a0
           heap_check());
    8001403e:	f3bff0ef          	jal	ra,80013f78 <heap_check>
    80014042:	87aa                	mv	a5,a0
    debugf("[kmalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
    80014044:	2781                	sext.w	a5,a5
    80014046:	873e                	mv	a4,a5
    80014048:	86ce                	mv	a3,s3
    8001404a:	864a                	mv	a2,s2
    8001404c:	85a6                	mv	a1,s1
    8001404e:	00006517          	auipc	a0,0x6
    80014052:	70a50513          	addi	a0,a0,1802 # 8001a758 <pow10.0+0x528>
    80014056:	499000ef          	jal	ra,80014cee <debugf>
#endif
    return alloc(sz);
    8001405a:	fc843503          	ld	a0,-56(s0)
    8001405e:	de5ff0ef          	jal	ra,80013e42 <alloc>
    80014062:	87aa                	mv	a5,a0
}
    80014064:	853e                	mv	a0,a5
    80014066:	70e2                	ld	ra,56(sp)
    80014068:	7442                	ld	s0,48(sp)
    8001406a:	74a2                	ld	s1,40(sp)
    8001406c:	7902                	ld	s2,32(sp)
    8001406e:	69e2                	ld	s3,24(sp)
    80014070:	6121                	addi	sp,sp,64
    80014072:	8082                	ret

0000000080014074 <kcalloc>:
void *kcalloc(size_t n, size_t sz)
{
    80014074:	7139                	addi	sp,sp,-64
    80014076:	fc06                	sd	ra,56(sp)
    80014078:	f822                	sd	s0,48(sp)
    8001407a:	f426                	sd	s1,40(sp)
    8001407c:	f04a                	sd	s2,32(sp)
    8001407e:	ec4e                	sd	s3,24(sp)
    80014080:	0080                	addi	s0,sp,64
    80014082:	fca43423          	sd	a0,-56(s0)
    80014086:	fcb43023          	sd	a1,-64(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kcalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
    8001408a:	e7dff0ef          	jal	ra,80013f06 <heap_num_free>
    8001408e:	84aa                	mv	s1,a0
    80014090:	e9dff0ef          	jal	ra,80013f2c <heap_num_used>
    80014094:	892a                	mv	s2,a0
    80014096:	ebdff0ef          	jal	ra,80013f52 <heap_num_fresh>
    8001409a:	89aa                	mv	s3,a0
           heap_check());
    8001409c:	eddff0ef          	jal	ra,80013f78 <heap_check>
    800140a0:	87aa                	mv	a5,a0
    debugf("[kcalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
    800140a2:	2781                	sext.w	a5,a5
    800140a4:	873e                	mv	a4,a5
    800140a6:	86ce                	mv	a3,s3
    800140a8:	864a                	mv	a2,s2
    800140aa:	85a6                	mv	a1,s1
    800140ac:	00006517          	auipc	a0,0x6
    800140b0:	6cc50513          	addi	a0,a0,1740 # 8001a778 <pow10.0+0x548>
    800140b4:	43b000ef          	jal	ra,80014cee <debugf>
#endif
    return calloc(n, sz);
    800140b8:	fc043583          	ld	a1,-64(s0)
    800140bc:	fc843503          	ld	a0,-56(s0)
    800140c0:	db5ff0ef          	jal	ra,80013e74 <calloc>
    800140c4:	87aa                	mv	a5,a0
}
    800140c6:	853e                	mv	a0,a5
    800140c8:	70e2                	ld	ra,56(sp)
    800140ca:	7442                	ld	s0,48(sp)
    800140cc:	74a2                	ld	s1,40(sp)
    800140ce:	7902                	ld	s2,32(sp)
    800140d0:	69e2                	ld	s3,24(sp)
    800140d2:	6121                	addi	sp,sp,64
    800140d4:	8082                	ret

00000000800140d6 <kfree>:
void kfree(void *m)
{
    800140d6:	7139                	addi	sp,sp,-64
    800140d8:	fc06                	sd	ra,56(sp)
    800140da:	f822                	sd	s0,48(sp)
    800140dc:	f426                	sd	s1,40(sp)
    800140de:	f04a                	sd	s2,32(sp)
    800140e0:	ec4e                	sd	s3,24(sp)
    800140e2:	0080                	addi	s0,sp,64
    800140e4:	fca43423          	sd	a0,-56(s0)
    if (m != NULL) {
    800140e8:	fc843783          	ld	a5,-56(s0)
    800140ec:	c789                	beqz	a5,800140f6 <kfree+0x20>
        free(m);
    800140ee:	fc843503          	ld	a0,-56(s0)
    800140f2:	a4fff0ef          	jal	ra,80013b40 <free>
    }
#ifdef DEBUG_KMALLOC
    debugf("[kfree]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
    800140f6:	e11ff0ef          	jal	ra,80013f06 <heap_num_free>
    800140fa:	84aa                	mv	s1,a0
    800140fc:	e31ff0ef          	jal	ra,80013f2c <heap_num_used>
    80014100:	892a                	mv	s2,a0
    80014102:	e51ff0ef          	jal	ra,80013f52 <heap_num_fresh>
    80014106:	89aa                	mv	s3,a0
           heap_check());
    80014108:	e71ff0ef          	jal	ra,80013f78 <heap_check>
    8001410c:	87aa                	mv	a5,a0
    debugf("[kfree]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
    8001410e:	2781                	sext.w	a5,a5
    80014110:	873e                	mv	a4,a5
    80014112:	86ce                	mv	a3,s3
    80014114:	864a                	mv	a2,s2
    80014116:	85a6                	mv	a1,s1
    80014118:	00006517          	auipc	a0,0x6
    8001411c:	68050513          	addi	a0,a0,1664 # 8001a798 <pow10.0+0x568>
    80014120:	3cf000ef          	jal	ra,80014cee <debugf>
#endif
}
    80014124:	0001                	nop
    80014126:	70e2                	ld	ra,56(sp)
    80014128:	7442                	ld	s0,48(sp)
    8001412a:	74a2                	ld	s1,40(sp)
    8001412c:	7902                	ld	s2,32(sp)
    8001412e:	69e2                	ld	s3,24(sp)
    80014130:	6121                	addi	sp,sp,64
    80014132:	8082                	ret

0000000080014134 <heap_init>:

void heap_init(void)
{
    80014134:	7179                	addi	sp,sp,-48
    80014136:	f406                	sd	ra,40(sp)
    80014138:	f022                	sd	s0,32(sp)
    8001413a:	ec26                	sd	s1,24(sp)
    8001413c:	1800                	addi	s0,sp,48
#ifdef DEBUG_HEAP
    debugf("[heap_init]: Prior to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
    8001413e:	121010ef          	jal	ra,80015a5e <page_count_taken>
    80014142:	87aa                	mv	a5,a0
    80014144:	84be                	mv	s1,a5
    80014146:	0a3010ef          	jal	ra,800159e8 <page_count_free>
    8001414a:	87aa                	mv	a5,a0
    8001414c:	863e                	mv	a2,a5
    8001414e:	85a6                	mv	a1,s1
    80014150:	00006517          	auipc	a0,0x6
    80014154:	66850513          	addi	a0,a0,1640 # 8001a7b8 <pow10.0+0x588>
    80014158:	397000ef          	jal	ra,80014cee <debugf>
           page_count_free());
#endif
    void *start = page_znalloc(KERNEL_HEAP_PAGES);
    8001415c:	6505                	lui	a0,0x1
    8001415e:	796010ef          	jal	ra,800158f4 <page_znalloc>
    80014162:	fca43c23          	sd	a0,-40(s0)
#ifdef DEBUG_HEAP
    debugf("[heap_init]: Heap start at 0x%08lx\n", start);
    80014166:	fd843583          	ld	a1,-40(s0)
    8001416a:	00006517          	auipc	a0,0x6
    8001416e:	68e50513          	addi	a0,a0,1678 # 8001a7f8 <pow10.0+0x5c8>
    80014172:	37d000ef          	jal	ra,80014cee <debugf>
    debugf("[heap_init]: After to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
    80014176:	0e9010ef          	jal	ra,80015a5e <page_count_taken>
    8001417a:	87aa                	mv	a5,a0
    8001417c:	84be                	mv	s1,a5
    8001417e:	06b010ef          	jal	ra,800159e8 <page_count_free>
    80014182:	87aa                	mv	a5,a0
    80014184:	863e                	mv	a2,a5
    80014186:	85a6                	mv	a1,s1
    80014188:	00006517          	auipc	a0,0x6
    8001418c:	69850513          	addi	a0,a0,1688 # 8001a820 <pow10.0+0x5f0>
    80014190:	35f000ef          	jal	ra,80014cee <debugf>
           page_count_free());
#endif

    mmu_map_range(kernel_mmu_table, KERNEL_HEAP_START_VADDR, KERNEL_HEAP_END_VADDR, (uint64_t)start,
    80014194:	00005797          	auipc	a5,0x5
    80014198:	e6c78793          	addi	a5,a5,-404 # 80019000 <kernel_mmu_table>
    8001419c:	6388                	ld	a0,0(a5)
    8001419e:	fd843683          	ld	a3,-40(s0)
    800141a2:	4799                	li	a5,6
    800141a4:	4701                	li	a4,0
    800141a6:	00e08637          	lui	a2,0xe08
    800141aa:	7f760613          	addi	a2,a2,2039 # e087f7 <i+0xe087d7>
    800141ae:	0636                	slli	a2,a2,0xd
    800141b0:	00e085b7          	lui	a1,0xe08
    800141b4:	15dd                	addi	a1,a1,-9
    800141b6:	05b6                	slli	a1,a1,0xd
    800141b8:	bbeff0ef          	jal	ra,80013576 <mmu_map_range>
                  MMU_LEVEL_4K, PB_READ | PB_WRITE);
    init((void *)KERNEL_HEAP_START_VADDR, (void *)KERNEL_HEAP_END_VADDR, KERNEL_HEAP_PAGES / 4, 16,
    800141bc:	4721                	li	a4,8
    800141be:	46c1                	li	a3,16
    800141c0:	40000613          	li	a2,1024
    800141c4:	00e087b7          	lui	a5,0xe08
    800141c8:	7f778793          	addi	a5,a5,2039 # e087f7 <i+0xe087d7>
    800141cc:	00d79593          	slli	a1,a5,0xd
    800141d0:	00e087b7          	lui	a5,0xe08
    800141d4:	17dd                	addi	a5,a5,-9
    800141d6:	00d79513          	slli	a0,a5,0xd
    800141da:	84fff0ef          	jal	ra,80013a28 <init>
         8);

}
    800141de:	0001                	nop
    800141e0:	70a2                	ld	ra,40(sp)
    800141e2:	7402                	ld	s0,32(sp)
    800141e4:	64e2                	ld	s1,24(sp)
    800141e6:	6145                	addi	sp,sp,48
    800141e8:	8082                	ret

00000000800141ea <init_systems>:
// the kernel.
// Defined in src/include/mmu.h
struct page_table *kernel_mmu_table;

static void init_systems(void)
{
    800141ea:	1101                	addi	sp,sp,-32
    800141ec:	ec06                	sd	ra,24(sp)
    800141ee:	e822                	sd	s0,16(sp)
    800141f0:	1000                	addi	s0,sp,32
    void plic_init(void);
    plic_init();
    800141f2:	0c6010ef          	jal	ra,800152b8 <plic_init>
    debugf("plic_init() done\n");
    800141f6:	00006517          	auipc	a0,0x6
    800141fa:	66a50513          	addi	a0,a0,1642 # 8001a860 <pow10.0+0x630>
    800141fe:	2f1000ef          	jal	ra,80014cee <debugf>
    void page_init(void);
    page_init();
    80014202:	492010ef          	jal	ra,80015694 <page_init>
    debugf("page_init() done\n");
    80014206:	00006517          	auipc	a0,0x6
    8001420a:	67250513          	addi	a0,a0,1650 # 8001a878 <pow10.0+0x648>
    8001420e:	2e1000ef          	jal	ra,80014cee <debugf>

#ifdef USE_MMU
    struct page_table *pt = mmu_table_create();
    80014212:	f69fe0ef          	jal	ra,8001317a <mmu_table_create>
    80014216:	fea43423          	sd	a0,-24(s0)
    kernel_mmu_table = pt;
    8001421a:	00005797          	auipc	a5,0x5
    8001421e:	de678793          	addi	a5,a5,-538 # 80019000 <kernel_mmu_table>
    80014222:	fe843703          	ld	a4,-24(s0)
    80014226:	e398                	sd	a4,0(a5)
    // Map memory segments for our kernel
    debugf("Mapping kernel segments\n");
    80014228:	00006517          	auipc	a0,0x6
    8001422c:	66850513          	addi	a0,a0,1640 # 8001a890 <pow10.0+0x660>
    80014230:	2bf000ef          	jal	ra,80014cee <debugf>
    mmu_map_range(pt, sym_start(text), sym_end(heap), sym_start(text), MMU_LEVEL_1G,
    80014234:	ffffc597          	auipc	a1,0xffffc
    80014238:	dcc58593          	addi	a1,a1,-564 # 80010000 <_memory_start>
    8001423c:	07ffc617          	auipc	a2,0x7ffc
    80014240:	dc460613          	addi	a2,a2,-572 # 88010000 <_heap_end>
    80014244:	ffffc697          	auipc	a3,0xffffc
    80014248:	dbc68693          	addi	a3,a3,-580 # 80010000 <_memory_start>
    8001424c:	47b9                	li	a5,14
    8001424e:	4709                	li	a4,2
    80014250:	fe843503          	ld	a0,-24(s0)
    80014254:	b22ff0ef          	jal	ra,80013576 <mmu_map_range>
                  PB_READ | PB_WRITE | PB_EXECUTE);
    // PLIC
    debugf("Mapping PLIC\n");
    80014258:	00006517          	auipc	a0,0x6
    8001425c:	65850513          	addi	a0,a0,1624 # 8001a8b0 <pow10.0+0x680>
    80014260:	28f000ef          	jal	ra,80014cee <debugf>
    mmu_map_range(pt, 0x0C000000, 0x0C2FFFFF, 0x0C000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    80014264:	4799                	li	a5,6
    80014266:	4705                	li	a4,1
    80014268:	0c0006b7          	lui	a3,0xc000
    8001426c:	0c300637          	lui	a2,0xc300
    80014270:	167d                	addi	a2,a2,-1
    80014272:	0c0005b7          	lui	a1,0xc000
    80014276:	fe843503          	ld	a0,-24(s0)
    8001427a:	afcff0ef          	jal	ra,80013576 <mmu_map_range>
    // PCIe ECAM
    debugf("Mapping PCIe ECAM\n");
    8001427e:	00006517          	auipc	a0,0x6
    80014282:	64250513          	addi	a0,a0,1602 # 8001a8c0 <pow10.0+0x690>
    80014286:	269000ef          	jal	ra,80014cee <debugf>
    mmu_map_range(pt, 0x30000000, 0x30FFFFFF, 0x30000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    8001428a:	4799                	li	a5,6
    8001428c:	4705                	li	a4,1
    8001428e:	300006b7          	lui	a3,0x30000
    80014292:	31000637          	lui	a2,0x31000
    80014296:	167d                	addi	a2,a2,-1
    80014298:	300005b7          	lui	a1,0x30000
    8001429c:	fe843503          	ld	a0,-24(s0)
    800142a0:	ad6ff0ef          	jal	ra,80013576 <mmu_map_range>
    // PCIe MMIO
    debugf("Mapping PCIe MMIO\n");
    800142a4:	00006517          	auipc	a0,0x6
    800142a8:	63450513          	addi	a0,a0,1588 # 8001a8d8 <pow10.0+0x6a8>
    800142ac:	243000ef          	jal	ra,80014cee <debugf>
    mmu_map_range(pt, 0x40000000, 0x40FFFFFF, 0x40000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    800142b0:	4799                	li	a5,6
    800142b2:	4705                	li	a4,1
    800142b4:	400006b7          	lui	a3,0x40000
    800142b8:	41000637          	lui	a2,0x41000
    800142bc:	167d                	addi	a2,a2,-1
    800142be:	400005b7          	lui	a1,0x40000
    800142c2:	fe843503          	ld	a0,-24(s0)
    800142c6:	ab0ff0ef          	jal	ra,80013576 <mmu_map_range>
    //                    uint64_t start_virt, 
    //                    uint64_t end_virt, 
    //                    uint64_t start_phys)
    // debug_page_table(pt, MMU_LEVEL_1G);

    debugf("About to set SATP to %016lx\n", SATP_KERNEL);
    800142ca:	00005797          	auipc	a5,0x5
    800142ce:	d3678793          	addi	a5,a5,-714 # 80019000 <kernel_mmu_table>
    800142d2:	639c                	ld	a5,0(a5)
    800142d4:	00c7d713          	srli	a4,a5,0xc
    800142d8:	57fd                	li	a5,-1
    800142da:	83d1                	srli	a5,a5,0x14
    800142dc:	8f7d                	and	a4,a4,a5
    800142de:	8ffff7b7          	lui	a5,0x8ffff
    800142e2:	1782                	slli	a5,a5,0x20
    800142e4:	8fd9                	or	a5,a5,a4
    800142e6:	85be                	mv	a1,a5
    800142e8:	00006517          	auipc	a0,0x6
    800142ec:	60850513          	addi	a0,a0,1544 # 8001a8f0 <pow10.0+0x6c0>
    800142f0:	1ff000ef          	jal	ra,80014cee <debugf>
    // TODO: turn on the MMU when you've written the src/mmu.c functions
    CSR_WRITE("satp", SATP_KERNEL); 
    800142f4:	00005797          	auipc	a5,0x5
    800142f8:	d0c78793          	addi	a5,a5,-756 # 80019000 <kernel_mmu_table>
    800142fc:	639c                	ld	a5,0(a5)
    800142fe:	00c7d713          	srli	a4,a5,0xc
    80014302:	57fd                	li	a5,-1
    80014304:	83d1                	srli	a5,a5,0x14
    80014306:	8f7d                	and	a4,a4,a5
    80014308:	8ffff7b7          	lui	a5,0x8ffff
    8001430c:	1782                	slli	a5,a5,0x20
    8001430e:	8fd9                	or	a5,a5,a4
    80014310:	18079073          	csrw	satp,a5
    SFENCE_ALL();
    80014314:	12000073          	sfence.vma
    debugf("MMU enabled\n");
    80014318:	00006517          	auipc	a0,0x6
    8001431c:	5f850513          	addi	a0,a0,1528 # 8001a910 <pow10.0+0x6e0>
    80014320:	1cf000ef          	jal	ra,80014cee <debugf>
    void *kcalloc(uint64_t elem, uint64_t size);
    void kfree(void *ptr);
    void util_connect_galloc(void *(*malloc)(uint64_t size),
                             void *(*calloc)(uint64_t elem, uint64_t size),
                             void (*free)(void *ptr));
    util_connect_galloc(kmalloc, kcalloc, kfree);
    80014324:	00000617          	auipc	a2,0x0
    80014328:	db260613          	addi	a2,a2,-590 # 800140d6 <kfree>
    8001432c:	00000597          	auipc	a1,0x0
    80014330:	d4858593          	addi	a1,a1,-696 # 80014074 <kcalloc>
    80014334:	00000517          	auipc	a0,0x0
    80014338:	ce650513          	addi	a0,a0,-794 # 8001401a <kmalloc>
    8001433c:	0cd010ef          	jal	ra,80015c08 <util_connect_galloc>
    heap_init();
    80014340:	df5ff0ef          	jal	ra,80014134 <heap_init>
    debugf("heap_init() done\n");
    80014344:	00006517          	auipc	a0,0x6
    80014348:	5dc50513          	addi	a0,a0,1500 # 8001a920 <pow10.0+0x6f0>
    8001434c:	1a3000ef          	jal	ra,80014cee <debugf>

    // Call kmalloc() here to ensure it works.
    void *ptr = kmalloc(1024);
    80014350:	40000513          	li	a0,1024
    80014354:	cc7ff0ef          	jal	ra,8001401a <kmalloc>
    80014358:	fea43023          	sd	a0,-32(s0)
    strcpy(ptr, "Hello, world!");
    8001435c:	00006597          	auipc	a1,0x6
    80014360:	5dc58593          	addi	a1,a1,1500 # 8001a938 <pow10.0+0x708>
    80014364:	fe043503          	ld	a0,-32(s0)
    80014368:	716020ef          	jal	ra,80016a7e <strcpy>
    debugf("kmalloc(1024) = %p\n", ptr);
    8001436c:	fe043583          	ld	a1,-32(s0)
    80014370:	00006517          	auipc	a0,0x6
    80014374:	5d850513          	addi	a0,a0,1496 # 8001a948 <pow10.0+0x718>
    80014378:	177000ef          	jal	ra,80014cee <debugf>
    debugf("kmalloc(1024) = %s\n", ptr);
    8001437c:	fe043583          	ld	a1,-32(s0)
    80014380:	00006517          	auipc	a0,0x6
    80014384:	5e050513          	addi	a0,a0,1504 # 8001a960 <pow10.0+0x730>
    80014388:	167000ef          	jal	ra,80014cee <debugf>
    kfree(ptr);
    8001438c:	fe043503          	ld	a0,-32(s0)
    80014390:	d47ff0ef          	jal	ra,800140d6 <kfree>
#endif
#ifdef USE_PCI
    pci_init();
    80014394:	c19fe0ef          	jal	ra,80012fac <pci_init>
#endif
#ifdef USE_VIRTIO
    virtio_init();
#endif
}
    80014398:	0001                	nop
    8001439a:	60e2                	ld	ra,24(sp)
    8001439c:	6442                	ld	s0,16(sp)
    8001439e:	6105                	addi	sp,sp,32
    800143a0:	8082                	ret

00000000800143a2 <main>:
static const char *hart_status_values[] = {"NOT PRESENT", "STOPPED", "STARTING", "RUNNING"};
#ifdef RUN_INTERNAL_CONSOLE
static void console(void);
#endif
void main(unsigned int hart)
{
    800143a2:	7179                	addi	sp,sp,-48
    800143a4:	f406                	sd	ra,40(sp)
    800143a6:	f022                	sd	s0,32(sp)
    800143a8:	1800                	addi	s0,sp,48
    800143aa:	87aa                	mv	a5,a0
    800143ac:	fcf42e23          	sw	a5,-36(s0)
    // Initialize the page allocator
    // Allocate and zero the kernel's page table.

    // Kind of neat to see our memory mappings to ensure they make sense.
    logf(LOG_INFO, "[[ MEMORY MAPPINGS ]]\n");
    800143b0:	00006597          	auipc	a1,0x6
    800143b4:	5f858593          	addi	a1,a1,1528 # 8001a9a8 <pow10.0+0x778>
    800143b8:	4511                	li	a0,4
    800143ba:	0d7000ef          	jal	ra,80014c90 <logf>
    logf(LOG_INFO, "  [TEXT]  : 0x%08lx -> 0x%08lx\n", sym_start(text), sym_end(text));
    800143be:	ffffc797          	auipc	a5,0xffffc
    800143c2:	c4278793          	addi	a5,a5,-958 # 80010000 <_memory_start>
    800143c6:	00003717          	auipc	a4,0x3
    800143ca:	41c70713          	addi	a4,a4,1052 # 800177e2 <_text_end>
    800143ce:	86ba                	mv	a3,a4
    800143d0:	863e                	mv	a2,a5
    800143d2:	00006597          	auipc	a1,0x6
    800143d6:	5ee58593          	addi	a1,a1,1518 # 8001a9c0 <pow10.0+0x790>
    800143da:	4511                	li	a0,4
    800143dc:	0b5000ef          	jal	ra,80014c90 <logf>
    logf(LOG_INFO, "  [BSS]   : 0x%08lx -> 0x%08lx\n", sym_start(bss), sym_end(bss));
    800143e0:	00005797          	auipc	a5,0x5
    800143e4:	c2078793          	addi	a5,a5,-992 # 80019000 <kernel_mmu_table>
    800143e8:	00005717          	auipc	a4,0x5
    800143ec:	ca070713          	addi	a4,a4,-864 # 80019088 <_bss_end>
    800143f0:	86ba                	mv	a3,a4
    800143f2:	863e                	mv	a2,a5
    800143f4:	00006597          	auipc	a1,0x6
    800143f8:	5ec58593          	addi	a1,a1,1516 # 8001a9e0 <pow10.0+0x7b0>
    800143fc:	4511                	li	a0,4
    800143fe:	093000ef          	jal	ra,80014c90 <logf>
    logf(LOG_INFO, "  [RODATA]: 0x%08lx -> 0x%08lx\n", sym_start(rodata), sym_end(rodata));
    80014402:	00006797          	auipc	a5,0x6
    80014406:	bfe78793          	addi	a5,a5,-1026 # 8001a000 <SYSCALLS>
    8001440a:	00007717          	auipc	a4,0x7
    8001440e:	21b70713          	addi	a4,a4,539 # 8001b625 <_rodata_end>
    80014412:	86ba                	mv	a3,a4
    80014414:	863e                	mv	a2,a5
    80014416:	00006597          	auipc	a1,0x6
    8001441a:	5ea58593          	addi	a1,a1,1514 # 8001aa00 <pow10.0+0x7d0>
    8001441e:	4511                	li	a0,4
    80014420:	071000ef          	jal	ra,80014c90 <logf>
    logf(LOG_INFO, "  [DATA]  : 0x%08lx -> 0x%08lx\n", sym_start(data), sym_end(data));
    80014424:	00008797          	auipc	a5,0x8
    80014428:	bdc78793          	addi	a5,a5,-1060 # 8001c000 <VIRTIO_LAST_BAR>
    8001442c:	00008717          	auipc	a4,0x8
    80014430:	c2470713          	addi	a4,a4,-988 # 8001c050 <_data_end>
    80014434:	86ba                	mv	a3,a4
    80014436:	863e                	mv	a2,a5
    80014438:	00006597          	auipc	a1,0x6
    8001443c:	5e858593          	addi	a1,a1,1512 # 8001aa20 <pow10.0+0x7f0>
    80014440:	4511                	li	a0,4
    80014442:	04f000ef          	jal	ra,80014c90 <logf>
    logf(LOG_INFO, "  [STACK] : 0x%08lx -> 0x%08lx\n", sym_start(stack), sym_end(stack));
    80014446:	00009797          	auipc	a5,0x9
    8001444a:	bba78793          	addi	a5,a5,-1094 # 8001d000 <_stack_start>
    8001444e:	00011717          	auipc	a4,0x11
    80014452:	bb270713          	addi	a4,a4,-1102 # 80025000 <_heap_start>
    80014456:	86ba                	mv	a3,a4
    80014458:	863e                	mv	a2,a5
    8001445a:	00006597          	auipc	a1,0x6
    8001445e:	5e658593          	addi	a1,a1,1510 # 8001aa40 <pow10.0+0x810>
    80014462:	4511                	li	a0,4
    80014464:	02d000ef          	jal	ra,80014c90 <logf>
    logf(LOG_INFO, "  [HEAP]  : 0x%08lx -> 0x%08lx\n", sym_start(heap), sym_end(heap));
    80014468:	00011797          	auipc	a5,0x11
    8001446c:	b9878793          	addi	a5,a5,-1128 # 80025000 <_heap_start>
    80014470:	07ffc717          	auipc	a4,0x7ffc
    80014474:	b9070713          	addi	a4,a4,-1136 # 88010000 <_heap_end>
    80014478:	86ba                	mv	a3,a4
    8001447a:	863e                	mv	a2,a5
    8001447c:	00006597          	auipc	a1,0x6
    80014480:	5e458593          	addi	a1,a1,1508 # 8001aa60 <pow10.0+0x830>
    80014484:	4511                	li	a0,4
    80014486:	00b000ef          	jal	ra,80014c90 <logf>

    logf(LOG_INFO, "[[ HART MAPPINGS ]]\n");
    8001448a:	00006597          	auipc	a1,0x6
    8001448e:	5f658593          	addi	a1,a1,1526 # 8001aa80 <pow10.0+0x850>
    80014492:	4511                	li	a0,4
    80014494:	7fc000ef          	jal	ra,80014c90 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80014498:	fe042623          	sw	zero,-20(s0)
    8001449c:	a8bd                	j	8001451a <main+0x178>
        if (i == hart) {
    8001449e:	fec42703          	lw	a4,-20(s0)
    800144a2:	fdc42783          	lw	a5,-36(s0)
    800144a6:	2701                	sext.w	a4,a4
    800144a8:	2781                	sext.w	a5,a5
    800144aa:	02f71b63          	bne	a4,a5,800144e0 <main+0x13e>
            logf(LOG_INFO, "  [HART#%d]: %s (this HART).\n", i, hart_status_values[sbi_hart_get_status(i)]);
    800144ae:	fec42783          	lw	a5,-20(s0)
    800144b2:	853e                	mv	a0,a5
    800144b4:	195000ef          	jal	ra,80014e48 <sbi_hart_get_status>
    800144b8:	87aa                	mv	a5,a0
    800144ba:	00008717          	auipc	a4,0x8
    800144be:	b7670713          	addi	a4,a4,-1162 # 8001c030 <hart_status_values>
    800144c2:	078e                	slli	a5,a5,0x3
    800144c4:	97ba                	add	a5,a5,a4
    800144c6:	6398                	ld	a4,0(a5)
    800144c8:	fec42783          	lw	a5,-20(s0)
    800144cc:	86ba                	mv	a3,a4
    800144ce:	863e                	mv	a2,a5
    800144d0:	00006597          	auipc	a1,0x6
    800144d4:	5c858593          	addi	a1,a1,1480 # 8001aa98 <pow10.0+0x868>
    800144d8:	4511                	li	a0,4
    800144da:	7b6000ef          	jal	ra,80014c90 <logf>
    800144de:	a80d                	j	80014510 <main+0x16e>
        }
        else {
            logf(LOG_INFO, "  [HART#%d]: %s.\n", i, hart_status_values[sbi_hart_get_status(i)]);
    800144e0:	fec42783          	lw	a5,-20(s0)
    800144e4:	853e                	mv	a0,a5
    800144e6:	163000ef          	jal	ra,80014e48 <sbi_hart_get_status>
    800144ea:	87aa                	mv	a5,a0
    800144ec:	00008717          	auipc	a4,0x8
    800144f0:	b4470713          	addi	a4,a4,-1212 # 8001c030 <hart_status_values>
    800144f4:	078e                	slli	a5,a5,0x3
    800144f6:	97ba                	add	a5,a5,a4
    800144f8:	6398                	ld	a4,0(a5)
    800144fa:	fec42783          	lw	a5,-20(s0)
    800144fe:	86ba                	mv	a3,a4
    80014500:	863e                	mv	a2,a5
    80014502:	00006597          	auipc	a1,0x6
    80014506:	5b658593          	addi	a1,a1,1462 # 8001aab8 <pow10.0+0x888>
    8001450a:	4511                	li	a0,4
    8001450c:	784000ef          	jal	ra,80014c90 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80014510:	fec42783          	lw	a5,-20(s0)
    80014514:	2785                	addiw	a5,a5,1
    80014516:	fef42623          	sw	a5,-20(s0)
    8001451a:	fec42783          	lw	a5,-20(s0)
    8001451e:	0007871b          	sext.w	a4,a5
    80014522:	478d                	li	a5,3
    80014524:	f6e7fde3          	bgeu	a5,a4,8001449e <main+0xfc>
        }
    }

    // Initialize all submodules here, including PCI, VirtIO, Heap, etc.
    // Many will require the MMU, so write those functions first.
    init_systems();
    80014528:	cc3ff0ef          	jal	ra,800141ea <init_systems>

    // Now that all submodules are initialized, you need to schedule the init process
    // and the idle processes for each HART.
    logf(LOG_INFO, "Congratulations! You made it to the OS! Going back to sleep.\n");
    8001452c:	00006597          	auipc	a1,0x6
    80014530:	5a458593          	addi	a1,a1,1444 # 8001aad0 <pow10.0+0x8a0>
    80014534:	4511                	li	a0,4
    80014536:	75a000ef          	jal	ra,80014c90 <logf>
    logf(LOG_INFO, 
    8001453a:	00006597          	auipc	a1,0x6
    8001453e:	5d658593          	addi	a1,a1,1494 # 8001ab10 <pow10.0+0x8e0>
    80014542:	4511                	li	a0,4
    80014544:	74c000ef          	jal	ra,80014c90 <logf>
        "The logf function in the OS uses sbi_putchar(), so this means ECALLs from S-mode are "
        "working!\n");
    logf(LOG_INFO, 
    80014548:	00006597          	auipc	a1,0x6
    8001454c:	62858593          	addi	a1,a1,1576 # 8001ab70 <pow10.0+0x940>
    80014550:	4511                	li	a0,4
    80014552:	73e000ef          	jal	ra,80014c90 <logf>
    // Below is just a little shell that demonstrates the sbi_getchar and
    // how the console works.

    // This is defined above main()
#ifdef RUN_INTERNAL_CONSOLE
    console();
    80014556:	004000ef          	jal	ra,8001455a <console>

000000008001455a <console>:
#endif
}

#ifdef RUN_INTERNAL_CONSOLE
ATTR_NORET static void console(void)
{
    8001455a:	7179                	addi	sp,sp,-48
    8001455c:	f406                	sd	ra,40(sp)
    8001455e:	f022                	sd	s0,32(sp)
    80014560:	1800                	addi	s0,sp,48
    const int BUFFER_SIZE = 56;
    80014562:	03800313          	li	t1,56
    80014566:	fe642423          	sw	t1,-24(s0)
    int at                = 0;
    8001456a:	fe042623          	sw	zero,-20(s0)
    char input[BUFFER_SIZE];
    8001456e:	fe842303          	lw	t1,-24(s0)
    80014572:	137d                	addi	t1,t1,-1
    80014574:	fe643023          	sd	t1,-32(s0)
    80014578:	fe842303          	lw	t1,-24(s0)
    8001457c:	881a                	mv	a6,t1
    8001457e:	4881                	li	a7,0
    80014580:	03d85313          	srli	t1,a6,0x3d
    80014584:	00389693          	slli	a3,a7,0x3
    80014588:	00d366b3          	or	a3,t1,a3
    8001458c:	00381613          	slli	a2,a6,0x3
    80014590:	fe842683          	lw	a3,-24(s0)
    80014594:	8536                	mv	a0,a3
    80014596:	4581                	li	a1,0
    80014598:	03d55693          	srli	a3,a0,0x3d
    8001459c:	00359793          	slli	a5,a1,0x3
    800145a0:	8fd5                	or	a5,a5,a3
    800145a2:	00351713          	slli	a4,a0,0x3
    800145a6:	fe842783          	lw	a5,-24(s0)
    800145aa:	07bd                	addi	a5,a5,15
    800145ac:	8391                	srli	a5,a5,0x4
    800145ae:	0792                	slli	a5,a5,0x4
    800145b0:	40f10133          	sub	sp,sp,a5
    800145b4:	878a                	mv	a5,sp
    800145b6:	00078793          	mv	a5,a5
    800145ba:	fcf43c23          	sd	a5,-40(s0)
    logf(LOG_TEXT, "> ");
    800145be:	00006597          	auipc	a1,0x6
    800145c2:	61258593          	addi	a1,a1,1554 # 8001abd0 <pow10.0+0x9a0>
    800145c6:	4541                	li	a0,16
    800145c8:	6c8000ef          	jal	ra,80014c90 <logf>
    do {
        char c;
        // Recall that sbi_getchar() will return -1, 0xff, 255
        // if the receiver is empty.
        if ((c = sbi_getchar()) != 0xff) {
    800145cc:	05d000ef          	jal	ra,80014e28 <sbi_getchar>
    800145d0:	87aa                	mv	a5,a0
    800145d2:	fcf40ba3          	sb	a5,-41(s0)
    800145d6:	fd744783          	lbu	a5,-41(s0)
    800145da:	0ff7f713          	andi	a4,a5,255
    800145de:	0ff00793          	li	a5,255
    800145e2:	22f70263          	beq	a4,a5,80014806 <console+0x2ac>
            if (c == '\r' || c == '\n') {
    800145e6:	fd744783          	lbu	a5,-41(s0)
    800145ea:	0ff7f713          	andi	a4,a5,255
    800145ee:	47b5                	li	a5,13
    800145f0:	00f70963          	beq	a4,a5,80014602 <console+0xa8>
    800145f4:	fd744783          	lbu	a5,-41(s0)
    800145f8:	0ff7f713          	andi	a4,a5,255
    800145fc:	47a9                	li	a5,10
    800145fe:	0cf71c63          	bne	a4,a5,800146d6 <console+0x17c>
                if (at > 0) {
    80014602:	fec42783          	lw	a5,-20(s0)
    80014606:	2781                	sext.w	a5,a5
    80014608:	0af05f63          	blez	a5,800146c6 <console+0x16c>
                    input[at] = '\0';
    8001460c:	fd843703          	ld	a4,-40(s0)
    80014610:	fec42783          	lw	a5,-20(s0)
    80014614:	97ba                	add	a5,a5,a4
    80014616:	00078023          	sb	zero,0(a5)
                    if (!strcmp(input, "quit")) {
    8001461a:	00006597          	auipc	a1,0x6
    8001461e:	5be58593          	addi	a1,a1,1470 # 8001abd8 <pow10.0+0x9a8>
    80014622:	fd843503          	ld	a0,-40(s0)
    80014626:	11c020ef          	jal	ra,80016742 <strcmp>
    8001462a:	87aa                	mv	a5,a0
    8001462c:	eb99                	bnez	a5,80014642 <console+0xe8>
                        logf(LOG_TEXT, "\nShutting down...\n\n");
    8001462e:	00006597          	auipc	a1,0x6
    80014632:	5b258593          	addi	a1,a1,1458 # 8001abe0 <pow10.0+0x9b0>
    80014636:	4541                	li	a0,16
    80014638:	658000ef          	jal	ra,80014c90 <logf>
                        sbi_poweroff();
    8001463c:	09d000ef          	jal	ra,80014ed8 <sbi_poweroff>
    80014640:	a049                	j	800146c2 <console+0x168>
                    }
                    else if (!strcmp(input, "fatal")) {
    80014642:	00006597          	auipc	a1,0x6
    80014646:	5b658593          	addi	a1,a1,1462 # 8001abf8 <pow10.0+0x9c8>
    8001464a:	fd843503          	ld	a0,-40(s0)
    8001464e:	0f4020ef          	jal	ra,80016742 <strcmp>
    80014652:	87aa                	mv	a5,a0
    80014654:	eb95                	bnez	a5,80014688 <console+0x12e>
                        logf(LOG_TEXT, "\n");
    80014656:	00006597          	auipc	a1,0x6
    8001465a:	5aa58593          	addi	a1,a1,1450 # 8001ac00 <pow10.0+0x9d0>
    8001465e:	4541                	li	a0,16
    80014660:	630000ef          	jal	ra,80014c90 <logf>
                        fatalf("Testing fatal error @ %lu.\nHanging HART...\n", sbi_rtc_get_time());
    80014664:	119000ef          	jal	ra,80014f7c <sbi_rtc_get_time>
    80014668:	87aa                	mv	a5,a0
    8001466a:	85be                	mv	a1,a5
    8001466c:	00006517          	auipc	a0,0x6
    80014670:	59c50513          	addi	a0,a0,1436 # 8001ac08 <pow10.0+0x9d8>
    80014674:	6d0000ef          	jal	ra,80014d44 <fatalf>
                        logf(LOG_ERROR, "If I get here, fatal didn't work :'(.\n");
    80014678:	00006597          	auipc	a1,0x6
    8001467c:	5c058593          	addi	a1,a1,1472 # 8001ac38 <pow10.0+0xa08>
    80014680:	4505                	li	a0,1
    80014682:	60e000ef          	jal	ra,80014c90 <logf>
    80014686:	a835                	j	800146c2 <console+0x168>
                    }
                    else if (!strcmp(input, "heap")) {
    80014688:	00006597          	auipc	a1,0x6
    8001468c:	5d858593          	addi	a1,a1,1496 # 8001ac60 <pow10.0+0xa30>
    80014690:	fd843503          	ld	a0,-40(s0)
    80014694:	0ae020ef          	jal	ra,80016742 <strcmp>
    80014698:	87aa                	mv	a5,a0
    8001469a:	eb99                	bnez	a5,800146b0 <console+0x156>
                        logf(LOG_TEXT, "\n");
    8001469c:	00006597          	auipc	a1,0x6
    800146a0:	56458593          	addi	a1,a1,1380 # 8001ac00 <pow10.0+0x9d0>
    800146a4:	4541                	li	a0,16
    800146a6:	5ea000ef          	jal	ra,80014c90 <logf>
                        void heap_print_stats(void);
                        heap_print_stats();
    800146aa:	913ff0ef          	jal	ra,80013fbc <heap_print_stats>
    800146ae:	a811                	j	800146c2 <console+0x168>
                    }
                    else {
                        logf(LOG_TEXT, "\nUnknown command '%s'\n", input);
    800146b0:	fd843603          	ld	a2,-40(s0)
    800146b4:	00006597          	auipc	a1,0x6
    800146b8:	5b458593          	addi	a1,a1,1460 # 8001ac68 <pow10.0+0xa38>
    800146bc:	4541                	li	a0,16
    800146be:	5d2000ef          	jal	ra,80014c90 <logf>
                    }
                    at = 0;
    800146c2:	fe042623          	sw	zero,-20(s0)
                }
                logf(LOG_TEXT, "\n> ");
    800146c6:	00006597          	auipc	a1,0x6
    800146ca:	5ba58593          	addi	a1,a1,1466 # 8001ac80 <pow10.0+0xa50>
    800146ce:	4541                	li	a0,16
    800146d0:	5c0000ef          	jal	ra,80014c90 <logf>
    800146d4:	aa2d                	j	8001480e <console+0x2b4>
            }
            else if (c == 127) {
    800146d6:	fd744783          	lbu	a5,-41(s0)
    800146da:	0ff7f713          	andi	a4,a5,255
    800146de:	07f00793          	li	a5,127
    800146e2:	02f71463          	bne	a4,a5,8001470a <console+0x1b0>
                // BACKSPACE
                if (at > 0) {
    800146e6:	fec42783          	lw	a5,-20(s0)
    800146ea:	2781                	sext.w	a5,a5
    800146ec:	eef050e3          	blez	a5,800145cc <console+0x72>
                    logf(LOG_TEXT, "\b \b");
    800146f0:	00006597          	auipc	a1,0x6
    800146f4:	59858593          	addi	a1,a1,1432 # 8001ac88 <pow10.0+0xa58>
    800146f8:	4541                	li	a0,16
    800146fa:	596000ef          	jal	ra,80014c90 <logf>
                    at -= 1;
    800146fe:	fec42783          	lw	a5,-20(s0)
    80014702:	37fd                	addiw	a5,a5,-1
    80014704:	fef42623          	sw	a5,-20(s0)
    80014708:	b5d1                	j	800145cc <console+0x72>
                }
            }
            else if (c == 0x1B) {
    8001470a:	fd744783          	lbu	a5,-41(s0)
    8001470e:	0ff7f713          	andi	a4,a5,255
    80014712:	47ed                	li	a5,27
    80014714:	0af71663          	bne	a4,a5,800147c0 <console+0x266>
                // Escape sequence
                char esc1 = sbi_getchar();
    80014718:	710000ef          	jal	ra,80014e28 <sbi_getchar>
    8001471c:	87aa                	mv	a5,a0
    8001471e:	fcf40b23          	sb	a5,-42(s0)
                char esc2 = sbi_getchar();
    80014722:	706000ef          	jal	ra,80014e28 <sbi_getchar>
    80014726:	87aa                	mv	a5,a0
    80014728:	fcf40aa3          	sb	a5,-43(s0)
                if (esc1 == 0x5B) {
    8001472c:	fd644783          	lbu	a5,-42(s0)
    80014730:	0ff7f713          	andi	a4,a5,255
    80014734:	05b00793          	li	a5,91
    80014738:	0cf71a63          	bne	a4,a5,8001480c <console+0x2b2>
                    switch (esc2) {
    8001473c:	fd544783          	lbu	a5,-43(s0)
    80014740:	2781                	sext.w	a5,a5
    80014742:	86be                	mv	a3,a5
    80014744:	04400713          	li	a4,68
    80014748:	06e68463          	beq	a3,a4,800147b0 <console+0x256>
    8001474c:	86be                	mv	a3,a5
    8001474e:	04400713          	li	a4,68
    80014752:	e6d74de3          	blt	a4,a3,800145cc <console+0x72>
    80014756:	86be                	mv	a3,a5
    80014758:	04300713          	li	a4,67
    8001475c:	04e68263          	beq	a3,a4,800147a0 <console+0x246>
    80014760:	86be                	mv	a3,a5
    80014762:	04300713          	li	a4,67
    80014766:	e6d743e3          	blt	a4,a3,800145cc <console+0x72>
    8001476a:	86be                	mv	a3,a5
    8001476c:	04100713          	li	a4,65
    80014770:	00e68863          	beq	a3,a4,80014780 <console+0x226>
    80014774:	873e                	mv	a4,a5
    80014776:	04200793          	li	a5,66
    8001477a:	00f70b63          	beq	a4,a5,80014790 <console+0x236>
    8001477e:	a841                	j	8001480e <console+0x2b4>
                        case 0x41:
                            logf(LOG_INFO, "UP\n");
    80014780:	00006597          	auipc	a1,0x6
    80014784:	51058593          	addi	a1,a1,1296 # 8001ac90 <pow10.0+0xa60>
    80014788:	4511                	li	a0,4
    8001478a:	506000ef          	jal	ra,80014c90 <logf>
                            break;
    8001478e:	a041                	j	8001480e <console+0x2b4>
                        case 0x42:
                            logf(LOG_INFO, "DOWN\n");
    80014790:	00006597          	auipc	a1,0x6
    80014794:	50858593          	addi	a1,a1,1288 # 8001ac98 <pow10.0+0xa68>
    80014798:	4511                	li	a0,4
    8001479a:	4f6000ef          	jal	ra,80014c90 <logf>
                            break;
    8001479e:	a885                	j	8001480e <console+0x2b4>
                        case 0x43:
                            logf(LOG_INFO, "RIGHT\n");
    800147a0:	00006597          	auipc	a1,0x6
    800147a4:	50058593          	addi	a1,a1,1280 # 8001aca0 <pow10.0+0xa70>
    800147a8:	4511                	li	a0,4
    800147aa:	4e6000ef          	jal	ra,80014c90 <logf>
                            break;
    800147ae:	a085                	j	8001480e <console+0x2b4>
                        case 0x44:
                            logf(LOG_INFO, "LEFT\n");
    800147b0:	00006597          	auipc	a1,0x6
    800147b4:	4f858593          	addi	a1,a1,1272 # 8001aca8 <pow10.0+0xa78>
    800147b8:	4511                	li	a0,4
    800147ba:	4d6000ef          	jal	ra,80014c90 <logf>
                            break;
    800147be:	a881                	j	8001480e <console+0x2b4>
                    }
                }
            }
            else {
                if (at < (BUFFER_SIZE - 1)) {
    800147c0:	fe842783          	lw	a5,-24(s0)
    800147c4:	37fd                	addiw	a5,a5,-1
    800147c6:	0007871b          	sext.w	a4,a5
    800147ca:	fec42783          	lw	a5,-20(s0)
    800147ce:	2781                	sext.w	a5,a5
    800147d0:	dee7dee3          	bge	a5,a4,800145cc <console+0x72>
                    input[at++] = c;
    800147d4:	fec42783          	lw	a5,-20(s0)
    800147d8:	0017871b          	addiw	a4,a5,1
    800147dc:	fee42623          	sw	a4,-20(s0)
    800147e0:	fd843703          	ld	a4,-40(s0)
    800147e4:	97ba                	add	a5,a5,a4
    800147e6:	fd744703          	lbu	a4,-41(s0)
    800147ea:	00e78023          	sb	a4,0(a5)
                    logf(LOG_TEXT, "%c", c);
    800147ee:	fd744783          	lbu	a5,-41(s0)
    800147f2:	2781                	sext.w	a5,a5
    800147f4:	863e                	mv	a2,a5
    800147f6:	00006597          	auipc	a1,0x6
    800147fa:	4ba58593          	addi	a1,a1,1210 # 8001acb0 <pow10.0+0xa80>
    800147fe:	4541                	li	a0,16
    80014800:	490000ef          	jal	ra,80014c90 <logf>
    80014804:	b3e1                	j	800145cc <console+0x72>
            }
        }
        else {
            // We can WFI here since interrupts are enabled
            // for the UART.
            WFI();
    80014806:	10500073          	wfi
    8001480a:	b3c9                	j	800145cc <console+0x72>
                }
    8001480c:	0001                	nop
    do {
    8001480e:	bb7d                	j	800145cc <console+0x72>

0000000080014810 <process_new>:
#define STACK_PAGES 2
#define STACK_SIZE  (STACK_PAGES * PAGE_SIZE)
#define STACK_TOP   0xfffffffc0ffee000UL

struct process *process_new(process_mode mode)
{
    80014810:	715d                	addi	sp,sp,-80
    80014812:	e486                	sd	ra,72(sp)
    80014814:	e0a2                	sd	s0,64(sp)
    80014816:	0880                	addi	s0,sp,80
    80014818:	87aa                	mv	a5,a0
    8001481a:	faf42e23          	sw	a5,-68(s0)
    struct process *p       = (struct process *)kzalloc(sizeof(*p));
    8001481e:	29000593          	li	a1,656
    80014822:	4505                	li	a0,1
    80014824:	851ff0ef          	jal	ra,80014074 <kcalloc>
    80014828:	fea43023          	sd	a0,-32(s0)

    p->hart                 = -1U;
    8001482c:	fe043783          	ld	a5,-32(s0)
    80014830:	577d                	li	a4,-1
    80014832:	c3d8                	sw	a4,4(a5)
    p->ptable               = mmu_table_create();
    80014834:	947fe0ef          	jal	ra,8001317a <mmu_table_create>
    80014838:	872a                	mv	a4,a0
    8001483a:	fe043783          	ld	a5,-32(s0)
    8001483e:	26e7bc23          	sd	a4,632(a5)
    p->state                = PS_WAITING;
    80014842:	fe043783          	ld	a5,-32(s0)
    80014846:	4705                	li	a4,1
    80014848:	c7d8                	sw	a4,12(a5)
    // p->pid               = fill_in_with_unique_pid

    // Set the trap frame and create all necessary structures.
    // p->frame.sepc = filled_in_by_ELF_loader
    p->frame.sstatus        = SSTATUS_SPP_BOOL(mode) | SSTATUS_FS_INITIAL | SSTATUS_SPIE;
    8001484a:	fbc42783          	lw	a5,-68(s0)
    8001484e:	2781                	sext.w	a5,a5
    80014850:	c789                	beqz	a5,8001485a <process_new+0x4a>
    80014852:	6789                	lui	a5,0x2
    80014854:	12078793          	addi	a5,a5,288 # 2120 <i+0x2100>
    80014858:	a021                	j	80014860 <process_new+0x50>
    8001485a:	6789                	lui	a5,0x2
    8001485c:	02078793          	addi	a5,a5,32 # 2020 <i+0x2000>
    80014860:	fe043703          	ld	a4,-32(s0)
    80014864:	24f73023          	sd	a5,576(a4)
    p->frame.sie            = SIE_SEIE | SIE_SSIE | SIE_STIE;
    80014868:	fe043783          	ld	a5,-32(s0)
    8001486c:	22200713          	li	a4,546
    80014870:	24e7b423          	sd	a4,584(a5)
    p->frame.satp           = SATP(p->ptable, p->pid);
    80014874:	fe043783          	ld	a5,-32(s0)
    80014878:	2787b783          	ld	a5,632(a5)
    8001487c:	00c7d713          	srli	a4,a5,0xc
    80014880:	57fd                	li	a5,-1
    80014882:	83d1                	srli	a5,a5,0x14
    80014884:	8f7d                	and	a4,a4,a5
    80014886:	fe043783          	ld	a5,-32(s0)
    8001488a:	0007d783          	lhu	a5,0(a5)
    8001488e:	17b2                	slli	a5,a5,0x2c
    80014890:	8f5d                	or	a4,a4,a5
    80014892:	57fd                	li	a5,-1
    80014894:	17fe                	slli	a5,a5,0x3f
    80014896:	8f5d                	or	a4,a4,a5
    80014898:	fe043783          	ld	a5,-32(s0)
    8001489c:	24e7b823          	sd	a4,592(a5)
    p->frame.sscratch       = (unsigned long)&p->frame;
    800148a0:	fe043783          	ld	a5,-32(s0)
    800148a4:	03878793          	addi	a5,a5,56
    800148a8:	873e                	mv	a4,a5
    800148aa:	fe043783          	ld	a5,-32(s0)
    800148ae:	24e7bc23          	sd	a4,600(a5)
    p->frame.stvec          = trampoline_trap_start;
    800148b2:	00007797          	auipc	a5,0x7
    800148b6:	d5b78793          	addi	a5,a5,-677 # 8001b60d <trampoline_trap_start>
    800148ba:	6398                	ld	a4,0(a5)
    800148bc:	fe043783          	ld	a5,-32(s0)
    800148c0:	26e7b023          	sd	a4,608(a5)
    p->frame.trap_satp      = SATP_KERNEL;
    800148c4:	00004797          	auipc	a5,0x4
    800148c8:	73c78793          	addi	a5,a5,1852 # 80019000 <kernel_mmu_table>
    800148cc:	639c                	ld	a5,0(a5)
    800148ce:	00c7d713          	srli	a4,a5,0xc
    800148d2:	57fd                	li	a5,-1
    800148d4:	83d1                	srli	a5,a5,0x14
    800148d6:	8f7d                	and	a4,a4,a5
    800148d8:	8ffff7b7          	lui	a5,0x8ffff
    800148dc:	1782                	slli	a5,a5,0x20
    800148de:	8f5d                	or	a4,a4,a5
    800148e0:	fe043783          	ld	a5,-32(s0)
    800148e4:	26e7b423          	sd	a4,616(a5) # ffffffff8ffff268 <_heap_end+0xffffffff07fef268>
    // p->frame.trap_stack = filled_in_by_SCHEDULER

    p->fds = vector_new_with_capacity(5);
    800148e8:	4515                	li	a0,5
    800148ea:	48c020ef          	jal	ra,80016d76 <vector_new_with_capacity>
    800148ee:	872a                	mv	a4,a0
    800148f0:	fe043783          	ld	a5,-32(s0)
    800148f4:	28e7b423          	sd	a4,648(a5)
    p->pages = list_new();
    800148f8:	37e010ef          	jal	ra,80015c76 <list_new>
    800148fc:	872a                	mv	a4,a0
    800148fe:	fe043783          	ld	a5,-32(s0)
    80014902:	28e7b023          	sd	a4,640(a5)

    // We need to keep track of the stack itself in the kernel, so we can free it
    // later, but the user process will interact with the stack via the SP register.
    p->frame.xregs[XREG_SP] = STACK_TOP + STACK_SIZE;
    80014906:	fe043783          	ld	a5,-32(s0)
    8001490a:	c0fff737          	lui	a4,0xc0fff
    8001490e:	0712                	slli	a4,a4,0x4
    80014910:	e7b8                	sd	a4,72(a5)
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    80014912:	fe043423          	sd	zero,-24(s0)
    80014916:	a085                	j	80014976 <process_new+0x166>
        void *stack = page_zalloc();
    80014918:	4505                	li	a0,1
    8001491a:	7db000ef          	jal	ra,800158f4 <page_znalloc>
    8001491e:	fca43423          	sd	a0,-56(s0)
        list_add_ptr(p->pages, stack);
    80014922:	fe043783          	ld	a5,-32(s0)
    80014926:	2807b783          	ld	a5,640(a5)
    8001492a:	fc843703          	ld	a4,-56(s0)
    8001492e:	85ba                	mv	a1,a4
    80014930:	853e                	mv	a0,a5
    80014932:	374010ef          	jal	ra,80015ca6 <list_add>
        mmu_map(p->ptable, STACK_TOP + PAGE_SIZE * i, (unsigned long)stack,
    80014936:	fe043783          	ld	a5,-32(s0)
    8001493a:	2787b503          	ld	a0,632(a5)
    8001493e:	fe843783          	ld	a5,-24(s0)
    80014942:	00c79713          	slli	a4,a5,0xc
    80014946:	ffe087b7          	lui	a5,0xffe08
    8001494a:	17dd                	addi	a5,a5,-9
    8001494c:	07b6                	slli	a5,a5,0xd
    8001494e:	00f705b3          	add	a1,a4,a5
    80014952:	fc843603          	ld	a2,-56(s0)
    80014956:	fbc42783          	lw	a5,-68(s0)
    8001495a:	2781                	sext.w	a5,a5
    8001495c:	e399                	bnez	a5,80014962 <process_new+0x152>
    8001495e:	47c1                	li	a5,16
    80014960:	a011                	j	80014964 <process_new+0x154>
    80014962:	4799                	li	a5,6
    80014964:	873e                	mv	a4,a5
    80014966:	4681                	li	a3,0
    80014968:	86dfe0ef          	jal	ra,800131d4 <mmu_map>
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    8001496c:	fe843783          	ld	a5,-24(s0)
    80014970:	0785                	addi	a5,a5,1
    80014972:	fef43423          	sd	a5,-24(s0)
    80014976:	fe843703          	ld	a4,-24(s0)
    8001497a:	4785                	li	a5,1
    8001497c:	f8e7fee3          	bgeu	a5,a4,80014918 <process_new+0x108>
    }

    // We need to map certain kernel portions into the user's page table. Notice
    // that the PB_USER is NOT set, but it needs to be there because we need to execute
    // the trap/start instructions while using the user's page table until we change SATP.
    unsigned long trans_trampoline_start = mmu_translate(kernel_mmu_table, trampoline_thread_start);
    80014980:	00004797          	auipc	a5,0x4
    80014984:	68078793          	addi	a5,a5,1664 # 80019000 <kernel_mmu_table>
    80014988:	6398                	ld	a4,0(a5)
    8001498a:	00007797          	auipc	a5,0x7
    8001498e:	c6b78793          	addi	a5,a5,-917 # 8001b5f5 <trampoline_thread_start>
    80014992:	639c                	ld	a5,0(a5)
    80014994:	85be                	mv	a1,a5
    80014996:	853a                	mv	a0,a4
    80014998:	a63fe0ef          	jal	ra,800133fa <mmu_translate>
    8001499c:	fca43c23          	sd	a0,-40(s0)
    unsigned long trans_trampoline_trap  = mmu_translate(kernel_mmu_table, trampoline_trap_start);
    800149a0:	00004797          	auipc	a5,0x4
    800149a4:	66078793          	addi	a5,a5,1632 # 80019000 <kernel_mmu_table>
    800149a8:	6398                	ld	a4,0(a5)
    800149aa:	00007797          	auipc	a5,0x7
    800149ae:	c6378793          	addi	a5,a5,-925 # 8001b60d <trampoline_trap_start>
    800149b2:	639c                	ld	a5,0(a5)
    800149b4:	85be                	mv	a1,a5
    800149b6:	853a                	mv	a0,a4
    800149b8:	a43fe0ef          	jal	ra,800133fa <mmu_translate>
    800149bc:	fca43823          	sd	a0,-48(s0)
    mmu_map(p->ptable, trampoline_thread_start, trans_trampoline_start, MMU_LEVEL_4K,
    800149c0:	fe043783          	ld	a5,-32(s0)
    800149c4:	2787b503          	ld	a0,632(a5)
    800149c8:	00007797          	auipc	a5,0x7
    800149cc:	c2d78793          	addi	a5,a5,-979 # 8001b5f5 <trampoline_thread_start>
    800149d0:	639c                	ld	a5,0(a5)
    800149d2:	4729                	li	a4,10
    800149d4:	4681                	li	a3,0
    800149d6:	fd843603          	ld	a2,-40(s0)
    800149da:	85be                	mv	a1,a5
    800149dc:	ff8fe0ef          	jal	ra,800131d4 <mmu_map>
            PB_READ | PB_EXECUTE);
    mmu_map(p->ptable, trampoline_trap_start, trans_trampoline_trap, MMU_LEVEL_4K,
    800149e0:	fe043783          	ld	a5,-32(s0)
    800149e4:	2787b503          	ld	a0,632(a5)
    800149e8:	00007797          	auipc	a5,0x7
    800149ec:	c2578793          	addi	a5,a5,-987 # 8001b60d <trampoline_trap_start>
    800149f0:	639c                	ld	a5,0(a5)
    800149f2:	4729                	li	a4,10
    800149f4:	4681                	li	a3,0
    800149f6:	fd043603          	ld	a2,-48(s0)
    800149fa:	85be                	mv	a1,a5
    800149fc:	fd8fe0ef          	jal	ra,800131d4 <mmu_map>
            PB_READ | PB_EXECUTE);

    SFENCE_ASID(p->pid);
    80014a00:	fe043783          	ld	a5,-32(s0)
    80014a04:	0007d783          	lhu	a5,0(a5)
    80014a08:	12f00073          	sfence.vma	zero,a5

    return p;
    80014a0c:	fe043783          	ld	a5,-32(s0)
}
    80014a10:	853e                	mv	a0,a5
    80014a12:	60a6                	ld	ra,72(sp)
    80014a14:	6406                	ld	s0,64(sp)
    80014a16:	6161                	addi	sp,sp,80
    80014a18:	8082                	ret

0000000080014a1a <process_free>:

int process_free(struct process *p)
{
    80014a1a:	7179                	addi	sp,sp,-48
    80014a1c:	f406                	sd	ra,40(sp)
    80014a1e:	f022                	sd	s0,32(sp)
    80014a20:	1800                	addi	s0,sp,48
    80014a22:	fca43c23          	sd	a0,-40(s0)
    struct ListElem *e;
    unsigned int i;

    if (!p || !ON_HART_NONE(p)) {
    80014a26:	fd843783          	ld	a5,-40(s0)
    80014a2a:	cb81                	beqz	a5,80014a3a <process_free+0x20>
    80014a2c:	fd843783          	ld	a5,-40(s0)
    80014a30:	43dc                	lw	a5,4(a5)
    80014a32:	873e                	mv	a4,a5
    80014a34:	57fd                	li	a5,-1
    80014a36:	00f70463          	beq	a4,a5,80014a3e <process_free+0x24>
        // Process is invalid or running somewhere, or this is stale.
        return -1;
    80014a3a:	57fd                	li	a5,-1
    80014a3c:	a8d1                	j	80014b10 <process_free+0xf6>
    }

    // Free all resources allocated to the process.

    if (p->ptable) {
    80014a3e:	fd843783          	ld	a5,-40(s0)
    80014a42:	2787b783          	ld	a5,632(a5)
    80014a46:	cf91                	beqz	a5,80014a62 <process_free+0x48>
        mmu_free(p->ptable);
    80014a48:	fd843783          	ld	a5,-40(s0)
    80014a4c:	2787b783          	ld	a5,632(a5)
    80014a50:	853e                	mv	a0,a5
    80014a52:	927fe0ef          	jal	ra,80013378 <mmu_free>
        SFENCE_ASID(p->pid);
    80014a56:	fd843783          	ld	a5,-40(s0)
    80014a5a:	0007d783          	lhu	a5,0(a5)
    80014a5e:	12f00073          	sfence.vma	zero,a5
    }

    if (p->pages) {
    80014a62:	fd843783          	ld	a5,-40(s0)
    80014a66:	2807b783          	ld	a5,640(a5)
    80014a6a:	cbb9                	beqz	a5,80014ac0 <process_free+0xa6>
        list_for_each(p->pages, e) {
    80014a6c:	fd843783          	ld	a5,-40(s0)
    80014a70:	2807b783          	ld	a5,640(a5)
    80014a74:	853e                	mv	a0,a5
    80014a76:	650010ef          	jal	ra,800160c6 <list_elem_start_ascending>
    80014a7a:	fea43423          	sd	a0,-24(s0)
    80014a7e:	a839                	j	80014a9c <process_free+0x82>
            page_free(list_elem_value_ptr(e));
    80014a80:	fe843503          	ld	a0,-24(s0)
    80014a84:	6a2010ef          	jal	ra,80016126 <list_elem_value>
    80014a88:	87aa                	mv	a5,a0
    80014a8a:	853e                	mv	a0,a5
    80014a8c:	6bd000ef          	jal	ra,80015948 <page_free>
        list_for_each(p->pages, e) {
    80014a90:	fe843503          	ld	a0,-24(s0)
    80014a94:	67a010ef          	jal	ra,8001610e <list_elem_prev>
    80014a98:	fea43423          	sd	a0,-24(s0)
    80014a9c:	fd843783          	ld	a5,-40(s0)
    80014aa0:	2807b783          	ld	a5,640(a5)
    80014aa4:	fe843583          	ld	a1,-24(s0)
    80014aa8:	853e                	mv	a0,a5
    80014aaa:	58e010ef          	jal	ra,80016038 <list_elem_valid>
    80014aae:	87aa                	mv	a5,a0
    80014ab0:	fbe1                	bnez	a5,80014a80 <process_free+0x66>
        }
        list_free(p->pages);
    80014ab2:	fd843783          	ld	a5,-40(s0)
    80014ab6:	2807b783          	ld	a5,640(a5)
    80014aba:	853e                	mv	a0,a5
    80014abc:	524010ef          	jal	ra,80015fe0 <list_free>
    }

    if (p->fds) {
    80014ac0:	fd843783          	ld	a5,-40(s0)
    80014ac4:	2887b783          	ld	a5,648(a5)
    80014ac8:	cf9d                	beqz	a5,80014b06 <process_free+0xec>
        for (i = 0;i < vector_size(p->fds);i += 1) {
    80014aca:	fe042223          	sw	zero,-28(s0)
    80014ace:	a031                	j	80014ada <process_free+0xc0>
    80014ad0:	fe442783          	lw	a5,-28(s0)
    80014ad4:	2785                	addiw	a5,a5,1
    80014ad6:	fef42223          	sw	a5,-28(s0)
    80014ada:	fd843783          	ld	a5,-40(s0)
    80014ade:	2887b783          	ld	a5,648(a5)
    80014ae2:	853e                	mv	a0,a5
    80014ae4:	381020ef          	jal	ra,80017664 <vector_size>
    80014ae8:	87aa                	mv	a5,a0
    80014aea:	0007871b          	sext.w	a4,a5
    80014aee:	fe442783          	lw	a5,-28(s0)
    80014af2:	2781                	sext.w	a5,a5
    80014af4:	fce7eee3          	bltu	a5,a4,80014ad0 <process_free+0xb6>
            // Clean up any file descriptor stuff here.
        }
        vector_free(p->fds);
    80014af8:	fd843783          	ld	a5,-40(s0)
    80014afc:	2887b783          	ld	a5,648(a5)
    80014b00:	853e                	mv	a0,a5
    80014b02:	393020ef          	jal	ra,80017694 <vector_free>
    }
    

    kfree(p);
    80014b06:	fd843503          	ld	a0,-40(s0)
    80014b0a:	dccff0ef          	jal	ra,800140d6 <kfree>

    return 0;
    80014b0e:	4781                	li	a5,0
}
    80014b10:	853e                	mv	a0,a5
    80014b12:	70a2                	ld	ra,40(sp)
    80014b14:	7402                	ld	s0,32(sp)
    80014b16:	6145                	addi	sp,sp,48
    80014b18:	8082                	ret

0000000080014b1a <process_run>:

bool process_run(struct process *p, unsigned int hart)
{
    80014b1a:	7179                	addi	sp,sp,-48
    80014b1c:	f406                	sd	ra,40(sp)
    80014b1e:	f022                	sd	s0,32(sp)
    80014b20:	1800                	addi	s0,sp,48
    80014b22:	fca43c23          	sd	a0,-40(s0)
    80014b26:	87ae                	mv	a5,a1
    80014b28:	fcf42a23          	sw	a5,-44(s0)
    void process_asm_run(void *frame_addr);
    unsigned int me = sbi_whoami();
    80014b2c:	470000ef          	jal	ra,80014f9c <sbi_whoami>
    80014b30:	87aa                	mv	a5,a0
    80014b32:	fef42623          	sw	a5,-20(s0)

    if (me == hart) {
    80014b36:	fec42703          	lw	a4,-20(s0)
    80014b3a:	fd442783          	lw	a5,-44(s0)
    80014b3e:	2701                	sext.w	a4,a4
    80014b40:	2781                	sext.w	a5,a5
    80014b42:	00f71b63          	bne	a4,a5,80014b58 <process_run+0x3e>
        process_asm_run(&p->frame);
    80014b46:	fd843783          	ld	a5,-40(s0)
    80014b4a:	03878793          	addi	a5,a5,56
    80014b4e:	853e                	mv	a0,a5
    80014b50:	7e5000ef          	jal	ra,80015b34 <process_asm_run>
        // process_asm_run should not return, but if it does
        // something went wrong.
        return false;
    80014b54:	4781                	li	a5,0
    80014b56:	a815                	j	80014b8a <process_run+0x70>
    }

    return sbi_hart_start(hart, trampoline_thread_start, (unsigned long)&p->frame, p->frame.satp);
    80014b58:	00007797          	auipc	a5,0x7
    80014b5c:	a9d78793          	addi	a5,a5,-1379 # 8001b5f5 <trampoline_thread_start>
    80014b60:	6398                	ld	a4,0(a5)
    80014b62:	fd843783          	ld	a5,-40(s0)
    80014b66:	03878793          	addi	a5,a5,56
    80014b6a:	863e                	mv	a2,a5
    80014b6c:	fd843783          	ld	a5,-40(s0)
    80014b70:	2507b683          	ld	a3,592(a5)
    80014b74:	fd442783          	lw	a5,-44(s0)
    80014b78:	85ba                	mv	a1,a4
    80014b7a:	853e                	mv	a0,a5
    80014b7c:	2f8000ef          	jal	ra,80014e74 <sbi_hart_start>
    80014b80:	87aa                	mv	a5,a0
    80014b82:	00f037b3          	snez	a5,a5
    80014b86:	0ff7f793          	andi	a5,a5,255
}
    80014b8a:	853e                	mv	a0,a5
    80014b8c:	70a2                	ld	ra,40(sp)
    80014b8e:	7402                	ld	s0,32(sp)
    80014b90:	6145                	addi	sp,sp,48
    80014b92:	8082                	ret

0000000080014b94 <lgprefix>:
#include <stdarg.h>
#include <csr.h>

static int k_log_level = 0xFFF;

static const char *lgprefix(log_type lt) {
    80014b94:	1101                	addi	sp,sp,-32
    80014b96:	ec22                	sd	s0,24(sp)
    80014b98:	1000                	addi	s0,sp,32
    80014b9a:	87aa                	mv	a5,a0
    80014b9c:	fef42623          	sw	a5,-20(s0)
    switch (lt) {
    80014ba0:	fec42783          	lw	a5,-20(s0)
    80014ba4:	0007871b          	sext.w	a4,a5
    80014ba8:	47a1                	li	a5,8
    80014baa:	06f70463          	beq	a4,a5,80014c12 <lgprefix+0x7e>
    80014bae:	fec42783          	lw	a5,-20(s0)
    80014bb2:	0007871b          	sext.w	a4,a5
    80014bb6:	47a1                	li	a5,8
    80014bb8:	06e7e263          	bltu	a5,a4,80014c1c <lgprefix+0x88>
    80014bbc:	fec42783          	lw	a5,-20(s0)
    80014bc0:	0007871b          	sext.w	a4,a5
    80014bc4:	4791                	li	a5,4
    80014bc6:	02f70c63          	beq	a4,a5,80014bfe <lgprefix+0x6a>
    80014bca:	fec42783          	lw	a5,-20(s0)
    80014bce:	0007871b          	sext.w	a4,a5
    80014bd2:	4791                	li	a5,4
    80014bd4:	04e7e463          	bltu	a5,a4,80014c1c <lgprefix+0x88>
    80014bd8:	fec42783          	lw	a5,-20(s0)
    80014bdc:	0007871b          	sext.w	a4,a5
    80014be0:	4785                	li	a5,1
    80014be2:	02f70363          	beq	a4,a5,80014c08 <lgprefix+0x74>
    80014be6:	fec42783          	lw	a5,-20(s0)
    80014bea:	0007871b          	sext.w	a4,a5
    80014bee:	4789                	li	a5,2
    80014bf0:	02f71663          	bne	a4,a5,80014c1c <lgprefix+0x88>
        case LOG_DEBUG:
            return "[DEBUG]: ";
    80014bf4:	00006797          	auipc	a5,0x6
    80014bf8:	0c478793          	addi	a5,a5,196 # 8001acb8 <pow10.0+0xa88>
    80014bfc:	a025                	j	80014c24 <lgprefix+0x90>
        case LOG_INFO:
            return "[INFO]: ";
    80014bfe:	00006797          	auipc	a5,0x6
    80014c02:	0ca78793          	addi	a5,a5,202 # 8001acc8 <pow10.0+0xa98>
    80014c06:	a839                	j	80014c24 <lgprefix+0x90>
        case LOG_ERROR:
            return "[ERROR]: ";
    80014c08:	00006797          	auipc	a5,0x6
    80014c0c:	0d078793          	addi	a5,a5,208 # 8001acd8 <pow10.0+0xaa8>
    80014c10:	a811                	j	80014c24 <lgprefix+0x90>
        case LOG_FATAL:
            return "[FATAL]: ";
    80014c12:	00006797          	auipc	a5,0x6
    80014c16:	0d678793          	addi	a5,a5,214 # 8001ace8 <pow10.0+0xab8>
    80014c1a:	a029                	j	80014c24 <lgprefix+0x90>
        default:
            return "";
    80014c1c:	00006797          	auipc	a5,0x6
    80014c20:	0dc78793          	addi	a5,a5,220 # 8001acf8 <pow10.0+0xac8>
    }
}
    80014c24:	853e                	mv	a0,a5
    80014c26:	6462                	ld	s0,24(sp)
    80014c28:	6105                	addi	sp,sp,32
    80014c2a:	8082                	ret

0000000080014c2c <vlogf>:

static int vlogf(log_type lt, const char *fmt, va_list args)
{
    80014c2c:	7179                	addi	sp,sp,-48
    80014c2e:	f406                	sd	ra,40(sp)
    80014c30:	f022                	sd	s0,32(sp)
    80014c32:	1800                	addi	s0,sp,48
    80014c34:	87aa                	mv	a5,a0
    80014c36:	feb43023          	sd	a1,-32(s0)
    80014c3a:	fcc43c23          	sd	a2,-40(s0)
    80014c3e:	fef42623          	sw	a5,-20(s0)
    if (!(lt & k_log_level)) {
    80014c42:	00007797          	auipc	a5,0x7
    80014c46:	3d678793          	addi	a5,a5,982 # 8001c018 <k_log_level>
    80014c4a:	439c                	lw	a5,0(a5)
    80014c4c:	0007871b          	sext.w	a4,a5
    80014c50:	fec42783          	lw	a5,-20(s0)
    80014c54:	8ff9                	and	a5,a5,a4
    80014c56:	2781                	sext.w	a5,a5
    80014c58:	e399                	bnez	a5,80014c5e <vlogf+0x32>
        return 0;
    80014c5a:	4781                	li	a5,0
    80014c5c:	a02d                	j	80014c86 <vlogf+0x5a>
    }
    int printf(const char *fmt, ...);
    printf("%s", lgprefix(lt));
    80014c5e:	fec42783          	lw	a5,-20(s0)
    80014c62:	853e                	mv	a0,a5
    80014c64:	f31ff0ef          	jal	ra,80014b94 <lgprefix>
    80014c68:	87aa                	mv	a5,a0
    80014c6a:	85be                	mv	a1,a5
    80014c6c:	00006517          	auipc	a0,0x6
    80014c70:	09450513          	addi	a0,a0,148 # 8001ad00 <pow10.0+0xad0>
    80014c74:	dd2fd0ef          	jal	ra,80012246 <printf>
    int vprintf_(const char *format, va_list va);
    return vprintf_(fmt, args);
    80014c78:	fd843583          	ld	a1,-40(s0)
    80014c7c:	fe043503          	ld	a0,-32(s0)
    80014c80:	ef4fd0ef          	jal	ra,80012374 <vprintf_>
    80014c84:	87aa                	mv	a5,a0
}
    80014c86:	853e                	mv	a0,a5
    80014c88:	70a2                	ld	ra,40(sp)
    80014c8a:	7402                	ld	s0,32(sp)
    80014c8c:	6145                	addi	sp,sp,48
    80014c8e:	8082                	ret

0000000080014c90 <logf>:

int logf(log_type lt, const char *fmt, ...)
{
    80014c90:	7159                	addi	sp,sp,-112
    80014c92:	fc06                	sd	ra,56(sp)
    80014c94:	f822                	sd	s0,48(sp)
    80014c96:	0080                	addi	s0,sp,64
    80014c98:	fcb43823          	sd	a1,-48(s0)
    80014c9c:	e010                	sd	a2,0(s0)
    80014c9e:	e414                	sd	a3,8(s0)
    80014ca0:	e818                	sd	a4,16(s0)
    80014ca2:	ec1c                	sd	a5,24(s0)
    80014ca4:	03043023          	sd	a6,32(s0)
    80014ca8:	03143423          	sd	a7,40(s0)
    80014cac:	87aa                	mv	a5,a0
    80014cae:	fcf42e23          	sw	a5,-36(s0)
    va_list va;
    va_start(va, fmt);
    80014cb2:	03040793          	addi	a5,s0,48
    80014cb6:	fcf43423          	sd	a5,-56(s0)
    80014cba:	fc843783          	ld	a5,-56(s0)
    80014cbe:	fd078793          	addi	a5,a5,-48
    80014cc2:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(lt, fmt, va);
    80014cc6:	fe043703          	ld	a4,-32(s0)
    80014cca:	fdc42783          	lw	a5,-36(s0)
    80014cce:	863a                	mv	a2,a4
    80014cd0:	fd043583          	ld	a1,-48(s0)
    80014cd4:	853e                	mv	a0,a5
    80014cd6:	f57ff0ef          	jal	ra,80014c2c <vlogf>
    80014cda:	87aa                	mv	a5,a0
    80014cdc:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80014ce0:	fec42783          	lw	a5,-20(s0)
}
    80014ce4:	853e                	mv	a0,a5
    80014ce6:	70e2                	ld	ra,56(sp)
    80014ce8:	7442                	ld	s0,48(sp)
    80014cea:	6165                	addi	sp,sp,112
    80014cec:	8082                	ret

0000000080014cee <debugf>:

int debugf(const char *fmt, ...)
{
    80014cee:	7159                	addi	sp,sp,-112
    80014cf0:	f406                	sd	ra,40(sp)
    80014cf2:	f022                	sd	s0,32(sp)
    80014cf4:	1800                	addi	s0,sp,48
    80014cf6:	fca43c23          	sd	a0,-40(s0)
    80014cfa:	e40c                	sd	a1,8(s0)
    80014cfc:	e810                	sd	a2,16(s0)
    80014cfe:	ec14                	sd	a3,24(s0)
    80014d00:	f018                	sd	a4,32(s0)
    80014d02:	f41c                	sd	a5,40(s0)
    80014d04:	03043823          	sd	a6,48(s0)
    80014d08:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80014d0c:	04040793          	addi	a5,s0,64
    80014d10:	fcf43823          	sd	a5,-48(s0)
    80014d14:	fd043783          	ld	a5,-48(s0)
    80014d18:	fc878793          	addi	a5,a5,-56
    80014d1c:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(LOG_DEBUG, fmt, va);
    80014d20:	fe043783          	ld	a5,-32(s0)
    80014d24:	863e                	mv	a2,a5
    80014d26:	fd843583          	ld	a1,-40(s0)
    80014d2a:	4509                	li	a0,2
    80014d2c:	f01ff0ef          	jal	ra,80014c2c <vlogf>
    80014d30:	87aa                	mv	a5,a0
    80014d32:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80014d36:	fec42783          	lw	a5,-20(s0)
}
    80014d3a:	853e                	mv	a0,a5
    80014d3c:	70a2                	ld	ra,40(sp)
    80014d3e:	7402                	ld	s0,32(sp)
    80014d40:	6165                	addi	sp,sp,112
    80014d42:	8082                	ret

0000000080014d44 <fatalf>:

ATTR_NORET void fatalf(const char *fmt, ...)
{
    80014d44:	7159                	addi	sp,sp,-112
    80014d46:	f406                	sd	ra,40(sp)
    80014d48:	f022                	sd	s0,32(sp)
    80014d4a:	1800                	addi	s0,sp,48
    80014d4c:	fca43c23          	sd	a0,-40(s0)
    80014d50:	e40c                	sd	a1,8(s0)
    80014d52:	e810                	sd	a2,16(s0)
    80014d54:	ec14                	sd	a3,24(s0)
    80014d56:	f018                	sd	a4,32(s0)
    80014d58:	f41c                	sd	a5,40(s0)
    80014d5a:	03043823          	sd	a6,48(s0)
    80014d5e:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80014d62:	04040793          	addi	a5,s0,64
    80014d66:	fcf43823          	sd	a5,-48(s0)
    80014d6a:	fd043783          	ld	a5,-48(s0)
    80014d6e:	fc878793          	addi	a5,a5,-56
    80014d72:	fef43423          	sd	a5,-24(s0)
    vlogf(LOG_FATAL, fmt, va);
    80014d76:	fe843783          	ld	a5,-24(s0)
    80014d7a:	863e                	mv	a2,a5
    80014d7c:	fd843583          	ld	a1,-40(s0)
    80014d80:	4521                	li	a0,8
    80014d82:	eabff0ef          	jal	ra,80014c2c <vlogf>
    va_end(va);

    CSR_CLEAR("sstatus");
    80014d86:	10001073          	csrw	sstatus,zero
    WFI_LOOP();
    80014d8a:	10500073          	wfi
    80014d8e:	bff5                	j	80014d8a <fatalf+0x46>

0000000080014d90 <klogset>:
}

void klogset(log_type lt)
{
    80014d90:	1101                	addi	sp,sp,-32
    80014d92:	ec22                	sd	s0,24(sp)
    80014d94:	1000                	addi	s0,sp,32
    80014d96:	87aa                	mv	a5,a0
    80014d98:	fef42623          	sw	a5,-20(s0)
    k_log_level |= lt;
    80014d9c:	00007797          	auipc	a5,0x7
    80014da0:	27c78793          	addi	a5,a5,636 # 8001c018 <k_log_level>
    80014da4:	439c                	lw	a5,0(a5)
    80014da6:	0007871b          	sext.w	a4,a5
    80014daa:	fec42783          	lw	a5,-20(s0)
    80014dae:	8fd9                	or	a5,a5,a4
    80014db0:	2781                	sext.w	a5,a5
    80014db2:	0007871b          	sext.w	a4,a5
    80014db6:	00007797          	auipc	a5,0x7
    80014dba:	26278793          	addi	a5,a5,610 # 8001c018 <k_log_level>
    80014dbe:	c398                	sw	a4,0(a5)
}
    80014dc0:	0001                	nop
    80014dc2:	6462                	ld	s0,24(sp)
    80014dc4:	6105                	addi	sp,sp,32
    80014dc6:	8082                	ret

0000000080014dc8 <klogclear>:

void klogclear(log_type lt)
{
    80014dc8:	1101                	addi	sp,sp,-32
    80014dca:	ec22                	sd	s0,24(sp)
    80014dcc:	1000                	addi	s0,sp,32
    80014dce:	87aa                	mv	a5,a0
    80014dd0:	fef42623          	sw	a5,-20(s0)
    k_log_level &= ~lt;
    80014dd4:	fec42783          	lw	a5,-20(s0)
    80014dd8:	fff7c793          	not	a5,a5
    80014ddc:	0007871b          	sext.w	a4,a5
    80014de0:	00007797          	auipc	a5,0x7
    80014de4:	23878793          	addi	a5,a5,568 # 8001c018 <k_log_level>
    80014de8:	439c                	lw	a5,0(a5)
    80014dea:	2781                	sext.w	a5,a5
    80014dec:	8ff9                	and	a5,a5,a4
    80014dee:	2781                	sext.w	a5,a5
    80014df0:	0007871b          	sext.w	a4,a5
    80014df4:	00007797          	auipc	a5,0x7
    80014df8:	22478793          	addi	a5,a5,548 # 8001c018 <k_log_level>
    80014dfc:	c398                	sw	a4,0(a5)
}
    80014dfe:	0001                	nop
    80014e00:	6462                	ld	s0,24(sp)
    80014e02:	6105                	addi	sp,sp,32
    80014e04:	8082                	ret

0000000080014e06 <sbi_putchar>:
#include <compiler.h>
#include <config.h>
#include <sbi.h>

void sbi_putchar(char c)
{
    80014e06:	1101                	addi	sp,sp,-32
    80014e08:	ec22                	sd	s0,24(sp)
    80014e0a:	1000                	addi	s0,sp,32
    80014e0c:	87aa                	mv	a5,a0
    80014e0e:	fef407a3          	sb	a5,-17(s0)
    asm volatile("mv a7, %0\nmv a0, %1\necall" ::"r"(SBI_SVCALL_PUTCHAR), "r"(c) : "a7", "a0");
    80014e12:	47a5                	li	a5,9
    80014e14:	fef44703          	lbu	a4,-17(s0)
    80014e18:	88be                	mv	a7,a5
    80014e1a:	853a                	mv	a0,a4
    80014e1c:	00000073          	ecall
}
    80014e20:	0001                	nop
    80014e22:	6462                	ld	s0,24(sp)
    80014e24:	6105                	addi	sp,sp,32
    80014e26:	8082                	ret

0000000080014e28 <sbi_getchar>:

char sbi_getchar(void)
{
    80014e28:	1101                	addi	sp,sp,-32
    80014e2a:	ec22                	sd	s0,24(sp)
    80014e2c:	1000                	addi	s0,sp,32
    char c;
    asm volatile("mv a7, %1\necall\nmv %0, a0\n" : "=r"(c) : "r"(SBI_SVCALL_GETCHAR) : "a7", "a0");
    80014e2e:	47a9                	li	a5,10
    80014e30:	88be                	mv	a7,a5
    80014e32:	00000073          	ecall
    80014e36:	87aa                	mv	a5,a0
    80014e38:	fef407a3          	sb	a5,-17(s0)
    return c;
    80014e3c:	fef44783          	lbu	a5,-17(s0)
}
    80014e40:	853e                	mv	a0,a5
    80014e42:	6462                	ld	s0,24(sp)
    80014e44:	6105                	addi	sp,sp,32
    80014e46:	8082                	ret

0000000080014e48 <sbi_hart_get_status>:

int sbi_hart_get_status(unsigned int hart)
{
    80014e48:	7179                	addi	sp,sp,-48
    80014e4a:	f422                	sd	s0,40(sp)
    80014e4c:	1800                	addi	s0,sp,48
    80014e4e:	87aa                	mv	a5,a0
    80014e50:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\necall\nmv %0, a0\n"
    80014e54:	4785                	li	a5,1
    80014e56:	fdc42703          	lw	a4,-36(s0)
    80014e5a:	88be                	mv	a7,a5
    80014e5c:	853a                	mv	a0,a4
    80014e5e:	00000073          	ecall
    80014e62:	87aa                	mv	a5,a0
    80014e64:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_STATUS), "r"(hart)
                 : "a0", "a7");
    return stat;
    80014e68:	fec42783          	lw	a5,-20(s0)
}
    80014e6c:	853e                	mv	a0,a5
    80014e6e:	7422                	ld	s0,40(sp)
    80014e70:	6145                	addi	sp,sp,48
    80014e72:	8082                	ret

0000000080014e74 <sbi_hart_start>:

int sbi_hart_start(unsigned int hart, unsigned long target, unsigned long scratch, unsigned long satp)
{
    80014e74:	7139                	addi	sp,sp,-64
    80014e76:	fc22                	sd	s0,56(sp)
    80014e78:	0080                	addi	s0,sp,64
    80014e7a:	87aa                	mv	a5,a0
    80014e7c:	fcb43823          	sd	a1,-48(s0)
    80014e80:	fcc43423          	sd	a2,-56(s0)
    80014e84:	fcd43023          	sd	a3,-64(s0)
    80014e88:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\nmv a1, %3\nmv a2, %4\nmv a3, %5\necall\nmv %0, a0\n"
    80014e8c:	4789                	li	a5,2
    80014e8e:	fdc42703          	lw	a4,-36(s0)
    80014e92:	fd043683          	ld	a3,-48(s0)
    80014e96:	fc843803          	ld	a6,-56(s0)
    80014e9a:	fc043303          	ld	t1,-64(s0)
    80014e9e:	88be                	mv	a7,a5
    80014ea0:	853a                	mv	a0,a4
    80014ea2:	85b6                	mv	a1,a3
    80014ea4:	8642                	mv	a2,a6
    80014ea6:	869a                	mv	a3,t1
    80014ea8:	00000073          	ecall
    80014eac:	87aa                	mv	a5,a0
    80014eae:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_START), "r"(hart), "r"(target), "r"(scratch), "r"(satp)
                 : "a0", "a1", "a2", "a7");
    return stat;
    80014eb2:	fec42783          	lw	a5,-20(s0)
}
    80014eb6:	853e                	mv	a0,a5
    80014eb8:	7462                	ld	s0,56(sp)
    80014eba:	6121                	addi	sp,sp,64
    80014ebc:	8082                	ret

0000000080014ebe <sbi_hart_stop>:

void sbi_hart_stop(void)
{
    80014ebe:	1141                	addi	sp,sp,-16
    80014ec0:	e422                	sd	s0,8(sp)
    80014ec2:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall\nwfi" : : "r"(SBI_SVCALL_HART_STOP) : "a0", "a7");
    80014ec4:	478d                	li	a5,3
    80014ec6:	88be                	mv	a7,a5
    80014ec8:	00000073          	ecall
    80014ecc:	10500073          	wfi
}
    80014ed0:	0001                	nop
    80014ed2:	6422                	ld	s0,8(sp)
    80014ed4:	0141                	addi	sp,sp,16
    80014ed6:	8082                	ret

0000000080014ed8 <sbi_poweroff>:

void sbi_poweroff(void)
{
    80014ed8:	1141                	addi	sp,sp,-16
    80014eda:	e422                	sd	s0,8(sp)
    80014edc:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" : : "r"(SBI_SVCALL_POWEROFF) : "a0", "a7");
    80014ede:	47b1                	li	a5,12
    80014ee0:	88be                	mv	a7,a5
    80014ee2:	00000073          	ecall
}
    80014ee6:	0001                	nop
    80014ee8:	6422                	ld	s0,8(sp)
    80014eea:	0141                	addi	sp,sp,16
    80014eec:	8082                	ret

0000000080014eee <sbi_get_time>:

unsigned long sbi_get_time(void)
{
    80014eee:	1101                	addi	sp,sp,-32
    80014ef0:	ec22                	sd	s0,24(sp)
    80014ef2:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_GET_TIME) : "a0", "a7");
    80014ef4:	4791                	li	a5,4
    80014ef6:	88be                	mv	a7,a5
    80014ef8:	00000073          	ecall
    80014efc:	87aa                	mv	a5,a0
    80014efe:	fef43423          	sd	a5,-24(s0)
    return ret;
    80014f02:	fe843783          	ld	a5,-24(s0)
}
    80014f06:	853e                	mv	a0,a5
    80014f08:	6462                	ld	s0,24(sp)
    80014f0a:	6105                	addi	sp,sp,32
    80014f0c:	8082                	ret

0000000080014f0e <sbi_set_timer>:

void sbi_set_timer(unsigned int hart, unsigned long val)
{
    80014f0e:	1101                	addi	sp,sp,-32
    80014f10:	ec22                	sd	s0,24(sp)
    80014f12:	1000                	addi	s0,sp,32
    80014f14:	87aa                	mv	a5,a0
    80014f16:	feb43023          	sd	a1,-32(s0)
    80014f1a:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_SET_TIMECMP), "r"(hart),
    80014f1e:	4795                	li	a5,5
    80014f20:	fec42703          	lw	a4,-20(s0)
    80014f24:	fe043683          	ld	a3,-32(s0)
    80014f28:	88be                	mv	a7,a5
    80014f2a:	853a                	mv	a0,a4
    80014f2c:	85b6                	mv	a1,a3
    80014f2e:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    80014f32:	0001                	nop
    80014f34:	6462                	ld	s0,24(sp)
    80014f36:	6105                	addi	sp,sp,32
    80014f38:	8082                	ret

0000000080014f3a <sbi_add_timer>:

void sbi_add_timer(unsigned int hart, unsigned long val)
{
    80014f3a:	1101                	addi	sp,sp,-32
    80014f3c:	ec22                	sd	s0,24(sp)
    80014f3e:	1000                	addi	s0,sp,32
    80014f40:	87aa                	mv	a5,a0
    80014f42:	feb43023          	sd	a1,-32(s0)
    80014f46:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_ADD_TIMECMP), "r"(hart),
    80014f4a:	4799                	li	a5,6
    80014f4c:	fec42703          	lw	a4,-20(s0)
    80014f50:	fe043683          	ld	a3,-32(s0)
    80014f54:	88be                	mv	a7,a5
    80014f56:	853a                	mv	a0,a4
    80014f58:	85b6                	mv	a1,a3
    80014f5a:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    80014f5e:	0001                	nop
    80014f60:	6462                	ld	s0,24(sp)
    80014f62:	6105                	addi	sp,sp,32
    80014f64:	8082                	ret

0000000080014f66 <sbi_ack_timer>:

void sbi_ack_timer(void)
{
    80014f66:	1141                	addi	sp,sp,-16
    80014f68:	e422                	sd	s0,8(sp)
    80014f6a:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" ::"r"(SBI_SVCALL_ACK_TIMER) : "a7");
    80014f6c:	479d                	li	a5,7
    80014f6e:	88be                	mv	a7,a5
    80014f70:	00000073          	ecall
}
    80014f74:	0001                	nop
    80014f76:	6422                	ld	s0,8(sp)
    80014f78:	0141                	addi	sp,sp,16
    80014f7a:	8082                	ret

0000000080014f7c <sbi_rtc_get_time>:

unsigned long sbi_rtc_get_time(void)
{
    80014f7c:	1101                	addi	sp,sp,-32
    80014f7e:	ec22                	sd	s0,24(sp)
    80014f80:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0"
    80014f82:	47a1                	li	a5,8
    80014f84:	88be                	mv	a7,a5
    80014f86:	00000073          	ecall
    80014f8a:	87aa                	mv	a5,a0
    80014f8c:	fef43423          	sd	a5,-24(s0)
                 : "=r"(ret)
                 : "r"(SBI_SVCALL_RTC_GET_TIME)
                 : "a0", "a7");
    return ret;
    80014f90:	fe843783          	ld	a5,-24(s0)
}
    80014f94:	853e                	mv	a0,a5
    80014f96:	6462                	ld	s0,24(sp)
    80014f98:	6105                	addi	sp,sp,32
    80014f9a:	8082                	ret

0000000080014f9c <sbi_whoami>:

int sbi_whoami(void)
{
    80014f9c:	1101                	addi	sp,sp,-32
    80014f9e:	ec22                	sd	s0,24(sp)
    80014fa0:	1000                	addi	s0,sp,32
    int ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_WHOAMI) : "a0", "a7");
    80014fa2:	47ad                	li	a5,11
    80014fa4:	88be                	mv	a7,a5
    80014fa6:	00000073          	ecall
    80014faa:	87aa                	mv	a5,a0
    80014fac:	fef42623          	sw	a5,-20(s0)
    return ret;
    80014fb0:	fec42783          	lw	a5,-20(s0)
}
    80014fb4:	853e                	mv	a0,a5
    80014fb6:	6462                	ld	s0,24(sp)
    80014fb8:	6105                	addi	sp,sp,32
    80014fba:	8082                	ret

0000000080014fbc <sbi_num_harts>:

int sbi_num_harts(void)
{
    80014fbc:	1101                	addi	sp,sp,-32
    80014fbe:	ec06                	sd	ra,24(sp)
    80014fc0:	e822                	sd	s0,16(sp)
    80014fc2:	1000                	addi	s0,sp,32
    unsigned int i;
    int num_harts = 0;
    80014fc4:	fe042423          	sw	zero,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80014fc8:	fe042623          	sw	zero,-20(s0)
    80014fcc:	a015                	j	80014ff0 <sbi_num_harts+0x34>
        if (sbi_hart_get_status(i) != 0) {
    80014fce:	fec42783          	lw	a5,-20(s0)
    80014fd2:	853e                	mv	a0,a5
    80014fd4:	e75ff0ef          	jal	ra,80014e48 <sbi_hart_get_status>
    80014fd8:	87aa                	mv	a5,a0
    80014fda:	c791                	beqz	a5,80014fe6 <sbi_num_harts+0x2a>
            num_harts += 1;
    80014fdc:	fe842783          	lw	a5,-24(s0)
    80014fe0:	2785                	addiw	a5,a5,1
    80014fe2:	fef42423          	sw	a5,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80014fe6:	fec42783          	lw	a5,-20(s0)
    80014fea:	2785                	addiw	a5,a5,1
    80014fec:	fef42623          	sw	a5,-20(s0)
    80014ff0:	fec42783          	lw	a5,-20(s0)
    80014ff4:	0007871b          	sext.w	a4,a5
    80014ff8:	478d                	li	a5,3
    80014ffa:	fce7fae3          	bgeu	a5,a4,80014fce <sbi_num_harts+0x12>
        }
    }
    return num_harts;
    80014ffe:	fe842783          	lw	a5,-24(s0)
}
    80015002:	853e                	mv	a0,a5
    80015004:	60e2                	ld	ra,24(sp)
    80015006:	6442                	ld	s0,16(sp)
    80015008:	6105                	addi	sp,sp,32
    8001500a:	8082                	ret

000000008001500c <plic_set_priority>:
#define PLIC_PCI_INTB 33
#define PLIC_PCI_INTC 34
#define PLIC_PCI_INTD 35

void plic_set_priority(int interrupt_id, char priority)
{
    8001500c:	7179                	addi	sp,sp,-48
    8001500e:	f422                	sd	s0,40(sp)
    80015010:	1800                	addi	s0,sp,48
    80015012:	87aa                	mv	a5,a0
    80015014:	872e                	mv	a4,a1
    80015016:	fcf42e23          	sw	a5,-36(s0)
    8001501a:	87ba                	mv	a5,a4
    8001501c:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_PRIORITY(interrupt_id);
    80015020:	fdc42783          	lw	a5,-36(s0)
    80015024:	0027979b          	slliw	a5,a5,0x2
    80015028:	2781                	sext.w	a5,a5
    8001502a:	873e                	mv	a4,a5
    8001502c:	0c0007b7          	lui	a5,0xc000
    80015030:	97ba                	add	a5,a5,a4
    80015032:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    80015036:	fdb44783          	lbu	a5,-37(s0)
    8001503a:	2781                	sext.w	a5,a5
    8001503c:	8b9d                	andi	a5,a5,7
    8001503e:	0007871b          	sext.w	a4,a5
    80015042:	fe843783          	ld	a5,-24(s0)
    80015046:	c398                	sw	a4,0(a5)
}
    80015048:	0001                	nop
    8001504a:	7422                	ld	s0,40(sp)
    8001504c:	6145                	addi	sp,sp,48
    8001504e:	8082                	ret

0000000080015050 <plic_set_threshold>:
void plic_set_threshold(int hart, char priority)
{
    80015050:	7179                	addi	sp,sp,-48
    80015052:	f422                	sd	s0,40(sp)
    80015054:	1800                	addi	s0,sp,48
    80015056:	87aa                	mv	a5,a0
    80015058:	872e                	mv	a4,a1
    8001505a:	fcf42e23          	sw	a5,-36(s0)
    8001505e:	87ba                	mv	a5,a4
    80015060:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_THRESHOLD(hart, PLIC_MODE_SUPERVISOR);
    80015064:	fdc42783          	lw	a5,-36(s0)
    80015068:	0017979b          	slliw	a5,a5,0x1
    8001506c:	2781                	sext.w	a5,a5
    8001506e:	2785                	addiw	a5,a5,1
    80015070:	2781                	sext.w	a5,a5
    80015072:	00c7979b          	slliw	a5,a5,0xc
    80015076:	2781                	sext.w	a5,a5
    80015078:	873e                	mv	a4,a5
    8001507a:	0c2007b7          	lui	a5,0xc200
    8001507e:	97ba                	add	a5,a5,a4
    80015080:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    80015084:	fdb44783          	lbu	a5,-37(s0)
    80015088:	2781                	sext.w	a5,a5
    8001508a:	8b9d                	andi	a5,a5,7
    8001508c:	0007871b          	sext.w	a4,a5
    80015090:	fe843783          	ld	a5,-24(s0)
    80015094:	c398                	sw	a4,0(a5)
}
    80015096:	0001                	nop
    80015098:	7422                	ld	s0,40(sp)
    8001509a:	6145                	addi	sp,sp,48
    8001509c:	8082                	ret

000000008001509e <plic_enable>:
void plic_enable(int hart, int interrupt_id)
{
    8001509e:	7179                	addi	sp,sp,-48
    800150a0:	f422                	sd	s0,40(sp)
    800150a2:	1800                	addi	s0,sp,48
    800150a4:	87aa                	mv	a5,a0
    800150a6:	872e                	mv	a4,a1
    800150a8:	fcf42e23          	sw	a5,-36(s0)
    800150ac:	87ba                	mv	a5,a4
    800150ae:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    800150b2:	fdc42783          	lw	a5,-36(s0)
    800150b6:	0017979b          	slliw	a5,a5,0x1
    800150ba:	2781                	sext.w	a5,a5
    800150bc:	2785                	addiw	a5,a5,1
    800150be:	2781                	sext.w	a5,a5
    800150c0:	0077979b          	slliw	a5,a5,0x7
    800150c4:	2781                	sext.w	a5,a5
    800150c6:	873e                	mv	a4,a5
    800150c8:	0c0027b7          	lui	a5,0xc002
    800150cc:	97ba                	add	a5,a5,a4
    800150ce:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] |= 1UL << (interrupt_id % 32);
    800150d2:	fd842783          	lw	a5,-40(s0)
    800150d6:	41f7d71b          	sraiw	a4,a5,0x1f
    800150da:	01b7571b          	srliw	a4,a4,0x1b
    800150de:	9fb9                	addw	a5,a5,a4
    800150e0:	4057d79b          	sraiw	a5,a5,0x5
    800150e4:	0007869b          	sext.w	a3,a5
    800150e8:	87b6                	mv	a5,a3
    800150ea:	078a                	slli	a5,a5,0x2
    800150ec:	fe843703          	ld	a4,-24(s0)
    800150f0:	97ba                	add	a5,a5,a4
    800150f2:	438c                	lw	a1,0(a5)
    800150f4:	fd842703          	lw	a4,-40(s0)
    800150f8:	41f7579b          	sraiw	a5,a4,0x1f
    800150fc:	01b7d79b          	srliw	a5,a5,0x1b
    80015100:	9f3d                	addw	a4,a4,a5
    80015102:	8b7d                	andi	a4,a4,31
    80015104:	40f707bb          	subw	a5,a4,a5
    80015108:	2781                	sext.w	a5,a5
    8001510a:	873e                	mv	a4,a5
    8001510c:	4785                	li	a5,1
    8001510e:	00e797b3          	sll	a5,a5,a4
    80015112:	0007861b          	sext.w	a2,a5
    80015116:	87b6                	mv	a5,a3
    80015118:	078a                	slli	a5,a5,0x2
    8001511a:	fe843703          	ld	a4,-24(s0)
    8001511e:	97ba                	add	a5,a5,a4
    80015120:	86ae                	mv	a3,a1
    80015122:	8732                	mv	a4,a2
    80015124:	8f55                	or	a4,a4,a3
    80015126:	2701                	sext.w	a4,a4
    80015128:	c398                	sw	a4,0(a5)
}
    8001512a:	0001                	nop
    8001512c:	7422                	ld	s0,40(sp)
    8001512e:	6145                	addi	sp,sp,48
    80015130:	8082                	ret

0000000080015132 <plic_disable>:
void plic_disable(int hart, int interrupt_id)
{
    80015132:	7179                	addi	sp,sp,-48
    80015134:	f422                	sd	s0,40(sp)
    80015136:	1800                	addi	s0,sp,48
    80015138:	87aa                	mv	a5,a0
    8001513a:	872e                	mv	a4,a1
    8001513c:	fcf42e23          	sw	a5,-36(s0)
    80015140:	87ba                	mv	a5,a4
    80015142:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    80015146:	fdc42783          	lw	a5,-36(s0)
    8001514a:	0017979b          	slliw	a5,a5,0x1
    8001514e:	2781                	sext.w	a5,a5
    80015150:	2785                	addiw	a5,a5,1
    80015152:	2781                	sext.w	a5,a5
    80015154:	0077979b          	slliw	a5,a5,0x7
    80015158:	2781                	sext.w	a5,a5
    8001515a:	873e                	mv	a4,a5
    8001515c:	0c0027b7          	lui	a5,0xc002
    80015160:	97ba                	add	a5,a5,a4
    80015162:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] &= ~(1UL << (interrupt_id % 32));
    80015166:	fd842783          	lw	a5,-40(s0)
    8001516a:	41f7d71b          	sraiw	a4,a5,0x1f
    8001516e:	01b7571b          	srliw	a4,a4,0x1b
    80015172:	9fb9                	addw	a5,a5,a4
    80015174:	4057d79b          	sraiw	a5,a5,0x5
    80015178:	0007869b          	sext.w	a3,a5
    8001517c:	87b6                	mv	a5,a3
    8001517e:	078a                	slli	a5,a5,0x2
    80015180:	fe843703          	ld	a4,-24(s0)
    80015184:	97ba                	add	a5,a5,a4
    80015186:	438c                	lw	a1,0(a5)
    80015188:	fd842703          	lw	a4,-40(s0)
    8001518c:	41f7579b          	sraiw	a5,a4,0x1f
    80015190:	01b7d79b          	srliw	a5,a5,0x1b
    80015194:	9f3d                	addw	a4,a4,a5
    80015196:	8b7d                	andi	a4,a4,31
    80015198:	40f707bb          	subw	a5,a4,a5
    8001519c:	2781                	sext.w	a5,a5
    8001519e:	873e                	mv	a4,a5
    800151a0:	4785                	li	a5,1
    800151a2:	00e797b3          	sll	a5,a5,a4
    800151a6:	2781                	sext.w	a5,a5
    800151a8:	fff7c793          	not	a5,a5
    800151ac:	0007861b          	sext.w	a2,a5
    800151b0:	87b6                	mv	a5,a3
    800151b2:	078a                	slli	a5,a5,0x2
    800151b4:	fe843703          	ld	a4,-24(s0)
    800151b8:	97ba                	add	a5,a5,a4
    800151ba:	86ae                	mv	a3,a1
    800151bc:	8732                	mv	a4,a2
    800151be:	8f75                	and	a4,a4,a3
    800151c0:	2701                	sext.w	a4,a4
    800151c2:	c398                	sw	a4,0(a5)
}
    800151c4:	0001                	nop
    800151c6:	7422                	ld	s0,40(sp)
    800151c8:	6145                	addi	sp,sp,48
    800151ca:	8082                	ret

00000000800151cc <plic_claim>:
uint32_t plic_claim(int hart)
{
    800151cc:	7179                	addi	sp,sp,-48
    800151ce:	f422                	sd	s0,40(sp)
    800151d0:	1800                	addi	s0,sp,48
    800151d2:	87aa                	mv	a5,a0
    800151d4:	fcf42e23          	sw	a5,-36(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    800151d8:	fdc42783          	lw	a5,-36(s0)
    800151dc:	0017979b          	slliw	a5,a5,0x1
    800151e0:	2781                	sext.w	a5,a5
    800151e2:	2785                	addiw	a5,a5,1
    800151e4:	2781                	sext.w	a5,a5
    800151e6:	00c7979b          	slliw	a5,a5,0xc
    800151ea:	2781                	sext.w	a5,a5
    800151ec:	873e                	mv	a4,a5
    800151ee:	0c2007b7          	lui	a5,0xc200
    800151f2:	0791                	addi	a5,a5,4
    800151f4:	97ba                	add	a5,a5,a4
    800151f6:	fef43423          	sd	a5,-24(s0)
    return *base;
    800151fa:	fe843783          	ld	a5,-24(s0)
    800151fe:	439c                	lw	a5,0(a5)
}
    80015200:	853e                	mv	a0,a5
    80015202:	7422                	ld	s0,40(sp)
    80015204:	6145                	addi	sp,sp,48
    80015206:	8082                	ret

0000000080015208 <plic_complete>:
void plic_complete(int hart, int id)
{
    80015208:	7179                	addi	sp,sp,-48
    8001520a:	f422                	sd	s0,40(sp)
    8001520c:	1800                	addi	s0,sp,48
    8001520e:	87aa                	mv	a5,a0
    80015210:	872e                	mv	a4,a1
    80015212:	fcf42e23          	sw	a5,-36(s0)
    80015216:	87ba                	mv	a5,a4
    80015218:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    8001521c:	fdc42783          	lw	a5,-36(s0)
    80015220:	0017979b          	slliw	a5,a5,0x1
    80015224:	2781                	sext.w	a5,a5
    80015226:	2785                	addiw	a5,a5,1
    80015228:	2781                	sext.w	a5,a5
    8001522a:	00c7979b          	slliw	a5,a5,0xc
    8001522e:	2781                	sext.w	a5,a5
    80015230:	873e                	mv	a4,a5
    80015232:	0c2007b7          	lui	a5,0xc200
    80015236:	0791                	addi	a5,a5,4
    80015238:	97ba                	add	a5,a5,a4
    8001523a:	fef43423          	sd	a5,-24(s0)
    *base          = id;
    8001523e:	fd842703          	lw	a4,-40(s0)
    80015242:	fe843783          	ld	a5,-24(s0)
    80015246:	c398                	sw	a4,0(a5)
}
    80015248:	0001                	nop
    8001524a:	7422                	ld	s0,40(sp)
    8001524c:	6145                	addi	sp,sp,48
    8001524e:	8082                	ret

0000000080015250 <plic_handle_irq>:

void plic_handle_irq(int hart)
{
    80015250:	7179                	addi	sp,sp,-48
    80015252:	f406                	sd	ra,40(sp)
    80015254:	f022                	sd	s0,32(sp)
    80015256:	1800                	addi	s0,sp,48
    80015258:	87aa                	mv	a5,a0
    8001525a:	fcf42e23          	sw	a5,-36(s0)
    int irq = plic_claim(hart);
    8001525e:	fdc42783          	lw	a5,-36(s0)
    80015262:	853e                	mv	a0,a5
    80015264:	f69ff0ef          	jal	ra,800151cc <plic_claim>
    80015268:	87aa                	mv	a5,a0
    8001526a:	2781                	sext.w	a5,a5
    8001526c:	fef42623          	sw	a5,-20(s0)
    80015270:	fec42783          	lw	a5,-20(s0)
    80015274:	3781                	addiw	a5,a5,-32
    80015276:	2781                	sext.w	a5,a5

    switch (irq) {
    80015278:	873e                	mv	a4,a5
    8001527a:	478d                	li	a5,3
    8001527c:	02e7e163          	bltu	a5,a4,8001529e <plic_handle_irq+0x4e>
        case PLIC_PCI_INTA: [[fallthrough]]
        case PLIC_PCI_INTB: [[fallthrough]]
        case PLIC_PCI_INTC: [[fallthrough]]
        case PLIC_PCI_INTD:
#ifdef USE_PCI
            debugf("PLIC: IRQ %d\n", irq);
    80015280:	fec42783          	lw	a5,-20(s0)
    80015284:	85be                	mv	a1,a5
    80015286:	00006517          	auipc	a0,0x6
    8001528a:	a8250513          	addi	a0,a0,-1406 # 8001ad08 <pow10.0+0xad8>
    8001528e:	a61ff0ef          	jal	ra,80014cee <debugf>
            pci_dispatch_irq(irq);
    80015292:	fec42783          	lw	a5,-20(s0)
    80015296:	853e                	mv	a0,a5
    80015298:	e01fd0ef          	jal	ra,80013098 <pci_dispatch_irq>
#endif
            break;
    8001529c:	0001                	nop
    }

    plic_complete(hart, irq);
    8001529e:	fec42703          	lw	a4,-20(s0)
    800152a2:	fdc42783          	lw	a5,-36(s0)
    800152a6:	85ba                	mv	a1,a4
    800152a8:	853e                	mv	a0,a5
    800152aa:	f5fff0ef          	jal	ra,80015208 <plic_complete>
}
    800152ae:	0001                	nop
    800152b0:	70a2                	ld	ra,40(sp)
    800152b2:	7402                	ld	s0,32(sp)
    800152b4:	6145                	addi	sp,sp,48
    800152b6:	8082                	ret

00000000800152b8 <plic_init>:

void plic_init(void)
{
    800152b8:	1141                	addi	sp,sp,-16
    800152ba:	e406                	sd	ra,8(sp)
    800152bc:	e022                	sd	s0,0(sp)
    800152be:	0800                	addi	s0,sp,16
    plic_enable(0, PLIC_PCI_INTA);
    800152c0:	02000593          	li	a1,32
    800152c4:	4501                	li	a0,0
    800152c6:	dd9ff0ef          	jal	ra,8001509e <plic_enable>
    plic_enable(0, PLIC_PCI_INTB);
    800152ca:	02100593          	li	a1,33
    800152ce:	4501                	li	a0,0
    800152d0:	dcfff0ef          	jal	ra,8001509e <plic_enable>
    plic_enable(0, PLIC_PCI_INTC);
    800152d4:	02200593          	li	a1,34
    800152d8:	4501                	li	a0,0
    800152da:	dc5ff0ef          	jal	ra,8001509e <plic_enable>
    plic_enable(0, PLIC_PCI_INTD);
    800152de:	02300593          	li	a1,35
    800152e2:	4501                	li	a0,0
    800152e4:	dbbff0ef          	jal	ra,8001509e <plic_enable>

    plic_set_threshold(0, 1);
    800152e8:	4585                	li	a1,1
    800152ea:	4501                	li	a0,0
    800152ec:	d65ff0ef          	jal	ra,80015050 <plic_set_threshold>

    plic_set_priority(PLIC_PCI_INTA, 3);
    800152f0:	458d                	li	a1,3
    800152f2:	02000513          	li	a0,32
    800152f6:	d17ff0ef          	jal	ra,8001500c <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTB, 3);
    800152fa:	458d                	li	a1,3
    800152fc:	02100513          	li	a0,33
    80015300:	d0dff0ef          	jal	ra,8001500c <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTC, 3);
    80015304:	458d                	li	a1,3
    80015306:	02200513          	li	a0,34
    8001530a:	d03ff0ef          	jal	ra,8001500c <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTD, 3);
    8001530e:	458d                	li	a1,3
    80015310:	02300513          	li	a0,35
    80015314:	cf9ff0ef          	jal	ra,8001500c <plic_set_priority>
}
    80015318:	0001                	nop
    8001531a:	60a2                	ld	ra,8(sp)
    8001531c:	6402                	ld	s0,0(sp)
    8001531e:	0141                	addi	sp,sp,16
    80015320:	8082                	ret

0000000080015322 <virtio_init>:
static Vector *virtio_devices = NULL;

/**
 * @brief Initialize the virtio system
 */
void virtio_init(void) {
    80015322:	1141                	addi	sp,sp,-16
    80015324:	e406                	sd	ra,8(sp)
    80015326:	e022                	sd	s0,0(sp)
    80015328:	0800                	addi	s0,sp,16
    virtio_devices = vector_new();
    8001532a:	1db010ef          	jal	ra,80016d04 <vector_new>
    8001532e:	872a                	mv	a4,a0
    80015330:	00004797          	auipc	a5,0x4
    80015334:	d4878793          	addi	a5,a5,-696 # 80019078 <virtio_devices>
    80015338:	e398                	sd	a4,0(a5)

    // for (int i = 0; i < pci_count_saved_devices(); i++) {
    // }
}
    8001533a:	0001                	nop
    8001533c:	60a2                	ld	ra,8(sp)
    8001533e:	6402                	ld	s0,0(sp)
    80015340:	0141                	addi	sp,sp,16
    80015342:	8082                	ret

0000000080015344 <virtio_notify>:
 * @brief Virtio notification
 * @param viodev - virtio device to notify for
 * @param which_queue - queue number to notify
 */
void virtio_notify(VirtioDevice *viodev, uint16_t which_queue)
{
    80015344:	7139                	addi	sp,sp,-64
    80015346:	fc06                	sd	ra,56(sp)
    80015348:	f822                	sd	s0,48(sp)
    8001534a:	0080                	addi	s0,sp,64
    8001534c:	fca43423          	sd	a0,-56(s0)
    80015350:	87ae                	mv	a5,a1
    80015352:	fcf41323          	sh	a5,-58(s0)
    uint16_t num_queues = viodev->common_cfg->num_queues;
    80015356:	fc843783          	ld	a5,-56(s0)
    8001535a:	679c                	ld	a5,8(a5)
    8001535c:	0127d783          	lhu	a5,18(a5)
    80015360:	fef41723          	sh	a5,-18(s0)

    if (which_queue >= viodev->common_cfg->num_queues) {
    80015364:	fc843783          	ld	a5,-56(s0)
    80015368:	679c                	ld	a5,8(a5)
    8001536a:	0127d783          	lhu	a5,18(a5)
    8001536e:	17c2                	slli	a5,a5,0x30
    80015370:	93c1                	srli	a5,a5,0x30
    80015372:	fc645703          	lhu	a4,-58(s0)
    80015376:	2701                	sext.w	a4,a4
    80015378:	2781                	sext.w	a5,a5
    8001537a:	00f76a63          	bltu	a4,a5,8001538e <virtio_notify+0x4a>
        logf(LOG_ERROR, "virtio_notify: Provided queue number is too big...\n");
    8001537e:	00006597          	auipc	a1,0x6
    80015382:	99a58593          	addi	a1,a1,-1638 # 8001ad18 <pow10.0+0xae8>
    80015386:	4505                	li	a0,1
    80015388:	909ff0ef          	jal	ra,80014c90 <logf>
        return;
    8001538c:	a851                	j	80015420 <virtio_notify+0xdc>
    }

    // Select the queue we are looking at
    viodev->common_cfg->queue_select = which_queue;
    8001538e:	fc843783          	ld	a5,-56(s0)
    80015392:	679c                	ld	a5,8(a5)
    80015394:	fc645703          	lhu	a4,-58(s0)
    80015398:	00e79b23          	sh	a4,22(a5)

    // Determine offset for the given queue
    uint8_t bar_num = viodev->notify_cap->cap.bar;
    8001539c:	fc843783          	ld	a5,-56(s0)
    800153a0:	6b9c                	ld	a5,16(a5)
    800153a2:	0047c783          	lbu	a5,4(a5)
    800153a6:	fef406a3          	sb	a5,-19(s0)
    uint32_t offset = viodev->notify_cap->cap.offset;
    800153aa:	fc843783          	ld	a5,-56(s0)
    800153ae:	6b9c                	ld	a5,16(a5)
    800153b0:	479c                	lw	a5,8(a5)
    800153b2:	fef42423          	sw	a5,-24(s0)
    uint16_t queue_notify_off = viodev->common_cfg->queue_notify_off;
    800153b6:	fc843783          	ld	a5,-56(s0)
    800153ba:	679c                	ld	a5,8(a5)
    800153bc:	01e7d783          	lhu	a5,30(a5)
    800153c0:	fef41323          	sh	a5,-26(s0)
    uint32_t notify_off_multiplier = viodev->notify_cap->notify_off_multiplier;
    800153c4:	fc843783          	ld	a5,-56(s0)
    800153c8:	6b9c                	ld	a5,16(a5)
    800153ca:	4b9c                	lw	a5,16(a5)
    800153cc:	fef42023          	sw	a5,-32(s0)
    uint32_t bar = viodev->pcidev->ecam_header->type0.bar[bar_num];
    800153d0:	fc843783          	ld	a5,-56(s0)
    800153d4:	639c                	ld	a5,0(a5)
    800153d6:	6398                	ld	a4,0(a5)
    800153d8:	fed44783          	lbu	a5,-19(s0)
    800153dc:	2781                	sext.w	a5,a5
    800153de:	0791                	addi	a5,a5,4
    800153e0:	078a                	slli	a5,a5,0x2
    800153e2:	97ba                	add	a5,a5,a4
    800153e4:	439c                	lw	a5,0(a5)
    800153e6:	fcf42e23          	sw	a5,-36(s0)

    // FIXME: 
    uint16_t *notify = bar + BAR_NOTIFY_CAP(offset, queue_notify_off, notify_off_multiplier);
    800153ea:	fe645783          	lhu	a5,-26(s0)
    800153ee:	2781                	sext.w	a5,a5
    800153f0:	fe042703          	lw	a4,-32(s0)
    800153f4:	02f707bb          	mulw	a5,a4,a5
    800153f8:	2781                	sext.w	a5,a5
    800153fa:	fe842703          	lw	a4,-24(s0)
    800153fe:	9fb9                	addw	a5,a5,a4
    80015400:	2781                	sext.w	a5,a5
    80015402:	fdc42703          	lw	a4,-36(s0)
    80015406:	9fb9                	addw	a5,a5,a4
    80015408:	2781                	sext.w	a5,a5
    8001540a:	1782                	slli	a5,a5,0x20
    8001540c:	9381                	srli	a5,a5,0x20
    8001540e:	fcf43823          	sd	a5,-48(s0)

    // Write the queue's number to the notify register
    *notify = which_queue; 
    80015412:	fd043783          	ld	a5,-48(s0)
    80015416:	fc645703          	lhu	a4,-58(s0)
    8001541a:	00e79023          	sh	a4,0(a5)

    return;
    8001541e:	0001                	nop
};
    80015420:	70e2                	ld	ra,56(sp)
    80015422:	7442                	ld	s0,48(sp)
    80015424:	6121                	addi	sp,sp,64
    80015426:	8082                	ret

0000000080015428 <set_taken>:

static uint8_t *bookkeeping;  // Pointer to the bookkeeping area

// For some reason, the macros didn't work for me, so I used the static functions like Marz said and it works.
static void set_taken(uint64_t index)
{
    80015428:	1101                	addi	sp,sp,-32
    8001542a:	ec22                	sd	s0,24(sp)
    8001542c:	1000                	addi	s0,sp,32
    8001542e:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2));
    80015432:	00004797          	auipc	a5,0x4
    80015436:	c4e78793          	addi	a5,a5,-946 # 80019080 <bookkeeping>
    8001543a:	6398                	ld	a4,0(a5)
    8001543c:	fe843783          	ld	a5,-24(s0)
    80015440:	8389                	srli	a5,a5,0x2
    80015442:	973e                	add	a4,a4,a5
    80015444:	00074703          	lbu	a4,0(a4) # ffffffffc0fff000 <_heap_end+0xffffffff38fef000>
    80015448:	0187169b          	slliw	a3,a4,0x18
    8001544c:	4186d69b          	sraiw	a3,a3,0x18
    80015450:	fe843703          	ld	a4,-24(s0)
    80015454:	2701                	sext.w	a4,a4
    80015456:	8b0d                	andi	a4,a4,3
    80015458:	2701                	sext.w	a4,a4
    8001545a:	0017171b          	slliw	a4,a4,0x1
    8001545e:	2701                	sext.w	a4,a4
    80015460:	4605                	li	a2,1
    80015462:	00e6173b          	sllw	a4,a2,a4
    80015466:	2701                	sext.w	a4,a4
    80015468:	0187171b          	slliw	a4,a4,0x18
    8001546c:	4187571b          	sraiw	a4,a4,0x18
    80015470:	8f55                	or	a4,a4,a3
    80015472:	0187169b          	slliw	a3,a4,0x18
    80015476:	4186d69b          	sraiw	a3,a3,0x18
    8001547a:	00004717          	auipc	a4,0x4
    8001547e:	c0670713          	addi	a4,a4,-1018 # 80019080 <bookkeeping>
    80015482:	6318                	ld	a4,0(a4)
    80015484:	97ba                	add	a5,a5,a4
    80015486:	0ff6f713          	andi	a4,a3,255
    8001548a:	00e78023          	sb	a4,0(a5)
}
    8001548e:	0001                	nop
    80015490:	6462                	ld	s0,24(sp)
    80015492:	6105                	addi	sp,sp,32
    80015494:	8082                	ret

0000000080015496 <clear_taken>:

static void clear_taken(uint64_t index)
{
    80015496:	1101                	addi	sp,sp,-32
    80015498:	ec22                	sd	s0,24(sp)
    8001549a:	1000                	addi	s0,sp,32
    8001549c:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2));
    800154a0:	00004797          	auipc	a5,0x4
    800154a4:	be078793          	addi	a5,a5,-1056 # 80019080 <bookkeeping>
    800154a8:	6398                	ld	a4,0(a5)
    800154aa:	fe843783          	ld	a5,-24(s0)
    800154ae:	8389                	srli	a5,a5,0x2
    800154b0:	973e                	add	a4,a4,a5
    800154b2:	00074703          	lbu	a4,0(a4)
    800154b6:	0187169b          	slliw	a3,a4,0x18
    800154ba:	4186d69b          	sraiw	a3,a3,0x18
    800154be:	fe843703          	ld	a4,-24(s0)
    800154c2:	2701                	sext.w	a4,a4
    800154c4:	8b0d                	andi	a4,a4,3
    800154c6:	2701                	sext.w	a4,a4
    800154c8:	0017171b          	slliw	a4,a4,0x1
    800154cc:	2701                	sext.w	a4,a4
    800154ce:	4605                	li	a2,1
    800154d0:	00e6173b          	sllw	a4,a2,a4
    800154d4:	2701                	sext.w	a4,a4
    800154d6:	0187171b          	slliw	a4,a4,0x18
    800154da:	4187571b          	sraiw	a4,a4,0x18
    800154de:	fff74713          	not	a4,a4
    800154e2:	0187171b          	slliw	a4,a4,0x18
    800154e6:	4187571b          	sraiw	a4,a4,0x18
    800154ea:	8f75                	and	a4,a4,a3
    800154ec:	0187169b          	slliw	a3,a4,0x18
    800154f0:	4186d69b          	sraiw	a3,a3,0x18
    800154f4:	00004717          	auipc	a4,0x4
    800154f8:	b8c70713          	addi	a4,a4,-1140 # 80019080 <bookkeeping>
    800154fc:	6318                	ld	a4,0(a4)
    800154fe:	97ba                	add	a5,a5,a4
    80015500:	0ff6f713          	andi	a4,a3,255
    80015504:	00e78023          	sb	a4,0(a5)
}
    80015508:	0001                	nop
    8001550a:	6462                	ld	s0,24(sp)
    8001550c:	6105                	addi	sp,sp,32
    8001550e:	8082                	ret

0000000080015510 <is_taken>:

static int is_taken(uint64_t index)
{
    80015510:	1101                	addi	sp,sp,-32
    80015512:	ec22                	sd	s0,24(sp)
    80015514:	1000                	addi	s0,sp,32
    80015516:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2));
    8001551a:	00004797          	auipc	a5,0x4
    8001551e:	b6678793          	addi	a5,a5,-1178 # 80019080 <bookkeeping>
    80015522:	6398                	ld	a4,0(a5)
    80015524:	fe843783          	ld	a5,-24(s0)
    80015528:	8389                	srli	a5,a5,0x2
    8001552a:	97ba                	add	a5,a5,a4
    8001552c:	0007c783          	lbu	a5,0(a5)
    80015530:	0007871b          	sext.w	a4,a5
    80015534:	fe843783          	ld	a5,-24(s0)
    80015538:	2781                	sext.w	a5,a5
    8001553a:	8b8d                	andi	a5,a5,3
    8001553c:	2781                	sext.w	a5,a5
    8001553e:	0017979b          	slliw	a5,a5,0x1
    80015542:	2781                	sext.w	a5,a5
    80015544:	4685                	li	a3,1
    80015546:	00f697bb          	sllw	a5,a3,a5
    8001554a:	2781                	sext.w	a5,a5
    8001554c:	8ff9                	and	a5,a5,a4
    8001554e:	2781                	sext.w	a5,a5
}
    80015550:	853e                	mv	a0,a5
    80015552:	6462                	ld	s0,24(sp)
    80015554:	6105                	addi	sp,sp,32
    80015556:	8082                	ret

0000000080015558 <set_last>:

static void set_last(uint64_t index)
{
    80015558:	1101                	addi	sp,sp,-32
    8001555a:	ec22                	sd	s0,24(sp)
    8001555c:	1000                	addi	s0,sp,32
    8001555e:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2 + 1));
    80015562:	00004797          	auipc	a5,0x4
    80015566:	b1e78793          	addi	a5,a5,-1250 # 80019080 <bookkeeping>
    8001556a:	6398                	ld	a4,0(a5)
    8001556c:	fe843783          	ld	a5,-24(s0)
    80015570:	8389                	srli	a5,a5,0x2
    80015572:	973e                	add	a4,a4,a5
    80015574:	00074703          	lbu	a4,0(a4)
    80015578:	0187169b          	slliw	a3,a4,0x18
    8001557c:	4186d69b          	sraiw	a3,a3,0x18
    80015580:	fe843703          	ld	a4,-24(s0)
    80015584:	2701                	sext.w	a4,a4
    80015586:	8b0d                	andi	a4,a4,3
    80015588:	2701                	sext.w	a4,a4
    8001558a:	0017171b          	slliw	a4,a4,0x1
    8001558e:	2701                	sext.w	a4,a4
    80015590:	2705                	addiw	a4,a4,1
    80015592:	2701                	sext.w	a4,a4
    80015594:	4605                	li	a2,1
    80015596:	00e6173b          	sllw	a4,a2,a4
    8001559a:	2701                	sext.w	a4,a4
    8001559c:	0187171b          	slliw	a4,a4,0x18
    800155a0:	4187571b          	sraiw	a4,a4,0x18
    800155a4:	8f55                	or	a4,a4,a3
    800155a6:	0187169b          	slliw	a3,a4,0x18
    800155aa:	4186d69b          	sraiw	a3,a3,0x18
    800155ae:	00004717          	auipc	a4,0x4
    800155b2:	ad270713          	addi	a4,a4,-1326 # 80019080 <bookkeeping>
    800155b6:	6318                	ld	a4,0(a4)
    800155b8:	97ba                	add	a5,a5,a4
    800155ba:	0ff6f713          	andi	a4,a3,255
    800155be:	00e78023          	sb	a4,0(a5)
}
    800155c2:	0001                	nop
    800155c4:	6462                	ld	s0,24(sp)
    800155c6:	6105                	addi	sp,sp,32
    800155c8:	8082                	ret

00000000800155ca <clear_last>:

static void clear_last(uint64_t index)
{
    800155ca:	1101                	addi	sp,sp,-32
    800155cc:	ec22                	sd	s0,24(sp)
    800155ce:	1000                	addi	s0,sp,32
    800155d0:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2 + 1));
    800155d4:	00004797          	auipc	a5,0x4
    800155d8:	aac78793          	addi	a5,a5,-1364 # 80019080 <bookkeeping>
    800155dc:	6398                	ld	a4,0(a5)
    800155de:	fe843783          	ld	a5,-24(s0)
    800155e2:	8389                	srli	a5,a5,0x2
    800155e4:	973e                	add	a4,a4,a5
    800155e6:	00074703          	lbu	a4,0(a4)
    800155ea:	0187169b          	slliw	a3,a4,0x18
    800155ee:	4186d69b          	sraiw	a3,a3,0x18
    800155f2:	fe843703          	ld	a4,-24(s0)
    800155f6:	2701                	sext.w	a4,a4
    800155f8:	8b0d                	andi	a4,a4,3
    800155fa:	2701                	sext.w	a4,a4
    800155fc:	0017171b          	slliw	a4,a4,0x1
    80015600:	2701                	sext.w	a4,a4
    80015602:	2705                	addiw	a4,a4,1
    80015604:	2701                	sext.w	a4,a4
    80015606:	4605                	li	a2,1
    80015608:	00e6173b          	sllw	a4,a2,a4
    8001560c:	2701                	sext.w	a4,a4
    8001560e:	0187171b          	slliw	a4,a4,0x18
    80015612:	4187571b          	sraiw	a4,a4,0x18
    80015616:	fff74713          	not	a4,a4
    8001561a:	0187171b          	slliw	a4,a4,0x18
    8001561e:	4187571b          	sraiw	a4,a4,0x18
    80015622:	8f75                	and	a4,a4,a3
    80015624:	0187169b          	slliw	a3,a4,0x18
    80015628:	4186d69b          	sraiw	a3,a3,0x18
    8001562c:	00004717          	auipc	a4,0x4
    80015630:	a5470713          	addi	a4,a4,-1452 # 80019080 <bookkeeping>
    80015634:	6318                	ld	a4,0(a4)
    80015636:	97ba                	add	a5,a5,a4
    80015638:	0ff6f713          	andi	a4,a3,255
    8001563c:	00e78023          	sb	a4,0(a5)
}
    80015640:	0001                	nop
    80015642:	6462                	ld	s0,24(sp)
    80015644:	6105                	addi	sp,sp,32
    80015646:	8082                	ret

0000000080015648 <is_last>:

static int is_last(uint64_t index)
{
    80015648:	1101                	addi	sp,sp,-32
    8001564a:	ec22                	sd	s0,24(sp)
    8001564c:	1000                	addi	s0,sp,32
    8001564e:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2 + 1));
    80015652:	00004797          	auipc	a5,0x4
    80015656:	a2e78793          	addi	a5,a5,-1490 # 80019080 <bookkeeping>
    8001565a:	6398                	ld	a4,0(a5)
    8001565c:	fe843783          	ld	a5,-24(s0)
    80015660:	8389                	srli	a5,a5,0x2
    80015662:	97ba                	add	a5,a5,a4
    80015664:	0007c783          	lbu	a5,0(a5)
    80015668:	0007871b          	sext.w	a4,a5
    8001566c:	fe843783          	ld	a5,-24(s0)
    80015670:	2781                	sext.w	a5,a5
    80015672:	8b8d                	andi	a5,a5,3
    80015674:	2781                	sext.w	a5,a5
    80015676:	0017979b          	slliw	a5,a5,0x1
    8001567a:	2781                	sext.w	a5,a5
    8001567c:	2785                	addiw	a5,a5,1
    8001567e:	2781                	sext.w	a5,a5
    80015680:	4685                	li	a3,1
    80015682:	00f697bb          	sllw	a5,a3,a5
    80015686:	2781                	sext.w	a5,a5
    80015688:	8ff9                	and	a5,a5,a4
    8001568a:	2781                	sext.w	a5,a5
}
    8001568c:	853e                	mv	a0,a5
    8001568e:	6462                	ld	s0,24(sp)
    80015690:	6105                	addi	sp,sp,32
    80015692:	8082                	ret

0000000080015694 <page_init>:

void page_init(void)
{
    80015694:	1101                	addi	sp,sp,-32
    80015696:	ec06                	sd	ra,24(sp)
    80015698:	e822                	sd	s0,16(sp)
    8001569a:	1000                	addi	s0,sp,32
    /* Initialize the page system. */
    bookkeeping = (uint8_t*)sym_start(heap);
    8001569c:	00004797          	auipc	a5,0x4
    800156a0:	9e478793          	addi	a5,a5,-1564 # 80019080 <bookkeeping>
    800156a4:	00010717          	auipc	a4,0x10
    800156a8:	95c70713          	addi	a4,a4,-1700 # 80025000 <_heap_start>
    800156ac:	e398                	sd	a4,0(a5)
    
    // Print bookkeeping area
    mutex_spinlock(&page_lock);
    800156ae:	00004517          	auipc	a0,0x4
    800156b2:	95a50513          	addi	a0,a0,-1702 # 80019008 <page_lock>
    800156b6:	a7dfd0ef          	jal	ra,80013132 <mutex_spinlock>

    // Initialize the bookkeeping area
    memset(bookkeeping, 0, BK_SIZE_IN_BYTES);
    800156ba:	00004797          	auipc	a5,0x4
    800156be:	9c678793          	addi	a5,a5,-1594 # 80019080 <bookkeeping>
    800156c2:	6394                	ld	a3,0(a5)
    800156c4:	07ffb717          	auipc	a4,0x7ffb
    800156c8:	93c70713          	addi	a4,a4,-1732 # 88010000 <_heap_end>
    800156cc:	00010797          	auipc	a5,0x10
    800156d0:	93478793          	addi	a5,a5,-1740 # 80025000 <_heap_start>
    800156d4:	40f707b3          	sub	a5,a4,a5
    800156d8:	83b9                	srli	a5,a5,0xe
    800156da:	0007871b          	sext.w	a4,a5
    800156de:	6785                	lui	a5,0x1
    800156e0:	37fd                	addiw	a5,a5,-1
    800156e2:	9fb9                	addw	a5,a5,a4
    800156e4:	2781                	sext.w	a5,a5
    800156e6:	0007871b          	sext.w	a4,a5
    800156ea:	77fd                	lui	a5,0xfffff
    800156ec:	8ff9                	and	a5,a5,a4
    800156ee:	2781                	sext.w	a5,a5
    800156f0:	863e                	mv	a2,a5
    800156f2:	4581                	li	a1,0
    800156f4:	8536                	mv	a0,a3
    800156f6:	3bd000ef          	jal	ra,800162b2 <memset>
    // Mark the bookkeeping pages as taken
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    800156fa:	fe043423          	sd	zero,-24(s0)
    800156fe:	a811                	j	80015712 <page_init+0x7e>
        set_taken(i);
    80015700:	fe843503          	ld	a0,-24(s0)
    80015704:	d25ff0ef          	jal	ra,80015428 <set_taken>
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    80015708:	fe843783          	ld	a5,-24(s0)
    8001570c:	0785                	addi	a5,a5,1
    8001570e:	fef43423          	sd	a5,-24(s0)
    80015712:	07ffb717          	auipc	a4,0x7ffb
    80015716:	8ee70713          	addi	a4,a4,-1810 # 88010000 <_heap_end>
    8001571a:	00010797          	auipc	a5,0x10
    8001571e:	8e678793          	addi	a5,a5,-1818 # 80025000 <_heap_start>
    80015722:	40f707b3          	sub	a5,a4,a5
    80015726:	00e7d713          	srli	a4,a5,0xe
    8001572a:	6785                	lui	a5,0x1
    8001572c:	17fd                	addi	a5,a5,-1
    8001572e:	97ba                	add	a5,a5,a4
    80015730:	83b1                	srli	a5,a5,0xc
    80015732:	fe843703          	ld	a4,-24(s0)
    80015736:	fcf765e3          	bltu	a4,a5,80015700 <page_init+0x6c>
    }
    set_last(BK_SIZE_IN_PAGES - 1);
    8001573a:	07ffb717          	auipc	a4,0x7ffb
    8001573e:	8c670713          	addi	a4,a4,-1850 # 88010000 <_heap_end>
    80015742:	00010797          	auipc	a5,0x10
    80015746:	8be78793          	addi	a5,a5,-1858 # 80025000 <_heap_start>
    8001574a:	40f707b3          	sub	a5,a4,a5
    8001574e:	00e7d713          	srli	a4,a5,0xe
    80015752:	6785                	lui	a5,0x1
    80015754:	17fd                	addi	a5,a5,-1
    80015756:	97ba                	add	a5,a5,a4
    80015758:	83b1                	srli	a5,a5,0xc
    8001575a:	17fd                	addi	a5,a5,-1
    8001575c:	853e                	mv	a0,a5
    8001575e:	dfbff0ef          	jal	ra,80015558 <set_last>

    debugf("page_init: bookkeeping area initialized\n");
    80015762:	00005517          	auipc	a0,0x5
    80015766:	5ee50513          	addi	a0,a0,1518 # 8001ad50 <pow10.0+0xb20>
    8001576a:	d84ff0ef          	jal	ra,80014cee <debugf>
    debugf("page_init: bookkeeping area starts at 0x%08lx\n", bookkeeping);
    8001576e:	00004797          	auipc	a5,0x4
    80015772:	91278793          	addi	a5,a5,-1774 # 80019080 <bookkeeping>
    80015776:	639c                	ld	a5,0(a5)
    80015778:	85be                	mv	a1,a5
    8001577a:	00005517          	auipc	a0,0x5
    8001577e:	60650513          	addi	a0,a0,1542 # 8001ad80 <pow10.0+0xb50>
    80015782:	d6cff0ef          	jal	ra,80014cee <debugf>
    debugf("page_init: bookkeeping area ends at 0x%08lx\n", bookkeeping + BK_SIZE_IN_BYTES);
    80015786:	00004797          	auipc	a5,0x4
    8001578a:	8fa78793          	addi	a5,a5,-1798 # 80019080 <bookkeeping>
    8001578e:	6398                	ld	a4,0(a5)
    80015790:	07ffb697          	auipc	a3,0x7ffb
    80015794:	87068693          	addi	a3,a3,-1936 # 88010000 <_heap_end>
    80015798:	00010797          	auipc	a5,0x10
    8001579c:	86878793          	addi	a5,a5,-1944 # 80025000 <_heap_start>
    800157a0:	40f687b3          	sub	a5,a3,a5
    800157a4:	00e7d693          	srli	a3,a5,0xe
    800157a8:	6785                	lui	a5,0x1
    800157aa:	17fd                	addi	a5,a5,-1
    800157ac:	96be                	add	a3,a3,a5
    800157ae:	77fd                	lui	a5,0xfffff
    800157b0:	8ff5                	and	a5,a5,a3
    800157b2:	97ba                	add	a5,a5,a4
    800157b4:	85be                	mv	a1,a5
    800157b6:	00005517          	auipc	a0,0x5
    800157ba:	5fa50513          	addi	a0,a0,1530 # 8001adb0 <pow10.0+0xb80>
    800157be:	d30ff0ef          	jal	ra,80014cee <debugf>
    mutex_unlock(&page_lock);
    800157c2:	00004517          	auipc	a0,0x4
    800157c6:	84650513          	addi	a0,a0,-1978 # 80019008 <page_lock>
    800157ca:	997fd0ef          	jal	ra,80013160 <mutex_unlock>
    // logf(LOG_INFO, "Page Init: 0x%08lx -> 0x%08lx\n", bookkeeping, bookkeeping + BK_SIZE_IN_BYTES);
    // logf(LOG_INFO, "  Heap size: 0x%lx bytes, %lu pages\n", HEAP_SIZE_IN_BYTES, HEAP_SIZE_IN_PAGES);
    // logf(LOG_INFO, "  Bookkeeping size: 0x%lx bytes, %lu pages\n", BK_SIZE_IN_BYTES, BK_SIZE_IN_PAGES);
    // logf(LOG_INFO, "  Taken pages: %lu\n", page_count_taken());
    // logf(LOG_INFO, "  Free pages: %lu\n", page_count_free());
}
    800157ce:	0001                	nop
    800157d0:	60e2                	ld	ra,24(sp)
    800157d2:	6442                	ld	s0,16(sp)
    800157d4:	6105                	addi	sp,sp,32
    800157d6:	8082                	ret

00000000800157d8 <page_nalloc>:

void *page_nalloc(int n)
{
    800157d8:	7139                	addi	sp,sp,-64
    800157da:	fc06                	sd	ra,56(sp)
    800157dc:	f822                	sd	s0,48(sp)
    800157de:	0080                	addi	s0,sp,64
    800157e0:	87aa                	mv	a5,a0
    800157e2:	fcf42623          	sw	a5,-52(s0)
    if (n <= 0) {
    800157e6:	fcc42783          	lw	a5,-52(s0)
    800157ea:	2781                	sext.w	a5,a5
    800157ec:	00f04463          	bgtz	a5,800157f4 <page_nalloc+0x1c>
        return NULL;
    800157f0:	4781                	li	a5,0
    800157f2:	a8e5                	j	800158ea <page_nalloc+0x112>
    }

    mutex_spinlock(&page_lock);
    800157f4:	00004517          	auipc	a0,0x4
    800157f8:	81450513          	addi	a0,a0,-2028 # 80019008 <page_lock>
    800157fc:	937fd0ef          	jal	ra,80013132 <mutex_spinlock>

    int start = 0;
    80015800:	fe042623          	sw	zero,-20(s0)
    int consecutive = 0;
    80015804:	fe042423          	sw	zero,-24(s0)

    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80015808:	fe043023          	sd	zero,-32(s0)
    8001580c:	a84d                	j	800158be <page_nalloc+0xe6>
        if (!is_taken(i)) {
    8001580e:	fe043503          	ld	a0,-32(s0)
    80015812:	cffff0ef          	jal	ra,80015510 <is_taken>
    80015816:	87aa                	mv	a5,a0
    80015818:	efc1                	bnez	a5,800158b0 <page_nalloc+0xd8>
            if (consecutive == 0) {
    8001581a:	fe842783          	lw	a5,-24(s0)
    8001581e:	2781                	sext.w	a5,a5
    80015820:	e789                	bnez	a5,8001582a <page_nalloc+0x52>
                start = i;
    80015822:	fe043783          	ld	a5,-32(s0)
    80015826:	fef42623          	sw	a5,-20(s0)
            }

            consecutive++;
    8001582a:	fe842783          	lw	a5,-24(s0)
    8001582e:	2785                	addiw	a5,a5,1
    80015830:	fef42423          	sw	a5,-24(s0)

            if (consecutive >= n) {
    80015834:	fe842703          	lw	a4,-24(s0)
    80015838:	fcc42783          	lw	a5,-52(s0)
    8001583c:	2701                	sext.w	a4,a4
    8001583e:	2781                	sext.w	a5,a5
    80015840:	06f74a63          	blt	a4,a5,800158b4 <page_nalloc+0xdc>
                // debugf("page_nalloc: found %d consecutive pages starting at 0x%08lx\n", n, start);
                for (int j = 0; j < n; j++) {
    80015844:	fc042e23          	sw	zero,-36(s0)
    80015848:	a839                	j	80015866 <page_nalloc+0x8e>
                    // debugf("page_nalloc: marking page 0x%08lx as taken\n", start + j);
                    set_taken(start + j);
    8001584a:	fec42703          	lw	a4,-20(s0)
    8001584e:	fdc42783          	lw	a5,-36(s0)
    80015852:	9fb9                	addw	a5,a5,a4
    80015854:	2781                	sext.w	a5,a5
    80015856:	853e                	mv	a0,a5
    80015858:	bd1ff0ef          	jal	ra,80015428 <set_taken>
                for (int j = 0; j < n; j++) {
    8001585c:	fdc42783          	lw	a5,-36(s0)
    80015860:	2785                	addiw	a5,a5,1
    80015862:	fcf42e23          	sw	a5,-36(s0)
    80015866:	fdc42703          	lw	a4,-36(s0)
    8001586a:	fcc42783          	lw	a5,-52(s0)
    8001586e:	2701                	sext.w	a4,a4
    80015870:	2781                	sext.w	a5,a5
    80015872:	fcf74ce3          	blt	a4,a5,8001584a <page_nalloc+0x72>
                }
                // debugf("page_nalloc: marking page 0x%08lx as last\n", start + n - 1);
                set_last(start + n - 1);
    80015876:	fec42703          	lw	a4,-20(s0)
    8001587a:	fcc42783          	lw	a5,-52(s0)
    8001587e:	9fb9                	addw	a5,a5,a4
    80015880:	2781                	sext.w	a5,a5
    80015882:	37fd                	addiw	a5,a5,-1
    80015884:	2781                	sext.w	a5,a5
    80015886:	853e                	mv	a0,a5
    80015888:	cd1ff0ef          	jal	ra,80015558 <set_last>

                mutex_unlock(&page_lock);
    8001588c:	00003517          	auipc	a0,0x3
    80015890:	77c50513          	addi	a0,a0,1916 # 80019008 <page_lock>
    80015894:	8cdfd0ef          	jal	ra,80013160 <mutex_unlock>
                return (void *)(bookkeeping + start * PAGE_SIZE);
    80015898:	00003797          	auipc	a5,0x3
    8001589c:	7e878793          	addi	a5,a5,2024 # 80019080 <bookkeeping>
    800158a0:	639c                	ld	a5,0(a5)
    800158a2:	fec42703          	lw	a4,-20(s0)
    800158a6:	00c7171b          	slliw	a4,a4,0xc
    800158aa:	2701                	sext.w	a4,a4
    800158ac:	97ba                	add	a5,a5,a4
    800158ae:	a835                	j	800158ea <page_nalloc+0x112>
            }
        } else {
            // debugf("page_nalloc: page 0x%08lx is taken\n", i);
            consecutive = 0;
    800158b0:	fe042423          	sw	zero,-24(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    800158b4:	fe043783          	ld	a5,-32(s0)
    800158b8:	0785                	addi	a5,a5,1
    800158ba:	fef43023          	sd	a5,-32(s0)
    800158be:	07ffa717          	auipc	a4,0x7ffa
    800158c2:	74270713          	addi	a4,a4,1858 # 88010000 <_heap_end>
    800158c6:	0000f797          	auipc	a5,0xf
    800158ca:	73a78793          	addi	a5,a5,1850 # 80025000 <_heap_start>
    800158ce:	40f707b3          	sub	a5,a4,a5
    800158d2:	83b1                	srli	a5,a5,0xc
    800158d4:	fe043703          	ld	a4,-32(s0)
    800158d8:	f2f76be3          	bltu	a4,a5,8001580e <page_nalloc+0x36>
        }
    }

    mutex_unlock(&page_lock);
    800158dc:	00003517          	auipc	a0,0x3
    800158e0:	72c50513          	addi	a0,a0,1836 # 80019008 <page_lock>
    800158e4:	87dfd0ef          	jal	ra,80013160 <mutex_unlock>
    return NULL;
    800158e8:	4781                	li	a5,0
}
    800158ea:	853e                	mv	a0,a5
    800158ec:	70e2                	ld	ra,56(sp)
    800158ee:	7442                	ld	s0,48(sp)
    800158f0:	6121                	addi	sp,sp,64
    800158f2:	8082                	ret

00000000800158f4 <page_znalloc>:

void *page_znalloc(int n)
{
    800158f4:	7179                	addi	sp,sp,-48
    800158f6:	f406                	sd	ra,40(sp)
    800158f8:	f022                	sd	s0,32(sp)
    800158fa:	1800                	addi	s0,sp,48
    800158fc:	87aa                	mv	a5,a0
    800158fe:	fcf42e23          	sw	a5,-36(s0)
    if (n <= 0) {
    80015902:	fdc42783          	lw	a5,-36(s0)
    80015906:	2781                	sext.w	a5,a5
    80015908:	00f04463          	bgtz	a5,80015910 <page_znalloc+0x1c>
        return NULL;
    8001590c:	4781                	li	a5,0
    8001590e:	a805                	j	8001593e <page_znalloc+0x4a>
    }
    
    void *mem = page_nalloc(n);
    80015910:	fdc42783          	lw	a5,-36(s0)
    80015914:	853e                	mv	a0,a5
    80015916:	ec3ff0ef          	jal	ra,800157d8 <page_nalloc>
    8001591a:	fea43423          	sd	a0,-24(s0)
    if (mem) {
    8001591e:	fe843783          	ld	a5,-24(s0)
    80015922:	cf81                	beqz	a5,8001593a <page_znalloc+0x46>
        // debugf("page_znalloc: zeroing out %d pages starting at 0x%08lx\n", n, mem);
        memset(mem, 0, n * PAGE_SIZE);
    80015924:	fdc42783          	lw	a5,-36(s0)
    80015928:	00c7979b          	slliw	a5,a5,0xc
    8001592c:	2781                	sext.w	a5,a5
    8001592e:	863e                	mv	a2,a5
    80015930:	4581                	li	a1,0
    80015932:	fe843503          	ld	a0,-24(s0)
    80015936:	17d000ef          	jal	ra,800162b2 <memset>
    }
    return mem;
    8001593a:	fe843783          	ld	a5,-24(s0)
}
    8001593e:	853e                	mv	a0,a5
    80015940:	70a2                	ld	ra,40(sp)
    80015942:	7402                	ld	s0,32(sp)
    80015944:	6145                	addi	sp,sp,48
    80015946:	8082                	ret

0000000080015948 <page_free>:

void page_free(void *p)
{
    80015948:	7179                	addi	sp,sp,-48
    8001594a:	f406                	sd	ra,40(sp)
    8001594c:	f022                	sd	s0,32(sp)
    8001594e:	1800                	addi	s0,sp,48
    80015950:	fca43c23          	sd	a0,-40(s0)
    if (p == NULL) {
    80015954:	fd843783          	ld	a5,-40(s0)
    80015958:	c3d9                	beqz	a5,800159de <page_free+0x96>
        return;
    }
    /* Free the page */
    uint64_t x = ((uint64_t)p - (uint64_t)bookkeeping) / PAGE_SIZE;
    8001595a:	fd843783          	ld	a5,-40(s0)
    8001595e:	00003717          	auipc	a4,0x3
    80015962:	72270713          	addi	a4,a4,1826 # 80019080 <bookkeeping>
    80015966:	6318                	ld	a4,0(a4)
    80015968:	8f99                	sub	a5,a5,a4
    8001596a:	83b1                	srli	a5,a5,0xc
    8001596c:	fef43423          	sd	a5,-24(s0)
    // debugf("page_free: freeing page %lu at address 0x%p\n", x, p);

    mutex_spinlock(&page_lock);
    80015970:	00003517          	auipc	a0,0x3
    80015974:	69850513          	addi	a0,a0,1688 # 80019008 <page_lock>
    80015978:	fbafd0ef          	jal	ra,80013132 <mutex_spinlock>


    if (!is_taken(x)) {
    8001597c:	fe843503          	ld	a0,-24(s0)
    80015980:	b91ff0ef          	jal	ra,80015510 <is_taken>
    80015984:	87aa                	mv	a5,a0
    80015986:	e38d                	bnez	a5,800159a8 <page_free+0x60>
        // logf(LOG_ERROR, "page_free: page 0x%08lx is already free!\n", x);
        mutex_unlock(&page_lock);
    80015988:	00003517          	auipc	a0,0x3
    8001598c:	68050513          	addi	a0,a0,1664 # 80019008 <page_lock>
    80015990:	fd0fd0ef          	jal	ra,80013160 <mutex_unlock>
        return;
    80015994:	a0b1                	j	800159e0 <page_free+0x98>
    }

    // Clear all the pages starting at the index until the last page
    while (is_taken(x) && !is_last(x)) {
        clear_taken(x);
    80015996:	fe843503          	ld	a0,-24(s0)
    8001599a:	afdff0ef          	jal	ra,80015496 <clear_taken>
        x++;
    8001599e:	fe843783          	ld	a5,-24(s0)
    800159a2:	0785                	addi	a5,a5,1
    800159a4:	fef43423          	sd	a5,-24(s0)
    while (is_taken(x) && !is_last(x)) {
    800159a8:	fe843503          	ld	a0,-24(s0)
    800159ac:	b65ff0ef          	jal	ra,80015510 <is_taken>
    800159b0:	87aa                	mv	a5,a0
    800159b2:	c799                	beqz	a5,800159c0 <page_free+0x78>
    800159b4:	fe843503          	ld	a0,-24(s0)
    800159b8:	c91ff0ef          	jal	ra,80015648 <is_last>
    800159bc:	87aa                	mv	a5,a0
    800159be:	dfe1                	beqz	a5,80015996 <page_free+0x4e>
    }
    clear_taken(x);
    800159c0:	fe843503          	ld	a0,-24(s0)
    800159c4:	ad3ff0ef          	jal	ra,80015496 <clear_taken>
    clear_last(x);
    800159c8:	fe843503          	ld	a0,-24(s0)
    800159cc:	bffff0ef          	jal	ra,800155ca <clear_last>


    mutex_unlock(&page_lock);
    800159d0:	00003517          	auipc	a0,0x3
    800159d4:	63850513          	addi	a0,a0,1592 # 80019008 <page_lock>
    800159d8:	f88fd0ef          	jal	ra,80013160 <mutex_unlock>
    800159dc:	a011                	j	800159e0 <page_free+0x98>
        return;
    800159de:	0001                	nop
}
    800159e0:	70a2                	ld	ra,40(sp)
    800159e2:	7402                	ld	s0,32(sp)
    800159e4:	6145                	addi	sp,sp,48
    800159e6:	8082                	ret

00000000800159e8 <page_count_free>:

int page_count_free(void)
{
    800159e8:	1101                	addi	sp,sp,-32
    800159ea:	ec06                	sd	ra,24(sp)
    800159ec:	e822                	sd	s0,16(sp)
    800159ee:	1000                	addi	s0,sp,32
    int ret = 0;
    800159f0:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract taken. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract taken pages from it.
    */

    mutex_spinlock(&page_lock);
    800159f4:	00003517          	auipc	a0,0x3
    800159f8:	61450513          	addi	a0,a0,1556 # 80019008 <page_lock>
    800159fc:	f36fd0ef          	jal	ra,80013132 <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80015a00:	fe043023          	sd	zero,-32(s0)
    80015a04:	a00d                	j	80015a26 <page_count_free+0x3e>
       if (!is_taken(i)) {
    80015a06:	fe043503          	ld	a0,-32(s0)
    80015a0a:	b07ff0ef          	jal	ra,80015510 <is_taken>
    80015a0e:	87aa                	mv	a5,a0
    80015a10:	e791                	bnez	a5,80015a1c <page_count_free+0x34>
           ret++;
    80015a12:	fec42783          	lw	a5,-20(s0)
    80015a16:	2785                	addiw	a5,a5,1
    80015a18:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80015a1c:	fe043783          	ld	a5,-32(s0)
    80015a20:	0785                	addi	a5,a5,1
    80015a22:	fef43023          	sd	a5,-32(s0)
    80015a26:	07ffa717          	auipc	a4,0x7ffa
    80015a2a:	5da70713          	addi	a4,a4,1498 # 88010000 <_heap_end>
    80015a2e:	0000f797          	auipc	a5,0xf
    80015a32:	5d278793          	addi	a5,a5,1490 # 80025000 <_heap_start>
    80015a36:	40f707b3          	sub	a5,a4,a5
    80015a3a:	83b1                	srli	a5,a5,0xc
    80015a3c:	fe043703          	ld	a4,-32(s0)
    80015a40:	fcf763e3          	bltu	a4,a5,80015a06 <page_count_free+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80015a44:	00003517          	auipc	a0,0x3
    80015a48:	5c450513          	addi	a0,a0,1476 # 80019008 <page_lock>
    80015a4c:	f14fd0ef          	jal	ra,80013160 <mutex_unlock>

    return ret;
    80015a50:	fec42783          	lw	a5,-20(s0)
}
    80015a54:	853e                	mv	a0,a5
    80015a56:	60e2                	ld	ra,24(sp)
    80015a58:	6442                	ld	s0,16(sp)
    80015a5a:	6105                	addi	sp,sp,32
    80015a5c:	8082                	ret

0000000080015a5e <page_count_taken>:

int page_count_taken(void)
{
    80015a5e:	1101                	addi	sp,sp,-32
    80015a60:	ec06                	sd	ra,24(sp)
    80015a62:	e822                	sd	s0,16(sp)
    80015a64:	1000                	addi	s0,sp,32
    int ret = 0;
    80015a66:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract free. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract free pages from it.
    */

    mutex_spinlock(&page_lock);
    80015a6a:	00003517          	auipc	a0,0x3
    80015a6e:	59e50513          	addi	a0,a0,1438 # 80019008 <page_lock>
    80015a72:	ec0fd0ef          	jal	ra,80013132 <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80015a76:	fe043023          	sd	zero,-32(s0)
    80015a7a:	a00d                	j	80015a9c <page_count_taken+0x3e>
       if (is_taken(i)) {
    80015a7c:	fe043503          	ld	a0,-32(s0)
    80015a80:	a91ff0ef          	jal	ra,80015510 <is_taken>
    80015a84:	87aa                	mv	a5,a0
    80015a86:	c791                	beqz	a5,80015a92 <page_count_taken+0x34>
           ret++;
    80015a88:	fec42783          	lw	a5,-20(s0)
    80015a8c:	2785                	addiw	a5,a5,1
    80015a8e:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80015a92:	fe043783          	ld	a5,-32(s0)
    80015a96:	0785                	addi	a5,a5,1
    80015a98:	fef43023          	sd	a5,-32(s0)
    80015a9c:	07ffa717          	auipc	a4,0x7ffa
    80015aa0:	56470713          	addi	a4,a4,1380 # 88010000 <_heap_end>
    80015aa4:	0000f797          	auipc	a5,0xf
    80015aa8:	55c78793          	addi	a5,a5,1372 # 80025000 <_heap_start>
    80015aac:	40f707b3          	sub	a5,a4,a5
    80015ab0:	83b1                	srli	a5,a5,0xc
    80015ab2:	fe043703          	ld	a4,-32(s0)
    80015ab6:	fcf763e3          	bltu	a4,a5,80015a7c <page_count_taken+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80015aba:	00003517          	auipc	a0,0x3
    80015abe:	54e50513          	addi	a0,a0,1358 # 80019008 <page_lock>
    80015ac2:	e9efd0ef          	jal	ra,80013160 <mutex_unlock>

    return ret;
    80015ac6:	fec42783          	lw	a5,-20(s0)
    80015aca:	853e                	mv	a0,a5
    80015acc:	60e2                	ld	ra,24(sp)
    80015ace:	6442                	ld	s0,16(sp)
    80015ad0:	6105                	addi	sp,sp,32
    80015ad2:	8082                	ret
	...

0000000080015ae0 <_start>:
.section .text
.global _start
_start:
.option push
.option norelax
	la		sp, _stack_end
    80015ae0:	0000f117          	auipc	sp,0xf
    80015ae4:	52010113          	addi	sp,sp,1312 # 80025000 <_heap_start>
	la		gp, __global_pointer$
    80015ae8:	00003197          	auipc	gp,0x3
    80015aec:	51818193          	addi	gp,gp,1304 # 80019000 <kernel_mmu_table>
    # Unlike the SBI, we will be trap returning so that
    # we know the registers sstatus, sip, stvec, and sepc are
    # in a place where we expect them to be. We can just jump
    # into main (tail main) like the SBI, but this ensures the CSRs
    # are what we say they are instead of just assuming from the SBI.
	la		t0, main
    80015af0:	fffff297          	auipc	t0,0xfffff
    80015af4:	8b228293          	addi	t0,t0,-1870 # 800143a2 <main>
	csrw	sepc, t0
    80015af8:	14129073          	csrw	sepc,t0
	li		t0, 1 << 9
    80015afc:	20000293          	li	t0,512
	csrw	sie, t0
    80015b00:	10429073          	csrw	sie,t0
    # 1 << 13 - FS:  in the "initial" position
    # 1 << 8  - SPP: into Supervisor Mode
    # 1 << 5  - SPIE: enable interrupts
	li		t0, (1 << 13) | (1 << 8) | (1 << 5)
    80015b04:	6289                	lui	t0,0x2
    80015b06:	1202829b          	addiw	t0,t0,288
	csrw	sstatus, t0
    80015b0a:	10029073          	csrw	sstatus,t0
    # Load the return address (RA) to the park. When main
    # returns, it will park the HART.
	la		ra, park
    80015b0e:	00000097          	auipc	ra,0x0
    80015b12:	01208093          	addi	ra,ra,18 # 80015b20 <park>
	csrr	a0, sscratch
    80015b16:	14002573          	csrr	a0,sscratch
	sret
    80015b1a:	10200073          	sret
    80015b1e:	0001                	nop

0000000080015b20 <park>:

.section .text
.global park
.align 4
park:
	wfi
    80015b20:	10500073          	wfi
	j	park
    80015b24:	bff5                	j	80015b20 <park>

0000000080015b26 <park_end>:
	...

0000000080015b34 <process_asm_run>:

.section .text
.global process_asm_run
process_asm_run:
    # a0 - Trap frame
    csrw    sscratch, a0
    80015b34:	14051073          	csrw	sscratch,a0
    tail    _spawn_kthread
    80015b38:	4c80206f          	j	80018000 <_spawn_kthread>

0000000080015b3c <g_kmalloc>:
void *(*__global_kmalloc)(uint64_t size);
void *(*__global_kcalloc)(uint64_t num, uint64_t size);
void (*__global_kfree)(void *ptr);

void *g_kmalloc(uint64_t size)
{
    80015b3c:	1101                	addi	sp,sp,-32
    80015b3e:	ec06                	sd	ra,24(sp)
    80015b40:	e822                	sd	s0,16(sp)
    80015b42:	1000                	addi	s0,sp,32
    80015b44:	fea43423          	sd	a0,-24(s0)
    if (__global_kmalloc == NULL) {
    80015b48:	00003797          	auipc	a5,0x3
    80015b4c:	4c878793          	addi	a5,a5,1224 # 80019010 <__global_kmalloc>
    80015b50:	639c                	ld	a5,0(a5)
    80015b52:	e399                	bnez	a5,80015b58 <g_kmalloc+0x1c>
        return NULL;
    80015b54:	4781                	li	a5,0
    80015b56:	a811                	j	80015b6a <g_kmalloc+0x2e>
    }
    return __global_kmalloc(size);
    80015b58:	00003797          	auipc	a5,0x3
    80015b5c:	4b878793          	addi	a5,a5,1208 # 80019010 <__global_kmalloc>
    80015b60:	639c                	ld	a5,0(a5)
    80015b62:	fe843503          	ld	a0,-24(s0)
    80015b66:	9782                	jalr	a5
    80015b68:	87aa                	mv	a5,a0
}
    80015b6a:	853e                	mv	a0,a5
    80015b6c:	60e2                	ld	ra,24(sp)
    80015b6e:	6442                	ld	s0,16(sp)
    80015b70:	6105                	addi	sp,sp,32
    80015b72:	8082                	ret

0000000080015b74 <g_kcalloc>:
void *g_kcalloc(uint64_t num, uint64_t size)
{
    80015b74:	1101                	addi	sp,sp,-32
    80015b76:	ec06                	sd	ra,24(sp)
    80015b78:	e822                	sd	s0,16(sp)
    80015b7a:	1000                	addi	s0,sp,32
    80015b7c:	fea43423          	sd	a0,-24(s0)
    80015b80:	feb43023          	sd	a1,-32(s0)
    if (__global_kcalloc == NULL) {
    80015b84:	00003797          	auipc	a5,0x3
    80015b88:	49478793          	addi	a5,a5,1172 # 80019018 <__global_kcalloc>
    80015b8c:	639c                	ld	a5,0(a5)
    80015b8e:	e399                	bnez	a5,80015b94 <g_kcalloc+0x20>
        return NULL;
    80015b90:	4781                	li	a5,0
    80015b92:	a821                	j	80015baa <g_kcalloc+0x36>
    }
    return __global_kcalloc(num, size);
    80015b94:	00003797          	auipc	a5,0x3
    80015b98:	48478793          	addi	a5,a5,1156 # 80019018 <__global_kcalloc>
    80015b9c:	639c                	ld	a5,0(a5)
    80015b9e:	fe043583          	ld	a1,-32(s0)
    80015ba2:	fe843503          	ld	a0,-24(s0)
    80015ba6:	9782                	jalr	a5
    80015ba8:	87aa                	mv	a5,a0
}
    80015baa:	853e                	mv	a0,a5
    80015bac:	60e2                	ld	ra,24(sp)
    80015bae:	6442                	ld	s0,16(sp)
    80015bb0:	6105                	addi	sp,sp,32
    80015bb2:	8082                	ret

0000000080015bb4 <g_kzalloc>:
void *g_kzalloc(uint64_t size)
{
    80015bb4:	1101                	addi	sp,sp,-32
    80015bb6:	ec06                	sd	ra,24(sp)
    80015bb8:	e822                	sd	s0,16(sp)
    80015bba:	1000                	addi	s0,sp,32
    80015bbc:	fea43423          	sd	a0,-24(s0)
    return g_kcalloc(1, size);
    80015bc0:	fe843583          	ld	a1,-24(s0)
    80015bc4:	4505                	li	a0,1
    80015bc6:	fafff0ef          	jal	ra,80015b74 <g_kcalloc>
    80015bca:	87aa                	mv	a5,a0
}
    80015bcc:	853e                	mv	a0,a5
    80015bce:	60e2                	ld	ra,24(sp)
    80015bd0:	6442                	ld	s0,16(sp)
    80015bd2:	6105                	addi	sp,sp,32
    80015bd4:	8082                	ret

0000000080015bd6 <g_kfree>:
void g_kfree(void *ptr)
{
    80015bd6:	1101                	addi	sp,sp,-32
    80015bd8:	ec06                	sd	ra,24(sp)
    80015bda:	e822                	sd	s0,16(sp)
    80015bdc:	1000                	addi	s0,sp,32
    80015bde:	fea43423          	sd	a0,-24(s0)
    if (__global_kfree != NULL) {
    80015be2:	00003797          	auipc	a5,0x3
    80015be6:	43e78793          	addi	a5,a5,1086 # 80019020 <__global_kfree>
    80015bea:	639c                	ld	a5,0(a5)
    80015bec:	cb89                	beqz	a5,80015bfe <g_kfree+0x28>
        __global_kfree(ptr);
    80015bee:	00003797          	auipc	a5,0x3
    80015bf2:	43278793          	addi	a5,a5,1074 # 80019020 <__global_kfree>
    80015bf6:	639c                	ld	a5,0(a5)
    80015bf8:	fe843503          	ld	a0,-24(s0)
    80015bfc:	9782                	jalr	a5
    }
}
    80015bfe:	0001                	nop
    80015c00:	60e2                	ld	ra,24(sp)
    80015c02:	6442                	ld	s0,16(sp)
    80015c04:	6105                	addi	sp,sp,32
    80015c06:	8082                	ret

0000000080015c08 <util_connect_galloc>:

void util_connect_galloc(void *(*malloc)(uint64_t size),
                         void *(*calloc)(uint64_t elem, uint64_t size), void (*free)(void *ptr))
{
    80015c08:	7179                	addi	sp,sp,-48
    80015c0a:	f422                	sd	s0,40(sp)
    80015c0c:	1800                	addi	s0,sp,48
    80015c0e:	fea43423          	sd	a0,-24(s0)
    80015c12:	feb43023          	sd	a1,-32(s0)
    80015c16:	fcc43c23          	sd	a2,-40(s0)
    __global_kmalloc = malloc;
    80015c1a:	00003797          	auipc	a5,0x3
    80015c1e:	3f678793          	addi	a5,a5,1014 # 80019010 <__global_kmalloc>
    80015c22:	fe843703          	ld	a4,-24(s0)
    80015c26:	e398                	sd	a4,0(a5)
    __global_kcalloc = calloc;
    80015c28:	00003797          	auipc	a5,0x3
    80015c2c:	3f078793          	addi	a5,a5,1008 # 80019018 <__global_kcalloc>
    80015c30:	fe043703          	ld	a4,-32(s0)
    80015c34:	e398                	sd	a4,0(a5)
    __global_kfree   = free;
    80015c36:	00003797          	auipc	a5,0x3
    80015c3a:	3ea78793          	addi	a5,a5,1002 # 80019020 <__global_kfree>
    80015c3e:	fd843703          	ld	a4,-40(s0)
    80015c42:	e398                	sd	a4,0(a5)
}
    80015c44:	0001                	nop
    80015c46:	7422                	ld	s0,40(sp)
    80015c48:	6145                	addi	sp,sp,48
    80015c4a:	8082                	ret

0000000080015c4c <list_init>:
typedef struct List {
    ListElem head;
} List;

static List *list_init(List *lst)
{
    80015c4c:	1101                	addi	sp,sp,-32
    80015c4e:	ec22                	sd	s0,24(sp)
    80015c50:	1000                	addi	s0,sp,32
    80015c52:	fea43423          	sd	a0,-24(s0)
    lst->head.next = &lst->head;
    80015c56:	fe843703          	ld	a4,-24(s0)
    80015c5a:	fe843783          	ld	a5,-24(s0)
    80015c5e:	e798                	sd	a4,8(a5)
    lst->head.prev = &lst->head;
    80015c60:	fe843703          	ld	a4,-24(s0)
    80015c64:	fe843783          	ld	a5,-24(s0)
    80015c68:	eb98                	sd	a4,16(a5)

    return lst;
    80015c6a:	fe843783          	ld	a5,-24(s0)
}
    80015c6e:	853e                	mv	a0,a5
    80015c70:	6462                	ld	s0,24(sp)
    80015c72:	6105                	addi	sp,sp,32
    80015c74:	8082                	ret

0000000080015c76 <list_new>:

List *list_new(void)
{
    80015c76:	1101                	addi	sp,sp,-32
    80015c78:	ec06                	sd	ra,24(sp)
    80015c7a:	e822                	sd	s0,16(sp)
    80015c7c:	1000                	addi	s0,sp,32
    List *m = (List *)g_kmalloc(sizeof(List));
    80015c7e:	4561                	li	a0,24
    80015c80:	ebdff0ef          	jal	ra,80015b3c <g_kmalloc>
    80015c84:	fea43423          	sd	a0,-24(s0)
    if (m == NULL) {
    80015c88:	fe843783          	ld	a5,-24(s0)
    80015c8c:	e399                	bnez	a5,80015c92 <list_new+0x1c>
        return NULL;
    80015c8e:	4781                	li	a5,0
    80015c90:	a031                	j	80015c9c <list_new+0x26>
    }
    return list_init(m);
    80015c92:	fe843503          	ld	a0,-24(s0)
    80015c96:	fb7ff0ef          	jal	ra,80015c4c <list_init>
    80015c9a:	87aa                	mv	a5,a0
}
    80015c9c:	853e                	mv	a0,a5
    80015c9e:	60e2                	ld	ra,24(sp)
    80015ca0:	6442                	ld	s0,16(sp)
    80015ca2:	6105                	addi	sp,sp,32
    80015ca4:	8082                	ret

0000000080015ca6 <list_add>:

void list_add(List *lst, uint64_t value)
{
    80015ca6:	7179                	addi	sp,sp,-48
    80015ca8:	f406                	sd	ra,40(sp)
    80015caa:	f022                	sd	s0,32(sp)
    80015cac:	1800                	addi	s0,sp,48
    80015cae:	fca43c23          	sd	a0,-40(s0)
    80015cb2:	fcb43823          	sd	a1,-48(s0)
    ListElem *l;
    l             = (ListElem *)g_kzalloc(sizeof(ListElem));
    80015cb6:	4561                	li	a0,24
    80015cb8:	efdff0ef          	jal	ra,80015bb4 <g_kzalloc>
    80015cbc:	fea43423          	sd	a0,-24(s0)
    l->next       = lst->head.next;
    80015cc0:	fd843783          	ld	a5,-40(s0)
    80015cc4:	6798                	ld	a4,8(a5)
    80015cc6:	fe843783          	ld	a5,-24(s0)
    80015cca:	e798                	sd	a4,8(a5)
    l->prev       = &lst->head;
    80015ccc:	fd843703          	ld	a4,-40(s0)
    80015cd0:	fe843783          	ld	a5,-24(s0)
    80015cd4:	eb98                	sd	a4,16(a5)
    l->next->prev = l;
    80015cd6:	fe843783          	ld	a5,-24(s0)
    80015cda:	679c                	ld	a5,8(a5)
    80015cdc:	fe843703          	ld	a4,-24(s0)
    80015ce0:	eb98                	sd	a4,16(a5)
    l->prev->next = l;
    80015ce2:	fe843783          	ld	a5,-24(s0)
    80015ce6:	6b9c                	ld	a5,16(a5)
    80015ce8:	fe843703          	ld	a4,-24(s0)
    80015cec:	e798                	sd	a4,8(a5)
    l->value      = value;
    80015cee:	fe843783          	ld	a5,-24(s0)
    80015cf2:	fd043703          	ld	a4,-48(s0)
    80015cf6:	e398                	sd	a4,0(a5)
}
    80015cf8:	0001                	nop
    80015cfa:	70a2                	ld	ra,40(sp)
    80015cfc:	7402                	ld	s0,32(sp)
    80015cfe:	6145                	addi	sp,sp,48
    80015d00:	8082                	ret

0000000080015d02 <list_clear>:

void list_clear(List *lst)
{
    80015d02:	7179                	addi	sp,sp,-48
    80015d04:	f406                	sd	ra,40(sp)
    80015d06:	f022                	sd	s0,32(sp)
    80015d08:	1800                	addi	s0,sp,48
    80015d0a:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    for (e = lst->head.next; e != &lst->head; e = n) {
    80015d0e:	fd843783          	ld	a5,-40(s0)
    80015d12:	679c                	ld	a5,8(a5)
    80015d14:	fef43423          	sd	a5,-24(s0)
    80015d18:	a831                	j	80015d34 <list_clear+0x32>
        n = e->next;
    80015d1a:	fe843783          	ld	a5,-24(s0)
    80015d1e:	679c                	ld	a5,8(a5)
    80015d20:	fef43023          	sd	a5,-32(s0)
        list_remove_elem(e);
    80015d24:	fe843503          	ld	a0,-24(s0)
    80015d28:	120000ef          	jal	ra,80015e48 <list_remove_elem>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80015d2c:	fe043783          	ld	a5,-32(s0)
    80015d30:	fef43423          	sd	a5,-24(s0)
    80015d34:	fd843783          	ld	a5,-40(s0)
    80015d38:	fe843703          	ld	a4,-24(s0)
    80015d3c:	fcf71fe3          	bne	a4,a5,80015d1a <list_clear+0x18>
    }
}
    80015d40:	0001                	nop
    80015d42:	0001                	nop
    80015d44:	70a2                	ld	ra,40(sp)
    80015d46:	7402                	ld	s0,32(sp)
    80015d48:	6145                	addi	sp,sp,48
    80015d4a:	8082                	ret

0000000080015d4c <list_sort>:

void list_sort(List *lst, LIST_COMPARATOR_PARAM(comp))
{
    80015d4c:	7139                	addi	sp,sp,-64
    80015d4e:	fc06                	sd	ra,56(sp)
    80015d50:	f822                	sd	s0,48(sp)
    80015d52:	0080                	addi	s0,sp,64
    80015d54:	fca43423          	sd	a0,-56(s0)
    80015d58:	fcb43023          	sd	a1,-64(s0)
    ListElem *e;
    bool swapped;
    uint64_t tmp;

    do {
        swapped = false;
    80015d5c:	fe0403a3          	sb	zero,-25(s0)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80015d60:	fc843783          	ld	a5,-56(s0)
    80015d64:	6b9c                	ld	a5,16(a5)
    80015d66:	fef43423          	sd	a5,-24(s0)
    80015d6a:	a8a9                	j	80015dc4 <list_sort+0x78>
            if (!comp(e->value, e->prev->value)) {
    80015d6c:	fe843783          	ld	a5,-24(s0)
    80015d70:	6398                	ld	a4,0(a5)
    80015d72:	fe843783          	ld	a5,-24(s0)
    80015d76:	6b9c                	ld	a5,16(a5)
    80015d78:	639c                	ld	a5,0(a5)
    80015d7a:	fc043683          	ld	a3,-64(s0)
    80015d7e:	85be                	mv	a1,a5
    80015d80:	853a                	mv	a0,a4
    80015d82:	9682                	jalr	a3
    80015d84:	87aa                	mv	a5,a0
    80015d86:	0017c793          	xori	a5,a5,1
    80015d8a:	0ff7f793          	andi	a5,a5,255
    80015d8e:	c795                	beqz	a5,80015dba <list_sort+0x6e>
                swapped        = true;
    80015d90:	4785                	li	a5,1
    80015d92:	fef403a3          	sb	a5,-25(s0)
                tmp            = e->value;
    80015d96:	fe843783          	ld	a5,-24(s0)
    80015d9a:	639c                	ld	a5,0(a5)
    80015d9c:	fcf43c23          	sd	a5,-40(s0)
                e->value       = e->prev->value;
    80015da0:	fe843783          	ld	a5,-24(s0)
    80015da4:	6b9c                	ld	a5,16(a5)
    80015da6:	6398                	ld	a4,0(a5)
    80015da8:	fe843783          	ld	a5,-24(s0)
    80015dac:	e398                	sd	a4,0(a5)
                e->prev->value = tmp;
    80015dae:	fe843783          	ld	a5,-24(s0)
    80015db2:	6b9c                	ld	a5,16(a5)
    80015db4:	fd843703          	ld	a4,-40(s0)
    80015db8:	e398                	sd	a4,0(a5)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80015dba:	fe843783          	ld	a5,-24(s0)
    80015dbe:	6b9c                	ld	a5,16(a5)
    80015dc0:	fef43423          	sd	a5,-24(s0)
    80015dc4:	fe843783          	ld	a5,-24(s0)
    80015dc8:	6b98                	ld	a4,16(a5)
    80015dca:	fc843783          	ld	a5,-56(s0)
    80015dce:	f8f71fe3          	bne	a4,a5,80015d6c <list_sort+0x20>
            }
        }
    } while (swapped);
    80015dd2:	fe744783          	lbu	a5,-25(s0)
    80015dd6:	0ff7f793          	andi	a5,a5,255
    80015dda:	f3c9                	bnez	a5,80015d5c <list_sort+0x10>
}
    80015ddc:	0001                	nop
    80015dde:	0001                	nop
    80015de0:	70e2                	ld	ra,56(sp)
    80015de2:	7442                	ld	s0,48(sp)
    80015de4:	6121                	addi	sp,sp,64
    80015de6:	8082                	ret

0000000080015de8 <list_remove>:

bool list_remove(List *lst, uint64_t value)
{
    80015de8:	7179                	addi	sp,sp,-48
    80015dea:	f406                	sd	ra,40(sp)
    80015dec:	f022                	sd	s0,32(sp)
    80015dee:	1800                	addi	s0,sp,48
    80015df0:	fca43c23          	sd	a0,-40(s0)
    80015df4:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(lst, e)
    80015df8:	fd843503          	ld	a0,-40(s0)
    80015dfc:	2ca000ef          	jal	ra,800160c6 <list_elem_start_ascending>
    80015e00:	fea43423          	sd	a0,-24(s0)
    80015e04:	a025                	j	80015e2c <list_remove+0x44>
    {
        if (e->value == value) {
    80015e06:	fe843783          	ld	a5,-24(s0)
    80015e0a:	639c                	ld	a5,0(a5)
    80015e0c:	fd043703          	ld	a4,-48(s0)
    80015e10:	00f71863          	bne	a4,a5,80015e20 <list_remove+0x38>
            list_remove_elem(e);
    80015e14:	fe843503          	ld	a0,-24(s0)
    80015e18:	030000ef          	jal	ra,80015e48 <list_remove_elem>
            return true;
    80015e1c:	4785                	li	a5,1
    80015e1e:	a005                	j	80015e3e <list_remove+0x56>
    list_for_each(lst, e)
    80015e20:	fe843503          	ld	a0,-24(s0)
    80015e24:	2ea000ef          	jal	ra,8001610e <list_elem_prev>
    80015e28:	fea43423          	sd	a0,-24(s0)
    80015e2c:	fe843583          	ld	a1,-24(s0)
    80015e30:	fd843503          	ld	a0,-40(s0)
    80015e34:	204000ef          	jal	ra,80016038 <list_elem_valid>
    80015e38:	87aa                	mv	a5,a0
    80015e3a:	f7f1                	bnez	a5,80015e06 <list_remove+0x1e>
        }
    }
    return false;
    80015e3c:	4781                	li	a5,0
}
    80015e3e:	853e                	mv	a0,a5
    80015e40:	70a2                	ld	ra,40(sp)
    80015e42:	7402                	ld	s0,32(sp)
    80015e44:	6145                	addi	sp,sp,48
    80015e46:	8082                	ret

0000000080015e48 <list_remove_elem>:

void list_remove_elem(ListElem *e)
{
    80015e48:	1101                	addi	sp,sp,-32
    80015e4a:	ec06                	sd	ra,24(sp)
    80015e4c:	e822                	sd	s0,16(sp)
    80015e4e:	1000                	addi	s0,sp,32
    80015e50:	fea43423          	sd	a0,-24(s0)
    e->next->prev = e->prev;
    80015e54:	fe843783          	ld	a5,-24(s0)
    80015e58:	679c                	ld	a5,8(a5)
    80015e5a:	fe843703          	ld	a4,-24(s0)
    80015e5e:	6b18                	ld	a4,16(a4)
    80015e60:	eb98                	sd	a4,16(a5)
    e->prev->next = e->next;
    80015e62:	fe843783          	ld	a5,-24(s0)
    80015e66:	6b9c                	ld	a5,16(a5)
    80015e68:	fe843703          	ld	a4,-24(s0)
    80015e6c:	6718                	ld	a4,8(a4)
    80015e6e:	e798                	sd	a4,8(a5)
    g_kfree(e);
    80015e70:	fe843503          	ld	a0,-24(s0)
    80015e74:	d63ff0ef          	jal	ra,80015bd6 <g_kfree>
}
    80015e78:	0001                	nop
    80015e7a:	60e2                	ld	ra,24(sp)
    80015e7c:	6442                	ld	s0,16(sp)
    80015e7e:	6105                	addi	sp,sp,32
    80015e80:	8082                	ret

0000000080015e82 <list_find_elem>:

ListElem *list_find_elem(List *l, uint64_t value)
{
    80015e82:	7179                	addi	sp,sp,-48
    80015e84:	f406                	sd	ra,40(sp)
    80015e86:	f022                	sd	s0,32(sp)
    80015e88:	1800                	addi	s0,sp,48
    80015e8a:	fca43c23          	sd	a0,-40(s0)
    80015e8e:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(l, e)
    80015e92:	fd843503          	ld	a0,-40(s0)
    80015e96:	230000ef          	jal	ra,800160c6 <list_elem_start_ascending>
    80015e9a:	fea43423          	sd	a0,-24(s0)
    80015e9e:	a00d                	j	80015ec0 <list_find_elem+0x3e>
    {
        if (e->value == value) {
    80015ea0:	fe843783          	ld	a5,-24(s0)
    80015ea4:	639c                	ld	a5,0(a5)
    80015ea6:	fd043703          	ld	a4,-48(s0)
    80015eaa:	00f71563          	bne	a4,a5,80015eb4 <list_find_elem+0x32>
            return e;
    80015eae:	fe843783          	ld	a5,-24(s0)
    80015eb2:	a005                	j	80015ed2 <list_find_elem+0x50>
    list_for_each(l, e)
    80015eb4:	fe843503          	ld	a0,-24(s0)
    80015eb8:	256000ef          	jal	ra,8001610e <list_elem_prev>
    80015ebc:	fea43423          	sd	a0,-24(s0)
    80015ec0:	fe843583          	ld	a1,-24(s0)
    80015ec4:	fd843503          	ld	a0,-40(s0)
    80015ec8:	170000ef          	jal	ra,80016038 <list_elem_valid>
    80015ecc:	87aa                	mv	a5,a0
    80015ece:	fbe9                	bnez	a5,80015ea0 <list_find_elem+0x1e>
        }
    }
    return NULL;
    80015ed0:	4781                	li	a5,0
}
    80015ed2:	853e                	mv	a0,a5
    80015ed4:	70a2                	ld	ra,40(sp)
    80015ed6:	7402                	ld	s0,32(sp)
    80015ed8:	6145                	addi	sp,sp,48
    80015eda:	8082                	ret

0000000080015edc <list_contains>:

bool list_contains(const List *lst, uint64_t value)
{
    80015edc:	7179                	addi	sp,sp,-48
    80015ede:	f406                	sd	ra,40(sp)
    80015ee0:	f022                	sd	s0,32(sp)
    80015ee2:	1800                	addi	s0,sp,48
    80015ee4:	fca43c23          	sd	a0,-40(s0)
    80015ee8:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e = list_find_celem(lst, value);
    80015eec:	fd043583          	ld	a1,-48(s0)
    80015ef0:	fd843503          	ld	a0,-40(s0)
    80015ef4:	178000ef          	jal	ra,8001606c <list_find_celem>
    80015ef8:	fea43423          	sd	a0,-24(s0)

    return e == NULL ? false : true;
    80015efc:	fe843783          	ld	a5,-24(s0)
    80015f00:	00f037b3          	snez	a5,a5
    80015f04:	0ff7f793          	andi	a5,a5,255
}
    80015f08:	853e                	mv	a0,a5
    80015f0a:	70a2                	ld	ra,40(sp)
    80015f0c:	7402                	ld	s0,32(sp)
    80015f0e:	6145                	addi	sp,sp,48
    80015f10:	8082                	ret

0000000080015f12 <list_pop_back>:

ListElem *list_pop_back(List *l)
{
    80015f12:	7179                	addi	sp,sp,-48
    80015f14:	f406                	sd	ra,40(sp)
    80015f16:	f022                	sd	s0,32(sp)
    80015f18:	1800                	addi	s0,sp,48
    80015f1a:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.next) {
    80015f1e:	fd843703          	ld	a4,-40(s0)
    80015f22:	fd843783          	ld	a5,-40(s0)
    80015f26:	679c                	ld	a5,8(a5)
    80015f28:	00f71463          	bne	a4,a5,80015f30 <list_pop_back+0x1e>
        return NULL;
    80015f2c:	4781                	li	a5,0
    80015f2e:	a821                	j	80015f46 <list_pop_back+0x34>
    }
    ListElem *e = l->head.next;
    80015f30:	fd843783          	ld	a5,-40(s0)
    80015f34:	679c                	ld	a5,8(a5)
    80015f36:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    80015f3a:	fe843503          	ld	a0,-24(s0)
    80015f3e:	f0bff0ef          	jal	ra,80015e48 <list_remove_elem>
    return e;
    80015f42:	fe843783          	ld	a5,-24(s0)
}
    80015f46:	853e                	mv	a0,a5
    80015f48:	70a2                	ld	ra,40(sp)
    80015f4a:	7402                	ld	s0,32(sp)
    80015f4c:	6145                	addi	sp,sp,48
    80015f4e:	8082                	ret

0000000080015f50 <list_pop>:

ListElem *list_pop(List *l)
{
    80015f50:	7179                	addi	sp,sp,-48
    80015f52:	f406                	sd	ra,40(sp)
    80015f54:	f022                	sd	s0,32(sp)
    80015f56:	1800                	addi	s0,sp,48
    80015f58:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.prev) {
    80015f5c:	fd843703          	ld	a4,-40(s0)
    80015f60:	fd843783          	ld	a5,-40(s0)
    80015f64:	6b9c                	ld	a5,16(a5)
    80015f66:	00f71463          	bne	a4,a5,80015f6e <list_pop+0x1e>
        return NULL;
    80015f6a:	4781                	li	a5,0
    80015f6c:	a821                	j	80015f84 <list_pop+0x34>
    }
    ListElem *e = l->head.prev;
    80015f6e:	fd843783          	ld	a5,-40(s0)
    80015f72:	6b9c                	ld	a5,16(a5)
    80015f74:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    80015f78:	fe843503          	ld	a0,-24(s0)
    80015f7c:	ecdff0ef          	jal	ra,80015e48 <list_remove_elem>
    return e;
    80015f80:	fe843783          	ld	a5,-24(s0)
}
    80015f84:	853e                	mv	a0,a5
    80015f86:	70a2                	ld	ra,40(sp)
    80015f88:	7402                	ld	s0,32(sp)
    80015f8a:	6145                	addi	sp,sp,48
    80015f8c:	8082                	ret

0000000080015f8e <list_size>:

uint64_t list_size(const List *lst)
{
    80015f8e:	7179                	addi	sp,sp,-48
    80015f90:	f406                	sd	ra,40(sp)
    80015f92:	f022                	sd	s0,32(sp)
    80015f94:	1800                	addi	s0,sp,48
    80015f96:	fca43c23          	sd	a0,-40(s0)
    uint64_t s = 0;
    80015f9a:	fe043423          	sd	zero,-24(s0)
    const ListElem *e;
    list_for_ceach(lst, e)
    80015f9e:	fd843503          	ld	a0,-40(s0)
    80015fa2:	19c000ef          	jal	ra,8001613e <list_celem_start_ascending>
    80015fa6:	fea43023          	sd	a0,-32(s0)
    80015faa:	a821                	j	80015fc2 <list_size+0x34>
    {
        s += 1;
    80015fac:	fe843783          	ld	a5,-24(s0)
    80015fb0:	0785                	addi	a5,a5,1
    80015fb2:	fef43423          	sd	a5,-24(s0)
    list_for_ceach(lst, e)
    80015fb6:	fe043503          	ld	a0,-32(s0)
    80015fba:	1cc000ef          	jal	ra,80016186 <list_celem_prev>
    80015fbe:	fea43023          	sd	a0,-32(s0)
    80015fc2:	fe043583          	ld	a1,-32(s0)
    80015fc6:	fd843503          	ld	a0,-40(s0)
    80015fca:	06e000ef          	jal	ra,80016038 <list_elem_valid>
    80015fce:	87aa                	mv	a5,a0
    80015fd0:	fff1                	bnez	a5,80015fac <list_size+0x1e>
    }
    return s;
    80015fd2:	fe843783          	ld	a5,-24(s0)
}
    80015fd6:	853e                	mv	a0,a5
    80015fd8:	70a2                	ld	ra,40(sp)
    80015fda:	7402                	ld	s0,32(sp)
    80015fdc:	6145                	addi	sp,sp,48
    80015fde:	8082                	ret

0000000080015fe0 <list_free>:

void list_free(List *lst)
{
    80015fe0:	7179                	addi	sp,sp,-48
    80015fe2:	f406                	sd	ra,40(sp)
    80015fe4:	f022                	sd	s0,32(sp)
    80015fe6:	1800                	addi	s0,sp,48
    80015fe8:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    if (lst == NULL) {
    80015fec:	fd843783          	ld	a5,-40(s0)
    80015ff0:	cf9d                	beqz	a5,8001602e <list_free+0x4e>
        return;
    }
    for (e = lst->head.next; e != &lst->head; e = n) {
    80015ff2:	fd843783          	ld	a5,-40(s0)
    80015ff6:	679c                	ld	a5,8(a5)
    80015ff8:	fef43423          	sd	a5,-24(s0)
    80015ffc:	a831                	j	80016018 <list_free+0x38>
        n = e->next;
    80015ffe:	fe843783          	ld	a5,-24(s0)
    80016002:	679c                	ld	a5,8(a5)
    80016004:	fef43023          	sd	a5,-32(s0)
        g_kfree(e);
    80016008:	fe843503          	ld	a0,-24(s0)
    8001600c:	bcbff0ef          	jal	ra,80015bd6 <g_kfree>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80016010:	fe043783          	ld	a5,-32(s0)
    80016014:	fef43423          	sd	a5,-24(s0)
    80016018:	fd843783          	ld	a5,-40(s0)
    8001601c:	fe843703          	ld	a4,-24(s0)
    80016020:	fcf71fe3          	bne	a4,a5,80015ffe <list_free+0x1e>
    }
    g_kfree(lst);
    80016024:	fd843503          	ld	a0,-40(s0)
    80016028:	bafff0ef          	jal	ra,80015bd6 <g_kfree>
    8001602c:	a011                	j	80016030 <list_free+0x50>
        return;
    8001602e:	0001                	nop
}
    80016030:	70a2                	ld	ra,40(sp)
    80016032:	7402                	ld	s0,32(sp)
    80016034:	6145                	addi	sp,sp,48
    80016036:	8082                	ret

0000000080016038 <list_elem_valid>:

bool list_elem_valid(const List *l, const ListElem *e)
{
    80016038:	1101                	addi	sp,sp,-32
    8001603a:	ec22                	sd	s0,24(sp)
    8001603c:	1000                	addi	s0,sp,32
    8001603e:	fea43423          	sd	a0,-24(s0)
    80016042:	feb43023          	sd	a1,-32(s0)
    return e != NULL && e != &l->head;
    80016046:	fe043783          	ld	a5,-32(s0)
    8001604a:	cb89                	beqz	a5,8001605c <list_elem_valid+0x24>
    8001604c:	fe843783          	ld	a5,-24(s0)
    80016050:	fe043703          	ld	a4,-32(s0)
    80016054:	00f70463          	beq	a4,a5,8001605c <list_elem_valid+0x24>
    80016058:	4785                	li	a5,1
    8001605a:	a011                	j	8001605e <list_elem_valid+0x26>
    8001605c:	4781                	li	a5,0
    8001605e:	8b85                	andi	a5,a5,1
    80016060:	0ff7f793          	andi	a5,a5,255
}
    80016064:	853e                	mv	a0,a5
    80016066:	6462                	ld	s0,24(sp)
    80016068:	6105                	addi	sp,sp,32
    8001606a:	8082                	ret

000000008001606c <list_find_celem>:

const ListElem *list_find_celem(const List *l, uint64_t value) 
{
    8001606c:	7179                	addi	sp,sp,-48
    8001606e:	f406                	sd	ra,40(sp)
    80016070:	f022                	sd	s0,32(sp)
    80016072:	1800                	addi	s0,sp,48
    80016074:	fca43c23          	sd	a0,-40(s0)
    80016078:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e;
    list_for_ceach(l, e) 
    8001607c:	fd843503          	ld	a0,-40(s0)
    80016080:	0be000ef          	jal	ra,8001613e <list_celem_start_ascending>
    80016084:	fea43423          	sd	a0,-24(s0)
    80016088:	a00d                	j	800160aa <list_find_celem+0x3e>
    {
        if (e->value == value) {
    8001608a:	fe843783          	ld	a5,-24(s0)
    8001608e:	639c                	ld	a5,0(a5)
    80016090:	fd043703          	ld	a4,-48(s0)
    80016094:	00f71563          	bne	a4,a5,8001609e <list_find_celem+0x32>
            return e;
    80016098:	fe843783          	ld	a5,-24(s0)
    8001609c:	a005                	j	800160bc <list_find_celem+0x50>
    list_for_ceach(l, e) 
    8001609e:	fe843503          	ld	a0,-24(s0)
    800160a2:	0e4000ef          	jal	ra,80016186 <list_celem_prev>
    800160a6:	fea43423          	sd	a0,-24(s0)
    800160aa:	fe843583          	ld	a1,-24(s0)
    800160ae:	fd843503          	ld	a0,-40(s0)
    800160b2:	f87ff0ef          	jal	ra,80016038 <list_elem_valid>
    800160b6:	87aa                	mv	a5,a0
    800160b8:	fbe9                	bnez	a5,8001608a <list_find_celem+0x1e>
        }
    }
    return NULL;
    800160ba:	4781                	li	a5,0
}
    800160bc:	853e                	mv	a0,a5
    800160be:	70a2                	ld	ra,40(sp)
    800160c0:	7402                	ld	s0,32(sp)
    800160c2:	6145                	addi	sp,sp,48
    800160c4:	8082                	ret

00000000800160c6 <list_elem_start_ascending>:

ListElem *list_elem_start_ascending(List *l)
{
    800160c6:	1101                	addi	sp,sp,-32
    800160c8:	ec22                	sd	s0,24(sp)
    800160ca:	1000                	addi	s0,sp,32
    800160cc:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    800160d0:	fe843783          	ld	a5,-24(s0)
    800160d4:	6b9c                	ld	a5,16(a5)
}
    800160d6:	853e                	mv	a0,a5
    800160d8:	6462                	ld	s0,24(sp)
    800160da:	6105                	addi	sp,sp,32
    800160dc:	8082                	ret

00000000800160de <list_elem_start_descending>:

ListElem *list_elem_start_descending(List *l)
{
    800160de:	1101                	addi	sp,sp,-32
    800160e0:	ec22                	sd	s0,24(sp)
    800160e2:	1000                	addi	s0,sp,32
    800160e4:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    800160e8:	fe843783          	ld	a5,-24(s0)
    800160ec:	679c                	ld	a5,8(a5)
}
    800160ee:	853e                	mv	a0,a5
    800160f0:	6462                	ld	s0,24(sp)
    800160f2:	6105                	addi	sp,sp,32
    800160f4:	8082                	ret

00000000800160f6 <list_elem_next>:

ListElem *list_elem_next(ListElem *e)
{
    800160f6:	1101                	addi	sp,sp,-32
    800160f8:	ec22                	sd	s0,24(sp)
    800160fa:	1000                	addi	s0,sp,32
    800160fc:	fea43423          	sd	a0,-24(s0)
    return e->next;
    80016100:	fe843783          	ld	a5,-24(s0)
    80016104:	679c                	ld	a5,8(a5)
}
    80016106:	853e                	mv	a0,a5
    80016108:	6462                	ld	s0,24(sp)
    8001610a:	6105                	addi	sp,sp,32
    8001610c:	8082                	ret

000000008001610e <list_elem_prev>:

ListElem *list_elem_prev(ListElem *e)
{
    8001610e:	1101                	addi	sp,sp,-32
    80016110:	ec22                	sd	s0,24(sp)
    80016112:	1000                	addi	s0,sp,32
    80016114:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    80016118:	fe843783          	ld	a5,-24(s0)
    8001611c:	6b9c                	ld	a5,16(a5)
}
    8001611e:	853e                	mv	a0,a5
    80016120:	6462                	ld	s0,24(sp)
    80016122:	6105                	addi	sp,sp,32
    80016124:	8082                	ret

0000000080016126 <list_elem_value>:

uint64_t list_elem_value(const ListElem *e)
{
    80016126:	1101                	addi	sp,sp,-32
    80016128:	ec22                	sd	s0,24(sp)
    8001612a:	1000                	addi	s0,sp,32
    8001612c:	fea43423          	sd	a0,-24(s0)
    return e->value;
    80016130:	fe843783          	ld	a5,-24(s0)
    80016134:	639c                	ld	a5,0(a5)
}
    80016136:	853e                	mv	a0,a5
    80016138:	6462                	ld	s0,24(sp)
    8001613a:	6105                	addi	sp,sp,32
    8001613c:	8082                	ret

000000008001613e <list_celem_start_ascending>:

const ListElem *list_celem_start_ascending(const List *l) {
    8001613e:	1101                	addi	sp,sp,-32
    80016140:	ec22                	sd	s0,24(sp)
    80016142:	1000                	addi	s0,sp,32
    80016144:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    80016148:	fe843783          	ld	a5,-24(s0)
    8001614c:	6b9c                	ld	a5,16(a5)
}
    8001614e:	853e                	mv	a0,a5
    80016150:	6462                	ld	s0,24(sp)
    80016152:	6105                	addi	sp,sp,32
    80016154:	8082                	ret

0000000080016156 <list_celem_start_descending>:
const ListElem *list_celem_start_descending(const List *l) {
    80016156:	1101                	addi	sp,sp,-32
    80016158:	ec22                	sd	s0,24(sp)
    8001615a:	1000                	addi	s0,sp,32
    8001615c:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    80016160:	fe843783          	ld	a5,-24(s0)
    80016164:	679c                	ld	a5,8(a5)
}
    80016166:	853e                	mv	a0,a5
    80016168:	6462                	ld	s0,24(sp)
    8001616a:	6105                	addi	sp,sp,32
    8001616c:	8082                	ret

000000008001616e <list_celem_next>:
const ListElem *list_celem_next(const ListElem *e) {
    8001616e:	1101                	addi	sp,sp,-32
    80016170:	ec22                	sd	s0,24(sp)
    80016172:	1000                	addi	s0,sp,32
    80016174:	fea43423          	sd	a0,-24(s0)
    return e->next;
    80016178:	fe843783          	ld	a5,-24(s0)
    8001617c:	679c                	ld	a5,8(a5)
}
    8001617e:	853e                	mv	a0,a5
    80016180:	6462                	ld	s0,24(sp)
    80016182:	6105                	addi	sp,sp,32
    80016184:	8082                	ret

0000000080016186 <list_celem_prev>:
const ListElem *list_celem_prev(const ListElem *e) {
    80016186:	1101                	addi	sp,sp,-32
    80016188:	ec22                	sd	s0,24(sp)
    8001618a:	1000                	addi	s0,sp,32
    8001618c:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    80016190:	fe843783          	ld	a5,-24(s0)
    80016194:	6b9c                	ld	a5,16(a5)
}
    80016196:	853e                	mv	a0,a5
    80016198:	6462                	ld	s0,24(sp)
    8001619a:	6105                	addi	sp,sp,32
    8001619c:	8082                	ret

000000008001619e <list_sort_signed_long_comparator_ascending>:

// Default list comparators
LIST_COMPARATOR(list_sort_signed_long_comparator_ascending)
{
    8001619e:	1101                	addi	sp,sp,-32
    800161a0:	ec22                	sd	s0,24(sp)
    800161a2:	1000                	addi	s0,sp,32
    800161a4:	fea43423          	sd	a0,-24(s0)
    800161a8:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    800161ac:	fe843703          	ld	a4,-24(s0)
    800161b0:	fe043783          	ld	a5,-32(s0)
    800161b4:	00e7a7b3          	slt	a5,a5,a4
    800161b8:	0017c793          	xori	a5,a5,1
    800161bc:	0ff7f793          	andi	a5,a5,255
}
    800161c0:	853e                	mv	a0,a5
    800161c2:	6462                	ld	s0,24(sp)
    800161c4:	6105                	addi	sp,sp,32
    800161c6:	8082                	ret

00000000800161c8 <list_sort_signed_long_comparator_descending>:
LIST_COMPARATOR(list_sort_signed_long_comparator_descending)
{
    800161c8:	1101                	addi	sp,sp,-32
    800161ca:	ec22                	sd	s0,24(sp)
    800161cc:	1000                	addi	s0,sp,32
    800161ce:	fea43423          	sd	a0,-24(s0)
    800161d2:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    800161d6:	fe843703          	ld	a4,-24(s0)
    800161da:	fe043783          	ld	a5,-32(s0)
    800161de:	00f727b3          	slt	a5,a4,a5
    800161e2:	0017c793          	xori	a5,a5,1
    800161e6:	0ff7f793          	andi	a5,a5,255
}
    800161ea:	853e                	mv	a0,a5
    800161ec:	6462                	ld	s0,24(sp)
    800161ee:	6105                	addi	sp,sp,32
    800161f0:	8082                	ret

00000000800161f2 <list_sort_unsigned_long_comparator_ascending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_ascending)
{
    800161f2:	1101                	addi	sp,sp,-32
    800161f4:	ec22                	sd	s0,24(sp)
    800161f6:	1000                	addi	s0,sp,32
    800161f8:	fea43423          	sd	a0,-24(s0)
    800161fc:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    80016200:	fe843703          	ld	a4,-24(s0)
    80016204:	fe043783          	ld	a5,-32(s0)
    80016208:	00e7b7b3          	sltu	a5,a5,a4
    8001620c:	0017c793          	xori	a5,a5,1
    80016210:	0ff7f793          	andi	a5,a5,255
}
    80016214:	853e                	mv	a0,a5
    80016216:	6462                	ld	s0,24(sp)
    80016218:	6105                	addi	sp,sp,32
    8001621a:	8082                	ret

000000008001621c <list_sort_unsigned_long_comparator_descending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_descending)
{
    8001621c:	1101                	addi	sp,sp,-32
    8001621e:	ec22                	sd	s0,24(sp)
    80016220:	1000                	addi	s0,sp,32
    80016222:	fea43423          	sd	a0,-24(s0)
    80016226:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    8001622a:	fe843703          	ld	a4,-24(s0)
    8001622e:	fe043783          	ld	a5,-32(s0)
    80016232:	00f737b3          	sltu	a5,a4,a5
    80016236:	0017c793          	xori	a5,a5,1
    8001623a:	0ff7f793          	andi	a5,a5,255
}
    8001623e:	853e                	mv	a0,a5
    80016240:	6462                	ld	s0,24(sp)
    80016242:	6105                	addi	sp,sp,32
    80016244:	8082                	ret

0000000080016246 <list_sort_string_comparator_ascending>:
LIST_COMPARATOR(list_sort_string_comparator_ascending)
{
    80016246:	1101                	addi	sp,sp,-32
    80016248:	ec06                	sd	ra,24(sp)
    8001624a:	e822                	sd	s0,16(sp)
    8001624c:	1000                	addi	s0,sp,32
    8001624e:	fea43423          	sd	a0,-24(s0)
    80016252:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    80016256:	fe843783          	ld	a5,-24(s0)
    8001625a:	fe043703          	ld	a4,-32(s0)
    8001625e:	85ba                	mv	a1,a4
    80016260:	853e                	mv	a0,a5
    80016262:	4e0000ef          	jal	ra,80016742 <strcmp>
    80016266:	87aa                	mv	a5,a0
    80016268:	0017a793          	slti	a5,a5,1
    8001626c:	0ff7f793          	andi	a5,a5,255
}
    80016270:	853e                	mv	a0,a5
    80016272:	60e2                	ld	ra,24(sp)
    80016274:	6442                	ld	s0,16(sp)
    80016276:	6105                	addi	sp,sp,32
    80016278:	8082                	ret

000000008001627a <list_sort_string_comparator_descending>:
LIST_COMPARATOR(list_sort_string_comparator_descending)
{
    8001627a:	1101                	addi	sp,sp,-32
    8001627c:	ec06                	sd	ra,24(sp)
    8001627e:	e822                	sd	s0,16(sp)
    80016280:	1000                	addi	s0,sp,32
    80016282:	fea43423          	sd	a0,-24(s0)
    80016286:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    8001628a:	fe843783          	ld	a5,-24(s0)
    8001628e:	fe043703          	ld	a4,-32(s0)
    80016292:	85ba                	mv	a1,a4
    80016294:	853e                	mv	a0,a5
    80016296:	4ac000ef          	jal	ra,80016742 <strcmp>
    8001629a:	87aa                	mv	a5,a0
    8001629c:	fff7c793          	not	a5,a5
    800162a0:	01f7d79b          	srliw	a5,a5,0x1f
    800162a4:	0ff7f793          	andi	a5,a5,255
}
    800162a8:	853e                	mv	a0,a5
    800162aa:	60e2                	ld	ra,24(sp)
    800162ac:	6442                	ld	s0,16(sp)
    800162ae:	6105                	addi	sp,sp,32
    800162b0:	8082                	ret

00000000800162b2 <memset>:
#include <alloc.h>
#include <stdint.h>
#include <util.h>

void *memset(void *dst, char data, int size)
{
    800162b2:	715d                	addi	sp,sp,-80
    800162b4:	e4a2                	sd	s0,72(sp)
    800162b6:	0880                	addi	s0,sp,80
    800162b8:	faa43c23          	sd	a0,-72(s0)
    800162bc:	87ae                	mv	a5,a1
    800162be:	8732                	mv	a4,a2
    800162c0:	faf40ba3          	sb	a5,-73(s0)
    800162c4:	87ba                	mv	a5,a4
    800162c6:	faf42823          	sw	a5,-80(s0)
    int64_t i;
    long *ldst = (long *)dst;
    800162ca:	fb843783          	ld	a5,-72(s0)
    800162ce:	fef43023          	sd	a5,-32(s0)
    char *cdst;
    char l[]              = {data, data, data, data, data, data, data, data};
    800162d2:	fb744783          	lbu	a5,-73(s0)
    800162d6:	fcf40423          	sb	a5,-56(s0)
    800162da:	fb744783          	lbu	a5,-73(s0)
    800162de:	fcf404a3          	sb	a5,-55(s0)
    800162e2:	fb744783          	lbu	a5,-73(s0)
    800162e6:	fcf40523          	sb	a5,-54(s0)
    800162ea:	fb744783          	lbu	a5,-73(s0)
    800162ee:	fcf405a3          	sb	a5,-53(s0)
    800162f2:	fb744783          	lbu	a5,-73(s0)
    800162f6:	fcf40623          	sb	a5,-52(s0)
    800162fa:	fb744783          	lbu	a5,-73(s0)
    800162fe:	fcf406a3          	sb	a5,-51(s0)
    80016302:	fb744783          	lbu	a5,-73(s0)
    80016306:	fcf40723          	sb	a5,-50(s0)
    8001630a:	fb744783          	lbu	a5,-73(s0)
    8001630e:	fcf407a3          	sb	a5,-49(s0)

    int num_8_byte_copies = size / 8;
    80016312:	fb042783          	lw	a5,-80(s0)
    80016316:	41f7d71b          	sraiw	a4,a5,0x1f
    8001631a:	01d7571b          	srliw	a4,a4,0x1d
    8001631e:	9fb9                	addw	a5,a5,a4
    80016320:	4037d79b          	sraiw	a5,a5,0x3
    80016324:	fcf42a23          	sw	a5,-44(s0)
    int num_1_byte_copies = size % 8;
    80016328:	fb042703          	lw	a4,-80(s0)
    8001632c:	41f7579b          	sraiw	a5,a4,0x1f
    80016330:	01d7d79b          	srliw	a5,a5,0x1d
    80016334:	9f3d                	addw	a4,a4,a5
    80016336:	8b1d                	andi	a4,a4,7
    80016338:	40f707bb          	subw	a5,a4,a5
    8001633c:	fcf42823          	sw	a5,-48(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    80016340:	fe043423          	sd	zero,-24(s0)
    80016344:	a005                	j	80016364 <memset+0xb2>
        *ldst++ = *((long *)l);
    80016346:	fc840713          	addi	a4,s0,-56
    8001634a:	fe043783          	ld	a5,-32(s0)
    8001634e:	00878693          	addi	a3,a5,8
    80016352:	fed43023          	sd	a3,-32(s0)
    80016356:	6318                	ld	a4,0(a4)
    80016358:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    8001635a:	fe843783          	ld	a5,-24(s0)
    8001635e:	0785                	addi	a5,a5,1
    80016360:	fef43423          	sd	a5,-24(s0)
    80016364:	fd442783          	lw	a5,-44(s0)
    80016368:	fe843703          	ld	a4,-24(s0)
    8001636c:	fcf74de3          	blt	a4,a5,80016346 <memset+0x94>
    }

    cdst = (char *)ldst;
    80016370:	fe043783          	ld	a5,-32(s0)
    80016374:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    80016378:	fe043423          	sd	zero,-24(s0)
    8001637c:	a005                	j	8001639c <memset+0xea>
        *cdst++ = data;
    8001637e:	fd843783          	ld	a5,-40(s0)
    80016382:	00178713          	addi	a4,a5,1
    80016386:	fce43c23          	sd	a4,-40(s0)
    8001638a:	fb744703          	lbu	a4,-73(s0)
    8001638e:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    80016392:	fe843783          	ld	a5,-24(s0)
    80016396:	0785                	addi	a5,a5,1
    80016398:	fef43423          	sd	a5,-24(s0)
    8001639c:	fd042783          	lw	a5,-48(s0)
    800163a0:	fe843703          	ld	a4,-24(s0)
    800163a4:	fcf74de3          	blt	a4,a5,8001637e <memset+0xcc>
    }

    return dst;
    800163a8:	fb843783          	ld	a5,-72(s0)
}
    800163ac:	853e                	mv	a0,a5
    800163ae:	6426                	ld	s0,72(sp)
    800163b0:	6161                	addi	sp,sp,80
    800163b2:	8082                	ret

00000000800163b4 <memcpy>:

void *memcpy(void *dst, const void *src, int size)
{
    800163b4:	711d                	addi	sp,sp,-96
    800163b6:	eca2                	sd	s0,88(sp)
    800163b8:	1080                	addi	s0,sp,96
    800163ba:	faa43c23          	sd	a0,-72(s0)
    800163be:	fab43823          	sd	a1,-80(s0)
    800163c2:	87b2                	mv	a5,a2
    800163c4:	faf42623          	sw	a5,-84(s0)
    int i;
    char *cdst;
    const char *csrc;
    long *ldst            = (long *)dst;
    800163c8:	fb843783          	ld	a5,-72(s0)
    800163cc:	fcf43823          	sd	a5,-48(s0)
    const long *lsrc      = (long *)src;
    800163d0:	fb043783          	ld	a5,-80(s0)
    800163d4:	fcf43423          	sd	a5,-56(s0)

    int num_8_byte_copies = size / 8;
    800163d8:	fac42783          	lw	a5,-84(s0)
    800163dc:	41f7d71b          	sraiw	a4,a5,0x1f
    800163e0:	01d7571b          	srliw	a4,a4,0x1d
    800163e4:	9fb9                	addw	a5,a5,a4
    800163e6:	4037d79b          	sraiw	a5,a5,0x3
    800163ea:	fcf42223          	sw	a5,-60(s0)
    int num_1_byte_copies = size % 8;
    800163ee:	fac42703          	lw	a4,-84(s0)
    800163f2:	41f7579b          	sraiw	a5,a4,0x1f
    800163f6:	01d7d79b          	srliw	a5,a5,0x1d
    800163fa:	9f3d                	addw	a4,a4,a5
    800163fc:	8b1d                	andi	a4,a4,7
    800163fe:	40f707bb          	subw	a5,a4,a5
    80016402:	fcf42023          	sw	a5,-64(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    80016406:	fe042623          	sw	zero,-20(s0)
    8001640a:	a025                	j	80016432 <memcpy+0x7e>
        *ldst++ = *lsrc++;
    8001640c:	fc843703          	ld	a4,-56(s0)
    80016410:	00870793          	addi	a5,a4,8
    80016414:	fcf43423          	sd	a5,-56(s0)
    80016418:	fd043783          	ld	a5,-48(s0)
    8001641c:	00878693          	addi	a3,a5,8
    80016420:	fcd43823          	sd	a3,-48(s0)
    80016424:	6318                	ld	a4,0(a4)
    80016426:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    80016428:	fec42783          	lw	a5,-20(s0)
    8001642c:	2785                	addiw	a5,a5,1
    8001642e:	fef42623          	sw	a5,-20(s0)
    80016432:	fec42703          	lw	a4,-20(s0)
    80016436:	fc442783          	lw	a5,-60(s0)
    8001643a:	2701                	sext.w	a4,a4
    8001643c:	2781                	sext.w	a5,a5
    8001643e:	fcf747e3          	blt	a4,a5,8001640c <memcpy+0x58>
    }

    cdst = (char *)ldst;
    80016442:	fd043783          	ld	a5,-48(s0)
    80016446:	fef43023          	sd	a5,-32(s0)
    csrc = (char *)lsrc;
    8001644a:	fc843783          	ld	a5,-56(s0)
    8001644e:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    80016452:	fe042623          	sw	zero,-20(s0)
    80016456:	a035                	j	80016482 <memcpy+0xce>
        *cdst++ = *csrc++;
    80016458:	fd843703          	ld	a4,-40(s0)
    8001645c:	00170793          	addi	a5,a4,1
    80016460:	fcf43c23          	sd	a5,-40(s0)
    80016464:	fe043783          	ld	a5,-32(s0)
    80016468:	00178693          	addi	a3,a5,1
    8001646c:	fed43023          	sd	a3,-32(s0)
    80016470:	00074703          	lbu	a4,0(a4)
    80016474:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    80016478:	fec42783          	lw	a5,-20(s0)
    8001647c:	2785                	addiw	a5,a5,1
    8001647e:	fef42623          	sw	a5,-20(s0)
    80016482:	fec42703          	lw	a4,-20(s0)
    80016486:	fc042783          	lw	a5,-64(s0)
    8001648a:	2701                	sext.w	a4,a4
    8001648c:	2781                	sext.w	a5,a5
    8001648e:	fcf745e3          	blt	a4,a5,80016458 <memcpy+0xa4>
    }

    return dst;
    80016492:	fb843783          	ld	a5,-72(s0)
}
    80016496:	853e                	mv	a0,a5
    80016498:	6466                	ld	s0,88(sp)
    8001649a:	6125                	addi	sp,sp,96
    8001649c:	8082                	ret

000000008001649e <memmove>:

void *memmove(void *_dst, const void *_src, int n)
{
    8001649e:	7139                	addi	sp,sp,-64
    800164a0:	fc22                	sd	s0,56(sp)
    800164a2:	0080                	addi	s0,sp,64
    800164a4:	fca43c23          	sd	a0,-40(s0)
    800164a8:	fcb43823          	sd	a1,-48(s0)
    800164ac:	87b2                	mv	a5,a2
    800164ae:	fcf42623          	sw	a5,-52(s0)
    const char *src = _src;
    800164b2:	fd043783          	ld	a5,-48(s0)
    800164b6:	fef43423          	sd	a5,-24(s0)
    char *dst       = _dst;
    800164ba:	fd843783          	ld	a5,-40(s0)
    800164be:	fef43023          	sd	a5,-32(s0)

    if (n == 0)
    800164c2:	fcc42783          	lw	a5,-52(s0)
    800164c6:	2781                	sext.w	a5,a5
    800164c8:	e781                	bnez	a5,800164d0 <memmove+0x32>
        return _dst;
    800164ca:	fd843783          	ld	a5,-40(s0)
    800164ce:	a845                	j	8001657e <memmove+0xe0>

    if (src < dst && src + n > dst) {
    800164d0:	fe843703          	ld	a4,-24(s0)
    800164d4:	fe043783          	ld	a5,-32(s0)
    800164d8:	08f77c63          	bgeu	a4,a5,80016570 <memmove+0xd2>
    800164dc:	fcc42783          	lw	a5,-52(s0)
    800164e0:	fe843703          	ld	a4,-24(s0)
    800164e4:	97ba                	add	a5,a5,a4
    800164e6:	fe043703          	ld	a4,-32(s0)
    800164ea:	08f77363          	bgeu	a4,a5,80016570 <memmove+0xd2>
        src += n;
    800164ee:	fcc42783          	lw	a5,-52(s0)
    800164f2:	fe843703          	ld	a4,-24(s0)
    800164f6:	97ba                	add	a5,a5,a4
    800164f8:	fef43423          	sd	a5,-24(s0)
        dst += n;
    800164fc:	fcc42783          	lw	a5,-52(s0)
    80016500:	fe043703          	ld	a4,-32(s0)
    80016504:	97ba                	add	a5,a5,a4
    80016506:	fef43023          	sd	a5,-32(s0)
        for (; n > 0; n -= 1) {
    8001650a:	a805                	j	8001653a <memmove+0x9c>
            *--dst = *--src;
    8001650c:	fe843783          	ld	a5,-24(s0)
    80016510:	17fd                	addi	a5,a5,-1
    80016512:	fef43423          	sd	a5,-24(s0)
    80016516:	fe043783          	ld	a5,-32(s0)
    8001651a:	17fd                	addi	a5,a5,-1
    8001651c:	fef43023          	sd	a5,-32(s0)
    80016520:	fe843783          	ld	a5,-24(s0)
    80016524:	0007c703          	lbu	a4,0(a5)
    80016528:	fe043783          	ld	a5,-32(s0)
    8001652c:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    80016530:	fcc42783          	lw	a5,-52(s0)
    80016534:	37fd                	addiw	a5,a5,-1
    80016536:	fcf42623          	sw	a5,-52(s0)
    8001653a:	fcc42783          	lw	a5,-52(s0)
    8001653e:	2781                	sext.w	a5,a5
    80016540:	fcf046e3          	bgtz	a5,8001650c <memmove+0x6e>
    if (src < dst && src + n > dst) {
    80016544:	a81d                	j	8001657a <memmove+0xdc>
        }
    }
    else {
        for (; n > 0; n -= 1) {
            *dst++ = *src++;
    80016546:	fe843703          	ld	a4,-24(s0)
    8001654a:	00170793          	addi	a5,a4,1
    8001654e:	fef43423          	sd	a5,-24(s0)
    80016552:	fe043783          	ld	a5,-32(s0)
    80016556:	00178693          	addi	a3,a5,1
    8001655a:	fed43023          	sd	a3,-32(s0)
    8001655e:	00074703          	lbu	a4,0(a4)
    80016562:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    80016566:	fcc42783          	lw	a5,-52(s0)
    8001656a:	37fd                	addiw	a5,a5,-1
    8001656c:	fcf42623          	sw	a5,-52(s0)
    80016570:	fcc42783          	lw	a5,-52(s0)
    80016574:	2781                	sext.w	a5,a5
    80016576:	fcf048e3          	bgtz	a5,80016546 <memmove+0xa8>
        }
    }

    return _dst;
    8001657a:	fd843783          	ld	a5,-40(s0)
}
    8001657e:	853e                	mv	a0,a5
    80016580:	7462                	ld	s0,56(sp)
    80016582:	6121                	addi	sp,sp,64
    80016584:	8082                	ret

0000000080016586 <memcmp>:

int memcmp(const void *haystack, const void *needle, int size)
{
    80016586:	715d                	addi	sp,sp,-80
    80016588:	e4a2                	sd	s0,72(sp)
    8001658a:	0880                	addi	s0,sp,80
    8001658c:	fca43423          	sd	a0,-56(s0)
    80016590:	fcb43023          	sd	a1,-64(s0)
    80016594:	87b2                	mv	a5,a2
    80016596:	faf42e23          	sw	a5,-68(s0)
    const char *hay  = (char *)haystack;
    8001659a:	fc843783          	ld	a5,-56(s0)
    8001659e:	fef43023          	sd	a5,-32(s0)
    const char *need = (char *)needle;
    800165a2:	fc043783          	ld	a5,-64(s0)
    800165a6:	fcf43c23          	sd	a5,-40(s0)
    int i;

    for (i = 0; i < (size - 1); i++) {
    800165aa:	fe042623          	sw	zero,-20(s0)
    800165ae:	a8a1                	j	80016606 <memcmp+0x80>
        if (hay[i] != need[i]) {
    800165b0:	fec42783          	lw	a5,-20(s0)
    800165b4:	fe043703          	ld	a4,-32(s0)
    800165b8:	97ba                	add	a5,a5,a4
    800165ba:	0007c683          	lbu	a3,0(a5)
    800165be:	fec42783          	lw	a5,-20(s0)
    800165c2:	fd843703          	ld	a4,-40(s0)
    800165c6:	97ba                	add	a5,a5,a4
    800165c8:	0007c783          	lbu	a5,0(a5)
    800165cc:	8736                	mv	a4,a3
    800165ce:	02f70763          	beq	a4,a5,800165fc <memcmp+0x76>
            return hay[i] - need[i];
    800165d2:	fec42783          	lw	a5,-20(s0)
    800165d6:	fe043703          	ld	a4,-32(s0)
    800165da:	97ba                	add	a5,a5,a4
    800165dc:	0007c783          	lbu	a5,0(a5)
    800165e0:	0007871b          	sext.w	a4,a5
    800165e4:	fec42783          	lw	a5,-20(s0)
    800165e8:	fd843683          	ld	a3,-40(s0)
    800165ec:	97b6                	add	a5,a5,a3
    800165ee:	0007c783          	lbu	a5,0(a5)
    800165f2:	2781                	sext.w	a5,a5
    800165f4:	40f707bb          	subw	a5,a4,a5
    800165f8:	2781                	sext.w	a5,a5
    800165fa:	a0a1                	j	80016642 <memcmp+0xbc>
    for (i = 0; i < (size - 1); i++) {
    800165fc:	fec42783          	lw	a5,-20(s0)
    80016600:	2785                	addiw	a5,a5,1
    80016602:	fef42623          	sw	a5,-20(s0)
    80016606:	fbc42783          	lw	a5,-68(s0)
    8001660a:	37fd                	addiw	a5,a5,-1
    8001660c:	0007871b          	sext.w	a4,a5
    80016610:	fec42783          	lw	a5,-20(s0)
    80016614:	2781                	sext.w	a5,a5
    80016616:	f8e7cde3          	blt	a5,a4,800165b0 <memcmp+0x2a>
        }
    }

    return hay[i] - need[i];
    8001661a:	fec42783          	lw	a5,-20(s0)
    8001661e:	fe043703          	ld	a4,-32(s0)
    80016622:	97ba                	add	a5,a5,a4
    80016624:	0007c783          	lbu	a5,0(a5)
    80016628:	0007871b          	sext.w	a4,a5
    8001662c:	fec42783          	lw	a5,-20(s0)
    80016630:	fd843683          	ld	a3,-40(s0)
    80016634:	97b6                	add	a5,a5,a3
    80016636:	0007c783          	lbu	a5,0(a5)
    8001663a:	2781                	sext.w	a5,a5
    8001663c:	40f707bb          	subw	a5,a4,a5
    80016640:	2781                	sext.w	a5,a5
}
    80016642:	853e                	mv	a0,a5
    80016644:	6426                	ld	s0,72(sp)
    80016646:	6161                	addi	sp,sp,80
    80016648:	8082                	ret

000000008001664a <atoi>:

int atoi(const char *st)
{
    8001664a:	7139                	addi	sp,sp,-64
    8001664c:	fc22                	sd	s0,56(sp)
    8001664e:	0080                	addi	s0,sp,64
    80016650:	fca43423          	sd	a0,-56(s0)
    int r = 0;
    80016654:	fe042623          	sw	zero,-20(s0)
    int p = 1;
    80016658:	4785                	li	a5,1
    8001665a:	fef42423          	sw	a5,-24(s0)
    int i;
    int l = 0;
    8001665e:	fe042023          	sw	zero,-32(s0)
    int n = 0;
    80016662:	fc042e23          	sw	zero,-36(s0)

    if (st[0] == '-') {
    80016666:	fc843783          	ld	a5,-56(s0)
    8001666a:	0007c783          	lbu	a5,0(a5)
    8001666e:	873e                	mv	a4,a5
    80016670:	02d00793          	li	a5,45
    80016674:	02f71063          	bne	a4,a5,80016694 <atoi+0x4a>
        st++;
    80016678:	fc843783          	ld	a5,-56(s0)
    8001667c:	0785                	addi	a5,a5,1
    8001667e:	fcf43423          	sd	a5,-56(s0)
        n = 1;
    80016682:	4785                	li	a5,1
    80016684:	fcf42e23          	sw	a5,-36(s0)
    }

    while (st[l] >= '0' && st[l] <= '9')
    80016688:	a031                	j	80016694 <atoi+0x4a>
        l++;
    8001668a:	fe042783          	lw	a5,-32(s0)
    8001668e:	2785                	addiw	a5,a5,1
    80016690:	fef42023          	sw	a5,-32(s0)
    while (st[l] >= '0' && st[l] <= '9')
    80016694:	fe042783          	lw	a5,-32(s0)
    80016698:	fc843703          	ld	a4,-56(s0)
    8001669c:	97ba                	add	a5,a5,a4
    8001669e:	0007c783          	lbu	a5,0(a5)
    800166a2:	873e                	mv	a4,a5
    800166a4:	02f00793          	li	a5,47
    800166a8:	00e7fe63          	bgeu	a5,a4,800166c4 <atoi+0x7a>
    800166ac:	fe042783          	lw	a5,-32(s0)
    800166b0:	fc843703          	ld	a4,-56(s0)
    800166b4:	97ba                	add	a5,a5,a4
    800166b6:	0007c783          	lbu	a5,0(a5)
    800166ba:	873e                	mv	a4,a5
    800166bc:	03900793          	li	a5,57
    800166c0:	fce7f5e3          	bgeu	a5,a4,8001668a <atoi+0x40>

    for (i = l - 1; i >= 0; i--) {
    800166c4:	fe042783          	lw	a5,-32(s0)
    800166c8:	37fd                	addiw	a5,a5,-1
    800166ca:	fef42223          	sw	a5,-28(s0)
    800166ce:	a0a9                	j	80016718 <atoi+0xce>
        r += p * (st[i] - '0');
    800166d0:	fe442783          	lw	a5,-28(s0)
    800166d4:	fc843703          	ld	a4,-56(s0)
    800166d8:	97ba                	add	a5,a5,a4
    800166da:	0007c783          	lbu	a5,0(a5)
    800166de:	2781                	sext.w	a5,a5
    800166e0:	fd07879b          	addiw	a5,a5,-48
    800166e4:	2781                	sext.w	a5,a5
    800166e6:	fe842703          	lw	a4,-24(s0)
    800166ea:	02f707bb          	mulw	a5,a4,a5
    800166ee:	2781                	sext.w	a5,a5
    800166f0:	fec42703          	lw	a4,-20(s0)
    800166f4:	9fb9                	addw	a5,a5,a4
    800166f6:	fef42623          	sw	a5,-20(s0)
        p *= 10;
    800166fa:	fe842703          	lw	a4,-24(s0)
    800166fe:	87ba                	mv	a5,a4
    80016700:	0027979b          	slliw	a5,a5,0x2
    80016704:	9fb9                	addw	a5,a5,a4
    80016706:	0017979b          	slliw	a5,a5,0x1
    8001670a:	fef42423          	sw	a5,-24(s0)
    for (i = l - 1; i >= 0; i--) {
    8001670e:	fe442783          	lw	a5,-28(s0)
    80016712:	37fd                	addiw	a5,a5,-1
    80016714:	fef42223          	sw	a5,-28(s0)
    80016718:	fe442783          	lw	a5,-28(s0)
    8001671c:	2781                	sext.w	a5,a5
    8001671e:	fa07d9e3          	bgez	a5,800166d0 <atoi+0x86>
    }

    return (n ? -r : r);
    80016722:	fdc42783          	lw	a5,-36(s0)
    80016726:	2781                	sext.w	a5,a5
    80016728:	c799                	beqz	a5,80016736 <atoi+0xec>
    8001672a:	fec42783          	lw	a5,-20(s0)
    8001672e:	40f007bb          	negw	a5,a5
    80016732:	2781                	sext.w	a5,a5
    80016734:	a019                	j	8001673a <atoi+0xf0>
    80016736:	fec42783          	lw	a5,-20(s0)
}
    8001673a:	853e                	mv	a0,a5
    8001673c:	7462                	ld	s0,56(sp)
    8001673e:	6121                	addi	sp,sp,64
    80016740:	8082                	ret

0000000080016742 <strcmp>:

int strcmp(const char *l, const char *r)
{
    80016742:	7139                	addi	sp,sp,-64
    80016744:	fc22                	sd	s0,56(sp)
    80016746:	0080                	addi	s0,sp,64
    80016748:	fca43423          	sd	a0,-56(s0)
    8001674c:	fcb43023          	sd	a1,-64(s0)
    const unsigned char *s1 = (const unsigned char *)l;
    80016750:	fc843783          	ld	a5,-56(s0)
    80016754:	fef43423          	sd	a5,-24(s0)
    const unsigned char *s2 = (const unsigned char *)r;
    80016758:	fc043783          	ld	a5,-64(s0)
    8001675c:	fef43023          	sd	a5,-32(s0)
    unsigned int c1, c2;

    do {
        c1 = (unsigned char)*s1++;
    80016760:	fe843783          	ld	a5,-24(s0)
    80016764:	00178713          	addi	a4,a5,1
    80016768:	fee43423          	sd	a4,-24(s0)
    8001676c:	0007c783          	lbu	a5,0(a5)
    80016770:	fcf42e23          	sw	a5,-36(s0)
        c2 = (unsigned char)*s2++;
    80016774:	fe043783          	ld	a5,-32(s0)
    80016778:	00178713          	addi	a4,a5,1
    8001677c:	fee43023          	sd	a4,-32(s0)
    80016780:	0007c783          	lbu	a5,0(a5)
    80016784:	fcf42c23          	sw	a5,-40(s0)
        if (c1 == '\0')
    80016788:	fdc42783          	lw	a5,-36(s0)
    8001678c:	2781                	sext.w	a5,a5
    8001678e:	eb91                	bnez	a5,800167a2 <strcmp+0x60>
            return c1 - c2;
    80016790:	fdc42703          	lw	a4,-36(s0)
    80016794:	fd842783          	lw	a5,-40(s0)
    80016798:	40f707bb          	subw	a5,a4,a5
    8001679c:	2781                	sext.w	a5,a5
    8001679e:	2781                	sext.w	a5,a5
    800167a0:	a00d                	j	800167c2 <strcmp+0x80>
    } while (c1 == c2);
    800167a2:	fdc42703          	lw	a4,-36(s0)
    800167a6:	fd842783          	lw	a5,-40(s0)
    800167aa:	2701                	sext.w	a4,a4
    800167ac:	2781                	sext.w	a5,a5
    800167ae:	faf709e3          	beq	a4,a5,80016760 <strcmp+0x1e>

    return c1 - c2;
    800167b2:	fdc42703          	lw	a4,-36(s0)
    800167b6:	fd842783          	lw	a5,-40(s0)
    800167ba:	40f707bb          	subw	a5,a4,a5
    800167be:	2781                	sext.w	a5,a5
    800167c0:	2781                	sext.w	a5,a5
}
    800167c2:	853e                	mv	a0,a5
    800167c4:	7462                	ld	s0,56(sp)
    800167c6:	6121                	addi	sp,sp,64
    800167c8:	8082                	ret

00000000800167ca <strncmp>:

int strncmp(const char *left, const char *right, int n)
{
    800167ca:	7139                	addi	sp,sp,-64
    800167cc:	fc22                	sd	s0,56(sp)
    800167ce:	0080                	addi	s0,sp,64
    800167d0:	fca43c23          	sd	a0,-40(s0)
    800167d4:	fcb43823          	sd	a1,-48(s0)
    800167d8:	87b2                	mv	a5,a2
    800167da:	fcf42623          	sw	a5,-52(s0)
    unsigned int c1 = '\0';
    800167de:	fe042623          	sw	zero,-20(s0)
    unsigned int c2 = '\0';
    800167e2:	fe042423          	sw	zero,-24(s0)

    if (n >= 4) {
    800167e6:	fcc42783          	lw	a5,-52(s0)
    800167ea:	0007871b          	sext.w	a4,a5
    800167ee:	478d                	li	a5,3
    800167f0:	1ce7da63          	bge	a5,a4,800169c4 <strncmp+0x1fa>
        int n4 = n >> 2;
    800167f4:	fcc42783          	lw	a5,-52(s0)
    800167f8:	4027d79b          	sraiw	a5,a5,0x2
    800167fc:	fef42223          	sw	a5,-28(s0)
        do {
            c1 = (unsigned char)*left++;
    80016800:	fd843783          	ld	a5,-40(s0)
    80016804:	00178713          	addi	a4,a5,1
    80016808:	fce43c23          	sd	a4,-40(s0)
    8001680c:	0007c783          	lbu	a5,0(a5)
    80016810:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80016814:	fd043783          	ld	a5,-48(s0)
    80016818:	00178713          	addi	a4,a5,1
    8001681c:	fce43823          	sd	a4,-48(s0)
    80016820:	0007c783          	lbu	a5,0(a5)
    80016824:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    80016828:	fec42783          	lw	a5,-20(s0)
    8001682c:	2781                	sext.w	a5,a5
    8001682e:	cb89                	beqz	a5,80016840 <strncmp+0x76>
    80016830:	fec42703          	lw	a4,-20(s0)
    80016834:	fe842783          	lw	a5,-24(s0)
    80016838:	2701                	sext.w	a4,a4
    8001683a:	2781                	sext.w	a5,a5
    8001683c:	00f70b63          	beq	a4,a5,80016852 <strncmp+0x88>
                return c1 - c2;
    80016840:	fec42703          	lw	a4,-20(s0)
    80016844:	fe842783          	lw	a5,-24(s0)
    80016848:	40f707bb          	subw	a5,a4,a5
    8001684c:	2781                	sext.w	a5,a5
    8001684e:	2781                	sext.w	a5,a5
    80016850:	a279                	j	800169de <strncmp+0x214>
            }

            c1 = (unsigned char)*left++;
    80016852:	fd843783          	ld	a5,-40(s0)
    80016856:	00178713          	addi	a4,a5,1
    8001685a:	fce43c23          	sd	a4,-40(s0)
    8001685e:	0007c783          	lbu	a5,0(a5)
    80016862:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80016866:	fd043783          	ld	a5,-48(s0)
    8001686a:	00178713          	addi	a4,a5,1
    8001686e:	fce43823          	sd	a4,-48(s0)
    80016872:	0007c783          	lbu	a5,0(a5)
    80016876:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    8001687a:	fec42783          	lw	a5,-20(s0)
    8001687e:	2781                	sext.w	a5,a5
    80016880:	cb89                	beqz	a5,80016892 <strncmp+0xc8>
    80016882:	fec42703          	lw	a4,-20(s0)
    80016886:	fe842783          	lw	a5,-24(s0)
    8001688a:	2701                	sext.w	a4,a4
    8001688c:	2781                	sext.w	a5,a5
    8001688e:	00f70b63          	beq	a4,a5,800168a4 <strncmp+0xda>
                return c1 - c2;
    80016892:	fec42703          	lw	a4,-20(s0)
    80016896:	fe842783          	lw	a5,-24(s0)
    8001689a:	40f707bb          	subw	a5,a4,a5
    8001689e:	2781                	sext.w	a5,a5
    800168a0:	2781                	sext.w	a5,a5
    800168a2:	aa35                	j	800169de <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    800168a4:	fd843783          	ld	a5,-40(s0)
    800168a8:	00178713          	addi	a4,a5,1
    800168ac:	fce43c23          	sd	a4,-40(s0)
    800168b0:	0007c783          	lbu	a5,0(a5)
    800168b4:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    800168b8:	fd043783          	ld	a5,-48(s0)
    800168bc:	00178713          	addi	a4,a5,1
    800168c0:	fce43823          	sd	a4,-48(s0)
    800168c4:	0007c783          	lbu	a5,0(a5)
    800168c8:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    800168cc:	fec42783          	lw	a5,-20(s0)
    800168d0:	2781                	sext.w	a5,a5
    800168d2:	cb89                	beqz	a5,800168e4 <strncmp+0x11a>
    800168d4:	fec42703          	lw	a4,-20(s0)
    800168d8:	fe842783          	lw	a5,-24(s0)
    800168dc:	2701                	sext.w	a4,a4
    800168de:	2781                	sext.w	a5,a5
    800168e0:	00f70b63          	beq	a4,a5,800168f6 <strncmp+0x12c>
                return c1 - c2;
    800168e4:	fec42703          	lw	a4,-20(s0)
    800168e8:	fe842783          	lw	a5,-24(s0)
    800168ec:	40f707bb          	subw	a5,a4,a5
    800168f0:	2781                	sext.w	a5,a5
    800168f2:	2781                	sext.w	a5,a5
    800168f4:	a0ed                	j	800169de <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    800168f6:	fd843783          	ld	a5,-40(s0)
    800168fa:	00178713          	addi	a4,a5,1
    800168fe:	fce43c23          	sd	a4,-40(s0)
    80016902:	0007c783          	lbu	a5,0(a5)
    80016906:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    8001690a:	fd043783          	ld	a5,-48(s0)
    8001690e:	00178713          	addi	a4,a5,1
    80016912:	fce43823          	sd	a4,-48(s0)
    80016916:	0007c783          	lbu	a5,0(a5)
    8001691a:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    8001691e:	fec42783          	lw	a5,-20(s0)
    80016922:	2781                	sext.w	a5,a5
    80016924:	cb89                	beqz	a5,80016936 <strncmp+0x16c>
    80016926:	fec42703          	lw	a4,-20(s0)
    8001692a:	fe842783          	lw	a5,-24(s0)
    8001692e:	2701                	sext.w	a4,a4
    80016930:	2781                	sext.w	a5,a5
    80016932:	00f70b63          	beq	a4,a5,80016948 <strncmp+0x17e>
                return c1 - c2;
    80016936:	fec42703          	lw	a4,-20(s0)
    8001693a:	fe842783          	lw	a5,-24(s0)
    8001693e:	40f707bb          	subw	a5,a4,a5
    80016942:	2781                	sext.w	a5,a5
    80016944:	2781                	sext.w	a5,a5
    80016946:	a861                	j	800169de <strncmp+0x214>
            }
        } while (--n4 > 0);
    80016948:	fe442783          	lw	a5,-28(s0)
    8001694c:	37fd                	addiw	a5,a5,-1
    8001694e:	fef42223          	sw	a5,-28(s0)
    80016952:	fe442783          	lw	a5,-28(s0)
    80016956:	2781                	sext.w	a5,a5
    80016958:	eaf044e3          	bgtz	a5,80016800 <strncmp+0x36>
        n &= 3;
    8001695c:	fcc42783          	lw	a5,-52(s0)
    80016960:	8b8d                	andi	a5,a5,3
    80016962:	fcf42623          	sw	a5,-52(s0)
    }

    while (n > 0) {
    80016966:	a8b9                	j	800169c4 <strncmp+0x1fa>
        c1 = (unsigned char)*left++;
    80016968:	fd843783          	ld	a5,-40(s0)
    8001696c:	00178713          	addi	a4,a5,1
    80016970:	fce43c23          	sd	a4,-40(s0)
    80016974:	0007c783          	lbu	a5,0(a5)
    80016978:	fef42623          	sw	a5,-20(s0)
        c2 = (unsigned char)*right++;
    8001697c:	fd043783          	ld	a5,-48(s0)
    80016980:	00178713          	addi	a4,a5,1
    80016984:	fce43823          	sd	a4,-48(s0)
    80016988:	0007c783          	lbu	a5,0(a5)
    8001698c:	fef42423          	sw	a5,-24(s0)
        if (c1 == '\0' || c1 != c2)
    80016990:	fec42783          	lw	a5,-20(s0)
    80016994:	2781                	sext.w	a5,a5
    80016996:	cb89                	beqz	a5,800169a8 <strncmp+0x1de>
    80016998:	fec42703          	lw	a4,-20(s0)
    8001699c:	fe842783          	lw	a5,-24(s0)
    800169a0:	2701                	sext.w	a4,a4
    800169a2:	2781                	sext.w	a5,a5
    800169a4:	00f70b63          	beq	a4,a5,800169ba <strncmp+0x1f0>
            return c1 - c2;
    800169a8:	fec42703          	lw	a4,-20(s0)
    800169ac:	fe842783          	lw	a5,-24(s0)
    800169b0:	40f707bb          	subw	a5,a4,a5
    800169b4:	2781                	sext.w	a5,a5
    800169b6:	2781                	sext.w	a5,a5
    800169b8:	a01d                	j	800169de <strncmp+0x214>
        n--;
    800169ba:	fcc42783          	lw	a5,-52(s0)
    800169be:	37fd                	addiw	a5,a5,-1
    800169c0:	fcf42623          	sw	a5,-52(s0)
    while (n > 0) {
    800169c4:	fcc42783          	lw	a5,-52(s0)
    800169c8:	2781                	sext.w	a5,a5
    800169ca:	f8f04fe3          	bgtz	a5,80016968 <strncmp+0x19e>
    }

    return c1 - c2;
    800169ce:	fec42703          	lw	a4,-20(s0)
    800169d2:	fe842783          	lw	a5,-24(s0)
    800169d6:	40f707bb          	subw	a5,a4,a5
    800169da:	2781                	sext.w	a5,a5
    800169dc:	2781                	sext.w	a5,a5
}
    800169de:	853e                	mv	a0,a5
    800169e0:	7462                	ld	s0,56(sp)
    800169e2:	6121                	addi	sp,sp,64
    800169e4:	8082                	ret

00000000800169e6 <strfindchr>:

int strfindchr(const char *r, char t)
{
    800169e6:	7179                	addi	sp,sp,-48
    800169e8:	f422                	sd	s0,40(sp)
    800169ea:	1800                	addi	s0,sp,48
    800169ec:	fca43c23          	sd	a0,-40(s0)
    800169f0:	87ae                	mv	a5,a1
    800169f2:	fcf40ba3          	sb	a5,-41(s0)
    int i = 0;
    800169f6:	fe042623          	sw	zero,-20(s0)
    while (r[i] != t) {
    800169fa:	a005                	j	80016a1a <strfindchr+0x34>
        if (r[i] == '\0') {
    800169fc:	fec42783          	lw	a5,-20(s0)
    80016a00:	fd843703          	ld	a4,-40(s0)
    80016a04:	97ba                	add	a5,a5,a4
    80016a06:	0007c783          	lbu	a5,0(a5)
    80016a0a:	e399                	bnez	a5,80016a10 <strfindchr+0x2a>
            return -1;
    80016a0c:	57fd                	li	a5,-1
    80016a0e:	a02d                	j	80016a38 <strfindchr+0x52>
        }
        i++;
    80016a10:	fec42783          	lw	a5,-20(s0)
    80016a14:	2785                	addiw	a5,a5,1
    80016a16:	fef42623          	sw	a5,-20(s0)
    while (r[i] != t) {
    80016a1a:	fec42783          	lw	a5,-20(s0)
    80016a1e:	fd843703          	ld	a4,-40(s0)
    80016a22:	97ba                	add	a5,a5,a4
    80016a24:	0007c703          	lbu	a4,0(a5)
    80016a28:	fd744783          	lbu	a5,-41(s0)
    80016a2c:	0ff7f793          	andi	a5,a5,255
    80016a30:	fce796e3          	bne	a5,a4,800169fc <strfindchr+0x16>
    }
    return i;
    80016a34:	fec42783          	lw	a5,-20(s0)
}
    80016a38:	853e                	mv	a0,a5
    80016a3a:	7422                	ld	s0,40(sp)
    80016a3c:	6145                	addi	sp,sp,48
    80016a3e:	8082                	ret

0000000080016a40 <strlen>:

int strlen(const char *s)
{
    80016a40:	7179                	addi	sp,sp,-48
    80016a42:	f422                	sd	s0,40(sp)
    80016a44:	1800                	addi	s0,sp,48
    80016a46:	fca43c23          	sd	a0,-40(s0)
    int len = 0;
    80016a4a:	fe042623          	sw	zero,-20(s0)
    while (s[len] && ++len)
    80016a4e:	0001                	nop
    80016a50:	fec42783          	lw	a5,-20(s0)
    80016a54:	fd843703          	ld	a4,-40(s0)
    80016a58:	97ba                	add	a5,a5,a4
    80016a5a:	0007c783          	lbu	a5,0(a5)
    80016a5e:	cb91                	beqz	a5,80016a72 <strlen+0x32>
    80016a60:	fec42783          	lw	a5,-20(s0)
    80016a64:	2785                	addiw	a5,a5,1
    80016a66:	fef42623          	sw	a5,-20(s0)
    80016a6a:	fec42783          	lw	a5,-20(s0)
    80016a6e:	2781                	sext.w	a5,a5
    80016a70:	f3e5                	bnez	a5,80016a50 <strlen+0x10>
        ;
    return len;
    80016a72:	fec42783          	lw	a5,-20(s0)
}
    80016a76:	853e                	mv	a0,a5
    80016a78:	7422                	ld	s0,40(sp)
    80016a7a:	6145                	addi	sp,sp,48
    80016a7c:	8082                	ret

0000000080016a7e <strcpy>:

char *strcpy(char *dest, const char *s)
{
    80016a7e:	7179                	addi	sp,sp,-48
    80016a80:	f422                	sd	s0,40(sp)
    80016a82:	1800                	addi	s0,sp,48
    80016a84:	fca43c23          	sd	a0,-40(s0)
    80016a88:	fcb43823          	sd	a1,-48(s0)
    char *o = dest;
    80016a8c:	fd843783          	ld	a5,-40(s0)
    80016a90:	fef43423          	sd	a5,-24(s0)
    while (*s) {
    80016a94:	a00d                	j	80016ab6 <strcpy+0x38>
        *dest++ = *s++;
    80016a96:	fd043703          	ld	a4,-48(s0)
    80016a9a:	00170793          	addi	a5,a4,1
    80016a9e:	fcf43823          	sd	a5,-48(s0)
    80016aa2:	fd843783          	ld	a5,-40(s0)
    80016aa6:	00178693          	addi	a3,a5,1
    80016aaa:	fcd43c23          	sd	a3,-40(s0)
    80016aae:	00074703          	lbu	a4,0(a4)
    80016ab2:	00e78023          	sb	a4,0(a5)
    while (*s) {
    80016ab6:	fd043783          	ld	a5,-48(s0)
    80016aba:	0007c783          	lbu	a5,0(a5)
    80016abe:	ffe1                	bnez	a5,80016a96 <strcpy+0x18>
    }
    *dest = '\0';
    80016ac0:	fd843783          	ld	a5,-40(s0)
    80016ac4:	00078023          	sb	zero,0(a5)
    return o;
    80016ac8:	fe843783          	ld	a5,-24(s0)
}
    80016acc:	853e                	mv	a0,a5
    80016ace:	7422                	ld	s0,40(sp)
    80016ad0:	6145                	addi	sp,sp,48
    80016ad2:	8082                	ret

0000000080016ad4 <strncpy>:

char *strncpy(char *dest, const char *s, int n)
{
    80016ad4:	7139                	addi	sp,sp,-64
    80016ad6:	fc22                	sd	s0,56(sp)
    80016ad8:	0080                	addi	s0,sp,64
    80016ada:	fca43c23          	sd	a0,-40(s0)
    80016ade:	fcb43823          	sd	a1,-48(s0)
    80016ae2:	87b2                	mv	a5,a2
    80016ae4:	fcf42623          	sw	a5,-52(s0)
    char *o = dest;
    80016ae8:	fd843783          	ld	a5,-40(s0)
    80016aec:	fef43423          	sd	a5,-24(s0)
    while (*s && n-- > 0) {
    80016af0:	a00d                	j	80016b12 <strncpy+0x3e>
        *dest++ = *s++;
    80016af2:	fd043703          	ld	a4,-48(s0)
    80016af6:	00170793          	addi	a5,a4,1
    80016afa:	fcf43823          	sd	a5,-48(s0)
    80016afe:	fd843783          	ld	a5,-40(s0)
    80016b02:	00178693          	addi	a3,a5,1
    80016b06:	fcd43c23          	sd	a3,-40(s0)
    80016b0a:	00074703          	lbu	a4,0(a4)
    80016b0e:	00e78023          	sb	a4,0(a5)
    while (*s && n-- > 0) {
    80016b12:	fd043783          	ld	a5,-48(s0)
    80016b16:	0007c783          	lbu	a5,0(a5)
    80016b1a:	cb89                	beqz	a5,80016b2c <strncpy+0x58>
    80016b1c:	fcc42783          	lw	a5,-52(s0)
    80016b20:	fff7871b          	addiw	a4,a5,-1
    80016b24:	fce42623          	sw	a4,-52(s0)
    80016b28:	fcf045e3          	bgtz	a5,80016af2 <strncpy+0x1e>
    }
    *dest = '\0';
    80016b2c:	fd843783          	ld	a5,-40(s0)
    80016b30:	00078023          	sb	zero,0(a5)
    return o;
    80016b34:	fe843783          	ld	a5,-24(s0)
}
    80016b38:	853e                	mv	a0,a5
    80016b3a:	7462                	ld	s0,56(sp)
    80016b3c:	6121                	addi	sp,sp,64
    80016b3e:	8082                	ret

0000000080016b40 <strdup>:


char *strdup(const char *src)
{
    80016b40:	7179                	addi	sp,sp,-48
    80016b42:	f406                	sd	ra,40(sp)
    80016b44:	f022                	sd	s0,32(sp)
    80016b46:	1800                	addi	s0,sp,48
    80016b48:	fca43c23          	sd	a0,-40(s0)
    int len   = strlen(src);
    80016b4c:	fd843503          	ld	a0,-40(s0)
    80016b50:	ef1ff0ef          	jal	ra,80016a40 <strlen>
    80016b54:	87aa                	mv	a5,a0
    80016b56:	fef42623          	sw	a5,-20(s0)
    char *ret = (char *)g_kmalloc(len + 1);
    80016b5a:	fec42783          	lw	a5,-20(s0)
    80016b5e:	2785                	addiw	a5,a5,1
    80016b60:	2781                	sext.w	a5,a5
    80016b62:	853e                	mv	a0,a5
    80016b64:	fd9fe0ef          	jal	ra,80015b3c <g_kmalloc>
    80016b68:	fea43023          	sd	a0,-32(s0)
    if (!ret) {
    80016b6c:	fe043783          	ld	a5,-32(s0)
    80016b70:	e399                	bnez	a5,80016b76 <strdup+0x36>
        return NULL;
    80016b72:	4781                	li	a5,0
    80016b74:	a801                	j	80016b84 <strdup+0x44>
    }
    return strcpy(ret, src);
    80016b76:	fd843583          	ld	a1,-40(s0)
    80016b7a:	fe043503          	ld	a0,-32(s0)
    80016b7e:	f01ff0ef          	jal	ra,80016a7e <strcpy>
    80016b82:	87aa                	mv	a5,a0
}
    80016b84:	853e                	mv	a0,a5
    80016b86:	70a2                	ld	ra,40(sp)
    80016b88:	7402                	ld	s0,32(sp)
    80016b8a:	6145                	addi	sp,sp,48
    80016b8c:	8082                	ret

0000000080016b8e <strstartswith>:

bool strstartswith(const char *src, const char *start)
{
    80016b8e:	7179                	addi	sp,sp,-48
    80016b90:	f406                	sd	ra,40(sp)
    80016b92:	f022                	sd	s0,32(sp)
    80016b94:	1800                	addi	s0,sp,48
    80016b96:	fca43c23          	sd	a0,-40(s0)
    80016b9a:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80016b9e:	fd843503          	ld	a0,-40(s0)
    80016ba2:	e9fff0ef          	jal	ra,80016a40 <strlen>
    80016ba6:	87aa                	mv	a5,a0
    80016ba8:	fef42423          	sw	a5,-24(s0)
    int start_len = strlen(start);
    80016bac:	fd043503          	ld	a0,-48(s0)
    80016bb0:	e91ff0ef          	jal	ra,80016a40 <strlen>
    80016bb4:	87aa                	mv	a5,a0
    80016bb6:	fef42223          	sw	a5,-28(s0)
    int i;
    
    if (src_len < start_len) {
    80016bba:	fe842703          	lw	a4,-24(s0)
    80016bbe:	fe442783          	lw	a5,-28(s0)
    80016bc2:	2701                	sext.w	a4,a4
    80016bc4:	2781                	sext.w	a5,a5
    80016bc6:	00f75463          	bge	a4,a5,80016bce <strstartswith+0x40>
        return false;
    80016bca:	4781                	li	a5,0
    80016bcc:	a0a9                	j	80016c16 <strstartswith+0x88>
    }

    for (i = 0;i < start_len;i++) {
    80016bce:	fe042623          	sw	zero,-20(s0)
    80016bd2:	a80d                	j	80016c04 <strstartswith+0x76>
        if (src[i] != start[i]) {
    80016bd4:	fec42783          	lw	a5,-20(s0)
    80016bd8:	fd843703          	ld	a4,-40(s0)
    80016bdc:	97ba                	add	a5,a5,a4
    80016bde:	0007c683          	lbu	a3,0(a5)
    80016be2:	fec42783          	lw	a5,-20(s0)
    80016be6:	fd043703          	ld	a4,-48(s0)
    80016bea:	97ba                	add	a5,a5,a4
    80016bec:	0007c783          	lbu	a5,0(a5)
    80016bf0:	8736                	mv	a4,a3
    80016bf2:	00f70463          	beq	a4,a5,80016bfa <strstartswith+0x6c>
            return false;
    80016bf6:	4781                	li	a5,0
    80016bf8:	a839                	j	80016c16 <strstartswith+0x88>
    for (i = 0;i < start_len;i++) {
    80016bfa:	fec42783          	lw	a5,-20(s0)
    80016bfe:	2785                	addiw	a5,a5,1
    80016c00:	fef42623          	sw	a5,-20(s0)
    80016c04:	fec42703          	lw	a4,-20(s0)
    80016c08:	fe442783          	lw	a5,-28(s0)
    80016c0c:	2701                	sext.w	a4,a4
    80016c0e:	2781                	sext.w	a5,a5
    80016c10:	fcf742e3          	blt	a4,a5,80016bd4 <strstartswith+0x46>
        }
    }

    return true;
    80016c14:	4785                	li	a5,1
}
    80016c16:	853e                	mv	a0,a5
    80016c18:	70a2                	ld	ra,40(sp)
    80016c1a:	7402                	ld	s0,32(sp)
    80016c1c:	6145                	addi	sp,sp,48
    80016c1e:	8082                	ret

0000000080016c20 <strendswith>:

bool strendswith(const char *src, const char *end)
{
    80016c20:	7179                	addi	sp,sp,-48
    80016c22:	f406                	sd	ra,40(sp)
    80016c24:	f022                	sd	s0,32(sp)
    80016c26:	1800                	addi	s0,sp,48
    80016c28:	fca43c23          	sd	a0,-40(s0)
    80016c2c:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80016c30:	fd843503          	ld	a0,-40(s0)
    80016c34:	e0dff0ef          	jal	ra,80016a40 <strlen>
    80016c38:	87aa                	mv	a5,a0
    80016c3a:	fef42423          	sw	a5,-24(s0)
    int end_len = strlen(end);
    80016c3e:	fd043503          	ld	a0,-48(s0)
    80016c42:	dffff0ef          	jal	ra,80016a40 <strlen>
    80016c46:	87aa                	mv	a5,a0
    80016c48:	fef42223          	sw	a5,-28(s0)
    int cmp = src_len - end_len;
    80016c4c:	fe842703          	lw	a4,-24(s0)
    80016c50:	fe442783          	lw	a5,-28(s0)
    80016c54:	40f707bb          	subw	a5,a4,a5
    80016c58:	fef42023          	sw	a5,-32(s0)
    int i;
    
    if (src_len < end_len) {
    80016c5c:	fe842703          	lw	a4,-24(s0)
    80016c60:	fe442783          	lw	a5,-28(s0)
    80016c64:	2701                	sext.w	a4,a4
    80016c66:	2781                	sext.w	a5,a5
    80016c68:	00f75463          	bge	a4,a5,80016c70 <strendswith+0x50>
        return false;
    80016c6c:	4781                	li	a5,0
    80016c6e:	a891                	j	80016cc2 <strendswith+0xa2>
    }

    for (i = 0;i < end_len;i++) {
    80016c70:	fe042623          	sw	zero,-20(s0)
    80016c74:	a835                	j	80016cb0 <strendswith+0x90>
        if (src[i + cmp] != end[i]) {
    80016c76:	fec42703          	lw	a4,-20(s0)
    80016c7a:	fe042783          	lw	a5,-32(s0)
    80016c7e:	9fb9                	addw	a5,a5,a4
    80016c80:	2781                	sext.w	a5,a5
    80016c82:	873e                	mv	a4,a5
    80016c84:	fd843783          	ld	a5,-40(s0)
    80016c88:	97ba                	add	a5,a5,a4
    80016c8a:	0007c683          	lbu	a3,0(a5)
    80016c8e:	fec42783          	lw	a5,-20(s0)
    80016c92:	fd043703          	ld	a4,-48(s0)
    80016c96:	97ba                	add	a5,a5,a4
    80016c98:	0007c783          	lbu	a5,0(a5)
    80016c9c:	8736                	mv	a4,a3
    80016c9e:	00f70463          	beq	a4,a5,80016ca6 <strendswith+0x86>
            return false;
    80016ca2:	4781                	li	a5,0
    80016ca4:	a839                	j	80016cc2 <strendswith+0xa2>
    for (i = 0;i < end_len;i++) {
    80016ca6:	fec42783          	lw	a5,-20(s0)
    80016caa:	2785                	addiw	a5,a5,1
    80016cac:	fef42623          	sw	a5,-20(s0)
    80016cb0:	fec42703          	lw	a4,-20(s0)
    80016cb4:	fe442783          	lw	a5,-28(s0)
    80016cb8:	2701                	sext.w	a4,a4
    80016cba:	2781                	sext.w	a5,a5
    80016cbc:	faf74de3          	blt	a4,a5,80016c76 <strendswith+0x56>
        }
    }

    return true;    
    80016cc0:	4785                	li	a5,1
}
    80016cc2:	853e                	mv	a0,a5
    80016cc4:	70a2                	ld	ra,40(sp)
    80016cc6:	7402                	ld	s0,32(sp)
    80016cc8:	6145                	addi	sp,sp,48
    80016cca:	8082                	ret

0000000080016ccc <vector_init>:
    uint32_t size;
    uint32_t capacity;
    uint64_t *values;
} Vector;

static Vector *vector_init(Vector *vec) {
    80016ccc:	1101                	addi	sp,sp,-32
    80016cce:	ec22                	sd	s0,24(sp)
    80016cd0:	1000                	addi	s0,sp,32
    80016cd2:	fea43423          	sd	a0,-24(s0)
    if (vec == NULL) {
    80016cd6:	fe843783          	ld	a5,-24(s0)
    80016cda:	e399                	bnez	a5,80016ce0 <vector_init+0x14>
        return NULL;
    80016cdc:	4781                	li	a5,0
    80016cde:	a839                	j	80016cfc <vector_init+0x30>
    }
    vec->size = 0;
    80016ce0:	fe843783          	ld	a5,-24(s0)
    80016ce4:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    80016ce8:	fe843783          	ld	a5,-24(s0)
    80016cec:	0007a223          	sw	zero,4(a5)
    vec->values = NULL;
    80016cf0:	fe843783          	ld	a5,-24(s0)
    80016cf4:	0007b423          	sd	zero,8(a5)
    return vec;
    80016cf8:	fe843783          	ld	a5,-24(s0)
}
    80016cfc:	853e                	mv	a0,a5
    80016cfe:	6462                	ld	s0,24(sp)
    80016d00:	6105                	addi	sp,sp,32
    80016d02:	8082                	ret

0000000080016d04 <vector_new>:

Vector *vector_new(void) {
    80016d04:	1141                	addi	sp,sp,-16
    80016d06:	e406                	sd	ra,8(sp)
    80016d08:	e022                	sd	s0,0(sp)
    80016d0a:	0800                	addi	s0,sp,16
    return vector_init((Vector *)g_kmalloc(sizeof(Vector)));
    80016d0c:	4541                	li	a0,16
    80016d0e:	e2ffe0ef          	jal	ra,80015b3c <g_kmalloc>
    80016d12:	87aa                	mv	a5,a0
    80016d14:	853e                	mv	a0,a5
    80016d16:	fb7ff0ef          	jal	ra,80016ccc <vector_init>
    80016d1a:	87aa                	mv	a5,a0
}
    80016d1c:	853e                	mv	a0,a5
    80016d1e:	60a2                	ld	ra,8(sp)
    80016d20:	6402                	ld	s0,0(sp)
    80016d22:	0141                	addi	sp,sp,16
    80016d24:	8082                	ret

0000000080016d26 <vector_init_with_capacity>:

static Vector *vector_init_with_capacity(Vector *vec, uint32_t capacity) {
    80016d26:	1101                	addi	sp,sp,-32
    80016d28:	ec06                	sd	ra,24(sp)
    80016d2a:	e822                	sd	s0,16(sp)
    80016d2c:	1000                	addi	s0,sp,32
    80016d2e:	fea43423          	sd	a0,-24(s0)
    80016d32:	87ae                	mv	a5,a1
    80016d34:	fef42223          	sw	a5,-28(s0)
    if (vec == NULL) {
    80016d38:	fe843783          	ld	a5,-24(s0)
    80016d3c:	e399                	bnez	a5,80016d42 <vector_init_with_capacity+0x1c>
        return NULL;
    80016d3e:	4781                	li	a5,0
    80016d40:	a035                	j	80016d6c <vector_init_with_capacity+0x46>
    }
    vec->size = 0;
    80016d42:	fe843783          	ld	a5,-24(s0)
    80016d46:	0007a023          	sw	zero,0(a5)
    vec->capacity = capacity;
    80016d4a:	fe843783          	ld	a5,-24(s0)
    80016d4e:	fe442703          	lw	a4,-28(s0)
    80016d52:	c3d8                	sw	a4,4(a5)
    vec->values = (uint64_t *)g_kcalloc(capacity, sizeof(uint64_t));
    80016d54:	fe446783          	lwu	a5,-28(s0)
    80016d58:	45a1                	li	a1,8
    80016d5a:	853e                	mv	a0,a5
    80016d5c:	e19fe0ef          	jal	ra,80015b74 <g_kcalloc>
    80016d60:	872a                	mv	a4,a0
    80016d62:	fe843783          	ld	a5,-24(s0)
    80016d66:	e798                	sd	a4,8(a5)
    return vec;
    80016d68:	fe843783          	ld	a5,-24(s0)
}
    80016d6c:	853e                	mv	a0,a5
    80016d6e:	60e2                	ld	ra,24(sp)
    80016d70:	6442                	ld	s0,16(sp)
    80016d72:	6105                	addi	sp,sp,32
    80016d74:	8082                	ret

0000000080016d76 <vector_new_with_capacity>:

Vector *vector_new_with_capacity(uint32_t capacity) {
    80016d76:	1101                	addi	sp,sp,-32
    80016d78:	ec06                	sd	ra,24(sp)
    80016d7a:	e822                	sd	s0,16(sp)
    80016d7c:	1000                	addi	s0,sp,32
    80016d7e:	87aa                	mv	a5,a0
    80016d80:	fef42623          	sw	a5,-20(s0)
    return vector_init_with_capacity((Vector *)g_kmalloc(sizeof(Vector)), capacity);
    80016d84:	4541                	li	a0,16
    80016d86:	db7fe0ef          	jal	ra,80015b3c <g_kmalloc>
    80016d8a:	872a                	mv	a4,a0
    80016d8c:	fec42783          	lw	a5,-20(s0)
    80016d90:	85be                	mv	a1,a5
    80016d92:	853a                	mv	a0,a4
    80016d94:	f93ff0ef          	jal	ra,80016d26 <vector_init_with_capacity>
    80016d98:	87aa                	mv	a5,a0
}
    80016d9a:	853e                	mv	a0,a5
    80016d9c:	60e2                	ld	ra,24(sp)
    80016d9e:	6442                	ld	s0,16(sp)
    80016da0:	6105                	addi	sp,sp,32
    80016da2:	8082                	ret

0000000080016da4 <vector_push>:

void vector_push(Vector *vec, uint64_t value) {
    80016da4:	1101                	addi	sp,sp,-32
    80016da6:	ec06                	sd	ra,24(sp)
    80016da8:	e822                	sd	s0,16(sp)
    80016daa:	1000                	addi	s0,sp,32
    80016dac:	fea43423          	sd	a0,-24(s0)
    80016db0:	feb43023          	sd	a1,-32(s0)
    vector_insert(vec, vec->size, value);
    80016db4:	fe843783          	ld	a5,-24(s0)
    80016db8:	439c                	lw	a5,0(a5)
    80016dba:	fe043603          	ld	a2,-32(s0)
    80016dbe:	85be                	mv	a1,a5
    80016dc0:	fe843503          	ld	a0,-24(s0)
    80016dc4:	00e000ef          	jal	ra,80016dd2 <vector_insert>
}
    80016dc8:	0001                	nop
    80016dca:	60e2                	ld	ra,24(sp)
    80016dcc:	6442                	ld	s0,16(sp)
    80016dce:	6105                	addi	sp,sp,32
    80016dd0:	8082                	ret

0000000080016dd2 <vector_insert>:

void vector_insert(Vector *vec, uint32_t idx, uint64_t value) {
    80016dd2:	7139                	addi	sp,sp,-64
    80016dd4:	fc06                	sd	ra,56(sp)
    80016dd6:	f822                	sd	s0,48(sp)
    80016dd8:	0080                	addi	s0,sp,64
    80016dda:	fca43c23          	sd	a0,-40(s0)
    80016dde:	87ae                	mv	a5,a1
    80016de0:	fcc43423          	sd	a2,-56(s0)
    80016de4:	fcf42a23          	sw	a5,-44(s0)
    uint32_t i;
    vector_resize(vec, vec->size + 1);
    80016de8:	fd843783          	ld	a5,-40(s0)
    80016dec:	439c                	lw	a5,0(a5)
    80016dee:	2785                	addiw	a5,a5,1
    80016df0:	2781                	sext.w	a5,a5
    80016df2:	85be                	mv	a1,a5
    80016df4:	fd843503          	ld	a0,-40(s0)
    80016df8:	214000ef          	jal	ra,8001700c <vector_resize>
    for (i = vec->size - 1;i > idx;i--) {
    80016dfc:	fd843783          	ld	a5,-40(s0)
    80016e00:	439c                	lw	a5,0(a5)
    80016e02:	37fd                	addiw	a5,a5,-1
    80016e04:	fef42623          	sw	a5,-20(s0)
    80016e08:	a805                	j	80016e38 <vector_insert+0x66>
        vector_set(vec, i, vector_get_unchecked(vec, i - 1));
    80016e0a:	fec42783          	lw	a5,-20(s0)
    80016e0e:	37fd                	addiw	a5,a5,-1
    80016e10:	2781                	sext.w	a5,a5
    80016e12:	85be                	mv	a1,a5
    80016e14:	fd843503          	ld	a0,-40(s0)
    80016e18:	13a000ef          	jal	ra,80016f52 <vector_get_unchecked>
    80016e1c:	872a                	mv	a4,a0
    80016e1e:	fec42783          	lw	a5,-20(s0)
    80016e22:	863a                	mv	a2,a4
    80016e24:	85be                	mv	a1,a5
    80016e26:	fd843503          	ld	a0,-40(s0)
    80016e2a:	094000ef          	jal	ra,80016ebe <vector_set>
    for (i = vec->size - 1;i > idx;i--) {
    80016e2e:	fec42783          	lw	a5,-20(s0)
    80016e32:	37fd                	addiw	a5,a5,-1
    80016e34:	fef42623          	sw	a5,-20(s0)
    80016e38:	fec42703          	lw	a4,-20(s0)
    80016e3c:	fd442783          	lw	a5,-44(s0)
    80016e40:	2701                	sext.w	a4,a4
    80016e42:	2781                	sext.w	a5,a5
    80016e44:	fce7e3e3          	bltu	a5,a4,80016e0a <vector_insert+0x38>
    }
    vector_set(vec, idx, value);
    80016e48:	fd442783          	lw	a5,-44(s0)
    80016e4c:	fc843603          	ld	a2,-56(s0)
    80016e50:	85be                	mv	a1,a5
    80016e52:	fd843503          	ld	a0,-40(s0)
    80016e56:	068000ef          	jal	ra,80016ebe <vector_set>
}
    80016e5a:	0001                	nop
    80016e5c:	70e2                	ld	ra,56(sp)
    80016e5e:	7442                	ld	s0,48(sp)
    80016e60:	6121                	addi	sp,sp,64
    80016e62:	8082                	ret

0000000080016e64 <vector_find>:

int vector_find(Vector *vec, uint64_t val) {
    80016e64:	7179                	addi	sp,sp,-48
    80016e66:	f422                	sd	s0,40(sp)
    80016e68:	1800                	addi	s0,sp,48
    80016e6a:	fca43c23          	sd	a0,-40(s0)
    80016e6e:	fcb43823          	sd	a1,-48(s0)
    int i;
    for (i = 0;i < (int)vec->size;i++) {
    80016e72:	fe042623          	sw	zero,-20(s0)
    80016e76:	a02d                	j	80016ea0 <vector_find+0x3c>
        if (vec->values[i] == val) {
    80016e78:	fd843783          	ld	a5,-40(s0)
    80016e7c:	6798                	ld	a4,8(a5)
    80016e7e:	fec42783          	lw	a5,-20(s0)
    80016e82:	078e                	slli	a5,a5,0x3
    80016e84:	97ba                	add	a5,a5,a4
    80016e86:	639c                	ld	a5,0(a5)
    80016e88:	fd043703          	ld	a4,-48(s0)
    80016e8c:	00f71563          	bne	a4,a5,80016e96 <vector_find+0x32>
            return i;
    80016e90:	fec42783          	lw	a5,-20(s0)
    80016e94:	a00d                	j	80016eb6 <vector_find+0x52>
    for (i = 0;i < (int)vec->size;i++) {
    80016e96:	fec42783          	lw	a5,-20(s0)
    80016e9a:	2785                	addiw	a5,a5,1
    80016e9c:	fef42623          	sw	a5,-20(s0)
    80016ea0:	fd843783          	ld	a5,-40(s0)
    80016ea4:	439c                	lw	a5,0(a5)
    80016ea6:	0007871b          	sext.w	a4,a5
    80016eaa:	fec42783          	lw	a5,-20(s0)
    80016eae:	2781                	sext.w	a5,a5
    80016eb0:	fce7c4e3          	blt	a5,a4,80016e78 <vector_find+0x14>
        }
    }
    return -1;
    80016eb4:	57fd                	li	a5,-1
}
    80016eb6:	853e                	mv	a0,a5
    80016eb8:	7422                	ld	s0,40(sp)
    80016eba:	6145                	addi	sp,sp,48
    80016ebc:	8082                	ret

0000000080016ebe <vector_set>:

bool vector_set(Vector *vec, uint32_t idx, uint64_t val) {
    80016ebe:	7179                	addi	sp,sp,-48
    80016ec0:	f422                	sd	s0,40(sp)
    80016ec2:	1800                	addi	s0,sp,48
    80016ec4:	fea43423          	sd	a0,-24(s0)
    80016ec8:	87ae                	mv	a5,a1
    80016eca:	fcc43c23          	sd	a2,-40(s0)
    80016ece:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80016ed2:	fe843783          	ld	a5,-24(s0)
    80016ed6:	4398                	lw	a4,0(a5)
    80016ed8:	fe442783          	lw	a5,-28(s0)
    80016edc:	2781                	sext.w	a5,a5
    80016ede:	00e7e463          	bltu	a5,a4,80016ee6 <vector_set+0x28>
        return false;
    80016ee2:	4781                	li	a5,0
    80016ee4:	a821                	j	80016efc <vector_set+0x3e>
    }
    vec->values[idx] = val;
    80016ee6:	fe843783          	ld	a5,-24(s0)
    80016eea:	6798                	ld	a4,8(a5)
    80016eec:	fe446783          	lwu	a5,-28(s0)
    80016ef0:	078e                	slli	a5,a5,0x3
    80016ef2:	97ba                	add	a5,a5,a4
    80016ef4:	fd843703          	ld	a4,-40(s0)
    80016ef8:	e398                	sd	a4,0(a5)
    return true;
    80016efa:	4785                	li	a5,1
}
    80016efc:	853e                	mv	a0,a5
    80016efe:	7422                	ld	s0,40(sp)
    80016f00:	6145                	addi	sp,sp,48
    80016f02:	8082                	ret

0000000080016f04 <vector_get>:

bool vector_get(Vector *vec, uint32_t idx, uint64_t *val) {
    80016f04:	7179                	addi	sp,sp,-48
    80016f06:	f422                	sd	s0,40(sp)
    80016f08:	1800                	addi	s0,sp,48
    80016f0a:	fea43423          	sd	a0,-24(s0)
    80016f0e:	87ae                	mv	a5,a1
    80016f10:	fcc43c23          	sd	a2,-40(s0)
    80016f14:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80016f18:	fe843783          	ld	a5,-24(s0)
    80016f1c:	4398                	lw	a4,0(a5)
    80016f1e:	fe442783          	lw	a5,-28(s0)
    80016f22:	2781                	sext.w	a5,a5
    80016f24:	00e7e463          	bltu	a5,a4,80016f2c <vector_get+0x28>
        return false;
    80016f28:	4781                	li	a5,0
    80016f2a:	a005                	j	80016f4a <vector_get+0x46>
    }
    if (val != NULL) {
    80016f2c:	fd843783          	ld	a5,-40(s0)
    80016f30:	cf81                	beqz	a5,80016f48 <vector_get+0x44>
        *val = vec->values[idx];
    80016f32:	fe843783          	ld	a5,-24(s0)
    80016f36:	6798                	ld	a4,8(a5)
    80016f38:	fe446783          	lwu	a5,-28(s0)
    80016f3c:	078e                	slli	a5,a5,0x3
    80016f3e:	97ba                	add	a5,a5,a4
    80016f40:	6398                	ld	a4,0(a5)
    80016f42:	fd843783          	ld	a5,-40(s0)
    80016f46:	e398                	sd	a4,0(a5)
    }
    return true;
    80016f48:	4785                	li	a5,1
}
    80016f4a:	853e                	mv	a0,a5
    80016f4c:	7422                	ld	s0,40(sp)
    80016f4e:	6145                	addi	sp,sp,48
    80016f50:	8082                	ret

0000000080016f52 <vector_get_unchecked>:

uint64_t vector_get_unchecked(Vector *vec, uint32_t idx) {
    80016f52:	1101                	addi	sp,sp,-32
    80016f54:	ec22                	sd	s0,24(sp)
    80016f56:	1000                	addi	s0,sp,32
    80016f58:	fea43423          	sd	a0,-24(s0)
    80016f5c:	87ae                	mv	a5,a1
    80016f5e:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80016f62:	fe843783          	ld	a5,-24(s0)
    80016f66:	4398                	lw	a4,0(a5)
    80016f68:	fe442783          	lw	a5,-28(s0)
    80016f6c:	2781                	sext.w	a5,a5
    80016f6e:	00e7e463          	bltu	a5,a4,80016f76 <vector_get_unchecked+0x24>
        return 0;
    80016f72:	4781                	li	a5,0
    80016f74:	a809                	j	80016f86 <vector_get_unchecked+0x34>
    }
    return vec->values[idx];
    80016f76:	fe843783          	ld	a5,-24(s0)
    80016f7a:	6798                	ld	a4,8(a5)
    80016f7c:	fe446783          	lwu	a5,-28(s0)
    80016f80:	078e                	slli	a5,a5,0x3
    80016f82:	97ba                	add	a5,a5,a4
    80016f84:	639c                	ld	a5,0(a5)
}
    80016f86:	853e                	mv	a0,a5
    80016f88:	6462                	ld	s0,24(sp)
    80016f8a:	6105                	addi	sp,sp,32
    80016f8c:	8082                	ret

0000000080016f8e <vector_resize_with_default>:


void vector_resize_with_default(Vector *vec, uint32_t new_size, uint64_t def) {
    80016f8e:	7139                	addi	sp,sp,-64
    80016f90:	fc06                	sd	ra,56(sp)
    80016f92:	f822                	sd	s0,48(sp)
    80016f94:	0080                	addi	s0,sp,64
    80016f96:	fca43c23          	sd	a0,-40(s0)
    80016f9a:	87ae                	mv	a5,a1
    80016f9c:	fcc43423          	sd	a2,-56(s0)
    80016fa0:	fcf42a23          	sw	a5,-44(s0)
    uint32_t old_size = vec->size;
    80016fa4:	fd843783          	ld	a5,-40(s0)
    80016fa8:	439c                	lw	a5,0(a5)
    80016faa:	fef42423          	sw	a5,-24(s0)
    vector_resize(vec, new_size);
    80016fae:	fd442783          	lw	a5,-44(s0)
    80016fb2:	85be                	mv	a1,a5
    80016fb4:	fd843503          	ld	a0,-40(s0)
    80016fb8:	054000ef          	jal	ra,8001700c <vector_resize>
    if (old_size < new_size) {
    80016fbc:	fe842703          	lw	a4,-24(s0)
    80016fc0:	fd442783          	lw	a5,-44(s0)
    80016fc4:	2701                	sext.w	a4,a4
    80016fc6:	2781                	sext.w	a5,a5
    80016fc8:	02f77d63          	bgeu	a4,a5,80017002 <vector_resize_with_default+0x74>
        uint32_t i;
        for (i = old_size;i < new_size;i++) {
    80016fcc:	fe842783          	lw	a5,-24(s0)
    80016fd0:	fef42623          	sw	a5,-20(s0)
    80016fd4:	a839                	j	80016ff2 <vector_resize_with_default+0x64>
            vector_set(vec, i, def);
    80016fd6:	fec42783          	lw	a5,-20(s0)
    80016fda:	fc843603          	ld	a2,-56(s0)
    80016fde:	85be                	mv	a1,a5
    80016fe0:	fd843503          	ld	a0,-40(s0)
    80016fe4:	edbff0ef          	jal	ra,80016ebe <vector_set>
        for (i = old_size;i < new_size;i++) {
    80016fe8:	fec42783          	lw	a5,-20(s0)
    80016fec:	2785                	addiw	a5,a5,1
    80016fee:	fef42623          	sw	a5,-20(s0)
    80016ff2:	fec42703          	lw	a4,-20(s0)
    80016ff6:	fd442783          	lw	a5,-44(s0)
    80016ffa:	2701                	sext.w	a4,a4
    80016ffc:	2781                	sext.w	a5,a5
    80016ffe:	fcf76ce3          	bltu	a4,a5,80016fd6 <vector_resize_with_default+0x48>
        }
    }
}
    80017002:	0001                	nop
    80017004:	70e2                	ld	ra,56(sp)
    80017006:	7442                	ld	s0,48(sp)
    80017008:	6121                	addi	sp,sp,64
    8001700a:	8082                	ret

000000008001700c <vector_resize>:

void vector_resize(Vector *vec, uint32_t new_size) {
    8001700c:	7179                	addi	sp,sp,-48
    8001700e:	f406                	sd	ra,40(sp)
    80017010:	f022                	sd	s0,32(sp)
    80017012:	1800                	addi	s0,sp,48
    80017014:	fca43c23          	sd	a0,-40(s0)
    80017018:	87ae                	mv	a5,a1
    8001701a:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_size > vec->capacity) {
    8001701e:	fd843783          	ld	a5,-40(s0)
    80017022:	43d8                	lw	a4,4(a5)
    80017024:	fd442783          	lw	a5,-44(s0)
    80017028:	2781                	sext.w	a5,a5
    8001702a:	06f77963          	bgeu	a4,a5,8001709c <vector_resize+0x90>
        vals = (uint64_t *)g_kcalloc(new_size, sizeof(uint64_t));
    8001702e:	fd446783          	lwu	a5,-44(s0)
    80017032:	45a1                	li	a1,8
    80017034:	853e                	mv	a0,a5
    80017036:	b3ffe0ef          	jal	ra,80015b74 <g_kcalloc>
    8001703a:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    8001703e:	fe042623          	sw	zero,-20(s0)
    80017042:	a02d                	j	8001706c <vector_resize+0x60>
            vals[i] = vec->values[i];
    80017044:	fd843783          	ld	a5,-40(s0)
    80017048:	6798                	ld	a4,8(a5)
    8001704a:	fec46783          	lwu	a5,-20(s0)
    8001704e:	078e                	slli	a5,a5,0x3
    80017050:	973e                	add	a4,a4,a5
    80017052:	fec46783          	lwu	a5,-20(s0)
    80017056:	078e                	slli	a5,a5,0x3
    80017058:	fe043683          	ld	a3,-32(s0)
    8001705c:	97b6                	add	a5,a5,a3
    8001705e:	6318                	ld	a4,0(a4)
    80017060:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80017062:	fec42783          	lw	a5,-20(s0)
    80017066:	2785                	addiw	a5,a5,1
    80017068:	fef42623          	sw	a5,-20(s0)
    8001706c:	fd843783          	ld	a5,-40(s0)
    80017070:	4398                	lw	a4,0(a5)
    80017072:	fec42783          	lw	a5,-20(s0)
    80017076:	2781                	sext.w	a5,a5
    80017078:	fce7e6e3          	bltu	a5,a4,80017044 <vector_resize+0x38>
        }
        g_kfree(vec->values);
    8001707c:	fd843783          	ld	a5,-40(s0)
    80017080:	679c                	ld	a5,8(a5)
    80017082:	853e                	mv	a0,a5
    80017084:	b53fe0ef          	jal	ra,80015bd6 <g_kfree>
        vec->values = vals;
    80017088:	fd843783          	ld	a5,-40(s0)
    8001708c:	fe043703          	ld	a4,-32(s0)
    80017090:	e798                	sd	a4,8(a5)
        vec->capacity = new_size;
    80017092:	fd843783          	ld	a5,-40(s0)
    80017096:	fd442703          	lw	a4,-44(s0)
    8001709a:	c3d8                	sw	a4,4(a5)
    }        
    vec->size = new_size;    
    8001709c:	fd843783          	ld	a5,-40(s0)
    800170a0:	fd442703          	lw	a4,-44(s0)
    800170a4:	c398                	sw	a4,0(a5)
}
    800170a6:	0001                	nop
    800170a8:	70a2                	ld	ra,40(sp)
    800170aa:	7402                	ld	s0,32(sp)
    800170ac:	6145                	addi	sp,sp,48
    800170ae:	8082                	ret

00000000800170b0 <vector_reserve>:

void vector_reserve(Vector *vec, uint32_t new_capacity) {
    800170b0:	7179                	addi	sp,sp,-48
    800170b2:	f406                	sd	ra,40(sp)
    800170b4:	f022                	sd	s0,32(sp)
    800170b6:	1800                	addi	s0,sp,48
    800170b8:	fca43c23          	sd	a0,-40(s0)
    800170bc:	87ae                	mv	a5,a1
    800170be:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_capacity > vec->capacity) {
    800170c2:	fd843783          	ld	a5,-40(s0)
    800170c6:	43d8                	lw	a4,4(a5)
    800170c8:	fd442783          	lw	a5,-44(s0)
    800170cc:	2781                	sext.w	a5,a5
    800170ce:	06f77a63          	bgeu	a4,a5,80017142 <vector_reserve+0x92>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    800170d2:	fd446783          	lwu	a5,-44(s0)
    800170d6:	45a1                	li	a1,8
    800170d8:	853e                	mv	a0,a5
    800170da:	a9bfe0ef          	jal	ra,80015b74 <g_kcalloc>
    800170de:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    800170e2:	fe042623          	sw	zero,-20(s0)
    800170e6:	a02d                	j	80017110 <vector_reserve+0x60>
            vals[i] = vec->values[i];
    800170e8:	fd843783          	ld	a5,-40(s0)
    800170ec:	6798                	ld	a4,8(a5)
    800170ee:	fec46783          	lwu	a5,-20(s0)
    800170f2:	078e                	slli	a5,a5,0x3
    800170f4:	973e                	add	a4,a4,a5
    800170f6:	fec46783          	lwu	a5,-20(s0)
    800170fa:	078e                	slli	a5,a5,0x3
    800170fc:	fe043683          	ld	a3,-32(s0)
    80017100:	97b6                	add	a5,a5,a3
    80017102:	6318                	ld	a4,0(a4)
    80017104:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80017106:	fec42783          	lw	a5,-20(s0)
    8001710a:	2785                	addiw	a5,a5,1
    8001710c:	fef42623          	sw	a5,-20(s0)
    80017110:	fd843783          	ld	a5,-40(s0)
    80017114:	4398                	lw	a4,0(a5)
    80017116:	fec42783          	lw	a5,-20(s0)
    8001711a:	2781                	sext.w	a5,a5
    8001711c:	fce7e6e3          	bltu	a5,a4,800170e8 <vector_reserve+0x38>
        }
        g_kfree(vec->values);
    80017120:	fd843783          	ld	a5,-40(s0)
    80017124:	679c                	ld	a5,8(a5)
    80017126:	853e                	mv	a0,a5
    80017128:	aaffe0ef          	jal	ra,80015bd6 <g_kfree>
        vec->values = vals;
    8001712c:	fd843783          	ld	a5,-40(s0)
    80017130:	fe043703          	ld	a4,-32(s0)
    80017134:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    80017136:	fd843783          	ld	a5,-40(s0)
    8001713a:	fd442703          	lw	a4,-44(s0)
    8001713e:	c3d8                	sw	a4,4(a5)
        }
        g_kfree(vec->values);
        vec->values = vals;
        vec->capacity = new_capacity;
    }
}
    80017140:	a04d                	j	800171e2 <vector_reserve+0x132>
    else if (new_capacity > 0 && new_capacity < vec->capacity) {
    80017142:	fd442783          	lw	a5,-44(s0)
    80017146:	2781                	sext.w	a5,a5
    80017148:	cfc9                	beqz	a5,800171e2 <vector_reserve+0x132>
    8001714a:	fd843783          	ld	a5,-40(s0)
    8001714e:	43d8                	lw	a4,4(a5)
    80017150:	fd442783          	lw	a5,-44(s0)
    80017154:	2781                	sext.w	a5,a5
    80017156:	08e7f663          	bgeu	a5,a4,800171e2 <vector_reserve+0x132>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    8001715a:	fd446783          	lwu	a5,-44(s0)
    8001715e:	45a1                	li	a1,8
    80017160:	853e                	mv	a0,a5
    80017162:	a13fe0ef          	jal	ra,80015b74 <g_kcalloc>
    80017166:	fea43023          	sd	a0,-32(s0)
        if (new_capacity < vec->size) {
    8001716a:	fd843783          	ld	a5,-40(s0)
    8001716e:	4398                	lw	a4,0(a5)
    80017170:	fd442783          	lw	a5,-44(s0)
    80017174:	2781                	sext.w	a5,a5
    80017176:	00e7f763          	bgeu	a5,a4,80017184 <vector_reserve+0xd4>
            vec->size = new_capacity;
    8001717a:	fd843783          	ld	a5,-40(s0)
    8001717e:	fd442703          	lw	a4,-44(s0)
    80017182:	c398                	sw	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80017184:	fe042623          	sw	zero,-20(s0)
    80017188:	a02d                	j	800171b2 <vector_reserve+0x102>
            vals[i] = vec->values[i];
    8001718a:	fd843783          	ld	a5,-40(s0)
    8001718e:	6798                	ld	a4,8(a5)
    80017190:	fec46783          	lwu	a5,-20(s0)
    80017194:	078e                	slli	a5,a5,0x3
    80017196:	973e                	add	a4,a4,a5
    80017198:	fec46783          	lwu	a5,-20(s0)
    8001719c:	078e                	slli	a5,a5,0x3
    8001719e:	fe043683          	ld	a3,-32(s0)
    800171a2:	97b6                	add	a5,a5,a3
    800171a4:	6318                	ld	a4,0(a4)
    800171a6:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    800171a8:	fec42783          	lw	a5,-20(s0)
    800171ac:	2785                	addiw	a5,a5,1
    800171ae:	fef42623          	sw	a5,-20(s0)
    800171b2:	fd843783          	ld	a5,-40(s0)
    800171b6:	4398                	lw	a4,0(a5)
    800171b8:	fec42783          	lw	a5,-20(s0)
    800171bc:	2781                	sext.w	a5,a5
    800171be:	fce7e6e3          	bltu	a5,a4,8001718a <vector_reserve+0xda>
        g_kfree(vec->values);
    800171c2:	fd843783          	ld	a5,-40(s0)
    800171c6:	679c                	ld	a5,8(a5)
    800171c8:	853e                	mv	a0,a5
    800171ca:	a0dfe0ef          	jal	ra,80015bd6 <g_kfree>
        vec->values = vals;
    800171ce:	fd843783          	ld	a5,-40(s0)
    800171d2:	fe043703          	ld	a4,-32(s0)
    800171d6:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    800171d8:	fd843783          	ld	a5,-40(s0)
    800171dc:	fd442703          	lw	a4,-44(s0)
    800171e0:	c3d8                	sw	a4,4(a5)
}
    800171e2:	0001                	nop
    800171e4:	70a2                	ld	ra,40(sp)
    800171e6:	7402                	ld	s0,32(sp)
    800171e8:	6145                	addi	sp,sp,48
    800171ea:	8082                	ret

00000000800171ec <vector_remove>:

bool vector_remove(Vector *vec, uint32_t idx) {
    800171ec:	1101                	addi	sp,sp,-32
    800171ee:	ec22                	sd	s0,24(sp)
    800171f0:	1000                	addi	s0,sp,32
    800171f2:	fea43423          	sd	a0,-24(s0)
    800171f6:	87ae                	mv	a5,a1
    800171f8:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    800171fc:	fe843783          	ld	a5,-24(s0)
    80017200:	4398                	lw	a4,0(a5)
    80017202:	fe442783          	lw	a5,-28(s0)
    80017206:	2781                	sext.w	a5,a5
    80017208:	00e7e463          	bltu	a5,a4,80017210 <vector_remove+0x24>
        return false;
    8001720c:	4781                	li	a5,0
    8001720e:	a8a9                	j	80017268 <vector_remove+0x7c>
    }
    vec->size -= 1;
    80017210:	fe843783          	ld	a5,-24(s0)
    80017214:	439c                	lw	a5,0(a5)
    80017216:	37fd                	addiw	a5,a5,-1
    80017218:	0007871b          	sext.w	a4,a5
    8001721c:	fe843783          	ld	a5,-24(s0)
    80017220:	c398                	sw	a4,0(a5)
    for (;idx < vec->size;idx++) {
    80017222:	a815                	j	80017256 <vector_remove+0x6a>
        vec->values[idx] = vec->values[idx + 1];
    80017224:	fe843783          	ld	a5,-24(s0)
    80017228:	6798                	ld	a4,8(a5)
    8001722a:	fe442783          	lw	a5,-28(s0)
    8001722e:	2785                	addiw	a5,a5,1
    80017230:	2781                	sext.w	a5,a5
    80017232:	1782                	slli	a5,a5,0x20
    80017234:	9381                	srli	a5,a5,0x20
    80017236:	078e                	slli	a5,a5,0x3
    80017238:	973e                	add	a4,a4,a5
    8001723a:	fe843783          	ld	a5,-24(s0)
    8001723e:	6794                	ld	a3,8(a5)
    80017240:	fe446783          	lwu	a5,-28(s0)
    80017244:	078e                	slli	a5,a5,0x3
    80017246:	97b6                	add	a5,a5,a3
    80017248:	6318                	ld	a4,0(a4)
    8001724a:	e398                	sd	a4,0(a5)
    for (;idx < vec->size;idx++) {
    8001724c:	fe442783          	lw	a5,-28(s0)
    80017250:	2785                	addiw	a5,a5,1
    80017252:	fef42223          	sw	a5,-28(s0)
    80017256:	fe843783          	ld	a5,-24(s0)
    8001725a:	4398                	lw	a4,0(a5)
    8001725c:	fe442783          	lw	a5,-28(s0)
    80017260:	2781                	sext.w	a5,a5
    80017262:	fce7e1e3          	bltu	a5,a4,80017224 <vector_remove+0x38>
    }
    return true;
    80017266:	4785                	li	a5,1
}
    80017268:	853e                	mv	a0,a5
    8001726a:	6462                	ld	s0,24(sp)
    8001726c:	6105                	addi	sp,sp,32
    8001726e:	8082                	ret

0000000080017270 <vector_remove_value>:

bool vector_remove_value(Vector *vec, uint64_t val) {
    80017270:	7179                	addi	sp,sp,-48
    80017272:	f406                	sd	ra,40(sp)
    80017274:	f022                	sd	s0,32(sp)
    80017276:	1800                	addi	s0,sp,48
    80017278:	fca43c23          	sd	a0,-40(s0)
    8001727c:	fcb43823          	sd	a1,-48(s0)
    uint32_t i;
    for (i = 0;i < vec->size;i++) {
    80017280:	fe042623          	sw	zero,-20(s0)
    80017284:	a81d                	j	800172ba <vector_remove_value+0x4a>
        if (vec->values[i] == val) {
    80017286:	fd843783          	ld	a5,-40(s0)
    8001728a:	6798                	ld	a4,8(a5)
    8001728c:	fec46783          	lwu	a5,-20(s0)
    80017290:	078e                	slli	a5,a5,0x3
    80017292:	97ba                	add	a5,a5,a4
    80017294:	639c                	ld	a5,0(a5)
    80017296:	fd043703          	ld	a4,-48(s0)
    8001729a:	00f71b63          	bne	a4,a5,800172b0 <vector_remove_value+0x40>
            vector_remove(vec, i);
    8001729e:	fec42783          	lw	a5,-20(s0)
    800172a2:	85be                	mv	a1,a5
    800172a4:	fd843503          	ld	a0,-40(s0)
    800172a8:	f45ff0ef          	jal	ra,800171ec <vector_remove>
            return true;
    800172ac:	4785                	li	a5,1
    800172ae:	a839                	j	800172cc <vector_remove_value+0x5c>
    for (i = 0;i < vec->size;i++) {
    800172b0:	fec42783          	lw	a5,-20(s0)
    800172b4:	2785                	addiw	a5,a5,1
    800172b6:	fef42623          	sw	a5,-20(s0)
    800172ba:	fd843783          	ld	a5,-40(s0)
    800172be:	4398                	lw	a4,0(a5)
    800172c0:	fec42783          	lw	a5,-20(s0)
    800172c4:	2781                	sext.w	a5,a5
    800172c6:	fce7e0e3          	bltu	a5,a4,80017286 <vector_remove_value+0x16>
        }
    }
    return false;
    800172ca:	4781                	li	a5,0
}
    800172cc:	853e                	mv	a0,a5
    800172ce:	70a2                	ld	ra,40(sp)
    800172d0:	7402                	ld	s0,32(sp)
    800172d2:	6145                	addi	sp,sp,48
    800172d4:	8082                	ret

00000000800172d6 <vector_clear>:

void vector_clear(Vector *vec) {
    800172d6:	1101                	addi	sp,sp,-32
    800172d8:	ec06                	sd	ra,24(sp)
    800172da:	e822                	sd	s0,16(sp)
    800172dc:	1000                	addi	s0,sp,32
    800172de:	fea43423          	sd	a0,-24(s0)
    vector_resize(vec, 0);
    800172e2:	4581                	li	a1,0
    800172e4:	fe843503          	ld	a0,-24(s0)
    800172e8:	d25ff0ef          	jal	ra,8001700c <vector_resize>
}
    800172ec:	0001                	nop
    800172ee:	60e2                	ld	ra,24(sp)
    800172f0:	6442                	ld	s0,16(sp)
    800172f2:	6105                	addi	sp,sp,32
    800172f4:	8082                	ret

00000000800172f6 <vector_binsearch_ascending>:

int vector_binsearch_ascending(struct Vector *vec, uint64_t key) {
    800172f6:	7179                	addi	sp,sp,-48
    800172f8:	f406                	sd	ra,40(sp)
    800172fa:	f022                	sd	s0,32(sp)
    800172fc:	1800                	addi	s0,sp,48
    800172fe:	fca43c23          	sd	a0,-40(s0)
    80017302:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    80017306:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec);
    8001730a:	fd843503          	ld	a0,-40(s0)
    8001730e:	356000ef          	jal	ra,80017664 <vector_size>
    80017312:	87aa                	mv	a5,a0
    80017314:	2781                	sext.w	a5,a5
    80017316:	fef42423          	sw	a5,-24(s0)

    while (low < high) {
    8001731a:	a0ad                	j	80017384 <vector_binsearch_ascending+0x8e>
        int mid = (low + high) / 2;
    8001731c:	fec42703          	lw	a4,-20(s0)
    80017320:	fe842783          	lw	a5,-24(s0)
    80017324:	9fb9                	addw	a5,a5,a4
    80017326:	2781                	sext.w	a5,a5
    80017328:	01f7d71b          	srliw	a4,a5,0x1f
    8001732c:	9fb9                	addw	a5,a5,a4
    8001732e:	4017d79b          	sraiw	a5,a5,0x1
    80017332:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) > key) {
    80017336:	fe442783          	lw	a5,-28(s0)
    8001733a:	85be                	mv	a1,a5
    8001733c:	fd843503          	ld	a0,-40(s0)
    80017340:	c13ff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    80017344:	872a                	mv	a4,a0
    80017346:	fd043783          	ld	a5,-48(s0)
    8001734a:	00e7f863          	bgeu	a5,a4,8001735a <vector_binsearch_ascending+0x64>
            high = mid - 1;
    8001734e:	fe442783          	lw	a5,-28(s0)
    80017352:	37fd                	addiw	a5,a5,-1
    80017354:	fef42423          	sw	a5,-24(s0)
    80017358:	a035                	j	80017384 <vector_binsearch_ascending+0x8e>
        }
        else if (vector_get_unchecked(vec, mid) < key) {
    8001735a:	fe442783          	lw	a5,-28(s0)
    8001735e:	85be                	mv	a1,a5
    80017360:	fd843503          	ld	a0,-40(s0)
    80017364:	befff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    80017368:	872a                	mv	a4,a0
    8001736a:	fd043783          	ld	a5,-48(s0)
    8001736e:	00f77863          	bgeu	a4,a5,8001737e <vector_binsearch_ascending+0x88>
            low = mid + 1;
    80017372:	fe442783          	lw	a5,-28(s0)
    80017376:	2785                	addiw	a5,a5,1
    80017378:	fef42623          	sw	a5,-20(s0)
    8001737c:	a021                	j	80017384 <vector_binsearch_ascending+0x8e>
        }
        else {
            return mid;
    8001737e:	fe442783          	lw	a5,-28(s0)
    80017382:	a811                	j	80017396 <vector_binsearch_ascending+0xa0>
    while (low < high) {
    80017384:	fec42703          	lw	a4,-20(s0)
    80017388:	fe842783          	lw	a5,-24(s0)
    8001738c:	2701                	sext.w	a4,a4
    8001738e:	2781                	sext.w	a5,a5
    80017390:	f8f746e3          	blt	a4,a5,8001731c <vector_binsearch_ascending+0x26>
        }
    }
    return -1;
    80017394:	57fd                	li	a5,-1
}
    80017396:	853e                	mv	a0,a5
    80017398:	70a2                	ld	ra,40(sp)
    8001739a:	7402                	ld	s0,32(sp)
    8001739c:	6145                	addi	sp,sp,48
    8001739e:	8082                	ret

00000000800173a0 <vector_binsearch_descending>:

int vector_binsearch_descending(struct Vector *vec, uint64_t key) {
    800173a0:	7179                	addi	sp,sp,-48
    800173a2:	f406                	sd	ra,40(sp)
    800173a4:	f022                	sd	s0,32(sp)
    800173a6:	1800                	addi	s0,sp,48
    800173a8:	fca43c23          	sd	a0,-40(s0)
    800173ac:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    800173b0:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec) - 1;
    800173b4:	fd843503          	ld	a0,-40(s0)
    800173b8:	2ac000ef          	jal	ra,80017664 <vector_size>
    800173bc:	87aa                	mv	a5,a0
    800173be:	2781                	sext.w	a5,a5
    800173c0:	37fd                	addiw	a5,a5,-1
    800173c2:	2781                	sext.w	a5,a5
    800173c4:	fef42423          	sw	a5,-24(s0)

    while (low <= high) {
    800173c8:	a0ad                	j	80017432 <vector_binsearch_descending+0x92>
        int mid = (low + high) / 2;
    800173ca:	fec42703          	lw	a4,-20(s0)
    800173ce:	fe842783          	lw	a5,-24(s0)
    800173d2:	9fb9                	addw	a5,a5,a4
    800173d4:	2781                	sext.w	a5,a5
    800173d6:	01f7d71b          	srliw	a4,a5,0x1f
    800173da:	9fb9                	addw	a5,a5,a4
    800173dc:	4017d79b          	sraiw	a5,a5,0x1
    800173e0:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) < key) {
    800173e4:	fe442783          	lw	a5,-28(s0)
    800173e8:	85be                	mv	a1,a5
    800173ea:	fd843503          	ld	a0,-40(s0)
    800173ee:	b65ff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    800173f2:	872a                	mv	a4,a0
    800173f4:	fd043783          	ld	a5,-48(s0)
    800173f8:	00f77863          	bgeu	a4,a5,80017408 <vector_binsearch_descending+0x68>
            high = mid - 1;
    800173fc:	fe442783          	lw	a5,-28(s0)
    80017400:	37fd                	addiw	a5,a5,-1
    80017402:	fef42423          	sw	a5,-24(s0)
    80017406:	a035                	j	80017432 <vector_binsearch_descending+0x92>
        }
        else if (vector_get_unchecked(vec, mid) > key) {
    80017408:	fe442783          	lw	a5,-28(s0)
    8001740c:	85be                	mv	a1,a5
    8001740e:	fd843503          	ld	a0,-40(s0)
    80017412:	b41ff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    80017416:	872a                	mv	a4,a0
    80017418:	fd043783          	ld	a5,-48(s0)
    8001741c:	00e7f863          	bgeu	a5,a4,8001742c <vector_binsearch_descending+0x8c>
            low = mid + 1;
    80017420:	fe442783          	lw	a5,-28(s0)
    80017424:	2785                	addiw	a5,a5,1
    80017426:	fef42623          	sw	a5,-20(s0)
    8001742a:	a021                	j	80017432 <vector_binsearch_descending+0x92>
        }
        else {
            return mid;
    8001742c:	fe442783          	lw	a5,-28(s0)
    80017430:	a811                	j	80017444 <vector_binsearch_descending+0xa4>
    while (low <= high) {
    80017432:	fec42703          	lw	a4,-20(s0)
    80017436:	fe842783          	lw	a5,-24(s0)
    8001743a:	2701                	sext.w	a4,a4
    8001743c:	2781                	sext.w	a5,a5
    8001743e:	f8e7d6e3          	bge	a5,a4,800173ca <vector_binsearch_descending+0x2a>
        }
    }
    return -1;
    80017442:	57fd                	li	a5,-1
}
    80017444:	853e                	mv	a0,a5
    80017446:	70a2                	ld	ra,40(sp)
    80017448:	7402                	ld	s0,32(sp)
    8001744a:	6145                	addi	sp,sp,48
    8001744c:	8082                	ret

000000008001744e <vector_sort>:

void vector_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    8001744e:	1101                	addi	sp,sp,-32
    80017450:	ec06                	sd	ra,24(sp)
    80017452:	e822                	sd	s0,16(sp)
    80017454:	1000                	addi	s0,sp,32
    80017456:	fea43423          	sd	a0,-24(s0)
    8001745a:	feb43023          	sd	a1,-32(s0)
    vector_insertion_sort(vec, comp);
    8001745e:	fe043583          	ld	a1,-32(s0)
    80017462:	fe843503          	ld	a0,-24(s0)
    80017466:	10e000ef          	jal	ra,80017574 <vector_insertion_sort>
}
    8001746a:	0001                	nop
    8001746c:	60e2                	ld	ra,24(sp)
    8001746e:	6442                	ld	s0,16(sp)
    80017470:	6105                	addi	sp,sp,32
    80017472:	8082                	ret

0000000080017474 <vector_selection_sort>:

void vector_selection_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    80017474:	715d                	addi	sp,sp,-80
    80017476:	e486                	sd	ra,72(sp)
    80017478:	e0a2                	sd	s0,64(sp)
    8001747a:	fc26                	sd	s1,56(sp)
    8001747c:	0880                	addi	s0,sp,80
    8001747e:	faa43c23          	sd	a0,-72(s0)
    80017482:	fab43823          	sd	a1,-80(s0)
    uint32_t i;
    uint32_t j;
    uint32_t min_idx;
    uint64_t tmp;

    for (i = 0;i < vector_size(vec);i++) {
    80017486:	fc042e23          	sw	zero,-36(s0)
    8001748a:	a0d1                	j	8001754e <vector_selection_sort+0xda>
        min_idx = i;
    8001748c:	fdc42783          	lw	a5,-36(s0)
    80017490:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    80017494:	fdc42783          	lw	a5,-36(s0)
    80017498:	2785                	addiw	a5,a5,1
    8001749a:	fcf42c23          	sw	a5,-40(s0)
    8001749e:	a0a9                	j	800174e8 <vector_selection_sort+0x74>
            if (!comp(vector_get_unchecked(vec, min_idx), vector_get_unchecked(vec, j))) {
    800174a0:	fd442783          	lw	a5,-44(s0)
    800174a4:	85be                	mv	a1,a5
    800174a6:	fb843503          	ld	a0,-72(s0)
    800174aa:	aa9ff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    800174ae:	84aa                	mv	s1,a0
    800174b0:	fd842783          	lw	a5,-40(s0)
    800174b4:	85be                	mv	a1,a5
    800174b6:	fb843503          	ld	a0,-72(s0)
    800174ba:	a99ff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    800174be:	87aa                	mv	a5,a0
    800174c0:	fb043703          	ld	a4,-80(s0)
    800174c4:	85be                	mv	a1,a5
    800174c6:	8526                	mv	a0,s1
    800174c8:	9702                	jalr	a4
    800174ca:	87aa                	mv	a5,a0
    800174cc:	0017c793          	xori	a5,a5,1
    800174d0:	0ff7f793          	andi	a5,a5,255
    800174d4:	c789                	beqz	a5,800174de <vector_selection_sort+0x6a>
                min_idx = j;
    800174d6:	fd842783          	lw	a5,-40(s0)
    800174da:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    800174de:	fd842783          	lw	a5,-40(s0)
    800174e2:	2785                	addiw	a5,a5,1
    800174e4:	fcf42c23          	sw	a5,-40(s0)
    800174e8:	fb843503          	ld	a0,-72(s0)
    800174ec:	178000ef          	jal	ra,80017664 <vector_size>
    800174f0:	87aa                	mv	a5,a0
    800174f2:	0007871b          	sext.w	a4,a5
    800174f6:	fd842783          	lw	a5,-40(s0)
    800174fa:	2781                	sext.w	a5,a5
    800174fc:	fae7e2e3          	bltu	a5,a4,800174a0 <vector_selection_sort+0x2c>
            }
        }
        tmp = vector_get_unchecked(vec, i);
    80017500:	fdc42783          	lw	a5,-36(s0)
    80017504:	85be                	mv	a1,a5
    80017506:	fb843503          	ld	a0,-72(s0)
    8001750a:	a49ff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    8001750e:	fca43423          	sd	a0,-56(s0)
        vector_set(vec, i, vector_get_unchecked(vec, min_idx));
    80017512:	fd442783          	lw	a5,-44(s0)
    80017516:	85be                	mv	a1,a5
    80017518:	fb843503          	ld	a0,-72(s0)
    8001751c:	a37ff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    80017520:	872a                	mv	a4,a0
    80017522:	fdc42783          	lw	a5,-36(s0)
    80017526:	863a                	mv	a2,a4
    80017528:	85be                	mv	a1,a5
    8001752a:	fb843503          	ld	a0,-72(s0)
    8001752e:	991ff0ef          	jal	ra,80016ebe <vector_set>
        vector_set(vec, min_idx, tmp);
    80017532:	fd442783          	lw	a5,-44(s0)
    80017536:	fc843603          	ld	a2,-56(s0)
    8001753a:	85be                	mv	a1,a5
    8001753c:	fb843503          	ld	a0,-72(s0)
    80017540:	97fff0ef          	jal	ra,80016ebe <vector_set>
    for (i = 0;i < vector_size(vec);i++) {
    80017544:	fdc42783          	lw	a5,-36(s0)
    80017548:	2785                	addiw	a5,a5,1
    8001754a:	fcf42e23          	sw	a5,-36(s0)
    8001754e:	fb843503          	ld	a0,-72(s0)
    80017552:	112000ef          	jal	ra,80017664 <vector_size>
    80017556:	87aa                	mv	a5,a0
    80017558:	0007871b          	sext.w	a4,a5
    8001755c:	fdc42783          	lw	a5,-36(s0)
    80017560:	2781                	sext.w	a5,a5
    80017562:	f2e7e5e3          	bltu	a5,a4,8001748c <vector_selection_sort+0x18>
    }
}
    80017566:	0001                	nop
    80017568:	0001                	nop
    8001756a:	60a6                	ld	ra,72(sp)
    8001756c:	6406                	ld	s0,64(sp)
    8001756e:	74e2                	ld	s1,56(sp)
    80017570:	6161                	addi	sp,sp,80
    80017572:	8082                	ret

0000000080017574 <vector_insertion_sort>:

void vector_insertion_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    80017574:	715d                	addi	sp,sp,-80
    80017576:	e486                	sd	ra,72(sp)
    80017578:	e0a2                	sd	s0,64(sp)
    8001757a:	fc26                	sd	s1,56(sp)
    8001757c:	0880                	addi	s0,sp,80
    8001757e:	faa43c23          	sd	a0,-72(s0)
    80017582:	fab43823          	sd	a1,-80(s0)
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    80017586:	4785                	li	a5,1
    80017588:	fcf42e23          	sw	a5,-36(s0)
    8001758c:	a84d                	j	8001763e <vector_insertion_sort+0xca>
        uint32_t j = i;
    8001758e:	fdc42783          	lw	a5,-36(s0)
    80017592:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    80017596:	a8b1                	j	800175f2 <vector_insertion_sort+0x7e>
            uint64_t left = vector_get_unchecked(vec, j - 1);
    80017598:	fd842783          	lw	a5,-40(s0)
    8001759c:	37fd                	addiw	a5,a5,-1
    8001759e:	2781                	sext.w	a5,a5
    800175a0:	85be                	mv	a1,a5
    800175a2:	fb843503          	ld	a0,-72(s0)
    800175a6:	9adff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    800175aa:	fca43823          	sd	a0,-48(s0)
            uint64_t right = vector_get_unchecked(vec, j);
    800175ae:	fd842783          	lw	a5,-40(s0)
    800175b2:	85be                	mv	a1,a5
    800175b4:	fb843503          	ld	a0,-72(s0)
    800175b8:	99bff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    800175bc:	fca43423          	sd	a0,-56(s0)

            vector_set(vec, j, left);
    800175c0:	fd842783          	lw	a5,-40(s0)
    800175c4:	fd043603          	ld	a2,-48(s0)
    800175c8:	85be                	mv	a1,a5
    800175ca:	fb843503          	ld	a0,-72(s0)
    800175ce:	8f1ff0ef          	jal	ra,80016ebe <vector_set>
            vector_set(vec, j - 1, right);
    800175d2:	fd842783          	lw	a5,-40(s0)
    800175d6:	37fd                	addiw	a5,a5,-1
    800175d8:	2781                	sext.w	a5,a5
    800175da:	fc843603          	ld	a2,-56(s0)
    800175de:	85be                	mv	a1,a5
    800175e0:	fb843503          	ld	a0,-72(s0)
    800175e4:	8dbff0ef          	jal	ra,80016ebe <vector_set>

            j -= 1;
    800175e8:	fd842783          	lw	a5,-40(s0)
    800175ec:	37fd                	addiw	a5,a5,-1
    800175ee:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    800175f2:	fd842783          	lw	a5,-40(s0)
    800175f6:	2781                	sext.w	a5,a5
    800175f8:	cf95                	beqz	a5,80017634 <vector_insertion_sort+0xc0>
    800175fa:	fd842783          	lw	a5,-40(s0)
    800175fe:	37fd                	addiw	a5,a5,-1
    80017600:	2781                	sext.w	a5,a5
    80017602:	85be                	mv	a1,a5
    80017604:	fb843503          	ld	a0,-72(s0)
    80017608:	94bff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    8001760c:	84aa                	mv	s1,a0
    8001760e:	fd842783          	lw	a5,-40(s0)
    80017612:	85be                	mv	a1,a5
    80017614:	fb843503          	ld	a0,-72(s0)
    80017618:	93bff0ef          	jal	ra,80016f52 <vector_get_unchecked>
    8001761c:	87aa                	mv	a5,a0
    8001761e:	fb043703          	ld	a4,-80(s0)
    80017622:	85be                	mv	a1,a5
    80017624:	8526                	mv	a0,s1
    80017626:	9702                	jalr	a4
    80017628:	87aa                	mv	a5,a0
    8001762a:	0017c793          	xori	a5,a5,1
    8001762e:	0ff7f793          	andi	a5,a5,255
    80017632:	f3bd                	bnez	a5,80017598 <vector_insertion_sort+0x24>
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    80017634:	fdc42783          	lw	a5,-36(s0)
    80017638:	2785                	addiw	a5,a5,1
    8001763a:	fcf42e23          	sw	a5,-36(s0)
    8001763e:	fb843503          	ld	a0,-72(s0)
    80017642:	022000ef          	jal	ra,80017664 <vector_size>
    80017646:	87aa                	mv	a5,a0
    80017648:	0007871b          	sext.w	a4,a5
    8001764c:	fdc42783          	lw	a5,-36(s0)
    80017650:	2781                	sext.w	a5,a5
    80017652:	f2e7eee3          	bltu	a5,a4,8001758e <vector_insertion_sort+0x1a>
        }
    }
}
    80017656:	0001                	nop
    80017658:	0001                	nop
    8001765a:	60a6                	ld	ra,72(sp)
    8001765c:	6406                	ld	s0,64(sp)
    8001765e:	74e2                	ld	s1,56(sp)
    80017660:	6161                	addi	sp,sp,80
    80017662:	8082                	ret

0000000080017664 <vector_size>:

uint32_t vector_size(Vector *vec) {
    80017664:	1101                	addi	sp,sp,-32
    80017666:	ec22                	sd	s0,24(sp)
    80017668:	1000                	addi	s0,sp,32
    8001766a:	fea43423          	sd	a0,-24(s0)
    return vec->size;
    8001766e:	fe843783          	ld	a5,-24(s0)
    80017672:	439c                	lw	a5,0(a5)
}
    80017674:	853e                	mv	a0,a5
    80017676:	6462                	ld	s0,24(sp)
    80017678:	6105                	addi	sp,sp,32
    8001767a:	8082                	ret

000000008001767c <vector_capacity>:

uint32_t vector_capacity(Vector *vec) {
    8001767c:	1101                	addi	sp,sp,-32
    8001767e:	ec22                	sd	s0,24(sp)
    80017680:	1000                	addi	s0,sp,32
    80017682:	fea43423          	sd	a0,-24(s0)
    return vec->capacity;
    80017686:	fe843783          	ld	a5,-24(s0)
    8001768a:	43dc                	lw	a5,4(a5)
}
    8001768c:	853e                	mv	a0,a5
    8001768e:	6462                	ld	s0,24(sp)
    80017690:	6105                	addi	sp,sp,32
    80017692:	8082                	ret

0000000080017694 <vector_free>:

void vector_free(Vector *vec) {
    80017694:	1101                	addi	sp,sp,-32
    80017696:	ec06                	sd	ra,24(sp)
    80017698:	e822                	sd	s0,16(sp)
    8001769a:	1000                	addi	s0,sp,32
    8001769c:	fea43423          	sd	a0,-24(s0)
    g_kfree(vec->values);
    800176a0:	fe843783          	ld	a5,-24(s0)
    800176a4:	679c                	ld	a5,8(a5)
    800176a6:	853e                	mv	a0,a5
    800176a8:	d2efe0ef          	jal	ra,80015bd6 <g_kfree>
    vec->size = 0;
    800176ac:	fe843783          	ld	a5,-24(s0)
    800176b0:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    800176b4:	fe843783          	ld	a5,-24(s0)
    800176b8:	0007a223          	sw	zero,4(a5)
    g_kfree(vec);
    800176bc:	fe843503          	ld	a0,-24(s0)
    800176c0:	d16fe0ef          	jal	ra,80015bd6 <g_kfree>
}
    800176c4:	0001                	nop
    800176c6:	60e2                	ld	ra,24(sp)
    800176c8:	6442                	ld	s0,16(sp)
    800176ca:	6105                	addi	sp,sp,32
    800176cc:	8082                	ret

00000000800176ce <vector_sort_signed_long_comparator_ascending>:

VECTOR_COMPARATOR(vector_sort_signed_long_comparator_ascending) {
    800176ce:	1101                	addi	sp,sp,-32
    800176d0:	ec22                	sd	s0,24(sp)
    800176d2:	1000                	addi	s0,sp,32
    800176d4:	fea43423          	sd	a0,-24(s0)
    800176d8:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    800176dc:	fe843703          	ld	a4,-24(s0)
    800176e0:	fe043783          	ld	a5,-32(s0)
    800176e4:	00e7a7b3          	slt	a5,a5,a4
    800176e8:	0017c793          	xori	a5,a5,1
    800176ec:	0ff7f793          	andi	a5,a5,255
}
    800176f0:	853e                	mv	a0,a5
    800176f2:	6462                	ld	s0,24(sp)
    800176f4:	6105                	addi	sp,sp,32
    800176f6:	8082                	ret

00000000800176f8 <vector_sort_signed_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_signed_long_comparator_descending) {
    800176f8:	1101                	addi	sp,sp,-32
    800176fa:	ec22                	sd	s0,24(sp)
    800176fc:	1000                	addi	s0,sp,32
    800176fe:	fea43423          	sd	a0,-24(s0)
    80017702:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    80017706:	fe843703          	ld	a4,-24(s0)
    8001770a:	fe043783          	ld	a5,-32(s0)
    8001770e:	00f727b3          	slt	a5,a4,a5
    80017712:	0017c793          	xori	a5,a5,1
    80017716:	0ff7f793          	andi	a5,a5,255
}
    8001771a:	853e                	mv	a0,a5
    8001771c:	6462                	ld	s0,24(sp)
    8001771e:	6105                	addi	sp,sp,32
    80017720:	8082                	ret

0000000080017722 <vector_sort_unsigned_long_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_ascending) {
    80017722:	1101                	addi	sp,sp,-32
    80017724:	ec22                	sd	s0,24(sp)
    80017726:	1000                	addi	s0,sp,32
    80017728:	fea43423          	sd	a0,-24(s0)
    8001772c:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    80017730:	fe843703          	ld	a4,-24(s0)
    80017734:	fe043783          	ld	a5,-32(s0)
    80017738:	00e7b7b3          	sltu	a5,a5,a4
    8001773c:	0017c793          	xori	a5,a5,1
    80017740:	0ff7f793          	andi	a5,a5,255
}
    80017744:	853e                	mv	a0,a5
    80017746:	6462                	ld	s0,24(sp)
    80017748:	6105                	addi	sp,sp,32
    8001774a:	8082                	ret

000000008001774c <vector_sort_unsigned_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_descending) {
    8001774c:	1101                	addi	sp,sp,-32
    8001774e:	ec22                	sd	s0,24(sp)
    80017750:	1000                	addi	s0,sp,32
    80017752:	fea43423          	sd	a0,-24(s0)
    80017756:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    8001775a:	fe843703          	ld	a4,-24(s0)
    8001775e:	fe043783          	ld	a5,-32(s0)
    80017762:	00f737b3          	sltu	a5,a4,a5
    80017766:	0017c793          	xori	a5,a5,1
    8001776a:	0ff7f793          	andi	a5,a5,255
}
    8001776e:	853e                	mv	a0,a5
    80017770:	6462                	ld	s0,24(sp)
    80017772:	6105                	addi	sp,sp,32
    80017774:	8082                	ret

0000000080017776 <vector_sort_string_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_ascending) {
    80017776:	1101                	addi	sp,sp,-32
    80017778:	ec06                	sd	ra,24(sp)
    8001777a:	e822                	sd	s0,16(sp)
    8001777c:	1000                	addi	s0,sp,32
    8001777e:	fea43423          	sd	a0,-24(s0)
    80017782:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    80017786:	fe843783          	ld	a5,-24(s0)
    8001778a:	fe043703          	ld	a4,-32(s0)
    8001778e:	85ba                	mv	a1,a4
    80017790:	853e                	mv	a0,a5
    80017792:	fb1fe0ef          	jal	ra,80016742 <strcmp>
    80017796:	87aa                	mv	a5,a0
    80017798:	0017a793          	slti	a5,a5,1
    8001779c:	0ff7f793          	andi	a5,a5,255
}
    800177a0:	853e                	mv	a0,a5
    800177a2:	60e2                	ld	ra,24(sp)
    800177a4:	6442                	ld	s0,16(sp)
    800177a6:	6105                	addi	sp,sp,32
    800177a8:	8082                	ret

00000000800177aa <vector_sort_string_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_descending) {
    800177aa:	1101                	addi	sp,sp,-32
    800177ac:	ec06                	sd	ra,24(sp)
    800177ae:	e822                	sd	s0,16(sp)
    800177b0:	1000                	addi	s0,sp,32
    800177b2:	fea43423          	sd	a0,-24(s0)
    800177b6:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    800177ba:	fe843783          	ld	a5,-24(s0)
    800177be:	fe043703          	ld	a4,-32(s0)
    800177c2:	85ba                	mv	a1,a4
    800177c4:	853e                	mv	a0,a5
    800177c6:	f7dfe0ef          	jal	ra,80016742 <strcmp>
    800177ca:	87aa                	mv	a5,a0
    800177cc:	fff7c793          	not	a5,a5
    800177d0:	01f7d79b          	srliw	a5,a5,0x1f
    800177d4:	0ff7f793          	andi	a5,a5,255
}
    800177d8:	853e                	mv	a0,a5
    800177da:	60e2                	ld	ra,24(sp)
    800177dc:	6442                	ld	s0,16(sp)
    800177de:	6105                	addi	sp,sp,32
    800177e0:	8082                	ret
