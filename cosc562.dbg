
cosc562.elf:     file format elf64-littleriscv


Disassembly of section .text:

0000000080010000 <_memory_start>:
    80010000:	fe22                	sd	s0,312(sp)
    80010002:	f1ca                	sd	s2,224(sp)
    80010004:	0bee                	slli	s7,s7,0x1b
    80010006:	dead                	beqz	a3,8000ff80 <i+0x8000ff60>
    80010008:	4b20                	lw	s0,80(a4)
    8001000a:	8001                	c.srli64	s0
	...

0000000080010102 <copy_from>:
*/
unsigned long copy_from(void *dst, 
                        const struct page_table *from_table, 
                        const void *from, 
                        unsigned long size)
{
    80010102:	7119                	addi	sp,sp,-128
    80010104:	fc86                	sd	ra,120(sp)
    80010106:	f8a2                	sd	s0,112(sp)
    80010108:	0100                	addi	s0,sp,128
    8001010a:	f8a43c23          	sd	a0,-104(s0)
    8001010e:	f8b43823          	sd	a1,-112(s0)
    80010112:	f8c43423          	sd	a2,-120(s0)
    80010116:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    8001011a:	fe043423          	sd	zero,-24(s0)

    unsigned long src_start_addr = (unsigned long)from;
    8001011e:	f8843783          	ld	a5,-120(s0)
    80010122:	fcf43423          	sd	a5,-56(s0)
    unsigned long src_end_addr = (unsigned long)from+size;
    80010126:	f8843783          	ld	a5,-120(s0)
    8001012a:	f8043703          	ld	a4,-128(s0)
    8001012e:	97ba                	add	a5,a5,a4
    80010130:	fcf43023          	sd	a5,-64(s0)
    unsigned long src_first_page = ALIGN_DOWN_POT(src_start_addr, PAGE_SIZE_4K);
    80010134:	fc843703          	ld	a4,-56(s0)
    80010138:	77fd                	lui	a5,0xfffff
    8001013a:	8ff9                	and	a5,a5,a4
    8001013c:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    80010140:	fb843783          	ld	a5,-72(s0)
    80010144:	fef43023          	sd	a5,-32(s0)
    80010148:	a06d                	j	800101f2 <copy_from+0xf0>
        void *physical_address = (void*)mmu_translate(from_table, i);
    8001014a:	fe043583          	ld	a1,-32(s0)
    8001014e:	f9043503          	ld	a0,-112(s0)
    80010152:	776020ef          	jal	ra,800128c8 <mmu_translate>
    80010156:	87aa                	mv	a5,a0
    80010158:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    8001015c:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == src_start_addr;
    80010160:	fe043703          	ld	a4,-32(s0)
    80010164:	fc843783          	ld	a5,-56(s0)
    80010168:	40f707b3          	sub	a5,a4,a5
    8001016c:	0017b793          	seqz	a5,a5
    80010170:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    80010174:	faf44783          	lbu	a5,-81(s0)
    80010178:	0ff7f793          	andi	a5,a5,255
    8001017c:	cb81                	beqz	a5,8001018c <copy_from+0x8a>
            offset = src_start_addr % PAGE_SIZE_4K;
    8001017e:	fc843703          	ld	a4,-56(s0)
    80010182:	6785                	lui	a5,0x1
    80010184:	17fd                	addi	a5,a5,-1
    80010186:	8ff9                	and	a5,a5,a4
    80010188:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    8001018c:	6785                	lui	a5,0x1
    8001018e:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > src_end_addr) {
    80010192:	fe043703          	ld	a4,-32(s0)
    80010196:	6785                	lui	a5,0x1
    80010198:	97ba                	add	a5,a5,a4
    8001019a:	fc043703          	ld	a4,-64(s0)
    8001019e:	00f77a63          	bgeu	a4,a5,800101b2 <copy_from+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = src_end_addr - i;
    800101a2:	fc043703          	ld	a4,-64(s0)
    800101a6:	fe043783          	ld	a5,-32(s0)
    800101aa:	40f707b3          	sub	a5,a4,a5
    800101ae:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(dst + bytes_copied, physical_address + offset, bytes_to_copy_from_page);
    800101b2:	f9843703          	ld	a4,-104(s0)
    800101b6:	fe843783          	ld	a5,-24(s0)
    800101ba:	00f706b3          	add	a3,a4,a5
    800101be:	fb043703          	ld	a4,-80(s0)
    800101c2:	fd843783          	ld	a5,-40(s0)
    800101c6:	97ba                	add	a5,a5,a4
    800101c8:	fd043703          	ld	a4,-48(s0)
    800101cc:	2701                	sext.w	a4,a4
    800101ce:	863a                	mv	a2,a4
    800101d0:	85be                	mv	a1,a5
    800101d2:	8536                	mv	a0,a3
    800101d4:	110050ef          	jal	ra,800152e4 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800101d8:	fe843703          	ld	a4,-24(s0)
    800101dc:	fd043783          	ld	a5,-48(s0)
    800101e0:	97ba                	add	a5,a5,a4
    800101e2:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = src_first_page; i < src_end_addr; i += PAGE_SIZE_4K) {
    800101e6:	fe043703          	ld	a4,-32(s0)
    800101ea:	6785                	lui	a5,0x1
    800101ec:	97ba                	add	a5,a5,a4
    800101ee:	fef43023          	sd	a5,-32(s0)
    800101f2:	fe043703          	ld	a4,-32(s0)
    800101f6:	fc043783          	ld	a5,-64(s0)
    800101fa:	f4f768e3          	bltu	a4,a5,8001014a <copy_from+0x48>
    }

    return bytes_copied;
    800101fe:	fe843783          	ld	a5,-24(s0)
}
    80010202:	853e                	mv	a0,a5
    80010204:	70e6                	ld	ra,120(sp)
    80010206:	7446                	ld	s0,112(sp)
    80010208:	6109                	addi	sp,sp,128
    8001020a:	8082                	ret

000000008001020c <copy_to>:
*/
unsigned long copy_to(void *to, 
                      const struct page_table *to_table, 
                      const void *src, 
                      unsigned long size)
{
    8001020c:	7119                	addi	sp,sp,-128
    8001020e:	fc86                	sd	ra,120(sp)
    80010210:	f8a2                	sd	s0,112(sp)
    80010212:	0100                	addi	s0,sp,128
    80010214:	f8a43c23          	sd	a0,-104(s0)
    80010218:	f8b43823          	sd	a1,-112(s0)
    8001021c:	f8c43423          	sd	a2,-120(s0)
    80010220:	f8d43023          	sd	a3,-128(s0)

    unsigned long bytes_copied = 0;
    80010224:	fe043423          	sd	zero,-24(s0)

    unsigned long dst_start_addr = (unsigned long)to;
    80010228:	f9843783          	ld	a5,-104(s0)
    8001022c:	fcf43423          	sd	a5,-56(s0)
    unsigned long dst_end_addr = (unsigned long)to+size;
    80010230:	f9843783          	ld	a5,-104(s0)
    80010234:	f8043703          	ld	a4,-128(s0)
    80010238:	97ba                	add	a5,a5,a4
    8001023a:	fcf43023          	sd	a5,-64(s0)
    unsigned long dst_first_page = ALIGN_DOWN_POT(dst_start_addr, PAGE_SIZE_4K);
    8001023e:	fc843703          	ld	a4,-56(s0)
    80010242:	77fd                	lui	a5,0xfffff
    80010244:	8ff9                	and	a5,a5,a4
    80010246:	faf43c23          	sd	a5,-72(s0)

    // Copy the data from the source to the destination.
    // Translate the page aligned source address (for each page in the virtual addresses) using mmu_translate to get the address to copy
    // from the physical memory. Then, use memcpy to copy the data from the physical memory to the destination.
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    8001024a:	fb843783          	ld	a5,-72(s0)
    8001024e:	fef43023          	sd	a5,-32(s0)
    80010252:	a06d                	j	800102fc <copy_to+0xf0>
        void *physical_address = (void*)mmu_translate(to_table, i);
    80010254:	fe043583          	ld	a1,-32(s0)
    80010258:	f9043503          	ld	a0,-112(s0)
    8001025c:	66c020ef          	jal	ra,800128c8 <mmu_translate>
    80010260:	87aa                	mv	a5,a0
    80010262:	faf43823          	sd	a5,-80(s0)

        // Is this the first page, if so, we need to copy from the offset.
        unsigned long offset = 0;
    80010266:	fc043c23          	sd	zero,-40(s0)

        bool is_first_page = i == dst_start_addr;
    8001026a:	fe043703          	ld	a4,-32(s0)
    8001026e:	fc843783          	ld	a5,-56(s0)
    80010272:	40f707b3          	sub	a5,a4,a5
    80010276:	0017b793          	seqz	a5,a5
    8001027a:	faf407a3          	sb	a5,-81(s0)

        // If this is the first page:
        if (is_first_page) {
    8001027e:	faf44783          	lbu	a5,-81(s0)
    80010282:	0ff7f793          	andi	a5,a5,255
    80010286:	cb81                	beqz	a5,80010296 <copy_to+0x8a>
            offset = dst_start_addr % PAGE_SIZE_4K;
    80010288:	fc843703          	ld	a4,-56(s0)
    8001028c:	6785                	lui	a5,0x1
    8001028e:	17fd                	addi	a5,a5,-1
    80010290:	8ff9                	and	a5,a5,a4
    80010292:	fcf43c23          	sd	a5,-40(s0)
        }

        // Is this the last page, if so, we need to copy only the remaining bytes.
        unsigned long bytes_to_copy_from_page = PAGE_SIZE_4K;
    80010296:	6785                	lui	a5,0x1
    80010298:	fcf43823          	sd	a5,-48(s0)
        // If the remaining bytes to copy is less than the page size, then we need to copy only the remaining bytes.
        if (i + PAGE_SIZE_4K > dst_end_addr) {
    8001029c:	fe043703          	ld	a4,-32(s0)
    800102a0:	6785                	lui	a5,0x1
    800102a2:	97ba                	add	a5,a5,a4
    800102a4:	fc043703          	ld	a4,-64(s0)
    800102a8:	00f77a63          	bgeu	a4,a5,800102bc <copy_to+0xb0>
            // The remaining bytes to copy is the difference between the end address and the current address.
            bytes_to_copy_from_page = dst_end_addr - i;
    800102ac:	fc043703          	ld	a4,-64(s0)
    800102b0:	fe043783          	ld	a5,-32(s0)
    800102b4:	40f707b3          	sub	a5,a4,a5
    800102b8:	fcf43823          	sd	a5,-48(s0)
        }

        // Copy the data from the source to the destination.
        memcpy(physical_address + offset, src + bytes_copied, bytes_to_copy_from_page);
    800102bc:	fb043703          	ld	a4,-80(s0)
    800102c0:	fd843783          	ld	a5,-40(s0)
    800102c4:	00f706b3          	add	a3,a4,a5
    800102c8:	f8843703          	ld	a4,-120(s0)
    800102cc:	fe843783          	ld	a5,-24(s0)
    800102d0:	97ba                	add	a5,a5,a4
    800102d2:	fd043703          	ld	a4,-48(s0)
    800102d6:	2701                	sext.w	a4,a4
    800102d8:	863a                	mv	a2,a4
    800102da:	85be                	mv	a1,a5
    800102dc:	8536                	mv	a0,a3
    800102de:	006050ef          	jal	ra,800152e4 <memcpy>

        // Increment the number of bytes copied.
        bytes_copied += bytes_to_copy_from_page;
    800102e2:	fe843703          	ld	a4,-24(s0)
    800102e6:	fd043783          	ld	a5,-48(s0)
    800102ea:	97ba                	add	a5,a5,a4
    800102ec:	fef43423          	sd	a5,-24(s0)
    for (unsigned long i = dst_first_page; i < dst_end_addr; i += PAGE_SIZE_4K) {
    800102f0:	fe043703          	ld	a4,-32(s0)
    800102f4:	6785                	lui	a5,0x1
    800102f6:	97ba                	add	a5,a5,a4
    800102f8:	fef43023          	sd	a5,-32(s0)
    800102fc:	fe043703          	ld	a4,-32(s0)
    80010300:	fc043783          	ld	a5,-64(s0)
    80010304:	f4f768e3          	bltu	a4,a5,80010254 <copy_to+0x48>
    }

    return bytes_copied;
    80010308:	fe843783          	ld	a5,-24(s0)
    8001030c:	853e                	mv	a0,a5
    8001030e:	70e6                	ld	ra,120(sp)
    80010310:	7446                	ld	s0,112(sp)
    80010312:	6109                	addi	sp,sp,128
    80010314:	8082                	ret

0000000080010316 <syscall_exit>:
    (void)hart;         \
    (void)epc;          \
    (void)scratch

SYSCALL(exit)
{
    80010316:	7179                	addi	sp,sp,-48
    80010318:	f422                	sd	s0,40(sp)
    8001031a:	1800                	addi	s0,sp,48
    8001031c:	87aa                	mv	a5,a0
    8001031e:	feb43023          	sd	a1,-32(s0)
    80010322:	fcc43c23          	sd	a2,-40(s0)
    80010326:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Kill the current process on this HART and schedule the next
    // one.
}
    8001032a:	0001                	nop
    8001032c:	7422                	ld	s0,40(sp)
    8001032e:	6145                	addi	sp,sp,48
    80010330:	8082                	ret

0000000080010332 <syscall_putchar>:

SYSCALL(putchar)
{
    80010332:	7179                	addi	sp,sp,-48
    80010334:	f406                	sd	ra,40(sp)
    80010336:	f022                	sd	s0,32(sp)
    80010338:	1800                	addi	s0,sp,48
    8001033a:	87aa                	mv	a5,a0
    8001033c:	feb43023          	sd	a1,-32(s0)
    80010340:	fcc43c23          	sd	a2,-40(s0)
    80010344:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    sbi_putchar(XREG(A0));
    80010348:	fd843783          	ld	a5,-40(s0)
    8001034c:	05078793          	addi	a5,a5,80 # 1050 <i+0x1030>
    80010350:	639c                	ld	a5,0(a5)
    80010352:	0ff7f793          	andi	a5,a5,255
    80010356:	853e                	mv	a0,a5
    80010358:	337030ef          	jal	ra,80013e8e <sbi_putchar>
}
    8001035c:	0001                	nop
    8001035e:	70a2                	ld	ra,40(sp)
    80010360:	7402                	ld	s0,32(sp)
    80010362:	6145                	addi	sp,sp,48
    80010364:	8082                	ret

0000000080010366 <syscall_getchar>:

SYSCALL(getchar)
{
    80010366:	7179                	addi	sp,sp,-48
    80010368:	f406                	sd	ra,40(sp)
    8001036a:	f022                	sd	s0,32(sp)
    8001036c:	1800                	addi	s0,sp,48
    8001036e:	87aa                	mv	a5,a0
    80010370:	feb43023          	sd	a1,-32(s0)
    80010374:	fcc43c23          	sd	a2,-40(s0)
    80010378:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    XREG(A0) = sbi_getchar();
    8001037c:	335030ef          	jal	ra,80013eb0 <sbi_getchar>
    80010380:	87aa                	mv	a5,a0
    80010382:	873e                	mv	a4,a5
    80010384:	fd843783          	ld	a5,-40(s0)
    80010388:	05078793          	addi	a5,a5,80
    8001038c:	e398                	sd	a4,0(a5)
}
    8001038e:	0001                	nop
    80010390:	70a2                	ld	ra,40(sp)
    80010392:	7402                	ld	s0,32(sp)
    80010394:	6145                	addi	sp,sp,48
    80010396:	8082                	ret

0000000080010398 <syscall_yield>:

SYSCALL(yield)
{
    80010398:	7179                	addi	sp,sp,-48
    8001039a:	f422                	sd	s0,40(sp)
    8001039c:	1800                	addi	s0,sp,48
    8001039e:	87aa                	mv	a5,a0
    800103a0:	feb43023          	sd	a1,-32(s0)
    800103a4:	fcc43c23          	sd	a2,-40(s0)
    800103a8:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // sched_invoke(hart);
}
    800103ac:	0001                	nop
    800103ae:	7422                	ld	s0,40(sp)
    800103b0:	6145                	addi	sp,sp,48
    800103b2:	8082                	ret

00000000800103b4 <syscall_sleep>:

SYSCALL(sleep)
{
    800103b4:	7179                	addi	sp,sp,-48
    800103b6:	f422                	sd	s0,40(sp)
    800103b8:	1800                	addi	s0,sp,48
    800103ba:	87aa                	mv	a5,a0
    800103bc:	feb43023          	sd	a1,-32(s0)
    800103c0:	fcc43c23          	sd	a2,-40(s0)
    800103c4:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    // Sleep the process. VIRT_TIMER_FREQ is 10MHz, divided by 1000, we get 10KHz
    //     p->sleep_until = sbi_get_time() + XREG(A0) * VIRT_TIMER_FREQ / 1000;
    //     p->state = PS_SLEEPING;
}
    800103c8:	0001                	nop
    800103ca:	7422                	ld	s0,40(sp)
    800103cc:	6145                	addi	sp,sp,48
    800103ce:	8082                	ret

00000000800103d0 <syscall_events>:

SYSCALL(events)
{
    800103d0:	7179                	addi	sp,sp,-48
    800103d2:	f422                	sd	s0,40(sp)
    800103d4:	1800                	addi	s0,sp,48
    800103d6:	87aa                	mv	a5,a0
    800103d8:	feb43023          	sd	a1,-32(s0)
    800103dc:	fcc43c23          	sd	a2,-40(s0)
    800103e0:	fef42623          	sw	a5,-20(s0)
    SYSCALL_ENTER();
    
}
    800103e4:	0001                	nop
    800103e6:	7422                	ld	s0,40(sp)
    800103e8:	6145                	addi	sp,sp,48
    800103ea:	8082                	ret

00000000800103ec <syscall_handle>:

static const int NUM_SYSCALLS = sizeof(SYSCALLS) / sizeof(SYSCALLS[0]);

// We get here from the trap.c if this is an ECALL from U-MODE
void syscall_handle(int hart, uint64_t epc, int64_t *scratch)
{
    800103ec:	7179                	addi	sp,sp,-48
    800103ee:	f406                	sd	ra,40(sp)
    800103f0:	f022                	sd	s0,32(sp)
    800103f2:	1800                	addi	s0,sp,48
    800103f4:	87aa                	mv	a5,a0
    800103f6:	feb43023          	sd	a1,-32(s0)
    800103fa:	fcc43c23          	sd	a2,-40(s0)
    800103fe:	fef42623          	sw	a5,-20(s0)
    // Sched invoke will save sepc, so we want it to resume
    // 4 bytes ahead, which will be the next instruction.
    CSR_WRITE("sepc", epc + 4);
    80010402:	fe043783          	ld	a5,-32(s0)
    80010406:	0791                	addi	a5,a5,4
    80010408:	14179073          	csrw	sepc,a5

    if (XREG(A7) >= NUM_SYSCALLS || SYSCALLS[XREG(A7)] == NULL) {
    8001040c:	fd843783          	ld	a5,-40(s0)
    80010410:	08878793          	addi	a5,a5,136
    80010414:	639c                	ld	a5,0(a5)
    80010416:	4719                	li	a4,6
    80010418:	00e7df63          	bge	a5,a4,80010436 <syscall_handle+0x4a>
    8001041c:	fd843783          	ld	a5,-40(s0)
    80010420:	08878793          	addi	a5,a5,136
    80010424:	639c                	ld	a5,0(a5)
    80010426:	00009717          	auipc	a4,0x9
    8001042a:	bda70713          	addi	a4,a4,-1062 # 80019000 <SYSCALLS>
    8001042e:	078e                	slli	a5,a5,0x3
    80010430:	97ba                	add	a5,a5,a4
    80010432:	639c                	ld	a5,0(a5)
    80010434:	eb81                	bnez	a5,80010444 <syscall_handle+0x58>
        // Invalid syscall
        XREG(A0) = -EINVAL;
    80010436:	fd843783          	ld	a5,-40(s0)
    8001043a:	05078793          	addi	a5,a5,80
    8001043e:	5729                	li	a4,-22
    80010440:	e398                	sd	a4,0(a5)
    80010442:	a035                	j	8001046e <syscall_handle+0x82>
    }
    else {
        SYSCALL_EXEC(XREG(A7));
    80010444:	fd843783          	ld	a5,-40(s0)
    80010448:	08878793          	addi	a5,a5,136
    8001044c:	639c                	ld	a5,0(a5)
    8001044e:	00009717          	auipc	a4,0x9
    80010452:	bb270713          	addi	a4,a4,-1102 # 80019000 <SYSCALLS>
    80010456:	078e                	slli	a5,a5,0x3
    80010458:	97ba                	add	a5,a5,a4
    8001045a:	6398                	ld	a4,0(a5)
    8001045c:	fec42783          	lw	a5,-20(s0)
    80010460:	fd843603          	ld	a2,-40(s0)
    80010464:	fe043583          	ld	a1,-32(s0)
    80010468:	853e                	mv	a0,a5
    8001046a:	9702                	jalr	a4
    }
}
    8001046c:	0001                	nop
    8001046e:	0001                	nop
    80010470:	70a2                	ld	ra,40(sp)
    80010472:	7402                	ld	s0,32(sp)
    80010474:	6145                	addi	sp,sp,48
    80010476:	8082                	ret

0000000080010478 <_putchar>:
#include <stdbool.h>
#include <stdint.h>
#include <stddef.h>

#include "sbi.h"
void _putchar(char c) { sbi_putchar(c); }
    80010478:	1101                	addi	sp,sp,-32
    8001047a:	ec06                	sd	ra,24(sp)
    8001047c:	e822                	sd	s0,16(sp)
    8001047e:	1000                	addi	s0,sp,32
    80010480:	87aa                	mv	a5,a0
    80010482:	fef407a3          	sb	a5,-17(s0)
    80010486:	fef44783          	lbu	a5,-17(s0)
    8001048a:	853e                	mv	a0,a5
    8001048c:	203030ef          	jal	ra,80013e8e <sbi_putchar>
    80010490:	0001                	nop
    80010492:	60e2                	ld	ra,24(sp)
    80010494:	6442                	ld	s0,16(sp)
    80010496:	6105                	addi	sp,sp,32
    80010498:	8082                	ret

000000008001049a <_out_buffer>:
} out_fct_wrap_type;

// internal buffer output
static inline void _out_buffer(char character, void *buffer, size_t idx,
                               size_t maxlen)
{
    8001049a:	7179                	addi	sp,sp,-48
    8001049c:	f422                	sd	s0,40(sp)
    8001049e:	1800                	addi	s0,sp,48
    800104a0:	87aa                	mv	a5,a0
    800104a2:	feb43023          	sd	a1,-32(s0)
    800104a6:	fcc43c23          	sd	a2,-40(s0)
    800104aa:	fcd43823          	sd	a3,-48(s0)
    800104ae:	fef407a3          	sb	a5,-17(s0)
    if (idx < maxlen) {
    800104b2:	fd843703          	ld	a4,-40(s0)
    800104b6:	fd043783          	ld	a5,-48(s0)
    800104ba:	00f77b63          	bgeu	a4,a5,800104d0 <_out_buffer+0x36>
        ((char *)buffer)[idx] = character;
    800104be:	fe043703          	ld	a4,-32(s0)
    800104c2:	fd843783          	ld	a5,-40(s0)
    800104c6:	97ba                	add	a5,a5,a4
    800104c8:	fef44703          	lbu	a4,-17(s0)
    800104cc:	00e78023          	sb	a4,0(a5)
    }
}
    800104d0:	0001                	nop
    800104d2:	7422                	ld	s0,40(sp)
    800104d4:	6145                	addi	sp,sp,48
    800104d6:	8082                	ret

00000000800104d8 <_out_null>:

// internal null output
static inline void _out_null(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    800104d8:	7179                	addi	sp,sp,-48
    800104da:	f422                	sd	s0,40(sp)
    800104dc:	1800                	addi	s0,sp,48
    800104de:	87aa                	mv	a5,a0
    800104e0:	feb43023          	sd	a1,-32(s0)
    800104e4:	fcc43c23          	sd	a2,-40(s0)
    800104e8:	fcd43823          	sd	a3,-48(s0)
    800104ec:	fef407a3          	sb	a5,-17(s0)
    (void)character;
    (void)buffer;
    (void)idx;
    (void)maxlen;
}
    800104f0:	0001                	nop
    800104f2:	7422                	ld	s0,40(sp)
    800104f4:	6145                	addi	sp,sp,48
    800104f6:	8082                	ret

00000000800104f8 <_out_char>:

// internal _putchar wrapper
static inline void _out_char(char character, void *buffer, size_t idx,
                             size_t maxlen)
{
    800104f8:	7179                	addi	sp,sp,-48
    800104fa:	f406                	sd	ra,40(sp)
    800104fc:	f022                	sd	s0,32(sp)
    800104fe:	1800                	addi	s0,sp,48
    80010500:	87aa                	mv	a5,a0
    80010502:	feb43023          	sd	a1,-32(s0)
    80010506:	fcc43c23          	sd	a2,-40(s0)
    8001050a:	fcd43823          	sd	a3,-48(s0)
    8001050e:	fef407a3          	sb	a5,-17(s0)
    (void)buffer;
    (void)idx;
    (void)maxlen;
    if (character) {
    80010512:	fef44783          	lbu	a5,-17(s0)
    80010516:	0ff7f793          	andi	a5,a5,255
    8001051a:	c791                	beqz	a5,80010526 <_out_char+0x2e>
        _putchar(character);
    8001051c:	fef44783          	lbu	a5,-17(s0)
    80010520:	853e                	mv	a0,a5
    80010522:	f57ff0ef          	jal	ra,80010478 <_putchar>
    }
}
    80010526:	0001                	nop
    80010528:	70a2                	ld	ra,40(sp)
    8001052a:	7402                	ld	s0,32(sp)
    8001052c:	6145                	addi	sp,sp,48
    8001052e:	8082                	ret

0000000080010530 <_out_fct>:

// internal output function wrapper
static inline void _out_fct(char character, void *buffer, size_t idx,
                            size_t maxlen)
{
    80010530:	7179                	addi	sp,sp,-48
    80010532:	f406                	sd	ra,40(sp)
    80010534:	f022                	sd	s0,32(sp)
    80010536:	1800                	addi	s0,sp,48
    80010538:	87aa                	mv	a5,a0
    8001053a:	feb43023          	sd	a1,-32(s0)
    8001053e:	fcc43c23          	sd	a2,-40(s0)
    80010542:	fcd43823          	sd	a3,-48(s0)
    80010546:	fef407a3          	sb	a5,-17(s0)
    (void)idx;
    (void)maxlen;
    if (character) {
    8001054a:	fef44783          	lbu	a5,-17(s0)
    8001054e:	0ff7f793          	andi	a5,a5,255
    80010552:	cf81                	beqz	a5,8001056a <_out_fct+0x3a>
        // buffer is the output fct pointer
        ((out_fct_wrap_type *)buffer)
            ->fct(character, ((out_fct_wrap_type *)buffer)->arg);
    80010554:	fe043783          	ld	a5,-32(s0)
    80010558:	6394                	ld	a3,0(a5)
        ((out_fct_wrap_type *)buffer)
    8001055a:	fe043783          	ld	a5,-32(s0)
    8001055e:	6798                	ld	a4,8(a5)
    80010560:	fef44783          	lbu	a5,-17(s0)
    80010564:	85ba                	mv	a1,a4
    80010566:	853e                	mv	a0,a5
    80010568:	9682                	jalr	a3
    }
}
    8001056a:	0001                	nop
    8001056c:	70a2                	ld	ra,40(sp)
    8001056e:	7402                	ld	s0,32(sp)
    80010570:	6145                	addi	sp,sp,48
    80010572:	8082                	ret

0000000080010574 <_strnlen_s>:

// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by
// 'maxsize'
static inline unsigned int _strnlen_s(const char *str, size_t maxsize)
{
    80010574:	7179                	addi	sp,sp,-48
    80010576:	f422                	sd	s0,40(sp)
    80010578:	1800                	addi	s0,sp,48
    8001057a:	fca43c23          	sd	a0,-40(s0)
    8001057e:	fcb43823          	sd	a1,-48(s0)
    const char *s;
    for (s = str; *s && maxsize--; ++s)
    80010582:	fd843783          	ld	a5,-40(s0)
    80010586:	fef43423          	sd	a5,-24(s0)
    8001058a:	a031                	j	80010596 <_strnlen_s+0x22>
    8001058c:	fe843783          	ld	a5,-24(s0)
    80010590:	0785                	addi	a5,a5,1
    80010592:	fef43423          	sd	a5,-24(s0)
    80010596:	fe843783          	ld	a5,-24(s0)
    8001059a:	0007c783          	lbu	a5,0(a5)
    8001059e:	cb81                	beqz	a5,800105ae <_strnlen_s+0x3a>
    800105a0:	fd043783          	ld	a5,-48(s0)
    800105a4:	fff78713          	addi	a4,a5,-1
    800105a8:	fce43823          	sd	a4,-48(s0)
    800105ac:	f3e5                	bnez	a5,8001058c <_strnlen_s+0x18>
        ;
    return (unsigned int)(s - str);
    800105ae:	fe843703          	ld	a4,-24(s0)
    800105b2:	fd843783          	ld	a5,-40(s0)
    800105b6:	40f707b3          	sub	a5,a4,a5
    800105ba:	2781                	sext.w	a5,a5
}
    800105bc:	853e                	mv	a0,a5
    800105be:	7422                	ld	s0,40(sp)
    800105c0:	6145                	addi	sp,sp,48
    800105c2:	8082                	ret

00000000800105c4 <_is_digit>:

// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch) { return (ch >= '0') && (ch <= '9'); }
    800105c4:	1101                	addi	sp,sp,-32
    800105c6:	ec22                	sd	s0,24(sp)
    800105c8:	1000                	addi	s0,sp,32
    800105ca:	87aa                	mv	a5,a0
    800105cc:	fef407a3          	sb	a5,-17(s0)
    800105d0:	fef44783          	lbu	a5,-17(s0)
    800105d4:	0ff7f713          	andi	a4,a5,255
    800105d8:	02f00793          	li	a5,47
    800105dc:	00e7fc63          	bgeu	a5,a4,800105f4 <_is_digit+0x30>
    800105e0:	fef44783          	lbu	a5,-17(s0)
    800105e4:	0ff7f713          	andi	a4,a5,255
    800105e8:	03900793          	li	a5,57
    800105ec:	00e7e463          	bltu	a5,a4,800105f4 <_is_digit+0x30>
    800105f0:	4785                	li	a5,1
    800105f2:	a011                	j	800105f6 <_is_digit+0x32>
    800105f4:	4781                	li	a5,0
    800105f6:	8b85                	andi	a5,a5,1
    800105f8:	0ff7f793          	andi	a5,a5,255
    800105fc:	853e                	mv	a0,a5
    800105fe:	6462                	ld	s0,24(sp)
    80010600:	6105                	addi	sp,sp,32
    80010602:	8082                	ret

0000000080010604 <_atoi>:

// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char **str)
{
    80010604:	7179                	addi	sp,sp,-48
    80010606:	f406                	sd	ra,40(sp)
    80010608:	f022                	sd	s0,32(sp)
    8001060a:	1800                	addi	s0,sp,48
    8001060c:	fca43c23          	sd	a0,-40(s0)
    unsigned int i = 0U;
    80010610:	fe042623          	sw	zero,-20(s0)
    while (_is_digit(**str)) {
    80010614:	a825                	j	8001064c <_atoi+0x48>
        i = i * 10U + (unsigned int)(*((*str)++) - '0');
    80010616:	fec42703          	lw	a4,-20(s0)
    8001061a:	87ba                	mv	a5,a4
    8001061c:	0027979b          	slliw	a5,a5,0x2
    80010620:	9fb9                	addw	a5,a5,a4
    80010622:	0017979b          	slliw	a5,a5,0x1
    80010626:	0007871b          	sext.w	a4,a5
    8001062a:	fd843783          	ld	a5,-40(s0)
    8001062e:	639c                	ld	a5,0(a5)
    80010630:	00178613          	addi	a2,a5,1
    80010634:	fd843683          	ld	a3,-40(s0)
    80010638:	e290                	sd	a2,0(a3)
    8001063a:	0007c783          	lbu	a5,0(a5)
    8001063e:	2781                	sext.w	a5,a5
    80010640:	9fb9                	addw	a5,a5,a4
    80010642:	2781                	sext.w	a5,a5
    80010644:	fd07879b          	addiw	a5,a5,-48
    80010648:	fef42623          	sw	a5,-20(s0)
    while (_is_digit(**str)) {
    8001064c:	fd843783          	ld	a5,-40(s0)
    80010650:	639c                	ld	a5,0(a5)
    80010652:	0007c783          	lbu	a5,0(a5)
    80010656:	853e                	mv	a0,a5
    80010658:	f6dff0ef          	jal	ra,800105c4 <_is_digit>
    8001065c:	87aa                	mv	a5,a0
    8001065e:	ffc5                	bnez	a5,80010616 <_atoi+0x12>
    }
    return i;
    80010660:	fec42783          	lw	a5,-20(s0)
}
    80010664:	853e                	mv	a0,a5
    80010666:	70a2                	ld	ra,40(sp)
    80010668:	7402                	ld	s0,32(sp)
    8001066a:	6145                	addi	sp,sp,48
    8001066c:	8082                	ret

000000008001066e <_out_rev>:

// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char *buffer, size_t idx,
                       size_t maxlen, const char *buf, size_t len,
                       unsigned int width, unsigned int flags)
{
    8001066e:	711d                	addi	sp,sp,-96
    80010670:	ec86                	sd	ra,88(sp)
    80010672:	e8a2                	sd	s0,80(sp)
    80010674:	1080                	addi	s0,sp,96
    80010676:	fca43c23          	sd	a0,-40(s0)
    8001067a:	fcb43823          	sd	a1,-48(s0)
    8001067e:	fcc43423          	sd	a2,-56(s0)
    80010682:	fcd43023          	sd	a3,-64(s0)
    80010686:	fae43c23          	sd	a4,-72(s0)
    8001068a:	faf43823          	sd	a5,-80(s0)
    8001068e:	87c2                	mv	a5,a6
    80010690:	8746                	mv	a4,a7
    80010692:	faf42623          	sw	a5,-84(s0)
    80010696:	87ba                	mv	a5,a4
    80010698:	faf42423          	sw	a5,-88(s0)
    const size_t start_idx = idx;
    8001069c:	fc843783          	ld	a5,-56(s0)
    800106a0:	fef43023          	sd	a5,-32(s0)

    // pad spaces up to given width
    if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    800106a4:	fa842783          	lw	a5,-88(s0)
    800106a8:	8b89                	andi	a5,a5,2
    800106aa:	2781                	sext.w	a5,a5
    800106ac:	e3c9                	bnez	a5,8001072e <_out_rev+0xc0>
    800106ae:	fa842783          	lw	a5,-88(s0)
    800106b2:	8b85                	andi	a5,a5,1
    800106b4:	2781                	sext.w	a5,a5
    800106b6:	efa5                	bnez	a5,8001072e <_out_rev+0xc0>
        for (size_t i = len; i < width; i++) {
    800106b8:	fb043783          	ld	a5,-80(s0)
    800106bc:	fef43423          	sd	a5,-24(s0)
    800106c0:	a035                	j	800106ec <_out_rev+0x7e>
            out(' ', buffer, idx++, maxlen);
    800106c2:	fc843783          	ld	a5,-56(s0)
    800106c6:	00178713          	addi	a4,a5,1
    800106ca:	fce43423          	sd	a4,-56(s0)
    800106ce:	fd843703          	ld	a4,-40(s0)
    800106d2:	fc043683          	ld	a3,-64(s0)
    800106d6:	863e                	mv	a2,a5
    800106d8:	fd043583          	ld	a1,-48(s0)
    800106dc:	02000513          	li	a0,32
    800106e0:	9702                	jalr	a4
        for (size_t i = len; i < width; i++) {
    800106e2:	fe843783          	ld	a5,-24(s0)
    800106e6:	0785                	addi	a5,a5,1
    800106e8:	fef43423          	sd	a5,-24(s0)
    800106ec:	fac46783          	lwu	a5,-84(s0)
    800106f0:	fe843703          	ld	a4,-24(s0)
    800106f4:	fcf767e3          	bltu	a4,a5,800106c2 <_out_rev+0x54>
        }
    }

    // reverse string
    while (len) {
    800106f8:	a81d                	j	8001072e <_out_rev+0xc0>
        out(buf[--len], buffer, idx++, maxlen);
    800106fa:	fb043783          	ld	a5,-80(s0)
    800106fe:	17fd                	addi	a5,a5,-1
    80010700:	faf43823          	sd	a5,-80(s0)
    80010704:	fb843703          	ld	a4,-72(s0)
    80010708:	fb043783          	ld	a5,-80(s0)
    8001070c:	97ba                	add	a5,a5,a4
    8001070e:	0007c503          	lbu	a0,0(a5)
    80010712:	fc843783          	ld	a5,-56(s0)
    80010716:	00178713          	addi	a4,a5,1
    8001071a:	fce43423          	sd	a4,-56(s0)
    8001071e:	fd843703          	ld	a4,-40(s0)
    80010722:	fc043683          	ld	a3,-64(s0)
    80010726:	863e                	mv	a2,a5
    80010728:	fd043583          	ld	a1,-48(s0)
    8001072c:	9702                	jalr	a4
    while (len) {
    8001072e:	fb043783          	ld	a5,-80(s0)
    80010732:	f7e1                	bnez	a5,800106fa <_out_rev+0x8c>
    }

    // append pad spaces up to given width
    if (flags & FLAGS_LEFT) {
    80010734:	fa842783          	lw	a5,-88(s0)
    80010738:	8b89                	andi	a5,a5,2
    8001073a:	2781                	sext.w	a5,a5
    8001073c:	cb9d                	beqz	a5,80010772 <_out_rev+0x104>
        while (idx - start_idx < width) {
    8001073e:	a00d                	j	80010760 <_out_rev+0xf2>
            out(' ', buffer, idx++, maxlen);
    80010740:	fc843783          	ld	a5,-56(s0)
    80010744:	00178713          	addi	a4,a5,1
    80010748:	fce43423          	sd	a4,-56(s0)
    8001074c:	fd843703          	ld	a4,-40(s0)
    80010750:	fc043683          	ld	a3,-64(s0)
    80010754:	863e                	mv	a2,a5
    80010756:	fd043583          	ld	a1,-48(s0)
    8001075a:	02000513          	li	a0,32
    8001075e:	9702                	jalr	a4
        while (idx - start_idx < width) {
    80010760:	fc843703          	ld	a4,-56(s0)
    80010764:	fe043783          	ld	a5,-32(s0)
    80010768:	8f1d                	sub	a4,a4,a5
    8001076a:	fac46783          	lwu	a5,-84(s0)
    8001076e:	fcf769e3          	bltu	a4,a5,80010740 <_out_rev+0xd2>
        }
    }

    return idx;
    80010772:	fc843783          	ld	a5,-56(s0)
}
    80010776:	853e                	mv	a0,a5
    80010778:	60e6                	ld	ra,88(sp)
    8001077a:	6446                	ld	s0,80(sp)
    8001077c:	6125                	addi	sp,sp,96
    8001077e:	8082                	ret

0000000080010780 <_ntoa_format>:
// internal itoa format
static size_t _ntoa_format(out_fct_type out, char *buffer, size_t idx,
                           size_t maxlen, char *buf, size_t len, bool negative,
                           unsigned int base, unsigned int prec,
                           unsigned int width, unsigned int flags)
{
    80010780:	715d                	addi	sp,sp,-80
    80010782:	e486                	sd	ra,72(sp)
    80010784:	e0a2                	sd	s0,64(sp)
    80010786:	0880                	addi	s0,sp,80
    80010788:	fea43423          	sd	a0,-24(s0)
    8001078c:	feb43023          	sd	a1,-32(s0)
    80010790:	fcc43c23          	sd	a2,-40(s0)
    80010794:	fcd43823          	sd	a3,-48(s0)
    80010798:	fce43423          	sd	a4,-56(s0)
    8001079c:	fcf43023          	sd	a5,-64(s0)
    800107a0:	87c2                	mv	a5,a6
    800107a2:	8746                	mv	a4,a7
    800107a4:	faf40fa3          	sb	a5,-65(s0)
    800107a8:	87ba                	mv	a5,a4
    800107aa:	faf42c23          	sw	a5,-72(s0)
    // pad leading zeros
    if (!(flags & FLAGS_LEFT)) {
    800107ae:	481c                	lw	a5,16(s0)
    800107b0:	8b89                	andi	a5,a5,2
    800107b2:	2781                	sext.w	a5,a5
    800107b4:	ebd1                	bnez	a5,80010848 <_ntoa_format+0xc8>
        if (width && (flags & FLAGS_ZEROPAD) &&
    800107b6:	441c                	lw	a5,8(s0)
    800107b8:	2781                	sext.w	a5,a5
    800107ba:	cf9d                	beqz	a5,800107f8 <_ntoa_format+0x78>
    800107bc:	481c                	lw	a5,16(s0)
    800107be:	8b85                	andi	a5,a5,1
    800107c0:	2781                	sext.w	a5,a5
    800107c2:	cb9d                	beqz	a5,800107f8 <_ntoa_format+0x78>
    800107c4:	fbf44783          	lbu	a5,-65(s0)
    800107c8:	0ff7f793          	andi	a5,a5,255
    800107cc:	e789                	bnez	a5,800107d6 <_ntoa_format+0x56>
            (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    800107ce:	481c                	lw	a5,16(s0)
    800107d0:	8bb1                	andi	a5,a5,12
    800107d2:	2781                	sext.w	a5,a5
    800107d4:	c395                	beqz	a5,800107f8 <_ntoa_format+0x78>
            width--;
    800107d6:	441c                	lw	a5,8(s0)
    800107d8:	37fd                	addiw	a5,a5,-1
    800107da:	c41c                	sw	a5,8(s0)
        }
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    800107dc:	a831                	j	800107f8 <_ntoa_format+0x78>
            buf[len++] = '0';
    800107de:	fc043783          	ld	a5,-64(s0)
    800107e2:	00178713          	addi	a4,a5,1
    800107e6:	fce43023          	sd	a4,-64(s0)
    800107ea:	fc843703          	ld	a4,-56(s0)
    800107ee:	97ba                	add	a5,a5,a4
    800107f0:	03000713          	li	a4,48
    800107f4:	00e78023          	sb	a4,0(a5)
        while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    800107f8:	00046783          	lwu	a5,0(s0)
    800107fc:	fc043703          	ld	a4,-64(s0)
    80010800:	02f77563          	bgeu	a4,a5,8001082a <_ntoa_format+0xaa>
    80010804:	fc043703          	ld	a4,-64(s0)
    80010808:	47fd                	li	a5,31
    8001080a:	fce7fae3          	bgeu	a5,a4,800107de <_ntoa_format+0x5e>
        }
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    8001080e:	a831                	j	8001082a <_ntoa_format+0xaa>
               (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = '0';
    80010810:	fc043783          	ld	a5,-64(s0)
    80010814:	00178713          	addi	a4,a5,1
    80010818:	fce43023          	sd	a4,-64(s0)
    8001081c:	fc843703          	ld	a4,-56(s0)
    80010820:	97ba                	add	a5,a5,a4
    80010822:	03000713          	li	a4,48
    80010826:	00e78023          	sb	a4,0(a5)
        while ((flags & FLAGS_ZEROPAD) && (len < width) &&
    8001082a:	481c                	lw	a5,16(s0)
    8001082c:	8b85                	andi	a5,a5,1
    8001082e:	2781                	sext.w	a5,a5
    80010830:	cf81                	beqz	a5,80010848 <_ntoa_format+0xc8>
    80010832:	00846783          	lwu	a5,8(s0)
    80010836:	fc043703          	ld	a4,-64(s0)
    8001083a:	00f77763          	bgeu	a4,a5,80010848 <_ntoa_format+0xc8>
    8001083e:	fc043703          	ld	a4,-64(s0)
    80010842:	47fd                	li	a5,31
    80010844:	fce7f6e3          	bgeu	a5,a4,80010810 <_ntoa_format+0x90>
        }
    }

    // handle hash
    if (flags & FLAGS_HASH) {
    80010848:	481c                	lw	a5,16(s0)
    8001084a:	8bc1                	andi	a5,a5,16
    8001084c:	2781                	sext.w	a5,a5
    8001084e:	12078363          	beqz	a5,80010974 <_ntoa_format+0x1f4>
        if (!(flags & FLAGS_PRECISION) && len &&
    80010852:	481c                	lw	a5,16(s0)
    80010854:	4007f793          	andi	a5,a5,1024
    80010858:	2781                	sext.w	a5,a5
    8001085a:	e7a1                	bnez	a5,800108a2 <_ntoa_format+0x122>
    8001085c:	fc043783          	ld	a5,-64(s0)
    80010860:	c3a9                	beqz	a5,800108a2 <_ntoa_format+0x122>
            ((len == prec) || (len == width))) {
    80010862:	00046783          	lwu	a5,0(s0)
        if (!(flags & FLAGS_PRECISION) && len &&
    80010866:	fc043703          	ld	a4,-64(s0)
    8001086a:	00f70863          	beq	a4,a5,8001087a <_ntoa_format+0xfa>
            ((len == prec) || (len == width))) {
    8001086e:	00846783          	lwu	a5,8(s0)
    80010872:	fc043703          	ld	a4,-64(s0)
    80010876:	02f71663          	bne	a4,a5,800108a2 <_ntoa_format+0x122>
            len--;
    8001087a:	fc043783          	ld	a5,-64(s0)
    8001087e:	17fd                	addi	a5,a5,-1
    80010880:	fcf43023          	sd	a5,-64(s0)
            if (len && (base == 16U)) {
    80010884:	fc043783          	ld	a5,-64(s0)
    80010888:	cf89                	beqz	a5,800108a2 <_ntoa_format+0x122>
    8001088a:	fb842783          	lw	a5,-72(s0)
    8001088e:	0007871b          	sext.w	a4,a5
    80010892:	47c1                	li	a5,16
    80010894:	00f71763          	bne	a4,a5,800108a2 <_ntoa_format+0x122>
                len--;
    80010898:	fc043783          	ld	a5,-64(s0)
    8001089c:	17fd                	addi	a5,a5,-1
    8001089e:	fcf43023          	sd	a5,-64(s0)
            }
        }
        if ((base == 16U) && !(flags & FLAGS_UPPERCASE) &&
    800108a2:	fb842783          	lw	a5,-72(s0)
    800108a6:	0007871b          	sext.w	a4,a5
    800108aa:	47c1                	li	a5,16
    800108ac:	02f71a63          	bne	a4,a5,800108e0 <_ntoa_format+0x160>
    800108b0:	481c                	lw	a5,16(s0)
    800108b2:	0207f793          	andi	a5,a5,32
    800108b6:	2781                	sext.w	a5,a5
    800108b8:	e785                	bnez	a5,800108e0 <_ntoa_format+0x160>
    800108ba:	fc043703          	ld	a4,-64(s0)
    800108be:	47fd                	li	a5,31
    800108c0:	02e7e063          	bltu	a5,a4,800108e0 <_ntoa_format+0x160>
            (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'x';
    800108c4:	fc043783          	ld	a5,-64(s0)
    800108c8:	00178713          	addi	a4,a5,1
    800108cc:	fce43023          	sd	a4,-64(s0)
    800108d0:	fc843703          	ld	a4,-56(s0)
    800108d4:	97ba                	add	a5,a5,a4
    800108d6:	07800713          	li	a4,120
    800108da:	00e78023          	sb	a4,0(a5)
    800108de:	a88d                	j	80010950 <_ntoa_format+0x1d0>
        }
        else if ((base == 16U) && (flags & FLAGS_UPPERCASE) &&
    800108e0:	fb842783          	lw	a5,-72(s0)
    800108e4:	0007871b          	sext.w	a4,a5
    800108e8:	47c1                	li	a5,16
    800108ea:	02f71a63          	bne	a4,a5,8001091e <_ntoa_format+0x19e>
    800108ee:	481c                	lw	a5,16(s0)
    800108f0:	0207f793          	andi	a5,a5,32
    800108f4:	2781                	sext.w	a5,a5
    800108f6:	c785                	beqz	a5,8001091e <_ntoa_format+0x19e>
    800108f8:	fc043703          	ld	a4,-64(s0)
    800108fc:	47fd                	li	a5,31
    800108fe:	02e7e063          	bltu	a5,a4,8001091e <_ntoa_format+0x19e>
                 (len < PRINTF_NTOA_BUFFER_SIZE)) {
            buf[len++] = 'X';
    80010902:	fc043783          	ld	a5,-64(s0)
    80010906:	00178713          	addi	a4,a5,1
    8001090a:	fce43023          	sd	a4,-64(s0)
    8001090e:	fc843703          	ld	a4,-56(s0)
    80010912:	97ba                	add	a5,a5,a4
    80010914:	05800713          	li	a4,88
    80010918:	00e78023          	sb	a4,0(a5)
    8001091c:	a815                	j	80010950 <_ntoa_format+0x1d0>
        }
        else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    8001091e:	fb842783          	lw	a5,-72(s0)
    80010922:	0007871b          	sext.w	a4,a5
    80010926:	4789                	li	a5,2
    80010928:	02f71463          	bne	a4,a5,80010950 <_ntoa_format+0x1d0>
    8001092c:	fc043703          	ld	a4,-64(s0)
    80010930:	47fd                	li	a5,31
    80010932:	00e7ef63          	bltu	a5,a4,80010950 <_ntoa_format+0x1d0>
            buf[len++] = 'b';
    80010936:	fc043783          	ld	a5,-64(s0)
    8001093a:	00178713          	addi	a4,a5,1
    8001093e:	fce43023          	sd	a4,-64(s0)
    80010942:	fc843703          	ld	a4,-56(s0)
    80010946:	97ba                	add	a5,a5,a4
    80010948:	06200713          	li	a4,98
    8001094c:	00e78023          	sb	a4,0(a5)
        }
        if (len < PRINTF_NTOA_BUFFER_SIZE) {
    80010950:	fc043703          	ld	a4,-64(s0)
    80010954:	47fd                	li	a5,31
    80010956:	00e7ef63          	bltu	a5,a4,80010974 <_ntoa_format+0x1f4>
            buf[len++] = '0';
    8001095a:	fc043783          	ld	a5,-64(s0)
    8001095e:	00178713          	addi	a4,a5,1
    80010962:	fce43023          	sd	a4,-64(s0)
    80010966:	fc843703          	ld	a4,-56(s0)
    8001096a:	97ba                	add	a5,a5,a4
    8001096c:	03000713          	li	a4,48
    80010970:	00e78023          	sb	a4,0(a5)
        }
    }

    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    80010974:	fc043703          	ld	a4,-64(s0)
    80010978:	47fd                	li	a5,31
    8001097a:	06e7e863          	bltu	a5,a4,800109ea <_ntoa_format+0x26a>
        if (negative) {
    8001097e:	fbf44783          	lbu	a5,-65(s0)
    80010982:	0ff7f793          	andi	a5,a5,255
    80010986:	cf99                	beqz	a5,800109a4 <_ntoa_format+0x224>
            buf[len++] = '-';
    80010988:	fc043783          	ld	a5,-64(s0)
    8001098c:	00178713          	addi	a4,a5,1
    80010990:	fce43023          	sd	a4,-64(s0)
    80010994:	fc843703          	ld	a4,-56(s0)
    80010998:	97ba                	add	a5,a5,a4
    8001099a:	02d00713          	li	a4,45
    8001099e:	00e78023          	sb	a4,0(a5)
    800109a2:	a0a1                	j	800109ea <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_PLUS) {
    800109a4:	481c                	lw	a5,16(s0)
    800109a6:	8b91                	andi	a5,a5,4
    800109a8:	2781                	sext.w	a5,a5
    800109aa:	cf99                	beqz	a5,800109c8 <_ntoa_format+0x248>
            buf[len++] = '+';  // ignore the space if the '+' exists
    800109ac:	fc043783          	ld	a5,-64(s0)
    800109b0:	00178713          	addi	a4,a5,1
    800109b4:	fce43023          	sd	a4,-64(s0)
    800109b8:	fc843703          	ld	a4,-56(s0)
    800109bc:	97ba                	add	a5,a5,a4
    800109be:	02b00713          	li	a4,43
    800109c2:	00e78023          	sb	a4,0(a5)
    800109c6:	a015                	j	800109ea <_ntoa_format+0x26a>
        }
        else if (flags & FLAGS_SPACE) {
    800109c8:	481c                	lw	a5,16(s0)
    800109ca:	8ba1                	andi	a5,a5,8
    800109cc:	2781                	sext.w	a5,a5
    800109ce:	cf91                	beqz	a5,800109ea <_ntoa_format+0x26a>
            buf[len++] = ' ';
    800109d0:	fc043783          	ld	a5,-64(s0)
    800109d4:	00178713          	addi	a4,a5,1
    800109d8:	fce43023          	sd	a4,-64(s0)
    800109dc:	fc843703          	ld	a4,-56(s0)
    800109e0:	97ba                	add	a5,a5,a4
    800109e2:	02000713          	li	a4,32
    800109e6:	00e78023          	sb	a4,0(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    800109ea:	4818                	lw	a4,16(s0)
    800109ec:	441c                	lw	a5,8(s0)
    800109ee:	88ba                	mv	a7,a4
    800109f0:	883e                	mv	a6,a5
    800109f2:	fc043783          	ld	a5,-64(s0)
    800109f6:	fc843703          	ld	a4,-56(s0)
    800109fa:	fd043683          	ld	a3,-48(s0)
    800109fe:	fd843603          	ld	a2,-40(s0)
    80010a02:	fe043583          	ld	a1,-32(s0)
    80010a06:	fe843503          	ld	a0,-24(s0)
    80010a0a:	c65ff0ef          	jal	ra,8001066e <_out_rev>
    80010a0e:	87aa                	mv	a5,a0
}
    80010a10:	853e                	mv	a0,a5
    80010a12:	60a6                	ld	ra,72(sp)
    80010a14:	6406                	ld	s0,64(sp)
    80010a16:	6161                	addi	sp,sp,80
    80010a18:	8082                	ret

0000000080010a1a <_ntoa_long>:
// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char *buffer, size_t idx,
                         size_t maxlen, unsigned long value, bool negative,
                         unsigned long base, unsigned int prec,
                         unsigned int width, unsigned int flags)
{
    80010a1a:	7135                	addi	sp,sp,-160
    80010a1c:	ed06                	sd	ra,152(sp)
    80010a1e:	e922                	sd	s0,144(sp)
    80010a20:	1100                	addi	s0,sp,160
    80010a22:	faa43c23          	sd	a0,-72(s0)
    80010a26:	fab43823          	sd	a1,-80(s0)
    80010a2a:	fac43423          	sd	a2,-88(s0)
    80010a2e:	fad43023          	sd	a3,-96(s0)
    80010a32:	f8e43c23          	sd	a4,-104(s0)
    80010a36:	f9043423          	sd	a6,-120(s0)
    80010a3a:	8746                	mv	a4,a7
    80010a3c:	f8f40ba3          	sb	a5,-105(s0)
    80010a40:	87ba                	mv	a5,a4
    80010a42:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    80010a46:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    80010a4a:	f9843783          	ld	a5,-104(s0)
    80010a4e:	e781                	bnez	a5,80010a56 <_ntoa_long+0x3c>
        flags &= ~FLAGS_HASH;
    80010a50:	441c                	lw	a5,8(s0)
    80010a52:	9bbd                	andi	a5,a5,-17
    80010a54:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    80010a56:	441c                	lw	a5,8(s0)
    80010a58:	4007f793          	andi	a5,a5,1024
    80010a5c:	2781                	sext.w	a5,a5
    80010a5e:	c781                	beqz	a5,80010a66 <_ntoa_long+0x4c>
    80010a60:	f9843783          	ld	a5,-104(s0)
    80010a64:	c7c1                	beqz	a5,80010aec <_ntoa_long+0xd2>
        do {
            const char digit = (char)(value % base);
    80010a66:	f9843703          	ld	a4,-104(s0)
    80010a6a:	f8843783          	ld	a5,-120(s0)
    80010a6e:	02f777b3          	remu	a5,a4,a5
    80010a72:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    80010a76:	fe744783          	lbu	a5,-25(s0)
    80010a7a:	0ff7f713          	andi	a4,a5,255
    80010a7e:	47a5                	li	a5,9
    80010a80:	00e7e963          	bltu	a5,a4,80010a92 <_ntoa_long+0x78>
    80010a84:	fe744783          	lbu	a5,-25(s0)
    80010a88:	0307879b          	addiw	a5,a5,48
    80010a8c:	0ff7f793          	andi	a5,a5,255
    80010a90:	a01d                	j	80010ab6 <_ntoa_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    80010a92:	441c                	lw	a5,8(s0)
    80010a94:	0207f793          	andi	a5,a5,32
    80010a98:	2781                	sext.w	a5,a5
    80010a9a:	c781                	beqz	a5,80010aa2 <_ntoa_long+0x88>
    80010a9c:	04100793          	li	a5,65
    80010aa0:	a019                	j	80010aa6 <_ntoa_long+0x8c>
    80010aa2:	06100793          	li	a5,97
    80010aa6:	fe744703          	lbu	a4,-25(s0)
    80010aaa:	9fb9                	addw	a5,a5,a4
    80010aac:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    80010ab0:	37d9                	addiw	a5,a5,-10
    80010ab2:	0ff7f793          	andi	a5,a5,255
    80010ab6:	fe843703          	ld	a4,-24(s0)
    80010aba:	00170693          	addi	a3,a4,1
    80010abe:	fed43423          	sd	a3,-24(s0)
    80010ac2:	ff040693          	addi	a3,s0,-16
    80010ac6:	9736                	add	a4,a4,a3
    80010ac8:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    80010acc:	f9843703          	ld	a4,-104(s0)
    80010ad0:	f8843783          	ld	a5,-120(s0)
    80010ad4:	02f757b3          	divu	a5,a4,a5
    80010ad8:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    80010adc:	f9843783          	ld	a5,-104(s0)
    80010ae0:	c791                	beqz	a5,80010aec <_ntoa_long+0xd2>
    80010ae2:	fe843703          	ld	a4,-24(s0)
    80010ae6:	47fd                	li	a5,31
    80010ae8:	f6e7ffe3          	bgeu	a5,a4,80010a66 <_ntoa_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    80010aec:	f8843783          	ld	a5,-120(s0)
    80010af0:	0007861b          	sext.w	a2,a5
    80010af4:	f9744683          	lbu	a3,-105(s0)
    80010af8:	fc040713          	addi	a4,s0,-64
    80010afc:	441c                	lw	a5,8(s0)
    80010afe:	e83e                	sd	a5,16(sp)
    80010b00:	401c                	lw	a5,0(s0)
    80010b02:	e43e                	sd	a5,8(sp)
    80010b04:	f9042783          	lw	a5,-112(s0)
    80010b08:	e03e                	sd	a5,0(sp)
    80010b0a:	88b2                	mv	a7,a2
    80010b0c:	8836                	mv	a6,a3
    80010b0e:	fe843783          	ld	a5,-24(s0)
    80010b12:	fa043683          	ld	a3,-96(s0)
    80010b16:	fa843603          	ld	a2,-88(s0)
    80010b1a:	fb043583          	ld	a1,-80(s0)
    80010b1e:	fb843503          	ld	a0,-72(s0)
    80010b22:	c5fff0ef          	jal	ra,80010780 <_ntoa_format>
    80010b26:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    80010b28:	853e                	mv	a0,a5
    80010b2a:	60ea                	ld	ra,152(sp)
    80010b2c:	644a                	ld	s0,144(sp)
    80010b2e:	610d                	addi	sp,sp,160
    80010b30:	8082                	ret

0000000080010b32 <_ntoa_long_long>:
static size_t _ntoa_long_long(out_fct_type out, char *buffer, size_t idx,
                              size_t maxlen, unsigned long long value,
                              bool negative, unsigned long long base,
                              unsigned int prec, unsigned int width,
                              unsigned int flags)
{
    80010b32:	7135                	addi	sp,sp,-160
    80010b34:	ed06                	sd	ra,152(sp)
    80010b36:	e922                	sd	s0,144(sp)
    80010b38:	1100                	addi	s0,sp,160
    80010b3a:	faa43c23          	sd	a0,-72(s0)
    80010b3e:	fab43823          	sd	a1,-80(s0)
    80010b42:	fac43423          	sd	a2,-88(s0)
    80010b46:	fad43023          	sd	a3,-96(s0)
    80010b4a:	f8e43c23          	sd	a4,-104(s0)
    80010b4e:	f9043423          	sd	a6,-120(s0)
    80010b52:	8746                	mv	a4,a7
    80010b54:	f8f40ba3          	sb	a5,-105(s0)
    80010b58:	87ba                	mv	a5,a4
    80010b5a:	f8f42823          	sw	a5,-112(s0)
    char buf[PRINTF_NTOA_BUFFER_SIZE];
    size_t len = 0U;
    80010b5e:	fe043423          	sd	zero,-24(s0)

    // no hash for 0 values
    if (!value) {
    80010b62:	f9843783          	ld	a5,-104(s0)
    80010b66:	e781                	bnez	a5,80010b6e <_ntoa_long_long+0x3c>
        flags &= ~FLAGS_HASH;
    80010b68:	441c                	lw	a5,8(s0)
    80010b6a:	9bbd                	andi	a5,a5,-17
    80010b6c:	c41c                	sw	a5,8(s0)
    }

    // write if precision != 0 and value is != 0
    if (!(flags & FLAGS_PRECISION) || value) {
    80010b6e:	441c                	lw	a5,8(s0)
    80010b70:	4007f793          	andi	a5,a5,1024
    80010b74:	2781                	sext.w	a5,a5
    80010b76:	c781                	beqz	a5,80010b7e <_ntoa_long_long+0x4c>
    80010b78:	f9843783          	ld	a5,-104(s0)
    80010b7c:	c7c1                	beqz	a5,80010c04 <_ntoa_long_long+0xd2>
        do {
            const char digit = (char)(value % base);
    80010b7e:	f9843703          	ld	a4,-104(s0)
    80010b82:	f8843783          	ld	a5,-120(s0)
    80010b86:	02f777b3          	remu	a5,a4,a5
    80010b8a:	fef403a3          	sb	a5,-25(s0)
            buf[len++] =
    80010b8e:	fe744783          	lbu	a5,-25(s0)
    80010b92:	0ff7f713          	andi	a4,a5,255
    80010b96:	47a5                	li	a5,9
    80010b98:	00e7e963          	bltu	a5,a4,80010baa <_ntoa_long_long+0x78>
    80010b9c:	fe744783          	lbu	a5,-25(s0)
    80010ba0:	0307879b          	addiw	a5,a5,48
    80010ba4:	0ff7f793          	andi	a5,a5,255
    80010ba8:	a01d                	j	80010bce <_ntoa_long_long+0x9c>
                digit < 10 ? '0' + digit
                           : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    80010baa:	441c                	lw	a5,8(s0)
    80010bac:	0207f793          	andi	a5,a5,32
    80010bb0:	2781                	sext.w	a5,a5
    80010bb2:	c781                	beqz	a5,80010bba <_ntoa_long_long+0x88>
    80010bb4:	04100793          	li	a5,65
    80010bb8:	a019                	j	80010bbe <_ntoa_long_long+0x8c>
    80010bba:	06100793          	li	a5,97
    80010bbe:	fe744703          	lbu	a4,-25(s0)
    80010bc2:	9fb9                	addw	a5,a5,a4
    80010bc4:	0ff7f793          	andi	a5,a5,255
            buf[len++] =
    80010bc8:	37d9                	addiw	a5,a5,-10
    80010bca:	0ff7f793          	andi	a5,a5,255
    80010bce:	fe843703          	ld	a4,-24(s0)
    80010bd2:	00170693          	addi	a3,a4,1
    80010bd6:	fed43423          	sd	a3,-24(s0)
    80010bda:	ff040693          	addi	a3,s0,-16
    80010bde:	9736                	add	a4,a4,a3
    80010be0:	fcf70823          	sb	a5,-48(a4)
            value /= base;
    80010be4:	f9843703          	ld	a4,-104(s0)
    80010be8:	f8843783          	ld	a5,-120(s0)
    80010bec:	02f757b3          	divu	a5,a4,a5
    80010bf0:	f8f43c23          	sd	a5,-104(s0)
        } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    80010bf4:	f9843783          	ld	a5,-104(s0)
    80010bf8:	c791                	beqz	a5,80010c04 <_ntoa_long_long+0xd2>
    80010bfa:	fe843703          	ld	a4,-24(s0)
    80010bfe:	47fd                	li	a5,31
    80010c00:	f6e7ffe3          	bgeu	a5,a4,80010b7e <_ntoa_long_long+0x4c>
    }

    return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative,
    80010c04:	f8843783          	ld	a5,-120(s0)
    80010c08:	0007861b          	sext.w	a2,a5
    80010c0c:	f9744683          	lbu	a3,-105(s0)
    80010c10:	fc040713          	addi	a4,s0,-64
    80010c14:	441c                	lw	a5,8(s0)
    80010c16:	e83e                	sd	a5,16(sp)
    80010c18:	401c                	lw	a5,0(s0)
    80010c1a:	e43e                	sd	a5,8(sp)
    80010c1c:	f9042783          	lw	a5,-112(s0)
    80010c20:	e03e                	sd	a5,0(sp)
    80010c22:	88b2                	mv	a7,a2
    80010c24:	8836                	mv	a6,a3
    80010c26:	fe843783          	ld	a5,-24(s0)
    80010c2a:	fa043683          	ld	a3,-96(s0)
    80010c2e:	fa843603          	ld	a2,-88(s0)
    80010c32:	fb043583          	ld	a1,-80(s0)
    80010c36:	fb843503          	ld	a0,-72(s0)
    80010c3a:	b47ff0ef          	jal	ra,80010780 <_ntoa_format>
    80010c3e:	87aa                	mv	a5,a0
                        (unsigned int)base, prec, width, flags);
}
    80010c40:	853e                	mv	a0,a5
    80010c42:	60ea                	ld	ra,152(sp)
    80010c44:	644a                	ld	s0,144(sp)
    80010c46:	610d                	addi	sp,sp,160
    80010c48:	8082                	ret

0000000080010c4a <_ftoa>:

// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    80010c4a:	7135                	addi	sp,sp,-160
    80010c4c:	ed06                	sd	ra,152(sp)
    80010c4e:	e922                	sd	s0,144(sp)
    80010c50:	1100                	addi	s0,sp,160
    80010c52:	f8a43c23          	sd	a0,-104(s0)
    80010c56:	f8b43823          	sd	a1,-112(s0)
    80010c5a:	f8c43423          	sd	a2,-120(s0)
    80010c5e:	f8d43023          	sd	a3,-128(s0)
    80010c62:	f6a43c27          	fsd	fa0,-136(s0)
    80010c66:	863a                	mv	a2,a4
    80010c68:	86be                	mv	a3,a5
    80010c6a:	8742                	mv	a4,a6
    80010c6c:	87b2                	mv	a5,a2
    80010c6e:	f6f42a23          	sw	a5,-140(s0)
    80010c72:	87b6                	mv	a5,a3
    80010c74:	f6f42823          	sw	a5,-144(s0)
    80010c78:	87ba                	mv	a5,a4
    80010c7a:	f6f42623          	sw	a5,-148(s0)
    char buf[PRINTF_FTOA_BUFFER_SIZE];
    size_t len                  = 0U;
    80010c7e:	fe043423          	sd	zero,-24(s0)
    double diff                 = 0.0;
    80010c82:	fc043423          	sd	zero,-56(s0)
    static const double pow10[] = {1,         10,        100,     1000,
                                   10000,     100000,    1000000, 10000000,
                                   100000000, 1000000000};

    // test for special values
    if (value != value)
    80010c86:	f7843707          	fld	fa4,-136(s0)
    80010c8a:	f7843787          	fld	fa5,-136(s0)
    80010c8e:	a2f727d3          	feq.d	a5,fa4,fa5
    80010c92:	eb85                	bnez	a5,80010cc2 <_ftoa+0x78>
        return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
    80010c94:	f6c42703          	lw	a4,-148(s0)
    80010c98:	f7042783          	lw	a5,-144(s0)
    80010c9c:	88ba                	mv	a7,a4
    80010c9e:	883e                	mv	a6,a5
    80010ca0:	478d                	li	a5,3
    80010ca2:	00008717          	auipc	a4,0x8
    80010ca6:	38e70713          	addi	a4,a4,910 # 80019030 <SYSCALLS+0x30>
    80010caa:	f8043683          	ld	a3,-128(s0)
    80010cae:	f8843603          	ld	a2,-120(s0)
    80010cb2:	f9043583          	ld	a1,-112(s0)
    80010cb6:	f9843503          	ld	a0,-104(s0)
    80010cba:	9b5ff0ef          	jal	ra,8001066e <_out_rev>
    80010cbe:	87aa                	mv	a5,a0
    80010cc0:	a1f1                	j	8001118c <_ftoa+0x542>
    if (value < -DBL_MAX)
    80010cc2:	f7843707          	fld	fa4,-136(s0)
    80010cc6:	00008797          	auipc	a5,0x8
    80010cca:	5ba78793          	addi	a5,a5,1466 # 80019280 <pow10.0+0x50>
    80010cce:	239c                	fld	fa5,0(a5)
    80010cd0:	a2f717d3          	flt.d	a5,fa4,fa5
    80010cd4:	cb85                	beqz	a5,80010d04 <_ftoa+0xba>
        return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
    80010cd6:	f6c42703          	lw	a4,-148(s0)
    80010cda:	f7042783          	lw	a5,-144(s0)
    80010cde:	88ba                	mv	a7,a4
    80010ce0:	883e                	mv	a6,a5
    80010ce2:	4791                	li	a5,4
    80010ce4:	00008717          	auipc	a4,0x8
    80010ce8:	35470713          	addi	a4,a4,852 # 80019038 <SYSCALLS+0x38>
    80010cec:	f8043683          	ld	a3,-128(s0)
    80010cf0:	f8843603          	ld	a2,-120(s0)
    80010cf4:	f9043583          	ld	a1,-112(s0)
    80010cf8:	f9843503          	ld	a0,-104(s0)
    80010cfc:	973ff0ef          	jal	ra,8001066e <_out_rev>
    80010d00:	87aa                	mv	a5,a0
    80010d02:	a169                	j	8001118c <_ftoa+0x542>
    if (value > DBL_MAX)
    80010d04:	f7843707          	fld	fa4,-136(s0)
    80010d08:	00008797          	auipc	a5,0x8
    80010d0c:	58078793          	addi	a5,a5,1408 # 80019288 <pow10.0+0x58>
    80010d10:	239c                	fld	fa5,0(a5)
    80010d12:	a2e797d3          	flt.d	a5,fa5,fa4
    80010d16:	cba9                	beqz	a5,80010d68 <_ftoa+0x11e>
        return _out_rev(out, buffer, idx, maxlen,
                        (flags & FLAGS_PLUS) ? "fni+" : "fni",
    80010d18:	f6c42783          	lw	a5,-148(s0)
    80010d1c:	8b91                	andi	a5,a5,4
    80010d1e:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    80010d20:	c791                	beqz	a5,80010d2c <_ftoa+0xe2>
    80010d22:	00008717          	auipc	a4,0x8
    80010d26:	31e70713          	addi	a4,a4,798 # 80019040 <SYSCALLS+0x40>
    80010d2a:	a029                	j	80010d34 <_ftoa+0xea>
    80010d2c:	00008717          	auipc	a4,0x8
    80010d30:	31c70713          	addi	a4,a4,796 # 80019048 <SYSCALLS+0x48>
                        (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
    80010d34:	f6c42783          	lw	a5,-148(s0)
    80010d38:	8b91                	andi	a5,a5,4
    80010d3a:	2781                	sext.w	a5,a5
        return _out_rev(out, buffer, idx, maxlen,
    80010d3c:	c399                	beqz	a5,80010d42 <_ftoa+0xf8>
    80010d3e:	4791                	li	a5,4
    80010d40:	a011                	j	80010d44 <_ftoa+0xfa>
    80010d42:	478d                	li	a5,3
    80010d44:	f6c42603          	lw	a2,-148(s0)
    80010d48:	f7042683          	lw	a3,-144(s0)
    80010d4c:	88b2                	mv	a7,a2
    80010d4e:	8836                	mv	a6,a3
    80010d50:	f8043683          	ld	a3,-128(s0)
    80010d54:	f8843603          	ld	a2,-120(s0)
    80010d58:	f9043583          	ld	a1,-112(s0)
    80010d5c:	f9843503          	ld	a0,-104(s0)
    80010d60:	90fff0ef          	jal	ra,8001066e <_out_rev>
    80010d64:	87aa                	mv	a5,a0
    80010d66:	a11d                	j	8001118c <_ftoa+0x542>

    // test for very large values
    // standard printf behavior is to print EVERY whole number digit -- which
    // could be 100s of characters overflowing your buffers == bad
    if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
    80010d68:	f7843707          	fld	fa4,-136(s0)
    80010d6c:	00008797          	auipc	a5,0x8
    80010d70:	52478793          	addi	a5,a5,1316 # 80019290 <pow10.0+0x60>
    80010d74:	239c                	fld	fa5,0(a5)
    80010d76:	a2e797d3          	flt.d	a5,fa5,fa4
    80010d7a:	eb99                	bnez	a5,80010d90 <_ftoa+0x146>
    80010d7c:	f7843707          	fld	fa4,-136(s0)
    80010d80:	00008797          	auipc	a5,0x8
    80010d84:	51878793          	addi	a5,a5,1304 # 80019298 <pow10.0+0x68>
    80010d88:	239c                	fld	fa5,0(a5)
    80010d8a:	a2f717d3          	flt.d	a5,fa4,fa5
    80010d8e:	c795                	beqz	a5,80010dba <_ftoa+0x170>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
        return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
    80010d90:	f6c42683          	lw	a3,-148(s0)
    80010d94:	f7042783          	lw	a5,-144(s0)
    80010d98:	f7442703          	lw	a4,-140(s0)
    80010d9c:	8836                	mv	a6,a3
    80010d9e:	f7843507          	fld	fa0,-136(s0)
    80010da2:	f8043683          	ld	a3,-128(s0)
    80010da6:	f8843603          	ld	a2,-120(s0)
    80010daa:	f9043583          	ld	a1,-112(s0)
    80010dae:	f9843503          	ld	a0,-104(s0)
    80010db2:	3e4000ef          	jal	ra,80011196 <_etoa>
    80010db6:	87aa                	mv	a5,a0
    80010db8:	aed1                	j	8001118c <_ftoa+0x542>
        return 0U;
#endif
    }

    // test for negative
    bool negative = false;
    80010dba:	fe0403a3          	sb	zero,-25(s0)
    if (value < 0) {
    80010dbe:	f7843787          	fld	fa5,-136(s0)
    80010dc2:	f2000753          	fmv.d.x	fa4,zero
    80010dc6:	a2e797d3          	flt.d	a5,fa5,fa4
    80010dca:	cf81                	beqz	a5,80010de2 <_ftoa+0x198>
        negative = true;
    80010dcc:	4785                	li	a5,1
    80010dce:	fef403a3          	sb	a5,-25(s0)
        value    = 0 - value;
    80010dd2:	f2000753          	fmv.d.x	fa4,zero
    80010dd6:	f7843787          	fld	fa5,-136(s0)
    80010dda:	0af777d3          	fsub.d	fa5,fa4,fa5
    80010dde:	f6f43c27          	fsd	fa5,-136(s0)
    }

    // set default precision, if not set explicitly
    if (!(flags & FLAGS_PRECISION)) {
    80010de2:	f6c42783          	lw	a5,-148(s0)
    80010de6:	4007f793          	andi	a5,a5,1024
    80010dea:	2781                	sext.w	a5,a5
    80010dec:	e79d                	bnez	a5,80010e1a <_ftoa+0x1d0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    80010dee:	4799                	li	a5,6
    80010df0:	f6f42a23          	sw	a5,-140(s0)
    }
    // limit precision to 9, cause a prec >= 10 can lead to overflow errors
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    80010df4:	a01d                	j	80010e1a <_ftoa+0x1d0>
        buf[len++] = '0';
    80010df6:	fe843783          	ld	a5,-24(s0)
    80010dfa:	00178713          	addi	a4,a5,1
    80010dfe:	fee43423          	sd	a4,-24(s0)
    80010e02:	ff040713          	addi	a4,s0,-16
    80010e06:	97ba                	add	a5,a5,a4
    80010e08:	03000713          	li	a4,48
    80010e0c:	fae78823          	sb	a4,-80(a5)
        prec--;
    80010e10:	f7442783          	lw	a5,-140(s0)
    80010e14:	37fd                	addiw	a5,a5,-1
    80010e16:	f6f42a23          	sw	a5,-140(s0)
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    80010e1a:	fe843703          	ld	a4,-24(s0)
    80010e1e:	47fd                	li	a5,31
    80010e20:	00e7e963          	bltu	a5,a4,80010e32 <_ftoa+0x1e8>
    80010e24:	f7442783          	lw	a5,-140(s0)
    80010e28:	0007871b          	sext.w	a4,a5
    80010e2c:	47a5                	li	a5,9
    80010e2e:	fce7e4e3          	bltu	a5,a4,80010df6 <_ftoa+0x1ac>
    }

    int whole          = (int)value;
    80010e32:	f7843787          	fld	fa5,-136(s0)
    80010e36:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80010e3a:	fef42023          	sw	a5,-32(s0)
    double tmp         = (value - whole) * pow10[prec];
    80010e3e:	fe042783          	lw	a5,-32(s0)
    80010e42:	d20787d3          	fcvt.d.w	fa5,a5
    80010e46:	f7843707          	fld	fa4,-136(s0)
    80010e4a:	0af77753          	fsub.d	fa4,fa4,fa5
    80010e4e:	00008717          	auipc	a4,0x8
    80010e52:	3e270713          	addi	a4,a4,994 # 80019230 <pow10.0>
    80010e56:	f7446783          	lwu	a5,-140(s0)
    80010e5a:	078e                	slli	a5,a5,0x3
    80010e5c:	97ba                	add	a5,a5,a4
    80010e5e:	239c                	fld	fa5,0(a5)
    80010e60:	12f777d3          	fmul.d	fa5,fa4,fa5
    80010e64:	fcf43027          	fsd	fa5,-64(s0)
    unsigned long frac = (unsigned long)tmp;
    80010e68:	fc043787          	fld	fa5,-64(s0)
    80010e6c:	c23797d3          	fcvt.lu.d	a5,fa5,rtz
    80010e70:	fcf43c23          	sd	a5,-40(s0)
    diff               = tmp - frac;
    80010e74:	fd843783          	ld	a5,-40(s0)
    80010e78:	d237f7d3          	fcvt.d.lu	fa5,a5
    80010e7c:	fc043707          	fld	fa4,-64(s0)
    80010e80:	0af777d3          	fsub.d	fa5,fa4,fa5
    80010e84:	fcf43427          	fsd	fa5,-56(s0)

    if (diff > 0.5) {
    80010e88:	fc843707          	fld	fa4,-56(s0)
    80010e8c:	00008797          	auipc	a5,0x8
    80010e90:	41478793          	addi	a5,a5,1044 # 800192a0 <pow10.0+0x70>
    80010e94:	239c                	fld	fa5,0(a5)
    80010e96:	a2e797d3          	flt.d	a5,fa5,fa4
    80010e9a:	cf95                	beqz	a5,80010ed6 <_ftoa+0x28c>
        ++frac;
    80010e9c:	fd843783          	ld	a5,-40(s0)
    80010ea0:	0785                	addi	a5,a5,1
    80010ea2:	fcf43c23          	sd	a5,-40(s0)
        // handle rollover, e.g. case 0.99 with prec 1 is 1.0
        if (frac >= pow10[prec]) {
    80010ea6:	fd843783          	ld	a5,-40(s0)
    80010eaa:	d237f753          	fcvt.d.lu	fa4,a5
    80010eae:	00008717          	auipc	a4,0x8
    80010eb2:	38270713          	addi	a4,a4,898 # 80019230 <pow10.0>
    80010eb6:	f7446783          	lwu	a5,-140(s0)
    80010eba:	078e                	slli	a5,a5,0x3
    80010ebc:	97ba                	add	a5,a5,a4
    80010ebe:	239c                	fld	fa5,0(a5)
    80010ec0:	a2e787d3          	fle.d	a5,fa5,fa4
    80010ec4:	cf9d                	beqz	a5,80010f02 <_ftoa+0x2b8>
            frac = 0;
    80010ec6:	fc043c23          	sd	zero,-40(s0)
            ++whole;
    80010eca:	fe042783          	lw	a5,-32(s0)
    80010ece:	2785                	addiw	a5,a5,1
    80010ed0:	fef42023          	sw	a5,-32(s0)
    80010ed4:	a03d                	j	80010f02 <_ftoa+0x2b8>
        }
    }
    else if (diff < 0.5) {
    80010ed6:	fc843707          	fld	fa4,-56(s0)
    80010eda:	00008797          	auipc	a5,0x8
    80010ede:	3c678793          	addi	a5,a5,966 # 800192a0 <pow10.0+0x70>
    80010ee2:	239c                	fld	fa5,0(a5)
    80010ee4:	a2f717d3          	flt.d	a5,fa4,fa5
    80010ee8:	ef89                	bnez	a5,80010f02 <_ftoa+0x2b8>
    }
    else if ((frac == 0U) || (frac & 1U)) {
    80010eea:	fd843783          	ld	a5,-40(s0)
    80010eee:	c789                	beqz	a5,80010ef8 <_ftoa+0x2ae>
    80010ef0:	fd843783          	ld	a5,-40(s0)
    80010ef4:	8b85                	andi	a5,a5,1
    80010ef6:	c791                	beqz	a5,80010f02 <_ftoa+0x2b8>
        // if halfway, round up if odd OR if last digit is 0
        ++frac;
    80010ef8:	fd843783          	ld	a5,-40(s0)
    80010efc:	0785                	addi	a5,a5,1
    80010efe:	fcf43c23          	sd	a5,-40(s0)
    }

    if (prec == 0U) {
    80010f02:	f7442783          	lw	a5,-140(s0)
    80010f06:	2781                	sext.w	a5,a5
    80010f08:	e3bd                	bnez	a5,80010f6e <_ftoa+0x324>
        diff = value - (double)whole;
    80010f0a:	fe042783          	lw	a5,-32(s0)
    80010f0e:	d20787d3          	fcvt.d.w	fa5,a5
    80010f12:	f7843707          	fld	fa4,-136(s0)
    80010f16:	0af777d3          	fsub.d	fa5,fa4,fa5
    80010f1a:	fcf43427          	fsd	fa5,-56(s0)
        if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
    80010f1e:	fc843707          	fld	fa4,-56(s0)
    80010f22:	00008797          	auipc	a5,0x8
    80010f26:	37e78793          	addi	a5,a5,894 # 800192a0 <pow10.0+0x70>
    80010f2a:	239c                	fld	fa5,0(a5)
    80010f2c:	a2f717d3          	flt.d	a5,fa4,fa5
    80010f30:	00f037b3          	snez	a5,a5
    80010f34:	0ff7f793          	andi	a5,a5,255
    80010f38:	0017c793          	xori	a5,a5,1
    80010f3c:	0ff7f793          	andi	a5,a5,255
    80010f40:	eb99                	bnez	a5,80010f56 <_ftoa+0x30c>
    80010f42:	fc843707          	fld	fa4,-56(s0)
    80010f46:	00008797          	auipc	a5,0x8
    80010f4a:	35a78793          	addi	a5,a5,858 # 800192a0 <pow10.0+0x70>
    80010f4e:	239c                	fld	fa5,0(a5)
    80010f50:	a2e797d3          	flt.d	a5,fa5,fa4
    80010f54:	cbf1                	beqz	a5,80011028 <_ftoa+0x3de>
    80010f56:	fe042783          	lw	a5,-32(s0)
    80010f5a:	8b85                	andi	a5,a5,1
    80010f5c:	2781                	sext.w	a5,a5
    80010f5e:	10078863          	beqz	a5,8001106e <_ftoa+0x424>
            // exactly 0.5 and ODD, then round up
            // 1.5 -> 2, but 2.5 -> 2
            ++whole;
    80010f62:	fe042783          	lw	a5,-32(s0)
    80010f66:	2785                	addiw	a5,a5,1
    80010f68:	fef42023          	sw	a5,-32(s0)
    80010f6c:	a209                	j	8001106e <_ftoa+0x424>
        }
    }
    else {
        unsigned int count = prec;
    80010f6e:	f7442783          	lw	a5,-140(s0)
    80010f72:	fcf42a23          	sw	a5,-44(s0)
        // now do fractional part, as an unsigned number
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80010f76:	a0b1                	j	80010fc2 <_ftoa+0x378>
            --count;
    80010f78:	fd442783          	lw	a5,-44(s0)
    80010f7c:	37fd                	addiw	a5,a5,-1
    80010f7e:	fcf42a23          	sw	a5,-44(s0)
            buf[len++] = (char)(48U + (frac % 10U));
    80010f82:	fd843703          	ld	a4,-40(s0)
    80010f86:	47a9                	li	a5,10
    80010f88:	02f777b3          	remu	a5,a4,a5
    80010f8c:	0ff7f713          	andi	a4,a5,255
    80010f90:	fe843783          	ld	a5,-24(s0)
    80010f94:	00178693          	addi	a3,a5,1
    80010f98:	fed43423          	sd	a3,-24(s0)
    80010f9c:	0307071b          	addiw	a4,a4,48
    80010fa0:	0ff77713          	andi	a4,a4,255
    80010fa4:	ff040693          	addi	a3,s0,-16
    80010fa8:	97b6                	add	a5,a5,a3
    80010faa:	fae78823          	sb	a4,-80(a5)
            if (!(frac /= 10U)) {
    80010fae:	fd843703          	ld	a4,-40(s0)
    80010fb2:	47a9                	li	a5,10
    80010fb4:	02f757b3          	divu	a5,a4,a5
    80010fb8:	fcf43c23          	sd	a5,-40(s0)
    80010fbc:	fd843783          	ld	a5,-40(s0)
    80010fc0:	c799                	beqz	a5,80010fce <_ftoa+0x384>
        while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80010fc2:	fe843703          	ld	a4,-24(s0)
    80010fc6:	47fd                	li	a5,31
    80010fc8:	fae7f8e3          	bgeu	a5,a4,80010f78 <_ftoa+0x32e>
    80010fcc:	a005                	j	80010fec <_ftoa+0x3a2>
                break;
    80010fce:	0001                	nop
            }
        }
        // add extra 0s
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    80010fd0:	a831                	j	80010fec <_ftoa+0x3a2>
            buf[len++] = '0';
    80010fd2:	fe843783          	ld	a5,-24(s0)
    80010fd6:	00178713          	addi	a4,a5,1
    80010fda:	fee43423          	sd	a4,-24(s0)
    80010fde:	ff040713          	addi	a4,s0,-16
    80010fe2:	97ba                	add	a5,a5,a4
    80010fe4:	03000713          	li	a4,48
    80010fe8:	fae78823          	sb	a4,-80(a5)
        while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    80010fec:	fe843703          	ld	a4,-24(s0)
    80010ff0:	47fd                	li	a5,31
    80010ff2:	00e7e963          	bltu	a5,a4,80011004 <_ftoa+0x3ba>
    80010ff6:	fd442783          	lw	a5,-44(s0)
    80010ffa:	fff7871b          	addiw	a4,a5,-1
    80010ffe:	fce42a23          	sw	a4,-44(s0)
    80011002:	fbe1                	bnez	a5,80010fd2 <_ftoa+0x388>
        }
        if (len < PRINTF_FTOA_BUFFER_SIZE) {
    80011004:	fe843703          	ld	a4,-24(s0)
    80011008:	47fd                	li	a5,31
    8001100a:	06e7e263          	bltu	a5,a4,8001106e <_ftoa+0x424>
            // add decimal
            buf[len++] = '.';
    8001100e:	fe843783          	ld	a5,-24(s0)
    80011012:	00178713          	addi	a4,a5,1
    80011016:	fee43423          	sd	a4,-24(s0)
    8001101a:	ff040713          	addi	a4,s0,-16
    8001101e:	97ba                	add	a5,a5,a4
    80011020:	02e00713          	li	a4,46
    80011024:	fae78823          	sb	a4,-80(a5)
        }
    }

    // do whole part, number is reversed
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    80011028:	a099                	j	8001106e <_ftoa+0x424>
        buf[len++] = (char)(48 + (whole % 10));
    8001102a:	fe042703          	lw	a4,-32(s0)
    8001102e:	47a9                	li	a5,10
    80011030:	02f767bb          	remw	a5,a4,a5
    80011034:	2781                	sext.w	a5,a5
    80011036:	0ff7f713          	andi	a4,a5,255
    8001103a:	fe843783          	ld	a5,-24(s0)
    8001103e:	00178693          	addi	a3,a5,1
    80011042:	fed43423          	sd	a3,-24(s0)
    80011046:	0307071b          	addiw	a4,a4,48
    8001104a:	0ff77713          	andi	a4,a4,255
    8001104e:	ff040693          	addi	a3,s0,-16
    80011052:	97b6                	add	a5,a5,a3
    80011054:	fae78823          	sb	a4,-80(a5)
        if (!(whole /= 10)) {
    80011058:	fe042703          	lw	a4,-32(s0)
    8001105c:	47a9                	li	a5,10
    8001105e:	02f747bb          	divw	a5,a4,a5
    80011062:	fef42023          	sw	a5,-32(s0)
    80011066:	fe042783          	lw	a5,-32(s0)
    8001106a:	2781                	sext.w	a5,a5
    8001106c:	c799                	beqz	a5,8001107a <_ftoa+0x430>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    8001106e:	fe843703          	ld	a4,-24(s0)
    80011072:	47fd                	li	a5,31
    80011074:	fae7fbe3          	bgeu	a5,a4,8001102a <_ftoa+0x3e0>
    80011078:	a011                	j	8001107c <_ftoa+0x432>
            break;
    8001107a:	0001                	nop
        }
    }

    // pad leading zeros
    if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
    8001107c:	f6c42783          	lw	a5,-148(s0)
    80011080:	8b89                	andi	a5,a5,2
    80011082:	2781                	sext.w	a5,a5
    80011084:	e3b5                	bnez	a5,800110e8 <_ftoa+0x49e>
    80011086:	f6c42783          	lw	a5,-148(s0)
    8001108a:	8b85                	andi	a5,a5,1
    8001108c:	2781                	sext.w	a5,a5
    8001108e:	cfa9                	beqz	a5,800110e8 <_ftoa+0x49e>
        if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    80011090:	f7042783          	lw	a5,-144(s0)
    80011094:	2781                	sext.w	a5,a5
    80011096:	cf95                	beqz	a5,800110d2 <_ftoa+0x488>
    80011098:	fe744783          	lbu	a5,-25(s0)
    8001109c:	0ff7f793          	andi	a5,a5,255
    800110a0:	e791                	bnez	a5,800110ac <_ftoa+0x462>
    800110a2:	f6c42783          	lw	a5,-148(s0)
    800110a6:	8bb1                	andi	a5,a5,12
    800110a8:	2781                	sext.w	a5,a5
    800110aa:	c785                	beqz	a5,800110d2 <_ftoa+0x488>
            width--;
    800110ac:	f7042783          	lw	a5,-144(s0)
    800110b0:	37fd                	addiw	a5,a5,-1
    800110b2:	f6f42823          	sw	a5,-144(s0)
        }
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    800110b6:	a831                	j	800110d2 <_ftoa+0x488>
            buf[len++] = '0';
    800110b8:	fe843783          	ld	a5,-24(s0)
    800110bc:	00178713          	addi	a4,a5,1
    800110c0:	fee43423          	sd	a4,-24(s0)
    800110c4:	ff040713          	addi	a4,s0,-16
    800110c8:	97ba                	add	a5,a5,a4
    800110ca:	03000713          	li	a4,48
    800110ce:	fae78823          	sb	a4,-80(a5)
        while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    800110d2:	f7046783          	lwu	a5,-144(s0)
    800110d6:	fe843703          	ld	a4,-24(s0)
    800110da:	00f77763          	bgeu	a4,a5,800110e8 <_ftoa+0x49e>
    800110de:	fe843703          	ld	a4,-24(s0)
    800110e2:	47fd                	li	a5,31
    800110e4:	fce7fae3          	bgeu	a5,a4,800110b8 <_ftoa+0x46e>
        }
    }

    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    800110e8:	fe843703          	ld	a4,-24(s0)
    800110ec:	47fd                	li	a5,31
    800110ee:	06e7ea63          	bltu	a5,a4,80011162 <_ftoa+0x518>
        if (negative) {
    800110f2:	fe744783          	lbu	a5,-25(s0)
    800110f6:	0ff7f793          	andi	a5,a5,255
    800110fa:	cf99                	beqz	a5,80011118 <_ftoa+0x4ce>
            buf[len++] = '-';
    800110fc:	fe843783          	ld	a5,-24(s0)
    80011100:	00178713          	addi	a4,a5,1
    80011104:	fee43423          	sd	a4,-24(s0)
    80011108:	ff040713          	addi	a4,s0,-16
    8001110c:	97ba                	add	a5,a5,a4
    8001110e:	02d00713          	li	a4,45
    80011112:	fae78823          	sb	a4,-80(a5)
    80011116:	a0b1                	j	80011162 <_ftoa+0x518>
        }
        else if (flags & FLAGS_PLUS) {
    80011118:	f6c42783          	lw	a5,-148(s0)
    8001111c:	8b91                	andi	a5,a5,4
    8001111e:	2781                	sext.w	a5,a5
    80011120:	cf99                	beqz	a5,8001113e <_ftoa+0x4f4>
            buf[len++] = '+';  // ignore the space if the '+' exists
    80011122:	fe843783          	ld	a5,-24(s0)
    80011126:	00178713          	addi	a4,a5,1
    8001112a:	fee43423          	sd	a4,-24(s0)
    8001112e:	ff040713          	addi	a4,s0,-16
    80011132:	97ba                	add	a5,a5,a4
    80011134:	02b00713          	li	a4,43
    80011138:	fae78823          	sb	a4,-80(a5)
    8001113c:	a01d                	j	80011162 <_ftoa+0x518>
        }
        else if (flags & FLAGS_SPACE) {
    8001113e:	f6c42783          	lw	a5,-148(s0)
    80011142:	8ba1                	andi	a5,a5,8
    80011144:	2781                	sext.w	a5,a5
    80011146:	cf91                	beqz	a5,80011162 <_ftoa+0x518>
            buf[len++] = ' ';
    80011148:	fe843783          	ld	a5,-24(s0)
    8001114c:	00178713          	addi	a4,a5,1
    80011150:	fee43423          	sd	a4,-24(s0)
    80011154:	ff040713          	addi	a4,s0,-16
    80011158:	97ba                	add	a5,a5,a4
    8001115a:	02000713          	li	a4,32
    8001115e:	fae78823          	sb	a4,-80(a5)
        }
    }

    return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
    80011162:	f6c42683          	lw	a3,-148(s0)
    80011166:	f7042783          	lw	a5,-144(s0)
    8001116a:	fa040713          	addi	a4,s0,-96
    8001116e:	88b6                	mv	a7,a3
    80011170:	883e                	mv	a6,a5
    80011172:	fe843783          	ld	a5,-24(s0)
    80011176:	f8043683          	ld	a3,-128(s0)
    8001117a:	f8843603          	ld	a2,-120(s0)
    8001117e:	f9043583          	ld	a1,-112(s0)
    80011182:	f9843503          	ld	a0,-104(s0)
    80011186:	ce8ff0ef          	jal	ra,8001066e <_out_rev>
    8001118a:	87aa                	mv	a5,a0
}
    8001118c:	853e                	mv	a0,a5
    8001118e:	60ea                	ld	ra,152(sp)
    80011190:	644a                	ld	s0,144(sp)
    80011192:	610d                	addi	sp,sp,160
    80011194:	8082                	ret

0000000080011196 <_etoa>:
// internal ftoa variant for exponential floating-point type, contributed by
// Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char *buffer, size_t idx, size_t maxlen,
                    double value, unsigned int prec, unsigned int width,
                    unsigned int flags)
{
    80011196:	7135                	addi	sp,sp,-160
    80011198:	ed06                	sd	ra,152(sp)
    8001119a:	e922                	sd	s0,144(sp)
    8001119c:	1100                	addi	s0,sp,160
    8001119e:	faa43423          	sd	a0,-88(s0)
    800111a2:	fab43023          	sd	a1,-96(s0)
    800111a6:	f8c43c23          	sd	a2,-104(s0)
    800111aa:	f8d43823          	sd	a3,-112(s0)
    800111ae:	f8a43427          	fsd	fa0,-120(s0)
    800111b2:	863a                	mv	a2,a4
    800111b4:	86be                	mv	a3,a5
    800111b6:	8742                	mv	a4,a6
    800111b8:	87b2                	mv	a5,a2
    800111ba:	f8f42223          	sw	a5,-124(s0)
    800111be:	87b6                	mv	a5,a3
    800111c0:	f8f42023          	sw	a5,-128(s0)
    800111c4:	87ba                	mv	a5,a4
    800111c6:	f6f42e23          	sw	a5,-132(s0)
    // check for NaN and special values
    if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
    800111ca:	f8843707          	fld	fa4,-120(s0)
    800111ce:	f8843787          	fld	fa5,-120(s0)
    800111d2:	a2f727d3          	feq.d	a5,fa4,fa5
    800111d6:	c78d                	beqz	a5,80011200 <_etoa+0x6a>
    800111d8:	f8843707          	fld	fa4,-120(s0)
    800111dc:	00008797          	auipc	a5,0x8
    800111e0:	0ac78793          	addi	a5,a5,172 # 80019288 <pow10.0+0x58>
    800111e4:	239c                	fld	fa5,0(a5)
    800111e6:	a2e797d3          	flt.d	a5,fa5,fa4
    800111ea:	eb99                	bnez	a5,80011200 <_etoa+0x6a>
    800111ec:	f8843707          	fld	fa4,-120(s0)
    800111f0:	00008797          	auipc	a5,0x8
    800111f4:	09078793          	addi	a5,a5,144 # 80019280 <pow10.0+0x50>
    800111f8:	239c                	fld	fa5,0(a5)
    800111fa:	a2f717d3          	flt.d	a5,fa4,fa5
    800111fe:	c795                	beqz	a5,8001122a <_etoa+0x94>
        return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
    80011200:	f7c42683          	lw	a3,-132(s0)
    80011204:	f8042783          	lw	a5,-128(s0)
    80011208:	f8442703          	lw	a4,-124(s0)
    8001120c:	8836                	mv	a6,a3
    8001120e:	f8843507          	fld	fa0,-120(s0)
    80011212:	f9043683          	ld	a3,-112(s0)
    80011216:	f9843603          	ld	a2,-104(s0)
    8001121a:	fa043583          	ld	a1,-96(s0)
    8001121e:	fa843503          	ld	a0,-88(s0)
    80011222:	a29ff0ef          	jal	ra,80010c4a <_ftoa>
    80011226:	87aa                	mv	a5,a0
    80011228:	a11d                	j	8001164e <_etoa+0x4b8>
    }

    // determine the sign
    const bool negative = value < 0;
    8001122a:	f8843787          	fld	fa5,-120(s0)
    8001122e:	f2000753          	fmv.d.x	fa4,zero
    80011232:	a2e797d3          	flt.d	a5,fa5,fa4
    80011236:	00f037b3          	snez	a5,a5
    8001123a:	fef401a3          	sb	a5,-29(s0)
    if (negative) {
    8001123e:	fe344783          	lbu	a5,-29(s0)
    80011242:	0ff7f793          	andi	a5,a5,255
    80011246:	c799                	beqz	a5,80011254 <_etoa+0xbe>
        value = -value;
    80011248:	f8843787          	fld	fa5,-120(s0)
    8001124c:	22f797d3          	fneg.d	fa5,fa5
    80011250:	f8f43427          	fsd	fa5,-120(s0)
    }

    // default precision
    if (!(flags & FLAGS_PRECISION)) {
    80011254:	f7c42783          	lw	a5,-132(s0)
    80011258:	4007f793          	andi	a5,a5,1024
    8001125c:	2781                	sext.w	a5,a5
    8001125e:	e781                	bnez	a5,80011266 <_etoa+0xd0>
        prec = PRINTF_DEFAULT_FLOAT_PRECISION;
    80011260:	4799                	li	a5,6
    80011262:	f8f42223          	sw	a5,-124(s0)
    union {
        uint64_t U;
        double F;
    } conv;

    conv.F   = value;
    80011266:	f8843787          	fld	fa5,-120(s0)
    8001126a:	faf43c27          	fsd	fa5,-72(s0)
    int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;  // effectively log2
    8001126e:	fb843783          	ld	a5,-72(s0)
    80011272:	93d1                	srli	a5,a5,0x34
    80011274:	2781                	sext.w	a5,a5
    80011276:	7ff7f793          	andi	a5,a5,2047
    8001127a:	2781                	sext.w	a5,a5
    8001127c:	c017879b          	addiw	a5,a5,-1023
    80011280:	fcf42e23          	sw	a5,-36(s0)
    conv.U   = (conv.U & ((1ULL << 52U) - 1U)) |
    80011284:	fb843703          	ld	a4,-72(s0)
    80011288:	57fd                	li	a5,-1
    8001128a:	83b1                	srli	a5,a5,0xc
    8001128c:	8f7d                	and	a4,a4,a5
    8001128e:	3ff00793          	li	a5,1023
    80011292:	17d2                	slli	a5,a5,0x34
    80011294:	8fd9                	or	a5,a5,a4
    80011296:	faf43c23          	sd	a5,-72(s0)
             (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
    // now approximate log10 from the log2 integer part and an expansion of ln
    // around 1.5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    8001129a:	fdc42783          	lw	a5,-36(s0)
    8001129e:	d2078753          	fcvt.d.w	fa4,a5
    800112a2:	00008797          	auipc	a5,0x8
    800112a6:	00678793          	addi	a5,a5,6 # 800192a8 <pow10.0+0x78>
    800112aa:	239c                	fld	fa5,0(a5)
    800112ac:	12f77753          	fmul.d	fa4,fa4,fa5
    800112b0:	00008797          	auipc	a5,0x8
    800112b4:	00078793          	mv	a5,a5
    800112b8:	239c                	fld	fa5,0(a5)
    800112ba:	02f77753          	fadd.d	fa4,fa4,fa5
                       (conv.F - 1.5) * 0.289529654602168);
    800112be:	fb843687          	fld	fa3,-72(s0)
    800112c2:	00008797          	auipc	a5,0x8
    800112c6:	ff678793          	addi	a5,a5,-10 # 800192b8 <pow10.0+0x88>
    800112ca:	239c                	fld	fa5,0(a5)
    800112cc:	0af6f6d3          	fsub.d	fa3,fa3,fa5
    800112d0:	00008797          	auipc	a5,0x8
    800112d4:	ff078793          	addi	a5,a5,-16 # 800192c0 <pow10.0+0x90>
    800112d8:	239c                	fld	fa5,0(a5)
    800112da:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    int expval      = (int)(0.1760912590558 + exp2 * 0.301029995663981 +
    800112de:	02f777d3          	fadd.d	fa5,fa4,fa5
    800112e2:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    800112e6:	fef42623          	sw	a5,-20(s0)
    // now we want to compute 10^expval but we want to be sure it won't overflow
    exp2            = (int)(expval * 3.321928094887362 + 0.5);
    800112ea:	fec42783          	lw	a5,-20(s0)
    800112ee:	d2078753          	fcvt.d.w	fa4,a5
    800112f2:	00008797          	auipc	a5,0x8
    800112f6:	fd678793          	addi	a5,a5,-42 # 800192c8 <pow10.0+0x98>
    800112fa:	239c                	fld	fa5,0(a5)
    800112fc:	12f77753          	fmul.d	fa4,fa4,fa5
    80011300:	00008797          	auipc	a5,0x8
    80011304:	fa078793          	addi	a5,a5,-96 # 800192a0 <pow10.0+0x70>
    80011308:	239c                	fld	fa5,0(a5)
    8001130a:	02f777d3          	fadd.d	fa5,fa4,fa5
    8001130e:	c20797d3          	fcvt.w.d	a5,fa5,rtz
    80011312:	fcf42e23          	sw	a5,-36(s0)
    const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
    80011316:	fec42783          	lw	a5,-20(s0)
    8001131a:	d2078753          	fcvt.d.w	fa4,a5
    8001131e:	00008797          	auipc	a5,0x8
    80011322:	fb278793          	addi	a5,a5,-78 # 800192d0 <pow10.0+0xa0>
    80011326:	239c                	fld	fa5,0(a5)
    80011328:	12f77753          	fmul.d	fa4,fa4,fa5
    8001132c:	fdc42783          	lw	a5,-36(s0)
    80011330:	d20786d3          	fcvt.d.w	fa3,a5
    80011334:	00008797          	auipc	a5,0x8
    80011338:	fa478793          	addi	a5,a5,-92 # 800192d8 <pow10.0+0xa8>
    8001133c:	239c                	fld	fa5,0(a5)
    8001133e:	12f6f7d3          	fmul.d	fa5,fa3,fa5
    80011342:	0af777d3          	fsub.d	fa5,fa4,fa5
    80011346:	fcf43827          	fsd	fa5,-48(s0)
    const double z2 = z * z;
    8001134a:	fd043787          	fld	fa5,-48(s0)
    8001134e:	12f7f7d3          	fmul.d	fa5,fa5,fa5
    80011352:	fcf43427          	fsd	fa5,-56(s0)
    conv.U          = (uint64_t)(exp2 + 1023) << 52U;
    80011356:	fdc42783          	lw	a5,-36(s0)
    8001135a:	3ff7879b          	addiw	a5,a5,1023
    8001135e:	2781                	sext.w	a5,a5
    80011360:	17d2                	slli	a5,a5,0x34
    80011362:	faf43c23          	sd	a5,-72(s0)
    // compute exp(z) using continued fractions, see
    // https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
    conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
    80011366:	fb843707          	fld	fa4,-72(s0)
    8001136a:	fd043787          	fld	fa5,-48(s0)
    8001136e:	02f7f6d3          	fadd.d	fa3,fa5,fa5
    80011372:	00008797          	auipc	a5,0x8
    80011376:	f6e78793          	addi	a5,a5,-146 # 800192e0 <pow10.0+0xb0>
    8001137a:	2390                	fld	fa2,0(a5)
    8001137c:	fd043787          	fld	fa5,-48(s0)
    80011380:	0af67653          	fsub.d	fa2,fa2,fa5
    80011384:	fc843587          	fld	fa1,-56(s0)
    80011388:	00008797          	auipc	a5,0x8
    8001138c:	f6078793          	addi	a5,a5,-160 # 800192e8 <pow10.0+0xb8>
    80011390:	239c                	fld	fa5,0(a5)
    80011392:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    80011396:	00008797          	auipc	a5,0x8
    8001139a:	f5a78793          	addi	a5,a5,-166 # 800192f0 <pow10.0+0xc0>
    8001139e:	239c                	fld	fa5,0(a5)
    800113a0:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    800113a4:	fc843587          	fld	fa1,-56(s0)
    800113a8:	1af5f5d3          	fdiv.d	fa1,fa1,fa5
    800113ac:	00008797          	auipc	a5,0x8
    800113b0:	f4c78793          	addi	a5,a5,-180 # 800192f8 <pow10.0+0xc8>
    800113b4:	239c                	fld	fa5,0(a5)
    800113b6:	02f5f7d3          	fadd.d	fa5,fa1,fa5
    800113ba:	fc843587          	fld	fa1,-56(s0)
    800113be:	1af5f7d3          	fdiv.d	fa5,fa1,fa5
    800113c2:	02f677d3          	fadd.d	fa5,fa2,fa5
    800113c6:	1af6f6d3          	fdiv.d	fa3,fa3,fa5
    800113ca:	00008797          	auipc	a5,0x8
    800113ce:	f3678793          	addi	a5,a5,-202 # 80019300 <pow10.0+0xd0>
    800113d2:	239c                	fld	fa5,0(a5)
    800113d4:	02f6f7d3          	fadd.d	fa5,fa3,fa5
    800113d8:	12f777d3          	fmul.d	fa5,fa4,fa5
    800113dc:	faf43c27          	fsd	fa5,-72(s0)
    // correct for rounding errors
    if (value < conv.F) {
    800113e0:	fb843787          	fld	fa5,-72(s0)
    800113e4:	f8843707          	fld	fa4,-120(s0)
    800113e8:	a2f717d3          	flt.d	a5,fa4,fa5
    800113ec:	c38d                	beqz	a5,8001140e <_etoa+0x278>
        expval--;
    800113ee:	fec42783          	lw	a5,-20(s0)
    800113f2:	37fd                	addiw	a5,a5,-1
    800113f4:	fef42623          	sw	a5,-20(s0)
        conv.F /= 10;
    800113f8:	fb843707          	fld	fa4,-72(s0)
    800113fc:	00008797          	auipc	a5,0x8
    80011400:	ef478793          	addi	a5,a5,-268 # 800192f0 <pow10.0+0xc0>
    80011404:	239c                	fld	fa5,0(a5)
    80011406:	1af777d3          	fdiv.d	fa5,fa4,fa5
    8001140a:	faf43c27          	fsd	fa5,-72(s0)
    }

    // the exponent format is "%+03d" and largest value is "307", so set aside
    // 4-5 characters
    unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
    8001140e:	fec42783          	lw	a5,-20(s0)
    80011412:	0007871b          	sext.w	a4,a5
    80011416:	06300793          	li	a5,99
    8001141a:	00e7cc63          	blt	a5,a4,80011432 <_etoa+0x29c>
    8001141e:	fec42783          	lw	a5,-20(s0)
    80011422:	0007871b          	sext.w	a4,a5
    80011426:	f9d00793          	li	a5,-99
    8001142a:	00f74463          	blt	a4,a5,80011432 <_etoa+0x29c>
    8001142e:	4791                	li	a5,4
    80011430:	a011                	j	80011434 <_etoa+0x29e>
    80011432:	4795                	li	a5,5
    80011434:	fef42423          	sw	a5,-24(s0)

    // in "%g" mode, "prec" is the number of *significant figures* not decimals
    if (flags & FLAGS_ADAPT_EXP) {
    80011438:	f7c42703          	lw	a4,-132(s0)
    8001143c:	6785                	lui	a5,0x1
    8001143e:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    80011442:	8ff9                	and	a5,a5,a4
    80011444:	2781                	sext.w	a5,a5
    80011446:	c7c1                	beqz	a5,800114ce <_etoa+0x338>
        // do we want to fall-back to "%f" mode?
        if ((value >= 1e-4) && (value < 1e6)) {
    80011448:	f8843707          	fld	fa4,-120(s0)
    8001144c:	00008797          	auipc	a5,0x8
    80011450:	ebc78793          	addi	a5,a5,-324 # 80019308 <pow10.0+0xd8>
    80011454:	239c                	fld	fa5,0(a5)
    80011456:	a2e787d3          	fle.d	a5,fa5,fa4
    8001145a:	cbb9                	beqz	a5,800114b0 <_etoa+0x31a>
    8001145c:	f8843707          	fld	fa4,-120(s0)
    80011460:	00008797          	auipc	a5,0x8
    80011464:	eb078793          	addi	a5,a5,-336 # 80019310 <pow10.0+0xe0>
    80011468:	239c                	fld	fa5,0(a5)
    8001146a:	a2f717d3          	flt.d	a5,fa4,fa5
    8001146e:	c3a9                	beqz	a5,800114b0 <_etoa+0x31a>
            if ((int)prec > expval) {
    80011470:	f8442703          	lw	a4,-124(s0)
    80011474:	fec42783          	lw	a5,-20(s0)
    80011478:	2781                	sext.w	a5,a5
    8001147a:	00e7de63          	bge	a5,a4,80011496 <_etoa+0x300>
                prec = (unsigned)((int)prec - expval - 1);
    8001147e:	f8442703          	lw	a4,-124(s0)
    80011482:	fec42783          	lw	a5,-20(s0)
    80011486:	40f707bb          	subw	a5,a4,a5
    8001148a:	2781                	sext.w	a5,a5
    8001148c:	37fd                	addiw	a5,a5,-1
    8001148e:	2781                	sext.w	a5,a5
    80011490:	f8f42223          	sw	a5,-124(s0)
    80011494:	a019                	j	8001149a <_etoa+0x304>
            }
            else {
                prec = 0;
    80011496:	f8042223          	sw	zero,-124(s0)
            }
            flags |= FLAGS_PRECISION;  // make sure _ftoa respects precision
    8001149a:	f7c42783          	lw	a5,-132(s0)
    8001149e:	4007e793          	ori	a5,a5,1024
    800114a2:	f6f42e23          	sw	a5,-132(s0)
            // no characters in exponent
            minwidth = 0U;
    800114a6:	fe042423          	sw	zero,-24(s0)
            expval   = 0;
    800114aa:	fe042623          	sw	zero,-20(s0)
    800114ae:	a005                	j	800114ce <_etoa+0x338>
        }
        else {
            // we use one sigfig for the whole part
            if ((prec > 0) && (flags & FLAGS_PRECISION)) {
    800114b0:	f8442783          	lw	a5,-124(s0)
    800114b4:	2781                	sext.w	a5,a5
    800114b6:	cf81                	beqz	a5,800114ce <_etoa+0x338>
    800114b8:	f7c42783          	lw	a5,-132(s0)
    800114bc:	4007f793          	andi	a5,a5,1024
    800114c0:	2781                	sext.w	a5,a5
    800114c2:	c791                	beqz	a5,800114ce <_etoa+0x338>
                --prec;
    800114c4:	f8442783          	lw	a5,-124(s0)
    800114c8:	37fd                	addiw	a5,a5,-1
    800114ca:	f8f42223          	sw	a5,-124(s0)
            }
        }
    }

    // will everything fit?
    unsigned int fwidth = width;
    800114ce:	f8042783          	lw	a5,-128(s0)
    800114d2:	fef42223          	sw	a5,-28(s0)
    if (width > minwidth) {
    800114d6:	f8042703          	lw	a4,-128(s0)
    800114da:	fe842783          	lw	a5,-24(s0)
    800114de:	2701                	sext.w	a4,a4
    800114e0:	2781                	sext.w	a5,a5
    800114e2:	00e7fb63          	bgeu	a5,a4,800114f8 <_etoa+0x362>
        // we didn't fall-back so subtract the characters required for the
        // exponent
        fwidth -= minwidth;
    800114e6:	fe442703          	lw	a4,-28(s0)
    800114ea:	fe842783          	lw	a5,-24(s0)
    800114ee:	40f707bb          	subw	a5,a4,a5
    800114f2:	fef42223          	sw	a5,-28(s0)
    800114f6:	a019                	j	800114fc <_etoa+0x366>
    }
    else {
        // not enough characters, so go back to default sizing
        fwidth = 0U;
    800114f8:	fe042223          	sw	zero,-28(s0)
    }
    if ((flags & FLAGS_LEFT) && minwidth) {
    800114fc:	f7c42783          	lw	a5,-132(s0)
    80011500:	8b89                	andi	a5,a5,2
    80011502:	2781                	sext.w	a5,a5
    80011504:	c799                	beqz	a5,80011512 <_etoa+0x37c>
    80011506:	fe842783          	lw	a5,-24(s0)
    8001150a:	2781                	sext.w	a5,a5
    8001150c:	c399                	beqz	a5,80011512 <_etoa+0x37c>
        // if we're padding on the right, DON'T pad the floating part
        fwidth = 0U;
    8001150e:	fe042223          	sw	zero,-28(s0)
    }

    // rescale the float value
    if (expval) {
    80011512:	fec42783          	lw	a5,-20(s0)
    80011516:	2781                	sext.w	a5,a5
    80011518:	cb89                	beqz	a5,8001152a <_etoa+0x394>
        value /= conv.F;
    8001151a:	fb843787          	fld	fa5,-72(s0)
    8001151e:	f8843707          	fld	fa4,-120(s0)
    80011522:	1af777d3          	fdiv.d	fa5,fa4,fa5
    80011526:	f8f43427          	fsd	fa5,-120(s0)
    }

    // output the floating part
    const size_t start_idx = idx;
    8001152a:	f9843783          	ld	a5,-104(s0)
    8001152e:	fcf43023          	sd	a5,-64(s0)
    idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec,
    80011532:	fe344783          	lbu	a5,-29(s0)
    80011536:	0ff7f793          	andi	a5,a5,255
    8001153a:	c791                	beqz	a5,80011546 <_etoa+0x3b0>
    8001153c:	f8843787          	fld	fa5,-120(s0)
    80011540:	22f797d3          	fneg.d	fa5,fa5
    80011544:	a019                	j	8001154a <_etoa+0x3b4>
    80011546:	f8843787          	fld	fa5,-120(s0)
    8001154a:	f7c42703          	lw	a4,-132(s0)
    8001154e:	77fd                	lui	a5,0xfffff
    80011550:	7ff78793          	addi	a5,a5,2047 # fffffffffffff7ff <_heap_end+0xffffffff77fef7ff>
    80011554:	8ff9                	and	a5,a5,a4
    80011556:	0007869b          	sext.w	a3,a5
    8001155a:	fe442783          	lw	a5,-28(s0)
    8001155e:	f8442703          	lw	a4,-124(s0)
    80011562:	8836                	mv	a6,a3
    80011564:	22f78553          	fmv.d	fa0,fa5
    80011568:	f9043683          	ld	a3,-112(s0)
    8001156c:	f9843603          	ld	a2,-104(s0)
    80011570:	fa043583          	ld	a1,-96(s0)
    80011574:	fa843503          	ld	a0,-88(s0)
    80011578:	ed2ff0ef          	jal	ra,80010c4a <_ftoa>
    8001157c:	f8a43c23          	sd	a0,-104(s0)
                fwidth, flags & ~FLAGS_ADAPT_EXP);

    // output the exponent part
    if (minwidth) {
    80011580:	fe842783          	lw	a5,-24(s0)
    80011584:	2781                	sext.w	a5,a5
    80011586:	c3f1                	beqz	a5,8001164a <_etoa+0x4b4>
        // output the exponential symbol
        out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    80011588:	f7c42783          	lw	a5,-132(s0)
    8001158c:	0207f793          	andi	a5,a5,32
    80011590:	2781                	sext.w	a5,a5
    80011592:	c781                	beqz	a5,8001159a <_etoa+0x404>
    80011594:	04500793          	li	a5,69
    80011598:	a019                	j	8001159e <_etoa+0x408>
    8001159a:	06500793          	li	a5,101
    8001159e:	f9843703          	ld	a4,-104(s0)
    800115a2:	00170693          	addi	a3,a4,1
    800115a6:	f8d43c23          	sd	a3,-104(s0)
    800115aa:	fa843803          	ld	a6,-88(s0)
    800115ae:	f9043683          	ld	a3,-112(s0)
    800115b2:	863a                	mv	a2,a4
    800115b4:	fa043583          	ld	a1,-96(s0)
    800115b8:	853e                	mv	a0,a5
    800115ba:	9802                	jalr	a6
        // output the exponent value
        idx = _ntoa_long(out, buffer, idx, maxlen,
                         (expval < 0) ? -expval : expval, expval < 0, 10, 0,
    800115bc:	fec42783          	lw	a5,-20(s0)
    800115c0:	41f7d79b          	sraiw	a5,a5,0x1f
    800115c4:	fec42703          	lw	a4,-20(s0)
    800115c8:	8f3d                	xor	a4,a4,a5
    800115ca:	40f707bb          	subw	a5,a4,a5
    800115ce:	2781                	sext.w	a5,a5
        idx = _ntoa_long(out, buffer, idx, maxlen,
    800115d0:	863e                	mv	a2,a5
    800115d2:	fec42783          	lw	a5,-20(s0)
    800115d6:	01f7d79b          	srliw	a5,a5,0x1f
    800115da:	0ff7f693          	andi	a3,a5,255
    800115de:	fe842783          	lw	a5,-24(s0)
    800115e2:	37fd                	addiw	a5,a5,-1
    800115e4:	2781                	sext.w	a5,a5
    800115e6:	4715                	li	a4,5
    800115e8:	e43a                	sd	a4,8(sp)
    800115ea:	e03e                	sd	a5,0(sp)
    800115ec:	4881                	li	a7,0
    800115ee:	4829                	li	a6,10
    800115f0:	87b6                	mv	a5,a3
    800115f2:	8732                	mv	a4,a2
    800115f4:	f9043683          	ld	a3,-112(s0)
    800115f8:	f9843603          	ld	a2,-104(s0)
    800115fc:	fa043583          	ld	a1,-96(s0)
    80011600:	fa843503          	ld	a0,-88(s0)
    80011604:	c16ff0ef          	jal	ra,80010a1a <_ntoa_long>
    80011608:	f8a43c23          	sd	a0,-104(s0)
                         minwidth - 1, FLAGS_ZEROPAD | FLAGS_PLUS);
        // might need to right-pad spaces
        if (flags & FLAGS_LEFT) {
    8001160c:	f7c42783          	lw	a5,-132(s0)
    80011610:	8b89                	andi	a5,a5,2
    80011612:	2781                	sext.w	a5,a5
    80011614:	cb9d                	beqz	a5,8001164a <_etoa+0x4b4>
            while (idx - start_idx < width)
    80011616:	a00d                	j	80011638 <_etoa+0x4a2>
                out(' ', buffer, idx++, maxlen);
    80011618:	f9843783          	ld	a5,-104(s0)
    8001161c:	00178713          	addi	a4,a5,1
    80011620:	f8e43c23          	sd	a4,-104(s0)
    80011624:	fa843703          	ld	a4,-88(s0)
    80011628:	f9043683          	ld	a3,-112(s0)
    8001162c:	863e                	mv	a2,a5
    8001162e:	fa043583          	ld	a1,-96(s0)
    80011632:	02000513          	li	a0,32
    80011636:	9702                	jalr	a4
            while (idx - start_idx < width)
    80011638:	f9843703          	ld	a4,-104(s0)
    8001163c:	fc043783          	ld	a5,-64(s0)
    80011640:	8f1d                	sub	a4,a4,a5
    80011642:	f8046783          	lwu	a5,-128(s0)
    80011646:	fcf769e3          	bltu	a4,a5,80011618 <_etoa+0x482>
        }
    }
    return idx;
    8001164a:	f9843783          	ld	a5,-104(s0)
}
    8001164e:	853e                	mv	a0,a5
    80011650:	60ea                	ld	ra,152(sp)
    80011652:	644a                	ld	s0,144(sp)
    80011654:	610d                	addi	sp,sp,160
    80011656:	8082                	ret

0000000080011658 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT

// internal vsnprintf
static int _vsnprintf(out_fct_type out, char *buffer, const size_t maxlen,
                      const char *format, va_list va)
{
    80011658:	7135                	addi	sp,sp,-160
    8001165a:	ed06                	sd	ra,152(sp)
    8001165c:	e922                	sd	s0,144(sp)
    8001165e:	1100                	addi	s0,sp,160
    80011660:	f8a43c23          	sd	a0,-104(s0)
    80011664:	f8b43823          	sd	a1,-112(s0)
    80011668:	f8c43423          	sd	a2,-120(s0)
    8001166c:	f8d43023          	sd	a3,-128(s0)
    80011670:	f6e43c23          	sd	a4,-136(s0)
    unsigned int flags, width, precision, n;
    size_t idx = 0U;
    80011674:	fc043c23          	sd	zero,-40(s0)

    if (!buffer) {
    80011678:	f9043783          	ld	a5,-112(s0)
    8001167c:	380792e3          	bnez	a5,80012200 <_vsnprintf+0xba8>
        // use null output function
        out = _out_null;
    80011680:	fffff797          	auipc	a5,0xfffff
    80011684:	e5878793          	addi	a5,a5,-424 # 800104d8 <_out_null>
    80011688:	f8f43c23          	sd	a5,-104(s0)
    }

    while (*format) {
    8001168c:	3750006f          	j	80012200 <_vsnprintf+0xba8>
        // format specifier?  %[flags][width][.precision][length]
        if (*format != '%') {
    80011690:	f8043783          	ld	a5,-128(s0)
    80011694:	0007c783          	lbu	a5,0(a5)
    80011698:	873e                	mv	a4,a5
    8001169a:	02500793          	li	a5,37
    8001169e:	02f70b63          	beq	a4,a5,800116d4 <_vsnprintf+0x7c>
            // no
            out(*format, buffer, idx++, maxlen);
    800116a2:	f8043783          	ld	a5,-128(s0)
    800116a6:	0007c503          	lbu	a0,0(a5)
    800116aa:	fd843783          	ld	a5,-40(s0)
    800116ae:	00178713          	addi	a4,a5,1
    800116b2:	fce43c23          	sd	a4,-40(s0)
    800116b6:	f9843703          	ld	a4,-104(s0)
    800116ba:	f8843683          	ld	a3,-120(s0)
    800116be:	863e                	mv	a2,a5
    800116c0:	f9043583          	ld	a1,-112(s0)
    800116c4:	9702                	jalr	a4
            format++;
    800116c6:	f8043783          	ld	a5,-128(s0)
    800116ca:	0785                	addi	a5,a5,1
    800116cc:	f8f43023          	sd	a5,-128(s0)
            continue;
    800116d0:	3310006f          	j	80012200 <_vsnprintf+0xba8>
        }
        else {
            // yes, evaluate it
            format++;
    800116d4:	f8043783          	ld	a5,-128(s0)
    800116d8:	0785                	addi	a5,a5,1
    800116da:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate flags
        flags = 0U;
    800116de:	fe042623          	sw	zero,-20(s0)
        do {
            switch (*format) {
    800116e2:	f8043783          	ld	a5,-128(s0)
    800116e6:	0007c783          	lbu	a5,0(a5)
    800116ea:	2781                	sext.w	a5,a5
    800116ec:	fe07869b          	addiw	a3,a5,-32
    800116f0:	0006871b          	sext.w	a4,a3
    800116f4:	47c1                	li	a5,16
    800116f6:	0ce7e063          	bltu	a5,a4,800117b6 <_vsnprintf+0x15e>
    800116fa:	02069793          	slli	a5,a3,0x20
    800116fe:	9381                	srli	a5,a5,0x20
    80011700:	00279713          	slli	a4,a5,0x2
    80011704:	00008797          	auipc	a5,0x8
    80011708:	94878793          	addi	a5,a5,-1720 # 8001904c <SYSCALLS+0x4c>
    8001170c:	97ba                	add	a5,a5,a4
    8001170e:	439c                	lw	a5,0(a5)
    80011710:	0007871b          	sext.w	a4,a5
    80011714:	00008797          	auipc	a5,0x8
    80011718:	93878793          	addi	a5,a5,-1736 # 8001904c <SYSCALLS+0x4c>
    8001171c:	97ba                	add	a5,a5,a4
    8001171e:	8782                	jr	a5
                case '0':
                    flags |= FLAGS_ZEROPAD;
    80011720:	fec42783          	lw	a5,-20(s0)
    80011724:	0017e793          	ori	a5,a5,1
    80011728:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001172c:	f8043783          	ld	a5,-128(s0)
    80011730:	0785                	addi	a5,a5,1
    80011732:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011736:	4785                	li	a5,1
    80011738:	fef42023          	sw	a5,-32(s0)
                    break;
    8001173c:	a041                	j	800117bc <_vsnprintf+0x164>
                case '-':
                    flags |= FLAGS_LEFT;
    8001173e:	fec42783          	lw	a5,-20(s0)
    80011742:	0027e793          	ori	a5,a5,2
    80011746:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001174a:	f8043783          	ld	a5,-128(s0)
    8001174e:	0785                	addi	a5,a5,1
    80011750:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011754:	4785                	li	a5,1
    80011756:	fef42023          	sw	a5,-32(s0)
                    break;
    8001175a:	a08d                	j	800117bc <_vsnprintf+0x164>
                case '+':
                    flags |= FLAGS_PLUS;
    8001175c:	fec42783          	lw	a5,-20(s0)
    80011760:	0047e793          	ori	a5,a5,4
    80011764:	fef42623          	sw	a5,-20(s0)
                    format++;
    80011768:	f8043783          	ld	a5,-128(s0)
    8001176c:	0785                	addi	a5,a5,1
    8001176e:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011772:	4785                	li	a5,1
    80011774:	fef42023          	sw	a5,-32(s0)
                    break;
    80011778:	a091                	j	800117bc <_vsnprintf+0x164>
                case ' ':
                    flags |= FLAGS_SPACE;
    8001177a:	fec42783          	lw	a5,-20(s0)
    8001177e:	0087e793          	ori	a5,a5,8
    80011782:	fef42623          	sw	a5,-20(s0)
                    format++;
    80011786:	f8043783          	ld	a5,-128(s0)
    8001178a:	0785                	addi	a5,a5,1
    8001178c:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    80011790:	4785                	li	a5,1
    80011792:	fef42023          	sw	a5,-32(s0)
                    break;
    80011796:	a01d                	j	800117bc <_vsnprintf+0x164>
                case '#':
                    flags |= FLAGS_HASH;
    80011798:	fec42783          	lw	a5,-20(s0)
    8001179c:	0107e793          	ori	a5,a5,16
    800117a0:	fef42623          	sw	a5,-20(s0)
                    format++;
    800117a4:	f8043783          	ld	a5,-128(s0)
    800117a8:	0785                	addi	a5,a5,1
    800117aa:	f8f43023          	sd	a5,-128(s0)
                    n = 1U;
    800117ae:	4785                	li	a5,1
    800117b0:	fef42023          	sw	a5,-32(s0)
                    break;
    800117b4:	a021                	j	800117bc <_vsnprintf+0x164>
                default:
                    n = 0U;
    800117b6:	fe042023          	sw	zero,-32(s0)
                    break;
    800117ba:	0001                	nop
            }
        } while (n);
    800117bc:	fe042783          	lw	a5,-32(s0)
    800117c0:	2781                	sext.w	a5,a5
    800117c2:	f385                	bnez	a5,800116e2 <_vsnprintf+0x8a>

        // evaluate width field
        width = 0U;
    800117c4:	fe042423          	sw	zero,-24(s0)
        if (_is_digit(*format)) {
    800117c8:	f8043783          	ld	a5,-128(s0)
    800117cc:	0007c783          	lbu	a5,0(a5)
    800117d0:	853e                	mv	a0,a5
    800117d2:	df3fe0ef          	jal	ra,800105c4 <_is_digit>
    800117d6:	87aa                	mv	a5,a0
    800117d8:	cb91                	beqz	a5,800117ec <_vsnprintf+0x194>
            width = _atoi(&format);
    800117da:	f8040793          	addi	a5,s0,-128
    800117de:	853e                	mv	a0,a5
    800117e0:	e25fe0ef          	jal	ra,80010604 <_atoi>
    800117e4:	87aa                	mv	a5,a0
    800117e6:	fef42423          	sw	a5,-24(s0)
    800117ea:	a8b9                	j	80011848 <_vsnprintf+0x1f0>
        }
        else if (*format == '*') {
    800117ec:	f8043783          	ld	a5,-128(s0)
    800117f0:	0007c783          	lbu	a5,0(a5)
    800117f4:	873e                	mv	a4,a5
    800117f6:	02a00793          	li	a5,42
    800117fa:	04f71763          	bne	a4,a5,80011848 <_vsnprintf+0x1f0>
            const int w = va_arg(va, int);
    800117fe:	f7843783          	ld	a5,-136(s0)
    80011802:	00878713          	addi	a4,a5,8
    80011806:	f6e43c23          	sd	a4,-136(s0)
    8001180a:	439c                	lw	a5,0(a5)
    8001180c:	fcf42023          	sw	a5,-64(s0)
            if (w < 0) {
    80011810:	fc042783          	lw	a5,-64(s0)
    80011814:	2781                	sext.w	a5,a5
    80011816:	0207d063          	bgez	a5,80011836 <_vsnprintf+0x1de>
                flags |= FLAGS_LEFT;  // reverse padding
    8001181a:	fec42783          	lw	a5,-20(s0)
    8001181e:	0027e793          	ori	a5,a5,2
    80011822:	fef42623          	sw	a5,-20(s0)
                width = (unsigned int)-w;
    80011826:	fc042783          	lw	a5,-64(s0)
    8001182a:	40f007bb          	negw	a5,a5
    8001182e:	2781                	sext.w	a5,a5
    80011830:	fef42423          	sw	a5,-24(s0)
    80011834:	a029                	j	8001183e <_vsnprintf+0x1e6>
            }
            else {
                width = (unsigned int)w;
    80011836:	fc042783          	lw	a5,-64(s0)
    8001183a:	fef42423          	sw	a5,-24(s0)
            }
            format++;
    8001183e:	f8043783          	ld	a5,-128(s0)
    80011842:	0785                	addi	a5,a5,1
    80011844:	f8f43023          	sd	a5,-128(s0)
        }

        // evaluate precision field
        precision = 0U;
    80011848:	fe042223          	sw	zero,-28(s0)
        if (*format == '.') {
    8001184c:	f8043783          	ld	a5,-128(s0)
    80011850:	0007c783          	lbu	a5,0(a5)
    80011854:	873e                	mv	a4,a5
    80011856:	02e00793          	li	a5,46
    8001185a:	08f71063          	bne	a4,a5,800118da <_vsnprintf+0x282>
            flags |= FLAGS_PRECISION;
    8001185e:	fec42783          	lw	a5,-20(s0)
    80011862:	4007e793          	ori	a5,a5,1024
    80011866:	fef42623          	sw	a5,-20(s0)
            format++;
    8001186a:	f8043783          	ld	a5,-128(s0)
    8001186e:	0785                	addi	a5,a5,1
    80011870:	f8f43023          	sd	a5,-128(s0)
            if (_is_digit(*format)) {
    80011874:	f8043783          	ld	a5,-128(s0)
    80011878:	0007c783          	lbu	a5,0(a5)
    8001187c:	853e                	mv	a0,a5
    8001187e:	d47fe0ef          	jal	ra,800105c4 <_is_digit>
    80011882:	87aa                	mv	a5,a0
    80011884:	cb91                	beqz	a5,80011898 <_vsnprintf+0x240>
                precision = _atoi(&format);
    80011886:	f8040793          	addi	a5,s0,-128
    8001188a:	853e                	mv	a0,a5
    8001188c:	d79fe0ef          	jal	ra,80010604 <_atoi>
    80011890:	87aa                	mv	a5,a0
    80011892:	fef42223          	sw	a5,-28(s0)
    80011896:	a091                	j	800118da <_vsnprintf+0x282>
            }
            else if (*format == '*') {
    80011898:	f8043783          	ld	a5,-128(s0)
    8001189c:	0007c783          	lbu	a5,0(a5)
    800118a0:	873e                	mv	a4,a5
    800118a2:	02a00793          	li	a5,42
    800118a6:	02f71a63          	bne	a4,a5,800118da <_vsnprintf+0x282>
                const int prec = (int)va_arg(va, int);
    800118aa:	f7843783          	ld	a5,-136(s0)
    800118ae:	00878713          	addi	a4,a5,8
    800118b2:	f6e43c23          	sd	a4,-136(s0)
    800118b6:	439c                	lw	a5,0(a5)
    800118b8:	faf42e23          	sw	a5,-68(s0)
                precision      = prec > 0 ? (unsigned int)prec : 0U;
    800118bc:	fbc42783          	lw	a5,-68(s0)
    800118c0:	0007871b          	sext.w	a4,a5
    800118c4:	00075363          	bgez	a4,800118ca <_vsnprintf+0x272>
    800118c8:	4781                	li	a5,0
    800118ca:	2781                	sext.w	a5,a5
    800118cc:	fef42223          	sw	a5,-28(s0)
                format++;
    800118d0:	f8043783          	ld	a5,-128(s0)
    800118d4:	0785                	addi	a5,a5,1
    800118d6:	f8f43023          	sd	a5,-128(s0)
            }
        }

        // evaluate length field
        switch (*format) {
    800118da:	f8043783          	ld	a5,-128(s0)
    800118de:	0007c783          	lbu	a5,0(a5)
    800118e2:	2781                	sext.w	a5,a5
    800118e4:	f987869b          	addiw	a3,a5,-104
    800118e8:	0006871b          	sext.w	a4,a3
    800118ec:	47c9                	li	a5,18
    800118ee:	0ee7e963          	bltu	a5,a4,800119e0 <_vsnprintf+0x388>
    800118f2:	02069793          	slli	a5,a3,0x20
    800118f6:	9381                	srli	a5,a5,0x20
    800118f8:	00279713          	slli	a4,a5,0x2
    800118fc:	00007797          	auipc	a5,0x7
    80011900:	79478793          	addi	a5,a5,1940 # 80019090 <SYSCALLS+0x90>
    80011904:	97ba                	add	a5,a5,a4
    80011906:	439c                	lw	a5,0(a5)
    80011908:	0007871b          	sext.w	a4,a5
    8001190c:	00007797          	auipc	a5,0x7
    80011910:	78478793          	addi	a5,a5,1924 # 80019090 <SYSCALLS+0x90>
    80011914:	97ba                	add	a5,a5,a4
    80011916:	8782                	jr	a5
            case 'l':
                flags |= FLAGS_LONG;
    80011918:	fec42783          	lw	a5,-20(s0)
    8001191c:	1007e793          	ori	a5,a5,256
    80011920:	fef42623          	sw	a5,-20(s0)
                format++;
    80011924:	f8043783          	ld	a5,-128(s0)
    80011928:	0785                	addi	a5,a5,1
    8001192a:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'l') {
    8001192e:	f8043783          	ld	a5,-128(s0)
    80011932:	0007c783          	lbu	a5,0(a5)
    80011936:	873e                	mv	a4,a5
    80011938:	06c00793          	li	a5,108
    8001193c:	0af71463          	bne	a4,a5,800119e4 <_vsnprintf+0x38c>
                    flags |= FLAGS_LONG_LONG;
    80011940:	fec42783          	lw	a5,-20(s0)
    80011944:	2007e793          	ori	a5,a5,512
    80011948:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001194c:	f8043783          	ld	a5,-128(s0)
    80011950:	0785                	addi	a5,a5,1
    80011952:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    80011956:	a079                	j	800119e4 <_vsnprintf+0x38c>
            case 'h':
                flags |= FLAGS_SHORT;
    80011958:	fec42783          	lw	a5,-20(s0)
    8001195c:	0807e793          	ori	a5,a5,128
    80011960:	fef42623          	sw	a5,-20(s0)
                format++;
    80011964:	f8043783          	ld	a5,-128(s0)
    80011968:	0785                	addi	a5,a5,1
    8001196a:	f8f43023          	sd	a5,-128(s0)
                if (*format == 'h') {
    8001196e:	f8043783          	ld	a5,-128(s0)
    80011972:	0007c783          	lbu	a5,0(a5)
    80011976:	873e                	mv	a4,a5
    80011978:	06800793          	li	a5,104
    8001197c:	06f71663          	bne	a4,a5,800119e8 <_vsnprintf+0x390>
                    flags |= FLAGS_CHAR;
    80011980:	fec42783          	lw	a5,-20(s0)
    80011984:	0407e793          	ori	a5,a5,64
    80011988:	fef42623          	sw	a5,-20(s0)
                    format++;
    8001198c:	f8043783          	ld	a5,-128(s0)
    80011990:	0785                	addi	a5,a5,1
    80011992:	f8f43023          	sd	a5,-128(s0)
                }
                break;
    80011996:	a889                	j	800119e8 <_vsnprintf+0x390>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
            case 't':
                flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG
    80011998:	fec42783          	lw	a5,-20(s0)
    8001199c:	1007e793          	ori	a5,a5,256
    800119a0:	fef42623          	sw	a5,-20(s0)
                                                            : FLAGS_LONG_LONG);
                format++;
    800119a4:	f8043783          	ld	a5,-128(s0)
    800119a8:	0785                	addi	a5,a5,1
    800119aa:	f8f43023          	sd	a5,-128(s0)
                break;
    800119ae:	a835                	j	800119ea <_vsnprintf+0x392>
#endif
            case 'j':
                flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG
    800119b0:	fec42783          	lw	a5,-20(s0)
    800119b4:	1007e793          	ori	a5,a5,256
    800119b8:	fef42623          	sw	a5,-20(s0)
                                                           : FLAGS_LONG_LONG);
                format++;
    800119bc:	f8043783          	ld	a5,-128(s0)
    800119c0:	0785                	addi	a5,a5,1
    800119c2:	f8f43023          	sd	a5,-128(s0)
                break;
    800119c6:	a015                	j	800119ea <_vsnprintf+0x392>
            case 'z':
                flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG
    800119c8:	fec42783          	lw	a5,-20(s0)
    800119cc:	1007e793          	ori	a5,a5,256
    800119d0:	fef42623          	sw	a5,-20(s0)
                                                         : FLAGS_LONG_LONG);
                format++;
    800119d4:	f8043783          	ld	a5,-128(s0)
    800119d8:	0785                	addi	a5,a5,1
    800119da:	f8f43023          	sd	a5,-128(s0)
                break;
    800119de:	a031                	j	800119ea <_vsnprintf+0x392>
            default:
                break;
    800119e0:	0001                	nop
    800119e2:	a021                	j	800119ea <_vsnprintf+0x392>
                break;
    800119e4:	0001                	nop
    800119e6:	a011                	j	800119ea <_vsnprintf+0x392>
                break;
    800119e8:	0001                	nop
        }

        // evaluate specifier
        switch (*format) {
    800119ea:	f8043783          	ld	a5,-128(s0)
    800119ee:	0007c783          	lbu	a5,0(a5)
    800119f2:	2781                	sext.w	a5,a5
    800119f4:	fdb7869b          	addiw	a3,a5,-37
    800119f8:	0006871b          	sext.w	a4,a3
    800119fc:	05300793          	li	a5,83
    80011a00:	7ce7e863          	bltu	a5,a4,800121d0 <_vsnprintf+0xb78>
    80011a04:	02069793          	slli	a5,a3,0x20
    80011a08:	9381                	srli	a5,a5,0x20
    80011a0a:	00279713          	slli	a4,a5,0x2
    80011a0e:	00007797          	auipc	a5,0x7
    80011a12:	6ce78793          	addi	a5,a5,1742 # 800190dc <SYSCALLS+0xdc>
    80011a16:	97ba                	add	a5,a5,a4
    80011a18:	439c                	lw	a5,0(a5)
    80011a1a:	0007871b          	sext.w	a4,a5
    80011a1e:	00007797          	auipc	a5,0x7
    80011a22:	6be78793          	addi	a5,a5,1726 # 800190dc <SYSCALLS+0xdc>
    80011a26:	97ba                	add	a5,a5,a4
    80011a28:	8782                	jr	a5
            case 'X':
            case 'o':
            case 'b': {
                // set the base
                unsigned int base;
                if (*format == 'x' || *format == 'X') {
    80011a2a:	f8043783          	ld	a5,-128(s0)
    80011a2e:	0007c783          	lbu	a5,0(a5)
    80011a32:	873e                	mv	a4,a5
    80011a34:	07800793          	li	a5,120
    80011a38:	00f70b63          	beq	a4,a5,80011a4e <_vsnprintf+0x3f6>
    80011a3c:	f8043783          	ld	a5,-128(s0)
    80011a40:	0007c783          	lbu	a5,0(a5)
    80011a44:	873e                	mv	a4,a5
    80011a46:	05800793          	li	a5,88
    80011a4a:	00f71663          	bne	a4,a5,80011a56 <_vsnprintf+0x3fe>
                    base = 16U;
    80011a4e:	47c1                	li	a5,16
    80011a50:	fcf42a23          	sw	a5,-44(s0)
    80011a54:	a099                	j	80011a9a <_vsnprintf+0x442>
                }
                else if (*format == 'o') {
    80011a56:	f8043783          	ld	a5,-128(s0)
    80011a5a:	0007c783          	lbu	a5,0(a5)
    80011a5e:	873e                	mv	a4,a5
    80011a60:	06f00793          	li	a5,111
    80011a64:	00f71663          	bne	a4,a5,80011a70 <_vsnprintf+0x418>
                    base = 8U;
    80011a68:	47a1                	li	a5,8
    80011a6a:	fcf42a23          	sw	a5,-44(s0)
    80011a6e:	a035                	j	80011a9a <_vsnprintf+0x442>
                }
                else if (*format == 'b') {
    80011a70:	f8043783          	ld	a5,-128(s0)
    80011a74:	0007c783          	lbu	a5,0(a5)
    80011a78:	873e                	mv	a4,a5
    80011a7a:	06200793          	li	a5,98
    80011a7e:	00f71663          	bne	a4,a5,80011a8a <_vsnprintf+0x432>
                    base = 2U;
    80011a82:	4789                	li	a5,2
    80011a84:	fcf42a23          	sw	a5,-44(s0)
    80011a88:	a809                	j	80011a9a <_vsnprintf+0x442>
                }
                else {
                    base = 10U;
    80011a8a:	47a9                	li	a5,10
    80011a8c:	fcf42a23          	sw	a5,-44(s0)
                    flags &= ~FLAGS_HASH;  // no hash for dec format
    80011a90:	fec42783          	lw	a5,-20(s0)
    80011a94:	9bbd                	andi	a5,a5,-17
    80011a96:	fef42623          	sw	a5,-20(s0)
                }
                // uppercase
                if (*format == 'X') {
    80011a9a:	f8043783          	ld	a5,-128(s0)
    80011a9e:	0007c783          	lbu	a5,0(a5)
    80011aa2:	873e                	mv	a4,a5
    80011aa4:	05800793          	li	a5,88
    80011aa8:	00f71863          	bne	a4,a5,80011ab8 <_vsnprintf+0x460>
                    flags |= FLAGS_UPPERCASE;
    80011aac:	fec42783          	lw	a5,-20(s0)
    80011ab0:	0207e793          	ori	a5,a5,32
    80011ab4:	fef42623          	sw	a5,-20(s0)
                }

                // no plus or space flag for u, x, X, o, b
                if ((*format != 'i') && (*format != 'd')) {
    80011ab8:	f8043783          	ld	a5,-128(s0)
    80011abc:	0007c783          	lbu	a5,0(a5)
    80011ac0:	873e                	mv	a4,a5
    80011ac2:	06900793          	li	a5,105
    80011ac6:	02f70063          	beq	a4,a5,80011ae6 <_vsnprintf+0x48e>
    80011aca:	f8043783          	ld	a5,-128(s0)
    80011ace:	0007c783          	lbu	a5,0(a5)
    80011ad2:	873e                	mv	a4,a5
    80011ad4:	06400793          	li	a5,100
    80011ad8:	00f70763          	beq	a4,a5,80011ae6 <_vsnprintf+0x48e>
                    flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    80011adc:	fec42783          	lw	a5,-20(s0)
    80011ae0:	9bcd                	andi	a5,a5,-13
    80011ae2:	fef42623          	sw	a5,-20(s0)
                }

                // ignore '0' flag when precision is given
                if (flags & FLAGS_PRECISION) {
    80011ae6:	fec42783          	lw	a5,-20(s0)
    80011aea:	4007f793          	andi	a5,a5,1024
    80011aee:	2781                	sext.w	a5,a5
    80011af0:	c791                	beqz	a5,80011afc <_vsnprintf+0x4a4>
                    flags &= ~FLAGS_ZEROPAD;
    80011af2:	fec42783          	lw	a5,-20(s0)
    80011af6:	9bf9                	andi	a5,a5,-2
    80011af8:	fef42623          	sw	a5,-20(s0)
                }

                // convert the integer
                if ((*format == 'i') || (*format == 'd')) {
    80011afc:	f8043783          	ld	a5,-128(s0)
    80011b00:	0007c783          	lbu	a5,0(a5)
    80011b04:	873e                	mv	a4,a5
    80011b06:	06900793          	li	a5,105
    80011b0a:	00f70b63          	beq	a4,a5,80011b20 <_vsnprintf+0x4c8>
    80011b0e:	f8043783          	ld	a5,-128(s0)
    80011b12:	0007c783          	lbu	a5,0(a5)
    80011b16:	873e                	mv	a4,a5
    80011b18:	06400793          	li	a5,100
    80011b1c:	18f71d63          	bne	a4,a5,80011cb6 <_vsnprintf+0x65e>
                    // signed
                    if (flags & FLAGS_LONG_LONG) {
    80011b20:	fec42783          	lw	a5,-20(s0)
    80011b24:	2007f793          	andi	a5,a5,512
    80011b28:	2781                	sext.w	a5,a5
    80011b2a:	c3bd                	beqz	a5,80011b90 <_vsnprintf+0x538>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        const long long value = va_arg(va, long long);
    80011b2c:	f7843783          	ld	a5,-136(s0)
    80011b30:	00878713          	addi	a4,a5,8
    80011b34:	f6e43c23          	sd	a4,-136(s0)
    80011b38:	639c                	ld	a5,0(a5)
    80011b3a:	faf43023          	sd	a5,-96(s0)
                        idx                   = _ntoa_long_long(
                                              out, buffer, idx, maxlen,
                                              (unsigned long long)(value > 0 ? value : 0 - value),
    80011b3e:	fa043783          	ld	a5,-96(s0)
    80011b42:	43f7d713          	srai	a4,a5,0x3f
    80011b46:	fa043783          	ld	a5,-96(s0)
    80011b4a:	8fb9                	xor	a5,a5,a4
    80011b4c:	8f99                	sub	a5,a5,a4
                        idx                   = _ntoa_long_long(
    80011b4e:	85be                	mv	a1,a5
    80011b50:	fa043783          	ld	a5,-96(s0)
    80011b54:	93fd                	srli	a5,a5,0x3f
    80011b56:	0ff7f713          	andi	a4,a5,255
    80011b5a:	fd446683          	lwu	a3,-44(s0)
    80011b5e:	fe442603          	lw	a2,-28(s0)
    80011b62:	fec42783          	lw	a5,-20(s0)
    80011b66:	e43e                	sd	a5,8(sp)
    80011b68:	fe842783          	lw	a5,-24(s0)
    80011b6c:	e03e                	sd	a5,0(sp)
    80011b6e:	88b2                	mv	a7,a2
    80011b70:	8836                	mv	a6,a3
    80011b72:	87ba                	mv	a5,a4
    80011b74:	872e                	mv	a4,a1
    80011b76:	f8843683          	ld	a3,-120(s0)
    80011b7a:	fd843603          	ld	a2,-40(s0)
    80011b7e:	f9043583          	ld	a1,-112(s0)
    80011b82:	f9843503          	ld	a0,-104(s0)
    80011b86:	fadfe0ef          	jal	ra,80010b32 <_ntoa_long_long>
    80011b8a:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80011b8e:	ac89                	j	80011de0 <_vsnprintf+0x788>
                                              value < 0, base, precision, width, flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    80011b90:	fec42783          	lw	a5,-20(s0)
    80011b94:	1007f793          	andi	a5,a5,256
    80011b98:	2781                	sext.w	a5,a5
    80011b9a:	c3bd                	beqz	a5,80011c00 <_vsnprintf+0x5a8>
                        const long value = va_arg(va, long);
    80011b9c:	f7843783          	ld	a5,-136(s0)
    80011ba0:	00878713          	addi	a4,a5,8
    80011ba4:	f6e43c23          	sd	a4,-136(s0)
    80011ba8:	639c                	ld	a5,0(a5)
    80011baa:	faf43423          	sd	a5,-88(s0)
                        idx              = _ntoa_long(
                                         out, buffer, idx, maxlen,
                                         (unsigned long)(value > 0 ? value : 0 - value),
    80011bae:	fa843783          	ld	a5,-88(s0)
    80011bb2:	43f7d713          	srai	a4,a5,0x3f
    80011bb6:	fa843783          	ld	a5,-88(s0)
    80011bba:	8fb9                	xor	a5,a5,a4
    80011bbc:	8f99                	sub	a5,a5,a4
                        idx              = _ntoa_long(
    80011bbe:	85be                	mv	a1,a5
    80011bc0:	fa843783          	ld	a5,-88(s0)
    80011bc4:	93fd                	srli	a5,a5,0x3f
    80011bc6:	0ff7f713          	andi	a4,a5,255
    80011bca:	fd446683          	lwu	a3,-44(s0)
    80011bce:	fe442603          	lw	a2,-28(s0)
    80011bd2:	fec42783          	lw	a5,-20(s0)
    80011bd6:	e43e                	sd	a5,8(sp)
    80011bd8:	fe842783          	lw	a5,-24(s0)
    80011bdc:	e03e                	sd	a5,0(sp)
    80011bde:	88b2                	mv	a7,a2
    80011be0:	8836                	mv	a6,a3
    80011be2:	87ba                	mv	a5,a4
    80011be4:	872e                	mv	a4,a1
    80011be6:	f8843683          	ld	a3,-120(s0)
    80011bea:	fd843603          	ld	a2,-40(s0)
    80011bee:	f9043583          	ld	a1,-112(s0)
    80011bf2:	f9843503          	ld	a0,-104(s0)
    80011bf6:	e25fe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011bfa:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80011bfe:	a2cd                	j	80011de0 <_vsnprintf+0x788>
                                         value < 0, base, precision, width, flags);
                    }
                    else {
                        const int value =
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    80011c00:	fec42783          	lw	a5,-20(s0)
    80011c04:	0407f793          	andi	a5,a5,64
    80011c08:	2781                	sext.w	a5,a5
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80011c0a:	cf81                	beqz	a5,80011c22 <_vsnprintf+0x5ca>
                            (flags & FLAGS_CHAR)    ? (char)va_arg(va, int)
    80011c0c:	f7843783          	ld	a5,-136(s0)
    80011c10:	00878713          	addi	a4,a5,8
    80011c14:	f6e43c23          	sd	a4,-136(s0)
    80011c18:	439c                	lw	a5,0(a5)
    80011c1a:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80011c1e:	2781                	sext.w	a5,a5
    80011c20:	a81d                	j	80011c56 <_vsnprintf+0x5fe>
    80011c22:	fec42783          	lw	a5,-20(s0)
    80011c26:	0807f793          	andi	a5,a5,128
    80011c2a:	2781                	sext.w	a5,a5
                                                    : va_arg(va, int);
    80011c2c:	cf91                	beqz	a5,80011c48 <_vsnprintf+0x5f0>
                            : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int)
    80011c2e:	f7843783          	ld	a5,-136(s0)
    80011c32:	00878713          	addi	a4,a5,8
    80011c36:	f6e43c23          	sd	a4,-136(s0)
    80011c3a:	439c                	lw	a5,0(a5)
    80011c3c:	0107979b          	slliw	a5,a5,0x10
    80011c40:	4107d79b          	sraiw	a5,a5,0x10
                                                    : va_arg(va, int);
    80011c44:	2781                	sext.w	a5,a5
    80011c46:	a801                	j	80011c56 <_vsnprintf+0x5fe>
    80011c48:	f7843783          	ld	a5,-136(s0)
    80011c4c:	00878713          	addi	a4,a5,8
    80011c50:	f6e43c23          	sd	a4,-136(s0)
    80011c54:	439c                	lw	a5,0(a5)
                        const int value =
    80011c56:	faf42823          	sw	a5,-80(s0)
                        idx = _ntoa_long(
                            out, buffer, idx, maxlen,
                            (unsigned int)(value > 0 ? value : 0 - value),
    80011c5a:	fb042783          	lw	a5,-80(s0)
    80011c5e:	41f7d79b          	sraiw	a5,a5,0x1f
    80011c62:	fb042703          	lw	a4,-80(s0)
    80011c66:	8f3d                	xor	a4,a4,a5
    80011c68:	40f707bb          	subw	a5,a4,a5
    80011c6c:	2781                	sext.w	a5,a5
    80011c6e:	2781                	sext.w	a5,a5
                        idx = _ntoa_long(
    80011c70:	02079713          	slli	a4,a5,0x20
    80011c74:	9301                	srli	a4,a4,0x20
    80011c76:	fb042783          	lw	a5,-80(s0)
    80011c7a:	01f7d79b          	srliw	a5,a5,0x1f
    80011c7e:	0ff7f693          	andi	a3,a5,255
    80011c82:	fd446603          	lwu	a2,-44(s0)
    80011c86:	fe442583          	lw	a1,-28(s0)
    80011c8a:	fec42783          	lw	a5,-20(s0)
    80011c8e:	e43e                	sd	a5,8(sp)
    80011c90:	fe842783          	lw	a5,-24(s0)
    80011c94:	e03e                	sd	a5,0(sp)
    80011c96:	88ae                	mv	a7,a1
    80011c98:	8832                	mv	a6,a2
    80011c9a:	87b6                	mv	a5,a3
    80011c9c:	f8843683          	ld	a3,-120(s0)
    80011ca0:	fd843603          	ld	a2,-40(s0)
    80011ca4:	f9043583          	ld	a1,-112(s0)
    80011ca8:	f9843503          	ld	a0,-104(s0)
    80011cac:	d6ffe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011cb0:	fca43c23          	sd	a0,-40(s0)
                    if (flags & FLAGS_LONG_LONG) {
    80011cb4:	a235                	j	80011de0 <_vsnprintf+0x788>
                            value < 0, base, precision, width, flags);
                    }
                }
                else {
                    // unsigned
                    if (flags & FLAGS_LONG_LONG) {
    80011cb6:	fec42783          	lw	a5,-20(s0)
    80011cba:	2007f793          	andi	a5,a5,512
    80011cbe:	2781                	sext.w	a5,a5
    80011cc0:	c3b1                	beqz	a5,80011d04 <_vsnprintf+0x6ac>
#if defined(PRINTF_SUPPORT_LONG_LONG)
                        idx = _ntoa_long_long(out, buffer, idx, maxlen,
    80011cc2:	f7843783          	ld	a5,-136(s0)
    80011cc6:	00878713          	addi	a4,a5,8
    80011cca:	f6e43c23          	sd	a4,-136(s0)
    80011cce:	6398                	ld	a4,0(a5)
    80011cd0:	fd446683          	lwu	a3,-44(s0)
    80011cd4:	fe442603          	lw	a2,-28(s0)
    80011cd8:	fec42783          	lw	a5,-20(s0)
    80011cdc:	e43e                	sd	a5,8(sp)
    80011cde:	fe842783          	lw	a5,-24(s0)
    80011ce2:	e03e                	sd	a5,0(sp)
    80011ce4:	88b2                	mv	a7,a2
    80011ce6:	8836                	mv	a6,a3
    80011ce8:	4781                	li	a5,0
    80011cea:	f8843683          	ld	a3,-120(s0)
    80011cee:	fd843603          	ld	a2,-40(s0)
    80011cf2:	f9043583          	ld	a1,-112(s0)
    80011cf6:	f9843503          	ld	a0,-104(s0)
    80011cfa:	e39fe0ef          	jal	ra,80010b32 <_ntoa_long_long>
    80011cfe:	fca43c23          	sd	a0,-40(s0)
    80011d02:	a8f9                	j	80011de0 <_vsnprintf+0x788>
                                              va_arg(va, unsigned long long),
                                              false, base, precision, width,
                                              flags);
#endif
                    }
                    else if (flags & FLAGS_LONG) {
    80011d04:	fec42783          	lw	a5,-20(s0)
    80011d08:	1007f793          	andi	a5,a5,256
    80011d0c:	2781                	sext.w	a5,a5
    80011d0e:	c3b1                	beqz	a5,80011d52 <_vsnprintf+0x6fa>
                        idx = _ntoa_long(out, buffer, idx, maxlen,
    80011d10:	f7843783          	ld	a5,-136(s0)
    80011d14:	00878713          	addi	a4,a5,8
    80011d18:	f6e43c23          	sd	a4,-136(s0)
    80011d1c:	6398                	ld	a4,0(a5)
    80011d1e:	fd446683          	lwu	a3,-44(s0)
    80011d22:	fe442603          	lw	a2,-28(s0)
    80011d26:	fec42783          	lw	a5,-20(s0)
    80011d2a:	e43e                	sd	a5,8(sp)
    80011d2c:	fe842783          	lw	a5,-24(s0)
    80011d30:	e03e                	sd	a5,0(sp)
    80011d32:	88b2                	mv	a7,a2
    80011d34:	8836                	mv	a6,a3
    80011d36:	4781                	li	a5,0
    80011d38:	f8843683          	ld	a3,-120(s0)
    80011d3c:	fd843603          	ld	a2,-40(s0)
    80011d40:	f9043583          	ld	a1,-112(s0)
    80011d44:	f9843503          	ld	a0,-104(s0)
    80011d48:	cd3fe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011d4c:	fca43c23          	sd	a0,-40(s0)
    80011d50:	a841                	j	80011de0 <_vsnprintf+0x788>
                                         va_arg(va, unsigned long), false, base,
                                         precision, width, flags);
                    }
                    else {
                        const unsigned int value =
                            (flags & FLAGS_CHAR)
    80011d52:	fec42783          	lw	a5,-20(s0)
    80011d56:	0407f793          	andi	a5,a5,64
    80011d5a:	2781                	sext.w	a5,a5
                                ? (unsigned char)va_arg(va, unsigned int)
                            : (flags & FLAGS_SHORT)
    80011d5c:	cf81                	beqz	a5,80011d74 <_vsnprintf+0x71c>
                                ? (unsigned char)va_arg(va, unsigned int)
    80011d5e:	f7843783          	ld	a5,-136(s0)
    80011d62:	00878713          	addi	a4,a5,8
    80011d66:	f6e43c23          	sd	a4,-136(s0)
    80011d6a:	439c                	lw	a5,0(a5)
    80011d6c:	0ff7f793          	andi	a5,a5,255
                            : (flags & FLAGS_SHORT)
    80011d70:	2781                	sext.w	a5,a5
    80011d72:	a815                	j	80011da6 <_vsnprintf+0x74e>
    80011d74:	fec42783          	lw	a5,-20(s0)
    80011d78:	0807f793          	andi	a5,a5,128
    80011d7c:	2781                	sext.w	a5,a5
                                ? (unsigned short int)va_arg(va, unsigned int)
                                : va_arg(va, unsigned int);
    80011d7e:	cf81                	beqz	a5,80011d96 <_vsnprintf+0x73e>
                                ? (unsigned short int)va_arg(va, unsigned int)
    80011d80:	f7843783          	ld	a5,-136(s0)
    80011d84:	00878713          	addi	a4,a5,8
    80011d88:	f6e43c23          	sd	a4,-136(s0)
    80011d8c:	439c                	lw	a5,0(a5)
    80011d8e:	17c2                	slli	a5,a5,0x30
    80011d90:	93c1                	srli	a5,a5,0x30
                                : va_arg(va, unsigned int);
    80011d92:	2781                	sext.w	a5,a5
    80011d94:	a801                	j	80011da4 <_vsnprintf+0x74c>
    80011d96:	f7843783          	ld	a5,-136(s0)
    80011d9a:	00878713          	addi	a4,a5,8
    80011d9e:	f6e43c23          	sd	a4,-136(s0)
    80011da2:	439c                	lw	a5,0(a5)
                            : (flags & FLAGS_SHORT)
    80011da4:	2781                	sext.w	a5,a5
                        const unsigned int value =
    80011da6:	faf42a23          	sw	a5,-76(s0)
                        idx = _ntoa_long(out, buffer, idx, maxlen, value, false,
    80011daa:	fb446703          	lwu	a4,-76(s0)
    80011dae:	fd446683          	lwu	a3,-44(s0)
    80011db2:	fe442603          	lw	a2,-28(s0)
    80011db6:	fec42783          	lw	a5,-20(s0)
    80011dba:	e43e                	sd	a5,8(sp)
    80011dbc:	fe842783          	lw	a5,-24(s0)
    80011dc0:	e03e                	sd	a5,0(sp)
    80011dc2:	88b2                	mv	a7,a2
    80011dc4:	8836                	mv	a6,a3
    80011dc6:	4781                	li	a5,0
    80011dc8:	f8843683          	ld	a3,-120(s0)
    80011dcc:	fd843603          	ld	a2,-40(s0)
    80011dd0:	f9043583          	ld	a1,-112(s0)
    80011dd4:	f9843503          	ld	a0,-104(s0)
    80011dd8:	c43fe0ef          	jal	ra,80010a1a <_ntoa_long>
    80011ddc:	fca43c23          	sd	a0,-40(s0)
                                         base, precision, width, flags);
                    }
                }
                format++;
    80011de0:	f8043783          	ld	a5,-128(s0)
    80011de4:	0785                	addi	a5,a5,1
    80011de6:	f8f43023          	sd	a5,-128(s0)
                break;
    80011dea:	a919                	j	80012200 <_vsnprintf+0xba8>
            }
#if defined(PRINTF_SUPPORT_FLOAT)
            case 'f':
            case 'F':
                if (*format == 'F')
    80011dec:	f8043783          	ld	a5,-128(s0)
    80011df0:	0007c783          	lbu	a5,0(a5)
    80011df4:	873e                	mv	a4,a5
    80011df6:	04600793          	li	a5,70
    80011dfa:	00f71863          	bne	a4,a5,80011e0a <_vsnprintf+0x7b2>
                    flags |= FLAGS_UPPERCASE;
    80011dfe:	fec42783          	lw	a5,-20(s0)
    80011e02:	0207e793          	ori	a5,a5,32
    80011e06:	fef42623          	sw	a5,-20(s0)
                idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double),
    80011e0a:	f7843783          	ld	a5,-136(s0)
    80011e0e:	00878713          	addi	a4,a5,8
    80011e12:	f6e43c23          	sd	a4,-136(s0)
    80011e16:	239c                	fld	fa5,0(a5)
    80011e18:	fec42683          	lw	a3,-20(s0)
    80011e1c:	fe842783          	lw	a5,-24(s0)
    80011e20:	fe442703          	lw	a4,-28(s0)
    80011e24:	8836                	mv	a6,a3
    80011e26:	22f78553          	fmv.d	fa0,fa5
    80011e2a:	f8843683          	ld	a3,-120(s0)
    80011e2e:	fd843603          	ld	a2,-40(s0)
    80011e32:	f9043583          	ld	a1,-112(s0)
    80011e36:	f9843503          	ld	a0,-104(s0)
    80011e3a:	e11fe0ef          	jal	ra,80010c4a <_ftoa>
    80011e3e:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    80011e42:	f8043783          	ld	a5,-128(s0)
    80011e46:	0785                	addi	a5,a5,1
    80011e48:	f8f43023          	sd	a5,-128(s0)
                break;
    80011e4c:	ae55                	j	80012200 <_vsnprintf+0xba8>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
            case 'e':
            case 'E':
            case 'g':
            case 'G':
                if ((*format == 'g') || (*format == 'G'))
    80011e4e:	f8043783          	ld	a5,-128(s0)
    80011e52:	0007c783          	lbu	a5,0(a5)
    80011e56:	873e                	mv	a4,a5
    80011e58:	06700793          	li	a5,103
    80011e5c:	00f70b63          	beq	a4,a5,80011e72 <_vsnprintf+0x81a>
    80011e60:	f8043783          	ld	a5,-128(s0)
    80011e64:	0007c783          	lbu	a5,0(a5)
    80011e68:	873e                	mv	a4,a5
    80011e6a:	04700793          	li	a5,71
    80011e6e:	00f71a63          	bne	a4,a5,80011e82 <_vsnprintf+0x82a>
                    flags |= FLAGS_ADAPT_EXP;
    80011e72:	fec42703          	lw	a4,-20(s0)
    80011e76:	6785                	lui	a5,0x1
    80011e78:	80078793          	addi	a5,a5,-2048 # 800 <i+0x7e0>
    80011e7c:	8fd9                	or	a5,a5,a4
    80011e7e:	fef42623          	sw	a5,-20(s0)
                if ((*format == 'E') || (*format == 'G'))
    80011e82:	f8043783          	ld	a5,-128(s0)
    80011e86:	0007c783          	lbu	a5,0(a5)
    80011e8a:	873e                	mv	a4,a5
    80011e8c:	04500793          	li	a5,69
    80011e90:	00f70b63          	beq	a4,a5,80011ea6 <_vsnprintf+0x84e>
    80011e94:	f8043783          	ld	a5,-128(s0)
    80011e98:	0007c783          	lbu	a5,0(a5)
    80011e9c:	873e                	mv	a4,a5
    80011e9e:	04700793          	li	a5,71
    80011ea2:	00f71863          	bne	a4,a5,80011eb2 <_vsnprintf+0x85a>
                    flags |= FLAGS_UPPERCASE;
    80011ea6:	fec42783          	lw	a5,-20(s0)
    80011eaa:	0207e793          	ori	a5,a5,32
    80011eae:	fef42623          	sw	a5,-20(s0)
                idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double),
    80011eb2:	f7843783          	ld	a5,-136(s0)
    80011eb6:	00878713          	addi	a4,a5,8
    80011eba:	f6e43c23          	sd	a4,-136(s0)
    80011ebe:	239c                	fld	fa5,0(a5)
    80011ec0:	fec42683          	lw	a3,-20(s0)
    80011ec4:	fe842783          	lw	a5,-24(s0)
    80011ec8:	fe442703          	lw	a4,-28(s0)
    80011ecc:	8836                	mv	a6,a3
    80011ece:	22f78553          	fmv.d	fa0,fa5
    80011ed2:	f8843683          	ld	a3,-120(s0)
    80011ed6:	fd843603          	ld	a2,-40(s0)
    80011eda:	f9043583          	ld	a1,-112(s0)
    80011ede:	f9843503          	ld	a0,-104(s0)
    80011ee2:	ab4ff0ef          	jal	ra,80011196 <_etoa>
    80011ee6:	fca43c23          	sd	a0,-40(s0)
                            precision, width, flags);
                format++;
    80011eea:	f8043783          	ld	a5,-128(s0)
    80011eee:	0785                	addi	a5,a5,1
    80011ef0:	f8f43023          	sd	a5,-128(s0)
                break;
    80011ef4:	a631                	j	80012200 <_vsnprintf+0xba8>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
            case 'c': {
                unsigned int l = 1U;
    80011ef6:	4785                	li	a5,1
    80011ef8:	fcf42823          	sw	a5,-48(s0)
                // pre padding
                if (!(flags & FLAGS_LEFT)) {
    80011efc:	fec42783          	lw	a5,-20(s0)
    80011f00:	8b89                	andi	a5,a5,2
    80011f02:	2781                	sext.w	a5,a5
    80011f04:	ef8d                	bnez	a5,80011f3e <_vsnprintf+0x8e6>
                    while (l++ < width) {
    80011f06:	a00d                	j	80011f28 <_vsnprintf+0x8d0>
                        out(' ', buffer, idx++, maxlen);
    80011f08:	fd843783          	ld	a5,-40(s0)
    80011f0c:	00178713          	addi	a4,a5,1
    80011f10:	fce43c23          	sd	a4,-40(s0)
    80011f14:	f9843703          	ld	a4,-104(s0)
    80011f18:	f8843683          	ld	a3,-120(s0)
    80011f1c:	863e                	mv	a2,a5
    80011f1e:	f9043583          	ld	a1,-112(s0)
    80011f22:	02000513          	li	a0,32
    80011f26:	9702                	jalr	a4
                    while (l++ < width) {
    80011f28:	fd042783          	lw	a5,-48(s0)
    80011f2c:	0017871b          	addiw	a4,a5,1
    80011f30:	fce42823          	sw	a4,-48(s0)
    80011f34:	fe842703          	lw	a4,-24(s0)
    80011f38:	2701                	sext.w	a4,a4
    80011f3a:	fce7e7e3          	bltu	a5,a4,80011f08 <_vsnprintf+0x8b0>
                    }
                }
                // char output
                out((char)va_arg(va, int), buffer, idx++, maxlen);
    80011f3e:	f7843783          	ld	a5,-136(s0)
    80011f42:	00878713          	addi	a4,a5,8
    80011f46:	f6e43c23          	sd	a4,-136(s0)
    80011f4a:	439c                	lw	a5,0(a5)
    80011f4c:	0ff7f513          	andi	a0,a5,255
    80011f50:	fd843783          	ld	a5,-40(s0)
    80011f54:	00178713          	addi	a4,a5,1
    80011f58:	fce43c23          	sd	a4,-40(s0)
    80011f5c:	f9843703          	ld	a4,-104(s0)
    80011f60:	f8843683          	ld	a3,-120(s0)
    80011f64:	863e                	mv	a2,a5
    80011f66:	f9043583          	ld	a1,-112(s0)
    80011f6a:	9702                	jalr	a4
                // post padding
                if (flags & FLAGS_LEFT) {
    80011f6c:	fec42783          	lw	a5,-20(s0)
    80011f70:	8b89                	andi	a5,a5,2
    80011f72:	2781                	sext.w	a5,a5
    80011f74:	cf8d                	beqz	a5,80011fae <_vsnprintf+0x956>
                    while (l++ < width) {
    80011f76:	a00d                	j	80011f98 <_vsnprintf+0x940>
                        out(' ', buffer, idx++, maxlen);
    80011f78:	fd843783          	ld	a5,-40(s0)
    80011f7c:	00178713          	addi	a4,a5,1
    80011f80:	fce43c23          	sd	a4,-40(s0)
    80011f84:	f9843703          	ld	a4,-104(s0)
    80011f88:	f8843683          	ld	a3,-120(s0)
    80011f8c:	863e                	mv	a2,a5
    80011f8e:	f9043583          	ld	a1,-112(s0)
    80011f92:	02000513          	li	a0,32
    80011f96:	9702                	jalr	a4
                    while (l++ < width) {
    80011f98:	fd042783          	lw	a5,-48(s0)
    80011f9c:	0017871b          	addiw	a4,a5,1
    80011fa0:	fce42823          	sw	a4,-48(s0)
    80011fa4:	fe842703          	lw	a4,-24(s0)
    80011fa8:	2701                	sext.w	a4,a4
    80011faa:	fce7e7e3          	bltu	a5,a4,80011f78 <_vsnprintf+0x920>
                    }
                }
                format++;
    80011fae:	f8043783          	ld	a5,-128(s0)
    80011fb2:	0785                	addi	a5,a5,1
    80011fb4:	f8f43023          	sd	a5,-128(s0)
                break;
    80011fb8:	a4a1                	j	80012200 <_vsnprintf+0xba8>
            }

            case 's': {
                const char *p = va_arg(va, char *);
    80011fba:	f7843783          	ld	a5,-136(s0)
    80011fbe:	00878713          	addi	a4,a5,8
    80011fc2:	f6e43c23          	sd	a4,-136(s0)
    80011fc6:	639c                	ld	a5,0(a5)
    80011fc8:	fcf43423          	sd	a5,-56(s0)
                unsigned int l =
                    _strnlen_s(p, precision ? precision : (size_t)-1);
    80011fcc:	fe442783          	lw	a5,-28(s0)
    80011fd0:	2781                	sext.w	a5,a5
    80011fd2:	c781                	beqz	a5,80011fda <_vsnprintf+0x982>
    80011fd4:	fe446783          	lwu	a5,-28(s0)
    80011fd8:	a011                	j	80011fdc <_vsnprintf+0x984>
    80011fda:	57fd                	li	a5,-1
    80011fdc:	85be                	mv	a1,a5
    80011fde:	fc843503          	ld	a0,-56(s0)
    80011fe2:	d92fe0ef          	jal	ra,80010574 <_strnlen_s>
    80011fe6:	87aa                	mv	a5,a0
    80011fe8:	fcf42223          	sw	a5,-60(s0)
                // pre padding
                if (flags & FLAGS_PRECISION) {
    80011fec:	fec42783          	lw	a5,-20(s0)
    80011ff0:	4007f793          	andi	a5,a5,1024
    80011ff4:	2781                	sext.w	a5,a5
    80011ff6:	cf91                	beqz	a5,80012012 <_vsnprintf+0x9ba>
                    l = (l < precision ? l : precision);
    80011ff8:	fc442603          	lw	a2,-60(s0)
    80011ffc:	fe442783          	lw	a5,-28(s0)
    80012000:	0007869b          	sext.w	a3,a5
    80012004:	0006071b          	sext.w	a4,a2
    80012008:	00d77363          	bgeu	a4,a3,8001200e <_vsnprintf+0x9b6>
    8001200c:	87b2                	mv	a5,a2
    8001200e:	fcf42223          	sw	a5,-60(s0)
                }
                if (!(flags & FLAGS_LEFT)) {
    80012012:	fec42783          	lw	a5,-20(s0)
    80012016:	8b89                	andi	a5,a5,2
    80012018:	2781                	sext.w	a5,a5
    8001201a:	e7a5                	bnez	a5,80012082 <_vsnprintf+0xa2a>
                    while (l++ < width) {
    8001201c:	a00d                	j	8001203e <_vsnprintf+0x9e6>
                        out(' ', buffer, idx++, maxlen);
    8001201e:	fd843783          	ld	a5,-40(s0)
    80012022:	00178713          	addi	a4,a5,1
    80012026:	fce43c23          	sd	a4,-40(s0)
    8001202a:	f9843703          	ld	a4,-104(s0)
    8001202e:	f8843683          	ld	a3,-120(s0)
    80012032:	863e                	mv	a2,a5
    80012034:	f9043583          	ld	a1,-112(s0)
    80012038:	02000513          	li	a0,32
    8001203c:	9702                	jalr	a4
                    while (l++ < width) {
    8001203e:	fc442783          	lw	a5,-60(s0)
    80012042:	0017871b          	addiw	a4,a5,1
    80012046:	fce42223          	sw	a4,-60(s0)
    8001204a:	fe842703          	lw	a4,-24(s0)
    8001204e:	2701                	sext.w	a4,a4
    80012050:	fce7e7e3          	bltu	a5,a4,8001201e <_vsnprintf+0x9c6>
                    }
                }
                // string output
                while ((*p != 0) &&
    80012054:	a03d                	j	80012082 <_vsnprintf+0xa2a>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
                    out(*(p++), buffer, idx++, maxlen);
    80012056:	fc843783          	ld	a5,-56(s0)
    8001205a:	00178713          	addi	a4,a5,1
    8001205e:	fce43423          	sd	a4,-56(s0)
    80012062:	0007c503          	lbu	a0,0(a5)
    80012066:	fd843783          	ld	a5,-40(s0)
    8001206a:	00178713          	addi	a4,a5,1
    8001206e:	fce43c23          	sd	a4,-40(s0)
    80012072:	f9843703          	ld	a4,-104(s0)
    80012076:	f8843683          	ld	a3,-120(s0)
    8001207a:	863e                	mv	a2,a5
    8001207c:	f9043583          	ld	a1,-112(s0)
    80012080:	9702                	jalr	a4
                while ((*p != 0) &&
    80012082:	fc843783          	ld	a5,-56(s0)
    80012086:	0007c783          	lbu	a5,0(a5)
    8001208a:	cf91                	beqz	a5,800120a6 <_vsnprintf+0xa4e>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    8001208c:	fec42783          	lw	a5,-20(s0)
    80012090:	4007f793          	andi	a5,a5,1024
    80012094:	2781                	sext.w	a5,a5
                while ((*p != 0) &&
    80012096:	d3e1                	beqz	a5,80012056 <_vsnprintf+0x9fe>
                       (!(flags & FLAGS_PRECISION) || precision--)) {
    80012098:	fe442783          	lw	a5,-28(s0)
    8001209c:	fff7871b          	addiw	a4,a5,-1
    800120a0:	fee42223          	sw	a4,-28(s0)
    800120a4:	fbcd                	bnez	a5,80012056 <_vsnprintf+0x9fe>
                }
                // post padding
                if (flags & FLAGS_LEFT) {
    800120a6:	fec42783          	lw	a5,-20(s0)
    800120aa:	8b89                	andi	a5,a5,2
    800120ac:	2781                	sext.w	a5,a5
    800120ae:	cf8d                	beqz	a5,800120e8 <_vsnprintf+0xa90>
                    while (l++ < width) {
    800120b0:	a00d                	j	800120d2 <_vsnprintf+0xa7a>
                        out(' ', buffer, idx++, maxlen);
    800120b2:	fd843783          	ld	a5,-40(s0)
    800120b6:	00178713          	addi	a4,a5,1
    800120ba:	fce43c23          	sd	a4,-40(s0)
    800120be:	f9843703          	ld	a4,-104(s0)
    800120c2:	f8843683          	ld	a3,-120(s0)
    800120c6:	863e                	mv	a2,a5
    800120c8:	f9043583          	ld	a1,-112(s0)
    800120cc:	02000513          	li	a0,32
    800120d0:	9702                	jalr	a4
                    while (l++ < width) {
    800120d2:	fc442783          	lw	a5,-60(s0)
    800120d6:	0017871b          	addiw	a4,a5,1
    800120da:	fce42223          	sw	a4,-60(s0)
    800120de:	fe842703          	lw	a4,-24(s0)
    800120e2:	2701                	sext.w	a4,a4
    800120e4:	fce7e7e3          	bltu	a5,a4,800120b2 <_vsnprintf+0xa5a>
                    }
                }
                format++;
    800120e8:	f8043783          	ld	a5,-128(s0)
    800120ec:	0785                	addi	a5,a5,1
    800120ee:	f8f43023          	sd	a5,-128(s0)
                break;
    800120f2:	a239                	j	80012200 <_vsnprintf+0xba8>
            }

            case 'p': {
                width = sizeof(void *) * 2U;
    800120f4:	47c1                	li	a5,16
    800120f6:	fef42423          	sw	a5,-24(s0)
                flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    800120fa:	fec42783          	lw	a5,-20(s0)
    800120fe:	0217e793          	ori	a5,a5,33
    80012102:	fef42623          	sw	a5,-20(s0)
#if defined(PRINTF_SUPPORT_LONG_LONG)
                const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    80012106:	4785                	li	a5,1
    80012108:	faf40da3          	sb	a5,-69(s0)
                if (is_ll) {
    8001210c:	fbb44783          	lbu	a5,-69(s0)
    80012110:	0ff7f793          	andi	a5,a5,255
    80012114:	c3b1                	beqz	a5,80012158 <_vsnprintf+0xb00>
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
                                          (uintptr_t)va_arg(va, void *), false,
    80012116:	f7843783          	ld	a5,-136(s0)
    8001211a:	00878713          	addi	a4,a5,8
    8001211e:	f6e43c23          	sd	a4,-136(s0)
    80012122:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long_long(out, buffer, idx, maxlen,
    80012124:	86be                	mv	a3,a5
    80012126:	fe442703          	lw	a4,-28(s0)
    8001212a:	fec42783          	lw	a5,-20(s0)
    8001212e:	e43e                	sd	a5,8(sp)
    80012130:	fe842783          	lw	a5,-24(s0)
    80012134:	e03e                	sd	a5,0(sp)
    80012136:	88ba                	mv	a7,a4
    80012138:	4841                	li	a6,16
    8001213a:	4781                	li	a5,0
    8001213c:	8736                	mv	a4,a3
    8001213e:	f8843683          	ld	a3,-120(s0)
    80012142:	fd843603          	ld	a2,-40(s0)
    80012146:	f9043583          	ld	a1,-112(s0)
    8001214a:	f9843503          	ld	a0,-104(s0)
    8001214e:	9e5fe0ef          	jal	ra,80010b32 <_ntoa_long_long>
    80012152:	fca43c23          	sd	a0,-40(s0)
    80012156:	a089                	j	80012198 <_vsnprintf+0xb40>
                }
                else {
#endif
                    idx = _ntoa_long(
                        out, buffer, idx, maxlen,
                        (unsigned long)((uintptr_t)va_arg(va, void *)), false,
    80012158:	f7843783          	ld	a5,-136(s0)
    8001215c:	00878713          	addi	a4,a5,8
    80012160:	f6e43c23          	sd	a4,-136(s0)
    80012164:	639c                	ld	a5,0(a5)
                    idx = _ntoa_long(
    80012166:	86be                	mv	a3,a5
    80012168:	fe442703          	lw	a4,-28(s0)
    8001216c:	fec42783          	lw	a5,-20(s0)
    80012170:	e43e                	sd	a5,8(sp)
    80012172:	fe842783          	lw	a5,-24(s0)
    80012176:	e03e                	sd	a5,0(sp)
    80012178:	88ba                	mv	a7,a4
    8001217a:	4841                	li	a6,16
    8001217c:	4781                	li	a5,0
    8001217e:	8736                	mv	a4,a3
    80012180:	f8843683          	ld	a3,-120(s0)
    80012184:	fd843603          	ld	a2,-40(s0)
    80012188:	f9043583          	ld	a1,-112(s0)
    8001218c:	f9843503          	ld	a0,-104(s0)
    80012190:	88bfe0ef          	jal	ra,80010a1a <_ntoa_long>
    80012194:	fca43c23          	sd	a0,-40(s0)
                        16U, precision, width, flags);
#if defined(PRINTF_SUPPORT_LONG_LONG)
                }
#endif
                format++;
    80012198:	f8043783          	ld	a5,-128(s0)
    8001219c:	0785                	addi	a5,a5,1
    8001219e:	f8f43023          	sd	a5,-128(s0)
                break;
    800121a2:	a8b9                	j	80012200 <_vsnprintf+0xba8>
            }

            case '%':
                out('%', buffer, idx++, maxlen);
    800121a4:	fd843783          	ld	a5,-40(s0)
    800121a8:	00178713          	addi	a4,a5,1
    800121ac:	fce43c23          	sd	a4,-40(s0)
    800121b0:	f9843703          	ld	a4,-104(s0)
    800121b4:	f8843683          	ld	a3,-120(s0)
    800121b8:	863e                	mv	a2,a5
    800121ba:	f9043583          	ld	a1,-112(s0)
    800121be:	02500513          	li	a0,37
    800121c2:	9702                	jalr	a4
                format++;
    800121c4:	f8043783          	ld	a5,-128(s0)
    800121c8:	0785                	addi	a5,a5,1
    800121ca:	f8f43023          	sd	a5,-128(s0)
                break;
    800121ce:	a80d                	j	80012200 <_vsnprintf+0xba8>

            default:
                out(*format, buffer, idx++, maxlen);
    800121d0:	f8043783          	ld	a5,-128(s0)
    800121d4:	0007c503          	lbu	a0,0(a5)
    800121d8:	fd843783          	ld	a5,-40(s0)
    800121dc:	00178713          	addi	a4,a5,1
    800121e0:	fce43c23          	sd	a4,-40(s0)
    800121e4:	f9843703          	ld	a4,-104(s0)
    800121e8:	f8843683          	ld	a3,-120(s0)
    800121ec:	863e                	mv	a2,a5
    800121ee:	f9043583          	ld	a1,-112(s0)
    800121f2:	9702                	jalr	a4
                format++;
    800121f4:	f8043783          	ld	a5,-128(s0)
    800121f8:	0785                	addi	a5,a5,1
    800121fa:	f8f43023          	sd	a5,-128(s0)
                break;
    800121fe:	0001                	nop
    while (*format) {
    80012200:	f8043783          	ld	a5,-128(s0)
    80012204:	0007c783          	lbu	a5,0(a5)
    80012208:	c8079463          	bnez	a5,80011690 <_vsnprintf+0x38>
        }
    }

    // termination
    out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    8001220c:	fd843703          	ld	a4,-40(s0)
    80012210:	f8843783          	ld	a5,-120(s0)
    80012214:	00f76663          	bltu	a4,a5,80012220 <_vsnprintf+0xbc8>
    80012218:	f8843783          	ld	a5,-120(s0)
    8001221c:	17fd                	addi	a5,a5,-1
    8001221e:	a019                	j	80012224 <_vsnprintf+0xbcc>
    80012220:	fd843783          	ld	a5,-40(s0)
    80012224:	f9843703          	ld	a4,-104(s0)
    80012228:	f8843683          	ld	a3,-120(s0)
    8001222c:	863e                	mv	a2,a5
    8001222e:	f9043583          	ld	a1,-112(s0)
    80012232:	4501                	li	a0,0
    80012234:	9702                	jalr	a4

    // return written chars without terminating \0
    return (int)idx;
    80012236:	fd843783          	ld	a5,-40(s0)
    8001223a:	2781                	sext.w	a5,a5
}
    8001223c:	853e                	mv	a0,a5
    8001223e:	60ea                	ld	ra,152(sp)
    80012240:	644a                	ld	s0,144(sp)
    80012242:	610d                	addi	sp,sp,160
    80012244:	8082                	ret

0000000080012246 <printf>:

///////////////////////////////////////////////////////////////////////////////

int printf(const char *format, ...)
{
    80012246:	7119                	addi	sp,sp,-128
    80012248:	fc06                	sd	ra,56(sp)
    8001224a:	f822                	sd	s0,48(sp)
    8001224c:	0080                	addi	s0,sp,64
    8001224e:	fca43423          	sd	a0,-56(s0)
    80012252:	e40c                	sd	a1,8(s0)
    80012254:	e810                	sd	a2,16(s0)
    80012256:	ec14                	sd	a3,24(s0)
    80012258:	f018                	sd	a4,32(s0)
    8001225a:	f41c                	sd	a5,40(s0)
    8001225c:	03043823          	sd	a6,48(s0)
    80012260:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, format);
    80012264:	04040793          	addi	a5,s0,64
    80012268:	fcf43023          	sd	a5,-64(s0)
    8001226c:	fc043783          	ld	a5,-64(s0)
    80012270:	fc878793          	addi	a5,a5,-56
    80012274:	fef43023          	sd	a5,-32(s0)
    char buffer[1];
    const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80012278:	fe043703          	ld	a4,-32(s0)
    8001227c:	fd840793          	addi	a5,s0,-40
    80012280:	fc843683          	ld	a3,-56(s0)
    80012284:	567d                	li	a2,-1
    80012286:	85be                	mv	a1,a5
    80012288:	ffffe517          	auipc	a0,0xffffe
    8001228c:	27050513          	addi	a0,a0,624 # 800104f8 <_out_char>
    80012290:	bc8ff0ef          	jal	ra,80011658 <_vsnprintf>
    80012294:	87aa                	mv	a5,a0
    80012296:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    8001229a:	fec42783          	lw	a5,-20(s0)
}
    8001229e:	853e                	mv	a0,a5
    800122a0:	70e2                	ld	ra,56(sp)
    800122a2:	7442                	ld	s0,48(sp)
    800122a4:	6109                	addi	sp,sp,128
    800122a6:	8082                	ret

00000000800122a8 <sprintf>:

int sprintf(char *buffer, const char *format, ...)
{
    800122a8:	7159                	addi	sp,sp,-112
    800122aa:	fc06                	sd	ra,56(sp)
    800122ac:	f822                	sd	s0,48(sp)
    800122ae:	0080                	addi	s0,sp,64
    800122b0:	fca43c23          	sd	a0,-40(s0)
    800122b4:	fcb43823          	sd	a1,-48(s0)
    800122b8:	e010                	sd	a2,0(s0)
    800122ba:	e414                	sd	a3,8(s0)
    800122bc:	e818                	sd	a4,16(s0)
    800122be:	ec1c                	sd	a5,24(s0)
    800122c0:	03043023          	sd	a6,32(s0)
    800122c4:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    800122c8:	03040793          	addi	a5,s0,48
    800122cc:	fcf43423          	sd	a5,-56(s0)
    800122d0:	fc843783          	ld	a5,-56(s0)
    800122d4:	fd078793          	addi	a5,a5,-48
    800122d8:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
    800122dc:	fe043783          	ld	a5,-32(s0)
    800122e0:	873e                	mv	a4,a5
    800122e2:	fd043683          	ld	a3,-48(s0)
    800122e6:	567d                	li	a2,-1
    800122e8:	fd843583          	ld	a1,-40(s0)
    800122ec:	ffffe517          	auipc	a0,0xffffe
    800122f0:	1ae50513          	addi	a0,a0,430 # 8001049a <_out_buffer>
    800122f4:	b64ff0ef          	jal	ra,80011658 <_vsnprintf>
    800122f8:	87aa                	mv	a5,a0
    800122fa:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    800122fe:	fec42783          	lw	a5,-20(s0)
}
    80012302:	853e                	mv	a0,a5
    80012304:	70e2                	ld	ra,56(sp)
    80012306:	7442                	ld	s0,48(sp)
    80012308:	6165                	addi	sp,sp,112
    8001230a:	8082                	ret

000000008001230c <snprintf>:

int snprintf(char *buffer, size_t count, const char *format, ...)
{
    8001230c:	7159                	addi	sp,sp,-112
    8001230e:	fc06                	sd	ra,56(sp)
    80012310:	f822                	sd	s0,48(sp)
    80012312:	0080                	addi	s0,sp,64
    80012314:	fca43c23          	sd	a0,-40(s0)
    80012318:	fcb43823          	sd	a1,-48(s0)
    8001231c:	fcc43423          	sd	a2,-56(s0)
    80012320:	e414                	sd	a3,8(s0)
    80012322:	e818                	sd	a4,16(s0)
    80012324:	ec1c                	sd	a5,24(s0)
    80012326:	03043023          	sd	a6,32(s0)
    8001232a:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    8001232e:	03040793          	addi	a5,s0,48
    80012332:	fcf43023          	sd	a5,-64(s0)
    80012336:	fc043783          	ld	a5,-64(s0)
    8001233a:	fd878793          	addi	a5,a5,-40
    8001233e:	fef43023          	sd	a5,-32(s0)
    const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
    80012342:	fe043783          	ld	a5,-32(s0)
    80012346:	873e                	mv	a4,a5
    80012348:	fc843683          	ld	a3,-56(s0)
    8001234c:	fd043603          	ld	a2,-48(s0)
    80012350:	fd843583          	ld	a1,-40(s0)
    80012354:	ffffe517          	auipc	a0,0xffffe
    80012358:	14650513          	addi	a0,a0,326 # 8001049a <_out_buffer>
    8001235c:	afcff0ef          	jal	ra,80011658 <_vsnprintf>
    80012360:	87aa                	mv	a5,a0
    80012362:	fef42623          	sw	a5,-20(s0)
    va_end(va);
    return ret;
    80012366:	fec42783          	lw	a5,-20(s0)
}
    8001236a:	853e                	mv	a0,a5
    8001236c:	70e2                	ld	ra,56(sp)
    8001236e:	7442                	ld	s0,48(sp)
    80012370:	6165                	addi	sp,sp,112
    80012372:	8082                	ret

0000000080012374 <vprintf_>:

int vprintf_(const char *format, va_list va)
{
    80012374:	7179                	addi	sp,sp,-48
    80012376:	f406                	sd	ra,40(sp)
    80012378:	f022                	sd	s0,32(sp)
    8001237a:	1800                	addi	s0,sp,48
    8001237c:	fca43c23          	sd	a0,-40(s0)
    80012380:	fcb43823          	sd	a1,-48(s0)
    char buffer[1];
    return _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    80012384:	fe840793          	addi	a5,s0,-24
    80012388:	fd043703          	ld	a4,-48(s0)
    8001238c:	fd843683          	ld	a3,-40(s0)
    80012390:	567d                	li	a2,-1
    80012392:	85be                	mv	a1,a5
    80012394:	ffffe517          	auipc	a0,0xffffe
    80012398:	16450513          	addi	a0,a0,356 # 800104f8 <_out_char>
    8001239c:	abcff0ef          	jal	ra,80011658 <_vsnprintf>
    800123a0:	87aa                	mv	a5,a0
}
    800123a2:	853e                	mv	a0,a5
    800123a4:	70a2                	ld	ra,40(sp)
    800123a6:	7402                	ld	s0,32(sp)
    800123a8:	6145                	addi	sp,sp,48
    800123aa:	8082                	ret

00000000800123ac <vsnprintf_>:

int vsnprintf_(char *buffer, size_t count, const char *format, va_list va)
{
    800123ac:	7179                	addi	sp,sp,-48
    800123ae:	f406                	sd	ra,40(sp)
    800123b0:	f022                	sd	s0,32(sp)
    800123b2:	1800                	addi	s0,sp,48
    800123b4:	fea43423          	sd	a0,-24(s0)
    800123b8:	feb43023          	sd	a1,-32(s0)
    800123bc:	fcc43c23          	sd	a2,-40(s0)
    800123c0:	fcd43823          	sd	a3,-48(s0)
    return _vsnprintf(_out_buffer, buffer, count, format, va);
    800123c4:	fd043703          	ld	a4,-48(s0)
    800123c8:	fd843683          	ld	a3,-40(s0)
    800123cc:	fe043603          	ld	a2,-32(s0)
    800123d0:	fe843583          	ld	a1,-24(s0)
    800123d4:	ffffe517          	auipc	a0,0xffffe
    800123d8:	0c650513          	addi	a0,a0,198 # 8001049a <_out_buffer>
    800123dc:	a7cff0ef          	jal	ra,80011658 <_vsnprintf>
    800123e0:	87aa                	mv	a5,a0
}
    800123e2:	853e                	mv	a0,a5
    800123e4:	70a2                	ld	ra,40(sp)
    800123e6:	7402                	ld	s0,32(sp)
    800123e8:	6145                	addi	sp,sp,48
    800123ea:	8082                	ret

00000000800123ec <fctprintf>:

int fctprintf(void (*out)(char character, void *arg), void *arg,
              const char *format, ...)
{
    800123ec:	7119                	addi	sp,sp,-128
    800123ee:	e486                	sd	ra,72(sp)
    800123f0:	e0a2                	sd	s0,64(sp)
    800123f2:	0880                	addi	s0,sp,80
    800123f4:	fca43423          	sd	a0,-56(s0)
    800123f8:	fcb43023          	sd	a1,-64(s0)
    800123fc:	fac43c23          	sd	a2,-72(s0)
    80012400:	e414                	sd	a3,8(s0)
    80012402:	e818                	sd	a4,16(s0)
    80012404:	ec1c                	sd	a5,24(s0)
    80012406:	03043023          	sd	a6,32(s0)
    8001240a:	03143423          	sd	a7,40(s0)
    va_list va;
    va_start(va, format);
    8001240e:	03040793          	addi	a5,s0,48
    80012412:	faf43823          	sd	a5,-80(s0)
    80012416:	fb043783          	ld	a5,-80(s0)
    8001241a:	fd878793          	addi	a5,a5,-40
    8001241e:	fef43023          	sd	a5,-32(s0)
    const out_fct_wrap_type out_fct_wrap = {out, arg};
    80012422:	fc843783          	ld	a5,-56(s0)
    80012426:	fcf43823          	sd	a5,-48(s0)
    8001242a:	fc043783          	ld	a5,-64(s0)
    8001242e:	fcf43c23          	sd	a5,-40(s0)
    const int ret = _vsnprintf(_out_fct, (char *)(uintptr_t)&out_fct_wrap,
    80012432:	fe043703          	ld	a4,-32(s0)
    80012436:	fd040793          	addi	a5,s0,-48
    8001243a:	fb843683          	ld	a3,-72(s0)
    8001243e:	567d                	li	a2,-1
    80012440:	85be                	mv	a1,a5
    80012442:	ffffe517          	auipc	a0,0xffffe
    80012446:	0ee50513          	addi	a0,a0,238 # 80010530 <_out_fct>
    8001244a:	a0eff0ef          	jal	ra,80011658 <_vsnprintf>
    8001244e:	87aa                	mv	a5,a0
    80012450:	fef42623          	sw	a5,-20(s0)
                               (size_t)-1, format, va);
    va_end(va);
    return ret;
    80012454:	fec42783          	lw	a5,-20(s0)
}
    80012458:	853e                	mv	a0,a5
    8001245a:	60a6                	ld	ra,72(sp)
    8001245c:	6406                	ld	s0,64(sp)
    8001245e:	6109                	addi	sp,sp,128
    80012460:	8082                	ret

0000000080012462 <c_trap_handler>:
// From src/syscall.c
void syscall_handle(int hart, uint64_t epc, int64_t *scratch);

// Called from asm/spawn.S: _spawn_trap
void c_trap_handler(void)
{
    80012462:	7139                	addi	sp,sp,-64
    80012464:	fc06                	sd	ra,56(sp)
    80012466:	f822                	sd	s0,48(sp)
    80012468:	0080                	addi	s0,sp,64
    unsigned long cause;
    long *scratch;
    unsigned long epc;
    unsigned long tval;
    CSR_READ(cause, "scause");
    8001246a:	142027f3          	csrr	a5,scause
    8001246e:	fef43423          	sd	a5,-24(s0)
    CSR_READ(scratch, "sscratch");
    80012472:	140027f3          	csrr	a5,sscratch
    80012476:	fef43023          	sd	a5,-32(s0)
    CSR_READ(epc, "sepc");
    8001247a:	141027f3          	csrr	a5,sepc
    8001247e:	fcf43c23          	sd	a5,-40(s0)
    CSR_READ(tval, "stval");
    80012482:	143027f3          	csrr	a5,stval
    80012486:	fcf43823          	sd	a5,-48(s0)
    
    int hart = sbi_whoami();
    8001248a:	39b010ef          	jal	ra,80014024 <sbi_whoami>
    8001248e:	87aa                	mv	a5,a0
    80012490:	fcf42623          	sw	a5,-52(s0)

    if (SCAUSE_IS_ASYNC(cause)) {
    80012494:	fe843783          	ld	a5,-24(s0)
    80012498:	0407d563          	bgez	a5,800124e2 <c_trap_handler+0x80>
        cause = SCAUSE_NUM(cause);
    8001249c:	fe843783          	ld	a5,-24(s0)
    800124a0:	0ff7f793          	andi	a5,a5,255
    800124a4:	fef43423          	sd	a5,-24(s0)
        switch (cause) {
    800124a8:	fe843703          	ld	a4,-24(s0)
    800124ac:	4795                	li	a5,5
    800124ae:	00f70863          	beq	a4,a5,800124be <c_trap_handler+0x5c>
    800124b2:	fe843703          	ld	a4,-24(s0)
    800124b6:	47a5                	li	a5,9
    800124b8:	00f70663          	beq	a4,a5,800124c4 <c_trap_handler+0x62>
    800124bc:	a811                	j	800124d0 <c_trap_handler+0x6e>
            case CAUSE_STIP:
                // Ack timer will reset the timer to INFINITE
                // In src/sbi.c
                sbi_ack_timer();
    800124be:	331010ef          	jal	ra,80013fee <sbi_ack_timer>
                // We typically invoke our scheduler if we get a timer
                // sched_invoke(hart);
                break;
    800124c2:	a08d                	j	80012524 <c_trap_handler+0xc2>
            case CAUSE_SEIP:
                // Forward to src/plic.c
                plic_handle_irq(hart);
    800124c4:	fcc42783          	lw	a5,-52(s0)
    800124c8:	853e                	mv	a0,a5
    800124ca:	60f010ef          	jal	ra,800142d8 <plic_handle_irq>
                break;
    800124ce:	a899                	j	80012524 <c_trap_handler+0xc2>
            default:
                debugf("Unhandled Asynchronous interrupt %ld\n", cause);
    800124d0:	fe843583          	ld	a1,-24(s0)
    800124d4:	00007517          	auipc	a0,0x7
    800124d8:	e4450513          	addi	a0,a0,-444 # 80019318 <pow10.0+0xe8>
    800124dc:	09b010ef          	jal	ra,80013d76 <debugf>
                break;
    800124e0:	a091                	j	80012524 <c_trap_handler+0xc2>
        }
    }
    else {
        switch (cause) {
    800124e2:	fe843703          	ld	a4,-24(s0)
    800124e6:	47a1                	li	a5,8
    800124e8:	00f71c63          	bne	a4,a5,80012500 <c_trap_handler+0x9e>
            case CAUSE_ECALL_U_MODE:  // ECALL U-Mode
                // Forward to src/syscall.c
                syscall_handle(hart, epc, scratch);
    800124ec:	fcc42783          	lw	a5,-52(s0)
    800124f0:	fe043603          	ld	a2,-32(s0)
    800124f4:	fd843583          	ld	a1,-40(s0)
    800124f8:	853e                	mv	a0,a5
    800124fa:	ef3fd0ef          	jal	ra,800103ec <syscall_handle>
                break;
    800124fe:	a01d                	j	80012524 <c_trap_handler+0xc2>
            default:
                debugf(
    80012500:	fcc42783          	lw	a5,-52(s0)
    80012504:	873e                	mv	a4,a5
    80012506:	fd043683          	ld	a3,-48(s0)
    8001250a:	fd843603          	ld	a2,-40(s0)
    8001250e:	fe843583          	ld	a1,-24(s0)
    80012512:	00007517          	auipc	a0,0x7
    80012516:	e2e50513          	addi	a0,a0,-466 # 80019340 <pow10.0+0x110>
    8001251a:	05d010ef          	jal	ra,80013d76 <debugf>
                    "Unhandled Synchronous interrupt %ld @ 0x%08lx [0x%08lx]. "
                    "Hanging hart %d\n",
                    cause, epc, tval, hart);
                WFI_LOOP();
    8001251e:	10500073          	wfi
    80012522:	bff5                	j	8001251e <c_trap_handler+0xbc>
                break;
        }
    }
}
    80012524:	0001                	nop
    80012526:	70e2                	ld	ra,56(sp)
    80012528:	7442                	ld	s0,48(sp)
    8001252a:	6121                	addi	sp,sp,64
    8001252c:	8082                	ret

000000008001252e <pci_init>:
#include <pci.h>

void pci_init(void)
{
    8001252e:	1141                	addi	sp,sp,-16
    80012530:	e422                	sd	s0,8(sp)
    80012532:	0800                	addi	s0,sp,16
    // Initialize and enumerate all PCI bridges and devices.

    // This should forward all virtio devices to the virtio drivers.
}
    80012534:	0001                	nop
    80012536:	6422                	ld	s0,8(sp)
    80012538:	0141                	addi	sp,sp,16
    8001253a:	8082                	ret

000000008001253c <pci_dispatch_irq>:

void pci_dispatch_irq(int irq)
{
    8001253c:	1101                	addi	sp,sp,-32
    8001253e:	ec22                	sd	s0,24(sp)
    80012540:	1000                	addi	s0,sp,32
    80012542:	87aa                	mv	a5,a0
    80012544:	fef42623          	sw	a5,-20(s0)
    (void)irq;

    // An IRQ came from the PLIC, but recall PCI devices
    // share IRQs. So, you need to check the ISR register
    // of potential virtio devices.
}
    80012548:	0001                	nop
    8001254a:	6462                	ld	s0,24(sp)
    8001254c:	6105                	addi	sp,sp,32
    8001254e:	8082                	ret

0000000080012550 <mutex_trylock>:
#include <config.h>
#include <lock.h>
#include <compiler.h>

bool mutex_trylock(Mutex *mutex)
{
    80012550:	7179                	addi	sp,sp,-48
    80012552:	f422                	sd	s0,40(sp)
    80012554:	1800                	addi	s0,sp,48
    80012556:	fca43c23          	sd	a0,-40(s0)
    int old;
    asm volatile("amoswap.w.aq %0, %1, (%2)" : "=r"(old) : "r"(MUTEX_LOCKED), "r"(mutex));
    8001255a:	4785                	li	a5,1
    8001255c:	fd843703          	ld	a4,-40(s0)
    80012560:	0cf727af          	amoswap.w.aq	a5,a5,(a4)
    80012564:	fef42623          	sw	a5,-20(s0)
    // If old == MUTEX_LOCKED, that means the mutex was already
    // locked when we tried to lock it. That means we didn't acquire
    // it.
    return old != MUTEX_LOCKED;
    80012568:	fec42783          	lw	a5,-20(s0)
    8001256c:	0007871b          	sext.w	a4,a5
    80012570:	4785                	li	a5,1
    80012572:	40f707b3          	sub	a5,a4,a5
    80012576:	00f037b3          	snez	a5,a5
    8001257a:	0ff7f793          	andi	a5,a5,255
}
    8001257e:	853e                	mv	a0,a5
    80012580:	7422                	ld	s0,40(sp)
    80012582:	6145                	addi	sp,sp,48
    80012584:	8082                	ret

0000000080012586 <mutex_spinlock>:

void mutex_spinlock(Mutex *mutex)
{
    80012586:	1101                	addi	sp,sp,-32
    80012588:	ec06                	sd	ra,24(sp)
    8001258a:	e822                	sd	s0,16(sp)
    8001258c:	1000                	addi	s0,sp,32
    8001258e:	fea43423          	sd	a0,-24(s0)
    while (!mutex_trylock(mutex))
    80012592:	0001                	nop
    80012594:	fe843503          	ld	a0,-24(s0)
    80012598:	fb9ff0ef          	jal	ra,80012550 <mutex_trylock>
    8001259c:	87aa                	mv	a5,a0
    8001259e:	0017c793          	xori	a5,a5,1
    800125a2:	0ff7f793          	andi	a5,a5,255
    800125a6:	f7fd                	bnez	a5,80012594 <mutex_spinlock+0xe>
        ;
}
    800125a8:	0001                	nop
    800125aa:	0001                	nop
    800125ac:	60e2                	ld	ra,24(sp)
    800125ae:	6442                	ld	s0,16(sp)
    800125b0:	6105                	addi	sp,sp,32
    800125b2:	8082                	ret

00000000800125b4 <mutex_unlock>:

void mutex_unlock(Mutex *mutex)
{
    800125b4:	1101                	addi	sp,sp,-32
    800125b6:	ec22                	sd	s0,24(sp)
    800125b8:	1000                	addi	s0,sp,32
    800125ba:	fea43423          	sd	a0,-24(s0)
    asm volatile("amoswap.w.rl zero, zero, (%0)" : : "r"(mutex));
    800125be:	fe843783          	ld	a5,-24(s0)
    800125c2:	0a07a02f          	amoswap.w.rl	zero,zero,(a5)
}
    800125c6:	0001                	nop
    800125c8:	6462                	ld	s0,24(sp)
    800125ca:	6105                	addi	sp,sp,32
    800125cc:	8082                	ret

00000000800125ce <mmu_table_create>:
#define ADDR_0_BIT   12
#define ADDR_1_BIT   21
#define ADDR_2_BIT   30

struct page_table *mmu_table_create(void)
{
    800125ce:	1141                	addi	sp,sp,-16
    800125d0:	e406                	sd	ra,8(sp)
    800125d2:	e022                	sd	s0,0(sp)
    800125d4:	0800                	addi	s0,sp,16
    return page_zalloc();
    800125d6:	4505                	li	a0,1
    800125d8:	374020ef          	jal	ra,8001494c <page_znalloc>
    800125dc:	87aa                	mv	a5,a0
}
    800125de:	853e                	mv	a0,a5
    800125e0:	60a2                	ld	ra,8(sp)
    800125e2:	6402                	ld	s0,0(sp)
    800125e4:	0141                	addi	sp,sp,16
    800125e6:	8082                	ret

00000000800125e8 <is_valid>:

// Check the valid bit of a page table entry.
static inline bool is_valid(unsigned long pte)
{
    800125e8:	1101                	addi	sp,sp,-32
    800125ea:	ec22                	sd	s0,24(sp)
    800125ec:	1000                	addi	s0,sp,32
    800125ee:	fea43423          	sd	a0,-24(s0)
    return pte & 1UL;
    800125f2:	fe843783          	ld	a5,-24(s0)
    800125f6:	8b85                	andi	a5,a5,1
    800125f8:	00f037b3          	snez	a5,a5
    800125fc:	0ff7f793          	andi	a5,a5,255
}
    80012600:	853e                	mv	a0,a5
    80012602:	6462                	ld	s0,24(sp)
    80012604:	6105                	addi	sp,sp,32
    80012606:	8082                	ret

0000000080012608 <mmu_map>:
{
    return (pte & 0xE) != 0;
}

bool mmu_map(struct page_table *tab, uint64_t vaddr, uint64_t paddr, uint8_t lvl, uint64_t bits)
{
    80012608:	7175                	addi	sp,sp,-144
    8001260a:	e506                	sd	ra,136(sp)
    8001260c:	e122                	sd	s0,128(sp)
    8001260e:	0900                	addi	s0,sp,144
    80012610:	f8a43c23          	sd	a0,-104(s0)
    80012614:	f8b43823          	sd	a1,-112(s0)
    80012618:	f8c43423          	sd	a2,-120(s0)
    8001261c:	87b6                	mv	a5,a3
    8001261e:	f6e43c23          	sd	a4,-136(s0)
    80012622:	f8f403a3          	sb	a5,-121(s0)
    if (tab == NULL || lvl > MMU_LEVEL_1G || (bits & 0xE) == 0) {
    80012626:	f9843783          	ld	a5,-104(s0)
    8001262a:	cf81                	beqz	a5,80012642 <mmu_map+0x3a>
    8001262c:	f8744783          	lbu	a5,-121(s0)
    80012630:	0ff7f713          	andi	a4,a5,255
    80012634:	4789                	li	a5,2
    80012636:	00e7e663          	bltu	a5,a4,80012642 <mmu_map+0x3a>
    8001263a:	f7843783          	ld	a5,-136(s0)
    8001263e:	8bb9                	andi	a5,a5,14
    80012640:	e399                	bnez	a5,80012646 <mmu_map+0x3e>
        return false;
    80012642:	4781                	li	a5,0
    80012644:	aaf5                	j	80012840 <mmu_map+0x238>
    }

    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    80012646:	f9043783          	ld	a5,-112(s0)
    8001264a:	83b1                	srli	a5,a5,0xc
    8001264c:	1ff7f793          	andi	a5,a5,511
    80012650:	fcf43023          	sd	a5,-64(s0)
    80012654:	f9043783          	ld	a5,-112(s0)
    80012658:	83d5                	srli	a5,a5,0x15
    8001265a:	1ff7f793          	andi	a5,a5,511
    8001265e:	fcf43423          	sd	a5,-56(s0)
                            (vaddr >> ADDR_2_BIT) & 0x1FF};
    80012662:	f9043783          	ld	a5,-112(s0)
    80012666:	83f9                	srli	a5,a5,0x1e
    80012668:	1ff7f793          	andi	a5,a5,511
    const uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, (vaddr >> ADDR_1_BIT) & 0x1FF,
    8001266c:	fcf43823          	sd	a5,-48(s0)
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    80012670:	f8843783          	ld	a5,-120(s0)
    80012674:	83b1                	srli	a5,a5,0xc
    80012676:	1ff7f793          	andi	a5,a5,511
    8001267a:	faf43423          	sd	a5,-88(s0)
    8001267e:	f8843783          	ld	a5,-120(s0)
    80012682:	83d5                	srli	a5,a5,0x15
    80012684:	1ff7f793          	andi	a5,a5,511
    80012688:	faf43823          	sd	a5,-80(s0)
                            (paddr >> ADDR_2_BIT) & 0x3FFFFFF};
    8001268c:	f8843783          	ld	a5,-120(s0)
    80012690:	01e7d713          	srli	a4,a5,0x1e
    80012694:	040007b7          	lui	a5,0x4000
    80012698:	17fd                	addi	a5,a5,-1
    8001269a:	8ff9                	and	a5,a5,a4
    const uint64_t ppn[] = {(paddr >> ADDR_0_BIT) & 0x1FF, (paddr >> ADDR_1_BIT) & 0x1FF,
    8001269c:	faf43c23          	sd	a5,-72(s0)

    int i;
    struct page_table *pt = tab;
    800126a0:	f9843783          	ld	a5,-104(s0)
    800126a4:	fef43023          	sd	a5,-32(s0)

    for (i = MMU_LEVEL_1G; i > lvl; i -= 1) {
    800126a8:	4789                	li	a5,2
    800126aa:	fef42623          	sw	a5,-20(s0)
    800126ae:	aa29                	j	800127c8 <mmu_map+0x1c0>
        unsigned long pte = pt->entries[vpn[i]];
    800126b0:	fec42783          	lw	a5,-20(s0)
    800126b4:	078e                	slli	a5,a5,0x3
    800126b6:	ff040713          	addi	a4,s0,-16
    800126ba:	97ba                	add	a5,a5,a4
    800126bc:	fd07b783          	ld	a5,-48(a5) # 3ffffd0 <i+0x3ffffb0>
    800126c0:	fe043703          	ld	a4,-32(s0)
    800126c4:	078e                	slli	a5,a5,0x3
    800126c6:	97ba                	add	a5,a5,a4
    800126c8:	639c                	ld	a5,0(a5)
    800126ca:	fcf43c23          	sd	a5,-40(s0)

        if (!is_valid(pte)) {
    800126ce:	fd843503          	ld	a0,-40(s0)
    800126d2:	f17ff0ef          	jal	ra,800125e8 <is_valid>
    800126d6:	87aa                	mv	a5,a0
    800126d8:	0017c793          	xori	a5,a5,1
    800126dc:	0ff7f793          	andi	a5,a5,255
    800126e0:	cfd1                	beqz	a5,8001277c <mmu_map+0x174>
            debugf("mmu_map: entry %d in page table at 0x%08lx is invalid\n", vpn[i], pt);
    800126e2:	fec42783          	lw	a5,-20(s0)
    800126e6:	078e                	slli	a5,a5,0x3
    800126e8:	ff040713          	addi	a4,s0,-16
    800126ec:	97ba                	add	a5,a5,a4
    800126ee:	fd07b783          	ld	a5,-48(a5)
    800126f2:	fe043603          	ld	a2,-32(s0)
    800126f6:	85be                	mv	a1,a5
    800126f8:	00007517          	auipc	a0,0x7
    800126fc:	c9850513          	addi	a0,a0,-872 # 80019390 <pow10.0+0x160>
    80012700:	676010ef          	jal	ra,80013d76 <debugf>
            pt = mmu_table_create();
    80012704:	ecbff0ef          	jal	ra,800125ce <mmu_table_create>
    80012708:	fea43023          	sd	a0,-32(s0)
            if (pt == NULL) {
    8001270c:	fe043783          	ld	a5,-32(s0)
    80012710:	eb89                	bnez	a5,80012722 <mmu_map+0x11a>
                debugf("mmu_map: mmu_table_create returned null");
    80012712:	00007517          	auipc	a0,0x7
    80012716:	cb650513          	addi	a0,a0,-842 # 800193c8 <pow10.0+0x198>
    8001271a:	65c010ef          	jal	ra,80013d76 <debugf>
                return false;
    8001271e:	4781                	li	a5,0
    80012720:	a205                	j	80012840 <mmu_map+0x238>
            }
            pt->entries[vpn[i]] = (unsigned long) pt >> 2 | PB_VALID;
    80012722:	fe043783          	ld	a5,-32(s0)
    80012726:	0027d713          	srli	a4,a5,0x2
    8001272a:	fec42783          	lw	a5,-20(s0)
    8001272e:	078e                	slli	a5,a5,0x3
    80012730:	ff040693          	addi	a3,s0,-16
    80012734:	97b6                	add	a5,a5,a3
    80012736:	fd07b783          	ld	a5,-48(a5)
    8001273a:	00176713          	ori	a4,a4,1
    8001273e:	fe043683          	ld	a3,-32(s0)
    80012742:	078e                	slli	a5,a5,0x3
    80012744:	97b6                	add	a5,a5,a3
    80012746:	e398                	sd	a4,0(a5)
            debugf("mmu_map: create a new page table at 0x%08lx\n", pt);
    80012748:	fe043583          	ld	a1,-32(s0)
    8001274c:	00007517          	auipc	a0,0x7
    80012750:	ca450513          	addi	a0,a0,-860 # 800193f0 <pow10.0+0x1c0>
    80012754:	622010ef          	jal	ra,80013d76 <debugf>
            debugf("mmu_map: set entry %d as lvl %d branch in new page table", vpn[i], i);
    80012758:	fec42783          	lw	a5,-20(s0)
    8001275c:	078e                	slli	a5,a5,0x3
    8001275e:	ff040713          	addi	a4,s0,-16
    80012762:	97ba                	add	a5,a5,a4
    80012764:	fd07b783          	ld	a5,-48(a5)
    80012768:	fec42703          	lw	a4,-20(s0)
    8001276c:	863a                	mv	a2,a4
    8001276e:	85be                	mv	a1,a5
    80012770:	00007517          	auipc	a0,0x7
    80012774:	cb050513          	addi	a0,a0,-848 # 80019420 <pow10.0+0x1f0>
    80012778:	5fe010ef          	jal	ra,80013d76 <debugf>
        }
        
        pt = (struct page_table *)((pt->entries[vpn[i]] & 0x3FF) << 2);
    8001277c:	fec42783          	lw	a5,-20(s0)
    80012780:	078e                	slli	a5,a5,0x3
    80012782:	ff040713          	addi	a4,s0,-16
    80012786:	97ba                	add	a5,a5,a4
    80012788:	fd07b783          	ld	a5,-48(a5)
    8001278c:	fe043703          	ld	a4,-32(s0)
    80012790:	078e                	slli	a5,a5,0x3
    80012792:	97ba                	add	a5,a5,a4
    80012794:	639c                	ld	a5,0(a5)
    80012796:	00279713          	slli	a4,a5,0x2
    8001279a:	6785                	lui	a5,0x1
    8001279c:	17f1                	addi	a5,a5,-4
    8001279e:	8ff9                	and	a5,a5,a4
    800127a0:	fef43023          	sd	a5,-32(s0)
        debugf("mmu_map: lvl %d page table is at 0x%08lx\n", i - 1, pt);
    800127a4:	fec42783          	lw	a5,-20(s0)
    800127a8:	37fd                	addiw	a5,a5,-1
    800127aa:	2781                	sext.w	a5,a5
    800127ac:	fe043603          	ld	a2,-32(s0)
    800127b0:	85be                	mv	a1,a5
    800127b2:	00007517          	auipc	a0,0x7
    800127b6:	cae50513          	addi	a0,a0,-850 # 80019460 <pow10.0+0x230>
    800127ba:	5bc010ef          	jal	ra,80013d76 <debugf>
    for (i = MMU_LEVEL_1G; i > lvl; i -= 1) {
    800127be:	fec42783          	lw	a5,-20(s0)
    800127c2:	37fd                	addiw	a5,a5,-1
    800127c4:	fef42623          	sw	a5,-20(s0)
    800127c8:	f8744783          	lbu	a5,-121(s0)
    800127cc:	0007871b          	sext.w	a4,a5
    800127d0:	fec42783          	lw	a5,-20(s0)
    800127d4:	2781                	sext.w	a5,a5
    800127d6:	ecf74de3          	blt	a4,a5,800126b0 <mmu_map+0xa8>
    }

    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    800127da:	fb843783          	ld	a5,-72(s0)
    800127de:	01c79713          	slli	a4,a5,0x1c
                          ppn[1] << PTE_PPN1_BIT |
    800127e2:	fb043783          	ld	a5,-80(s0)
    800127e6:	07ce                	slli	a5,a5,0x13
    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    800127e8:	8f5d                	or	a4,a4,a5
                          ppn[0] << PTE_PPN0_BIT |
    800127ea:	fa843783          	ld	a5,-88(s0)
    800127ee:	07aa                	slli	a5,a5,0xa
                          ppn[1] << PTE_PPN1_BIT |
    800127f0:	8f5d                	or	a4,a4,a5
                          ppn[0] << PTE_PPN0_BIT |
    800127f2:	f7843783          	ld	a5,-136(s0)
    800127f6:	8f5d                	or	a4,a4,a5
    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    800127f8:	fec42783          	lw	a5,-20(s0)
    800127fc:	078e                	slli	a5,a5,0x3
    800127fe:	ff040693          	addi	a3,s0,-16
    80012802:	97b6                	add	a5,a5,a3
    80012804:	fd07b783          	ld	a5,-48(a5) # fd0 <i+0xfb0>
                          bits |
    80012808:	00176713          	ori	a4,a4,1
    pt->entries[vpn[i]] = ppn[2] << PTE_PPN2_BIT |
    8001280c:	fe043683          	ld	a3,-32(s0)
    80012810:	078e                	slli	a5,a5,0x3
    80012812:	97b6                	add	a5,a5,a3
    80012814:	e398                	sd	a4,0(a5)
                          PB_VALID;

    debugf("mmu_map: set entry %d as lvl %d leaf in page table at 0x%08lx\n", vpn[i], i, pt);
    80012816:	fec42783          	lw	a5,-20(s0)
    8001281a:	078e                	slli	a5,a5,0x3
    8001281c:	ff040713          	addi	a4,s0,-16
    80012820:	97ba                	add	a5,a5,a4
    80012822:	fd07b783          	ld	a5,-48(a5)
    80012826:	fec42703          	lw	a4,-20(s0)
    8001282a:	fe043683          	ld	a3,-32(s0)
    8001282e:	863a                	mv	a2,a4
    80012830:	85be                	mv	a1,a5
    80012832:	00007517          	auipc	a0,0x7
    80012836:	c5e50513          	addi	a0,a0,-930 # 80019490 <pow10.0+0x260>
    8001283a:	53c010ef          	jal	ra,80013d76 <debugf>

    return true;
    8001283e:	4785                	li	a5,1
}
    80012840:	853e                	mv	a0,a5
    80012842:	60aa                	ld	ra,136(sp)
    80012844:	640a                	ld	s0,128(sp)
    80012846:	6149                	addi	sp,sp,144
    80012848:	8082                	ret

000000008001284a <mmu_free>:

void mmu_free(struct page_table *tab) 
{ 
    8001284a:	7179                	addi	sp,sp,-48
    8001284c:	f406                	sd	ra,40(sp)
    8001284e:	f022                	sd	s0,32(sp)
    80012850:	1800                	addi	s0,sp,48
    80012852:	fca43c23          	sd	a0,-40(s0)
    uint64_t entry; 
    int i; 

    if (tab == NULL) { 
    80012856:	fd843783          	ld	a5,-40(s0)
    8001285a:	c3b5                	beqz	a5,800128be <mmu_free+0x74>
        return; 
    } 

    for (i = 0; i < (PAGE_SIZE / 8); i += 1) { 
    8001285c:	fe042623          	sw	zero,-20(s0)
    80012860:	a091                	j	800128a4 <mmu_free+0x5a>
        entry = tab->entries[i]; 
    80012862:	fd843703          	ld	a4,-40(s0)
    80012866:	fec42783          	lw	a5,-20(s0)
    8001286a:	078e                	slli	a5,a5,0x3
    8001286c:	97ba                	add	a5,a5,a4
    8001286e:	639c                	ld	a5,0(a5)
    80012870:	fef43023          	sd	a5,-32(s0)
        if (entry & PB_VALID) {
    80012874:	fe043783          	ld	a5,-32(s0)
    80012878:	8b85                	andi	a5,a5,1
    8001287a:	cb81                	beqz	a5,8001288a <mmu_free+0x40>
            mmu_free((struct page_table *)(entry & ~0xFFF)); // Recurse into the next level
    8001287c:	fe043703          	ld	a4,-32(s0)
    80012880:	77fd                	lui	a5,0xfffff
    80012882:	8ff9                	and	a5,a5,a4
    80012884:	853e                	mv	a0,a5
    80012886:	fc5ff0ef          	jal	ra,8001284a <mmu_free>
        }
        tab->entries[i] = 0; 
    8001288a:	fd843703          	ld	a4,-40(s0)
    8001288e:	fec42783          	lw	a5,-20(s0)
    80012892:	078e                	slli	a5,a5,0x3
    80012894:	97ba                	add	a5,a5,a4
    80012896:	0007b023          	sd	zero,0(a5) # fffffffffffff000 <_heap_end+0xffffffff77fef000>
    for (i = 0; i < (PAGE_SIZE / 8); i += 1) { 
    8001289a:	fec42783          	lw	a5,-20(s0)
    8001289e:	2785                	addiw	a5,a5,1
    800128a0:	fef42623          	sw	a5,-20(s0)
    800128a4:	fec42783          	lw	a5,-20(s0)
    800128a8:	0007871b          	sext.w	a4,a5
    800128ac:	1ff00793          	li	a5,511
    800128b0:	fae7d9e3          	bge	a5,a4,80012862 <mmu_free+0x18>
    } 

    page_free(tab); 
    800128b4:	fd843503          	ld	a0,-40(s0)
    800128b8:	0aa020ef          	jal	ra,80014962 <page_free>
    800128bc:	a011                	j	800128c0 <mmu_free+0x76>
        return; 
    800128be:	0001                	nop
}
    800128c0:	70a2                	ld	ra,40(sp)
    800128c2:	7402                	ld	s0,32(sp)
    800128c4:	6145                	addi	sp,sp,48
    800128c6:	8082                	ret

00000000800128c8 <mmu_translate>:

uint64_t mmu_translate(const struct page_table *tab, uint64_t vaddr) 
{ 
    800128c8:	715d                	addi	sp,sp,-80
    800128ca:	e4a2                	sd	s0,72(sp)
    800128cc:	0880                	addi	s0,sp,80
    800128ce:	faa43c23          	sd	a0,-72(s0)
    800128d2:	fab43823          	sd	a1,-80(s0)
    int i; 

    if (tab == NULL) { 
    800128d6:	fb843783          	ld	a5,-72(s0)
    800128da:	e399                	bnez	a5,800128e0 <mmu_translate+0x18>
        return MMU_TRANSLATE_PAGE_FAULT; 
    800128dc:	57fd                	li	a5,-1
    800128de:	a84d                	j	80012990 <mmu_translate+0xc8>
    } 

    // Extract the virtual page numbers
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    800128e0:	fb043783          	ld	a5,-80(s0)
    800128e4:	83b1                	srli	a5,a5,0xc
    800128e6:	1ff7f793          	andi	a5,a5,511
    800128ea:	fcf43423          	sd	a5,-56(s0)
                      (vaddr >> ADDR_1_BIT) & 0x1FF, 
    800128ee:	fb043783          	ld	a5,-80(s0)
    800128f2:	83d5                	srli	a5,a5,0x15
    800128f4:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    800128f8:	fcf43823          	sd	a5,-48(s0)
                      (vaddr >> ADDR_2_BIT) & 0x1FF};
    800128fc:	fb043783          	ld	a5,-80(s0)
    80012900:	83f9                	srli	a5,a5,0x1e
    80012902:	1ff7f793          	andi	a5,a5,511
    uint64_t vpn[] = {(vaddr >> ADDR_0_BIT) & 0x1FF, 
    80012906:	fcf43c23          	sd	a5,-40(s0)

    // Traverse the page table hierarchy using the virtual page numbers
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    8001290a:	4789                	li	a5,2
    8001290c:	fef42623          	sw	a5,-20(s0)
    80012910:	a881                	j	80012960 <mmu_translate+0x98>
        if (!(tab->entries[vpn[i]] & PB_VALID)) {
    80012912:	fec42783          	lw	a5,-20(s0)
    80012916:	078e                	slli	a5,a5,0x3
    80012918:	ff040713          	addi	a4,s0,-16
    8001291c:	97ba                	add	a5,a5,a4
    8001291e:	fd87b783          	ld	a5,-40(a5)
    80012922:	fb843703          	ld	a4,-72(s0)
    80012926:	078e                	slli	a5,a5,0x3
    80012928:	97ba                	add	a5,a5,a4
    8001292a:	639c                	ld	a5,0(a5)
    8001292c:	8b85                	andi	a5,a5,1
    8001292e:	e399                	bnez	a5,80012934 <mmu_translate+0x6c>
            return MMU_TRANSLATE_PAGE_FAULT; // Entry is not valid
    80012930:	57fd                	li	a5,-1
    80012932:	a8b9                	j	80012990 <mmu_translate+0xc8>
        }
        tab = (struct page_table *)(tab->entries[vpn[i]] & ~0xFFF);
    80012934:	fec42783          	lw	a5,-20(s0)
    80012938:	078e                	slli	a5,a5,0x3
    8001293a:	ff040713          	addi	a4,s0,-16
    8001293e:	97ba                	add	a5,a5,a4
    80012940:	fd87b783          	ld	a5,-40(a5)
    80012944:	fb843703          	ld	a4,-72(s0)
    80012948:	078e                	slli	a5,a5,0x3
    8001294a:	97ba                	add	a5,a5,a4
    8001294c:	6398                	ld	a4,0(a5)
    8001294e:	77fd                	lui	a5,0xfffff
    80012950:	8ff9                	and	a5,a5,a4
    80012952:	faf43c23          	sd	a5,-72(s0)
    for (i = MMU_LEVEL_1G; i >= MMU_LEVEL_4K; i--) {
    80012956:	fec42783          	lw	a5,-20(s0)
    8001295a:	37fd                	addiw	a5,a5,-1
    8001295c:	fef42623          	sw	a5,-20(s0)
    80012960:	fec42783          	lw	a5,-20(s0)
    80012964:	2781                	sext.w	a5,a5
    80012966:	fa07d6e3          	bgez	a5,80012912 <mmu_translate+0x4a>
    }

    // Extract the physical address from the final page table entry
    uint64_t paddr = tab->entries[vpn[MMU_LEVEL_4K]] & ~0xFFF;
    8001296a:	fc843783          	ld	a5,-56(s0)
    8001296e:	fb843703          	ld	a4,-72(s0)
    80012972:	078e                	slli	a5,a5,0x3
    80012974:	97ba                	add	a5,a5,a4
    80012976:	6398                	ld	a4,0(a5)
    80012978:	77fd                	lui	a5,0xfffff
    8001297a:	8ff9                	and	a5,a5,a4
    8001297c:	fef43023          	sd	a5,-32(s0)
    return paddr | (vaddr & (PAGE_SIZE - 1)); // Combine with the offset within the page
    80012980:	fb043703          	ld	a4,-80(s0)
    80012984:	6785                	lui	a5,0x1
    80012986:	17fd                	addi	a5,a5,-1
    80012988:	8f7d                	and	a4,a4,a5
    8001298a:	fe043783          	ld	a5,-32(s0)
    8001298e:	8fd9                	or	a5,a5,a4
}
    80012990:	853e                	mv	a0,a5
    80012992:	6426                	ld	s0,72(sp)
    80012994:	6161                	addi	sp,sp,80
    80012996:	8082                	ret

0000000080012998 <mmu_map_range>:
                       uint64_t start_virt, 
                       uint64_t end_virt, 
                       uint64_t start_phys,
                       uint8_t lvl, 
                       uint64_t bits)
{
    80012998:	711d                	addi	sp,sp,-96
    8001299a:	ec86                	sd	ra,88(sp)
    8001299c:	e8a2                	sd	s0,80(sp)
    8001299e:	1080                	addi	s0,sp,96
    800129a0:	fca43423          	sd	a0,-56(s0)
    800129a4:	fcb43023          	sd	a1,-64(s0)
    800129a8:	fac43c23          	sd	a2,-72(s0)
    800129ac:	fad43823          	sd	a3,-80(s0)
    800129b0:	faf43023          	sd	a5,-96(s0)
    800129b4:	87ba                	mv	a5,a4
    800129b6:	faf407a3          	sb	a5,-81(s0)
    start_virt            = ALIGN_DOWN_POT(start_virt, PAGE_SIZE_AT_LVL(lvl));
    800129ba:	faf44783          	lbu	a5,-81(s0)
    800129be:	2781                	sext.w	a5,a5
    800129c0:	873e                	mv	a4,a5
    800129c2:	87ba                	mv	a5,a4
    800129c4:	0037979b          	slliw	a5,a5,0x3
    800129c8:	9fb9                	addw	a5,a5,a4
    800129ca:	2781                	sext.w	a5,a5
    800129cc:	27b1                	addiw	a5,a5,12
    800129ce:	2781                	sext.w	a5,a5
    800129d0:	4705                	li	a4,1
    800129d2:	00f717bb          	sllw	a5,a4,a5
    800129d6:	2781                	sext.w	a5,a5
    800129d8:	40f007bb          	negw	a5,a5
    800129dc:	2781                	sext.w	a5,a5
    800129de:	873e                	mv	a4,a5
    800129e0:	fc043783          	ld	a5,-64(s0)
    800129e4:	8ff9                	and	a5,a5,a4
    800129e6:	fcf43023          	sd	a5,-64(s0)
    end_virt              = ALIGN_UP_POT(end_virt, PAGE_SIZE_AT_LVL(lvl));
    800129ea:	faf44783          	lbu	a5,-81(s0)
    800129ee:	2781                	sext.w	a5,a5
    800129f0:	873e                	mv	a4,a5
    800129f2:	87ba                	mv	a5,a4
    800129f4:	0037979b          	slliw	a5,a5,0x3
    800129f8:	9fb9                	addw	a5,a5,a4
    800129fa:	2781                	sext.w	a5,a5
    800129fc:	27b1                	addiw	a5,a5,12
    800129fe:	2781                	sext.w	a5,a5
    80012a00:	4705                	li	a4,1
    80012a02:	00f717bb          	sllw	a5,a4,a5
    80012a06:	2781                	sext.w	a5,a5
    80012a08:	873e                	mv	a4,a5
    80012a0a:	fb843783          	ld	a5,-72(s0)
    80012a0e:	97ba                	add	a5,a5,a4
    80012a10:	fff78713          	addi	a4,a5,-1 # fff <i+0xfdf>
    80012a14:	faf44783          	lbu	a5,-81(s0)
    80012a18:	2781                	sext.w	a5,a5
    80012a1a:	86be                	mv	a3,a5
    80012a1c:	87b6                	mv	a5,a3
    80012a1e:	0037979b          	slliw	a5,a5,0x3
    80012a22:	9fb5                	addw	a5,a5,a3
    80012a24:	2781                	sext.w	a5,a5
    80012a26:	27b1                	addiw	a5,a5,12
    80012a28:	2781                	sext.w	a5,a5
    80012a2a:	4685                	li	a3,1
    80012a2c:	00f697bb          	sllw	a5,a3,a5
    80012a30:	2781                	sext.w	a5,a5
    80012a32:	40f007bb          	negw	a5,a5
    80012a36:	2781                	sext.w	a5,a5
    80012a38:	8ff9                	and	a5,a5,a4
    80012a3a:	faf43c23          	sd	a5,-72(s0)
    uint64_t num_bytes    = end_virt - start_virt;
    80012a3e:	fb843703          	ld	a4,-72(s0)
    80012a42:	fc043783          	ld	a5,-64(s0)
    80012a46:	40f707b3          	sub	a5,a4,a5
    80012a4a:	fcf43c23          	sd	a5,-40(s0)
    uint64_t pages_mapped = 0;
    80012a4e:	fe043423          	sd	zero,-24(s0)

    uint64_t i;
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    80012a52:	fe043023          	sd	zero,-32(s0)
    80012a56:	a0ad                	j	80012ac0 <mmu_map_range+0x128>
        if (!mmu_map(tab, start_virt + i, start_phys + i, lvl, bits)) {
    80012a58:	fc043703          	ld	a4,-64(s0)
    80012a5c:	fe043783          	ld	a5,-32(s0)
    80012a60:	00f705b3          	add	a1,a4,a5
    80012a64:	fb043703          	ld	a4,-80(s0)
    80012a68:	fe043783          	ld	a5,-32(s0)
    80012a6c:	97ba                	add	a5,a5,a4
    80012a6e:	faf44683          	lbu	a3,-81(s0)
    80012a72:	fa043703          	ld	a4,-96(s0)
    80012a76:	863e                	mv	a2,a5
    80012a78:	fc843503          	ld	a0,-56(s0)
    80012a7c:	b8dff0ef          	jal	ra,80012608 <mmu_map>
    80012a80:	87aa                	mv	a5,a0
    80012a82:	0017c793          	xori	a5,a5,1
    80012a86:	0ff7f793          	andi	a5,a5,255
    80012a8a:	e3b1                	bnez	a5,80012ace <mmu_map_range+0x136>
            break;
        }
        pages_mapped += 1;
    80012a8c:	fe843783          	ld	a5,-24(s0)
    80012a90:	0785                	addi	a5,a5,1
    80012a92:	fef43423          	sd	a5,-24(s0)
    for (i = 0; i < num_bytes; i += PAGE_SIZE_AT_LVL(lvl)) {
    80012a96:	faf44783          	lbu	a5,-81(s0)
    80012a9a:	2781                	sext.w	a5,a5
    80012a9c:	873e                	mv	a4,a5
    80012a9e:	87ba                	mv	a5,a4
    80012aa0:	0037979b          	slliw	a5,a5,0x3
    80012aa4:	9fb9                	addw	a5,a5,a4
    80012aa6:	2781                	sext.w	a5,a5
    80012aa8:	27b1                	addiw	a5,a5,12
    80012aaa:	2781                	sext.w	a5,a5
    80012aac:	4705                	li	a4,1
    80012aae:	00f717bb          	sllw	a5,a4,a5
    80012ab2:	2781                	sext.w	a5,a5
    80012ab4:	873e                	mv	a4,a5
    80012ab6:	fe043783          	ld	a5,-32(s0)
    80012aba:	97ba                	add	a5,a5,a4
    80012abc:	fef43023          	sd	a5,-32(s0)
    80012ac0:	fe043703          	ld	a4,-32(s0)
    80012ac4:	fd843783          	ld	a5,-40(s0)
    80012ac8:	f8f768e3          	bltu	a4,a5,80012a58 <mmu_map_range+0xc0>
    80012acc:	a011                	j	80012ad0 <mmu_map_range+0x138>
            break;
    80012ace:	0001                	nop
    }
    return pages_mapped;
    80012ad0:	fe843783          	ld	a5,-24(s0)
}
    80012ad4:	853e                	mv	a0,a5
    80012ad6:	60e6                	ld	ra,88(sp)
    80012ad8:	6446                	ld	s0,80(sp)
    80012ada:	6125                	addi	sp,sp,96
    80012adc:	8082                	ret

0000000080012ade <insert_block>:
 * into free list, sorted by addr.
 * If disabled, add block has new head of
 * the free list.
 */
static void insert_block(Block *block)
{
    80012ade:	7179                	addi	sp,sp,-48
    80012ae0:	f422                	sd	s0,40(sp)
    80012ae2:	1800                	addi	s0,sp,48
    80012ae4:	fca43c23          	sd	a0,-40(s0)
    Block *ptr  = heap->free;
    80012ae8:	00005797          	auipc	a5,0x5
    80012aec:	54078793          	addi	a5,a5,1344 # 80018028 <heap>
    80012af0:	639c                	ld	a5,0(a5)
    80012af2:	639c                	ld	a5,0(a5)
    80012af4:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80012af8:	fe043023          	sd	zero,-32(s0)
    while (ptr != NULL) {
    80012afc:	a01d                	j	80012b22 <insert_block+0x44>
        if ((size_t)block->addr <= (size_t)ptr->addr) {
    80012afe:	fd843783          	ld	a5,-40(s0)
    80012b02:	639c                	ld	a5,0(a5)
    80012b04:	873e                	mv	a4,a5
    80012b06:	fe843783          	ld	a5,-24(s0)
    80012b0a:	639c                	ld	a5,0(a5)
    80012b0c:	00e7ff63          	bgeu	a5,a4,80012b2a <insert_block+0x4c>
            break;
        }
        prev = ptr;
    80012b10:	fe843783          	ld	a5,-24(s0)
    80012b14:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    80012b18:	fe843783          	ld	a5,-24(s0)
    80012b1c:	679c                	ld	a5,8(a5)
    80012b1e:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80012b22:	fe843783          	ld	a5,-24(s0)
    80012b26:	ffe1                	bnez	a5,80012afe <insert_block+0x20>
    80012b28:	a011                	j	80012b2c <insert_block+0x4e>
            break;
    80012b2a:	0001                	nop
    }
    if (prev != NULL) {
    80012b2c:	fe043783          	ld	a5,-32(s0)
    80012b30:	c799                	beqz	a5,80012b3e <insert_block+0x60>
        prev->next = block;
    80012b32:	fe043783          	ld	a5,-32(s0)
    80012b36:	fd843703          	ld	a4,-40(s0)
    80012b3a:	e798                	sd	a4,8(a5)
    80012b3c:	a809                	j	80012b4e <insert_block+0x70>
    }
    else {
        heap->free = block;
    80012b3e:	00005797          	auipc	a5,0x5
    80012b42:	4ea78793          	addi	a5,a5,1258 # 80018028 <heap>
    80012b46:	639c                	ld	a5,0(a5)
    80012b48:	fd843703          	ld	a4,-40(s0)
    80012b4c:	e398                	sd	a4,0(a5)
    }
    block->next = ptr;
    80012b4e:	fd843783          	ld	a5,-40(s0)
    80012b52:	fe843703          	ld	a4,-24(s0)
    80012b56:	e798                	sd	a4,8(a5)
}
    80012b58:	0001                	nop
    80012b5a:	7422                	ld	s0,40(sp)
    80012b5c:	6145                	addi	sp,sp,48
    80012b5e:	8082                	ret

0000000080012b60 <release_blocks>:

#ifndef TA_DISABLE_COMPACT
static void release_blocks(Block *scan, Block *to)
{
    80012b60:	7179                	addi	sp,sp,-48
    80012b62:	f422                	sd	s0,40(sp)
    80012b64:	1800                	addi	s0,sp,48
    80012b66:	fca43c23          	sd	a0,-40(s0)
    80012b6a:	fcb43823          	sd	a1,-48(s0)
    Block *scan_next;
    while (scan != to) {
    80012b6e:	a099                	j	80012bb4 <release_blocks+0x54>
        scan_next   = scan->next;
    80012b70:	fd843783          	ld	a5,-40(s0)
    80012b74:	679c                	ld	a5,8(a5)
    80012b76:	fef43423          	sd	a5,-24(s0)
        scan->next  = heap->fresh;
    80012b7a:	00005797          	auipc	a5,0x5
    80012b7e:	4ae78793          	addi	a5,a5,1198 # 80018028 <heap>
    80012b82:	639c                	ld	a5,0(a5)
    80012b84:	6b98                	ld	a4,16(a5)
    80012b86:	fd843783          	ld	a5,-40(s0)
    80012b8a:	e798                	sd	a4,8(a5)
        heap->fresh = scan;
    80012b8c:	00005797          	auipc	a5,0x5
    80012b90:	49c78793          	addi	a5,a5,1180 # 80018028 <heap>
    80012b94:	639c                	ld	a5,0(a5)
    80012b96:	fd843703          	ld	a4,-40(s0)
    80012b9a:	eb98                	sd	a4,16(a5)
        scan->addr  = 0;
    80012b9c:	fd843783          	ld	a5,-40(s0)
    80012ba0:	0007b023          	sd	zero,0(a5)
        scan->size  = 0;
    80012ba4:	fd843783          	ld	a5,-40(s0)
    80012ba8:	0007b823          	sd	zero,16(a5)
        scan        = scan_next;
    80012bac:	fe843783          	ld	a5,-24(s0)
    80012bb0:	fcf43c23          	sd	a5,-40(s0)
    while (scan != to) {
    80012bb4:	fd843703          	ld	a4,-40(s0)
    80012bb8:	fd043783          	ld	a5,-48(s0)
    80012bbc:	faf71ae3          	bne	a4,a5,80012b70 <release_blocks+0x10>
    }
}
    80012bc0:	0001                	nop
    80012bc2:	0001                	nop
    80012bc4:	7422                	ld	s0,40(sp)
    80012bc6:	6145                	addi	sp,sp,48
    80012bc8:	8082                	ret

0000000080012bca <compact>:

static void compact()
{
    80012bca:	7139                	addi	sp,sp,-64
    80012bcc:	fc06                	sd	ra,56(sp)
    80012bce:	f822                	sd	s0,48(sp)
    80012bd0:	0080                	addi	s0,sp,64
    Block *ptr = heap->free;
    80012bd2:	00005797          	auipc	a5,0x5
    80012bd6:	45678793          	addi	a5,a5,1110 # 80018028 <heap>
    80012bda:	639c                	ld	a5,0(a5)
    80012bdc:	639c                	ld	a5,0(a5)
    80012bde:	fef43423          	sd	a5,-24(s0)
    Block *prev;
    Block *scan;
    while (ptr != NULL) {
    80012be2:	a075                	j	80012c8e <compact+0xc4>
        prev = ptr;
    80012be4:	fe843783          	ld	a5,-24(s0)
    80012be8:	fef43023          	sd	a5,-32(s0)
        scan = ptr->next;
    80012bec:	fe843783          	ld	a5,-24(s0)
    80012bf0:	679c                	ld	a5,8(a5)
    80012bf2:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    80012bf6:	a811                	j	80012c0a <compact+0x40>
            prev = scan;
    80012bf8:	fd843783          	ld	a5,-40(s0)
    80012bfc:	fef43023          	sd	a5,-32(s0)
            scan = scan->next;
    80012c00:	fd843783          	ld	a5,-40(s0)
    80012c04:	679c                	ld	a5,8(a5)
    80012c06:	fcf43c23          	sd	a5,-40(s0)
        while (scan != NULL && (size_t)prev->addr + prev->size == (size_t)scan->addr) {
    80012c0a:	fd843783          	ld	a5,-40(s0)
    80012c0e:	cf91                	beqz	a5,80012c2a <compact+0x60>
    80012c10:	fe043783          	ld	a5,-32(s0)
    80012c14:	639c                	ld	a5,0(a5)
    80012c16:	873e                	mv	a4,a5
    80012c18:	fe043783          	ld	a5,-32(s0)
    80012c1c:	6b9c                	ld	a5,16(a5)
    80012c1e:	97ba                	add	a5,a5,a4
    80012c20:	fd843703          	ld	a4,-40(s0)
    80012c24:	6318                	ld	a4,0(a4)
    80012c26:	fce789e3          	beq	a5,a4,80012bf8 <compact+0x2e>
        }
        if (prev != ptr) {
    80012c2a:	fe043703          	ld	a4,-32(s0)
    80012c2e:	fe843783          	ld	a5,-24(s0)
    80012c32:	04f70963          	beq	a4,a5,80012c84 <compact+0xba>
            size_t new_size = (size_t)prev->addr - (size_t)ptr->addr + prev->size;
    80012c36:	fe043783          	ld	a5,-32(s0)
    80012c3a:	639c                	ld	a5,0(a5)
    80012c3c:	873e                	mv	a4,a5
    80012c3e:	fe843783          	ld	a5,-24(s0)
    80012c42:	639c                	ld	a5,0(a5)
    80012c44:	8f1d                	sub	a4,a4,a5
    80012c46:	fe043783          	ld	a5,-32(s0)
    80012c4a:	6b9c                	ld	a5,16(a5)
    80012c4c:	97ba                	add	a5,a5,a4
    80012c4e:	fcf43823          	sd	a5,-48(s0)
            ptr->size       = new_size;
    80012c52:	fe843783          	ld	a5,-24(s0)
    80012c56:	fd043703          	ld	a4,-48(s0)
    80012c5a:	eb98                	sd	a4,16(a5)
            Block *next     = prev->next;
    80012c5c:	fe043783          	ld	a5,-32(s0)
    80012c60:	679c                	ld	a5,8(a5)
    80012c62:	fcf43423          	sd	a5,-56(s0)
            // make merged blocks available
            release_blocks(ptr->next, prev->next);
    80012c66:	fe843783          	ld	a5,-24(s0)
    80012c6a:	6798                	ld	a4,8(a5)
    80012c6c:	fe043783          	ld	a5,-32(s0)
    80012c70:	679c                	ld	a5,8(a5)
    80012c72:	85be                	mv	a1,a5
    80012c74:	853a                	mv	a0,a4
    80012c76:	eebff0ef          	jal	ra,80012b60 <release_blocks>
            // relink
            ptr->next = next;
    80012c7a:	fe843783          	ld	a5,-24(s0)
    80012c7e:	fc843703          	ld	a4,-56(s0)
    80012c82:	e798                	sd	a4,8(a5)
        }
        ptr = ptr->next;
    80012c84:	fe843783          	ld	a5,-24(s0)
    80012c88:	679c                	ld	a5,8(a5)
    80012c8a:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80012c8e:	fe843783          	ld	a5,-24(s0)
    80012c92:	fba9                	bnez	a5,80012be4 <compact+0x1a>
    }
}
    80012c94:	0001                	nop
    80012c96:	0001                	nop
    80012c98:	70e2                	ld	ra,56(sp)
    80012c9a:	7442                	ld	s0,48(sp)
    80012c9c:	6121                	addi	sp,sp,64
    80012c9e:	8082                	ret

0000000080012ca0 <init>:
#endif

static bool init(const void *base, const void *limit, const size_t heap_blocks,
                 const size_t split_thresh, const size_t alignment)
{
    80012ca0:	715d                	addi	sp,sp,-80
    80012ca2:	e4a2                	sd	s0,72(sp)
    80012ca4:	0880                	addi	s0,sp,80
    80012ca6:	fca43c23          	sd	a0,-40(s0)
    80012caa:	fcb43823          	sd	a1,-48(s0)
    80012cae:	fcc43423          	sd	a2,-56(s0)
    80012cb2:	fcd43023          	sd	a3,-64(s0)
    80012cb6:	fae43c23          	sd	a4,-72(s0)
    heap              = (Heap *)base;
    80012cba:	00005797          	auipc	a5,0x5
    80012cbe:	36e78793          	addi	a5,a5,878 # 80018028 <heap>
    80012cc2:	fd843703          	ld	a4,-40(s0)
    80012cc6:	e398                	sd	a4,0(a5)
    heap_limit        = limit;
    80012cc8:	00005797          	auipc	a5,0x5
    80012ccc:	36878793          	addi	a5,a5,872 # 80018030 <heap_limit>
    80012cd0:	fd043703          	ld	a4,-48(s0)
    80012cd4:	e398                	sd	a4,0(a5)
    heap_split_thresh = split_thresh;
    80012cd6:	00005797          	auipc	a5,0x5
    80012cda:	36278793          	addi	a5,a5,866 # 80018038 <heap_split_thresh>
    80012cde:	fc043703          	ld	a4,-64(s0)
    80012ce2:	e398                	sd	a4,0(a5)
    heap_alignment    = alignment;
    80012ce4:	00005797          	auipc	a5,0x5
    80012ce8:	35c78793          	addi	a5,a5,860 # 80018040 <heap_alignment>
    80012cec:	fb843703          	ld	a4,-72(s0)
    80012cf0:	e398                	sd	a4,0(a5)
    heap_max_blocks   = heap_blocks;
    80012cf2:	00005797          	auipc	a5,0x5
    80012cf6:	35678793          	addi	a5,a5,854 # 80018048 <heap_max_blocks>
    80012cfa:	fc843703          	ld	a4,-56(s0)
    80012cfe:	e398                	sd	a4,0(a5)

    heap->free        = NULL;
    80012d00:	00005797          	auipc	a5,0x5
    80012d04:	32878793          	addi	a5,a5,808 # 80018028 <heap>
    80012d08:	639c                	ld	a5,0(a5)
    80012d0a:	0007b023          	sd	zero,0(a5)
    heap->used        = NULL;
    80012d0e:	00005797          	auipc	a5,0x5
    80012d12:	31a78793          	addi	a5,a5,794 # 80018028 <heap>
    80012d16:	639c                	ld	a5,0(a5)
    80012d18:	0007b423          	sd	zero,8(a5)
    heap->fresh       = (Block *)(heap + 1);
    80012d1c:	00005797          	auipc	a5,0x5
    80012d20:	30c78793          	addi	a5,a5,780 # 80018028 <heap>
    80012d24:	6398                	ld	a4,0(a5)
    80012d26:	00005797          	auipc	a5,0x5
    80012d2a:	30278793          	addi	a5,a5,770 # 80018028 <heap>
    80012d2e:	639c                	ld	a5,0(a5)
    80012d30:	02070713          	addi	a4,a4,32
    80012d34:	eb98                	sd	a4,16(a5)
    heap->top         = (size_t)(heap->fresh + heap_blocks);
    80012d36:	00005797          	auipc	a5,0x5
    80012d3a:	2f278793          	addi	a5,a5,754 # 80018028 <heap>
    80012d3e:	639c                	ld	a5,0(a5)
    80012d40:	6b94                	ld	a3,16(a5)
    80012d42:	fc843703          	ld	a4,-56(s0)
    80012d46:	87ba                	mv	a5,a4
    80012d48:	0786                	slli	a5,a5,0x1
    80012d4a:	97ba                	add	a5,a5,a4
    80012d4c:	078e                	slli	a5,a5,0x3
    80012d4e:	00f68733          	add	a4,a3,a5
    80012d52:	00005797          	auipc	a5,0x5
    80012d56:	2d678793          	addi	a5,a5,726 # 80018028 <heap>
    80012d5a:	639c                	ld	a5,0(a5)
    80012d5c:	ef98                	sd	a4,24(a5)

    Block *block      = heap->fresh;
    80012d5e:	00005797          	auipc	a5,0x5
    80012d62:	2ca78793          	addi	a5,a5,714 # 80018028 <heap>
    80012d66:	639c                	ld	a5,0(a5)
    80012d68:	6b9c                	ld	a5,16(a5)
    80012d6a:	fef43423          	sd	a5,-24(s0)
    size_t i          = heap_max_blocks - 1;
    80012d6e:	00005797          	auipc	a5,0x5
    80012d72:	2da78793          	addi	a5,a5,730 # 80018048 <heap_max_blocks>
    80012d76:	639c                	ld	a5,0(a5)
    80012d78:	17fd                	addi	a5,a5,-1
    80012d7a:	fef43023          	sd	a5,-32(s0)
    while (i--) {
    80012d7e:	a829                	j	80012d98 <init+0xf8>
        block->next = block + 1;
    80012d80:	fe843783          	ld	a5,-24(s0)
    80012d84:	01878713          	addi	a4,a5,24
    80012d88:	fe843783          	ld	a5,-24(s0)
    80012d8c:	e798                	sd	a4,8(a5)
        block++;
    80012d8e:	fe843783          	ld	a5,-24(s0)
    80012d92:	07e1                	addi	a5,a5,24
    80012d94:	fef43423          	sd	a5,-24(s0)
    while (i--) {
    80012d98:	fe043783          	ld	a5,-32(s0)
    80012d9c:	fff78713          	addi	a4,a5,-1
    80012da0:	fee43023          	sd	a4,-32(s0)
    80012da4:	fff1                	bnez	a5,80012d80 <init+0xe0>
    }
    block->next = NULL;
    80012da6:	fe843783          	ld	a5,-24(s0)
    80012daa:	0007b423          	sd	zero,8(a5)
    return true;
    80012dae:	4785                	li	a5,1
}
    80012db0:	853e                	mv	a0,a5
    80012db2:	6426                	ld	s0,72(sp)
    80012db4:	6161                	addi	sp,sp,80
    80012db6:	8082                	ret

0000000080012db8 <free>:

static bool free(const void *free)
{
    80012db8:	7179                	addi	sp,sp,-48
    80012dba:	f406                	sd	ra,40(sp)
    80012dbc:	f022                	sd	s0,32(sp)
    80012dbe:	1800                	addi	s0,sp,48
    80012dc0:	fca43c23          	sd	a0,-40(s0)
    Block *block = heap->used;
    80012dc4:	00005797          	auipc	a5,0x5
    80012dc8:	26478793          	addi	a5,a5,612 # 80018028 <heap>
    80012dcc:	639c                	ld	a5,0(a5)
    80012dce:	679c                	ld	a5,8(a5)
    80012dd0:	fef43423          	sd	a5,-24(s0)
    Block *prev  = NULL;
    80012dd4:	fe043023          	sd	zero,-32(s0)
    while (block != NULL) {
    80012dd8:	a8a1                	j	80012e30 <free+0x78>
        if (free == block->addr) {
    80012dda:	fe843783          	ld	a5,-24(s0)
    80012dde:	639c                	ld	a5,0(a5)
    80012de0:	fd843703          	ld	a4,-40(s0)
    80012de4:	02f71d63          	bne	a4,a5,80012e1e <free+0x66>
            if (prev) {
    80012de8:	fe043783          	ld	a5,-32(s0)
    80012dec:	cb81                	beqz	a5,80012dfc <free+0x44>
                prev->next = block->next;
    80012dee:	fe843783          	ld	a5,-24(s0)
    80012df2:	6798                	ld	a4,8(a5)
    80012df4:	fe043783          	ld	a5,-32(s0)
    80012df8:	e798                	sd	a4,8(a5)
    80012dfa:	a811                	j	80012e0e <free+0x56>
            }
            else {
                heap->used = block->next;
    80012dfc:	00005797          	auipc	a5,0x5
    80012e00:	22c78793          	addi	a5,a5,556 # 80018028 <heap>
    80012e04:	639c                	ld	a5,0(a5)
    80012e06:	fe843703          	ld	a4,-24(s0)
    80012e0a:	6718                	ld	a4,8(a4)
    80012e0c:	e798                	sd	a4,8(a5)
            }
            insert_block(block);
    80012e0e:	fe843503          	ld	a0,-24(s0)
    80012e12:	ccdff0ef          	jal	ra,80012ade <insert_block>
            compact();
    80012e16:	db5ff0ef          	jal	ra,80012bca <compact>
            return true;
    80012e1a:	4785                	li	a5,1
    80012e1c:	a831                	j	80012e38 <free+0x80>
        }
        prev  = block;
    80012e1e:	fe843783          	ld	a5,-24(s0)
    80012e22:	fef43023          	sd	a5,-32(s0)
        block = block->next;
    80012e26:	fe843783          	ld	a5,-24(s0)
    80012e2a:	679c                	ld	a5,8(a5)
    80012e2c:	fef43423          	sd	a5,-24(s0)
    while (block != NULL) {
    80012e30:	fe843783          	ld	a5,-24(s0)
    80012e34:	f3dd                	bnez	a5,80012dda <free+0x22>
    }
    return false;
    80012e36:	4781                	li	a5,0
}
    80012e38:	853e                	mv	a0,a5
    80012e3a:	70a2                	ld	ra,40(sp)
    80012e3c:	7402                	ld	s0,32(sp)
    80012e3e:	6145                	addi	sp,sp,48
    80012e40:	8082                	ret

0000000080012e42 <alloc_block>:

static Block *alloc_block(size_t num)
{
    80012e42:	711d                	addi	sp,sp,-96
    80012e44:	ec86                	sd	ra,88(sp)
    80012e46:	e8a2                	sd	s0,80(sp)
    80012e48:	1080                	addi	s0,sp,96
    80012e4a:	faa43423          	sd	a0,-88(s0)
    Block *ptr  = heap->free;
    80012e4e:	00005797          	auipc	a5,0x5
    80012e52:	1da78793          	addi	a5,a5,474 # 80018028 <heap>
    80012e56:	639c                	ld	a5,0(a5)
    80012e58:	639c                	ld	a5,0(a5)
    80012e5a:	fef43423          	sd	a5,-24(s0)
    Block *prev = NULL;
    80012e5e:	fe043023          	sd	zero,-32(s0)
    size_t top  = heap->top;
    80012e62:	00005797          	auipc	a5,0x5
    80012e66:	1c678793          	addi	a5,a5,454 # 80018028 <heap>
    80012e6a:	639c                	ld	a5,0(a5)
    80012e6c:	6f9c                	ld	a5,24(a5)
    80012e6e:	fcf43c23          	sd	a5,-40(s0)
    num         = (num + heap_alignment - 1) & -heap_alignment;
    80012e72:	00005797          	auipc	a5,0x5
    80012e76:	1ce78793          	addi	a5,a5,462 # 80018040 <heap_alignment>
    80012e7a:	6398                	ld	a4,0(a5)
    80012e7c:	fa843783          	ld	a5,-88(s0)
    80012e80:	97ba                	add	a5,a5,a4
    80012e82:	fff78713          	addi	a4,a5,-1
    80012e86:	00005797          	auipc	a5,0x5
    80012e8a:	1ba78793          	addi	a5,a5,442 # 80018040 <heap_alignment>
    80012e8e:	639c                	ld	a5,0(a5)
    80012e90:	40f007b3          	neg	a5,a5
    80012e94:	8ff9                	and	a5,a5,a4
    80012e96:	faf43423          	sd	a5,-88(s0)
    while (ptr != NULL) {
    80012e9a:	a2bd                	j	80013008 <alloc_block+0x1c6>
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80012e9c:	fe843783          	ld	a5,-24(s0)
    80012ea0:	639c                	ld	a5,0(a5)
    80012ea2:	873e                	mv	a4,a5
    80012ea4:	fe843783          	ld	a5,-24(s0)
    80012ea8:	6b9c                	ld	a5,16(a5)
    80012eaa:	97ba                	add	a5,a5,a4
    80012eac:	fd843703          	ld	a4,-40(s0)
    80012eb0:	02e7e263          	bltu	a5,a4,80012ed4 <alloc_block+0x92>
                           ((size_t)ptr->addr + num <= (size_t)heap_limit);
    80012eb4:	fe843783          	ld	a5,-24(s0)
    80012eb8:	639c                	ld	a5,0(a5)
    80012eba:	873e                	mv	a4,a5
    80012ebc:	fa843783          	ld	a5,-88(s0)
    80012ec0:	97ba                	add	a5,a5,a4
    80012ec2:	00005717          	auipc	a4,0x5
    80012ec6:	16e70713          	addi	a4,a4,366 # 80018030 <heap_limit>
    80012eca:	6318                	ld	a4,0(a4)
        const int is_top = ((size_t)ptr->addr + ptr->size >= top) &&
    80012ecc:	00f76463          	bltu	a4,a5,80012ed4 <alloc_block+0x92>
    80012ed0:	4785                	li	a5,1
    80012ed2:	a011                	j	80012ed6 <alloc_block+0x94>
    80012ed4:	4781                	li	a5,0
    80012ed6:	fcf42623          	sw	a5,-52(s0)
        if (is_top || ptr->size >= num) {
    80012eda:	fcc42783          	lw	a5,-52(s0)
    80012ede:	2781                	sext.w	a5,a5
    80012ee0:	eb81                	bnez	a5,80012ef0 <alloc_block+0xae>
    80012ee2:	fe843783          	ld	a5,-24(s0)
    80012ee6:	6b9c                	ld	a5,16(a5)
    80012ee8:	fa843703          	ld	a4,-88(s0)
    80012eec:	10e7e563          	bltu	a5,a4,80012ff6 <alloc_block+0x1b4>
            if (prev != NULL) {
    80012ef0:	fe043783          	ld	a5,-32(s0)
    80012ef4:	cb81                	beqz	a5,80012f04 <alloc_block+0xc2>
                prev->next = ptr->next;
    80012ef6:	fe843783          	ld	a5,-24(s0)
    80012efa:	6798                	ld	a4,8(a5)
    80012efc:	fe043783          	ld	a5,-32(s0)
    80012f00:	e798                	sd	a4,8(a5)
    80012f02:	a811                	j	80012f16 <alloc_block+0xd4>
            }
            else {
                heap->free = ptr->next;
    80012f04:	00005797          	auipc	a5,0x5
    80012f08:	12478793          	addi	a5,a5,292 # 80018028 <heap>
    80012f0c:	639c                	ld	a5,0(a5)
    80012f0e:	fe843703          	ld	a4,-24(s0)
    80012f12:	6718                	ld	a4,8(a4)
    80012f14:	e398                	sd	a4,0(a5)
            }
            ptr->next  = heap->used;
    80012f16:	00005797          	auipc	a5,0x5
    80012f1a:	11278793          	addi	a5,a5,274 # 80018028 <heap>
    80012f1e:	639c                	ld	a5,0(a5)
    80012f20:	6798                	ld	a4,8(a5)
    80012f22:	fe843783          	ld	a5,-24(s0)
    80012f26:	e798                	sd	a4,8(a5)
            heap->used = ptr;
    80012f28:	00005797          	auipc	a5,0x5
    80012f2c:	10078793          	addi	a5,a5,256 # 80018028 <heap>
    80012f30:	639c                	ld	a5,0(a5)
    80012f32:	fe843703          	ld	a4,-24(s0)
    80012f36:	e798                	sd	a4,8(a5)
            if (is_top) {
    80012f38:	fcc42783          	lw	a5,-52(s0)
    80012f3c:	2781                	sext.w	a5,a5
    80012f3e:	c785                	beqz	a5,80012f66 <alloc_block+0x124>
                ptr->size = num;
    80012f40:	fe843783          	ld	a5,-24(s0)
    80012f44:	fa843703          	ld	a4,-88(s0)
    80012f48:	eb98                	sd	a4,16(a5)
                heap->top = (size_t)ptr->addr + num;
    80012f4a:	fe843783          	ld	a5,-24(s0)
    80012f4e:	639c                	ld	a5,0(a5)
    80012f50:	86be                	mv	a3,a5
    80012f52:	00005797          	auipc	a5,0x5
    80012f56:	0d678793          	addi	a5,a5,214 # 80018028 <heap>
    80012f5a:	639c                	ld	a5,0(a5)
    80012f5c:	fa843703          	ld	a4,-88(s0)
    80012f60:	9736                	add	a4,a4,a3
    80012f62:	ef98                	sd	a4,24(a5)
    80012f64:	a071                	j	80012ff0 <alloc_block+0x1ae>
            }
            else if (heap->fresh != NULL) {
    80012f66:	00005797          	auipc	a5,0x5
    80012f6a:	0c278793          	addi	a5,a5,194 # 80018028 <heap>
    80012f6e:	639c                	ld	a5,0(a5)
    80012f70:	6b9c                	ld	a5,16(a5)
    80012f72:	cfbd                	beqz	a5,80012ff0 <alloc_block+0x1ae>
                size_t excess = ptr->size - num;
    80012f74:	fe843783          	ld	a5,-24(s0)
    80012f78:	6b98                	ld	a4,16(a5)
    80012f7a:	fa843783          	ld	a5,-88(s0)
    80012f7e:	40f707b3          	sub	a5,a4,a5
    80012f82:	fcf43023          	sd	a5,-64(s0)
                if (excess >= heap_split_thresh) {
    80012f86:	00005797          	auipc	a5,0x5
    80012f8a:	0b278793          	addi	a5,a5,178 # 80018038 <heap_split_thresh>
    80012f8e:	639c                	ld	a5,0(a5)
    80012f90:	fc043703          	ld	a4,-64(s0)
    80012f94:	04f76e63          	bltu	a4,a5,80012ff0 <alloc_block+0x1ae>
                    ptr->size    = num;
    80012f98:	fe843783          	ld	a5,-24(s0)
    80012f9c:	fa843703          	ld	a4,-88(s0)
    80012fa0:	eb98                	sd	a4,16(a5)
                    Block *split = heap->fresh;
    80012fa2:	00005797          	auipc	a5,0x5
    80012fa6:	08678793          	addi	a5,a5,134 # 80018028 <heap>
    80012faa:	639c                	ld	a5,0(a5)
    80012fac:	6b9c                	ld	a5,16(a5)
    80012fae:	faf43c23          	sd	a5,-72(s0)
                    heap->fresh  = split->next;
    80012fb2:	00005797          	auipc	a5,0x5
    80012fb6:	07678793          	addi	a5,a5,118 # 80018028 <heap>
    80012fba:	639c                	ld	a5,0(a5)
    80012fbc:	fb843703          	ld	a4,-72(s0)
    80012fc0:	6718                	ld	a4,8(a4)
    80012fc2:	eb98                	sd	a4,16(a5)
                    split->addr  = (void *)((size_t)ptr->addr + num);
    80012fc4:	fe843783          	ld	a5,-24(s0)
    80012fc8:	639c                	ld	a5,0(a5)
    80012fca:	873e                	mv	a4,a5
    80012fcc:	fa843783          	ld	a5,-88(s0)
    80012fd0:	97ba                	add	a5,a5,a4
    80012fd2:	873e                	mv	a4,a5
    80012fd4:	fb843783          	ld	a5,-72(s0)
    80012fd8:	e398                	sd	a4,0(a5)
                    split->size  = excess;
    80012fda:	fb843783          	ld	a5,-72(s0)
    80012fde:	fc043703          	ld	a4,-64(s0)
    80012fe2:	eb98                	sd	a4,16(a5)
                    insert_block(split);
    80012fe4:	fb843503          	ld	a0,-72(s0)
    80012fe8:	af7ff0ef          	jal	ra,80012ade <insert_block>
                    compact();
    80012fec:	bdfff0ef          	jal	ra,80012bca <compact>
                }
            }
            return ptr;
    80012ff0:	fe843783          	ld	a5,-24(s0)
    80012ff4:	a875                	j	800130b0 <alloc_block+0x26e>
        }
        prev = ptr;
    80012ff6:	fe843783          	ld	a5,-24(s0)
    80012ffa:	fef43023          	sd	a5,-32(s0)
        ptr  = ptr->next;
    80012ffe:	fe843783          	ld	a5,-24(s0)
    80013002:	679c                	ld	a5,8(a5)
    80013004:	fef43423          	sd	a5,-24(s0)
    while (ptr != NULL) {
    80013008:	fe843783          	ld	a5,-24(s0)
    8001300c:	e80798e3          	bnez	a5,80012e9c <alloc_block+0x5a>
    }
    // no matching free blocks
    // see if any other blocks available
    size_t new_top = top + num;
    80013010:	fd843703          	ld	a4,-40(s0)
    80013014:	fa843783          	ld	a5,-88(s0)
    80013018:	97ba                	add	a5,a5,a4
    8001301a:	fcf43823          	sd	a5,-48(s0)
    if (heap->fresh != NULL && new_top <= (size_t)heap_limit) {
    8001301e:	00005797          	auipc	a5,0x5
    80013022:	00a78793          	addi	a5,a5,10 # 80018028 <heap>
    80013026:	639c                	ld	a5,0(a5)
    80013028:	6b9c                	ld	a5,16(a5)
    8001302a:	c3d1                	beqz	a5,800130ae <alloc_block+0x26c>
    8001302c:	00005797          	auipc	a5,0x5
    80013030:	00478793          	addi	a5,a5,4 # 80018030 <heap_limit>
    80013034:	639c                	ld	a5,0(a5)
    80013036:	873e                	mv	a4,a5
    80013038:	fd043783          	ld	a5,-48(s0)
    8001303c:	06f76963          	bltu	a4,a5,800130ae <alloc_block+0x26c>
        ptr         = heap->fresh;
    80013040:	00005797          	auipc	a5,0x5
    80013044:	fe878793          	addi	a5,a5,-24 # 80018028 <heap>
    80013048:	639c                	ld	a5,0(a5)
    8001304a:	6b9c                	ld	a5,16(a5)
    8001304c:	fef43423          	sd	a5,-24(s0)
        heap->fresh = ptr->next;
    80013050:	00005797          	auipc	a5,0x5
    80013054:	fd878793          	addi	a5,a5,-40 # 80018028 <heap>
    80013058:	639c                	ld	a5,0(a5)
    8001305a:	fe843703          	ld	a4,-24(s0)
    8001305e:	6718                	ld	a4,8(a4)
    80013060:	eb98                	sd	a4,16(a5)
        ptr->addr   = (void *)top;
    80013062:	fd843703          	ld	a4,-40(s0)
    80013066:	fe843783          	ld	a5,-24(s0)
    8001306a:	e398                	sd	a4,0(a5)
        ptr->next   = heap->used;
    8001306c:	00005797          	auipc	a5,0x5
    80013070:	fbc78793          	addi	a5,a5,-68 # 80018028 <heap>
    80013074:	639c                	ld	a5,0(a5)
    80013076:	6798                	ld	a4,8(a5)
    80013078:	fe843783          	ld	a5,-24(s0)
    8001307c:	e798                	sd	a4,8(a5)
        ptr->size   = num;
    8001307e:	fe843783          	ld	a5,-24(s0)
    80013082:	fa843703          	ld	a4,-88(s0)
    80013086:	eb98                	sd	a4,16(a5)
        heap->used  = ptr;
    80013088:	00005797          	auipc	a5,0x5
    8001308c:	fa078793          	addi	a5,a5,-96 # 80018028 <heap>
    80013090:	639c                	ld	a5,0(a5)
    80013092:	fe843703          	ld	a4,-24(s0)
    80013096:	e798                	sd	a4,8(a5)
        heap->top   = new_top;
    80013098:	00005797          	auipc	a5,0x5
    8001309c:	f9078793          	addi	a5,a5,-112 # 80018028 <heap>
    800130a0:	639c                	ld	a5,0(a5)
    800130a2:	fd043703          	ld	a4,-48(s0)
    800130a6:	ef98                	sd	a4,24(a5)
        return ptr;
    800130a8:	fe843783          	ld	a5,-24(s0)
    800130ac:	a011                	j	800130b0 <alloc_block+0x26e>
    }
    return NULL;
    800130ae:	4781                	li	a5,0
}
    800130b0:	853e                	mv	a0,a5
    800130b2:	60e6                	ld	ra,88(sp)
    800130b4:	6446                	ld	s0,80(sp)
    800130b6:	6125                	addi	sp,sp,96
    800130b8:	8082                	ret

00000000800130ba <alloc>:

static void *alloc(size_t num)
{
    800130ba:	7179                	addi	sp,sp,-48
    800130bc:	f406                	sd	ra,40(sp)
    800130be:	f022                	sd	s0,32(sp)
    800130c0:	1800                	addi	s0,sp,48
    800130c2:	fca43c23          	sd	a0,-40(s0)
    Block *block = alloc_block(num);
    800130c6:	fd843503          	ld	a0,-40(s0)
    800130ca:	d79ff0ef          	jal	ra,80012e42 <alloc_block>
    800130ce:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    800130d2:	fe843783          	ld	a5,-24(s0)
    800130d6:	c789                	beqz	a5,800130e0 <alloc+0x26>
        return block->addr;
    800130d8:	fe843783          	ld	a5,-24(s0)
    800130dc:	639c                	ld	a5,0(a5)
    800130de:	a011                	j	800130e2 <alloc+0x28>
    }
    return NULL;
    800130e0:	4781                	li	a5,0
}
    800130e2:	853e                	mv	a0,a5
    800130e4:	70a2                	ld	ra,40(sp)
    800130e6:	7402                	ld	s0,32(sp)
    800130e8:	6145                	addi	sp,sp,48
    800130ea:	8082                	ret

00000000800130ec <calloc>:

static void *calloc(size_t num, size_t size)
{
    800130ec:	7179                	addi	sp,sp,-48
    800130ee:	f406                	sd	ra,40(sp)
    800130f0:	f022                	sd	s0,32(sp)
    800130f2:	1800                	addi	s0,sp,48
    800130f4:	fca43c23          	sd	a0,-40(s0)
    800130f8:	fcb43823          	sd	a1,-48(s0)
    num *= size;
    800130fc:	fd843703          	ld	a4,-40(s0)
    80013100:	fd043783          	ld	a5,-48(s0)
    80013104:	02f707b3          	mul	a5,a4,a5
    80013108:	fcf43c23          	sd	a5,-40(s0)
    Block *block = alloc_block(num);
    8001310c:	fd843503          	ld	a0,-40(s0)
    80013110:	d33ff0ef          	jal	ra,80012e42 <alloc_block>
    80013114:	fea43423          	sd	a0,-24(s0)
    if (block != NULL) {
    80013118:	fe843783          	ld	a5,-24(s0)
    8001311c:	c385                	beqz	a5,8001313c <calloc+0x50>
        memset(block->addr, 0, num);
    8001311e:	fe843783          	ld	a5,-24(s0)
    80013122:	639c                	ld	a5,0(a5)
    80013124:	fd843703          	ld	a4,-40(s0)
    80013128:	2701                	sext.w	a4,a4
    8001312a:	863a                	mv	a2,a4
    8001312c:	4581                	li	a1,0
    8001312e:	853e                	mv	a0,a5
    80013130:	0b2020ef          	jal	ra,800151e2 <memset>
        return block->addr;
    80013134:	fe843783          	ld	a5,-24(s0)
    80013138:	639c                	ld	a5,0(a5)
    8001313a:	a011                	j	8001313e <calloc+0x52>
    }
    return NULL;
    8001313c:	4781                	li	a5,0
}
    8001313e:	853e                	mv	a0,a5
    80013140:	70a2                	ld	ra,40(sp)
    80013142:	7402                	ld	s0,32(sp)
    80013144:	6145                	addi	sp,sp,48
    80013146:	8082                	ret

0000000080013148 <count_blocks>:

static size_t count_blocks(Block *ptr)
{
    80013148:	7179                	addi	sp,sp,-48
    8001314a:	f422                	sd	s0,40(sp)
    8001314c:	1800                	addi	s0,sp,48
    8001314e:	fca43c23          	sd	a0,-40(s0)
    size_t num = 0;
    80013152:	fe043423          	sd	zero,-24(s0)
    while (ptr != NULL) {
    80013156:	a819                	j	8001316c <count_blocks+0x24>
        num++;
    80013158:	fe843783          	ld	a5,-24(s0)
    8001315c:	0785                	addi	a5,a5,1
    8001315e:	fef43423          	sd	a5,-24(s0)
        ptr = ptr->next;
    80013162:	fd843783          	ld	a5,-40(s0)
    80013166:	679c                	ld	a5,8(a5)
    80013168:	fcf43c23          	sd	a5,-40(s0)
    while (ptr != NULL) {
    8001316c:	fd843783          	ld	a5,-40(s0)
    80013170:	f7e5                	bnez	a5,80013158 <count_blocks+0x10>
    }
    return num;
    80013172:	fe843783          	ld	a5,-24(s0)
}
    80013176:	853e                	mv	a0,a5
    80013178:	7422                	ld	s0,40(sp)
    8001317a:	6145                	addi	sp,sp,48
    8001317c:	8082                	ret

000000008001317e <heap_num_free>:
static size_t heap_num_free()
{
    8001317e:	1141                	addi	sp,sp,-16
    80013180:	e406                	sd	ra,8(sp)
    80013182:	e022                	sd	s0,0(sp)
    80013184:	0800                	addi	s0,sp,16
    return count_blocks(heap->free);
    80013186:	00005797          	auipc	a5,0x5
    8001318a:	ea278793          	addi	a5,a5,-350 # 80018028 <heap>
    8001318e:	639c                	ld	a5,0(a5)
    80013190:	639c                	ld	a5,0(a5)
    80013192:	853e                	mv	a0,a5
    80013194:	fb5ff0ef          	jal	ra,80013148 <count_blocks>
    80013198:	87aa                	mv	a5,a0
}
    8001319a:	853e                	mv	a0,a5
    8001319c:	60a2                	ld	ra,8(sp)
    8001319e:	6402                	ld	s0,0(sp)
    800131a0:	0141                	addi	sp,sp,16
    800131a2:	8082                	ret

00000000800131a4 <heap_num_used>:
static size_t heap_num_used()
{
    800131a4:	1141                	addi	sp,sp,-16
    800131a6:	e406                	sd	ra,8(sp)
    800131a8:	e022                	sd	s0,0(sp)
    800131aa:	0800                	addi	s0,sp,16
    return count_blocks(heap->used);
    800131ac:	00005797          	auipc	a5,0x5
    800131b0:	e7c78793          	addi	a5,a5,-388 # 80018028 <heap>
    800131b4:	639c                	ld	a5,0(a5)
    800131b6:	679c                	ld	a5,8(a5)
    800131b8:	853e                	mv	a0,a5
    800131ba:	f8fff0ef          	jal	ra,80013148 <count_blocks>
    800131be:	87aa                	mv	a5,a0
}
    800131c0:	853e                	mv	a0,a5
    800131c2:	60a2                	ld	ra,8(sp)
    800131c4:	6402                	ld	s0,0(sp)
    800131c6:	0141                	addi	sp,sp,16
    800131c8:	8082                	ret

00000000800131ca <heap_num_fresh>:
static size_t heap_num_fresh()
{
    800131ca:	1141                	addi	sp,sp,-16
    800131cc:	e406                	sd	ra,8(sp)
    800131ce:	e022                	sd	s0,0(sp)
    800131d0:	0800                	addi	s0,sp,16
    return count_blocks(heap->fresh);
    800131d2:	00005797          	auipc	a5,0x5
    800131d6:	e5678793          	addi	a5,a5,-426 # 80018028 <heap>
    800131da:	639c                	ld	a5,0(a5)
    800131dc:	6b9c                	ld	a5,16(a5)
    800131de:	853e                	mv	a0,a5
    800131e0:	f69ff0ef          	jal	ra,80013148 <count_blocks>
    800131e4:	87aa                	mv	a5,a0
}
    800131e6:	853e                	mv	a0,a5
    800131e8:	60a2                	ld	ra,8(sp)
    800131ea:	6402                	ld	s0,0(sp)
    800131ec:	0141                	addi	sp,sp,16
    800131ee:	8082                	ret

00000000800131f0 <heap_check>:
static bool heap_check()
{
    800131f0:	1101                	addi	sp,sp,-32
    800131f2:	ec06                	sd	ra,24(sp)
    800131f4:	e822                	sd	s0,16(sp)
    800131f6:	e426                	sd	s1,8(sp)
    800131f8:	1000                	addi	s0,sp,32
    return heap_max_blocks == heap_num_free() + heap_num_used() + heap_num_fresh();
    800131fa:	f85ff0ef          	jal	ra,8001317e <heap_num_free>
    800131fe:	84aa                	mv	s1,a0
    80013200:	fa5ff0ef          	jal	ra,800131a4 <heap_num_used>
    80013204:	87aa                	mv	a5,a0
    80013206:	94be                	add	s1,s1,a5
    80013208:	fc3ff0ef          	jal	ra,800131ca <heap_num_fresh>
    8001320c:	87aa                	mv	a5,a0
    8001320e:	00f48733          	add	a4,s1,a5
    80013212:	00005797          	auipc	a5,0x5
    80013216:	e3678793          	addi	a5,a5,-458 # 80018048 <heap_max_blocks>
    8001321a:	639c                	ld	a5,0(a5)
    8001321c:	40f707b3          	sub	a5,a4,a5
    80013220:	0017b793          	seqz	a5,a5
    80013224:	0ff7f793          	andi	a5,a5,255
}
    80013228:	853e                	mv	a0,a5
    8001322a:	60e2                	ld	ra,24(sp)
    8001322c:	6442                	ld	s0,16(sp)
    8001322e:	64a2                	ld	s1,8(sp)
    80013230:	6105                	addi	sp,sp,32
    80013232:	8082                	ret

0000000080013234 <heap_print_stats>:

void heap_print_stats(void)
{
    80013234:	7179                	addi	sp,sp,-48
    80013236:	f406                	sd	ra,40(sp)
    80013238:	f022                	sd	s0,32(sp)
    8001323a:	ec26                	sd	s1,24(sp)
    8001323c:	e84a                	sd	s2,16(sp)
    8001323e:	e44e                	sd	s3,8(sp)
    80013240:	1800                	addi	s0,sp,48
    debugf(
    80013242:	f3dff0ef          	jal	ra,8001317e <heap_num_free>
    80013246:	84aa                	mv	s1,a0
    80013248:	f5dff0ef          	jal	ra,800131a4 <heap_num_used>
    8001324c:	892a                	mv	s2,a0
    8001324e:	f7dff0ef          	jal	ra,800131ca <heap_num_fresh>
    80013252:	89aa                	mv	s3,a0
        "HEAP\n~~~~\nFree blocks:    %lu\nUsed blocks:    %lu\nFresh blocks:   %lu\nHeap "
        "check:     %s\n",
        heap_num_free(), heap_num_used(), heap_num_fresh(), heap_check() ? "good" : "bad");
    80013254:	f9dff0ef          	jal	ra,800131f0 <heap_check>
    80013258:	87aa                	mv	a5,a0
    debugf(
    8001325a:	c791                	beqz	a5,80013266 <heap_print_stats+0x32>
    8001325c:	00006797          	auipc	a5,0x6
    80013260:	27478793          	addi	a5,a5,628 # 800194d0 <pow10.0+0x2a0>
    80013264:	a029                	j	8001326e <heap_print_stats+0x3a>
    80013266:	00006797          	auipc	a5,0x6
    8001326a:	27278793          	addi	a5,a5,626 # 800194d8 <pow10.0+0x2a8>
    8001326e:	873e                	mv	a4,a5
    80013270:	86ce                	mv	a3,s3
    80013272:	864a                	mv	a2,s2
    80013274:	85a6                	mv	a1,s1
    80013276:	00006517          	auipc	a0,0x6
    8001327a:	26a50513          	addi	a0,a0,618 # 800194e0 <pow10.0+0x2b0>
    8001327e:	2f9000ef          	jal	ra,80013d76 <debugf>
}
    80013282:	0001                	nop
    80013284:	70a2                	ld	ra,40(sp)
    80013286:	7402                	ld	s0,32(sp)
    80013288:	64e2                	ld	s1,24(sp)
    8001328a:	6942                	ld	s2,16(sp)
    8001328c:	69a2                	ld	s3,8(sp)
    8001328e:	6145                	addi	sp,sp,48
    80013290:	8082                	ret

0000000080013292 <kmalloc>:
void *kmalloc(size_t sz)
{
    80013292:	1101                	addi	sp,sp,-32
    80013294:	ec06                	sd	ra,24(sp)
    80013296:	e822                	sd	s0,16(sp)
    80013298:	1000                	addi	s0,sp,32
    8001329a:	fea43423          	sd	a0,-24(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kmalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
    return alloc(sz);
    8001329e:	fe843503          	ld	a0,-24(s0)
    800132a2:	e19ff0ef          	jal	ra,800130ba <alloc>
    800132a6:	87aa                	mv	a5,a0
}
    800132a8:	853e                	mv	a0,a5
    800132aa:	60e2                	ld	ra,24(sp)
    800132ac:	6442                	ld	s0,16(sp)
    800132ae:	6105                	addi	sp,sp,32
    800132b0:	8082                	ret

00000000800132b2 <kcalloc>:
void *kcalloc(size_t n, size_t sz)
{
    800132b2:	1101                	addi	sp,sp,-32
    800132b4:	ec06                	sd	ra,24(sp)
    800132b6:	e822                	sd	s0,16(sp)
    800132b8:	1000                	addi	s0,sp,32
    800132ba:	fea43423          	sd	a0,-24(s0)
    800132be:	feb43023          	sd	a1,-32(s0)
#ifdef DEBUG_KMALLOC
    debugf("[kcalloc]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
    return calloc(n, sz);
    800132c2:	fe043583          	ld	a1,-32(s0)
    800132c6:	fe843503          	ld	a0,-24(s0)
    800132ca:	e23ff0ef          	jal	ra,800130ec <calloc>
    800132ce:	87aa                	mv	a5,a0
}
    800132d0:	853e                	mv	a0,a5
    800132d2:	60e2                	ld	ra,24(sp)
    800132d4:	6442                	ld	s0,16(sp)
    800132d6:	6105                	addi	sp,sp,32
    800132d8:	8082                	ret

00000000800132da <kfree>:
void kfree(void *m)
{
    800132da:	1101                	addi	sp,sp,-32
    800132dc:	ec06                	sd	ra,24(sp)
    800132de:	e822                	sd	s0,16(sp)
    800132e0:	1000                	addi	s0,sp,32
    800132e2:	fea43423          	sd	a0,-24(s0)
    if (m != NULL) {
    800132e6:	fe843783          	ld	a5,-24(s0)
    800132ea:	c789                	beqz	a5,800132f4 <kfree+0x1a>
        free(m);
    800132ec:	fe843503          	ld	a0,-24(s0)
    800132f0:	ac9ff0ef          	jal	ra,80012db8 <free>
    }
#ifdef DEBUG_KMALLOC
    debugf("[kfree]: %lu/%lu/%lu %d\n", heap_num_free(), heap_num_used(), heap_num_fresh(),
           heap_check());
#endif
}
    800132f4:	0001                	nop
    800132f6:	60e2                	ld	ra,24(sp)
    800132f8:	6442                	ld	s0,16(sp)
    800132fa:	6105                	addi	sp,sp,32
    800132fc:	8082                	ret

00000000800132fe <heap_init>:

void heap_init(void)
{
    800132fe:	1101                	addi	sp,sp,-32
    80013300:	ec06                	sd	ra,24(sp)
    80013302:	e822                	sd	s0,16(sp)
    80013304:	1000                	addi	s0,sp,32
#ifdef DEBUG_HEAP
    debugf("[heap_init]: Prior to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
           page_count_free());
#endif
    void *start = page_znalloc(KERNEL_HEAP_PAGES);
    80013306:	6505                	lui	a0,0x1
    80013308:	644010ef          	jal	ra,8001494c <page_znalloc>
    8001330c:	fea43423          	sd	a0,-24(s0)
    debugf("[heap_init]: Heap start at 0x%08lx\n", start);
    debugf("[heap_init]: After to kernel alloc: Taken: %d, Free: %d\n", page_count_taken(),
           page_count_free());
#endif

    mmu_map_range(kernel_mmu_table, KERNEL_HEAP_START_VADDR, KERNEL_HEAP_END_VADDR, (uint64_t)start,
    80013310:	00005797          	auipc	a5,0x5
    80013314:	cf078793          	addi	a5,a5,-784 # 80018000 <kernel_mmu_table>
    80013318:	6388                	ld	a0,0(a5)
    8001331a:	fe843683          	ld	a3,-24(s0)
    8001331e:	4799                	li	a5,6
    80013320:	4701                	li	a4,0
    80013322:	00e08637          	lui	a2,0xe08
    80013326:	7f760613          	addi	a2,a2,2039 # e087f7 <i+0xe087d7>
    8001332a:	0636                	slli	a2,a2,0xd
    8001332c:	00e085b7          	lui	a1,0xe08
    80013330:	15dd                	addi	a1,a1,-9
    80013332:	05b6                	slli	a1,a1,0xd
    80013334:	e64ff0ef          	jal	ra,80012998 <mmu_map_range>
                  MMU_LEVEL_4K, PB_READ | PB_WRITE);
    init((void *)KERNEL_HEAP_START_VADDR, (void *)KERNEL_HEAP_END_VADDR, KERNEL_HEAP_PAGES / 4, 16,
    80013338:	4721                	li	a4,8
    8001333a:	46c1                	li	a3,16
    8001333c:	40000613          	li	a2,1024
    80013340:	00e087b7          	lui	a5,0xe08
    80013344:	7f778793          	addi	a5,a5,2039 # e087f7 <i+0xe087d7>
    80013348:	00d79593          	slli	a1,a5,0xd
    8001334c:	00e087b7          	lui	a5,0xe08
    80013350:	17dd                	addi	a5,a5,-9
    80013352:	00d79513          	slli	a0,a5,0xd
    80013356:	94bff0ef          	jal	ra,80012ca0 <init>
         8);

}
    8001335a:	0001                	nop
    8001335c:	60e2                	ld	ra,24(sp)
    8001335e:	6442                	ld	s0,16(sp)
    80013360:	6105                	addi	sp,sp,32
    80013362:	8082                	ret

0000000080013364 <init_systems>:
// the kernel.
// Defined in src/include/mmu.h
struct page_table *kernel_mmu_table;

static void init_systems(void)
{
    80013364:	1141                	addi	sp,sp,-16
    80013366:	e406                	sd	ra,8(sp)
    80013368:	e022                	sd	s0,0(sp)
    8001336a:	0800                	addi	s0,sp,16
    void plic_init(void);
    plic_init();
    8001336c:	7a7000ef          	jal	ra,80014312 <plic_init>
    void page_init(void);
    page_init();
    80013370:	278010ef          	jal	ra,800145e8 <page_init>
    pci_init();
#endif
#ifdef USE_VIRTIO
    virtio_init();
#endif
}
    80013374:	0001                	nop
    80013376:	60a2                	ld	ra,8(sp)
    80013378:	6402                	ld	s0,0(sp)
    8001337a:	0141                	addi	sp,sp,16
    8001337c:	8082                	ret

000000008001337e <main>:
static const char *hart_status_values[] = {"NOT PRESENT", "STOPPED", "STARTING", "RUNNING"};
#ifdef RUN_INTERNAL_CONSOLE
static void console(void);
#endif
void main(unsigned int hart)
{
    8001337e:	7179                	addi	sp,sp,-48
    80013380:	f406                	sd	ra,40(sp)
    80013382:	f022                	sd	s0,32(sp)
    80013384:	1800                	addi	s0,sp,48
    80013386:	87aa                	mv	a5,a0
    80013388:	fcf42e23          	sw	a5,-36(s0)
    // Initialize the page allocator
    // Allocate and zero the kernel's page table.

    // Kind of neat to see our memory mappings to ensure they make sense.
    logf(LOG_INFO, "[[ MEMORY MAPPINGS ]]\n");
    8001338c:	00006597          	auipc	a1,0x6
    80013390:	1e458593          	addi	a1,a1,484 # 80019570 <pow10.0+0x340>
    80013394:	4511                	li	a0,4
    80013396:	183000ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  [TEXT]  : 0x%08lx -> 0x%08lx\n", sym_start(text), sym_end(text));
    8001339a:	ffffd797          	auipc	a5,0xffffd
    8001339e:	c6678793          	addi	a5,a5,-922 # 80010000 <_memory_start>
    800133a2:	00003717          	auipc	a4,0x3
    800133a6:	48070713          	addi	a4,a4,1152 # 80016822 <_text_end>
    800133aa:	86ba                	mv	a3,a4
    800133ac:	863e                	mv	a2,a5
    800133ae:	00006597          	auipc	a1,0x6
    800133b2:	1da58593          	addi	a1,a1,474 # 80019588 <pow10.0+0x358>
    800133b6:	4511                	li	a0,4
    800133b8:	161000ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  [BSS]   : 0x%08lx -> 0x%08lx\n", sym_start(bss), sym_end(bss));
    800133bc:	00005797          	auipc	a5,0x5
    800133c0:	c4478793          	addi	a5,a5,-956 # 80018000 <kernel_mmu_table>
    800133c4:	00005717          	auipc	a4,0x5
    800133c8:	c9470713          	addi	a4,a4,-876 # 80018058 <_bss_end>
    800133cc:	86ba                	mv	a3,a4
    800133ce:	863e                	mv	a2,a5
    800133d0:	00006597          	auipc	a1,0x6
    800133d4:	1d858593          	addi	a1,a1,472 # 800195a8 <pow10.0+0x378>
    800133d8:	4511                	li	a0,4
    800133da:	13f000ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  [RODATA]: 0x%08lx -> 0x%08lx\n", sym_start(rodata), sym_end(rodata));
    800133de:	00006797          	auipc	a5,0x6
    800133e2:	c2278793          	addi	a5,a5,-990 # 80019000 <SYSCALLS>
    800133e6:	00007717          	auipc	a4,0x7
    800133ea:	efc70713          	addi	a4,a4,-260 # 8001a2e2 <_rodata_end>
    800133ee:	86ba                	mv	a3,a4
    800133f0:	863e                	mv	a2,a5
    800133f2:	00006597          	auipc	a1,0x6
    800133f6:	1d658593          	addi	a1,a1,470 # 800195c8 <pow10.0+0x398>
    800133fa:	4511                	li	a0,4
    800133fc:	11d000ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  [DATA]  : 0x%08lx -> 0x%08lx\n", sym_start(data), sym_end(data));
    80013400:	00008797          	auipc	a5,0x8
    80013404:	c0078793          	addi	a5,a5,-1024 # 8001b000 <k_log_level>
    80013408:	00008717          	auipc	a4,0x8
    8001340c:	c2070713          	addi	a4,a4,-992 # 8001b028 <_data_end>
    80013410:	86ba                	mv	a3,a4
    80013412:	863e                	mv	a2,a5
    80013414:	00006597          	auipc	a1,0x6
    80013418:	1d458593          	addi	a1,a1,468 # 800195e8 <pow10.0+0x3b8>
    8001341c:	4511                	li	a0,4
    8001341e:	0fb000ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  [STACK] : 0x%08lx -> 0x%08lx\n", sym_start(stack), sym_end(stack));
    80013422:	00009797          	auipc	a5,0x9
    80013426:	bde78793          	addi	a5,a5,-1058 # 8001c000 <_stack_start>
    8001342a:	00011717          	auipc	a4,0x11
    8001342e:	bd670713          	addi	a4,a4,-1066 # 80024000 <_heap_start>
    80013432:	86ba                	mv	a3,a4
    80013434:	863e                	mv	a2,a5
    80013436:	00006597          	auipc	a1,0x6
    8001343a:	1d258593          	addi	a1,a1,466 # 80019608 <pow10.0+0x3d8>
    8001343e:	4511                	li	a0,4
    80013440:	0d9000ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  [HEAP]  : 0x%08lx -> 0x%08lx\n", sym_start(heap), sym_end(heap));
    80013444:	00011797          	auipc	a5,0x11
    80013448:	bbc78793          	addi	a5,a5,-1092 # 80024000 <_heap_start>
    8001344c:	07ffd717          	auipc	a4,0x7ffd
    80013450:	bb470713          	addi	a4,a4,-1100 # 88010000 <_heap_end>
    80013454:	86ba                	mv	a3,a4
    80013456:	863e                	mv	a2,a5
    80013458:	00006597          	auipc	a1,0x6
    8001345c:	1d058593          	addi	a1,a1,464 # 80019628 <pow10.0+0x3f8>
    80013460:	4511                	li	a0,4
    80013462:	0b7000ef          	jal	ra,80013d18 <logf>

    logf(LOG_INFO, "[[ HART MAPPINGS ]]\n");
    80013466:	00006597          	auipc	a1,0x6
    8001346a:	1e258593          	addi	a1,a1,482 # 80019648 <pow10.0+0x418>
    8001346e:	4511                	li	a0,4
    80013470:	0a9000ef          	jal	ra,80013d18 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80013474:	fe042623          	sw	zero,-20(s0)
    80013478:	a8bd                	j	800134f6 <main+0x178>
        if (i == hart) {
    8001347a:	fec42703          	lw	a4,-20(s0)
    8001347e:	fdc42783          	lw	a5,-36(s0)
    80013482:	2701                	sext.w	a4,a4
    80013484:	2781                	sext.w	a5,a5
    80013486:	02f71b63          	bne	a4,a5,800134bc <main+0x13e>
            logf(LOG_INFO, "  [HART#%d]: %s (this HART).\n", i, hart_status_values[sbi_hart_get_status(i)]);
    8001348a:	fec42783          	lw	a5,-20(s0)
    8001348e:	853e                	mv	a0,a5
    80013490:	241000ef          	jal	ra,80013ed0 <sbi_hart_get_status>
    80013494:	87aa                	mv	a5,a0
    80013496:	00008717          	auipc	a4,0x8
    8001349a:	b7270713          	addi	a4,a4,-1166 # 8001b008 <hart_status_values>
    8001349e:	078e                	slli	a5,a5,0x3
    800134a0:	97ba                	add	a5,a5,a4
    800134a2:	6398                	ld	a4,0(a5)
    800134a4:	fec42783          	lw	a5,-20(s0)
    800134a8:	86ba                	mv	a3,a4
    800134aa:	863e                	mv	a2,a5
    800134ac:	00006597          	auipc	a1,0x6
    800134b0:	1b458593          	addi	a1,a1,436 # 80019660 <pow10.0+0x430>
    800134b4:	4511                	li	a0,4
    800134b6:	063000ef          	jal	ra,80013d18 <logf>
    800134ba:	a80d                	j	800134ec <main+0x16e>
        }
        else {
            logf(LOG_INFO, "  [HART#%d]: %s.\n", i, hart_status_values[sbi_hart_get_status(i)]);
    800134bc:	fec42783          	lw	a5,-20(s0)
    800134c0:	853e                	mv	a0,a5
    800134c2:	20f000ef          	jal	ra,80013ed0 <sbi_hart_get_status>
    800134c6:	87aa                	mv	a5,a0
    800134c8:	00008717          	auipc	a4,0x8
    800134cc:	b4070713          	addi	a4,a4,-1216 # 8001b008 <hart_status_values>
    800134d0:	078e                	slli	a5,a5,0x3
    800134d2:	97ba                	add	a5,a5,a4
    800134d4:	6398                	ld	a4,0(a5)
    800134d6:	fec42783          	lw	a5,-20(s0)
    800134da:	86ba                	mv	a3,a4
    800134dc:	863e                	mv	a2,a5
    800134de:	00006597          	auipc	a1,0x6
    800134e2:	1a258593          	addi	a1,a1,418 # 80019680 <pow10.0+0x450>
    800134e6:	4511                	li	a0,4
    800134e8:	031000ef          	jal	ra,80013d18 <logf>
    for (unsigned int i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    800134ec:	fec42783          	lw	a5,-20(s0)
    800134f0:	2785                	addiw	a5,a5,1
    800134f2:	fef42623          	sw	a5,-20(s0)
    800134f6:	fec42783          	lw	a5,-20(s0)
    800134fa:	0007871b          	sext.w	a4,a5
    800134fe:	478d                	li	a5,3
    80013500:	f6e7fde3          	bgeu	a5,a4,8001347a <main+0xfc>
        }
    }

    struct page_table *pt    = mmu_table_create();
    80013504:	8caff0ef          	jal	ra,800125ce <mmu_table_create>
    80013508:	fea43023          	sd	a0,-32(s0)
    kernel_mmu_table = pt;
    8001350c:	00005797          	auipc	a5,0x5
    80013510:	af478793          	addi	a5,a5,-1292 # 80018000 <kernel_mmu_table>
    80013514:	fe043703          	ld	a4,-32(s0)
    80013518:	e398                	sd	a4,0(a5)
    // Map memory segments for our kernel
    mmu_map_range(pt, sym_start(text), sym_end(heap), sym_start(text), MMU_LEVEL_1G,
    8001351a:	ffffd597          	auipc	a1,0xffffd
    8001351e:	ae658593          	addi	a1,a1,-1306 # 80010000 <_memory_start>
    80013522:	07ffd617          	auipc	a2,0x7ffd
    80013526:	ade60613          	addi	a2,a2,-1314 # 88010000 <_heap_end>
    8001352a:	ffffd697          	auipc	a3,0xffffd
    8001352e:	ad668693          	addi	a3,a3,-1322 # 80010000 <_memory_start>
    80013532:	47b9                	li	a5,14
    80013534:	4709                	li	a4,2
    80013536:	fe043503          	ld	a0,-32(s0)
    8001353a:	c5eff0ef          	jal	ra,80012998 <mmu_map_range>
                  PB_READ | PB_WRITE | PB_EXECUTE);
    // PLIC
    mmu_map_range(pt, 0x0C000000, 0x0C2FFFFF, 0x0C000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    8001353e:	4799                	li	a5,6
    80013540:	4705                	li	a4,1
    80013542:	0c0006b7          	lui	a3,0xc000
    80013546:	0c300637          	lui	a2,0xc300
    8001354a:	167d                	addi	a2,a2,-1
    8001354c:	0c0005b7          	lui	a1,0xc000
    80013550:	fe043503          	ld	a0,-32(s0)
    80013554:	c44ff0ef          	jal	ra,80012998 <mmu_map_range>
    // PCIe ECAM
    mmu_map_range(pt, 0x30000000, 0x30FFFFFF, 0x30000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    80013558:	4799                	li	a5,6
    8001355a:	4705                	li	a4,1
    8001355c:	300006b7          	lui	a3,0x30000
    80013560:	31000637          	lui	a2,0x31000
    80013564:	167d                	addi	a2,a2,-1
    80013566:	300005b7          	lui	a1,0x30000
    8001356a:	fe043503          	ld	a0,-32(s0)
    8001356e:	c2aff0ef          	jal	ra,80012998 <mmu_map_range>
    // PCIe MMIO
    mmu_map_range(pt, 0x40000000, 0x4FFFFFFF, 0x40000000, MMU_LEVEL_2M, PB_READ | PB_WRITE);
    80013572:	4799                	li	a5,6
    80013574:	4705                	li	a4,1
    80013576:	400006b7          	lui	a3,0x40000
    8001357a:	50000637          	lui	a2,0x50000
    8001357e:	167d                	addi	a2,a2,-1
    80013580:	400005b7          	lui	a1,0x40000
    80013584:	fe043503          	ld	a0,-32(s0)
    80013588:	c10ff0ef          	jal	ra,80012998 <mmu_map_range>

#ifdef USE_MMU
    // TODO: turn on the MMU when you've written the src/mmu.c functions
    CSR_WRITE("satp", SATP_KERNEL); 
    8001358c:	00005797          	auipc	a5,0x5
    80013590:	a7478793          	addi	a5,a5,-1420 # 80018000 <kernel_mmu_table>
    80013594:	639c                	ld	a5,0(a5)
    80013596:	00c7d713          	srli	a4,a5,0xc
    8001359a:	57fd                	li	a5,-1
    8001359c:	83d1                	srli	a5,a5,0x14
    8001359e:	8f7d                	and	a4,a4,a5
    800135a0:	8ffff7b7          	lui	a5,0x8ffff
    800135a4:	1782                	slli	a5,a5,0x20
    800135a6:	8fd9                	or	a5,a5,a4
    800135a8:	18079073          	csrw	satp,a5
    SFENCE_ALL();
    800135ac:	12000073          	sfence.vma

    // MMU is turned on here.

    // Initialize all submodules here, including PCI, VirtIO, Heap, etc.
    // Many will require the MMU, so write those functions first.
    init_systems();
    800135b0:	db5ff0ef          	jal	ra,80013364 <init_systems>

    // Now that all submodules are initialized, you need to schedule the init process
    // and the idle processes for each HART.
    logf(LOG_INFO, "Congratulations! You made it to the OS! Going back to sleep.\n");
    800135b4:	00006597          	auipc	a1,0x6
    800135b8:	0e458593          	addi	a1,a1,228 # 80019698 <pow10.0+0x468>
    800135bc:	4511                	li	a0,4
    800135be:	75a000ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, 
    800135c2:	00006597          	auipc	a1,0x6
    800135c6:	11658593          	addi	a1,a1,278 # 800196d8 <pow10.0+0x4a8>
    800135ca:	4511                	li	a0,4
    800135cc:	74c000ef          	jal	ra,80013d18 <logf>
        "The logf function in the OS uses sbi_putchar(), so this means ECALLs from S-mode are "
        "working!\n");
    logf(LOG_INFO, 
    800135d0:	00006597          	auipc	a1,0x6
    800135d4:	16858593          	addi	a1,a1,360 # 80019738 <pow10.0+0x508>
    800135d8:	4511                	li	a0,4
    800135da:	73e000ef          	jal	ra,80013d18 <logf>
    // Below is just a little shell that demonstrates the sbi_getchar and
    // how the console works.

    // This is defined above main()
#ifdef RUN_INTERNAL_CONSOLE
    console();
    800135de:	004000ef          	jal	ra,800135e2 <console>

00000000800135e2 <console>:
#endif
}

#ifdef RUN_INTERNAL_CONSOLE
ATTR_NORET static void console(void)
{
    800135e2:	7179                	addi	sp,sp,-48
    800135e4:	f406                	sd	ra,40(sp)
    800135e6:	f022                	sd	s0,32(sp)
    800135e8:	1800                	addi	s0,sp,48
    const int BUFFER_SIZE = 56;
    800135ea:	03800313          	li	t1,56
    800135ee:	fe642423          	sw	t1,-24(s0)
    int at                = 0;
    800135f2:	fe042623          	sw	zero,-20(s0)
    char input[BUFFER_SIZE];
    800135f6:	fe842303          	lw	t1,-24(s0)
    800135fa:	137d                	addi	t1,t1,-1
    800135fc:	fe643023          	sd	t1,-32(s0)
    80013600:	fe842303          	lw	t1,-24(s0)
    80013604:	881a                	mv	a6,t1
    80013606:	4881                	li	a7,0
    80013608:	03d85313          	srli	t1,a6,0x3d
    8001360c:	00389693          	slli	a3,a7,0x3
    80013610:	00d366b3          	or	a3,t1,a3
    80013614:	00381613          	slli	a2,a6,0x3
    80013618:	fe842683          	lw	a3,-24(s0)
    8001361c:	8536                	mv	a0,a3
    8001361e:	4581                	li	a1,0
    80013620:	03d55693          	srli	a3,a0,0x3d
    80013624:	00359793          	slli	a5,a1,0x3
    80013628:	8fd5                	or	a5,a5,a3
    8001362a:	00351713          	slli	a4,a0,0x3
    8001362e:	fe842783          	lw	a5,-24(s0)
    80013632:	07bd                	addi	a5,a5,15
    80013634:	8391                	srli	a5,a5,0x4
    80013636:	0792                	slli	a5,a5,0x4
    80013638:	40f10133          	sub	sp,sp,a5
    8001363c:	878a                	mv	a5,sp
    8001363e:	00078793          	mv	a5,a5
    80013642:	fcf43c23          	sd	a5,-40(s0)
    logf(LOG_TEXT, "> ");
    80013646:	00006597          	auipc	a1,0x6
    8001364a:	15258593          	addi	a1,a1,338 # 80019798 <pow10.0+0x568>
    8001364e:	4541                	li	a0,16
    80013650:	6c8000ef          	jal	ra,80013d18 <logf>
    do {
        char c;
        // Recall that sbi_getchar() will return -1, 0xff, 255
        // if the receiver is empty.
        if ((c = sbi_getchar()) != 0xff) {
    80013654:	05d000ef          	jal	ra,80013eb0 <sbi_getchar>
    80013658:	87aa                	mv	a5,a0
    8001365a:	fcf40ba3          	sb	a5,-41(s0)
    8001365e:	fd744783          	lbu	a5,-41(s0)
    80013662:	0ff7f713          	andi	a4,a5,255
    80013666:	0ff00793          	li	a5,255
    8001366a:	22f70263          	beq	a4,a5,8001388e <console+0x2ac>
            if (c == '\r' || c == '\n') {
    8001366e:	fd744783          	lbu	a5,-41(s0)
    80013672:	0ff7f713          	andi	a4,a5,255
    80013676:	47b5                	li	a5,13
    80013678:	00f70963          	beq	a4,a5,8001368a <console+0xa8>
    8001367c:	fd744783          	lbu	a5,-41(s0)
    80013680:	0ff7f713          	andi	a4,a5,255
    80013684:	47a9                	li	a5,10
    80013686:	0cf71c63          	bne	a4,a5,8001375e <console+0x17c>
                if (at > 0) {
    8001368a:	fec42783          	lw	a5,-20(s0)
    8001368e:	2781                	sext.w	a5,a5
    80013690:	0af05f63          	blez	a5,8001374e <console+0x16c>
                    input[at] = '\0';
    80013694:	fd843703          	ld	a4,-40(s0)
    80013698:	fec42783          	lw	a5,-20(s0)
    8001369c:	97ba                	add	a5,a5,a4
    8001369e:	00078023          	sb	zero,0(a5) # ffffffff8ffff000 <_heap_end+0xffffffff07fef000>
                    if (!strcmp(input, "quit")) {
    800136a2:	00006597          	auipc	a1,0x6
    800136a6:	0fe58593          	addi	a1,a1,254 # 800197a0 <pow10.0+0x570>
    800136aa:	fd843503          	ld	a0,-40(s0)
    800136ae:	7c5010ef          	jal	ra,80015672 <strcmp>
    800136b2:	87aa                	mv	a5,a0
    800136b4:	eb99                	bnez	a5,800136ca <console+0xe8>
                        logf(LOG_TEXT, "\nShutting down...\n\n");
    800136b6:	00006597          	auipc	a1,0x6
    800136ba:	0f258593          	addi	a1,a1,242 # 800197a8 <pow10.0+0x578>
    800136be:	4541                	li	a0,16
    800136c0:	658000ef          	jal	ra,80013d18 <logf>
                        sbi_poweroff();
    800136c4:	09d000ef          	jal	ra,80013f60 <sbi_poweroff>
    800136c8:	a049                	j	8001374a <console+0x168>
                    }
                    else if (!strcmp(input, "fatal")) {
    800136ca:	00006597          	auipc	a1,0x6
    800136ce:	0f658593          	addi	a1,a1,246 # 800197c0 <pow10.0+0x590>
    800136d2:	fd843503          	ld	a0,-40(s0)
    800136d6:	79d010ef          	jal	ra,80015672 <strcmp>
    800136da:	87aa                	mv	a5,a0
    800136dc:	eb95                	bnez	a5,80013710 <console+0x12e>
                        logf(LOG_TEXT, "\n");
    800136de:	00006597          	auipc	a1,0x6
    800136e2:	0ea58593          	addi	a1,a1,234 # 800197c8 <pow10.0+0x598>
    800136e6:	4541                	li	a0,16
    800136e8:	630000ef          	jal	ra,80013d18 <logf>
                        fatalf("Testing fatal error @ %lu.\nHanging HART...\n", sbi_rtc_get_time());
    800136ec:	119000ef          	jal	ra,80014004 <sbi_rtc_get_time>
    800136f0:	87aa                	mv	a5,a0
    800136f2:	85be                	mv	a1,a5
    800136f4:	00006517          	auipc	a0,0x6
    800136f8:	0dc50513          	addi	a0,a0,220 # 800197d0 <pow10.0+0x5a0>
    800136fc:	6d0000ef          	jal	ra,80013dcc <fatalf>
                        logf(LOG_ERROR, "If I get here, fatal didn't work :'(.\n");
    80013700:	00006597          	auipc	a1,0x6
    80013704:	10058593          	addi	a1,a1,256 # 80019800 <pow10.0+0x5d0>
    80013708:	4505                	li	a0,1
    8001370a:	60e000ef          	jal	ra,80013d18 <logf>
    8001370e:	a835                	j	8001374a <console+0x168>
                    }
                    else if (!strcmp(input, "heap")) {
    80013710:	00006597          	auipc	a1,0x6
    80013714:	11858593          	addi	a1,a1,280 # 80019828 <pow10.0+0x5f8>
    80013718:	fd843503          	ld	a0,-40(s0)
    8001371c:	757010ef          	jal	ra,80015672 <strcmp>
    80013720:	87aa                	mv	a5,a0
    80013722:	eb99                	bnez	a5,80013738 <console+0x156>
                        logf(LOG_TEXT, "\n");
    80013724:	00006597          	auipc	a1,0x6
    80013728:	0a458593          	addi	a1,a1,164 # 800197c8 <pow10.0+0x598>
    8001372c:	4541                	li	a0,16
    8001372e:	5ea000ef          	jal	ra,80013d18 <logf>
                        void heap_print_stats(void);
                        heap_print_stats();
    80013732:	b03ff0ef          	jal	ra,80013234 <heap_print_stats>
    80013736:	a811                	j	8001374a <console+0x168>
                    }
                    else {
                        logf(LOG_TEXT, "\nUnknown command '%s'\n", input);
    80013738:	fd843603          	ld	a2,-40(s0)
    8001373c:	00006597          	auipc	a1,0x6
    80013740:	0f458593          	addi	a1,a1,244 # 80019830 <pow10.0+0x600>
    80013744:	4541                	li	a0,16
    80013746:	5d2000ef          	jal	ra,80013d18 <logf>
                    }
                    at = 0;
    8001374a:	fe042623          	sw	zero,-20(s0)
                }
                logf(LOG_TEXT, "\n> ");
    8001374e:	00006597          	auipc	a1,0x6
    80013752:	0fa58593          	addi	a1,a1,250 # 80019848 <pow10.0+0x618>
    80013756:	4541                	li	a0,16
    80013758:	5c0000ef          	jal	ra,80013d18 <logf>
    8001375c:	aa2d                	j	80013896 <console+0x2b4>
            }
            else if (c == 127) {
    8001375e:	fd744783          	lbu	a5,-41(s0)
    80013762:	0ff7f713          	andi	a4,a5,255
    80013766:	07f00793          	li	a5,127
    8001376a:	02f71463          	bne	a4,a5,80013792 <console+0x1b0>
                // BACKSPACE
                if (at > 0) {
    8001376e:	fec42783          	lw	a5,-20(s0)
    80013772:	2781                	sext.w	a5,a5
    80013774:	eef050e3          	blez	a5,80013654 <console+0x72>
                    logf(LOG_TEXT, "\b \b");
    80013778:	00006597          	auipc	a1,0x6
    8001377c:	0d858593          	addi	a1,a1,216 # 80019850 <pow10.0+0x620>
    80013780:	4541                	li	a0,16
    80013782:	596000ef          	jal	ra,80013d18 <logf>
                    at -= 1;
    80013786:	fec42783          	lw	a5,-20(s0)
    8001378a:	37fd                	addiw	a5,a5,-1
    8001378c:	fef42623          	sw	a5,-20(s0)
    80013790:	b5d1                	j	80013654 <console+0x72>
                }
            }
            else if (c == 0x1B) {
    80013792:	fd744783          	lbu	a5,-41(s0)
    80013796:	0ff7f713          	andi	a4,a5,255
    8001379a:	47ed                	li	a5,27
    8001379c:	0af71663          	bne	a4,a5,80013848 <console+0x266>
                // Escape sequence
                char esc1 = sbi_getchar();
    800137a0:	710000ef          	jal	ra,80013eb0 <sbi_getchar>
    800137a4:	87aa                	mv	a5,a0
    800137a6:	fcf40b23          	sb	a5,-42(s0)
                char esc2 = sbi_getchar();
    800137aa:	706000ef          	jal	ra,80013eb0 <sbi_getchar>
    800137ae:	87aa                	mv	a5,a0
    800137b0:	fcf40aa3          	sb	a5,-43(s0)
                if (esc1 == 0x5B) {
    800137b4:	fd644783          	lbu	a5,-42(s0)
    800137b8:	0ff7f713          	andi	a4,a5,255
    800137bc:	05b00793          	li	a5,91
    800137c0:	0cf71a63          	bne	a4,a5,80013894 <console+0x2b2>
                    switch (esc2) {
    800137c4:	fd544783          	lbu	a5,-43(s0)
    800137c8:	2781                	sext.w	a5,a5
    800137ca:	86be                	mv	a3,a5
    800137cc:	04400713          	li	a4,68
    800137d0:	06e68463          	beq	a3,a4,80013838 <console+0x256>
    800137d4:	86be                	mv	a3,a5
    800137d6:	04400713          	li	a4,68
    800137da:	e6d74de3          	blt	a4,a3,80013654 <console+0x72>
    800137de:	86be                	mv	a3,a5
    800137e0:	04300713          	li	a4,67
    800137e4:	04e68263          	beq	a3,a4,80013828 <console+0x246>
    800137e8:	86be                	mv	a3,a5
    800137ea:	04300713          	li	a4,67
    800137ee:	e6d743e3          	blt	a4,a3,80013654 <console+0x72>
    800137f2:	86be                	mv	a3,a5
    800137f4:	04100713          	li	a4,65
    800137f8:	00e68863          	beq	a3,a4,80013808 <console+0x226>
    800137fc:	873e                	mv	a4,a5
    800137fe:	04200793          	li	a5,66
    80013802:	00f70b63          	beq	a4,a5,80013818 <console+0x236>
    80013806:	a841                	j	80013896 <console+0x2b4>
                        case 0x41:
                            logf(LOG_INFO, "UP\n");
    80013808:	00006597          	auipc	a1,0x6
    8001380c:	05058593          	addi	a1,a1,80 # 80019858 <pow10.0+0x628>
    80013810:	4511                	li	a0,4
    80013812:	506000ef          	jal	ra,80013d18 <logf>
                            break;
    80013816:	a041                	j	80013896 <console+0x2b4>
                        case 0x42:
                            logf(LOG_INFO, "DOWN\n");
    80013818:	00006597          	auipc	a1,0x6
    8001381c:	04858593          	addi	a1,a1,72 # 80019860 <pow10.0+0x630>
    80013820:	4511                	li	a0,4
    80013822:	4f6000ef          	jal	ra,80013d18 <logf>
                            break;
    80013826:	a885                	j	80013896 <console+0x2b4>
                        case 0x43:
                            logf(LOG_INFO, "RIGHT\n");
    80013828:	00006597          	auipc	a1,0x6
    8001382c:	04058593          	addi	a1,a1,64 # 80019868 <pow10.0+0x638>
    80013830:	4511                	li	a0,4
    80013832:	4e6000ef          	jal	ra,80013d18 <logf>
                            break;
    80013836:	a085                	j	80013896 <console+0x2b4>
                        case 0x44:
                            logf(LOG_INFO, "LEFT\n");
    80013838:	00006597          	auipc	a1,0x6
    8001383c:	03858593          	addi	a1,a1,56 # 80019870 <pow10.0+0x640>
    80013840:	4511                	li	a0,4
    80013842:	4d6000ef          	jal	ra,80013d18 <logf>
                            break;
    80013846:	a881                	j	80013896 <console+0x2b4>
                    }
                }
            }
            else {
                if (at < (BUFFER_SIZE - 1)) {
    80013848:	fe842783          	lw	a5,-24(s0)
    8001384c:	37fd                	addiw	a5,a5,-1
    8001384e:	0007871b          	sext.w	a4,a5
    80013852:	fec42783          	lw	a5,-20(s0)
    80013856:	2781                	sext.w	a5,a5
    80013858:	dee7dee3          	bge	a5,a4,80013654 <console+0x72>
                    input[at++] = c;
    8001385c:	fec42783          	lw	a5,-20(s0)
    80013860:	0017871b          	addiw	a4,a5,1
    80013864:	fee42623          	sw	a4,-20(s0)
    80013868:	fd843703          	ld	a4,-40(s0)
    8001386c:	97ba                	add	a5,a5,a4
    8001386e:	fd744703          	lbu	a4,-41(s0)
    80013872:	00e78023          	sb	a4,0(a5)
                    logf(LOG_TEXT, "%c", c);
    80013876:	fd744783          	lbu	a5,-41(s0)
    8001387a:	2781                	sext.w	a5,a5
    8001387c:	863e                	mv	a2,a5
    8001387e:	00006597          	auipc	a1,0x6
    80013882:	ffa58593          	addi	a1,a1,-6 # 80019878 <pow10.0+0x648>
    80013886:	4541                	li	a0,16
    80013888:	490000ef          	jal	ra,80013d18 <logf>
    8001388c:	b3e1                	j	80013654 <console+0x72>
            }
        }
        else {
            // We can WFI here since interrupts are enabled
            // for the UART.
            WFI();
    8001388e:	10500073          	wfi
    80013892:	b3c9                	j	80013654 <console+0x72>
                }
    80013894:	0001                	nop
    do {
    80013896:	bb7d                	j	80013654 <console+0x72>

0000000080013898 <process_new>:
#define STACK_PAGES 2
#define STACK_SIZE  (STACK_PAGES * PAGE_SIZE)
#define STACK_TOP   0xfffffffc0ffee000UL

struct process *process_new(process_mode mode)
{
    80013898:	715d                	addi	sp,sp,-80
    8001389a:	e486                	sd	ra,72(sp)
    8001389c:	e0a2                	sd	s0,64(sp)
    8001389e:	0880                	addi	s0,sp,80
    800138a0:	87aa                	mv	a5,a0
    800138a2:	faf42e23          	sw	a5,-68(s0)
    struct process *p       = (struct process *)kzalloc(sizeof(*p));
    800138a6:	29000593          	li	a1,656
    800138aa:	4505                	li	a0,1
    800138ac:	a07ff0ef          	jal	ra,800132b2 <kcalloc>
    800138b0:	fea43023          	sd	a0,-32(s0)

    p->hart                 = -1U;
    800138b4:	fe043783          	ld	a5,-32(s0)
    800138b8:	577d                	li	a4,-1
    800138ba:	c3d8                	sw	a4,4(a5)
    p->ptable               = mmu_table_create();
    800138bc:	d13fe0ef          	jal	ra,800125ce <mmu_table_create>
    800138c0:	872a                	mv	a4,a0
    800138c2:	fe043783          	ld	a5,-32(s0)
    800138c6:	26e7bc23          	sd	a4,632(a5)
    p->state                = PS_WAITING;
    800138ca:	fe043783          	ld	a5,-32(s0)
    800138ce:	4705                	li	a4,1
    800138d0:	c7d8                	sw	a4,12(a5)
    // p->pid               = fill_in_with_unique_pid

    // Set the trap frame and create all necessary structures.
    // p->frame.sepc = filled_in_by_ELF_loader
    p->frame.sstatus        = SSTATUS_SPP_BOOL(mode) | SSTATUS_FS_INITIAL | SSTATUS_SPIE;
    800138d2:	fbc42783          	lw	a5,-68(s0)
    800138d6:	2781                	sext.w	a5,a5
    800138d8:	c789                	beqz	a5,800138e2 <process_new+0x4a>
    800138da:	6789                	lui	a5,0x2
    800138dc:	12078793          	addi	a5,a5,288 # 2120 <i+0x2100>
    800138e0:	a021                	j	800138e8 <process_new+0x50>
    800138e2:	6789                	lui	a5,0x2
    800138e4:	02078793          	addi	a5,a5,32 # 2020 <i+0x2000>
    800138e8:	fe043703          	ld	a4,-32(s0)
    800138ec:	24f73023          	sd	a5,576(a4)
    p->frame.sie            = SIE_SEIE | SIE_SSIE | SIE_STIE;
    800138f0:	fe043783          	ld	a5,-32(s0)
    800138f4:	22200713          	li	a4,546
    800138f8:	24e7b423          	sd	a4,584(a5)
    p->frame.satp           = SATP(p->ptable, p->pid);
    800138fc:	fe043783          	ld	a5,-32(s0)
    80013900:	2787b783          	ld	a5,632(a5)
    80013904:	00c7d713          	srli	a4,a5,0xc
    80013908:	57fd                	li	a5,-1
    8001390a:	83d1                	srli	a5,a5,0x14
    8001390c:	8f7d                	and	a4,a4,a5
    8001390e:	fe043783          	ld	a5,-32(s0)
    80013912:	0007d783          	lhu	a5,0(a5)
    80013916:	17b2                	slli	a5,a5,0x2c
    80013918:	8f5d                	or	a4,a4,a5
    8001391a:	57fd                	li	a5,-1
    8001391c:	17fe                	slli	a5,a5,0x3f
    8001391e:	8f5d                	or	a4,a4,a5
    80013920:	fe043783          	ld	a5,-32(s0)
    80013924:	24e7b823          	sd	a4,592(a5)
    p->frame.sscratch       = (unsigned long)&p->frame;
    80013928:	fe043783          	ld	a5,-32(s0)
    8001392c:	03878793          	addi	a5,a5,56
    80013930:	873e                	mv	a4,a5
    80013932:	fe043783          	ld	a5,-32(s0)
    80013936:	24e7bc23          	sd	a4,600(a5)
    p->frame.stvec          = trampoline_trap_start;
    8001393a:	00007797          	auipc	a5,0x7
    8001393e:	99078793          	addi	a5,a5,-1648 # 8001a2ca <trampoline_trap_start>
    80013942:	6398                	ld	a4,0(a5)
    80013944:	fe043783          	ld	a5,-32(s0)
    80013948:	26e7b023          	sd	a4,608(a5)
    p->frame.trap_satp      = SATP_KERNEL;
    8001394c:	00004797          	auipc	a5,0x4
    80013950:	6b478793          	addi	a5,a5,1716 # 80018000 <kernel_mmu_table>
    80013954:	639c                	ld	a5,0(a5)
    80013956:	00c7d713          	srli	a4,a5,0xc
    8001395a:	57fd                	li	a5,-1
    8001395c:	83d1                	srli	a5,a5,0x14
    8001395e:	8f7d                	and	a4,a4,a5
    80013960:	8ffff7b7          	lui	a5,0x8ffff
    80013964:	1782                	slli	a5,a5,0x20
    80013966:	8f5d                	or	a4,a4,a5
    80013968:	fe043783          	ld	a5,-32(s0)
    8001396c:	26e7b423          	sd	a4,616(a5) # ffffffff8ffff268 <_heap_end+0xffffffff07fef268>
    // p->frame.trap_stack = filled_in_by_SCHEDULER

    p->fds = vector_new_with_capacity(5);
    80013970:	4515                	li	a0,5
    80013972:	334020ef          	jal	ra,80015ca6 <vector_new_with_capacity>
    80013976:	872a                	mv	a4,a0
    80013978:	fe043783          	ld	a5,-32(s0)
    8001397c:	28e7b423          	sd	a4,648(a5)
    p->pages = list_new();
    80013980:	226010ef          	jal	ra,80014ba6 <list_new>
    80013984:	872a                	mv	a4,a0
    80013986:	fe043783          	ld	a5,-32(s0)
    8001398a:	28e7b023          	sd	a4,640(a5)

    // We need to keep track of the stack itself in the kernel, so we can free it
    // later, but the user process will interact with the stack via the SP register.
    p->frame.xregs[XREG_SP] = STACK_TOP + STACK_SIZE;
    8001398e:	fe043783          	ld	a5,-32(s0)
    80013992:	c0fff737          	lui	a4,0xc0fff
    80013996:	0712                	slli	a4,a4,0x4
    80013998:	e7b8                	sd	a4,72(a5)
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    8001399a:	fe043423          	sd	zero,-24(s0)
    8001399e:	a085                	j	800139fe <process_new+0x166>
        void *stack = page_zalloc();
    800139a0:	4505                	li	a0,1
    800139a2:	7ab000ef          	jal	ra,8001494c <page_znalloc>
    800139a6:	fca43423          	sd	a0,-56(s0)
        list_add_ptr(p->pages, stack);
    800139aa:	fe043783          	ld	a5,-32(s0)
    800139ae:	2807b783          	ld	a5,640(a5)
    800139b2:	fc843703          	ld	a4,-56(s0)
    800139b6:	85ba                	mv	a1,a4
    800139b8:	853e                	mv	a0,a5
    800139ba:	21c010ef          	jal	ra,80014bd6 <list_add>
        mmu_map(p->ptable, STACK_TOP + PAGE_SIZE * i, (unsigned long)stack,
    800139be:	fe043783          	ld	a5,-32(s0)
    800139c2:	2787b503          	ld	a0,632(a5)
    800139c6:	fe843783          	ld	a5,-24(s0)
    800139ca:	00c79713          	slli	a4,a5,0xc
    800139ce:	ffe087b7          	lui	a5,0xffe08
    800139d2:	17dd                	addi	a5,a5,-9
    800139d4:	07b6                	slli	a5,a5,0xd
    800139d6:	00f705b3          	add	a1,a4,a5
    800139da:	fc843603          	ld	a2,-56(s0)
    800139de:	fbc42783          	lw	a5,-68(s0)
    800139e2:	2781                	sext.w	a5,a5
    800139e4:	e399                	bnez	a5,800139ea <process_new+0x152>
    800139e6:	47c1                	li	a5,16
    800139e8:	a011                	j	800139ec <process_new+0x154>
    800139ea:	4799                	li	a5,6
    800139ec:	873e                	mv	a4,a5
    800139ee:	4681                	li	a3,0
    800139f0:	c19fe0ef          	jal	ra,80012608 <mmu_map>
    for (unsigned long i = 0; i < STACK_PAGES; i += 1) {
    800139f4:	fe843783          	ld	a5,-24(s0)
    800139f8:	0785                	addi	a5,a5,1
    800139fa:	fef43423          	sd	a5,-24(s0)
    800139fe:	fe843703          	ld	a4,-24(s0)
    80013a02:	4785                	li	a5,1
    80013a04:	f8e7fee3          	bgeu	a5,a4,800139a0 <process_new+0x108>
    }

    // We need to map certain kernel portions into the user's page table. Notice
    // that the PB_USER is NOT set, but it needs to be there because we need to execute
    // the trap/start instructions while using the user's page table until we change SATP.
    unsigned long trans_trampoline_start = mmu_translate(kernel_mmu_table, trampoline_thread_start);
    80013a08:	00004797          	auipc	a5,0x4
    80013a0c:	5f878793          	addi	a5,a5,1528 # 80018000 <kernel_mmu_table>
    80013a10:	6398                	ld	a4,0(a5)
    80013a12:	00007797          	auipc	a5,0x7
    80013a16:	8a078793          	addi	a5,a5,-1888 # 8001a2b2 <trampoline_thread_start>
    80013a1a:	639c                	ld	a5,0(a5)
    80013a1c:	85be                	mv	a1,a5
    80013a1e:	853a                	mv	a0,a4
    80013a20:	ea9fe0ef          	jal	ra,800128c8 <mmu_translate>
    80013a24:	fca43c23          	sd	a0,-40(s0)
    unsigned long trans_trampoline_trap  = mmu_translate(kernel_mmu_table, trampoline_trap_start);
    80013a28:	00004797          	auipc	a5,0x4
    80013a2c:	5d878793          	addi	a5,a5,1496 # 80018000 <kernel_mmu_table>
    80013a30:	6398                	ld	a4,0(a5)
    80013a32:	00007797          	auipc	a5,0x7
    80013a36:	89878793          	addi	a5,a5,-1896 # 8001a2ca <trampoline_trap_start>
    80013a3a:	639c                	ld	a5,0(a5)
    80013a3c:	85be                	mv	a1,a5
    80013a3e:	853a                	mv	a0,a4
    80013a40:	e89fe0ef          	jal	ra,800128c8 <mmu_translate>
    80013a44:	fca43823          	sd	a0,-48(s0)
    mmu_map(p->ptable, trampoline_thread_start, trans_trampoline_start, MMU_LEVEL_4K,
    80013a48:	fe043783          	ld	a5,-32(s0)
    80013a4c:	2787b503          	ld	a0,632(a5)
    80013a50:	00007797          	auipc	a5,0x7
    80013a54:	86278793          	addi	a5,a5,-1950 # 8001a2b2 <trampoline_thread_start>
    80013a58:	639c                	ld	a5,0(a5)
    80013a5a:	4729                	li	a4,10
    80013a5c:	4681                	li	a3,0
    80013a5e:	fd843603          	ld	a2,-40(s0)
    80013a62:	85be                	mv	a1,a5
    80013a64:	ba5fe0ef          	jal	ra,80012608 <mmu_map>
            PB_READ | PB_EXECUTE);
    mmu_map(p->ptable, trampoline_trap_start, trans_trampoline_trap, MMU_LEVEL_4K,
    80013a68:	fe043783          	ld	a5,-32(s0)
    80013a6c:	2787b503          	ld	a0,632(a5)
    80013a70:	00007797          	auipc	a5,0x7
    80013a74:	85a78793          	addi	a5,a5,-1958 # 8001a2ca <trampoline_trap_start>
    80013a78:	639c                	ld	a5,0(a5)
    80013a7a:	4729                	li	a4,10
    80013a7c:	4681                	li	a3,0
    80013a7e:	fd043603          	ld	a2,-48(s0)
    80013a82:	85be                	mv	a1,a5
    80013a84:	b85fe0ef          	jal	ra,80012608 <mmu_map>
            PB_READ | PB_EXECUTE);

    SFENCE_ASID(p->pid);
    80013a88:	fe043783          	ld	a5,-32(s0)
    80013a8c:	0007d783          	lhu	a5,0(a5)
    80013a90:	12f00073          	sfence.vma	zero,a5

    return p;
    80013a94:	fe043783          	ld	a5,-32(s0)
}
    80013a98:	853e                	mv	a0,a5
    80013a9a:	60a6                	ld	ra,72(sp)
    80013a9c:	6406                	ld	s0,64(sp)
    80013a9e:	6161                	addi	sp,sp,80
    80013aa0:	8082                	ret

0000000080013aa2 <process_free>:

int process_free(struct process *p)
{
    80013aa2:	7179                	addi	sp,sp,-48
    80013aa4:	f406                	sd	ra,40(sp)
    80013aa6:	f022                	sd	s0,32(sp)
    80013aa8:	1800                	addi	s0,sp,48
    80013aaa:	fca43c23          	sd	a0,-40(s0)
    struct ListElem *e;
    unsigned int i;

    if (!p || !ON_HART_NONE(p)) {
    80013aae:	fd843783          	ld	a5,-40(s0)
    80013ab2:	cb81                	beqz	a5,80013ac2 <process_free+0x20>
    80013ab4:	fd843783          	ld	a5,-40(s0)
    80013ab8:	43dc                	lw	a5,4(a5)
    80013aba:	873e                	mv	a4,a5
    80013abc:	57fd                	li	a5,-1
    80013abe:	00f70463          	beq	a4,a5,80013ac6 <process_free+0x24>
        // Process is invalid or running somewhere, or this is stale.
        return -1;
    80013ac2:	57fd                	li	a5,-1
    80013ac4:	a8d1                	j	80013b98 <process_free+0xf6>
    }

    // Free all resources allocated to the process.

    if (p->ptable) {
    80013ac6:	fd843783          	ld	a5,-40(s0)
    80013aca:	2787b783          	ld	a5,632(a5)
    80013ace:	cf91                	beqz	a5,80013aea <process_free+0x48>
        mmu_free(p->ptable);
    80013ad0:	fd843783          	ld	a5,-40(s0)
    80013ad4:	2787b783          	ld	a5,632(a5)
    80013ad8:	853e                	mv	a0,a5
    80013ada:	d71fe0ef          	jal	ra,8001284a <mmu_free>
        SFENCE_ASID(p->pid);
    80013ade:	fd843783          	ld	a5,-40(s0)
    80013ae2:	0007d783          	lhu	a5,0(a5)
    80013ae6:	12f00073          	sfence.vma	zero,a5
    }

    if (p->pages) {
    80013aea:	fd843783          	ld	a5,-40(s0)
    80013aee:	2807b783          	ld	a5,640(a5)
    80013af2:	cbb9                	beqz	a5,80013b48 <process_free+0xa6>
        list_for_each(p->pages, e) {
    80013af4:	fd843783          	ld	a5,-40(s0)
    80013af8:	2807b783          	ld	a5,640(a5)
    80013afc:	853e                	mv	a0,a5
    80013afe:	4f8010ef          	jal	ra,80014ff6 <list_elem_start_ascending>
    80013b02:	fea43423          	sd	a0,-24(s0)
    80013b06:	a839                	j	80013b24 <process_free+0x82>
            page_free(list_elem_value_ptr(e));
    80013b08:	fe843503          	ld	a0,-24(s0)
    80013b0c:	54a010ef          	jal	ra,80015056 <list_elem_value>
    80013b10:	87aa                	mv	a5,a0
    80013b12:	853e                	mv	a0,a5
    80013b14:	64f000ef          	jal	ra,80014962 <page_free>
        list_for_each(p->pages, e) {
    80013b18:	fe843503          	ld	a0,-24(s0)
    80013b1c:	522010ef          	jal	ra,8001503e <list_elem_prev>
    80013b20:	fea43423          	sd	a0,-24(s0)
    80013b24:	fd843783          	ld	a5,-40(s0)
    80013b28:	2807b783          	ld	a5,640(a5)
    80013b2c:	fe843583          	ld	a1,-24(s0)
    80013b30:	853e                	mv	a0,a5
    80013b32:	436010ef          	jal	ra,80014f68 <list_elem_valid>
    80013b36:	87aa                	mv	a5,a0
    80013b38:	fbe1                	bnez	a5,80013b08 <process_free+0x66>
        }
        list_free(p->pages);
    80013b3a:	fd843783          	ld	a5,-40(s0)
    80013b3e:	2807b783          	ld	a5,640(a5)
    80013b42:	853e                	mv	a0,a5
    80013b44:	3cc010ef          	jal	ra,80014f10 <list_free>
    }

    if (p->fds) {
    80013b48:	fd843783          	ld	a5,-40(s0)
    80013b4c:	2887b783          	ld	a5,648(a5)
    80013b50:	cf9d                	beqz	a5,80013b8e <process_free+0xec>
        for (i = 0;i < vector_size(p->fds);i += 1) {
    80013b52:	fe042223          	sw	zero,-28(s0)
    80013b56:	a031                	j	80013b62 <process_free+0xc0>
    80013b58:	fe442783          	lw	a5,-28(s0)
    80013b5c:	2785                	addiw	a5,a5,1
    80013b5e:	fef42223          	sw	a5,-28(s0)
    80013b62:	fd843783          	ld	a5,-40(s0)
    80013b66:	2887b783          	ld	a5,648(a5)
    80013b6a:	853e                	mv	a0,a5
    80013b6c:	229020ef          	jal	ra,80016594 <vector_size>
    80013b70:	87aa                	mv	a5,a0
    80013b72:	0007871b          	sext.w	a4,a5
    80013b76:	fe442783          	lw	a5,-28(s0)
    80013b7a:	2781                	sext.w	a5,a5
    80013b7c:	fce7eee3          	bltu	a5,a4,80013b58 <process_free+0xb6>
            // Clean up any file descriptor stuff here.
        }
        vector_free(p->fds);
    80013b80:	fd843783          	ld	a5,-40(s0)
    80013b84:	2887b783          	ld	a5,648(a5)
    80013b88:	853e                	mv	a0,a5
    80013b8a:	23b020ef          	jal	ra,800165c4 <vector_free>
    }
    

    kfree(p);
    80013b8e:	fd843503          	ld	a0,-40(s0)
    80013b92:	f48ff0ef          	jal	ra,800132da <kfree>

    return 0;
    80013b96:	4781                	li	a5,0
}
    80013b98:	853e                	mv	a0,a5
    80013b9a:	70a2                	ld	ra,40(sp)
    80013b9c:	7402                	ld	s0,32(sp)
    80013b9e:	6145                	addi	sp,sp,48
    80013ba0:	8082                	ret

0000000080013ba2 <process_run>:

bool process_run(struct process *p, unsigned int hart)
{
    80013ba2:	7179                	addi	sp,sp,-48
    80013ba4:	f406                	sd	ra,40(sp)
    80013ba6:	f022                	sd	s0,32(sp)
    80013ba8:	1800                	addi	s0,sp,48
    80013baa:	fca43c23          	sd	a0,-40(s0)
    80013bae:	87ae                	mv	a5,a1
    80013bb0:	fcf42a23          	sw	a5,-44(s0)
    void process_asm_run(void *frame_addr);
    unsigned int me = sbi_whoami();
    80013bb4:	470000ef          	jal	ra,80014024 <sbi_whoami>
    80013bb8:	87aa                	mv	a5,a0
    80013bba:	fef42623          	sw	a5,-20(s0)

    if (me == hart) {
    80013bbe:	fec42703          	lw	a4,-20(s0)
    80013bc2:	fd442783          	lw	a5,-44(s0)
    80013bc6:	2701                	sext.w	a4,a4
    80013bc8:	2781                	sext.w	a5,a5
    80013bca:	00f71b63          	bne	a4,a5,80013be0 <process_run+0x3e>
        process_asm_run(&p->frame);
    80013bce:	fd843783          	ld	a5,-40(s0)
    80013bd2:	03878793          	addi	a5,a5,56
    80013bd6:	853e                	mv	a0,a5
    80013bd8:	79d000ef          	jal	ra,80014b74 <process_asm_run>
        // process_asm_run should not return, but if it does
        // something went wrong.
        return false;
    80013bdc:	4781                	li	a5,0
    80013bde:	a815                	j	80013c12 <process_run+0x70>
    }

    return sbi_hart_start(hart, trampoline_thread_start, (unsigned long)&p->frame, p->frame.satp);
    80013be0:	00006797          	auipc	a5,0x6
    80013be4:	6d278793          	addi	a5,a5,1746 # 8001a2b2 <trampoline_thread_start>
    80013be8:	6398                	ld	a4,0(a5)
    80013bea:	fd843783          	ld	a5,-40(s0)
    80013bee:	03878793          	addi	a5,a5,56
    80013bf2:	863e                	mv	a2,a5
    80013bf4:	fd843783          	ld	a5,-40(s0)
    80013bf8:	2507b683          	ld	a3,592(a5)
    80013bfc:	fd442783          	lw	a5,-44(s0)
    80013c00:	85ba                	mv	a1,a4
    80013c02:	853e                	mv	a0,a5
    80013c04:	2f8000ef          	jal	ra,80013efc <sbi_hart_start>
    80013c08:	87aa                	mv	a5,a0
    80013c0a:	00f037b3          	snez	a5,a5
    80013c0e:	0ff7f793          	andi	a5,a5,255
}
    80013c12:	853e                	mv	a0,a5
    80013c14:	70a2                	ld	ra,40(sp)
    80013c16:	7402                	ld	s0,32(sp)
    80013c18:	6145                	addi	sp,sp,48
    80013c1a:	8082                	ret

0000000080013c1c <lgprefix>:
#include <stdarg.h>
#include <csr.h>

static int k_log_level = 0xFFF;

static const char *lgprefix(log_type lt) {
    80013c1c:	1101                	addi	sp,sp,-32
    80013c1e:	ec22                	sd	s0,24(sp)
    80013c20:	1000                	addi	s0,sp,32
    80013c22:	87aa                	mv	a5,a0
    80013c24:	fef42623          	sw	a5,-20(s0)
    switch (lt) {
    80013c28:	fec42783          	lw	a5,-20(s0)
    80013c2c:	0007871b          	sext.w	a4,a5
    80013c30:	47a1                	li	a5,8
    80013c32:	06f70463          	beq	a4,a5,80013c9a <lgprefix+0x7e>
    80013c36:	fec42783          	lw	a5,-20(s0)
    80013c3a:	0007871b          	sext.w	a4,a5
    80013c3e:	47a1                	li	a5,8
    80013c40:	06e7e263          	bltu	a5,a4,80013ca4 <lgprefix+0x88>
    80013c44:	fec42783          	lw	a5,-20(s0)
    80013c48:	0007871b          	sext.w	a4,a5
    80013c4c:	4791                	li	a5,4
    80013c4e:	02f70c63          	beq	a4,a5,80013c86 <lgprefix+0x6a>
    80013c52:	fec42783          	lw	a5,-20(s0)
    80013c56:	0007871b          	sext.w	a4,a5
    80013c5a:	4791                	li	a5,4
    80013c5c:	04e7e463          	bltu	a5,a4,80013ca4 <lgprefix+0x88>
    80013c60:	fec42783          	lw	a5,-20(s0)
    80013c64:	0007871b          	sext.w	a4,a5
    80013c68:	4785                	li	a5,1
    80013c6a:	02f70363          	beq	a4,a5,80013c90 <lgprefix+0x74>
    80013c6e:	fec42783          	lw	a5,-20(s0)
    80013c72:	0007871b          	sext.w	a4,a5
    80013c76:	4789                	li	a5,2
    80013c78:	02f71663          	bne	a4,a5,80013ca4 <lgprefix+0x88>
        case LOG_DEBUG:
            return "[DEBUG]: ";
    80013c7c:	00006797          	auipc	a5,0x6
    80013c80:	c0478793          	addi	a5,a5,-1020 # 80019880 <pow10.0+0x650>
    80013c84:	a025                	j	80013cac <lgprefix+0x90>
        case LOG_INFO:
            return "[INFO]: ";
    80013c86:	00006797          	auipc	a5,0x6
    80013c8a:	c0a78793          	addi	a5,a5,-1014 # 80019890 <pow10.0+0x660>
    80013c8e:	a839                	j	80013cac <lgprefix+0x90>
        case LOG_ERROR:
            return "[ERROR]: ";
    80013c90:	00006797          	auipc	a5,0x6
    80013c94:	c1078793          	addi	a5,a5,-1008 # 800198a0 <pow10.0+0x670>
    80013c98:	a811                	j	80013cac <lgprefix+0x90>
        case LOG_FATAL:
            return "[FATAL]: ";
    80013c9a:	00006797          	auipc	a5,0x6
    80013c9e:	c1678793          	addi	a5,a5,-1002 # 800198b0 <pow10.0+0x680>
    80013ca2:	a029                	j	80013cac <lgprefix+0x90>
        default:
            return "";
    80013ca4:	00006797          	auipc	a5,0x6
    80013ca8:	c1c78793          	addi	a5,a5,-996 # 800198c0 <pow10.0+0x690>
    }
}
    80013cac:	853e                	mv	a0,a5
    80013cae:	6462                	ld	s0,24(sp)
    80013cb0:	6105                	addi	sp,sp,32
    80013cb2:	8082                	ret

0000000080013cb4 <vlogf>:

static int vlogf(log_type lt, const char *fmt, va_list args)
{
    80013cb4:	7179                	addi	sp,sp,-48
    80013cb6:	f406                	sd	ra,40(sp)
    80013cb8:	f022                	sd	s0,32(sp)
    80013cba:	1800                	addi	s0,sp,48
    80013cbc:	87aa                	mv	a5,a0
    80013cbe:	feb43023          	sd	a1,-32(s0)
    80013cc2:	fcc43c23          	sd	a2,-40(s0)
    80013cc6:	fef42623          	sw	a5,-20(s0)
    if (!(lt & k_log_level)) {
    80013cca:	00007797          	auipc	a5,0x7
    80013cce:	33678793          	addi	a5,a5,822 # 8001b000 <k_log_level>
    80013cd2:	439c                	lw	a5,0(a5)
    80013cd4:	0007871b          	sext.w	a4,a5
    80013cd8:	fec42783          	lw	a5,-20(s0)
    80013cdc:	8ff9                	and	a5,a5,a4
    80013cde:	2781                	sext.w	a5,a5
    80013ce0:	e399                	bnez	a5,80013ce6 <vlogf+0x32>
        return 0;
    80013ce2:	4781                	li	a5,0
    80013ce4:	a02d                	j	80013d0e <vlogf+0x5a>
    }
    int printf(const char *fmt, ...);
    printf("%s", lgprefix(lt));
    80013ce6:	fec42783          	lw	a5,-20(s0)
    80013cea:	853e                	mv	a0,a5
    80013cec:	f31ff0ef          	jal	ra,80013c1c <lgprefix>
    80013cf0:	87aa                	mv	a5,a0
    80013cf2:	85be                	mv	a1,a5
    80013cf4:	00006517          	auipc	a0,0x6
    80013cf8:	bd450513          	addi	a0,a0,-1068 # 800198c8 <pow10.0+0x698>
    80013cfc:	d4afe0ef          	jal	ra,80012246 <printf>
    int vprintf_(const char *format, va_list va);
    return vprintf_(fmt, args);
    80013d00:	fd843583          	ld	a1,-40(s0)
    80013d04:	fe043503          	ld	a0,-32(s0)
    80013d08:	e6cfe0ef          	jal	ra,80012374 <vprintf_>
    80013d0c:	87aa                	mv	a5,a0
}
    80013d0e:	853e                	mv	a0,a5
    80013d10:	70a2                	ld	ra,40(sp)
    80013d12:	7402                	ld	s0,32(sp)
    80013d14:	6145                	addi	sp,sp,48
    80013d16:	8082                	ret

0000000080013d18 <logf>:

int logf(log_type lt, const char *fmt, ...)
{
    80013d18:	7159                	addi	sp,sp,-112
    80013d1a:	fc06                	sd	ra,56(sp)
    80013d1c:	f822                	sd	s0,48(sp)
    80013d1e:	0080                	addi	s0,sp,64
    80013d20:	fcb43823          	sd	a1,-48(s0)
    80013d24:	e010                	sd	a2,0(s0)
    80013d26:	e414                	sd	a3,8(s0)
    80013d28:	e818                	sd	a4,16(s0)
    80013d2a:	ec1c                	sd	a5,24(s0)
    80013d2c:	03043023          	sd	a6,32(s0)
    80013d30:	03143423          	sd	a7,40(s0)
    80013d34:	87aa                	mv	a5,a0
    80013d36:	fcf42e23          	sw	a5,-36(s0)
    va_list va;
    va_start(va, fmt);
    80013d3a:	03040793          	addi	a5,s0,48
    80013d3e:	fcf43423          	sd	a5,-56(s0)
    80013d42:	fc843783          	ld	a5,-56(s0)
    80013d46:	fd078793          	addi	a5,a5,-48
    80013d4a:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(lt, fmt, va);
    80013d4e:	fe043703          	ld	a4,-32(s0)
    80013d52:	fdc42783          	lw	a5,-36(s0)
    80013d56:	863a                	mv	a2,a4
    80013d58:	fd043583          	ld	a1,-48(s0)
    80013d5c:	853e                	mv	a0,a5
    80013d5e:	f57ff0ef          	jal	ra,80013cb4 <vlogf>
    80013d62:	87aa                	mv	a5,a0
    80013d64:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80013d68:	fec42783          	lw	a5,-20(s0)
}
    80013d6c:	853e                	mv	a0,a5
    80013d6e:	70e2                	ld	ra,56(sp)
    80013d70:	7442                	ld	s0,48(sp)
    80013d72:	6165                	addi	sp,sp,112
    80013d74:	8082                	ret

0000000080013d76 <debugf>:

int debugf(const char *fmt, ...)
{
    80013d76:	7159                	addi	sp,sp,-112
    80013d78:	f406                	sd	ra,40(sp)
    80013d7a:	f022                	sd	s0,32(sp)
    80013d7c:	1800                	addi	s0,sp,48
    80013d7e:	fca43c23          	sd	a0,-40(s0)
    80013d82:	e40c                	sd	a1,8(s0)
    80013d84:	e810                	sd	a2,16(s0)
    80013d86:	ec14                	sd	a3,24(s0)
    80013d88:	f018                	sd	a4,32(s0)
    80013d8a:	f41c                	sd	a5,40(s0)
    80013d8c:	03043823          	sd	a6,48(s0)
    80013d90:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80013d94:	04040793          	addi	a5,s0,64
    80013d98:	fcf43823          	sd	a5,-48(s0)
    80013d9c:	fd043783          	ld	a5,-48(s0)
    80013da0:	fc878793          	addi	a5,a5,-56
    80013da4:	fef43023          	sd	a5,-32(s0)
    int ret = vlogf(LOG_DEBUG, fmt, va);
    80013da8:	fe043783          	ld	a5,-32(s0)
    80013dac:	863e                	mv	a2,a5
    80013dae:	fd843583          	ld	a1,-40(s0)
    80013db2:	4509                	li	a0,2
    80013db4:	f01ff0ef          	jal	ra,80013cb4 <vlogf>
    80013db8:	87aa                	mv	a5,a0
    80013dba:	fef42623          	sw	a5,-20(s0)
    va_end(va);

    return ret;
    80013dbe:	fec42783          	lw	a5,-20(s0)
}
    80013dc2:	853e                	mv	a0,a5
    80013dc4:	70a2                	ld	ra,40(sp)
    80013dc6:	7402                	ld	s0,32(sp)
    80013dc8:	6165                	addi	sp,sp,112
    80013dca:	8082                	ret

0000000080013dcc <fatalf>:

ATTR_NORET void fatalf(const char *fmt, ...)
{
    80013dcc:	7159                	addi	sp,sp,-112
    80013dce:	f406                	sd	ra,40(sp)
    80013dd0:	f022                	sd	s0,32(sp)
    80013dd2:	1800                	addi	s0,sp,48
    80013dd4:	fca43c23          	sd	a0,-40(s0)
    80013dd8:	e40c                	sd	a1,8(s0)
    80013dda:	e810                	sd	a2,16(s0)
    80013ddc:	ec14                	sd	a3,24(s0)
    80013dde:	f018                	sd	a4,32(s0)
    80013de0:	f41c                	sd	a5,40(s0)
    80013de2:	03043823          	sd	a6,48(s0)
    80013de6:	03143c23          	sd	a7,56(s0)
    va_list va;
    va_start(va, fmt);
    80013dea:	04040793          	addi	a5,s0,64
    80013dee:	fcf43823          	sd	a5,-48(s0)
    80013df2:	fd043783          	ld	a5,-48(s0)
    80013df6:	fc878793          	addi	a5,a5,-56
    80013dfa:	fef43423          	sd	a5,-24(s0)
    vlogf(LOG_FATAL, fmt, va);
    80013dfe:	fe843783          	ld	a5,-24(s0)
    80013e02:	863e                	mv	a2,a5
    80013e04:	fd843583          	ld	a1,-40(s0)
    80013e08:	4521                	li	a0,8
    80013e0a:	eabff0ef          	jal	ra,80013cb4 <vlogf>
    va_end(va);

    CSR_CLEAR("sstatus");
    80013e0e:	10001073          	csrw	sstatus,zero
    WFI_LOOP();
    80013e12:	10500073          	wfi
    80013e16:	bff5                	j	80013e12 <fatalf+0x46>

0000000080013e18 <klogset>:
}

void klogset(log_type lt)
{
    80013e18:	1101                	addi	sp,sp,-32
    80013e1a:	ec22                	sd	s0,24(sp)
    80013e1c:	1000                	addi	s0,sp,32
    80013e1e:	87aa                	mv	a5,a0
    80013e20:	fef42623          	sw	a5,-20(s0)
    k_log_level |= lt;
    80013e24:	00007797          	auipc	a5,0x7
    80013e28:	1dc78793          	addi	a5,a5,476 # 8001b000 <k_log_level>
    80013e2c:	439c                	lw	a5,0(a5)
    80013e2e:	0007871b          	sext.w	a4,a5
    80013e32:	fec42783          	lw	a5,-20(s0)
    80013e36:	8fd9                	or	a5,a5,a4
    80013e38:	2781                	sext.w	a5,a5
    80013e3a:	0007871b          	sext.w	a4,a5
    80013e3e:	00007797          	auipc	a5,0x7
    80013e42:	1c278793          	addi	a5,a5,450 # 8001b000 <k_log_level>
    80013e46:	c398                	sw	a4,0(a5)
}
    80013e48:	0001                	nop
    80013e4a:	6462                	ld	s0,24(sp)
    80013e4c:	6105                	addi	sp,sp,32
    80013e4e:	8082                	ret

0000000080013e50 <klogclear>:

void klogclear(log_type lt)
{
    80013e50:	1101                	addi	sp,sp,-32
    80013e52:	ec22                	sd	s0,24(sp)
    80013e54:	1000                	addi	s0,sp,32
    80013e56:	87aa                	mv	a5,a0
    80013e58:	fef42623          	sw	a5,-20(s0)
    k_log_level &= ~lt;
    80013e5c:	fec42783          	lw	a5,-20(s0)
    80013e60:	fff7c793          	not	a5,a5
    80013e64:	0007871b          	sext.w	a4,a5
    80013e68:	00007797          	auipc	a5,0x7
    80013e6c:	19878793          	addi	a5,a5,408 # 8001b000 <k_log_level>
    80013e70:	439c                	lw	a5,0(a5)
    80013e72:	2781                	sext.w	a5,a5
    80013e74:	8ff9                	and	a5,a5,a4
    80013e76:	2781                	sext.w	a5,a5
    80013e78:	0007871b          	sext.w	a4,a5
    80013e7c:	00007797          	auipc	a5,0x7
    80013e80:	18478793          	addi	a5,a5,388 # 8001b000 <k_log_level>
    80013e84:	c398                	sw	a4,0(a5)
}
    80013e86:	0001                	nop
    80013e88:	6462                	ld	s0,24(sp)
    80013e8a:	6105                	addi	sp,sp,32
    80013e8c:	8082                	ret

0000000080013e8e <sbi_putchar>:
#include <compiler.h>
#include <config.h>
#include <sbi.h>

void sbi_putchar(char c)
{
    80013e8e:	1101                	addi	sp,sp,-32
    80013e90:	ec22                	sd	s0,24(sp)
    80013e92:	1000                	addi	s0,sp,32
    80013e94:	87aa                	mv	a5,a0
    80013e96:	fef407a3          	sb	a5,-17(s0)
    asm volatile("mv a7, %0\nmv a0, %1\necall" ::"r"(SBI_SVCALL_PUTCHAR), "r"(c) : "a7", "a0");
    80013e9a:	47a5                	li	a5,9
    80013e9c:	fef44703          	lbu	a4,-17(s0)
    80013ea0:	88be                	mv	a7,a5
    80013ea2:	853a                	mv	a0,a4
    80013ea4:	00000073          	ecall
}
    80013ea8:	0001                	nop
    80013eaa:	6462                	ld	s0,24(sp)
    80013eac:	6105                	addi	sp,sp,32
    80013eae:	8082                	ret

0000000080013eb0 <sbi_getchar>:

char sbi_getchar(void)
{
    80013eb0:	1101                	addi	sp,sp,-32
    80013eb2:	ec22                	sd	s0,24(sp)
    80013eb4:	1000                	addi	s0,sp,32
    char c;
    asm volatile("mv a7, %1\necall\nmv %0, a0\n" : "=r"(c) : "r"(SBI_SVCALL_GETCHAR) : "a7", "a0");
    80013eb6:	47a9                	li	a5,10
    80013eb8:	88be                	mv	a7,a5
    80013eba:	00000073          	ecall
    80013ebe:	87aa                	mv	a5,a0
    80013ec0:	fef407a3          	sb	a5,-17(s0)
    return c;
    80013ec4:	fef44783          	lbu	a5,-17(s0)
}
    80013ec8:	853e                	mv	a0,a5
    80013eca:	6462                	ld	s0,24(sp)
    80013ecc:	6105                	addi	sp,sp,32
    80013ece:	8082                	ret

0000000080013ed0 <sbi_hart_get_status>:

int sbi_hart_get_status(unsigned int hart)
{
    80013ed0:	7179                	addi	sp,sp,-48
    80013ed2:	f422                	sd	s0,40(sp)
    80013ed4:	1800                	addi	s0,sp,48
    80013ed6:	87aa                	mv	a5,a0
    80013ed8:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\necall\nmv %0, a0\n"
    80013edc:	4785                	li	a5,1
    80013ede:	fdc42703          	lw	a4,-36(s0)
    80013ee2:	88be                	mv	a7,a5
    80013ee4:	853a                	mv	a0,a4
    80013ee6:	00000073          	ecall
    80013eea:	87aa                	mv	a5,a0
    80013eec:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_STATUS), "r"(hart)
                 : "a0", "a7");
    return stat;
    80013ef0:	fec42783          	lw	a5,-20(s0)
}
    80013ef4:	853e                	mv	a0,a5
    80013ef6:	7422                	ld	s0,40(sp)
    80013ef8:	6145                	addi	sp,sp,48
    80013efa:	8082                	ret

0000000080013efc <sbi_hart_start>:

int sbi_hart_start(unsigned int hart, unsigned long target, unsigned long scratch, unsigned long satp)
{
    80013efc:	7139                	addi	sp,sp,-64
    80013efe:	fc22                	sd	s0,56(sp)
    80013f00:	0080                	addi	s0,sp,64
    80013f02:	87aa                	mv	a5,a0
    80013f04:	fcb43823          	sd	a1,-48(s0)
    80013f08:	fcc43423          	sd	a2,-56(s0)
    80013f0c:	fcd43023          	sd	a3,-64(s0)
    80013f10:	fcf42e23          	sw	a5,-36(s0)
    int stat;
    asm volatile("mv a7, %1\nmv a0, %2\nmv a1, %3\nmv a2, %4\nmv a3, %5\necall\nmv %0, a0\n"
    80013f14:	4789                	li	a5,2
    80013f16:	fdc42703          	lw	a4,-36(s0)
    80013f1a:	fd043683          	ld	a3,-48(s0)
    80013f1e:	fc843803          	ld	a6,-56(s0)
    80013f22:	fc043303          	ld	t1,-64(s0)
    80013f26:	88be                	mv	a7,a5
    80013f28:	853a                	mv	a0,a4
    80013f2a:	85b6                	mv	a1,a3
    80013f2c:	8642                	mv	a2,a6
    80013f2e:	869a                	mv	a3,t1
    80013f30:	00000073          	ecall
    80013f34:	87aa                	mv	a5,a0
    80013f36:	fef42623          	sw	a5,-20(s0)
                 : "=r"(stat)
                 : "r"(SBI_SVCALL_HART_START), "r"(hart), "r"(target), "r"(scratch), "r"(satp)
                 : "a0", "a1", "a2", "a7");
    return stat;
    80013f3a:	fec42783          	lw	a5,-20(s0)
}
    80013f3e:	853e                	mv	a0,a5
    80013f40:	7462                	ld	s0,56(sp)
    80013f42:	6121                	addi	sp,sp,64
    80013f44:	8082                	ret

0000000080013f46 <sbi_hart_stop>:

void sbi_hart_stop(void)
{
    80013f46:	1141                	addi	sp,sp,-16
    80013f48:	e422                	sd	s0,8(sp)
    80013f4a:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall\nwfi" : : "r"(SBI_SVCALL_HART_STOP) : "a0", "a7");
    80013f4c:	478d                	li	a5,3
    80013f4e:	88be                	mv	a7,a5
    80013f50:	00000073          	ecall
    80013f54:	10500073          	wfi
}
    80013f58:	0001                	nop
    80013f5a:	6422                	ld	s0,8(sp)
    80013f5c:	0141                	addi	sp,sp,16
    80013f5e:	8082                	ret

0000000080013f60 <sbi_poweroff>:

void sbi_poweroff(void)
{
    80013f60:	1141                	addi	sp,sp,-16
    80013f62:	e422                	sd	s0,8(sp)
    80013f64:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" : : "r"(SBI_SVCALL_POWEROFF) : "a0", "a7");
    80013f66:	47b1                	li	a5,12
    80013f68:	88be                	mv	a7,a5
    80013f6a:	00000073          	ecall
}
    80013f6e:	0001                	nop
    80013f70:	6422                	ld	s0,8(sp)
    80013f72:	0141                	addi	sp,sp,16
    80013f74:	8082                	ret

0000000080013f76 <sbi_get_time>:

unsigned long sbi_get_time(void)
{
    80013f76:	1101                	addi	sp,sp,-32
    80013f78:	ec22                	sd	s0,24(sp)
    80013f7a:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_GET_TIME) : "a0", "a7");
    80013f7c:	4791                	li	a5,4
    80013f7e:	88be                	mv	a7,a5
    80013f80:	00000073          	ecall
    80013f84:	87aa                	mv	a5,a0
    80013f86:	fef43423          	sd	a5,-24(s0)
    return ret;
    80013f8a:	fe843783          	ld	a5,-24(s0)
}
    80013f8e:	853e                	mv	a0,a5
    80013f90:	6462                	ld	s0,24(sp)
    80013f92:	6105                	addi	sp,sp,32
    80013f94:	8082                	ret

0000000080013f96 <sbi_set_timer>:

void sbi_set_timer(unsigned int hart, unsigned long val)
{
    80013f96:	1101                	addi	sp,sp,-32
    80013f98:	ec22                	sd	s0,24(sp)
    80013f9a:	1000                	addi	s0,sp,32
    80013f9c:	87aa                	mv	a5,a0
    80013f9e:	feb43023          	sd	a1,-32(s0)
    80013fa2:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_SET_TIMECMP), "r"(hart),
    80013fa6:	4795                	li	a5,5
    80013fa8:	fec42703          	lw	a4,-20(s0)
    80013fac:	fe043683          	ld	a3,-32(s0)
    80013fb0:	88be                	mv	a7,a5
    80013fb2:	853a                	mv	a0,a4
    80013fb4:	85b6                	mv	a1,a3
    80013fb6:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    80013fba:	0001                	nop
    80013fbc:	6462                	ld	s0,24(sp)
    80013fbe:	6105                	addi	sp,sp,32
    80013fc0:	8082                	ret

0000000080013fc2 <sbi_add_timer>:

void sbi_add_timer(unsigned int hart, unsigned long val)
{
    80013fc2:	1101                	addi	sp,sp,-32
    80013fc4:	ec22                	sd	s0,24(sp)
    80013fc6:	1000                	addi	s0,sp,32
    80013fc8:	87aa                	mv	a5,a0
    80013fca:	feb43023          	sd	a1,-32(s0)
    80013fce:	fef42623          	sw	a5,-20(s0)
    asm volatile("mv a7, %0\nmv a0, %1\nmv a1, %2\necall" ::"r"(SBI_SVCALL_ADD_TIMECMP), "r"(hart),
    80013fd2:	4799                	li	a5,6
    80013fd4:	fec42703          	lw	a4,-20(s0)
    80013fd8:	fe043683          	ld	a3,-32(s0)
    80013fdc:	88be                	mv	a7,a5
    80013fde:	853a                	mv	a0,a4
    80013fe0:	85b6                	mv	a1,a3
    80013fe2:	00000073          	ecall
                 "r"(val)
                 : "a0", "a1", "a7");
}
    80013fe6:	0001                	nop
    80013fe8:	6462                	ld	s0,24(sp)
    80013fea:	6105                	addi	sp,sp,32
    80013fec:	8082                	ret

0000000080013fee <sbi_ack_timer>:

void sbi_ack_timer(void)
{
    80013fee:	1141                	addi	sp,sp,-16
    80013ff0:	e422                	sd	s0,8(sp)
    80013ff2:	0800                	addi	s0,sp,16
    asm volatile("mv a7, %0\necall" ::"r"(SBI_SVCALL_ACK_TIMER) : "a7");
    80013ff4:	479d                	li	a5,7
    80013ff6:	88be                	mv	a7,a5
    80013ff8:	00000073          	ecall
}
    80013ffc:	0001                	nop
    80013ffe:	6422                	ld	s0,8(sp)
    80014000:	0141                	addi	sp,sp,16
    80014002:	8082                	ret

0000000080014004 <sbi_rtc_get_time>:

unsigned long sbi_rtc_get_time(void)
{
    80014004:	1101                	addi	sp,sp,-32
    80014006:	ec22                	sd	s0,24(sp)
    80014008:	1000                	addi	s0,sp,32
    unsigned long ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0"
    8001400a:	47a1                	li	a5,8
    8001400c:	88be                	mv	a7,a5
    8001400e:	00000073          	ecall
    80014012:	87aa                	mv	a5,a0
    80014014:	fef43423          	sd	a5,-24(s0)
                 : "=r"(ret)
                 : "r"(SBI_SVCALL_RTC_GET_TIME)
                 : "a0", "a7");
    return ret;
    80014018:	fe843783          	ld	a5,-24(s0)
}
    8001401c:	853e                	mv	a0,a5
    8001401e:	6462                	ld	s0,24(sp)
    80014020:	6105                	addi	sp,sp,32
    80014022:	8082                	ret

0000000080014024 <sbi_whoami>:

int sbi_whoami(void)
{
    80014024:	1101                	addi	sp,sp,-32
    80014026:	ec22                	sd	s0,24(sp)
    80014028:	1000                	addi	s0,sp,32
    int ret;
    asm volatile("mv a7, %1\necall\nmv %0, a0" : "=r"(ret) : "r"(SBI_SVCALL_WHOAMI) : "a0", "a7");
    8001402a:	47ad                	li	a5,11
    8001402c:	88be                	mv	a7,a5
    8001402e:	00000073          	ecall
    80014032:	87aa                	mv	a5,a0
    80014034:	fef42623          	sw	a5,-20(s0)
    return ret;
    80014038:	fec42783          	lw	a5,-20(s0)
}
    8001403c:	853e                	mv	a0,a5
    8001403e:	6462                	ld	s0,24(sp)
    80014040:	6105                	addi	sp,sp,32
    80014042:	8082                	ret

0000000080014044 <sbi_num_harts>:

int sbi_num_harts(void)
{
    80014044:	1101                	addi	sp,sp,-32
    80014046:	ec06                	sd	ra,24(sp)
    80014048:	e822                	sd	s0,16(sp)
    8001404a:	1000                	addi	s0,sp,32
    unsigned int i;
    int num_harts = 0;
    8001404c:	fe042423          	sw	zero,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    80014050:	fe042623          	sw	zero,-20(s0)
    80014054:	a015                	j	80014078 <sbi_num_harts+0x34>
        if (sbi_hart_get_status(i) != 0) {
    80014056:	fec42783          	lw	a5,-20(s0)
    8001405a:	853e                	mv	a0,a5
    8001405c:	e75ff0ef          	jal	ra,80013ed0 <sbi_hart_get_status>
    80014060:	87aa                	mv	a5,a0
    80014062:	c791                	beqz	a5,8001406e <sbi_num_harts+0x2a>
            num_harts += 1;
    80014064:	fe842783          	lw	a5,-24(s0)
    80014068:	2785                	addiw	a5,a5,1
    8001406a:	fef42423          	sw	a5,-24(s0)
    for (i = 0; i < MAX_ALLOWABLE_HARTS; i++) {
    8001406e:	fec42783          	lw	a5,-20(s0)
    80014072:	2785                	addiw	a5,a5,1
    80014074:	fef42623          	sw	a5,-20(s0)
    80014078:	fec42783          	lw	a5,-20(s0)
    8001407c:	0007871b          	sext.w	a4,a5
    80014080:	478d                	li	a5,3
    80014082:	fce7fae3          	bgeu	a5,a4,80014056 <sbi_num_harts+0x12>
        }
    }
    return num_harts;
    80014086:	fe842783          	lw	a5,-24(s0)
}
    8001408a:	853e                	mv	a0,a5
    8001408c:	60e2                	ld	ra,24(sp)
    8001408e:	6442                	ld	s0,16(sp)
    80014090:	6105                	addi	sp,sp,32
    80014092:	8082                	ret

0000000080014094 <plic_set_priority>:
#define PLIC_PCI_INTB 33
#define PLIC_PCI_INTC 34
#define PLIC_PCI_INTD 35

void plic_set_priority(int interrupt_id, char priority)
{
    80014094:	7179                	addi	sp,sp,-48
    80014096:	f422                	sd	s0,40(sp)
    80014098:	1800                	addi	s0,sp,48
    8001409a:	87aa                	mv	a5,a0
    8001409c:	872e                	mv	a4,a1
    8001409e:	fcf42e23          	sw	a5,-36(s0)
    800140a2:	87ba                	mv	a5,a4
    800140a4:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_PRIORITY(interrupt_id);
    800140a8:	fdc42783          	lw	a5,-36(s0)
    800140ac:	0027979b          	slliw	a5,a5,0x2
    800140b0:	2781                	sext.w	a5,a5
    800140b2:	873e                	mv	a4,a5
    800140b4:	0c0007b7          	lui	a5,0xc000
    800140b8:	97ba                	add	a5,a5,a4
    800140ba:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    800140be:	fdb44783          	lbu	a5,-37(s0)
    800140c2:	2781                	sext.w	a5,a5
    800140c4:	8b9d                	andi	a5,a5,7
    800140c6:	0007871b          	sext.w	a4,a5
    800140ca:	fe843783          	ld	a5,-24(s0)
    800140ce:	c398                	sw	a4,0(a5)
}
    800140d0:	0001                	nop
    800140d2:	7422                	ld	s0,40(sp)
    800140d4:	6145                	addi	sp,sp,48
    800140d6:	8082                	ret

00000000800140d8 <plic_set_threshold>:
void plic_set_threshold(int hart, char priority)
{
    800140d8:	7179                	addi	sp,sp,-48
    800140da:	f422                	sd	s0,40(sp)
    800140dc:	1800                	addi	s0,sp,48
    800140de:	87aa                	mv	a5,a0
    800140e0:	872e                	mv	a4,a1
    800140e2:	fcf42e23          	sw	a5,-36(s0)
    800140e6:	87ba                	mv	a5,a4
    800140e8:	fcf40da3          	sb	a5,-37(s0)
    uint32_t *base = (uint32_t *)PLIC_THRESHOLD(hart, PLIC_MODE_SUPERVISOR);
    800140ec:	fdc42783          	lw	a5,-36(s0)
    800140f0:	0017979b          	slliw	a5,a5,0x1
    800140f4:	2781                	sext.w	a5,a5
    800140f6:	2785                	addiw	a5,a5,1
    800140f8:	2781                	sext.w	a5,a5
    800140fa:	00c7979b          	slliw	a5,a5,0xc
    800140fe:	2781                	sext.w	a5,a5
    80014100:	873e                	mv	a4,a5
    80014102:	0c2007b7          	lui	a5,0xc200
    80014106:	97ba                	add	a5,a5,a4
    80014108:	fef43423          	sd	a5,-24(s0)
    *base          = priority & 0x7;
    8001410c:	fdb44783          	lbu	a5,-37(s0)
    80014110:	2781                	sext.w	a5,a5
    80014112:	8b9d                	andi	a5,a5,7
    80014114:	0007871b          	sext.w	a4,a5
    80014118:	fe843783          	ld	a5,-24(s0)
    8001411c:	c398                	sw	a4,0(a5)
}
    8001411e:	0001                	nop
    80014120:	7422                	ld	s0,40(sp)
    80014122:	6145                	addi	sp,sp,48
    80014124:	8082                	ret

0000000080014126 <plic_enable>:
void plic_enable(int hart, int interrupt_id)
{
    80014126:	7179                	addi	sp,sp,-48
    80014128:	f422                	sd	s0,40(sp)
    8001412a:	1800                	addi	s0,sp,48
    8001412c:	87aa                	mv	a5,a0
    8001412e:	872e                	mv	a4,a1
    80014130:	fcf42e23          	sw	a5,-36(s0)
    80014134:	87ba                	mv	a5,a4
    80014136:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    8001413a:	fdc42783          	lw	a5,-36(s0)
    8001413e:	0017979b          	slliw	a5,a5,0x1
    80014142:	2781                	sext.w	a5,a5
    80014144:	2785                	addiw	a5,a5,1
    80014146:	2781                	sext.w	a5,a5
    80014148:	0077979b          	slliw	a5,a5,0x7
    8001414c:	2781                	sext.w	a5,a5
    8001414e:	873e                	mv	a4,a5
    80014150:	0c0027b7          	lui	a5,0xc002
    80014154:	97ba                	add	a5,a5,a4
    80014156:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] |= 1UL << (interrupt_id % 32);
    8001415a:	fd842783          	lw	a5,-40(s0)
    8001415e:	41f7d71b          	sraiw	a4,a5,0x1f
    80014162:	01b7571b          	srliw	a4,a4,0x1b
    80014166:	9fb9                	addw	a5,a5,a4
    80014168:	4057d79b          	sraiw	a5,a5,0x5
    8001416c:	0007869b          	sext.w	a3,a5
    80014170:	87b6                	mv	a5,a3
    80014172:	078a                	slli	a5,a5,0x2
    80014174:	fe843703          	ld	a4,-24(s0)
    80014178:	97ba                	add	a5,a5,a4
    8001417a:	438c                	lw	a1,0(a5)
    8001417c:	fd842703          	lw	a4,-40(s0)
    80014180:	41f7579b          	sraiw	a5,a4,0x1f
    80014184:	01b7d79b          	srliw	a5,a5,0x1b
    80014188:	9f3d                	addw	a4,a4,a5
    8001418a:	8b7d                	andi	a4,a4,31
    8001418c:	40f707bb          	subw	a5,a4,a5
    80014190:	2781                	sext.w	a5,a5
    80014192:	873e                	mv	a4,a5
    80014194:	4785                	li	a5,1
    80014196:	00e797b3          	sll	a5,a5,a4
    8001419a:	0007861b          	sext.w	a2,a5
    8001419e:	87b6                	mv	a5,a3
    800141a0:	078a                	slli	a5,a5,0x2
    800141a2:	fe843703          	ld	a4,-24(s0)
    800141a6:	97ba                	add	a5,a5,a4
    800141a8:	86ae                	mv	a3,a1
    800141aa:	8732                	mv	a4,a2
    800141ac:	8f55                	or	a4,a4,a3
    800141ae:	2701                	sext.w	a4,a4
    800141b0:	c398                	sw	a4,0(a5)
}
    800141b2:	0001                	nop
    800141b4:	7422                	ld	s0,40(sp)
    800141b6:	6145                	addi	sp,sp,48
    800141b8:	8082                	ret

00000000800141ba <plic_disable>:
void plic_disable(int hart, int interrupt_id)
{
    800141ba:	7179                	addi	sp,sp,-48
    800141bc:	f422                	sd	s0,40(sp)
    800141be:	1800                	addi	s0,sp,48
    800141c0:	87aa                	mv	a5,a0
    800141c2:	872e                	mv	a4,a1
    800141c4:	fcf42e23          	sw	a5,-36(s0)
    800141c8:	87ba                	mv	a5,a4
    800141ca:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_ENABLE(hart, PLIC_MODE_SUPERVISOR);
    800141ce:	fdc42783          	lw	a5,-36(s0)
    800141d2:	0017979b          	slliw	a5,a5,0x1
    800141d6:	2781                	sext.w	a5,a5
    800141d8:	2785                	addiw	a5,a5,1
    800141da:	2781                	sext.w	a5,a5
    800141dc:	0077979b          	slliw	a5,a5,0x7
    800141e0:	2781                	sext.w	a5,a5
    800141e2:	873e                	mv	a4,a5
    800141e4:	0c0027b7          	lui	a5,0xc002
    800141e8:	97ba                	add	a5,a5,a4
    800141ea:	fef43423          	sd	a5,-24(s0)
    base[interrupt_id / 32] &= ~(1UL << (interrupt_id % 32));
    800141ee:	fd842783          	lw	a5,-40(s0)
    800141f2:	41f7d71b          	sraiw	a4,a5,0x1f
    800141f6:	01b7571b          	srliw	a4,a4,0x1b
    800141fa:	9fb9                	addw	a5,a5,a4
    800141fc:	4057d79b          	sraiw	a5,a5,0x5
    80014200:	0007869b          	sext.w	a3,a5
    80014204:	87b6                	mv	a5,a3
    80014206:	078a                	slli	a5,a5,0x2
    80014208:	fe843703          	ld	a4,-24(s0)
    8001420c:	97ba                	add	a5,a5,a4
    8001420e:	438c                	lw	a1,0(a5)
    80014210:	fd842703          	lw	a4,-40(s0)
    80014214:	41f7579b          	sraiw	a5,a4,0x1f
    80014218:	01b7d79b          	srliw	a5,a5,0x1b
    8001421c:	9f3d                	addw	a4,a4,a5
    8001421e:	8b7d                	andi	a4,a4,31
    80014220:	40f707bb          	subw	a5,a4,a5
    80014224:	2781                	sext.w	a5,a5
    80014226:	873e                	mv	a4,a5
    80014228:	4785                	li	a5,1
    8001422a:	00e797b3          	sll	a5,a5,a4
    8001422e:	2781                	sext.w	a5,a5
    80014230:	fff7c793          	not	a5,a5
    80014234:	0007861b          	sext.w	a2,a5
    80014238:	87b6                	mv	a5,a3
    8001423a:	078a                	slli	a5,a5,0x2
    8001423c:	fe843703          	ld	a4,-24(s0)
    80014240:	97ba                	add	a5,a5,a4
    80014242:	86ae                	mv	a3,a1
    80014244:	8732                	mv	a4,a2
    80014246:	8f75                	and	a4,a4,a3
    80014248:	2701                	sext.w	a4,a4
    8001424a:	c398                	sw	a4,0(a5)
}
    8001424c:	0001                	nop
    8001424e:	7422                	ld	s0,40(sp)
    80014250:	6145                	addi	sp,sp,48
    80014252:	8082                	ret

0000000080014254 <plic_claim>:
uint32_t plic_claim(int hart)
{
    80014254:	7179                	addi	sp,sp,-48
    80014256:	f422                	sd	s0,40(sp)
    80014258:	1800                	addi	s0,sp,48
    8001425a:	87aa                	mv	a5,a0
    8001425c:	fcf42e23          	sw	a5,-36(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    80014260:	fdc42783          	lw	a5,-36(s0)
    80014264:	0017979b          	slliw	a5,a5,0x1
    80014268:	2781                	sext.w	a5,a5
    8001426a:	2785                	addiw	a5,a5,1
    8001426c:	2781                	sext.w	a5,a5
    8001426e:	00c7979b          	slliw	a5,a5,0xc
    80014272:	2781                	sext.w	a5,a5
    80014274:	873e                	mv	a4,a5
    80014276:	0c2007b7          	lui	a5,0xc200
    8001427a:	0791                	addi	a5,a5,4
    8001427c:	97ba                	add	a5,a5,a4
    8001427e:	fef43423          	sd	a5,-24(s0)
    return *base;
    80014282:	fe843783          	ld	a5,-24(s0)
    80014286:	439c                	lw	a5,0(a5)
}
    80014288:	853e                	mv	a0,a5
    8001428a:	7422                	ld	s0,40(sp)
    8001428c:	6145                	addi	sp,sp,48
    8001428e:	8082                	ret

0000000080014290 <plic_complete>:
void plic_complete(int hart, int id)
{
    80014290:	7179                	addi	sp,sp,-48
    80014292:	f422                	sd	s0,40(sp)
    80014294:	1800                	addi	s0,sp,48
    80014296:	87aa                	mv	a5,a0
    80014298:	872e                	mv	a4,a1
    8001429a:	fcf42e23          	sw	a5,-36(s0)
    8001429e:	87ba                	mv	a5,a4
    800142a0:	fcf42c23          	sw	a5,-40(s0)
    uint32_t *base = (uint32_t *)PLIC_CLAIM(hart, PLIC_MODE_SUPERVISOR);
    800142a4:	fdc42783          	lw	a5,-36(s0)
    800142a8:	0017979b          	slliw	a5,a5,0x1
    800142ac:	2781                	sext.w	a5,a5
    800142ae:	2785                	addiw	a5,a5,1
    800142b0:	2781                	sext.w	a5,a5
    800142b2:	00c7979b          	slliw	a5,a5,0xc
    800142b6:	2781                	sext.w	a5,a5
    800142b8:	873e                	mv	a4,a5
    800142ba:	0c2007b7          	lui	a5,0xc200
    800142be:	0791                	addi	a5,a5,4
    800142c0:	97ba                	add	a5,a5,a4
    800142c2:	fef43423          	sd	a5,-24(s0)
    *base          = id;
    800142c6:	fd842703          	lw	a4,-40(s0)
    800142ca:	fe843783          	ld	a5,-24(s0)
    800142ce:	c398                	sw	a4,0(a5)
}
    800142d0:	0001                	nop
    800142d2:	7422                	ld	s0,40(sp)
    800142d4:	6145                	addi	sp,sp,48
    800142d6:	8082                	ret

00000000800142d8 <plic_handle_irq>:

void plic_handle_irq(int hart)
{
    800142d8:	7179                	addi	sp,sp,-48
    800142da:	f406                	sd	ra,40(sp)
    800142dc:	f022                	sd	s0,32(sp)
    800142de:	1800                	addi	s0,sp,48
    800142e0:	87aa                	mv	a5,a0
    800142e2:	fcf42e23          	sw	a5,-36(s0)
    int irq = plic_claim(hart);
    800142e6:	fdc42783          	lw	a5,-36(s0)
    800142ea:	853e                	mv	a0,a5
    800142ec:	f69ff0ef          	jal	ra,80014254 <plic_claim>
    800142f0:	87aa                	mv	a5,a0
    800142f2:	2781                	sext.w	a5,a5
    800142f4:	fef42623          	sw	a5,-20(s0)
            pci_dispatch_irq(irq);
#endif
            break;
    }

    plic_complete(hart, irq);
    800142f8:	fec42703          	lw	a4,-20(s0)
    800142fc:	fdc42783          	lw	a5,-36(s0)
    80014300:	85ba                	mv	a1,a4
    80014302:	853e                	mv	a0,a5
    80014304:	f8dff0ef          	jal	ra,80014290 <plic_complete>
}
    80014308:	0001                	nop
    8001430a:	70a2                	ld	ra,40(sp)
    8001430c:	7402                	ld	s0,32(sp)
    8001430e:	6145                	addi	sp,sp,48
    80014310:	8082                	ret

0000000080014312 <plic_init>:

void plic_init(void)
{
    80014312:	1141                	addi	sp,sp,-16
    80014314:	e406                	sd	ra,8(sp)
    80014316:	e022                	sd	s0,0(sp)
    80014318:	0800                	addi	s0,sp,16
    plic_enable(0, PLIC_PCI_INTA);
    8001431a:	02000593          	li	a1,32
    8001431e:	4501                	li	a0,0
    80014320:	e07ff0ef          	jal	ra,80014126 <plic_enable>
    plic_enable(0, PLIC_PCI_INTB);
    80014324:	02100593          	li	a1,33
    80014328:	4501                	li	a0,0
    8001432a:	dfdff0ef          	jal	ra,80014126 <plic_enable>
    plic_enable(0, PLIC_PCI_INTC);
    8001432e:	02200593          	li	a1,34
    80014332:	4501                	li	a0,0
    80014334:	df3ff0ef          	jal	ra,80014126 <plic_enable>
    plic_enable(0, PLIC_PCI_INTD);
    80014338:	02300593          	li	a1,35
    8001433c:	4501                	li	a0,0
    8001433e:	de9ff0ef          	jal	ra,80014126 <plic_enable>

    plic_set_threshold(0, 1);
    80014342:	4585                	li	a1,1
    80014344:	4501                	li	a0,0
    80014346:	d93ff0ef          	jal	ra,800140d8 <plic_set_threshold>

    plic_set_priority(PLIC_PCI_INTA, 3);
    8001434a:	458d                	li	a1,3
    8001434c:	02000513          	li	a0,32
    80014350:	d45ff0ef          	jal	ra,80014094 <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTB, 3);
    80014354:	458d                	li	a1,3
    80014356:	02100513          	li	a0,33
    8001435a:	d3bff0ef          	jal	ra,80014094 <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTC, 3);
    8001435e:	458d                	li	a1,3
    80014360:	02200513          	li	a0,34
    80014364:	d31ff0ef          	jal	ra,80014094 <plic_set_priority>
    plic_set_priority(PLIC_PCI_INTD, 3);
    80014368:	458d                	li	a1,3
    8001436a:	02300513          	li	a0,35
    8001436e:	d27ff0ef          	jal	ra,80014094 <plic_set_priority>
}
    80014372:	0001                	nop
    80014374:	60a2                	ld	ra,8(sp)
    80014376:	6402                	ld	s0,0(sp)
    80014378:	0141                	addi	sp,sp,16
    8001437a:	8082                	ret

000000008001437c <set_taken>:

static uint8_t *bookkeeping;  // Pointer to the bookkeeping area

// For some reason, the macros didn't work for me, so I used the static functions like Marz said and it works.
static void set_taken(uint64_t index)
{
    8001437c:	1101                	addi	sp,sp,-32
    8001437e:	ec22                	sd	s0,24(sp)
    80014380:	1000                	addi	s0,sp,32
    80014382:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2));
    80014386:	00004797          	auipc	a5,0x4
    8001438a:	cca78793          	addi	a5,a5,-822 # 80018050 <bookkeeping>
    8001438e:	6398                	ld	a4,0(a5)
    80014390:	fe843783          	ld	a5,-24(s0)
    80014394:	8389                	srli	a5,a5,0x2
    80014396:	973e                	add	a4,a4,a5
    80014398:	00074703          	lbu	a4,0(a4) # ffffffffc0fff000 <_heap_end+0xffffffff38fef000>
    8001439c:	0187169b          	slliw	a3,a4,0x18
    800143a0:	4186d69b          	sraiw	a3,a3,0x18
    800143a4:	fe843703          	ld	a4,-24(s0)
    800143a8:	2701                	sext.w	a4,a4
    800143aa:	8b0d                	andi	a4,a4,3
    800143ac:	2701                	sext.w	a4,a4
    800143ae:	0017171b          	slliw	a4,a4,0x1
    800143b2:	2701                	sext.w	a4,a4
    800143b4:	4605                	li	a2,1
    800143b6:	00e6173b          	sllw	a4,a2,a4
    800143ba:	2701                	sext.w	a4,a4
    800143bc:	0187171b          	slliw	a4,a4,0x18
    800143c0:	4187571b          	sraiw	a4,a4,0x18
    800143c4:	8f55                	or	a4,a4,a3
    800143c6:	0187169b          	slliw	a3,a4,0x18
    800143ca:	4186d69b          	sraiw	a3,a3,0x18
    800143ce:	00004717          	auipc	a4,0x4
    800143d2:	c8270713          	addi	a4,a4,-894 # 80018050 <bookkeeping>
    800143d6:	6318                	ld	a4,0(a4)
    800143d8:	97ba                	add	a5,a5,a4
    800143da:	0ff6f713          	andi	a4,a3,255
    800143de:	00e78023          	sb	a4,0(a5)
}
    800143e2:	0001                	nop
    800143e4:	6462                	ld	s0,24(sp)
    800143e6:	6105                	addi	sp,sp,32
    800143e8:	8082                	ret

00000000800143ea <clear_taken>:

static void clear_taken(uint64_t index)
{
    800143ea:	1101                	addi	sp,sp,-32
    800143ec:	ec22                	sd	s0,24(sp)
    800143ee:	1000                	addi	s0,sp,32
    800143f0:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2));
    800143f4:	00004797          	auipc	a5,0x4
    800143f8:	c5c78793          	addi	a5,a5,-932 # 80018050 <bookkeeping>
    800143fc:	6398                	ld	a4,0(a5)
    800143fe:	fe843783          	ld	a5,-24(s0)
    80014402:	8389                	srli	a5,a5,0x2
    80014404:	973e                	add	a4,a4,a5
    80014406:	00074703          	lbu	a4,0(a4)
    8001440a:	0187169b          	slliw	a3,a4,0x18
    8001440e:	4186d69b          	sraiw	a3,a3,0x18
    80014412:	fe843703          	ld	a4,-24(s0)
    80014416:	2701                	sext.w	a4,a4
    80014418:	8b0d                	andi	a4,a4,3
    8001441a:	2701                	sext.w	a4,a4
    8001441c:	0017171b          	slliw	a4,a4,0x1
    80014420:	2701                	sext.w	a4,a4
    80014422:	4605                	li	a2,1
    80014424:	00e6173b          	sllw	a4,a2,a4
    80014428:	2701                	sext.w	a4,a4
    8001442a:	0187171b          	slliw	a4,a4,0x18
    8001442e:	4187571b          	sraiw	a4,a4,0x18
    80014432:	fff74713          	not	a4,a4
    80014436:	0187171b          	slliw	a4,a4,0x18
    8001443a:	4187571b          	sraiw	a4,a4,0x18
    8001443e:	8f75                	and	a4,a4,a3
    80014440:	0187169b          	slliw	a3,a4,0x18
    80014444:	4186d69b          	sraiw	a3,a3,0x18
    80014448:	00004717          	auipc	a4,0x4
    8001444c:	c0870713          	addi	a4,a4,-1016 # 80018050 <bookkeeping>
    80014450:	6318                	ld	a4,0(a4)
    80014452:	97ba                	add	a5,a5,a4
    80014454:	0ff6f713          	andi	a4,a3,255
    80014458:	00e78023          	sb	a4,0(a5)
}
    8001445c:	0001                	nop
    8001445e:	6462                	ld	s0,24(sp)
    80014460:	6105                	addi	sp,sp,32
    80014462:	8082                	ret

0000000080014464 <is_taken>:

static int is_taken(uint64_t index)
{
    80014464:	1101                	addi	sp,sp,-32
    80014466:	ec22                	sd	s0,24(sp)
    80014468:	1000                	addi	s0,sp,32
    8001446a:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2));
    8001446e:	00004797          	auipc	a5,0x4
    80014472:	be278793          	addi	a5,a5,-1054 # 80018050 <bookkeeping>
    80014476:	6398                	ld	a4,0(a5)
    80014478:	fe843783          	ld	a5,-24(s0)
    8001447c:	8389                	srli	a5,a5,0x2
    8001447e:	97ba                	add	a5,a5,a4
    80014480:	0007c783          	lbu	a5,0(a5)
    80014484:	0007871b          	sext.w	a4,a5
    80014488:	fe843783          	ld	a5,-24(s0)
    8001448c:	2781                	sext.w	a5,a5
    8001448e:	8b8d                	andi	a5,a5,3
    80014490:	2781                	sext.w	a5,a5
    80014492:	0017979b          	slliw	a5,a5,0x1
    80014496:	2781                	sext.w	a5,a5
    80014498:	4685                	li	a3,1
    8001449a:	00f697bb          	sllw	a5,a3,a5
    8001449e:	2781                	sext.w	a5,a5
    800144a0:	8ff9                	and	a5,a5,a4
    800144a2:	2781                	sext.w	a5,a5
}
    800144a4:	853e                	mv	a0,a5
    800144a6:	6462                	ld	s0,24(sp)
    800144a8:	6105                	addi	sp,sp,32
    800144aa:	8082                	ret

00000000800144ac <set_last>:

static void set_last(uint64_t index)
{
    800144ac:	1101                	addi	sp,sp,-32
    800144ae:	ec22                	sd	s0,24(sp)
    800144b0:	1000                	addi	s0,sp,32
    800144b2:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] |= (1 << ((index % 4) * 2 + 1));
    800144b6:	00004797          	auipc	a5,0x4
    800144ba:	b9a78793          	addi	a5,a5,-1126 # 80018050 <bookkeeping>
    800144be:	6398                	ld	a4,0(a5)
    800144c0:	fe843783          	ld	a5,-24(s0)
    800144c4:	8389                	srli	a5,a5,0x2
    800144c6:	973e                	add	a4,a4,a5
    800144c8:	00074703          	lbu	a4,0(a4)
    800144cc:	0187169b          	slliw	a3,a4,0x18
    800144d0:	4186d69b          	sraiw	a3,a3,0x18
    800144d4:	fe843703          	ld	a4,-24(s0)
    800144d8:	2701                	sext.w	a4,a4
    800144da:	8b0d                	andi	a4,a4,3
    800144dc:	2701                	sext.w	a4,a4
    800144de:	0017171b          	slliw	a4,a4,0x1
    800144e2:	2701                	sext.w	a4,a4
    800144e4:	2705                	addiw	a4,a4,1
    800144e6:	2701                	sext.w	a4,a4
    800144e8:	4605                	li	a2,1
    800144ea:	00e6173b          	sllw	a4,a2,a4
    800144ee:	2701                	sext.w	a4,a4
    800144f0:	0187171b          	slliw	a4,a4,0x18
    800144f4:	4187571b          	sraiw	a4,a4,0x18
    800144f8:	8f55                	or	a4,a4,a3
    800144fa:	0187169b          	slliw	a3,a4,0x18
    800144fe:	4186d69b          	sraiw	a3,a3,0x18
    80014502:	00004717          	auipc	a4,0x4
    80014506:	b4e70713          	addi	a4,a4,-1202 # 80018050 <bookkeeping>
    8001450a:	6318                	ld	a4,0(a4)
    8001450c:	97ba                	add	a5,a5,a4
    8001450e:	0ff6f713          	andi	a4,a3,255
    80014512:	00e78023          	sb	a4,0(a5)
}
    80014516:	0001                	nop
    80014518:	6462                	ld	s0,24(sp)
    8001451a:	6105                	addi	sp,sp,32
    8001451c:	8082                	ret

000000008001451e <clear_last>:

static void clear_last(uint64_t index)
{
    8001451e:	1101                	addi	sp,sp,-32
    80014520:	ec22                	sd	s0,24(sp)
    80014522:	1000                	addi	s0,sp,32
    80014524:	fea43423          	sd	a0,-24(s0)
    bookkeeping[index / 4] &= ~(1 << ((index % 4) * 2 + 1));
    80014528:	00004797          	auipc	a5,0x4
    8001452c:	b2878793          	addi	a5,a5,-1240 # 80018050 <bookkeeping>
    80014530:	6398                	ld	a4,0(a5)
    80014532:	fe843783          	ld	a5,-24(s0)
    80014536:	8389                	srli	a5,a5,0x2
    80014538:	973e                	add	a4,a4,a5
    8001453a:	00074703          	lbu	a4,0(a4)
    8001453e:	0187169b          	slliw	a3,a4,0x18
    80014542:	4186d69b          	sraiw	a3,a3,0x18
    80014546:	fe843703          	ld	a4,-24(s0)
    8001454a:	2701                	sext.w	a4,a4
    8001454c:	8b0d                	andi	a4,a4,3
    8001454e:	2701                	sext.w	a4,a4
    80014550:	0017171b          	slliw	a4,a4,0x1
    80014554:	2701                	sext.w	a4,a4
    80014556:	2705                	addiw	a4,a4,1
    80014558:	2701                	sext.w	a4,a4
    8001455a:	4605                	li	a2,1
    8001455c:	00e6173b          	sllw	a4,a2,a4
    80014560:	2701                	sext.w	a4,a4
    80014562:	0187171b          	slliw	a4,a4,0x18
    80014566:	4187571b          	sraiw	a4,a4,0x18
    8001456a:	fff74713          	not	a4,a4
    8001456e:	0187171b          	slliw	a4,a4,0x18
    80014572:	4187571b          	sraiw	a4,a4,0x18
    80014576:	8f75                	and	a4,a4,a3
    80014578:	0187169b          	slliw	a3,a4,0x18
    8001457c:	4186d69b          	sraiw	a3,a3,0x18
    80014580:	00004717          	auipc	a4,0x4
    80014584:	ad070713          	addi	a4,a4,-1328 # 80018050 <bookkeeping>
    80014588:	6318                	ld	a4,0(a4)
    8001458a:	97ba                	add	a5,a5,a4
    8001458c:	0ff6f713          	andi	a4,a3,255
    80014590:	00e78023          	sb	a4,0(a5)
}
    80014594:	0001                	nop
    80014596:	6462                	ld	s0,24(sp)
    80014598:	6105                	addi	sp,sp,32
    8001459a:	8082                	ret

000000008001459c <is_last>:

static int is_last(uint64_t index)
{
    8001459c:	1101                	addi	sp,sp,-32
    8001459e:	ec22                	sd	s0,24(sp)
    800145a0:	1000                	addi	s0,sp,32
    800145a2:	fea43423          	sd	a0,-24(s0)
    return bookkeeping[index / 4] & (1 << ((index % 4) * 2 + 1));
    800145a6:	00004797          	auipc	a5,0x4
    800145aa:	aaa78793          	addi	a5,a5,-1366 # 80018050 <bookkeeping>
    800145ae:	6398                	ld	a4,0(a5)
    800145b0:	fe843783          	ld	a5,-24(s0)
    800145b4:	8389                	srli	a5,a5,0x2
    800145b6:	97ba                	add	a5,a5,a4
    800145b8:	0007c783          	lbu	a5,0(a5)
    800145bc:	0007871b          	sext.w	a4,a5
    800145c0:	fe843783          	ld	a5,-24(s0)
    800145c4:	2781                	sext.w	a5,a5
    800145c6:	8b8d                	andi	a5,a5,3
    800145c8:	2781                	sext.w	a5,a5
    800145ca:	0017979b          	slliw	a5,a5,0x1
    800145ce:	2781                	sext.w	a5,a5
    800145d0:	2785                	addiw	a5,a5,1
    800145d2:	2781                	sext.w	a5,a5
    800145d4:	4685                	li	a3,1
    800145d6:	00f697bb          	sllw	a5,a3,a5
    800145da:	2781                	sext.w	a5,a5
    800145dc:	8ff9                	and	a5,a5,a4
    800145de:	2781                	sext.w	a5,a5
}
    800145e0:	853e                	mv	a0,a5
    800145e2:	6462                	ld	s0,24(sp)
    800145e4:	6105                	addi	sp,sp,32
    800145e6:	8082                	ret

00000000800145e8 <page_init>:

void page_init(void)
{
    800145e8:	1101                	addi	sp,sp,-32
    800145ea:	ec06                	sd	ra,24(sp)
    800145ec:	e822                	sd	s0,16(sp)
    800145ee:	1000                	addi	s0,sp,32
    /* Initialize the page system. */
    bookkeeping = sym_start(heap);
    800145f0:	00004797          	auipc	a5,0x4
    800145f4:	a6078793          	addi	a5,a5,-1440 # 80018050 <bookkeeping>
    800145f8:	00010717          	auipc	a4,0x10
    800145fc:	a0870713          	addi	a4,a4,-1528 # 80024000 <_heap_start>
    80014600:	e398                	sd	a4,0(a5)
    
    // Print bookkeeping area
    mutex_spinlock(&page_lock);
    80014602:	00004517          	auipc	a0,0x4
    80014606:	a0650513          	addi	a0,a0,-1530 # 80018008 <page_lock>
    8001460a:	f7dfd0ef          	jal	ra,80012586 <mutex_spinlock>

    // Initialize the bookkeeping area
    memset(bookkeeping, 0, BK_SIZE_IN_BYTES);
    8001460e:	00004797          	auipc	a5,0x4
    80014612:	a4278793          	addi	a5,a5,-1470 # 80018050 <bookkeeping>
    80014616:	6394                	ld	a3,0(a5)
    80014618:	07ffc717          	auipc	a4,0x7ffc
    8001461c:	9e870713          	addi	a4,a4,-1560 # 88010000 <_heap_end>
    80014620:	00010797          	auipc	a5,0x10
    80014624:	9e078793          	addi	a5,a5,-1568 # 80024000 <_heap_start>
    80014628:	40f707b3          	sub	a5,a4,a5
    8001462c:	83b9                	srli	a5,a5,0xe
    8001462e:	0007871b          	sext.w	a4,a5
    80014632:	6785                	lui	a5,0x1
    80014634:	37fd                	addiw	a5,a5,-1
    80014636:	9fb9                	addw	a5,a5,a4
    80014638:	2781                	sext.w	a5,a5
    8001463a:	0007871b          	sext.w	a4,a5
    8001463e:	77fd                	lui	a5,0xfffff
    80014640:	8ff9                	and	a5,a5,a4
    80014642:	2781                	sext.w	a5,a5
    80014644:	863e                	mv	a2,a5
    80014646:	4581                	li	a1,0
    80014648:	8536                	mv	a0,a3
    8001464a:	399000ef          	jal	ra,800151e2 <memset>
    // Mark the bookkeeping pages as taken
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    8001464e:	fe043423          	sd	zero,-24(s0)
    80014652:	a811                	j	80014666 <page_init+0x7e>
        set_taken(i);
    80014654:	fe843503          	ld	a0,-24(s0)
    80014658:	d25ff0ef          	jal	ra,8001437c <set_taken>
    for (uint64_t i = 0; i < BK_SIZE_IN_PAGES; i++) {
    8001465c:	fe843783          	ld	a5,-24(s0)
    80014660:	0785                	addi	a5,a5,1
    80014662:	fef43423          	sd	a5,-24(s0)
    80014666:	07ffc717          	auipc	a4,0x7ffc
    8001466a:	99a70713          	addi	a4,a4,-1638 # 88010000 <_heap_end>
    8001466e:	00010797          	auipc	a5,0x10
    80014672:	99278793          	addi	a5,a5,-1646 # 80024000 <_heap_start>
    80014676:	40f707b3          	sub	a5,a4,a5
    8001467a:	00e7d713          	srli	a4,a5,0xe
    8001467e:	6785                	lui	a5,0x1
    80014680:	17fd                	addi	a5,a5,-1
    80014682:	97ba                	add	a5,a5,a4
    80014684:	83b1                	srli	a5,a5,0xc
    80014686:	fe843703          	ld	a4,-24(s0)
    8001468a:	fcf765e3          	bltu	a4,a5,80014654 <page_init+0x6c>
    }
    set_last(BK_SIZE_IN_PAGES - 1);
    8001468e:	07ffc717          	auipc	a4,0x7ffc
    80014692:	97270713          	addi	a4,a4,-1678 # 88010000 <_heap_end>
    80014696:	00010797          	auipc	a5,0x10
    8001469a:	96a78793          	addi	a5,a5,-1686 # 80024000 <_heap_start>
    8001469e:	40f707b3          	sub	a5,a4,a5
    800146a2:	00e7d713          	srli	a4,a5,0xe
    800146a6:	6785                	lui	a5,0x1
    800146a8:	17fd                	addi	a5,a5,-1
    800146aa:	97ba                	add	a5,a5,a4
    800146ac:	83b1                	srli	a5,a5,0xc
    800146ae:	17fd                	addi	a5,a5,-1
    800146b0:	853e                	mv	a0,a5
    800146b2:	dfbff0ef          	jal	ra,800144ac <set_last>

    // Print out the bookkeeping area's contents
    mutex_unlock(&page_lock);
    800146b6:	00004517          	auipc	a0,0x4
    800146ba:	95250513          	addi	a0,a0,-1710 # 80018008 <page_lock>
    800146be:	ef7fd0ef          	jal	ra,800125b4 <mutex_unlock>

    logf(LOG_INFO, "Page Init: 0x%08lx -> 0x%08lx\n", bookkeeping, bookkeeping + BK_SIZE_IN_BYTES);
    800146c2:	00004797          	auipc	a5,0x4
    800146c6:	98e78793          	addi	a5,a5,-1650 # 80018050 <bookkeeping>
    800146ca:	6390                	ld	a2,0(a5)
    800146cc:	00004797          	auipc	a5,0x4
    800146d0:	98478793          	addi	a5,a5,-1660 # 80018050 <bookkeeping>
    800146d4:	6398                	ld	a4,0(a5)
    800146d6:	07ffc697          	auipc	a3,0x7ffc
    800146da:	92a68693          	addi	a3,a3,-1750 # 88010000 <_heap_end>
    800146de:	00010797          	auipc	a5,0x10
    800146e2:	92278793          	addi	a5,a5,-1758 # 80024000 <_heap_start>
    800146e6:	40f687b3          	sub	a5,a3,a5
    800146ea:	00e7d693          	srli	a3,a5,0xe
    800146ee:	6785                	lui	a5,0x1
    800146f0:	17fd                	addi	a5,a5,-1
    800146f2:	96be                	add	a3,a3,a5
    800146f4:	77fd                	lui	a5,0xfffff
    800146f6:	8ff5                	and	a5,a5,a3
    800146f8:	97ba                	add	a5,a5,a4
    800146fa:	86be                	mv	a3,a5
    800146fc:	00005597          	auipc	a1,0x5
    80014700:	1d458593          	addi	a1,a1,468 # 800198d0 <pow10.0+0x6a0>
    80014704:	4511                	li	a0,4
    80014706:	e12ff0ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  Heap size: 0x%lx bytes, %lu pages\n", HEAP_SIZE_IN_BYTES, HEAP_SIZE_IN_PAGES);
    8001470a:	07ffc717          	auipc	a4,0x7ffc
    8001470e:	8f670713          	addi	a4,a4,-1802 # 88010000 <_heap_end>
    80014712:	00010797          	auipc	a5,0x10
    80014716:	8ee78793          	addi	a5,a5,-1810 # 80024000 <_heap_start>
    8001471a:	40f70633          	sub	a2,a4,a5
    8001471e:	07ffc717          	auipc	a4,0x7ffc
    80014722:	8e270713          	addi	a4,a4,-1822 # 88010000 <_heap_end>
    80014726:	00010797          	auipc	a5,0x10
    8001472a:	8da78793          	addi	a5,a5,-1830 # 80024000 <_heap_start>
    8001472e:	40f707b3          	sub	a5,a4,a5
    80014732:	83b1                	srli	a5,a5,0xc
    80014734:	86be                	mv	a3,a5
    80014736:	00005597          	auipc	a1,0x5
    8001473a:	1ba58593          	addi	a1,a1,442 # 800198f0 <pow10.0+0x6c0>
    8001473e:	4511                	li	a0,4
    80014740:	dd8ff0ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  Bookkeeping size: 0x%lx bytes, %lu pages\n", BK_SIZE_IN_BYTES, BK_SIZE_IN_PAGES);
    80014744:	07ffc717          	auipc	a4,0x7ffc
    80014748:	8bc70713          	addi	a4,a4,-1860 # 88010000 <_heap_end>
    8001474c:	00010797          	auipc	a5,0x10
    80014750:	8b478793          	addi	a5,a5,-1868 # 80024000 <_heap_start>
    80014754:	40f707b3          	sub	a5,a4,a5
    80014758:	00e7d713          	srli	a4,a5,0xe
    8001475c:	6785                	lui	a5,0x1
    8001475e:	17fd                	addi	a5,a5,-1
    80014760:	973e                	add	a4,a4,a5
    80014762:	77fd                	lui	a5,0xfffff
    80014764:	00f77633          	and	a2,a4,a5
    80014768:	07ffc717          	auipc	a4,0x7ffc
    8001476c:	89870713          	addi	a4,a4,-1896 # 88010000 <_heap_end>
    80014770:	00010797          	auipc	a5,0x10
    80014774:	89078793          	addi	a5,a5,-1904 # 80024000 <_heap_start>
    80014778:	40f707b3          	sub	a5,a4,a5
    8001477c:	00e7d713          	srli	a4,a5,0xe
    80014780:	6785                	lui	a5,0x1
    80014782:	17fd                	addi	a5,a5,-1
    80014784:	97ba                	add	a5,a5,a4
    80014786:	83b1                	srli	a5,a5,0xc
    80014788:	86be                	mv	a3,a5
    8001478a:	00005597          	auipc	a1,0x5
    8001478e:	18e58593          	addi	a1,a1,398 # 80019918 <pow10.0+0x6e8>
    80014792:	4511                	li	a0,4
    80014794:	d84ff0ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  Taken pages: %lu\n", page_count_taken());
    80014798:	308000ef          	jal	ra,80014aa0 <page_count_taken>
    8001479c:	87aa                	mv	a5,a0
    8001479e:	863e                	mv	a2,a5
    800147a0:	00005597          	auipc	a1,0x5
    800147a4:	1a858593          	addi	a1,a1,424 # 80019948 <pow10.0+0x718>
    800147a8:	4511                	li	a0,4
    800147aa:	d6eff0ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  Free pages: %lu\n", page_count_free());
    800147ae:	27c000ef          	jal	ra,80014a2a <page_count_free>
    800147b2:	87aa                	mv	a5,a0
    800147b4:	863e                	mv	a2,a5
    800147b6:	00005597          	auipc	a1,0x5
    800147ba:	1aa58593          	addi	a1,a1,426 # 80019960 <pow10.0+0x730>
    800147be:	4511                	li	a0,4
    800147c0:	d58ff0ef          	jal	ra,80013d18 <logf>
    logf(LOG_INFO, "  Heap size: 0x%lx bytes, %lu pages\n", HEAP_SIZE_IN_BYTES, HEAP_SIZE_IN_PAGES);
    logf(LOG_INFO, "  Bookkeeping size: 0x%lx bytes, %lu pages\n", BK_SIZE_IN_BYTES, BK_SIZE_IN_PAGES);
    logf(LOG_INFO, "  Taken pages: %lu\n", page_count_taken());
    logf(LOG_INFO, "  Free pages: %lu\n", page_count_free());
    */
}
    800147c4:	0001                	nop
    800147c6:	60e2                	ld	ra,24(sp)
    800147c8:	6442                	ld	s0,16(sp)
    800147ca:	6105                	addi	sp,sp,32
    800147cc:	8082                	ret

00000000800147ce <page_nalloc>:

void *page_nalloc(int n)
{
    800147ce:	7139                	addi	sp,sp,-64
    800147d0:	fc06                	sd	ra,56(sp)
    800147d2:	f822                	sd	s0,48(sp)
    800147d4:	0080                	addi	s0,sp,64
    800147d6:	87aa                	mv	a5,a0
    800147d8:	fcf42623          	sw	a5,-52(s0)
    if (n <= 0) {
    800147dc:	fcc42783          	lw	a5,-52(s0)
    800147e0:	2781                	sext.w	a5,a5
    800147e2:	00f04463          	bgtz	a5,800147ea <page_nalloc+0x1c>
        return NULL;
    800147e6:	4781                	li	a5,0
    800147e8:	aaa9                	j	80014942 <page_nalloc+0x174>
    }

    mutex_spinlock(&page_lock);
    800147ea:	00004517          	auipc	a0,0x4
    800147ee:	81e50513          	addi	a0,a0,-2018 # 80018008 <page_lock>
    800147f2:	d95fd0ef          	jal	ra,80012586 <mutex_spinlock>

    int start = 0;
    800147f6:	fe042623          	sw	zero,-20(s0)
    int consecutive = 0;
    800147fa:	fe042423          	sw	zero,-24(s0)

    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    800147fe:	fe043023          	sd	zero,-32(s0)
    80014802:	aa11                	j	80014916 <page_nalloc+0x148>
        if (!is_taken(i)) {
    80014804:	fe043503          	ld	a0,-32(s0)
    80014808:	c5dff0ef          	jal	ra,80014464 <is_taken>
    8001480c:	87aa                	mv	a5,a0
    8001480e:	0e079563          	bnez	a5,800148f8 <page_nalloc+0x12a>
            if (consecutive == 0) {
    80014812:	fe842783          	lw	a5,-24(s0)
    80014816:	2781                	sext.w	a5,a5
    80014818:	e789                	bnez	a5,80014822 <page_nalloc+0x54>
                start = i;
    8001481a:	fe043783          	ld	a5,-32(s0)
    8001481e:	fef42623          	sw	a5,-20(s0)
            }

            consecutive++;
    80014822:	fe842783          	lw	a5,-24(s0)
    80014826:	2785                	addiw	a5,a5,1
    80014828:	fef42423          	sw	a5,-24(s0)

            if (consecutive >= n) {
    8001482c:	fe842703          	lw	a4,-24(s0)
    80014830:	fcc42783          	lw	a5,-52(s0)
    80014834:	2701                	sext.w	a4,a4
    80014836:	2781                	sext.w	a5,a5
    80014838:	0cf74a63          	blt	a4,a5,8001490c <page_nalloc+0x13e>
                debugf("page_nalloc: found %d consecutive pages starting at 0x%08lx\n", n, start);
    8001483c:	fec42703          	lw	a4,-20(s0)
    80014840:	fcc42783          	lw	a5,-52(s0)
    80014844:	863a                	mv	a2,a4
    80014846:	85be                	mv	a1,a5
    80014848:	00005517          	auipc	a0,0x5
    8001484c:	13050513          	addi	a0,a0,304 # 80019978 <pow10.0+0x748>
    80014850:	d26ff0ef          	jal	ra,80013d76 <debugf>
                for (int j = 0; j < n; j++) {
    80014854:	fc042e23          	sw	zero,-36(s0)
    80014858:	a825                	j	80014890 <page_nalloc+0xc2>
                    debugf("page_nalloc: marking page 0x%08lx as taken\n", start + j);
    8001485a:	fec42703          	lw	a4,-20(s0)
    8001485e:	fdc42783          	lw	a5,-36(s0)
    80014862:	9fb9                	addw	a5,a5,a4
    80014864:	2781                	sext.w	a5,a5
    80014866:	85be                	mv	a1,a5
    80014868:	00005517          	auipc	a0,0x5
    8001486c:	15050513          	addi	a0,a0,336 # 800199b8 <pow10.0+0x788>
    80014870:	d06ff0ef          	jal	ra,80013d76 <debugf>
                    set_taken(start + j);
    80014874:	fec42703          	lw	a4,-20(s0)
    80014878:	fdc42783          	lw	a5,-36(s0)
    8001487c:	9fb9                	addw	a5,a5,a4
    8001487e:	2781                	sext.w	a5,a5
    80014880:	853e                	mv	a0,a5
    80014882:	afbff0ef          	jal	ra,8001437c <set_taken>
                for (int j = 0; j < n; j++) {
    80014886:	fdc42783          	lw	a5,-36(s0)
    8001488a:	2785                	addiw	a5,a5,1
    8001488c:	fcf42e23          	sw	a5,-36(s0)
    80014890:	fdc42703          	lw	a4,-36(s0)
    80014894:	fcc42783          	lw	a5,-52(s0)
    80014898:	2701                	sext.w	a4,a4
    8001489a:	2781                	sext.w	a5,a5
    8001489c:	faf74fe3          	blt	a4,a5,8001485a <page_nalloc+0x8c>
                }
                debugf("page_nalloc: marking page 0x%08lx as last\n", start + n - 1);
    800148a0:	fec42703          	lw	a4,-20(s0)
    800148a4:	fcc42783          	lw	a5,-52(s0)
    800148a8:	9fb9                	addw	a5,a5,a4
    800148aa:	2781                	sext.w	a5,a5
    800148ac:	37fd                	addiw	a5,a5,-1
    800148ae:	2781                	sext.w	a5,a5
    800148b0:	85be                	mv	a1,a5
    800148b2:	00005517          	auipc	a0,0x5
    800148b6:	13650513          	addi	a0,a0,310 # 800199e8 <pow10.0+0x7b8>
    800148ba:	cbcff0ef          	jal	ra,80013d76 <debugf>
                set_last(start + n - 1);
    800148be:	fec42703          	lw	a4,-20(s0)
    800148c2:	fcc42783          	lw	a5,-52(s0)
    800148c6:	9fb9                	addw	a5,a5,a4
    800148c8:	2781                	sext.w	a5,a5
    800148ca:	37fd                	addiw	a5,a5,-1
    800148cc:	2781                	sext.w	a5,a5
    800148ce:	853e                	mv	a0,a5
    800148d0:	bddff0ef          	jal	ra,800144ac <set_last>

                mutex_unlock(&page_lock);
    800148d4:	00003517          	auipc	a0,0x3
    800148d8:	73450513          	addi	a0,a0,1844 # 80018008 <page_lock>
    800148dc:	cd9fd0ef          	jal	ra,800125b4 <mutex_unlock>
                return (void *)(bookkeeping + start * PAGE_SIZE);
    800148e0:	00003797          	auipc	a5,0x3
    800148e4:	77078793          	addi	a5,a5,1904 # 80018050 <bookkeeping>
    800148e8:	639c                	ld	a5,0(a5)
    800148ea:	fec42703          	lw	a4,-20(s0)
    800148ee:	00c7171b          	slliw	a4,a4,0xc
    800148f2:	2701                	sext.w	a4,a4
    800148f4:	97ba                	add	a5,a5,a4
    800148f6:	a0b1                	j	80014942 <page_nalloc+0x174>
            }
        } else {
            debugf("page_nalloc: page 0x%08lx is taken\n", i);
    800148f8:	fe043583          	ld	a1,-32(s0)
    800148fc:	00005517          	auipc	a0,0x5
    80014900:	11c50513          	addi	a0,a0,284 # 80019a18 <pow10.0+0x7e8>
    80014904:	c72ff0ef          	jal	ra,80013d76 <debugf>
            consecutive = 0;
    80014908:	fe042423          	sw	zero,-24(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    8001490c:	fe043783          	ld	a5,-32(s0)
    80014910:	0785                	addi	a5,a5,1
    80014912:	fef43023          	sd	a5,-32(s0)
    80014916:	07ffb717          	auipc	a4,0x7ffb
    8001491a:	6ea70713          	addi	a4,a4,1770 # 88010000 <_heap_end>
    8001491e:	0000f797          	auipc	a5,0xf
    80014922:	6e278793          	addi	a5,a5,1762 # 80024000 <_heap_start>
    80014926:	40f707b3          	sub	a5,a4,a5
    8001492a:	83b1                	srli	a5,a5,0xc
    8001492c:	fe043703          	ld	a4,-32(s0)
    80014930:	ecf76ae3          	bltu	a4,a5,80014804 <page_nalloc+0x36>
        }
    }

    mutex_unlock(&page_lock);
    80014934:	00003517          	auipc	a0,0x3
    80014938:	6d450513          	addi	a0,a0,1748 # 80018008 <page_lock>
    8001493c:	c79fd0ef          	jal	ra,800125b4 <mutex_unlock>
    return NULL;
    80014940:	4781                	li	a5,0
}
    80014942:	853e                	mv	a0,a5
    80014944:	70e2                	ld	ra,56(sp)
    80014946:	7442                	ld	s0,48(sp)
    80014948:	6121                	addi	sp,sp,64
    8001494a:	8082                	ret

000000008001494c <page_znalloc>:

void *page_znalloc(int n)
{
    8001494c:	1101                	addi	sp,sp,-32
    8001494e:	ec22                	sd	s0,24(sp)
    80014950:	1000                	addi	s0,sp,32
    80014952:	87aa                	mv	a5,a0
    80014954:	fef42623          	sw	a5,-20(s0)
    return NULL;
    80014958:	4781                	li	a5,0
    void *mem = page_nalloc(n);
    if (mem) {
        memset(mem, 0, n * PAGE_SIZE);
    }
    return mem;
}
    8001495a:	853e                	mv	a0,a5
    8001495c:	6462                	ld	s0,24(sp)
    8001495e:	6105                	addi	sp,sp,32
    80014960:	8082                	ret

0000000080014962 <page_free>:

void page_free(void *p)
{
    80014962:	7179                	addi	sp,sp,-48
    80014964:	f406                	sd	ra,40(sp)
    80014966:	f022                	sd	s0,32(sp)
    80014968:	1800                	addi	s0,sp,48
    8001496a:	fca43c23          	sd	a0,-40(s0)
    if (p == NULL) {
    8001496e:	fd843783          	ld	a5,-40(s0)
    80014972:	c7dd                	beqz	a5,80014a20 <page_free+0xbe>
        return;
    }
    /* Free the page */
    uint64_t x = ((uint64_t)p - (uint64_t)bookkeeping) / PAGE_SIZE;
    80014974:	fd843783          	ld	a5,-40(s0)
    80014978:	00003717          	auipc	a4,0x3
    8001497c:	6d870713          	addi	a4,a4,1752 # 80018050 <bookkeeping>
    80014980:	6318                	ld	a4,0(a4)
    80014982:	8f99                	sub	a5,a5,a4
    80014984:	83b1                	srli	a5,a5,0xc
    80014986:	fef43423          	sd	a5,-24(s0)
    logf(LOG_INFO, "page_free: freeing page %lu at address 0x%p\n", x, p);
    8001498a:	fd843683          	ld	a3,-40(s0)
    8001498e:	fe843603          	ld	a2,-24(s0)
    80014992:	00005597          	auipc	a1,0x5
    80014996:	0ae58593          	addi	a1,a1,174 # 80019a40 <pow10.0+0x810>
    8001499a:	4511                	li	a0,4
    8001499c:	b7cff0ef          	jal	ra,80013d18 <logf>

    mutex_spinlock(&page_lock);
    800149a0:	00003517          	auipc	a0,0x3
    800149a4:	66850513          	addi	a0,a0,1640 # 80018008 <page_lock>
    800149a8:	bdffd0ef          	jal	ra,80012586 <mutex_spinlock>


    if (!is_taken(x)) {
    800149ac:	fe843503          	ld	a0,-24(s0)
    800149b0:	ab5ff0ef          	jal	ra,80014464 <is_taken>
    800149b4:	87aa                	mv	a5,a0
    800149b6:	eb95                	bnez	a5,800149ea <page_free+0x88>
        logf(LOG_ERROR, "page_free: page 0x%08lx is already free!\n", x);
    800149b8:	fe843603          	ld	a2,-24(s0)
    800149bc:	00005597          	auipc	a1,0x5
    800149c0:	0b458593          	addi	a1,a1,180 # 80019a70 <pow10.0+0x840>
    800149c4:	4505                	li	a0,1
    800149c6:	b52ff0ef          	jal	ra,80013d18 <logf>
        mutex_unlock(&page_lock);
    800149ca:	00003517          	auipc	a0,0x3
    800149ce:	63e50513          	addi	a0,a0,1598 # 80018008 <page_lock>
    800149d2:	be3fd0ef          	jal	ra,800125b4 <mutex_unlock>
        return;
    800149d6:	a0b1                	j	80014a22 <page_free+0xc0>
    }

    // Clear all the pages starting at the index until the last page
    while (is_taken(x) && !is_last(x)) {
        clear_taken(x);
    800149d8:	fe843503          	ld	a0,-24(s0)
    800149dc:	a0fff0ef          	jal	ra,800143ea <clear_taken>
        x++;
    800149e0:	fe843783          	ld	a5,-24(s0)
    800149e4:	0785                	addi	a5,a5,1
    800149e6:	fef43423          	sd	a5,-24(s0)
    while (is_taken(x) && !is_last(x)) {
    800149ea:	fe843503          	ld	a0,-24(s0)
    800149ee:	a77ff0ef          	jal	ra,80014464 <is_taken>
    800149f2:	87aa                	mv	a5,a0
    800149f4:	c799                	beqz	a5,80014a02 <page_free+0xa0>
    800149f6:	fe843503          	ld	a0,-24(s0)
    800149fa:	ba3ff0ef          	jal	ra,8001459c <is_last>
    800149fe:	87aa                	mv	a5,a0
    80014a00:	dfe1                	beqz	a5,800149d8 <page_free+0x76>
    }
    clear_taken(x);
    80014a02:	fe843503          	ld	a0,-24(s0)
    80014a06:	9e5ff0ef          	jal	ra,800143ea <clear_taken>
    clear_last(x);
    80014a0a:	fe843503          	ld	a0,-24(s0)
    80014a0e:	b11ff0ef          	jal	ra,8001451e <clear_last>


    mutex_unlock(&page_lock);
    80014a12:	00003517          	auipc	a0,0x3
    80014a16:	5f650513          	addi	a0,a0,1526 # 80018008 <page_lock>
    80014a1a:	b9bfd0ef          	jal	ra,800125b4 <mutex_unlock>
    80014a1e:	a011                	j	80014a22 <page_free+0xc0>
        return;
    80014a20:	0001                	nop
}
    80014a22:	70a2                	ld	ra,40(sp)
    80014a24:	7402                	ld	s0,32(sp)
    80014a26:	6145                	addi	sp,sp,48
    80014a28:	8082                	ret

0000000080014a2a <page_count_free>:

int page_count_free(void)
{
    80014a2a:	1101                	addi	sp,sp,-32
    80014a2c:	ec06                	sd	ra,24(sp)
    80014a2e:	e822                	sd	s0,16(sp)
    80014a30:	1000                	addi	s0,sp,32
    int ret = 0;
    80014a32:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract taken. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract taken pages from it.
    */

    mutex_spinlock(&page_lock);
    80014a36:	00003517          	auipc	a0,0x3
    80014a3a:	5d250513          	addi	a0,a0,1490 # 80018008 <page_lock>
    80014a3e:	b49fd0ef          	jal	ra,80012586 <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014a42:	fe043023          	sd	zero,-32(s0)
    80014a46:	a00d                	j	80014a68 <page_count_free+0x3e>
       if (!is_taken(i)) {
    80014a48:	fe043503          	ld	a0,-32(s0)
    80014a4c:	a19ff0ef          	jal	ra,80014464 <is_taken>
    80014a50:	87aa                	mv	a5,a0
    80014a52:	e791                	bnez	a5,80014a5e <page_count_free+0x34>
           ret++;
    80014a54:	fec42783          	lw	a5,-20(s0)
    80014a58:	2785                	addiw	a5,a5,1
    80014a5a:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014a5e:	fe043783          	ld	a5,-32(s0)
    80014a62:	0785                	addi	a5,a5,1
    80014a64:	fef43023          	sd	a5,-32(s0)
    80014a68:	07ffb717          	auipc	a4,0x7ffb
    80014a6c:	59870713          	addi	a4,a4,1432 # 88010000 <_heap_end>
    80014a70:	0000f797          	auipc	a5,0xf
    80014a74:	59078793          	addi	a5,a5,1424 # 80024000 <_heap_start>
    80014a78:	40f707b3          	sub	a5,a4,a5
    80014a7c:	83b1                	srli	a5,a5,0xc
    80014a7e:	fe043703          	ld	a4,-32(s0)
    80014a82:	fcf763e3          	bltu	a4,a5,80014a48 <page_count_free+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80014a86:	00003517          	auipc	a0,0x3
    80014a8a:	58250513          	addi	a0,a0,1410 # 80018008 <page_lock>
    80014a8e:	b27fd0ef          	jal	ra,800125b4 <mutex_unlock>

    return ret;
    80014a92:	fec42783          	lw	a5,-20(s0)
}
    80014a96:	853e                	mv	a0,a5
    80014a98:	60e2                	ld	ra,24(sp)
    80014a9a:	6442                	ld	s0,16(sp)
    80014a9c:	6105                	addi	sp,sp,32
    80014a9e:	8082                	ret

0000000080014aa0 <page_count_taken>:

int page_count_taken(void)
{
    80014aa0:	1101                	addi	sp,sp,-32
    80014aa2:	ec06                	sd	ra,24(sp)
    80014aa4:	e822                	sd	s0,16(sp)
    80014aa6:	1000                	addi	s0,sp,32
    int ret = 0;
    80014aa8:	fe042623          	sw	zero,-20(s0)
    /* Don't just take total pages and subtract free. The point
     * of these is to detect anomalies. You are making an assumption
     * if you take total pages and subtract free pages from it.
    */

    mutex_spinlock(&page_lock);
    80014aac:	00003517          	auipc	a0,0x3
    80014ab0:	55c50513          	addi	a0,a0,1372 # 80018008 <page_lock>
    80014ab4:	ad3fd0ef          	jal	ra,80012586 <mutex_spinlock>
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014ab8:	fe043023          	sd	zero,-32(s0)
    80014abc:	a00d                	j	80014ade <page_count_taken+0x3e>
       if (is_taken(i)) {
    80014abe:	fe043503          	ld	a0,-32(s0)
    80014ac2:	9a3ff0ef          	jal	ra,80014464 <is_taken>
    80014ac6:	87aa                	mv	a5,a0
    80014ac8:	c791                	beqz	a5,80014ad4 <page_count_taken+0x34>
           ret++;
    80014aca:	fec42783          	lw	a5,-20(s0)
    80014ace:	2785                	addiw	a5,a5,1
    80014ad0:	fef42623          	sw	a5,-20(s0)
    for (uint64_t i = 0; i < HEAP_SIZE_IN_PAGES; i++) {
    80014ad4:	fe043783          	ld	a5,-32(s0)
    80014ad8:	0785                	addi	a5,a5,1
    80014ada:	fef43023          	sd	a5,-32(s0)
    80014ade:	07ffb717          	auipc	a4,0x7ffb
    80014ae2:	52270713          	addi	a4,a4,1314 # 88010000 <_heap_end>
    80014ae6:	0000f797          	auipc	a5,0xf
    80014aea:	51a78793          	addi	a5,a5,1306 # 80024000 <_heap_start>
    80014aee:	40f707b3          	sub	a5,a4,a5
    80014af2:	83b1                	srli	a5,a5,0xc
    80014af4:	fe043703          	ld	a4,-32(s0)
    80014af8:	fcf763e3          	bltu	a4,a5,80014abe <page_count_taken+0x1e>
       }
    }
    mutex_unlock(&page_lock);
    80014afc:	00003517          	auipc	a0,0x3
    80014b00:	50c50513          	addi	a0,a0,1292 # 80018008 <page_lock>
    80014b04:	ab1fd0ef          	jal	ra,800125b4 <mutex_unlock>

    return ret;
    80014b08:	fec42783          	lw	a5,-20(s0)
    80014b0c:	853e                	mv	a0,a5
    80014b0e:	60e2                	ld	ra,24(sp)
    80014b10:	6442                	ld	s0,16(sp)
    80014b12:	6105                	addi	sp,sp,32
    80014b14:	8082                	ret
	...

0000000080014b20 <_start>:
.section .text
.global _start
_start:
.option push
.option norelax
	la		sp, _stack_end
    80014b20:	0000f117          	auipc	sp,0xf
    80014b24:	4e010113          	addi	sp,sp,1248 # 80024000 <_heap_start>
	la		gp, __global_pointer$
    80014b28:	00003197          	auipc	gp,0x3
    80014b2c:	4d818193          	addi	gp,gp,1240 # 80018000 <kernel_mmu_table>
    # Unlike the SBI, we will be trap returning so that
    # we know the registers sstatus, sip, stvec, and sepc are
    # in a place where we expect them to be. We can just jump
    # into main (tail main) like the SBI, but this ensures the CSRs
    # are what we say they are instead of just assuming from the SBI.
	la		t0, main
    80014b30:	fffff297          	auipc	t0,0xfffff
    80014b34:	84e28293          	addi	t0,t0,-1970 # 8001337e <main>
	csrw	sepc, t0
    80014b38:	14129073          	csrw	sepc,t0
	li		t0, 1 << 9
    80014b3c:	20000293          	li	t0,512
	csrw	sie, t0
    80014b40:	10429073          	csrw	sie,t0
    # 1 << 13 - FS:  in the "initial" position
    # 1 << 8  - SPP: into Supervisor Mode
    # 1 << 5  - SPIE: enable interrupts
	li		t0, (1 << 13) | (1 << 8) | (1 << 5)
    80014b44:	6289                	lui	t0,0x2
    80014b46:	1202829b          	addiw	t0,t0,288
	csrw	sstatus, t0
    80014b4a:	10029073          	csrw	sstatus,t0
    # Load the return address (RA) to the park. When main
    # returns, it will park the HART.
	la		ra, park
    80014b4e:	00000097          	auipc	ra,0x0
    80014b52:	01208093          	addi	ra,ra,18 # 80014b60 <park>
	csrr	a0, sscratch
    80014b56:	14002573          	csrr	a0,sscratch
	sret
    80014b5a:	10200073          	sret
    80014b5e:	0001                	nop

0000000080014b60 <park>:

.section .text
.global park
.align 4
park:
	wfi
    80014b60:	10500073          	wfi
	j	park
    80014b64:	bff5                	j	80014b60 <park>

0000000080014b66 <park_end>:
	...

0000000080014b74 <process_asm_run>:

.section .text
.global process_asm_run
process_asm_run:
    # a0 - Trap frame
    csrw    sscratch, a0
    80014b74:	14051073          	csrw	sscratch,a0
    tail    _spawn_kthread
    80014b78:	4880206f          	j	80017000 <_spawn_kthread>

0000000080014b7c <list_init>:
typedef struct List {
    ListElem head;
} List;

static List *list_init(List *lst)
{
    80014b7c:	1101                	addi	sp,sp,-32
    80014b7e:	ec22                	sd	s0,24(sp)
    80014b80:	1000                	addi	s0,sp,32
    80014b82:	fea43423          	sd	a0,-24(s0)
    lst->head.next = &lst->head;
    80014b86:	fe843703          	ld	a4,-24(s0)
    80014b8a:	fe843783          	ld	a5,-24(s0)
    80014b8e:	e798                	sd	a4,8(a5)
    lst->head.prev = &lst->head;
    80014b90:	fe843703          	ld	a4,-24(s0)
    80014b94:	fe843783          	ld	a5,-24(s0)
    80014b98:	eb98                	sd	a4,16(a5)

    return lst;
    80014b9a:	fe843783          	ld	a5,-24(s0)
}
    80014b9e:	853e                	mv	a0,a5
    80014ba0:	6462                	ld	s0,24(sp)
    80014ba2:	6105                	addi	sp,sp,32
    80014ba4:	8082                	ret

0000000080014ba6 <list_new>:

List *list_new(void)
{
    80014ba6:	1101                	addi	sp,sp,-32
    80014ba8:	ec06                	sd	ra,24(sp)
    80014baa:	e822                	sd	s0,16(sp)
    80014bac:	1000                	addi	s0,sp,32
    List *m = (List *)g_kmalloc(sizeof(List));
    80014bae:	4561                	li	a0,24
    80014bb0:	363010ef          	jal	ra,80016712 <g_kmalloc>
    80014bb4:	fea43423          	sd	a0,-24(s0)
    if (m == NULL) {
    80014bb8:	fe843783          	ld	a5,-24(s0)
    80014bbc:	e399                	bnez	a5,80014bc2 <list_new+0x1c>
        return NULL;
    80014bbe:	4781                	li	a5,0
    80014bc0:	a031                	j	80014bcc <list_new+0x26>
    }
    return list_init(m);
    80014bc2:	fe843503          	ld	a0,-24(s0)
    80014bc6:	fb7ff0ef          	jal	ra,80014b7c <list_init>
    80014bca:	87aa                	mv	a5,a0
}
    80014bcc:	853e                	mv	a0,a5
    80014bce:	60e2                	ld	ra,24(sp)
    80014bd0:	6442                	ld	s0,16(sp)
    80014bd2:	6105                	addi	sp,sp,32
    80014bd4:	8082                	ret

0000000080014bd6 <list_add>:

void list_add(List *lst, uint64_t value)
{
    80014bd6:	7179                	addi	sp,sp,-48
    80014bd8:	f406                	sd	ra,40(sp)
    80014bda:	f022                	sd	s0,32(sp)
    80014bdc:	1800                	addi	s0,sp,48
    80014bde:	fca43c23          	sd	a0,-40(s0)
    80014be2:	fcb43823          	sd	a1,-48(s0)
    ListElem *l;
    l             = (ListElem *)g_kzalloc(sizeof(ListElem));
    80014be6:	4561                	li	a0,24
    80014be8:	3a3010ef          	jal	ra,8001678a <g_kzalloc>
    80014bec:	fea43423          	sd	a0,-24(s0)
    l->next       = lst->head.next;
    80014bf0:	fd843783          	ld	a5,-40(s0)
    80014bf4:	6798                	ld	a4,8(a5)
    80014bf6:	fe843783          	ld	a5,-24(s0)
    80014bfa:	e798                	sd	a4,8(a5)
    l->prev       = &lst->head;
    80014bfc:	fd843703          	ld	a4,-40(s0)
    80014c00:	fe843783          	ld	a5,-24(s0)
    80014c04:	eb98                	sd	a4,16(a5)
    l->next->prev = l;
    80014c06:	fe843783          	ld	a5,-24(s0)
    80014c0a:	679c                	ld	a5,8(a5)
    80014c0c:	fe843703          	ld	a4,-24(s0)
    80014c10:	eb98                	sd	a4,16(a5)
    l->prev->next = l;
    80014c12:	fe843783          	ld	a5,-24(s0)
    80014c16:	6b9c                	ld	a5,16(a5)
    80014c18:	fe843703          	ld	a4,-24(s0)
    80014c1c:	e798                	sd	a4,8(a5)
    l->value      = value;
    80014c1e:	fe843783          	ld	a5,-24(s0)
    80014c22:	fd043703          	ld	a4,-48(s0)
    80014c26:	e398                	sd	a4,0(a5)
}
    80014c28:	0001                	nop
    80014c2a:	70a2                	ld	ra,40(sp)
    80014c2c:	7402                	ld	s0,32(sp)
    80014c2e:	6145                	addi	sp,sp,48
    80014c30:	8082                	ret

0000000080014c32 <list_clear>:

void list_clear(List *lst)
{
    80014c32:	7179                	addi	sp,sp,-48
    80014c34:	f406                	sd	ra,40(sp)
    80014c36:	f022                	sd	s0,32(sp)
    80014c38:	1800                	addi	s0,sp,48
    80014c3a:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014c3e:	fd843783          	ld	a5,-40(s0)
    80014c42:	679c                	ld	a5,8(a5)
    80014c44:	fef43423          	sd	a5,-24(s0)
    80014c48:	a831                	j	80014c64 <list_clear+0x32>
        n = e->next;
    80014c4a:	fe843783          	ld	a5,-24(s0)
    80014c4e:	679c                	ld	a5,8(a5)
    80014c50:	fef43023          	sd	a5,-32(s0)
        list_remove_elem(e);
    80014c54:	fe843503          	ld	a0,-24(s0)
    80014c58:	120000ef          	jal	ra,80014d78 <list_remove_elem>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014c5c:	fe043783          	ld	a5,-32(s0)
    80014c60:	fef43423          	sd	a5,-24(s0)
    80014c64:	fd843783          	ld	a5,-40(s0)
    80014c68:	fe843703          	ld	a4,-24(s0)
    80014c6c:	fcf71fe3          	bne	a4,a5,80014c4a <list_clear+0x18>
    }
}
    80014c70:	0001                	nop
    80014c72:	0001                	nop
    80014c74:	70a2                	ld	ra,40(sp)
    80014c76:	7402                	ld	s0,32(sp)
    80014c78:	6145                	addi	sp,sp,48
    80014c7a:	8082                	ret

0000000080014c7c <list_sort>:

void list_sort(List *lst, LIST_COMPARATOR_PARAM(comp))
{
    80014c7c:	7139                	addi	sp,sp,-64
    80014c7e:	fc06                	sd	ra,56(sp)
    80014c80:	f822                	sd	s0,48(sp)
    80014c82:	0080                	addi	s0,sp,64
    80014c84:	fca43423          	sd	a0,-56(s0)
    80014c88:	fcb43023          	sd	a1,-64(s0)
    ListElem *e;
    bool swapped;
    uint64_t tmp;

    do {
        swapped = false;
    80014c8c:	fe0403a3          	sb	zero,-25(s0)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80014c90:	fc843783          	ld	a5,-56(s0)
    80014c94:	6b9c                	ld	a5,16(a5)
    80014c96:	fef43423          	sd	a5,-24(s0)
    80014c9a:	a8a9                	j	80014cf4 <list_sort+0x78>
            if (!comp(e->value, e->prev->value)) {
    80014c9c:	fe843783          	ld	a5,-24(s0)
    80014ca0:	6398                	ld	a4,0(a5)
    80014ca2:	fe843783          	ld	a5,-24(s0)
    80014ca6:	6b9c                	ld	a5,16(a5)
    80014ca8:	639c                	ld	a5,0(a5)
    80014caa:	fc043683          	ld	a3,-64(s0)
    80014cae:	85be                	mv	a1,a5
    80014cb0:	853a                	mv	a0,a4
    80014cb2:	9682                	jalr	a3
    80014cb4:	87aa                	mv	a5,a0
    80014cb6:	0017c793          	xori	a5,a5,1
    80014cba:	0ff7f793          	andi	a5,a5,255
    80014cbe:	c795                	beqz	a5,80014cea <list_sort+0x6e>
                swapped        = true;
    80014cc0:	4785                	li	a5,1
    80014cc2:	fef403a3          	sb	a5,-25(s0)
                tmp            = e->value;
    80014cc6:	fe843783          	ld	a5,-24(s0)
    80014cca:	639c                	ld	a5,0(a5)
    80014ccc:	fcf43c23          	sd	a5,-40(s0)
                e->value       = e->prev->value;
    80014cd0:	fe843783          	ld	a5,-24(s0)
    80014cd4:	6b9c                	ld	a5,16(a5)
    80014cd6:	6398                	ld	a4,0(a5)
    80014cd8:	fe843783          	ld	a5,-24(s0)
    80014cdc:	e398                	sd	a4,0(a5)
                e->prev->value = tmp;
    80014cde:	fe843783          	ld	a5,-24(s0)
    80014ce2:	6b9c                	ld	a5,16(a5)
    80014ce4:	fd843703          	ld	a4,-40(s0)
    80014ce8:	e398                	sd	a4,0(a5)
        for (e = lst->head.prev; e->prev != &lst->head; e = e->prev) {
    80014cea:	fe843783          	ld	a5,-24(s0)
    80014cee:	6b9c                	ld	a5,16(a5)
    80014cf0:	fef43423          	sd	a5,-24(s0)
    80014cf4:	fe843783          	ld	a5,-24(s0)
    80014cf8:	6b98                	ld	a4,16(a5)
    80014cfa:	fc843783          	ld	a5,-56(s0)
    80014cfe:	f8f71fe3          	bne	a4,a5,80014c9c <list_sort+0x20>
            }
        }
    } while (swapped);
    80014d02:	fe744783          	lbu	a5,-25(s0)
    80014d06:	0ff7f793          	andi	a5,a5,255
    80014d0a:	f3c9                	bnez	a5,80014c8c <list_sort+0x10>
}
    80014d0c:	0001                	nop
    80014d0e:	0001                	nop
    80014d10:	70e2                	ld	ra,56(sp)
    80014d12:	7442                	ld	s0,48(sp)
    80014d14:	6121                	addi	sp,sp,64
    80014d16:	8082                	ret

0000000080014d18 <list_remove>:

bool list_remove(List *lst, uint64_t value)
{
    80014d18:	7179                	addi	sp,sp,-48
    80014d1a:	f406                	sd	ra,40(sp)
    80014d1c:	f022                	sd	s0,32(sp)
    80014d1e:	1800                	addi	s0,sp,48
    80014d20:	fca43c23          	sd	a0,-40(s0)
    80014d24:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(lst, e)
    80014d28:	fd843503          	ld	a0,-40(s0)
    80014d2c:	2ca000ef          	jal	ra,80014ff6 <list_elem_start_ascending>
    80014d30:	fea43423          	sd	a0,-24(s0)
    80014d34:	a025                	j	80014d5c <list_remove+0x44>
    {
        if (e->value == value) {
    80014d36:	fe843783          	ld	a5,-24(s0)
    80014d3a:	639c                	ld	a5,0(a5)
    80014d3c:	fd043703          	ld	a4,-48(s0)
    80014d40:	00f71863          	bne	a4,a5,80014d50 <list_remove+0x38>
            list_remove_elem(e);
    80014d44:	fe843503          	ld	a0,-24(s0)
    80014d48:	030000ef          	jal	ra,80014d78 <list_remove_elem>
            return true;
    80014d4c:	4785                	li	a5,1
    80014d4e:	a005                	j	80014d6e <list_remove+0x56>
    list_for_each(lst, e)
    80014d50:	fe843503          	ld	a0,-24(s0)
    80014d54:	2ea000ef          	jal	ra,8001503e <list_elem_prev>
    80014d58:	fea43423          	sd	a0,-24(s0)
    80014d5c:	fe843583          	ld	a1,-24(s0)
    80014d60:	fd843503          	ld	a0,-40(s0)
    80014d64:	204000ef          	jal	ra,80014f68 <list_elem_valid>
    80014d68:	87aa                	mv	a5,a0
    80014d6a:	f7f1                	bnez	a5,80014d36 <list_remove+0x1e>
        }
    }
    return false;
    80014d6c:	4781                	li	a5,0
}
    80014d6e:	853e                	mv	a0,a5
    80014d70:	70a2                	ld	ra,40(sp)
    80014d72:	7402                	ld	s0,32(sp)
    80014d74:	6145                	addi	sp,sp,48
    80014d76:	8082                	ret

0000000080014d78 <list_remove_elem>:

void list_remove_elem(ListElem *e)
{
    80014d78:	1101                	addi	sp,sp,-32
    80014d7a:	ec06                	sd	ra,24(sp)
    80014d7c:	e822                	sd	s0,16(sp)
    80014d7e:	1000                	addi	s0,sp,32
    80014d80:	fea43423          	sd	a0,-24(s0)
    e->next->prev = e->prev;
    80014d84:	fe843783          	ld	a5,-24(s0)
    80014d88:	679c                	ld	a5,8(a5)
    80014d8a:	fe843703          	ld	a4,-24(s0)
    80014d8e:	6b18                	ld	a4,16(a4)
    80014d90:	eb98                	sd	a4,16(a5)
    e->prev->next = e->next;
    80014d92:	fe843783          	ld	a5,-24(s0)
    80014d96:	6b9c                	ld	a5,16(a5)
    80014d98:	fe843703          	ld	a4,-24(s0)
    80014d9c:	6718                	ld	a4,8(a4)
    80014d9e:	e798                	sd	a4,8(a5)
    g_kfree(e);
    80014da0:	fe843503          	ld	a0,-24(s0)
    80014da4:	209010ef          	jal	ra,800167ac <g_kfree>
}
    80014da8:	0001                	nop
    80014daa:	60e2                	ld	ra,24(sp)
    80014dac:	6442                	ld	s0,16(sp)
    80014dae:	6105                	addi	sp,sp,32
    80014db0:	8082                	ret

0000000080014db2 <list_find_elem>:

ListElem *list_find_elem(List *l, uint64_t value)
{
    80014db2:	7179                	addi	sp,sp,-48
    80014db4:	f406                	sd	ra,40(sp)
    80014db6:	f022                	sd	s0,32(sp)
    80014db8:	1800                	addi	s0,sp,48
    80014dba:	fca43c23          	sd	a0,-40(s0)
    80014dbe:	fcb43823          	sd	a1,-48(s0)
    ListElem *e;
    list_for_each(l, e)
    80014dc2:	fd843503          	ld	a0,-40(s0)
    80014dc6:	230000ef          	jal	ra,80014ff6 <list_elem_start_ascending>
    80014dca:	fea43423          	sd	a0,-24(s0)
    80014dce:	a00d                	j	80014df0 <list_find_elem+0x3e>
    {
        if (e->value == value) {
    80014dd0:	fe843783          	ld	a5,-24(s0)
    80014dd4:	639c                	ld	a5,0(a5)
    80014dd6:	fd043703          	ld	a4,-48(s0)
    80014dda:	00f71563          	bne	a4,a5,80014de4 <list_find_elem+0x32>
            return e;
    80014dde:	fe843783          	ld	a5,-24(s0)
    80014de2:	a005                	j	80014e02 <list_find_elem+0x50>
    list_for_each(l, e)
    80014de4:	fe843503          	ld	a0,-24(s0)
    80014de8:	256000ef          	jal	ra,8001503e <list_elem_prev>
    80014dec:	fea43423          	sd	a0,-24(s0)
    80014df0:	fe843583          	ld	a1,-24(s0)
    80014df4:	fd843503          	ld	a0,-40(s0)
    80014df8:	170000ef          	jal	ra,80014f68 <list_elem_valid>
    80014dfc:	87aa                	mv	a5,a0
    80014dfe:	fbe9                	bnez	a5,80014dd0 <list_find_elem+0x1e>
        }
    }
    return NULL;
    80014e00:	4781                	li	a5,0
}
    80014e02:	853e                	mv	a0,a5
    80014e04:	70a2                	ld	ra,40(sp)
    80014e06:	7402                	ld	s0,32(sp)
    80014e08:	6145                	addi	sp,sp,48
    80014e0a:	8082                	ret

0000000080014e0c <list_contains>:

bool list_contains(const List *lst, uint64_t value)
{
    80014e0c:	7179                	addi	sp,sp,-48
    80014e0e:	f406                	sd	ra,40(sp)
    80014e10:	f022                	sd	s0,32(sp)
    80014e12:	1800                	addi	s0,sp,48
    80014e14:	fca43c23          	sd	a0,-40(s0)
    80014e18:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e = list_find_celem(lst, value);
    80014e1c:	fd043583          	ld	a1,-48(s0)
    80014e20:	fd843503          	ld	a0,-40(s0)
    80014e24:	178000ef          	jal	ra,80014f9c <list_find_celem>
    80014e28:	fea43423          	sd	a0,-24(s0)

    return e == NULL ? false : true;
    80014e2c:	fe843783          	ld	a5,-24(s0)
    80014e30:	00f037b3          	snez	a5,a5
    80014e34:	0ff7f793          	andi	a5,a5,255
}
    80014e38:	853e                	mv	a0,a5
    80014e3a:	70a2                	ld	ra,40(sp)
    80014e3c:	7402                	ld	s0,32(sp)
    80014e3e:	6145                	addi	sp,sp,48
    80014e40:	8082                	ret

0000000080014e42 <list_pop_back>:

ListElem *list_pop_back(List *l)
{
    80014e42:	7179                	addi	sp,sp,-48
    80014e44:	f406                	sd	ra,40(sp)
    80014e46:	f022                	sd	s0,32(sp)
    80014e48:	1800                	addi	s0,sp,48
    80014e4a:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.next) {
    80014e4e:	fd843703          	ld	a4,-40(s0)
    80014e52:	fd843783          	ld	a5,-40(s0)
    80014e56:	679c                	ld	a5,8(a5)
    80014e58:	00f71463          	bne	a4,a5,80014e60 <list_pop_back+0x1e>
        return NULL;
    80014e5c:	4781                	li	a5,0
    80014e5e:	a821                	j	80014e76 <list_pop_back+0x34>
    }
    ListElem *e = l->head.next;
    80014e60:	fd843783          	ld	a5,-40(s0)
    80014e64:	679c                	ld	a5,8(a5)
    80014e66:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    80014e6a:	fe843503          	ld	a0,-24(s0)
    80014e6e:	f0bff0ef          	jal	ra,80014d78 <list_remove_elem>
    return e;
    80014e72:	fe843783          	ld	a5,-24(s0)
}
    80014e76:	853e                	mv	a0,a5
    80014e78:	70a2                	ld	ra,40(sp)
    80014e7a:	7402                	ld	s0,32(sp)
    80014e7c:	6145                	addi	sp,sp,48
    80014e7e:	8082                	ret

0000000080014e80 <list_pop>:

ListElem *list_pop(List *l)
{
    80014e80:	7179                	addi	sp,sp,-48
    80014e82:	f406                	sd	ra,40(sp)
    80014e84:	f022                	sd	s0,32(sp)
    80014e86:	1800                	addi	s0,sp,48
    80014e88:	fca43c23          	sd	a0,-40(s0)
    if (&l->head == l->head.prev) {
    80014e8c:	fd843703          	ld	a4,-40(s0)
    80014e90:	fd843783          	ld	a5,-40(s0)
    80014e94:	6b9c                	ld	a5,16(a5)
    80014e96:	00f71463          	bne	a4,a5,80014e9e <list_pop+0x1e>
        return NULL;
    80014e9a:	4781                	li	a5,0
    80014e9c:	a821                	j	80014eb4 <list_pop+0x34>
    }
    ListElem *e = l->head.prev;
    80014e9e:	fd843783          	ld	a5,-40(s0)
    80014ea2:	6b9c                	ld	a5,16(a5)
    80014ea4:	fef43423          	sd	a5,-24(s0)
    list_remove_elem(e);
    80014ea8:	fe843503          	ld	a0,-24(s0)
    80014eac:	ecdff0ef          	jal	ra,80014d78 <list_remove_elem>
    return e;
    80014eb0:	fe843783          	ld	a5,-24(s0)
}
    80014eb4:	853e                	mv	a0,a5
    80014eb6:	70a2                	ld	ra,40(sp)
    80014eb8:	7402                	ld	s0,32(sp)
    80014eba:	6145                	addi	sp,sp,48
    80014ebc:	8082                	ret

0000000080014ebe <list_size>:

uint64_t list_size(const List *lst)
{
    80014ebe:	7179                	addi	sp,sp,-48
    80014ec0:	f406                	sd	ra,40(sp)
    80014ec2:	f022                	sd	s0,32(sp)
    80014ec4:	1800                	addi	s0,sp,48
    80014ec6:	fca43c23          	sd	a0,-40(s0)
    uint64_t s = 0;
    80014eca:	fe043423          	sd	zero,-24(s0)
    const ListElem *e;
    list_for_ceach(lst, e)
    80014ece:	fd843503          	ld	a0,-40(s0)
    80014ed2:	19c000ef          	jal	ra,8001506e <list_celem_start_ascending>
    80014ed6:	fea43023          	sd	a0,-32(s0)
    80014eda:	a821                	j	80014ef2 <list_size+0x34>
    {
        s += 1;
    80014edc:	fe843783          	ld	a5,-24(s0)
    80014ee0:	0785                	addi	a5,a5,1
    80014ee2:	fef43423          	sd	a5,-24(s0)
    list_for_ceach(lst, e)
    80014ee6:	fe043503          	ld	a0,-32(s0)
    80014eea:	1cc000ef          	jal	ra,800150b6 <list_celem_prev>
    80014eee:	fea43023          	sd	a0,-32(s0)
    80014ef2:	fe043583          	ld	a1,-32(s0)
    80014ef6:	fd843503          	ld	a0,-40(s0)
    80014efa:	06e000ef          	jal	ra,80014f68 <list_elem_valid>
    80014efe:	87aa                	mv	a5,a0
    80014f00:	fff1                	bnez	a5,80014edc <list_size+0x1e>
    }
    return s;
    80014f02:	fe843783          	ld	a5,-24(s0)
}
    80014f06:	853e                	mv	a0,a5
    80014f08:	70a2                	ld	ra,40(sp)
    80014f0a:	7402                	ld	s0,32(sp)
    80014f0c:	6145                	addi	sp,sp,48
    80014f0e:	8082                	ret

0000000080014f10 <list_free>:

void list_free(List *lst)
{
    80014f10:	7179                	addi	sp,sp,-48
    80014f12:	f406                	sd	ra,40(sp)
    80014f14:	f022                	sd	s0,32(sp)
    80014f16:	1800                	addi	s0,sp,48
    80014f18:	fca43c23          	sd	a0,-40(s0)
    ListElem *e, *n;
    if (lst == NULL) {
    80014f1c:	fd843783          	ld	a5,-40(s0)
    80014f20:	cf9d                	beqz	a5,80014f5e <list_free+0x4e>
        return;
    }
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014f22:	fd843783          	ld	a5,-40(s0)
    80014f26:	679c                	ld	a5,8(a5)
    80014f28:	fef43423          	sd	a5,-24(s0)
    80014f2c:	a831                	j	80014f48 <list_free+0x38>
        n = e->next;
    80014f2e:	fe843783          	ld	a5,-24(s0)
    80014f32:	679c                	ld	a5,8(a5)
    80014f34:	fef43023          	sd	a5,-32(s0)
        g_kfree(e);
    80014f38:	fe843503          	ld	a0,-24(s0)
    80014f3c:	071010ef          	jal	ra,800167ac <g_kfree>
    for (e = lst->head.next; e != &lst->head; e = n) {
    80014f40:	fe043783          	ld	a5,-32(s0)
    80014f44:	fef43423          	sd	a5,-24(s0)
    80014f48:	fd843783          	ld	a5,-40(s0)
    80014f4c:	fe843703          	ld	a4,-24(s0)
    80014f50:	fcf71fe3          	bne	a4,a5,80014f2e <list_free+0x1e>
    }
    g_kfree(lst);
    80014f54:	fd843503          	ld	a0,-40(s0)
    80014f58:	055010ef          	jal	ra,800167ac <g_kfree>
    80014f5c:	a011                	j	80014f60 <list_free+0x50>
        return;
    80014f5e:	0001                	nop
}
    80014f60:	70a2                	ld	ra,40(sp)
    80014f62:	7402                	ld	s0,32(sp)
    80014f64:	6145                	addi	sp,sp,48
    80014f66:	8082                	ret

0000000080014f68 <list_elem_valid>:

bool list_elem_valid(const List *l, const ListElem *e)
{
    80014f68:	1101                	addi	sp,sp,-32
    80014f6a:	ec22                	sd	s0,24(sp)
    80014f6c:	1000                	addi	s0,sp,32
    80014f6e:	fea43423          	sd	a0,-24(s0)
    80014f72:	feb43023          	sd	a1,-32(s0)
    return e != NULL && e != &l->head;
    80014f76:	fe043783          	ld	a5,-32(s0)
    80014f7a:	cb89                	beqz	a5,80014f8c <list_elem_valid+0x24>
    80014f7c:	fe843783          	ld	a5,-24(s0)
    80014f80:	fe043703          	ld	a4,-32(s0)
    80014f84:	00f70463          	beq	a4,a5,80014f8c <list_elem_valid+0x24>
    80014f88:	4785                	li	a5,1
    80014f8a:	a011                	j	80014f8e <list_elem_valid+0x26>
    80014f8c:	4781                	li	a5,0
    80014f8e:	8b85                	andi	a5,a5,1
    80014f90:	0ff7f793          	andi	a5,a5,255
}
    80014f94:	853e                	mv	a0,a5
    80014f96:	6462                	ld	s0,24(sp)
    80014f98:	6105                	addi	sp,sp,32
    80014f9a:	8082                	ret

0000000080014f9c <list_find_celem>:

const ListElem *list_find_celem(const List *l, uint64_t value) 
{
    80014f9c:	7179                	addi	sp,sp,-48
    80014f9e:	f406                	sd	ra,40(sp)
    80014fa0:	f022                	sd	s0,32(sp)
    80014fa2:	1800                	addi	s0,sp,48
    80014fa4:	fca43c23          	sd	a0,-40(s0)
    80014fa8:	fcb43823          	sd	a1,-48(s0)
    const ListElem *e;
    list_for_ceach(l, e) 
    80014fac:	fd843503          	ld	a0,-40(s0)
    80014fb0:	0be000ef          	jal	ra,8001506e <list_celem_start_ascending>
    80014fb4:	fea43423          	sd	a0,-24(s0)
    80014fb8:	a00d                	j	80014fda <list_find_celem+0x3e>
    {
        if (e->value == value) {
    80014fba:	fe843783          	ld	a5,-24(s0)
    80014fbe:	639c                	ld	a5,0(a5)
    80014fc0:	fd043703          	ld	a4,-48(s0)
    80014fc4:	00f71563          	bne	a4,a5,80014fce <list_find_celem+0x32>
            return e;
    80014fc8:	fe843783          	ld	a5,-24(s0)
    80014fcc:	a005                	j	80014fec <list_find_celem+0x50>
    list_for_ceach(l, e) 
    80014fce:	fe843503          	ld	a0,-24(s0)
    80014fd2:	0e4000ef          	jal	ra,800150b6 <list_celem_prev>
    80014fd6:	fea43423          	sd	a0,-24(s0)
    80014fda:	fe843583          	ld	a1,-24(s0)
    80014fde:	fd843503          	ld	a0,-40(s0)
    80014fe2:	f87ff0ef          	jal	ra,80014f68 <list_elem_valid>
    80014fe6:	87aa                	mv	a5,a0
    80014fe8:	fbe9                	bnez	a5,80014fba <list_find_celem+0x1e>
        }
    }
    return NULL;
    80014fea:	4781                	li	a5,0
}
    80014fec:	853e                	mv	a0,a5
    80014fee:	70a2                	ld	ra,40(sp)
    80014ff0:	7402                	ld	s0,32(sp)
    80014ff2:	6145                	addi	sp,sp,48
    80014ff4:	8082                	ret

0000000080014ff6 <list_elem_start_ascending>:

ListElem *list_elem_start_ascending(List *l)
{
    80014ff6:	1101                	addi	sp,sp,-32
    80014ff8:	ec22                	sd	s0,24(sp)
    80014ffa:	1000                	addi	s0,sp,32
    80014ffc:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    80015000:	fe843783          	ld	a5,-24(s0)
    80015004:	6b9c                	ld	a5,16(a5)
}
    80015006:	853e                	mv	a0,a5
    80015008:	6462                	ld	s0,24(sp)
    8001500a:	6105                	addi	sp,sp,32
    8001500c:	8082                	ret

000000008001500e <list_elem_start_descending>:

ListElem *list_elem_start_descending(List *l)
{
    8001500e:	1101                	addi	sp,sp,-32
    80015010:	ec22                	sd	s0,24(sp)
    80015012:	1000                	addi	s0,sp,32
    80015014:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    80015018:	fe843783          	ld	a5,-24(s0)
    8001501c:	679c                	ld	a5,8(a5)
}
    8001501e:	853e                	mv	a0,a5
    80015020:	6462                	ld	s0,24(sp)
    80015022:	6105                	addi	sp,sp,32
    80015024:	8082                	ret

0000000080015026 <list_elem_next>:

ListElem *list_elem_next(ListElem *e)
{
    80015026:	1101                	addi	sp,sp,-32
    80015028:	ec22                	sd	s0,24(sp)
    8001502a:	1000                	addi	s0,sp,32
    8001502c:	fea43423          	sd	a0,-24(s0)
    return e->next;
    80015030:	fe843783          	ld	a5,-24(s0)
    80015034:	679c                	ld	a5,8(a5)
}
    80015036:	853e                	mv	a0,a5
    80015038:	6462                	ld	s0,24(sp)
    8001503a:	6105                	addi	sp,sp,32
    8001503c:	8082                	ret

000000008001503e <list_elem_prev>:

ListElem *list_elem_prev(ListElem *e)
{
    8001503e:	1101                	addi	sp,sp,-32
    80015040:	ec22                	sd	s0,24(sp)
    80015042:	1000                	addi	s0,sp,32
    80015044:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    80015048:	fe843783          	ld	a5,-24(s0)
    8001504c:	6b9c                	ld	a5,16(a5)
}
    8001504e:	853e                	mv	a0,a5
    80015050:	6462                	ld	s0,24(sp)
    80015052:	6105                	addi	sp,sp,32
    80015054:	8082                	ret

0000000080015056 <list_elem_value>:

uint64_t list_elem_value(const ListElem *e)
{
    80015056:	1101                	addi	sp,sp,-32
    80015058:	ec22                	sd	s0,24(sp)
    8001505a:	1000                	addi	s0,sp,32
    8001505c:	fea43423          	sd	a0,-24(s0)
    return e->value;
    80015060:	fe843783          	ld	a5,-24(s0)
    80015064:	639c                	ld	a5,0(a5)
}
    80015066:	853e                	mv	a0,a5
    80015068:	6462                	ld	s0,24(sp)
    8001506a:	6105                	addi	sp,sp,32
    8001506c:	8082                	ret

000000008001506e <list_celem_start_ascending>:

const ListElem *list_celem_start_ascending(const List *l) {
    8001506e:	1101                	addi	sp,sp,-32
    80015070:	ec22                	sd	s0,24(sp)
    80015072:	1000                	addi	s0,sp,32
    80015074:	fea43423          	sd	a0,-24(s0)
    return l->head.prev;
    80015078:	fe843783          	ld	a5,-24(s0)
    8001507c:	6b9c                	ld	a5,16(a5)
}
    8001507e:	853e                	mv	a0,a5
    80015080:	6462                	ld	s0,24(sp)
    80015082:	6105                	addi	sp,sp,32
    80015084:	8082                	ret

0000000080015086 <list_celem_start_descending>:
const ListElem *list_celem_start_descending(const List *l) {
    80015086:	1101                	addi	sp,sp,-32
    80015088:	ec22                	sd	s0,24(sp)
    8001508a:	1000                	addi	s0,sp,32
    8001508c:	fea43423          	sd	a0,-24(s0)
    return l->head.next;
    80015090:	fe843783          	ld	a5,-24(s0)
    80015094:	679c                	ld	a5,8(a5)
}
    80015096:	853e                	mv	a0,a5
    80015098:	6462                	ld	s0,24(sp)
    8001509a:	6105                	addi	sp,sp,32
    8001509c:	8082                	ret

000000008001509e <list_celem_next>:
const ListElem *list_celem_next(const ListElem *e) {
    8001509e:	1101                	addi	sp,sp,-32
    800150a0:	ec22                	sd	s0,24(sp)
    800150a2:	1000                	addi	s0,sp,32
    800150a4:	fea43423          	sd	a0,-24(s0)
    return e->next;
    800150a8:	fe843783          	ld	a5,-24(s0)
    800150ac:	679c                	ld	a5,8(a5)
}
    800150ae:	853e                	mv	a0,a5
    800150b0:	6462                	ld	s0,24(sp)
    800150b2:	6105                	addi	sp,sp,32
    800150b4:	8082                	ret

00000000800150b6 <list_celem_prev>:
const ListElem *list_celem_prev(const ListElem *e) {
    800150b6:	1101                	addi	sp,sp,-32
    800150b8:	ec22                	sd	s0,24(sp)
    800150ba:	1000                	addi	s0,sp,32
    800150bc:	fea43423          	sd	a0,-24(s0)
    return e->prev;
    800150c0:	fe843783          	ld	a5,-24(s0)
    800150c4:	6b9c                	ld	a5,16(a5)
}
    800150c6:	853e                	mv	a0,a5
    800150c8:	6462                	ld	s0,24(sp)
    800150ca:	6105                	addi	sp,sp,32
    800150cc:	8082                	ret

00000000800150ce <list_sort_signed_long_comparator_ascending>:

// Default list comparators
LIST_COMPARATOR(list_sort_signed_long_comparator_ascending)
{
    800150ce:	1101                	addi	sp,sp,-32
    800150d0:	ec22                	sd	s0,24(sp)
    800150d2:	1000                	addi	s0,sp,32
    800150d4:	fea43423          	sd	a0,-24(s0)
    800150d8:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    800150dc:	fe843703          	ld	a4,-24(s0)
    800150e0:	fe043783          	ld	a5,-32(s0)
    800150e4:	00e7a7b3          	slt	a5,a5,a4
    800150e8:	0017c793          	xori	a5,a5,1
    800150ec:	0ff7f793          	andi	a5,a5,255
}
    800150f0:	853e                	mv	a0,a5
    800150f2:	6462                	ld	s0,24(sp)
    800150f4:	6105                	addi	sp,sp,32
    800150f6:	8082                	ret

00000000800150f8 <list_sort_signed_long_comparator_descending>:
LIST_COMPARATOR(list_sort_signed_long_comparator_descending)
{
    800150f8:	1101                	addi	sp,sp,-32
    800150fa:	ec22                	sd	s0,24(sp)
    800150fc:	1000                	addi	s0,sp,32
    800150fe:	fea43423          	sd	a0,-24(s0)
    80015102:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    80015106:	fe843703          	ld	a4,-24(s0)
    8001510a:	fe043783          	ld	a5,-32(s0)
    8001510e:	00f727b3          	slt	a5,a4,a5
    80015112:	0017c793          	xori	a5,a5,1
    80015116:	0ff7f793          	andi	a5,a5,255
}
    8001511a:	853e                	mv	a0,a5
    8001511c:	6462                	ld	s0,24(sp)
    8001511e:	6105                	addi	sp,sp,32
    80015120:	8082                	ret

0000000080015122 <list_sort_unsigned_long_comparator_ascending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_ascending)
{
    80015122:	1101                	addi	sp,sp,-32
    80015124:	ec22                	sd	s0,24(sp)
    80015126:	1000                	addi	s0,sp,32
    80015128:	fea43423          	sd	a0,-24(s0)
    8001512c:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    80015130:	fe843703          	ld	a4,-24(s0)
    80015134:	fe043783          	ld	a5,-32(s0)
    80015138:	00e7b7b3          	sltu	a5,a5,a4
    8001513c:	0017c793          	xori	a5,a5,1
    80015140:	0ff7f793          	andi	a5,a5,255
}
    80015144:	853e                	mv	a0,a5
    80015146:	6462                	ld	s0,24(sp)
    80015148:	6105                	addi	sp,sp,32
    8001514a:	8082                	ret

000000008001514c <list_sort_unsigned_long_comparator_descending>:
LIST_COMPARATOR(list_sort_unsigned_long_comparator_descending)
{
    8001514c:	1101                	addi	sp,sp,-32
    8001514e:	ec22                	sd	s0,24(sp)
    80015150:	1000                	addi	s0,sp,32
    80015152:	fea43423          	sd	a0,-24(s0)
    80015156:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    8001515a:	fe843703          	ld	a4,-24(s0)
    8001515e:	fe043783          	ld	a5,-32(s0)
    80015162:	00f737b3          	sltu	a5,a4,a5
    80015166:	0017c793          	xori	a5,a5,1
    8001516a:	0ff7f793          	andi	a5,a5,255
}
    8001516e:	853e                	mv	a0,a5
    80015170:	6462                	ld	s0,24(sp)
    80015172:	6105                	addi	sp,sp,32
    80015174:	8082                	ret

0000000080015176 <list_sort_string_comparator_ascending>:
LIST_COMPARATOR(list_sort_string_comparator_ascending)
{
    80015176:	1101                	addi	sp,sp,-32
    80015178:	ec06                	sd	ra,24(sp)
    8001517a:	e822                	sd	s0,16(sp)
    8001517c:	1000                	addi	s0,sp,32
    8001517e:	fea43423          	sd	a0,-24(s0)
    80015182:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    80015186:	fe843783          	ld	a5,-24(s0)
    8001518a:	fe043703          	ld	a4,-32(s0)
    8001518e:	85ba                	mv	a1,a4
    80015190:	853e                	mv	a0,a5
    80015192:	4e0000ef          	jal	ra,80015672 <strcmp>
    80015196:	87aa                	mv	a5,a0
    80015198:	0017a793          	slti	a5,a5,1
    8001519c:	0ff7f793          	andi	a5,a5,255
}
    800151a0:	853e                	mv	a0,a5
    800151a2:	60e2                	ld	ra,24(sp)
    800151a4:	6442                	ld	s0,16(sp)
    800151a6:	6105                	addi	sp,sp,32
    800151a8:	8082                	ret

00000000800151aa <list_sort_string_comparator_descending>:
LIST_COMPARATOR(list_sort_string_comparator_descending)
{
    800151aa:	1101                	addi	sp,sp,-32
    800151ac:	ec06                	sd	ra,24(sp)
    800151ae:	e822                	sd	s0,16(sp)
    800151b0:	1000                	addi	s0,sp,32
    800151b2:	fea43423          	sd	a0,-24(s0)
    800151b6:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    800151ba:	fe843783          	ld	a5,-24(s0)
    800151be:	fe043703          	ld	a4,-32(s0)
    800151c2:	85ba                	mv	a1,a4
    800151c4:	853e                	mv	a0,a5
    800151c6:	4ac000ef          	jal	ra,80015672 <strcmp>
    800151ca:	87aa                	mv	a5,a0
    800151cc:	fff7c793          	not	a5,a5
    800151d0:	01f7d79b          	srliw	a5,a5,0x1f
    800151d4:	0ff7f793          	andi	a5,a5,255
}
    800151d8:	853e                	mv	a0,a5
    800151da:	60e2                	ld	ra,24(sp)
    800151dc:	6442                	ld	s0,16(sp)
    800151de:	6105                	addi	sp,sp,32
    800151e0:	8082                	ret

00000000800151e2 <memset>:
#include <alloc.h>
#include <stdint.h>
#include <util.h>

void *memset(void *dst, char data, int size)
{
    800151e2:	715d                	addi	sp,sp,-80
    800151e4:	e4a2                	sd	s0,72(sp)
    800151e6:	0880                	addi	s0,sp,80
    800151e8:	faa43c23          	sd	a0,-72(s0)
    800151ec:	87ae                	mv	a5,a1
    800151ee:	8732                	mv	a4,a2
    800151f0:	faf40ba3          	sb	a5,-73(s0)
    800151f4:	87ba                	mv	a5,a4
    800151f6:	faf42823          	sw	a5,-80(s0)
    int64_t i;
    long *ldst = (long *)dst;
    800151fa:	fb843783          	ld	a5,-72(s0)
    800151fe:	fef43023          	sd	a5,-32(s0)
    char *cdst;
    char l[]              = {data, data, data, data, data, data, data, data};
    80015202:	fb744783          	lbu	a5,-73(s0)
    80015206:	fcf40423          	sb	a5,-56(s0)
    8001520a:	fb744783          	lbu	a5,-73(s0)
    8001520e:	fcf404a3          	sb	a5,-55(s0)
    80015212:	fb744783          	lbu	a5,-73(s0)
    80015216:	fcf40523          	sb	a5,-54(s0)
    8001521a:	fb744783          	lbu	a5,-73(s0)
    8001521e:	fcf405a3          	sb	a5,-53(s0)
    80015222:	fb744783          	lbu	a5,-73(s0)
    80015226:	fcf40623          	sb	a5,-52(s0)
    8001522a:	fb744783          	lbu	a5,-73(s0)
    8001522e:	fcf406a3          	sb	a5,-51(s0)
    80015232:	fb744783          	lbu	a5,-73(s0)
    80015236:	fcf40723          	sb	a5,-50(s0)
    8001523a:	fb744783          	lbu	a5,-73(s0)
    8001523e:	fcf407a3          	sb	a5,-49(s0)

    int num_8_byte_copies = size / 8;
    80015242:	fb042783          	lw	a5,-80(s0)
    80015246:	41f7d71b          	sraiw	a4,a5,0x1f
    8001524a:	01d7571b          	srliw	a4,a4,0x1d
    8001524e:	9fb9                	addw	a5,a5,a4
    80015250:	4037d79b          	sraiw	a5,a5,0x3
    80015254:	fcf42a23          	sw	a5,-44(s0)
    int num_1_byte_copies = size % 8;
    80015258:	fb042703          	lw	a4,-80(s0)
    8001525c:	41f7579b          	sraiw	a5,a4,0x1f
    80015260:	01d7d79b          	srliw	a5,a5,0x1d
    80015264:	9f3d                	addw	a4,a4,a5
    80015266:	8b1d                	andi	a4,a4,7
    80015268:	40f707bb          	subw	a5,a4,a5
    8001526c:	fcf42823          	sw	a5,-48(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    80015270:	fe043423          	sd	zero,-24(s0)
    80015274:	a005                	j	80015294 <memset+0xb2>
        *ldst++ = *((long *)l);
    80015276:	fc840713          	addi	a4,s0,-56
    8001527a:	fe043783          	ld	a5,-32(s0)
    8001527e:	00878693          	addi	a3,a5,8
    80015282:	fed43023          	sd	a3,-32(s0)
    80015286:	6318                	ld	a4,0(a4)
    80015288:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    8001528a:	fe843783          	ld	a5,-24(s0)
    8001528e:	0785                	addi	a5,a5,1
    80015290:	fef43423          	sd	a5,-24(s0)
    80015294:	fd442783          	lw	a5,-44(s0)
    80015298:	fe843703          	ld	a4,-24(s0)
    8001529c:	fcf74de3          	blt	a4,a5,80015276 <memset+0x94>
    }

    cdst = (char *)ldst;
    800152a0:	fe043783          	ld	a5,-32(s0)
    800152a4:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    800152a8:	fe043423          	sd	zero,-24(s0)
    800152ac:	a005                	j	800152cc <memset+0xea>
        *cdst++ = data;
    800152ae:	fd843783          	ld	a5,-40(s0)
    800152b2:	00178713          	addi	a4,a5,1
    800152b6:	fce43c23          	sd	a4,-40(s0)
    800152ba:	fb744703          	lbu	a4,-73(s0)
    800152be:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    800152c2:	fe843783          	ld	a5,-24(s0)
    800152c6:	0785                	addi	a5,a5,1
    800152c8:	fef43423          	sd	a5,-24(s0)
    800152cc:	fd042783          	lw	a5,-48(s0)
    800152d0:	fe843703          	ld	a4,-24(s0)
    800152d4:	fcf74de3          	blt	a4,a5,800152ae <memset+0xcc>
    }

    return dst;
    800152d8:	fb843783          	ld	a5,-72(s0)
}
    800152dc:	853e                	mv	a0,a5
    800152de:	6426                	ld	s0,72(sp)
    800152e0:	6161                	addi	sp,sp,80
    800152e2:	8082                	ret

00000000800152e4 <memcpy>:

void *memcpy(void *dst, const void *src, int size)
{
    800152e4:	711d                	addi	sp,sp,-96
    800152e6:	eca2                	sd	s0,88(sp)
    800152e8:	1080                	addi	s0,sp,96
    800152ea:	faa43c23          	sd	a0,-72(s0)
    800152ee:	fab43823          	sd	a1,-80(s0)
    800152f2:	87b2                	mv	a5,a2
    800152f4:	faf42623          	sw	a5,-84(s0)
    int i;
    char *cdst;
    const char *csrc;
    long *ldst            = (long *)dst;
    800152f8:	fb843783          	ld	a5,-72(s0)
    800152fc:	fcf43823          	sd	a5,-48(s0)
    const long *lsrc      = (long *)src;
    80015300:	fb043783          	ld	a5,-80(s0)
    80015304:	fcf43423          	sd	a5,-56(s0)

    int num_8_byte_copies = size / 8;
    80015308:	fac42783          	lw	a5,-84(s0)
    8001530c:	41f7d71b          	sraiw	a4,a5,0x1f
    80015310:	01d7571b          	srliw	a4,a4,0x1d
    80015314:	9fb9                	addw	a5,a5,a4
    80015316:	4037d79b          	sraiw	a5,a5,0x3
    8001531a:	fcf42223          	sw	a5,-60(s0)
    int num_1_byte_copies = size % 8;
    8001531e:	fac42703          	lw	a4,-84(s0)
    80015322:	41f7579b          	sraiw	a5,a4,0x1f
    80015326:	01d7d79b          	srliw	a5,a5,0x1d
    8001532a:	9f3d                	addw	a4,a4,a5
    8001532c:	8b1d                	andi	a4,a4,7
    8001532e:	40f707bb          	subw	a5,a4,a5
    80015332:	fcf42023          	sw	a5,-64(s0)

    for (i = 0; i < num_8_byte_copies; i++) {
    80015336:	fe042623          	sw	zero,-20(s0)
    8001533a:	a025                	j	80015362 <memcpy+0x7e>
        *ldst++ = *lsrc++;
    8001533c:	fc843703          	ld	a4,-56(s0)
    80015340:	00870793          	addi	a5,a4,8
    80015344:	fcf43423          	sd	a5,-56(s0)
    80015348:	fd043783          	ld	a5,-48(s0)
    8001534c:	00878693          	addi	a3,a5,8
    80015350:	fcd43823          	sd	a3,-48(s0)
    80015354:	6318                	ld	a4,0(a4)
    80015356:	e398                	sd	a4,0(a5)
    for (i = 0; i < num_8_byte_copies; i++) {
    80015358:	fec42783          	lw	a5,-20(s0)
    8001535c:	2785                	addiw	a5,a5,1
    8001535e:	fef42623          	sw	a5,-20(s0)
    80015362:	fec42703          	lw	a4,-20(s0)
    80015366:	fc442783          	lw	a5,-60(s0)
    8001536a:	2701                	sext.w	a4,a4
    8001536c:	2781                	sext.w	a5,a5
    8001536e:	fcf747e3          	blt	a4,a5,8001533c <memcpy+0x58>
    }

    cdst = (char *)ldst;
    80015372:	fd043783          	ld	a5,-48(s0)
    80015376:	fef43023          	sd	a5,-32(s0)
    csrc = (char *)lsrc;
    8001537a:	fc843783          	ld	a5,-56(s0)
    8001537e:	fcf43c23          	sd	a5,-40(s0)

    for (i = 0; i < num_1_byte_copies; i++) {
    80015382:	fe042623          	sw	zero,-20(s0)
    80015386:	a035                	j	800153b2 <memcpy+0xce>
        *cdst++ = *csrc++;
    80015388:	fd843703          	ld	a4,-40(s0)
    8001538c:	00170793          	addi	a5,a4,1
    80015390:	fcf43c23          	sd	a5,-40(s0)
    80015394:	fe043783          	ld	a5,-32(s0)
    80015398:	00178693          	addi	a3,a5,1
    8001539c:	fed43023          	sd	a3,-32(s0)
    800153a0:	00074703          	lbu	a4,0(a4)
    800153a4:	00e78023          	sb	a4,0(a5)
    for (i = 0; i < num_1_byte_copies; i++) {
    800153a8:	fec42783          	lw	a5,-20(s0)
    800153ac:	2785                	addiw	a5,a5,1
    800153ae:	fef42623          	sw	a5,-20(s0)
    800153b2:	fec42703          	lw	a4,-20(s0)
    800153b6:	fc042783          	lw	a5,-64(s0)
    800153ba:	2701                	sext.w	a4,a4
    800153bc:	2781                	sext.w	a5,a5
    800153be:	fcf745e3          	blt	a4,a5,80015388 <memcpy+0xa4>
    }

    return dst;
    800153c2:	fb843783          	ld	a5,-72(s0)
}
    800153c6:	853e                	mv	a0,a5
    800153c8:	6466                	ld	s0,88(sp)
    800153ca:	6125                	addi	sp,sp,96
    800153cc:	8082                	ret

00000000800153ce <memmove>:

void *memmove(void *_dst, const void *_src, int n)
{
    800153ce:	7139                	addi	sp,sp,-64
    800153d0:	fc22                	sd	s0,56(sp)
    800153d2:	0080                	addi	s0,sp,64
    800153d4:	fca43c23          	sd	a0,-40(s0)
    800153d8:	fcb43823          	sd	a1,-48(s0)
    800153dc:	87b2                	mv	a5,a2
    800153de:	fcf42623          	sw	a5,-52(s0)
    const char *src = _src;
    800153e2:	fd043783          	ld	a5,-48(s0)
    800153e6:	fef43423          	sd	a5,-24(s0)
    char *dst       = _dst;
    800153ea:	fd843783          	ld	a5,-40(s0)
    800153ee:	fef43023          	sd	a5,-32(s0)

    if (n == 0)
    800153f2:	fcc42783          	lw	a5,-52(s0)
    800153f6:	2781                	sext.w	a5,a5
    800153f8:	e781                	bnez	a5,80015400 <memmove+0x32>
        return _dst;
    800153fa:	fd843783          	ld	a5,-40(s0)
    800153fe:	a845                	j	800154ae <memmove+0xe0>

    if (src < dst && src + n > dst) {
    80015400:	fe843703          	ld	a4,-24(s0)
    80015404:	fe043783          	ld	a5,-32(s0)
    80015408:	08f77c63          	bgeu	a4,a5,800154a0 <memmove+0xd2>
    8001540c:	fcc42783          	lw	a5,-52(s0)
    80015410:	fe843703          	ld	a4,-24(s0)
    80015414:	97ba                	add	a5,a5,a4
    80015416:	fe043703          	ld	a4,-32(s0)
    8001541a:	08f77363          	bgeu	a4,a5,800154a0 <memmove+0xd2>
        src += n;
    8001541e:	fcc42783          	lw	a5,-52(s0)
    80015422:	fe843703          	ld	a4,-24(s0)
    80015426:	97ba                	add	a5,a5,a4
    80015428:	fef43423          	sd	a5,-24(s0)
        dst += n;
    8001542c:	fcc42783          	lw	a5,-52(s0)
    80015430:	fe043703          	ld	a4,-32(s0)
    80015434:	97ba                	add	a5,a5,a4
    80015436:	fef43023          	sd	a5,-32(s0)
        for (; n > 0; n -= 1) {
    8001543a:	a805                	j	8001546a <memmove+0x9c>
            *--dst = *--src;
    8001543c:	fe843783          	ld	a5,-24(s0)
    80015440:	17fd                	addi	a5,a5,-1
    80015442:	fef43423          	sd	a5,-24(s0)
    80015446:	fe043783          	ld	a5,-32(s0)
    8001544a:	17fd                	addi	a5,a5,-1
    8001544c:	fef43023          	sd	a5,-32(s0)
    80015450:	fe843783          	ld	a5,-24(s0)
    80015454:	0007c703          	lbu	a4,0(a5)
    80015458:	fe043783          	ld	a5,-32(s0)
    8001545c:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    80015460:	fcc42783          	lw	a5,-52(s0)
    80015464:	37fd                	addiw	a5,a5,-1
    80015466:	fcf42623          	sw	a5,-52(s0)
    8001546a:	fcc42783          	lw	a5,-52(s0)
    8001546e:	2781                	sext.w	a5,a5
    80015470:	fcf046e3          	bgtz	a5,8001543c <memmove+0x6e>
    if (src < dst && src + n > dst) {
    80015474:	a81d                	j	800154aa <memmove+0xdc>
        }
    }
    else {
        for (; n > 0; n -= 1) {
            *dst++ = *src++;
    80015476:	fe843703          	ld	a4,-24(s0)
    8001547a:	00170793          	addi	a5,a4,1
    8001547e:	fef43423          	sd	a5,-24(s0)
    80015482:	fe043783          	ld	a5,-32(s0)
    80015486:	00178693          	addi	a3,a5,1
    8001548a:	fed43023          	sd	a3,-32(s0)
    8001548e:	00074703          	lbu	a4,0(a4)
    80015492:	00e78023          	sb	a4,0(a5)
        for (; n > 0; n -= 1) {
    80015496:	fcc42783          	lw	a5,-52(s0)
    8001549a:	37fd                	addiw	a5,a5,-1
    8001549c:	fcf42623          	sw	a5,-52(s0)
    800154a0:	fcc42783          	lw	a5,-52(s0)
    800154a4:	2781                	sext.w	a5,a5
    800154a6:	fcf048e3          	bgtz	a5,80015476 <memmove+0xa8>
        }
    }

    return _dst;
    800154aa:	fd843783          	ld	a5,-40(s0)
}
    800154ae:	853e                	mv	a0,a5
    800154b0:	7462                	ld	s0,56(sp)
    800154b2:	6121                	addi	sp,sp,64
    800154b4:	8082                	ret

00000000800154b6 <memcmp>:

int memcmp(const void *haystack, const void *needle, int size)
{
    800154b6:	715d                	addi	sp,sp,-80
    800154b8:	e4a2                	sd	s0,72(sp)
    800154ba:	0880                	addi	s0,sp,80
    800154bc:	fca43423          	sd	a0,-56(s0)
    800154c0:	fcb43023          	sd	a1,-64(s0)
    800154c4:	87b2                	mv	a5,a2
    800154c6:	faf42e23          	sw	a5,-68(s0)
    const char *hay  = (char *)haystack;
    800154ca:	fc843783          	ld	a5,-56(s0)
    800154ce:	fef43023          	sd	a5,-32(s0)
    const char *need = (char *)needle;
    800154d2:	fc043783          	ld	a5,-64(s0)
    800154d6:	fcf43c23          	sd	a5,-40(s0)
    int i;

    for (i = 0; i < (size - 1); i++) {
    800154da:	fe042623          	sw	zero,-20(s0)
    800154de:	a8a1                	j	80015536 <memcmp+0x80>
        if (hay[i] != need[i]) {
    800154e0:	fec42783          	lw	a5,-20(s0)
    800154e4:	fe043703          	ld	a4,-32(s0)
    800154e8:	97ba                	add	a5,a5,a4
    800154ea:	0007c683          	lbu	a3,0(a5)
    800154ee:	fec42783          	lw	a5,-20(s0)
    800154f2:	fd843703          	ld	a4,-40(s0)
    800154f6:	97ba                	add	a5,a5,a4
    800154f8:	0007c783          	lbu	a5,0(a5)
    800154fc:	8736                	mv	a4,a3
    800154fe:	02f70763          	beq	a4,a5,8001552c <memcmp+0x76>
            return hay[i] - need[i];
    80015502:	fec42783          	lw	a5,-20(s0)
    80015506:	fe043703          	ld	a4,-32(s0)
    8001550a:	97ba                	add	a5,a5,a4
    8001550c:	0007c783          	lbu	a5,0(a5)
    80015510:	0007871b          	sext.w	a4,a5
    80015514:	fec42783          	lw	a5,-20(s0)
    80015518:	fd843683          	ld	a3,-40(s0)
    8001551c:	97b6                	add	a5,a5,a3
    8001551e:	0007c783          	lbu	a5,0(a5)
    80015522:	2781                	sext.w	a5,a5
    80015524:	40f707bb          	subw	a5,a4,a5
    80015528:	2781                	sext.w	a5,a5
    8001552a:	a0a1                	j	80015572 <memcmp+0xbc>
    for (i = 0; i < (size - 1); i++) {
    8001552c:	fec42783          	lw	a5,-20(s0)
    80015530:	2785                	addiw	a5,a5,1
    80015532:	fef42623          	sw	a5,-20(s0)
    80015536:	fbc42783          	lw	a5,-68(s0)
    8001553a:	37fd                	addiw	a5,a5,-1
    8001553c:	0007871b          	sext.w	a4,a5
    80015540:	fec42783          	lw	a5,-20(s0)
    80015544:	2781                	sext.w	a5,a5
    80015546:	f8e7cde3          	blt	a5,a4,800154e0 <memcmp+0x2a>
        }
    }

    return hay[i] - need[i];
    8001554a:	fec42783          	lw	a5,-20(s0)
    8001554e:	fe043703          	ld	a4,-32(s0)
    80015552:	97ba                	add	a5,a5,a4
    80015554:	0007c783          	lbu	a5,0(a5)
    80015558:	0007871b          	sext.w	a4,a5
    8001555c:	fec42783          	lw	a5,-20(s0)
    80015560:	fd843683          	ld	a3,-40(s0)
    80015564:	97b6                	add	a5,a5,a3
    80015566:	0007c783          	lbu	a5,0(a5)
    8001556a:	2781                	sext.w	a5,a5
    8001556c:	40f707bb          	subw	a5,a4,a5
    80015570:	2781                	sext.w	a5,a5
}
    80015572:	853e                	mv	a0,a5
    80015574:	6426                	ld	s0,72(sp)
    80015576:	6161                	addi	sp,sp,80
    80015578:	8082                	ret

000000008001557a <atoi>:

int atoi(const char *st)
{
    8001557a:	7139                	addi	sp,sp,-64
    8001557c:	fc22                	sd	s0,56(sp)
    8001557e:	0080                	addi	s0,sp,64
    80015580:	fca43423          	sd	a0,-56(s0)
    int r = 0;
    80015584:	fe042623          	sw	zero,-20(s0)
    int p = 1;
    80015588:	4785                	li	a5,1
    8001558a:	fef42423          	sw	a5,-24(s0)
    int i;
    int l = 0;
    8001558e:	fe042023          	sw	zero,-32(s0)
    int n = 0;
    80015592:	fc042e23          	sw	zero,-36(s0)

    if (st[0] == '-') {
    80015596:	fc843783          	ld	a5,-56(s0)
    8001559a:	0007c783          	lbu	a5,0(a5)
    8001559e:	873e                	mv	a4,a5
    800155a0:	02d00793          	li	a5,45
    800155a4:	02f71063          	bne	a4,a5,800155c4 <atoi+0x4a>
        st++;
    800155a8:	fc843783          	ld	a5,-56(s0)
    800155ac:	0785                	addi	a5,a5,1
    800155ae:	fcf43423          	sd	a5,-56(s0)
        n = 1;
    800155b2:	4785                	li	a5,1
    800155b4:	fcf42e23          	sw	a5,-36(s0)
    }

    while (st[l] >= '0' && st[l] <= '9')
    800155b8:	a031                	j	800155c4 <atoi+0x4a>
        l++;
    800155ba:	fe042783          	lw	a5,-32(s0)
    800155be:	2785                	addiw	a5,a5,1
    800155c0:	fef42023          	sw	a5,-32(s0)
    while (st[l] >= '0' && st[l] <= '9')
    800155c4:	fe042783          	lw	a5,-32(s0)
    800155c8:	fc843703          	ld	a4,-56(s0)
    800155cc:	97ba                	add	a5,a5,a4
    800155ce:	0007c783          	lbu	a5,0(a5)
    800155d2:	873e                	mv	a4,a5
    800155d4:	02f00793          	li	a5,47
    800155d8:	00e7fe63          	bgeu	a5,a4,800155f4 <atoi+0x7a>
    800155dc:	fe042783          	lw	a5,-32(s0)
    800155e0:	fc843703          	ld	a4,-56(s0)
    800155e4:	97ba                	add	a5,a5,a4
    800155e6:	0007c783          	lbu	a5,0(a5)
    800155ea:	873e                	mv	a4,a5
    800155ec:	03900793          	li	a5,57
    800155f0:	fce7f5e3          	bgeu	a5,a4,800155ba <atoi+0x40>

    for (i = l - 1; i >= 0; i--) {
    800155f4:	fe042783          	lw	a5,-32(s0)
    800155f8:	37fd                	addiw	a5,a5,-1
    800155fa:	fef42223          	sw	a5,-28(s0)
    800155fe:	a0a9                	j	80015648 <atoi+0xce>
        r += p * (st[i] - '0');
    80015600:	fe442783          	lw	a5,-28(s0)
    80015604:	fc843703          	ld	a4,-56(s0)
    80015608:	97ba                	add	a5,a5,a4
    8001560a:	0007c783          	lbu	a5,0(a5)
    8001560e:	2781                	sext.w	a5,a5
    80015610:	fd07879b          	addiw	a5,a5,-48
    80015614:	2781                	sext.w	a5,a5
    80015616:	fe842703          	lw	a4,-24(s0)
    8001561a:	02f707bb          	mulw	a5,a4,a5
    8001561e:	2781                	sext.w	a5,a5
    80015620:	fec42703          	lw	a4,-20(s0)
    80015624:	9fb9                	addw	a5,a5,a4
    80015626:	fef42623          	sw	a5,-20(s0)
        p *= 10;
    8001562a:	fe842703          	lw	a4,-24(s0)
    8001562e:	87ba                	mv	a5,a4
    80015630:	0027979b          	slliw	a5,a5,0x2
    80015634:	9fb9                	addw	a5,a5,a4
    80015636:	0017979b          	slliw	a5,a5,0x1
    8001563a:	fef42423          	sw	a5,-24(s0)
    for (i = l - 1; i >= 0; i--) {
    8001563e:	fe442783          	lw	a5,-28(s0)
    80015642:	37fd                	addiw	a5,a5,-1
    80015644:	fef42223          	sw	a5,-28(s0)
    80015648:	fe442783          	lw	a5,-28(s0)
    8001564c:	2781                	sext.w	a5,a5
    8001564e:	fa07d9e3          	bgez	a5,80015600 <atoi+0x86>
    }

    return (n ? -r : r);
    80015652:	fdc42783          	lw	a5,-36(s0)
    80015656:	2781                	sext.w	a5,a5
    80015658:	c799                	beqz	a5,80015666 <atoi+0xec>
    8001565a:	fec42783          	lw	a5,-20(s0)
    8001565e:	40f007bb          	negw	a5,a5
    80015662:	2781                	sext.w	a5,a5
    80015664:	a019                	j	8001566a <atoi+0xf0>
    80015666:	fec42783          	lw	a5,-20(s0)
}
    8001566a:	853e                	mv	a0,a5
    8001566c:	7462                	ld	s0,56(sp)
    8001566e:	6121                	addi	sp,sp,64
    80015670:	8082                	ret

0000000080015672 <strcmp>:

int strcmp(const char *l, const char *r)
{
    80015672:	7139                	addi	sp,sp,-64
    80015674:	fc22                	sd	s0,56(sp)
    80015676:	0080                	addi	s0,sp,64
    80015678:	fca43423          	sd	a0,-56(s0)
    8001567c:	fcb43023          	sd	a1,-64(s0)
    const unsigned char *s1 = (const unsigned char *)l;
    80015680:	fc843783          	ld	a5,-56(s0)
    80015684:	fef43423          	sd	a5,-24(s0)
    const unsigned char *s2 = (const unsigned char *)r;
    80015688:	fc043783          	ld	a5,-64(s0)
    8001568c:	fef43023          	sd	a5,-32(s0)
    unsigned int c1, c2;

    do {
        c1 = (unsigned char)*s1++;
    80015690:	fe843783          	ld	a5,-24(s0)
    80015694:	00178713          	addi	a4,a5,1
    80015698:	fee43423          	sd	a4,-24(s0)
    8001569c:	0007c783          	lbu	a5,0(a5)
    800156a0:	fcf42e23          	sw	a5,-36(s0)
        c2 = (unsigned char)*s2++;
    800156a4:	fe043783          	ld	a5,-32(s0)
    800156a8:	00178713          	addi	a4,a5,1
    800156ac:	fee43023          	sd	a4,-32(s0)
    800156b0:	0007c783          	lbu	a5,0(a5)
    800156b4:	fcf42c23          	sw	a5,-40(s0)
        if (c1 == '\0')
    800156b8:	fdc42783          	lw	a5,-36(s0)
    800156bc:	2781                	sext.w	a5,a5
    800156be:	eb91                	bnez	a5,800156d2 <strcmp+0x60>
            return c1 - c2;
    800156c0:	fdc42703          	lw	a4,-36(s0)
    800156c4:	fd842783          	lw	a5,-40(s0)
    800156c8:	40f707bb          	subw	a5,a4,a5
    800156cc:	2781                	sext.w	a5,a5
    800156ce:	2781                	sext.w	a5,a5
    800156d0:	a00d                	j	800156f2 <strcmp+0x80>
    } while (c1 == c2);
    800156d2:	fdc42703          	lw	a4,-36(s0)
    800156d6:	fd842783          	lw	a5,-40(s0)
    800156da:	2701                	sext.w	a4,a4
    800156dc:	2781                	sext.w	a5,a5
    800156de:	faf709e3          	beq	a4,a5,80015690 <strcmp+0x1e>

    return c1 - c2;
    800156e2:	fdc42703          	lw	a4,-36(s0)
    800156e6:	fd842783          	lw	a5,-40(s0)
    800156ea:	40f707bb          	subw	a5,a4,a5
    800156ee:	2781                	sext.w	a5,a5
    800156f0:	2781                	sext.w	a5,a5
}
    800156f2:	853e                	mv	a0,a5
    800156f4:	7462                	ld	s0,56(sp)
    800156f6:	6121                	addi	sp,sp,64
    800156f8:	8082                	ret

00000000800156fa <strncmp>:

int strncmp(const char *left, const char *right, int n)
{
    800156fa:	7139                	addi	sp,sp,-64
    800156fc:	fc22                	sd	s0,56(sp)
    800156fe:	0080                	addi	s0,sp,64
    80015700:	fca43c23          	sd	a0,-40(s0)
    80015704:	fcb43823          	sd	a1,-48(s0)
    80015708:	87b2                	mv	a5,a2
    8001570a:	fcf42623          	sw	a5,-52(s0)
    unsigned int c1 = '\0';
    8001570e:	fe042623          	sw	zero,-20(s0)
    unsigned int c2 = '\0';
    80015712:	fe042423          	sw	zero,-24(s0)

    if (n >= 4) {
    80015716:	fcc42783          	lw	a5,-52(s0)
    8001571a:	0007871b          	sext.w	a4,a5
    8001571e:	478d                	li	a5,3
    80015720:	1ce7da63          	bge	a5,a4,800158f4 <strncmp+0x1fa>
        int n4 = n >> 2;
    80015724:	fcc42783          	lw	a5,-52(s0)
    80015728:	4027d79b          	sraiw	a5,a5,0x2
    8001572c:	fef42223          	sw	a5,-28(s0)
        do {
            c1 = (unsigned char)*left++;
    80015730:	fd843783          	ld	a5,-40(s0)
    80015734:	00178713          	addi	a4,a5,1
    80015738:	fce43c23          	sd	a4,-40(s0)
    8001573c:	0007c783          	lbu	a5,0(a5)
    80015740:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80015744:	fd043783          	ld	a5,-48(s0)
    80015748:	00178713          	addi	a4,a5,1
    8001574c:	fce43823          	sd	a4,-48(s0)
    80015750:	0007c783          	lbu	a5,0(a5)
    80015754:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    80015758:	fec42783          	lw	a5,-20(s0)
    8001575c:	2781                	sext.w	a5,a5
    8001575e:	cb89                	beqz	a5,80015770 <strncmp+0x76>
    80015760:	fec42703          	lw	a4,-20(s0)
    80015764:	fe842783          	lw	a5,-24(s0)
    80015768:	2701                	sext.w	a4,a4
    8001576a:	2781                	sext.w	a5,a5
    8001576c:	00f70b63          	beq	a4,a5,80015782 <strncmp+0x88>
                return c1 - c2;
    80015770:	fec42703          	lw	a4,-20(s0)
    80015774:	fe842783          	lw	a5,-24(s0)
    80015778:	40f707bb          	subw	a5,a4,a5
    8001577c:	2781                	sext.w	a5,a5
    8001577e:	2781                	sext.w	a5,a5
    80015780:	a279                	j	8001590e <strncmp+0x214>
            }

            c1 = (unsigned char)*left++;
    80015782:	fd843783          	ld	a5,-40(s0)
    80015786:	00178713          	addi	a4,a5,1
    8001578a:	fce43c23          	sd	a4,-40(s0)
    8001578e:	0007c783          	lbu	a5,0(a5)
    80015792:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    80015796:	fd043783          	ld	a5,-48(s0)
    8001579a:	00178713          	addi	a4,a5,1
    8001579e:	fce43823          	sd	a4,-48(s0)
    800157a2:	0007c783          	lbu	a5,0(a5)
    800157a6:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    800157aa:	fec42783          	lw	a5,-20(s0)
    800157ae:	2781                	sext.w	a5,a5
    800157b0:	cb89                	beqz	a5,800157c2 <strncmp+0xc8>
    800157b2:	fec42703          	lw	a4,-20(s0)
    800157b6:	fe842783          	lw	a5,-24(s0)
    800157ba:	2701                	sext.w	a4,a4
    800157bc:	2781                	sext.w	a5,a5
    800157be:	00f70b63          	beq	a4,a5,800157d4 <strncmp+0xda>
                return c1 - c2;
    800157c2:	fec42703          	lw	a4,-20(s0)
    800157c6:	fe842783          	lw	a5,-24(s0)
    800157ca:	40f707bb          	subw	a5,a4,a5
    800157ce:	2781                	sext.w	a5,a5
    800157d0:	2781                	sext.w	a5,a5
    800157d2:	aa35                	j	8001590e <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    800157d4:	fd843783          	ld	a5,-40(s0)
    800157d8:	00178713          	addi	a4,a5,1
    800157dc:	fce43c23          	sd	a4,-40(s0)
    800157e0:	0007c783          	lbu	a5,0(a5)
    800157e4:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    800157e8:	fd043783          	ld	a5,-48(s0)
    800157ec:	00178713          	addi	a4,a5,1
    800157f0:	fce43823          	sd	a4,-48(s0)
    800157f4:	0007c783          	lbu	a5,0(a5)
    800157f8:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    800157fc:	fec42783          	lw	a5,-20(s0)
    80015800:	2781                	sext.w	a5,a5
    80015802:	cb89                	beqz	a5,80015814 <strncmp+0x11a>
    80015804:	fec42703          	lw	a4,-20(s0)
    80015808:	fe842783          	lw	a5,-24(s0)
    8001580c:	2701                	sext.w	a4,a4
    8001580e:	2781                	sext.w	a5,a5
    80015810:	00f70b63          	beq	a4,a5,80015826 <strncmp+0x12c>
                return c1 - c2;
    80015814:	fec42703          	lw	a4,-20(s0)
    80015818:	fe842783          	lw	a5,-24(s0)
    8001581c:	40f707bb          	subw	a5,a4,a5
    80015820:	2781                	sext.w	a5,a5
    80015822:	2781                	sext.w	a5,a5
    80015824:	a0ed                	j	8001590e <strncmp+0x214>
            }
            c1 = (unsigned char)*left++;
    80015826:	fd843783          	ld	a5,-40(s0)
    8001582a:	00178713          	addi	a4,a5,1
    8001582e:	fce43c23          	sd	a4,-40(s0)
    80015832:	0007c783          	lbu	a5,0(a5)
    80015836:	fef42623          	sw	a5,-20(s0)
            c2 = (unsigned char)*right++;
    8001583a:	fd043783          	ld	a5,-48(s0)
    8001583e:	00178713          	addi	a4,a5,1
    80015842:	fce43823          	sd	a4,-48(s0)
    80015846:	0007c783          	lbu	a5,0(a5)
    8001584a:	fef42423          	sw	a5,-24(s0)
            if (c1 == '\0' || c1 != c2) {
    8001584e:	fec42783          	lw	a5,-20(s0)
    80015852:	2781                	sext.w	a5,a5
    80015854:	cb89                	beqz	a5,80015866 <strncmp+0x16c>
    80015856:	fec42703          	lw	a4,-20(s0)
    8001585a:	fe842783          	lw	a5,-24(s0)
    8001585e:	2701                	sext.w	a4,a4
    80015860:	2781                	sext.w	a5,a5
    80015862:	00f70b63          	beq	a4,a5,80015878 <strncmp+0x17e>
                return c1 - c2;
    80015866:	fec42703          	lw	a4,-20(s0)
    8001586a:	fe842783          	lw	a5,-24(s0)
    8001586e:	40f707bb          	subw	a5,a4,a5
    80015872:	2781                	sext.w	a5,a5
    80015874:	2781                	sext.w	a5,a5
    80015876:	a861                	j	8001590e <strncmp+0x214>
            }
        } while (--n4 > 0);
    80015878:	fe442783          	lw	a5,-28(s0)
    8001587c:	37fd                	addiw	a5,a5,-1
    8001587e:	fef42223          	sw	a5,-28(s0)
    80015882:	fe442783          	lw	a5,-28(s0)
    80015886:	2781                	sext.w	a5,a5
    80015888:	eaf044e3          	bgtz	a5,80015730 <strncmp+0x36>
        n &= 3;
    8001588c:	fcc42783          	lw	a5,-52(s0)
    80015890:	8b8d                	andi	a5,a5,3
    80015892:	fcf42623          	sw	a5,-52(s0)
    }

    while (n > 0) {
    80015896:	a8b9                	j	800158f4 <strncmp+0x1fa>
        c1 = (unsigned char)*left++;
    80015898:	fd843783          	ld	a5,-40(s0)
    8001589c:	00178713          	addi	a4,a5,1
    800158a0:	fce43c23          	sd	a4,-40(s0)
    800158a4:	0007c783          	lbu	a5,0(a5)
    800158a8:	fef42623          	sw	a5,-20(s0)
        c2 = (unsigned char)*right++;
    800158ac:	fd043783          	ld	a5,-48(s0)
    800158b0:	00178713          	addi	a4,a5,1
    800158b4:	fce43823          	sd	a4,-48(s0)
    800158b8:	0007c783          	lbu	a5,0(a5)
    800158bc:	fef42423          	sw	a5,-24(s0)
        if (c1 == '\0' || c1 != c2)
    800158c0:	fec42783          	lw	a5,-20(s0)
    800158c4:	2781                	sext.w	a5,a5
    800158c6:	cb89                	beqz	a5,800158d8 <strncmp+0x1de>
    800158c8:	fec42703          	lw	a4,-20(s0)
    800158cc:	fe842783          	lw	a5,-24(s0)
    800158d0:	2701                	sext.w	a4,a4
    800158d2:	2781                	sext.w	a5,a5
    800158d4:	00f70b63          	beq	a4,a5,800158ea <strncmp+0x1f0>
            return c1 - c2;
    800158d8:	fec42703          	lw	a4,-20(s0)
    800158dc:	fe842783          	lw	a5,-24(s0)
    800158e0:	40f707bb          	subw	a5,a4,a5
    800158e4:	2781                	sext.w	a5,a5
    800158e6:	2781                	sext.w	a5,a5
    800158e8:	a01d                	j	8001590e <strncmp+0x214>
        n--;
    800158ea:	fcc42783          	lw	a5,-52(s0)
    800158ee:	37fd                	addiw	a5,a5,-1
    800158f0:	fcf42623          	sw	a5,-52(s0)
    while (n > 0) {
    800158f4:	fcc42783          	lw	a5,-52(s0)
    800158f8:	2781                	sext.w	a5,a5
    800158fa:	f8f04fe3          	bgtz	a5,80015898 <strncmp+0x19e>
    }

    return c1 - c2;
    800158fe:	fec42703          	lw	a4,-20(s0)
    80015902:	fe842783          	lw	a5,-24(s0)
    80015906:	40f707bb          	subw	a5,a4,a5
    8001590a:	2781                	sext.w	a5,a5
    8001590c:	2781                	sext.w	a5,a5
}
    8001590e:	853e                	mv	a0,a5
    80015910:	7462                	ld	s0,56(sp)
    80015912:	6121                	addi	sp,sp,64
    80015914:	8082                	ret

0000000080015916 <strfindchr>:

int strfindchr(const char *r, char t)
{
    80015916:	7179                	addi	sp,sp,-48
    80015918:	f422                	sd	s0,40(sp)
    8001591a:	1800                	addi	s0,sp,48
    8001591c:	fca43c23          	sd	a0,-40(s0)
    80015920:	87ae                	mv	a5,a1
    80015922:	fcf40ba3          	sb	a5,-41(s0)
    int i = 0;
    80015926:	fe042623          	sw	zero,-20(s0)
    while (r[i] != t) {
    8001592a:	a005                	j	8001594a <strfindchr+0x34>
        if (r[i] == '\0') {
    8001592c:	fec42783          	lw	a5,-20(s0)
    80015930:	fd843703          	ld	a4,-40(s0)
    80015934:	97ba                	add	a5,a5,a4
    80015936:	0007c783          	lbu	a5,0(a5)
    8001593a:	e399                	bnez	a5,80015940 <strfindchr+0x2a>
            return -1;
    8001593c:	57fd                	li	a5,-1
    8001593e:	a02d                	j	80015968 <strfindchr+0x52>
        }
        i++;
    80015940:	fec42783          	lw	a5,-20(s0)
    80015944:	2785                	addiw	a5,a5,1
    80015946:	fef42623          	sw	a5,-20(s0)
    while (r[i] != t) {
    8001594a:	fec42783          	lw	a5,-20(s0)
    8001594e:	fd843703          	ld	a4,-40(s0)
    80015952:	97ba                	add	a5,a5,a4
    80015954:	0007c703          	lbu	a4,0(a5)
    80015958:	fd744783          	lbu	a5,-41(s0)
    8001595c:	0ff7f793          	andi	a5,a5,255
    80015960:	fce796e3          	bne	a5,a4,8001592c <strfindchr+0x16>
    }
    return i;
    80015964:	fec42783          	lw	a5,-20(s0)
}
    80015968:	853e                	mv	a0,a5
    8001596a:	7422                	ld	s0,40(sp)
    8001596c:	6145                	addi	sp,sp,48
    8001596e:	8082                	ret

0000000080015970 <strlen>:

int strlen(const char *s)
{
    80015970:	7179                	addi	sp,sp,-48
    80015972:	f422                	sd	s0,40(sp)
    80015974:	1800                	addi	s0,sp,48
    80015976:	fca43c23          	sd	a0,-40(s0)
    int len = 0;
    8001597a:	fe042623          	sw	zero,-20(s0)
    while (s[len] && ++len)
    8001597e:	0001                	nop
    80015980:	fec42783          	lw	a5,-20(s0)
    80015984:	fd843703          	ld	a4,-40(s0)
    80015988:	97ba                	add	a5,a5,a4
    8001598a:	0007c783          	lbu	a5,0(a5)
    8001598e:	cb91                	beqz	a5,800159a2 <strlen+0x32>
    80015990:	fec42783          	lw	a5,-20(s0)
    80015994:	2785                	addiw	a5,a5,1
    80015996:	fef42623          	sw	a5,-20(s0)
    8001599a:	fec42783          	lw	a5,-20(s0)
    8001599e:	2781                	sext.w	a5,a5
    800159a0:	f3e5                	bnez	a5,80015980 <strlen+0x10>
        ;
    return len;
    800159a2:	fec42783          	lw	a5,-20(s0)
}
    800159a6:	853e                	mv	a0,a5
    800159a8:	7422                	ld	s0,40(sp)
    800159aa:	6145                	addi	sp,sp,48
    800159ac:	8082                	ret

00000000800159ae <strcpy>:

char *strcpy(char *dest, const char *s)
{
    800159ae:	7179                	addi	sp,sp,-48
    800159b0:	f422                	sd	s0,40(sp)
    800159b2:	1800                	addi	s0,sp,48
    800159b4:	fca43c23          	sd	a0,-40(s0)
    800159b8:	fcb43823          	sd	a1,-48(s0)
    char *o = dest;
    800159bc:	fd843783          	ld	a5,-40(s0)
    800159c0:	fef43423          	sd	a5,-24(s0)
    while (*s) {
    800159c4:	a00d                	j	800159e6 <strcpy+0x38>
        *dest++ = *s++;
    800159c6:	fd043703          	ld	a4,-48(s0)
    800159ca:	00170793          	addi	a5,a4,1
    800159ce:	fcf43823          	sd	a5,-48(s0)
    800159d2:	fd843783          	ld	a5,-40(s0)
    800159d6:	00178693          	addi	a3,a5,1
    800159da:	fcd43c23          	sd	a3,-40(s0)
    800159de:	00074703          	lbu	a4,0(a4)
    800159e2:	00e78023          	sb	a4,0(a5)
    while (*s) {
    800159e6:	fd043783          	ld	a5,-48(s0)
    800159ea:	0007c783          	lbu	a5,0(a5)
    800159ee:	ffe1                	bnez	a5,800159c6 <strcpy+0x18>
    }
    *dest = '\0';
    800159f0:	fd843783          	ld	a5,-40(s0)
    800159f4:	00078023          	sb	zero,0(a5)
    return o;
    800159f8:	fe843783          	ld	a5,-24(s0)
}
    800159fc:	853e                	mv	a0,a5
    800159fe:	7422                	ld	s0,40(sp)
    80015a00:	6145                	addi	sp,sp,48
    80015a02:	8082                	ret

0000000080015a04 <strncpy>:

char *strncpy(char *dest, const char *s, int n)
{
    80015a04:	7139                	addi	sp,sp,-64
    80015a06:	fc22                	sd	s0,56(sp)
    80015a08:	0080                	addi	s0,sp,64
    80015a0a:	fca43c23          	sd	a0,-40(s0)
    80015a0e:	fcb43823          	sd	a1,-48(s0)
    80015a12:	87b2                	mv	a5,a2
    80015a14:	fcf42623          	sw	a5,-52(s0)
    char *o = dest;
    80015a18:	fd843783          	ld	a5,-40(s0)
    80015a1c:	fef43423          	sd	a5,-24(s0)
    while (*s && n-- > 0) {
    80015a20:	a00d                	j	80015a42 <strncpy+0x3e>
        *dest++ = *s++;
    80015a22:	fd043703          	ld	a4,-48(s0)
    80015a26:	00170793          	addi	a5,a4,1
    80015a2a:	fcf43823          	sd	a5,-48(s0)
    80015a2e:	fd843783          	ld	a5,-40(s0)
    80015a32:	00178693          	addi	a3,a5,1
    80015a36:	fcd43c23          	sd	a3,-40(s0)
    80015a3a:	00074703          	lbu	a4,0(a4)
    80015a3e:	00e78023          	sb	a4,0(a5)
    while (*s && n-- > 0) {
    80015a42:	fd043783          	ld	a5,-48(s0)
    80015a46:	0007c783          	lbu	a5,0(a5)
    80015a4a:	cb89                	beqz	a5,80015a5c <strncpy+0x58>
    80015a4c:	fcc42783          	lw	a5,-52(s0)
    80015a50:	fff7871b          	addiw	a4,a5,-1
    80015a54:	fce42623          	sw	a4,-52(s0)
    80015a58:	fcf045e3          	bgtz	a5,80015a22 <strncpy+0x1e>
    }
    *dest = '\0';
    80015a5c:	fd843783          	ld	a5,-40(s0)
    80015a60:	00078023          	sb	zero,0(a5)
    return o;
    80015a64:	fe843783          	ld	a5,-24(s0)
}
    80015a68:	853e                	mv	a0,a5
    80015a6a:	7462                	ld	s0,56(sp)
    80015a6c:	6121                	addi	sp,sp,64
    80015a6e:	8082                	ret

0000000080015a70 <strdup>:


char *strdup(const char *src)
{
    80015a70:	7179                	addi	sp,sp,-48
    80015a72:	f406                	sd	ra,40(sp)
    80015a74:	f022                	sd	s0,32(sp)
    80015a76:	1800                	addi	s0,sp,48
    80015a78:	fca43c23          	sd	a0,-40(s0)
    int len   = strlen(src);
    80015a7c:	fd843503          	ld	a0,-40(s0)
    80015a80:	ef1ff0ef          	jal	ra,80015970 <strlen>
    80015a84:	87aa                	mv	a5,a0
    80015a86:	fef42623          	sw	a5,-20(s0)
    char *ret = (char *)g_kmalloc(len + 1);
    80015a8a:	fec42783          	lw	a5,-20(s0)
    80015a8e:	2785                	addiw	a5,a5,1
    80015a90:	2781                	sext.w	a5,a5
    80015a92:	853e                	mv	a0,a5
    80015a94:	47f000ef          	jal	ra,80016712 <g_kmalloc>
    80015a98:	fea43023          	sd	a0,-32(s0)
    if (!ret) {
    80015a9c:	fe043783          	ld	a5,-32(s0)
    80015aa0:	e399                	bnez	a5,80015aa6 <strdup+0x36>
        return NULL;
    80015aa2:	4781                	li	a5,0
    80015aa4:	a801                	j	80015ab4 <strdup+0x44>
    }
    return strcpy(ret, src);
    80015aa6:	fd843583          	ld	a1,-40(s0)
    80015aaa:	fe043503          	ld	a0,-32(s0)
    80015aae:	f01ff0ef          	jal	ra,800159ae <strcpy>
    80015ab2:	87aa                	mv	a5,a0
}
    80015ab4:	853e                	mv	a0,a5
    80015ab6:	70a2                	ld	ra,40(sp)
    80015ab8:	7402                	ld	s0,32(sp)
    80015aba:	6145                	addi	sp,sp,48
    80015abc:	8082                	ret

0000000080015abe <strstartswith>:

bool strstartswith(const char *src, const char *start)
{
    80015abe:	7179                	addi	sp,sp,-48
    80015ac0:	f406                	sd	ra,40(sp)
    80015ac2:	f022                	sd	s0,32(sp)
    80015ac4:	1800                	addi	s0,sp,48
    80015ac6:	fca43c23          	sd	a0,-40(s0)
    80015aca:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80015ace:	fd843503          	ld	a0,-40(s0)
    80015ad2:	e9fff0ef          	jal	ra,80015970 <strlen>
    80015ad6:	87aa                	mv	a5,a0
    80015ad8:	fef42423          	sw	a5,-24(s0)
    int start_len = strlen(start);
    80015adc:	fd043503          	ld	a0,-48(s0)
    80015ae0:	e91ff0ef          	jal	ra,80015970 <strlen>
    80015ae4:	87aa                	mv	a5,a0
    80015ae6:	fef42223          	sw	a5,-28(s0)
    int i;
    
    if (src_len < start_len) {
    80015aea:	fe842703          	lw	a4,-24(s0)
    80015aee:	fe442783          	lw	a5,-28(s0)
    80015af2:	2701                	sext.w	a4,a4
    80015af4:	2781                	sext.w	a5,a5
    80015af6:	00f75463          	bge	a4,a5,80015afe <strstartswith+0x40>
        return false;
    80015afa:	4781                	li	a5,0
    80015afc:	a0a9                	j	80015b46 <strstartswith+0x88>
    }

    for (i = 0;i < start_len;i++) {
    80015afe:	fe042623          	sw	zero,-20(s0)
    80015b02:	a80d                	j	80015b34 <strstartswith+0x76>
        if (src[i] != start[i]) {
    80015b04:	fec42783          	lw	a5,-20(s0)
    80015b08:	fd843703          	ld	a4,-40(s0)
    80015b0c:	97ba                	add	a5,a5,a4
    80015b0e:	0007c683          	lbu	a3,0(a5)
    80015b12:	fec42783          	lw	a5,-20(s0)
    80015b16:	fd043703          	ld	a4,-48(s0)
    80015b1a:	97ba                	add	a5,a5,a4
    80015b1c:	0007c783          	lbu	a5,0(a5)
    80015b20:	8736                	mv	a4,a3
    80015b22:	00f70463          	beq	a4,a5,80015b2a <strstartswith+0x6c>
            return false;
    80015b26:	4781                	li	a5,0
    80015b28:	a839                	j	80015b46 <strstartswith+0x88>
    for (i = 0;i < start_len;i++) {
    80015b2a:	fec42783          	lw	a5,-20(s0)
    80015b2e:	2785                	addiw	a5,a5,1
    80015b30:	fef42623          	sw	a5,-20(s0)
    80015b34:	fec42703          	lw	a4,-20(s0)
    80015b38:	fe442783          	lw	a5,-28(s0)
    80015b3c:	2701                	sext.w	a4,a4
    80015b3e:	2781                	sext.w	a5,a5
    80015b40:	fcf742e3          	blt	a4,a5,80015b04 <strstartswith+0x46>
        }
    }

    return true;
    80015b44:	4785                	li	a5,1
}
    80015b46:	853e                	mv	a0,a5
    80015b48:	70a2                	ld	ra,40(sp)
    80015b4a:	7402                	ld	s0,32(sp)
    80015b4c:	6145                	addi	sp,sp,48
    80015b4e:	8082                	ret

0000000080015b50 <strendswith>:

bool strendswith(const char *src, const char *end)
{
    80015b50:	7179                	addi	sp,sp,-48
    80015b52:	f406                	sd	ra,40(sp)
    80015b54:	f022                	sd	s0,32(sp)
    80015b56:	1800                	addi	s0,sp,48
    80015b58:	fca43c23          	sd	a0,-40(s0)
    80015b5c:	fcb43823          	sd	a1,-48(s0)
    int src_len = strlen(src);
    80015b60:	fd843503          	ld	a0,-40(s0)
    80015b64:	e0dff0ef          	jal	ra,80015970 <strlen>
    80015b68:	87aa                	mv	a5,a0
    80015b6a:	fef42423          	sw	a5,-24(s0)
    int end_len = strlen(end);
    80015b6e:	fd043503          	ld	a0,-48(s0)
    80015b72:	dffff0ef          	jal	ra,80015970 <strlen>
    80015b76:	87aa                	mv	a5,a0
    80015b78:	fef42223          	sw	a5,-28(s0)
    int cmp = src_len - end_len;
    80015b7c:	fe842703          	lw	a4,-24(s0)
    80015b80:	fe442783          	lw	a5,-28(s0)
    80015b84:	40f707bb          	subw	a5,a4,a5
    80015b88:	fef42023          	sw	a5,-32(s0)
    int i;
    
    if (src_len < end_len) {
    80015b8c:	fe842703          	lw	a4,-24(s0)
    80015b90:	fe442783          	lw	a5,-28(s0)
    80015b94:	2701                	sext.w	a4,a4
    80015b96:	2781                	sext.w	a5,a5
    80015b98:	00f75463          	bge	a4,a5,80015ba0 <strendswith+0x50>
        return false;
    80015b9c:	4781                	li	a5,0
    80015b9e:	a891                	j	80015bf2 <strendswith+0xa2>
    }

    for (i = 0;i < end_len;i++) {
    80015ba0:	fe042623          	sw	zero,-20(s0)
    80015ba4:	a835                	j	80015be0 <strendswith+0x90>
        if (src[i + cmp] != end[i]) {
    80015ba6:	fec42703          	lw	a4,-20(s0)
    80015baa:	fe042783          	lw	a5,-32(s0)
    80015bae:	9fb9                	addw	a5,a5,a4
    80015bb0:	2781                	sext.w	a5,a5
    80015bb2:	873e                	mv	a4,a5
    80015bb4:	fd843783          	ld	a5,-40(s0)
    80015bb8:	97ba                	add	a5,a5,a4
    80015bba:	0007c683          	lbu	a3,0(a5)
    80015bbe:	fec42783          	lw	a5,-20(s0)
    80015bc2:	fd043703          	ld	a4,-48(s0)
    80015bc6:	97ba                	add	a5,a5,a4
    80015bc8:	0007c783          	lbu	a5,0(a5)
    80015bcc:	8736                	mv	a4,a3
    80015bce:	00f70463          	beq	a4,a5,80015bd6 <strendswith+0x86>
            return false;
    80015bd2:	4781                	li	a5,0
    80015bd4:	a839                	j	80015bf2 <strendswith+0xa2>
    for (i = 0;i < end_len;i++) {
    80015bd6:	fec42783          	lw	a5,-20(s0)
    80015bda:	2785                	addiw	a5,a5,1
    80015bdc:	fef42623          	sw	a5,-20(s0)
    80015be0:	fec42703          	lw	a4,-20(s0)
    80015be4:	fe442783          	lw	a5,-28(s0)
    80015be8:	2701                	sext.w	a4,a4
    80015bea:	2781                	sext.w	a5,a5
    80015bec:	faf74de3          	blt	a4,a5,80015ba6 <strendswith+0x56>
        }
    }

    return true;    
    80015bf0:	4785                	li	a5,1
}
    80015bf2:	853e                	mv	a0,a5
    80015bf4:	70a2                	ld	ra,40(sp)
    80015bf6:	7402                	ld	s0,32(sp)
    80015bf8:	6145                	addi	sp,sp,48
    80015bfa:	8082                	ret

0000000080015bfc <vector_init>:
    uint32_t size;
    uint32_t capacity;
    uint64_t *values;
} Vector;

static Vector *vector_init(Vector *vec) {
    80015bfc:	1101                	addi	sp,sp,-32
    80015bfe:	ec22                	sd	s0,24(sp)
    80015c00:	1000                	addi	s0,sp,32
    80015c02:	fea43423          	sd	a0,-24(s0)
    if (vec == NULL) {
    80015c06:	fe843783          	ld	a5,-24(s0)
    80015c0a:	e399                	bnez	a5,80015c10 <vector_init+0x14>
        return NULL;
    80015c0c:	4781                	li	a5,0
    80015c0e:	a839                	j	80015c2c <vector_init+0x30>
    }
    vec->size = 0;
    80015c10:	fe843783          	ld	a5,-24(s0)
    80015c14:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    80015c18:	fe843783          	ld	a5,-24(s0)
    80015c1c:	0007a223          	sw	zero,4(a5)
    vec->values = NULL;
    80015c20:	fe843783          	ld	a5,-24(s0)
    80015c24:	0007b423          	sd	zero,8(a5)
    return vec;
    80015c28:	fe843783          	ld	a5,-24(s0)
}
    80015c2c:	853e                	mv	a0,a5
    80015c2e:	6462                	ld	s0,24(sp)
    80015c30:	6105                	addi	sp,sp,32
    80015c32:	8082                	ret

0000000080015c34 <vector_new>:

Vector *vector_new(void) {
    80015c34:	1141                	addi	sp,sp,-16
    80015c36:	e406                	sd	ra,8(sp)
    80015c38:	e022                	sd	s0,0(sp)
    80015c3a:	0800                	addi	s0,sp,16
    return vector_init((Vector *)g_kmalloc(sizeof(Vector)));
    80015c3c:	4541                	li	a0,16
    80015c3e:	2d5000ef          	jal	ra,80016712 <g_kmalloc>
    80015c42:	87aa                	mv	a5,a0
    80015c44:	853e                	mv	a0,a5
    80015c46:	fb7ff0ef          	jal	ra,80015bfc <vector_init>
    80015c4a:	87aa                	mv	a5,a0
}
    80015c4c:	853e                	mv	a0,a5
    80015c4e:	60a2                	ld	ra,8(sp)
    80015c50:	6402                	ld	s0,0(sp)
    80015c52:	0141                	addi	sp,sp,16
    80015c54:	8082                	ret

0000000080015c56 <vector_init_with_capacity>:

static Vector *vector_init_with_capacity(Vector *vec, uint32_t capacity) {
    80015c56:	1101                	addi	sp,sp,-32
    80015c58:	ec06                	sd	ra,24(sp)
    80015c5a:	e822                	sd	s0,16(sp)
    80015c5c:	1000                	addi	s0,sp,32
    80015c5e:	fea43423          	sd	a0,-24(s0)
    80015c62:	87ae                	mv	a5,a1
    80015c64:	fef42223          	sw	a5,-28(s0)
    if (vec == NULL) {
    80015c68:	fe843783          	ld	a5,-24(s0)
    80015c6c:	e399                	bnez	a5,80015c72 <vector_init_with_capacity+0x1c>
        return NULL;
    80015c6e:	4781                	li	a5,0
    80015c70:	a035                	j	80015c9c <vector_init_with_capacity+0x46>
    }
    vec->size = 0;
    80015c72:	fe843783          	ld	a5,-24(s0)
    80015c76:	0007a023          	sw	zero,0(a5)
    vec->capacity = capacity;
    80015c7a:	fe843783          	ld	a5,-24(s0)
    80015c7e:	fe442703          	lw	a4,-28(s0)
    80015c82:	c3d8                	sw	a4,4(a5)
    vec->values = (uint64_t *)g_kcalloc(capacity, sizeof(uint64_t));
    80015c84:	fe446783          	lwu	a5,-28(s0)
    80015c88:	45a1                	li	a1,8
    80015c8a:	853e                	mv	a0,a5
    80015c8c:	2bf000ef          	jal	ra,8001674a <g_kcalloc>
    80015c90:	872a                	mv	a4,a0
    80015c92:	fe843783          	ld	a5,-24(s0)
    80015c96:	e798                	sd	a4,8(a5)
    return vec;
    80015c98:	fe843783          	ld	a5,-24(s0)
}
    80015c9c:	853e                	mv	a0,a5
    80015c9e:	60e2                	ld	ra,24(sp)
    80015ca0:	6442                	ld	s0,16(sp)
    80015ca2:	6105                	addi	sp,sp,32
    80015ca4:	8082                	ret

0000000080015ca6 <vector_new_with_capacity>:

Vector *vector_new_with_capacity(uint32_t capacity) {
    80015ca6:	1101                	addi	sp,sp,-32
    80015ca8:	ec06                	sd	ra,24(sp)
    80015caa:	e822                	sd	s0,16(sp)
    80015cac:	1000                	addi	s0,sp,32
    80015cae:	87aa                	mv	a5,a0
    80015cb0:	fef42623          	sw	a5,-20(s0)
    return vector_init_with_capacity((Vector *)g_kmalloc(sizeof(Vector)), capacity);
    80015cb4:	4541                	li	a0,16
    80015cb6:	25d000ef          	jal	ra,80016712 <g_kmalloc>
    80015cba:	872a                	mv	a4,a0
    80015cbc:	fec42783          	lw	a5,-20(s0)
    80015cc0:	85be                	mv	a1,a5
    80015cc2:	853a                	mv	a0,a4
    80015cc4:	f93ff0ef          	jal	ra,80015c56 <vector_init_with_capacity>
    80015cc8:	87aa                	mv	a5,a0
}
    80015cca:	853e                	mv	a0,a5
    80015ccc:	60e2                	ld	ra,24(sp)
    80015cce:	6442                	ld	s0,16(sp)
    80015cd0:	6105                	addi	sp,sp,32
    80015cd2:	8082                	ret

0000000080015cd4 <vector_push>:

void vector_push(Vector *vec, uint64_t value) {
    80015cd4:	1101                	addi	sp,sp,-32
    80015cd6:	ec06                	sd	ra,24(sp)
    80015cd8:	e822                	sd	s0,16(sp)
    80015cda:	1000                	addi	s0,sp,32
    80015cdc:	fea43423          	sd	a0,-24(s0)
    80015ce0:	feb43023          	sd	a1,-32(s0)
    vector_insert(vec, vec->size, value);
    80015ce4:	fe843783          	ld	a5,-24(s0)
    80015ce8:	439c                	lw	a5,0(a5)
    80015cea:	fe043603          	ld	a2,-32(s0)
    80015cee:	85be                	mv	a1,a5
    80015cf0:	fe843503          	ld	a0,-24(s0)
    80015cf4:	00e000ef          	jal	ra,80015d02 <vector_insert>
}
    80015cf8:	0001                	nop
    80015cfa:	60e2                	ld	ra,24(sp)
    80015cfc:	6442                	ld	s0,16(sp)
    80015cfe:	6105                	addi	sp,sp,32
    80015d00:	8082                	ret

0000000080015d02 <vector_insert>:

void vector_insert(Vector *vec, uint32_t idx, uint64_t value) {
    80015d02:	7139                	addi	sp,sp,-64
    80015d04:	fc06                	sd	ra,56(sp)
    80015d06:	f822                	sd	s0,48(sp)
    80015d08:	0080                	addi	s0,sp,64
    80015d0a:	fca43c23          	sd	a0,-40(s0)
    80015d0e:	87ae                	mv	a5,a1
    80015d10:	fcc43423          	sd	a2,-56(s0)
    80015d14:	fcf42a23          	sw	a5,-44(s0)
    uint32_t i;
    vector_resize(vec, vec->size + 1);
    80015d18:	fd843783          	ld	a5,-40(s0)
    80015d1c:	439c                	lw	a5,0(a5)
    80015d1e:	2785                	addiw	a5,a5,1
    80015d20:	2781                	sext.w	a5,a5
    80015d22:	85be                	mv	a1,a5
    80015d24:	fd843503          	ld	a0,-40(s0)
    80015d28:	214000ef          	jal	ra,80015f3c <vector_resize>
    for (i = vec->size - 1;i > idx;i--) {
    80015d2c:	fd843783          	ld	a5,-40(s0)
    80015d30:	439c                	lw	a5,0(a5)
    80015d32:	37fd                	addiw	a5,a5,-1
    80015d34:	fef42623          	sw	a5,-20(s0)
    80015d38:	a805                	j	80015d68 <vector_insert+0x66>
        vector_set(vec, i, vector_get_unchecked(vec, i - 1));
    80015d3a:	fec42783          	lw	a5,-20(s0)
    80015d3e:	37fd                	addiw	a5,a5,-1
    80015d40:	2781                	sext.w	a5,a5
    80015d42:	85be                	mv	a1,a5
    80015d44:	fd843503          	ld	a0,-40(s0)
    80015d48:	13a000ef          	jal	ra,80015e82 <vector_get_unchecked>
    80015d4c:	872a                	mv	a4,a0
    80015d4e:	fec42783          	lw	a5,-20(s0)
    80015d52:	863a                	mv	a2,a4
    80015d54:	85be                	mv	a1,a5
    80015d56:	fd843503          	ld	a0,-40(s0)
    80015d5a:	094000ef          	jal	ra,80015dee <vector_set>
    for (i = vec->size - 1;i > idx;i--) {
    80015d5e:	fec42783          	lw	a5,-20(s0)
    80015d62:	37fd                	addiw	a5,a5,-1
    80015d64:	fef42623          	sw	a5,-20(s0)
    80015d68:	fec42703          	lw	a4,-20(s0)
    80015d6c:	fd442783          	lw	a5,-44(s0)
    80015d70:	2701                	sext.w	a4,a4
    80015d72:	2781                	sext.w	a5,a5
    80015d74:	fce7e3e3          	bltu	a5,a4,80015d3a <vector_insert+0x38>
    }
    vector_set(vec, idx, value);
    80015d78:	fd442783          	lw	a5,-44(s0)
    80015d7c:	fc843603          	ld	a2,-56(s0)
    80015d80:	85be                	mv	a1,a5
    80015d82:	fd843503          	ld	a0,-40(s0)
    80015d86:	068000ef          	jal	ra,80015dee <vector_set>
}
    80015d8a:	0001                	nop
    80015d8c:	70e2                	ld	ra,56(sp)
    80015d8e:	7442                	ld	s0,48(sp)
    80015d90:	6121                	addi	sp,sp,64
    80015d92:	8082                	ret

0000000080015d94 <vector_find>:

int vector_find(Vector *vec, uint64_t val) {
    80015d94:	7179                	addi	sp,sp,-48
    80015d96:	f422                	sd	s0,40(sp)
    80015d98:	1800                	addi	s0,sp,48
    80015d9a:	fca43c23          	sd	a0,-40(s0)
    80015d9e:	fcb43823          	sd	a1,-48(s0)
    int i;
    for (i = 0;i < (int)vec->size;i++) {
    80015da2:	fe042623          	sw	zero,-20(s0)
    80015da6:	a02d                	j	80015dd0 <vector_find+0x3c>
        if (vec->values[i] == val) {
    80015da8:	fd843783          	ld	a5,-40(s0)
    80015dac:	6798                	ld	a4,8(a5)
    80015dae:	fec42783          	lw	a5,-20(s0)
    80015db2:	078e                	slli	a5,a5,0x3
    80015db4:	97ba                	add	a5,a5,a4
    80015db6:	639c                	ld	a5,0(a5)
    80015db8:	fd043703          	ld	a4,-48(s0)
    80015dbc:	00f71563          	bne	a4,a5,80015dc6 <vector_find+0x32>
            return i;
    80015dc0:	fec42783          	lw	a5,-20(s0)
    80015dc4:	a00d                	j	80015de6 <vector_find+0x52>
    for (i = 0;i < (int)vec->size;i++) {
    80015dc6:	fec42783          	lw	a5,-20(s0)
    80015dca:	2785                	addiw	a5,a5,1
    80015dcc:	fef42623          	sw	a5,-20(s0)
    80015dd0:	fd843783          	ld	a5,-40(s0)
    80015dd4:	439c                	lw	a5,0(a5)
    80015dd6:	0007871b          	sext.w	a4,a5
    80015dda:	fec42783          	lw	a5,-20(s0)
    80015dde:	2781                	sext.w	a5,a5
    80015de0:	fce7c4e3          	blt	a5,a4,80015da8 <vector_find+0x14>
        }
    }
    return -1;
    80015de4:	57fd                	li	a5,-1
}
    80015de6:	853e                	mv	a0,a5
    80015de8:	7422                	ld	s0,40(sp)
    80015dea:	6145                	addi	sp,sp,48
    80015dec:	8082                	ret

0000000080015dee <vector_set>:

bool vector_set(Vector *vec, uint32_t idx, uint64_t val) {
    80015dee:	7179                	addi	sp,sp,-48
    80015df0:	f422                	sd	s0,40(sp)
    80015df2:	1800                	addi	s0,sp,48
    80015df4:	fea43423          	sd	a0,-24(s0)
    80015df8:	87ae                	mv	a5,a1
    80015dfa:	fcc43c23          	sd	a2,-40(s0)
    80015dfe:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015e02:	fe843783          	ld	a5,-24(s0)
    80015e06:	4398                	lw	a4,0(a5)
    80015e08:	fe442783          	lw	a5,-28(s0)
    80015e0c:	2781                	sext.w	a5,a5
    80015e0e:	00e7e463          	bltu	a5,a4,80015e16 <vector_set+0x28>
        return false;
    80015e12:	4781                	li	a5,0
    80015e14:	a821                	j	80015e2c <vector_set+0x3e>
    }
    vec->values[idx] = val;
    80015e16:	fe843783          	ld	a5,-24(s0)
    80015e1a:	6798                	ld	a4,8(a5)
    80015e1c:	fe446783          	lwu	a5,-28(s0)
    80015e20:	078e                	slli	a5,a5,0x3
    80015e22:	97ba                	add	a5,a5,a4
    80015e24:	fd843703          	ld	a4,-40(s0)
    80015e28:	e398                	sd	a4,0(a5)
    return true;
    80015e2a:	4785                	li	a5,1
}
    80015e2c:	853e                	mv	a0,a5
    80015e2e:	7422                	ld	s0,40(sp)
    80015e30:	6145                	addi	sp,sp,48
    80015e32:	8082                	ret

0000000080015e34 <vector_get>:

bool vector_get(Vector *vec, uint32_t idx, uint64_t *val) {
    80015e34:	7179                	addi	sp,sp,-48
    80015e36:	f422                	sd	s0,40(sp)
    80015e38:	1800                	addi	s0,sp,48
    80015e3a:	fea43423          	sd	a0,-24(s0)
    80015e3e:	87ae                	mv	a5,a1
    80015e40:	fcc43c23          	sd	a2,-40(s0)
    80015e44:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015e48:	fe843783          	ld	a5,-24(s0)
    80015e4c:	4398                	lw	a4,0(a5)
    80015e4e:	fe442783          	lw	a5,-28(s0)
    80015e52:	2781                	sext.w	a5,a5
    80015e54:	00e7e463          	bltu	a5,a4,80015e5c <vector_get+0x28>
        return false;
    80015e58:	4781                	li	a5,0
    80015e5a:	a005                	j	80015e7a <vector_get+0x46>
    }
    if (val != NULL) {
    80015e5c:	fd843783          	ld	a5,-40(s0)
    80015e60:	cf81                	beqz	a5,80015e78 <vector_get+0x44>
        *val = vec->values[idx];
    80015e62:	fe843783          	ld	a5,-24(s0)
    80015e66:	6798                	ld	a4,8(a5)
    80015e68:	fe446783          	lwu	a5,-28(s0)
    80015e6c:	078e                	slli	a5,a5,0x3
    80015e6e:	97ba                	add	a5,a5,a4
    80015e70:	6398                	ld	a4,0(a5)
    80015e72:	fd843783          	ld	a5,-40(s0)
    80015e76:	e398                	sd	a4,0(a5)
    }
    return true;
    80015e78:	4785                	li	a5,1
}
    80015e7a:	853e                	mv	a0,a5
    80015e7c:	7422                	ld	s0,40(sp)
    80015e7e:	6145                	addi	sp,sp,48
    80015e80:	8082                	ret

0000000080015e82 <vector_get_unchecked>:

uint64_t vector_get_unchecked(Vector *vec, uint32_t idx) {
    80015e82:	1101                	addi	sp,sp,-32
    80015e84:	ec22                	sd	s0,24(sp)
    80015e86:	1000                	addi	s0,sp,32
    80015e88:	fea43423          	sd	a0,-24(s0)
    80015e8c:	87ae                	mv	a5,a1
    80015e8e:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    80015e92:	fe843783          	ld	a5,-24(s0)
    80015e96:	4398                	lw	a4,0(a5)
    80015e98:	fe442783          	lw	a5,-28(s0)
    80015e9c:	2781                	sext.w	a5,a5
    80015e9e:	00e7e463          	bltu	a5,a4,80015ea6 <vector_get_unchecked+0x24>
        return 0;
    80015ea2:	4781                	li	a5,0
    80015ea4:	a809                	j	80015eb6 <vector_get_unchecked+0x34>
    }
    return vec->values[idx];
    80015ea6:	fe843783          	ld	a5,-24(s0)
    80015eaa:	6798                	ld	a4,8(a5)
    80015eac:	fe446783          	lwu	a5,-28(s0)
    80015eb0:	078e                	slli	a5,a5,0x3
    80015eb2:	97ba                	add	a5,a5,a4
    80015eb4:	639c                	ld	a5,0(a5)
}
    80015eb6:	853e                	mv	a0,a5
    80015eb8:	6462                	ld	s0,24(sp)
    80015eba:	6105                	addi	sp,sp,32
    80015ebc:	8082                	ret

0000000080015ebe <vector_resize_with_default>:


void vector_resize_with_default(Vector *vec, uint32_t new_size, uint64_t def) {
    80015ebe:	7139                	addi	sp,sp,-64
    80015ec0:	fc06                	sd	ra,56(sp)
    80015ec2:	f822                	sd	s0,48(sp)
    80015ec4:	0080                	addi	s0,sp,64
    80015ec6:	fca43c23          	sd	a0,-40(s0)
    80015eca:	87ae                	mv	a5,a1
    80015ecc:	fcc43423          	sd	a2,-56(s0)
    80015ed0:	fcf42a23          	sw	a5,-44(s0)
    uint32_t old_size = vec->size;
    80015ed4:	fd843783          	ld	a5,-40(s0)
    80015ed8:	439c                	lw	a5,0(a5)
    80015eda:	fef42423          	sw	a5,-24(s0)
    vector_resize(vec, new_size);
    80015ede:	fd442783          	lw	a5,-44(s0)
    80015ee2:	85be                	mv	a1,a5
    80015ee4:	fd843503          	ld	a0,-40(s0)
    80015ee8:	054000ef          	jal	ra,80015f3c <vector_resize>
    if (old_size < new_size) {
    80015eec:	fe842703          	lw	a4,-24(s0)
    80015ef0:	fd442783          	lw	a5,-44(s0)
    80015ef4:	2701                	sext.w	a4,a4
    80015ef6:	2781                	sext.w	a5,a5
    80015ef8:	02f77d63          	bgeu	a4,a5,80015f32 <vector_resize_with_default+0x74>
        uint32_t i;
        for (i = old_size;i < new_size;i++) {
    80015efc:	fe842783          	lw	a5,-24(s0)
    80015f00:	fef42623          	sw	a5,-20(s0)
    80015f04:	a839                	j	80015f22 <vector_resize_with_default+0x64>
            vector_set(vec, i, def);
    80015f06:	fec42783          	lw	a5,-20(s0)
    80015f0a:	fc843603          	ld	a2,-56(s0)
    80015f0e:	85be                	mv	a1,a5
    80015f10:	fd843503          	ld	a0,-40(s0)
    80015f14:	edbff0ef          	jal	ra,80015dee <vector_set>
        for (i = old_size;i < new_size;i++) {
    80015f18:	fec42783          	lw	a5,-20(s0)
    80015f1c:	2785                	addiw	a5,a5,1
    80015f1e:	fef42623          	sw	a5,-20(s0)
    80015f22:	fec42703          	lw	a4,-20(s0)
    80015f26:	fd442783          	lw	a5,-44(s0)
    80015f2a:	2701                	sext.w	a4,a4
    80015f2c:	2781                	sext.w	a5,a5
    80015f2e:	fcf76ce3          	bltu	a4,a5,80015f06 <vector_resize_with_default+0x48>
        }
    }
}
    80015f32:	0001                	nop
    80015f34:	70e2                	ld	ra,56(sp)
    80015f36:	7442                	ld	s0,48(sp)
    80015f38:	6121                	addi	sp,sp,64
    80015f3a:	8082                	ret

0000000080015f3c <vector_resize>:

void vector_resize(Vector *vec, uint32_t new_size) {
    80015f3c:	7179                	addi	sp,sp,-48
    80015f3e:	f406                	sd	ra,40(sp)
    80015f40:	f022                	sd	s0,32(sp)
    80015f42:	1800                	addi	s0,sp,48
    80015f44:	fca43c23          	sd	a0,-40(s0)
    80015f48:	87ae                	mv	a5,a1
    80015f4a:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_size > vec->capacity) {
    80015f4e:	fd843783          	ld	a5,-40(s0)
    80015f52:	43d8                	lw	a4,4(a5)
    80015f54:	fd442783          	lw	a5,-44(s0)
    80015f58:	2781                	sext.w	a5,a5
    80015f5a:	06f77963          	bgeu	a4,a5,80015fcc <vector_resize+0x90>
        vals = (uint64_t *)g_kcalloc(new_size, sizeof(uint64_t));
    80015f5e:	fd446783          	lwu	a5,-44(s0)
    80015f62:	45a1                	li	a1,8
    80015f64:	853e                	mv	a0,a5
    80015f66:	7e4000ef          	jal	ra,8001674a <g_kcalloc>
    80015f6a:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    80015f6e:	fe042623          	sw	zero,-20(s0)
    80015f72:	a02d                	j	80015f9c <vector_resize+0x60>
            vals[i] = vec->values[i];
    80015f74:	fd843783          	ld	a5,-40(s0)
    80015f78:	6798                	ld	a4,8(a5)
    80015f7a:	fec46783          	lwu	a5,-20(s0)
    80015f7e:	078e                	slli	a5,a5,0x3
    80015f80:	973e                	add	a4,a4,a5
    80015f82:	fec46783          	lwu	a5,-20(s0)
    80015f86:	078e                	slli	a5,a5,0x3
    80015f88:	fe043683          	ld	a3,-32(s0)
    80015f8c:	97b6                	add	a5,a5,a3
    80015f8e:	6318                	ld	a4,0(a4)
    80015f90:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80015f92:	fec42783          	lw	a5,-20(s0)
    80015f96:	2785                	addiw	a5,a5,1
    80015f98:	fef42623          	sw	a5,-20(s0)
    80015f9c:	fd843783          	ld	a5,-40(s0)
    80015fa0:	4398                	lw	a4,0(a5)
    80015fa2:	fec42783          	lw	a5,-20(s0)
    80015fa6:	2781                	sext.w	a5,a5
    80015fa8:	fce7e6e3          	bltu	a5,a4,80015f74 <vector_resize+0x38>
        }
        g_kfree(vec->values);
    80015fac:	fd843783          	ld	a5,-40(s0)
    80015fb0:	679c                	ld	a5,8(a5)
    80015fb2:	853e                	mv	a0,a5
    80015fb4:	7f8000ef          	jal	ra,800167ac <g_kfree>
        vec->values = vals;
    80015fb8:	fd843783          	ld	a5,-40(s0)
    80015fbc:	fe043703          	ld	a4,-32(s0)
    80015fc0:	e798                	sd	a4,8(a5)
        vec->capacity = new_size;
    80015fc2:	fd843783          	ld	a5,-40(s0)
    80015fc6:	fd442703          	lw	a4,-44(s0)
    80015fca:	c3d8                	sw	a4,4(a5)
    }        
    vec->size = new_size;    
    80015fcc:	fd843783          	ld	a5,-40(s0)
    80015fd0:	fd442703          	lw	a4,-44(s0)
    80015fd4:	c398                	sw	a4,0(a5)
}
    80015fd6:	0001                	nop
    80015fd8:	70a2                	ld	ra,40(sp)
    80015fda:	7402                	ld	s0,32(sp)
    80015fdc:	6145                	addi	sp,sp,48
    80015fde:	8082                	ret

0000000080015fe0 <vector_reserve>:

void vector_reserve(Vector *vec, uint32_t new_capacity) {
    80015fe0:	7179                	addi	sp,sp,-48
    80015fe2:	f406                	sd	ra,40(sp)
    80015fe4:	f022                	sd	s0,32(sp)
    80015fe6:	1800                	addi	s0,sp,48
    80015fe8:	fca43c23          	sd	a0,-40(s0)
    80015fec:	87ae                	mv	a5,a1
    80015fee:	fcf42a23          	sw	a5,-44(s0)
    uint64_t *vals;
    uint32_t i;
    if (new_capacity > vec->capacity) {
    80015ff2:	fd843783          	ld	a5,-40(s0)
    80015ff6:	43d8                	lw	a4,4(a5)
    80015ff8:	fd442783          	lw	a5,-44(s0)
    80015ffc:	2781                	sext.w	a5,a5
    80015ffe:	06f77a63          	bgeu	a4,a5,80016072 <vector_reserve+0x92>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    80016002:	fd446783          	lwu	a5,-44(s0)
    80016006:	45a1                	li	a1,8
    80016008:	853e                	mv	a0,a5
    8001600a:	740000ef          	jal	ra,8001674a <g_kcalloc>
    8001600e:	fea43023          	sd	a0,-32(s0)
        for (i = 0;i < vec->size;i++) {
    80016012:	fe042623          	sw	zero,-20(s0)
    80016016:	a02d                	j	80016040 <vector_reserve+0x60>
            vals[i] = vec->values[i];
    80016018:	fd843783          	ld	a5,-40(s0)
    8001601c:	6798                	ld	a4,8(a5)
    8001601e:	fec46783          	lwu	a5,-20(s0)
    80016022:	078e                	slli	a5,a5,0x3
    80016024:	973e                	add	a4,a4,a5
    80016026:	fec46783          	lwu	a5,-20(s0)
    8001602a:	078e                	slli	a5,a5,0x3
    8001602c:	fe043683          	ld	a3,-32(s0)
    80016030:	97b6                	add	a5,a5,a3
    80016032:	6318                	ld	a4,0(a4)
    80016034:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    80016036:	fec42783          	lw	a5,-20(s0)
    8001603a:	2785                	addiw	a5,a5,1
    8001603c:	fef42623          	sw	a5,-20(s0)
    80016040:	fd843783          	ld	a5,-40(s0)
    80016044:	4398                	lw	a4,0(a5)
    80016046:	fec42783          	lw	a5,-20(s0)
    8001604a:	2781                	sext.w	a5,a5
    8001604c:	fce7e6e3          	bltu	a5,a4,80016018 <vector_reserve+0x38>
        }
        g_kfree(vec->values);
    80016050:	fd843783          	ld	a5,-40(s0)
    80016054:	679c                	ld	a5,8(a5)
    80016056:	853e                	mv	a0,a5
    80016058:	754000ef          	jal	ra,800167ac <g_kfree>
        vec->values = vals;
    8001605c:	fd843783          	ld	a5,-40(s0)
    80016060:	fe043703          	ld	a4,-32(s0)
    80016064:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    80016066:	fd843783          	ld	a5,-40(s0)
    8001606a:	fd442703          	lw	a4,-44(s0)
    8001606e:	c3d8                	sw	a4,4(a5)
        }
        g_kfree(vec->values);
        vec->values = vals;
        vec->capacity = new_capacity;
    }
}
    80016070:	a04d                	j	80016112 <vector_reserve+0x132>
    else if (new_capacity > 0 && new_capacity < vec->capacity) {
    80016072:	fd442783          	lw	a5,-44(s0)
    80016076:	2781                	sext.w	a5,a5
    80016078:	cfc9                	beqz	a5,80016112 <vector_reserve+0x132>
    8001607a:	fd843783          	ld	a5,-40(s0)
    8001607e:	43d8                	lw	a4,4(a5)
    80016080:	fd442783          	lw	a5,-44(s0)
    80016084:	2781                	sext.w	a5,a5
    80016086:	08e7f663          	bgeu	a5,a4,80016112 <vector_reserve+0x132>
        vals = (uint64_t *)g_kcalloc(new_capacity, sizeof(uint64_t));
    8001608a:	fd446783          	lwu	a5,-44(s0)
    8001608e:	45a1                	li	a1,8
    80016090:	853e                	mv	a0,a5
    80016092:	6b8000ef          	jal	ra,8001674a <g_kcalloc>
    80016096:	fea43023          	sd	a0,-32(s0)
        if (new_capacity < vec->size) {
    8001609a:	fd843783          	ld	a5,-40(s0)
    8001609e:	4398                	lw	a4,0(a5)
    800160a0:	fd442783          	lw	a5,-44(s0)
    800160a4:	2781                	sext.w	a5,a5
    800160a6:	00e7f763          	bgeu	a5,a4,800160b4 <vector_reserve+0xd4>
            vec->size = new_capacity;
    800160aa:	fd843783          	ld	a5,-40(s0)
    800160ae:	fd442703          	lw	a4,-44(s0)
    800160b2:	c398                	sw	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    800160b4:	fe042623          	sw	zero,-20(s0)
    800160b8:	a02d                	j	800160e2 <vector_reserve+0x102>
            vals[i] = vec->values[i];
    800160ba:	fd843783          	ld	a5,-40(s0)
    800160be:	6798                	ld	a4,8(a5)
    800160c0:	fec46783          	lwu	a5,-20(s0)
    800160c4:	078e                	slli	a5,a5,0x3
    800160c6:	973e                	add	a4,a4,a5
    800160c8:	fec46783          	lwu	a5,-20(s0)
    800160cc:	078e                	slli	a5,a5,0x3
    800160ce:	fe043683          	ld	a3,-32(s0)
    800160d2:	97b6                	add	a5,a5,a3
    800160d4:	6318                	ld	a4,0(a4)
    800160d6:	e398                	sd	a4,0(a5)
        for (i = 0;i < vec->size;i++) {
    800160d8:	fec42783          	lw	a5,-20(s0)
    800160dc:	2785                	addiw	a5,a5,1
    800160de:	fef42623          	sw	a5,-20(s0)
    800160e2:	fd843783          	ld	a5,-40(s0)
    800160e6:	4398                	lw	a4,0(a5)
    800160e8:	fec42783          	lw	a5,-20(s0)
    800160ec:	2781                	sext.w	a5,a5
    800160ee:	fce7e6e3          	bltu	a5,a4,800160ba <vector_reserve+0xda>
        g_kfree(vec->values);
    800160f2:	fd843783          	ld	a5,-40(s0)
    800160f6:	679c                	ld	a5,8(a5)
    800160f8:	853e                	mv	a0,a5
    800160fa:	6b2000ef          	jal	ra,800167ac <g_kfree>
        vec->values = vals;
    800160fe:	fd843783          	ld	a5,-40(s0)
    80016102:	fe043703          	ld	a4,-32(s0)
    80016106:	e798                	sd	a4,8(a5)
        vec->capacity = new_capacity;
    80016108:	fd843783          	ld	a5,-40(s0)
    8001610c:	fd442703          	lw	a4,-44(s0)
    80016110:	c3d8                	sw	a4,4(a5)
}
    80016112:	0001                	nop
    80016114:	70a2                	ld	ra,40(sp)
    80016116:	7402                	ld	s0,32(sp)
    80016118:	6145                	addi	sp,sp,48
    8001611a:	8082                	ret

000000008001611c <vector_remove>:

bool vector_remove(Vector *vec, uint32_t idx) {
    8001611c:	1101                	addi	sp,sp,-32
    8001611e:	ec22                	sd	s0,24(sp)
    80016120:	1000                	addi	s0,sp,32
    80016122:	fea43423          	sd	a0,-24(s0)
    80016126:	87ae                	mv	a5,a1
    80016128:	fef42223          	sw	a5,-28(s0)
    if (idx >= vec->size) {
    8001612c:	fe843783          	ld	a5,-24(s0)
    80016130:	4398                	lw	a4,0(a5)
    80016132:	fe442783          	lw	a5,-28(s0)
    80016136:	2781                	sext.w	a5,a5
    80016138:	00e7e463          	bltu	a5,a4,80016140 <vector_remove+0x24>
        return false;
    8001613c:	4781                	li	a5,0
    8001613e:	a8a9                	j	80016198 <vector_remove+0x7c>
    }
    vec->size -= 1;
    80016140:	fe843783          	ld	a5,-24(s0)
    80016144:	439c                	lw	a5,0(a5)
    80016146:	37fd                	addiw	a5,a5,-1
    80016148:	0007871b          	sext.w	a4,a5
    8001614c:	fe843783          	ld	a5,-24(s0)
    80016150:	c398                	sw	a4,0(a5)
    for (;idx < vec->size;idx++) {
    80016152:	a815                	j	80016186 <vector_remove+0x6a>
        vec->values[idx] = vec->values[idx + 1];
    80016154:	fe843783          	ld	a5,-24(s0)
    80016158:	6798                	ld	a4,8(a5)
    8001615a:	fe442783          	lw	a5,-28(s0)
    8001615e:	2785                	addiw	a5,a5,1
    80016160:	2781                	sext.w	a5,a5
    80016162:	1782                	slli	a5,a5,0x20
    80016164:	9381                	srli	a5,a5,0x20
    80016166:	078e                	slli	a5,a5,0x3
    80016168:	973e                	add	a4,a4,a5
    8001616a:	fe843783          	ld	a5,-24(s0)
    8001616e:	6794                	ld	a3,8(a5)
    80016170:	fe446783          	lwu	a5,-28(s0)
    80016174:	078e                	slli	a5,a5,0x3
    80016176:	97b6                	add	a5,a5,a3
    80016178:	6318                	ld	a4,0(a4)
    8001617a:	e398                	sd	a4,0(a5)
    for (;idx < vec->size;idx++) {
    8001617c:	fe442783          	lw	a5,-28(s0)
    80016180:	2785                	addiw	a5,a5,1
    80016182:	fef42223          	sw	a5,-28(s0)
    80016186:	fe843783          	ld	a5,-24(s0)
    8001618a:	4398                	lw	a4,0(a5)
    8001618c:	fe442783          	lw	a5,-28(s0)
    80016190:	2781                	sext.w	a5,a5
    80016192:	fce7e1e3          	bltu	a5,a4,80016154 <vector_remove+0x38>
    }
    return true;
    80016196:	4785                	li	a5,1
}
    80016198:	853e                	mv	a0,a5
    8001619a:	6462                	ld	s0,24(sp)
    8001619c:	6105                	addi	sp,sp,32
    8001619e:	8082                	ret

00000000800161a0 <vector_remove_value>:

bool vector_remove_value(Vector *vec, uint64_t val) {
    800161a0:	7179                	addi	sp,sp,-48
    800161a2:	f406                	sd	ra,40(sp)
    800161a4:	f022                	sd	s0,32(sp)
    800161a6:	1800                	addi	s0,sp,48
    800161a8:	fca43c23          	sd	a0,-40(s0)
    800161ac:	fcb43823          	sd	a1,-48(s0)
    uint32_t i;
    for (i = 0;i < vec->size;i++) {
    800161b0:	fe042623          	sw	zero,-20(s0)
    800161b4:	a81d                	j	800161ea <vector_remove_value+0x4a>
        if (vec->values[i] == val) {
    800161b6:	fd843783          	ld	a5,-40(s0)
    800161ba:	6798                	ld	a4,8(a5)
    800161bc:	fec46783          	lwu	a5,-20(s0)
    800161c0:	078e                	slli	a5,a5,0x3
    800161c2:	97ba                	add	a5,a5,a4
    800161c4:	639c                	ld	a5,0(a5)
    800161c6:	fd043703          	ld	a4,-48(s0)
    800161ca:	00f71b63          	bne	a4,a5,800161e0 <vector_remove_value+0x40>
            vector_remove(vec, i);
    800161ce:	fec42783          	lw	a5,-20(s0)
    800161d2:	85be                	mv	a1,a5
    800161d4:	fd843503          	ld	a0,-40(s0)
    800161d8:	f45ff0ef          	jal	ra,8001611c <vector_remove>
            return true;
    800161dc:	4785                	li	a5,1
    800161de:	a839                	j	800161fc <vector_remove_value+0x5c>
    for (i = 0;i < vec->size;i++) {
    800161e0:	fec42783          	lw	a5,-20(s0)
    800161e4:	2785                	addiw	a5,a5,1
    800161e6:	fef42623          	sw	a5,-20(s0)
    800161ea:	fd843783          	ld	a5,-40(s0)
    800161ee:	4398                	lw	a4,0(a5)
    800161f0:	fec42783          	lw	a5,-20(s0)
    800161f4:	2781                	sext.w	a5,a5
    800161f6:	fce7e0e3          	bltu	a5,a4,800161b6 <vector_remove_value+0x16>
        }
    }
    return false;
    800161fa:	4781                	li	a5,0
}
    800161fc:	853e                	mv	a0,a5
    800161fe:	70a2                	ld	ra,40(sp)
    80016200:	7402                	ld	s0,32(sp)
    80016202:	6145                	addi	sp,sp,48
    80016204:	8082                	ret

0000000080016206 <vector_clear>:

void vector_clear(Vector *vec) {
    80016206:	1101                	addi	sp,sp,-32
    80016208:	ec06                	sd	ra,24(sp)
    8001620a:	e822                	sd	s0,16(sp)
    8001620c:	1000                	addi	s0,sp,32
    8001620e:	fea43423          	sd	a0,-24(s0)
    vector_resize(vec, 0);
    80016212:	4581                	li	a1,0
    80016214:	fe843503          	ld	a0,-24(s0)
    80016218:	d25ff0ef          	jal	ra,80015f3c <vector_resize>
}
    8001621c:	0001                	nop
    8001621e:	60e2                	ld	ra,24(sp)
    80016220:	6442                	ld	s0,16(sp)
    80016222:	6105                	addi	sp,sp,32
    80016224:	8082                	ret

0000000080016226 <vector_binsearch_ascending>:

int vector_binsearch_ascending(struct Vector *vec, uint64_t key) {
    80016226:	7179                	addi	sp,sp,-48
    80016228:	f406                	sd	ra,40(sp)
    8001622a:	f022                	sd	s0,32(sp)
    8001622c:	1800                	addi	s0,sp,48
    8001622e:	fca43c23          	sd	a0,-40(s0)
    80016232:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    80016236:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec);
    8001623a:	fd843503          	ld	a0,-40(s0)
    8001623e:	356000ef          	jal	ra,80016594 <vector_size>
    80016242:	87aa                	mv	a5,a0
    80016244:	2781                	sext.w	a5,a5
    80016246:	fef42423          	sw	a5,-24(s0)

    while (low < high) {
    8001624a:	a0ad                	j	800162b4 <vector_binsearch_ascending+0x8e>
        int mid = (low + high) / 2;
    8001624c:	fec42703          	lw	a4,-20(s0)
    80016250:	fe842783          	lw	a5,-24(s0)
    80016254:	9fb9                	addw	a5,a5,a4
    80016256:	2781                	sext.w	a5,a5
    80016258:	01f7d71b          	srliw	a4,a5,0x1f
    8001625c:	9fb9                	addw	a5,a5,a4
    8001625e:	4017d79b          	sraiw	a5,a5,0x1
    80016262:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) > key) {
    80016266:	fe442783          	lw	a5,-28(s0)
    8001626a:	85be                	mv	a1,a5
    8001626c:	fd843503          	ld	a0,-40(s0)
    80016270:	c13ff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    80016274:	872a                	mv	a4,a0
    80016276:	fd043783          	ld	a5,-48(s0)
    8001627a:	00e7f863          	bgeu	a5,a4,8001628a <vector_binsearch_ascending+0x64>
            high = mid - 1;
    8001627e:	fe442783          	lw	a5,-28(s0)
    80016282:	37fd                	addiw	a5,a5,-1
    80016284:	fef42423          	sw	a5,-24(s0)
    80016288:	a035                	j	800162b4 <vector_binsearch_ascending+0x8e>
        }
        else if (vector_get_unchecked(vec, mid) < key) {
    8001628a:	fe442783          	lw	a5,-28(s0)
    8001628e:	85be                	mv	a1,a5
    80016290:	fd843503          	ld	a0,-40(s0)
    80016294:	befff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    80016298:	872a                	mv	a4,a0
    8001629a:	fd043783          	ld	a5,-48(s0)
    8001629e:	00f77863          	bgeu	a4,a5,800162ae <vector_binsearch_ascending+0x88>
            low = mid + 1;
    800162a2:	fe442783          	lw	a5,-28(s0)
    800162a6:	2785                	addiw	a5,a5,1
    800162a8:	fef42623          	sw	a5,-20(s0)
    800162ac:	a021                	j	800162b4 <vector_binsearch_ascending+0x8e>
        }
        else {
            return mid;
    800162ae:	fe442783          	lw	a5,-28(s0)
    800162b2:	a811                	j	800162c6 <vector_binsearch_ascending+0xa0>
    while (low < high) {
    800162b4:	fec42703          	lw	a4,-20(s0)
    800162b8:	fe842783          	lw	a5,-24(s0)
    800162bc:	2701                	sext.w	a4,a4
    800162be:	2781                	sext.w	a5,a5
    800162c0:	f8f746e3          	blt	a4,a5,8001624c <vector_binsearch_ascending+0x26>
        }
    }
    return -1;
    800162c4:	57fd                	li	a5,-1
}
    800162c6:	853e                	mv	a0,a5
    800162c8:	70a2                	ld	ra,40(sp)
    800162ca:	7402                	ld	s0,32(sp)
    800162cc:	6145                	addi	sp,sp,48
    800162ce:	8082                	ret

00000000800162d0 <vector_binsearch_descending>:

int vector_binsearch_descending(struct Vector *vec, uint64_t key) {
    800162d0:	7179                	addi	sp,sp,-48
    800162d2:	f406                	sd	ra,40(sp)
    800162d4:	f022                	sd	s0,32(sp)
    800162d6:	1800                	addi	s0,sp,48
    800162d8:	fca43c23          	sd	a0,-40(s0)
    800162dc:	fcb43823          	sd	a1,-48(s0)
    int low = 0;
    800162e0:	fe042623          	sw	zero,-20(s0)
    int high = vector_size(vec) - 1;
    800162e4:	fd843503          	ld	a0,-40(s0)
    800162e8:	2ac000ef          	jal	ra,80016594 <vector_size>
    800162ec:	87aa                	mv	a5,a0
    800162ee:	2781                	sext.w	a5,a5
    800162f0:	37fd                	addiw	a5,a5,-1
    800162f2:	2781                	sext.w	a5,a5
    800162f4:	fef42423          	sw	a5,-24(s0)

    while (low <= high) {
    800162f8:	a0ad                	j	80016362 <vector_binsearch_descending+0x92>
        int mid = (low + high) / 2;
    800162fa:	fec42703          	lw	a4,-20(s0)
    800162fe:	fe842783          	lw	a5,-24(s0)
    80016302:	9fb9                	addw	a5,a5,a4
    80016304:	2781                	sext.w	a5,a5
    80016306:	01f7d71b          	srliw	a4,a5,0x1f
    8001630a:	9fb9                	addw	a5,a5,a4
    8001630c:	4017d79b          	sraiw	a5,a5,0x1
    80016310:	fef42223          	sw	a5,-28(s0)
        if (vector_get_unchecked(vec, mid) < key) {
    80016314:	fe442783          	lw	a5,-28(s0)
    80016318:	85be                	mv	a1,a5
    8001631a:	fd843503          	ld	a0,-40(s0)
    8001631e:	b65ff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    80016322:	872a                	mv	a4,a0
    80016324:	fd043783          	ld	a5,-48(s0)
    80016328:	00f77863          	bgeu	a4,a5,80016338 <vector_binsearch_descending+0x68>
            high = mid - 1;
    8001632c:	fe442783          	lw	a5,-28(s0)
    80016330:	37fd                	addiw	a5,a5,-1
    80016332:	fef42423          	sw	a5,-24(s0)
    80016336:	a035                	j	80016362 <vector_binsearch_descending+0x92>
        }
        else if (vector_get_unchecked(vec, mid) > key) {
    80016338:	fe442783          	lw	a5,-28(s0)
    8001633c:	85be                	mv	a1,a5
    8001633e:	fd843503          	ld	a0,-40(s0)
    80016342:	b41ff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    80016346:	872a                	mv	a4,a0
    80016348:	fd043783          	ld	a5,-48(s0)
    8001634c:	00e7f863          	bgeu	a5,a4,8001635c <vector_binsearch_descending+0x8c>
            low = mid + 1;
    80016350:	fe442783          	lw	a5,-28(s0)
    80016354:	2785                	addiw	a5,a5,1
    80016356:	fef42623          	sw	a5,-20(s0)
    8001635a:	a021                	j	80016362 <vector_binsearch_descending+0x92>
        }
        else {
            return mid;
    8001635c:	fe442783          	lw	a5,-28(s0)
    80016360:	a811                	j	80016374 <vector_binsearch_descending+0xa4>
    while (low <= high) {
    80016362:	fec42703          	lw	a4,-20(s0)
    80016366:	fe842783          	lw	a5,-24(s0)
    8001636a:	2701                	sext.w	a4,a4
    8001636c:	2781                	sext.w	a5,a5
    8001636e:	f8e7d6e3          	bge	a5,a4,800162fa <vector_binsearch_descending+0x2a>
        }
    }
    return -1;
    80016372:	57fd                	li	a5,-1
}
    80016374:	853e                	mv	a0,a5
    80016376:	70a2                	ld	ra,40(sp)
    80016378:	7402                	ld	s0,32(sp)
    8001637a:	6145                	addi	sp,sp,48
    8001637c:	8082                	ret

000000008001637e <vector_sort>:

void vector_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    8001637e:	1101                	addi	sp,sp,-32
    80016380:	ec06                	sd	ra,24(sp)
    80016382:	e822                	sd	s0,16(sp)
    80016384:	1000                	addi	s0,sp,32
    80016386:	fea43423          	sd	a0,-24(s0)
    8001638a:	feb43023          	sd	a1,-32(s0)
    vector_insertion_sort(vec, comp);
    8001638e:	fe043583          	ld	a1,-32(s0)
    80016392:	fe843503          	ld	a0,-24(s0)
    80016396:	10e000ef          	jal	ra,800164a4 <vector_insertion_sort>
}
    8001639a:	0001                	nop
    8001639c:	60e2                	ld	ra,24(sp)
    8001639e:	6442                	ld	s0,16(sp)
    800163a0:	6105                	addi	sp,sp,32
    800163a2:	8082                	ret

00000000800163a4 <vector_selection_sort>:

void vector_selection_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    800163a4:	715d                	addi	sp,sp,-80
    800163a6:	e486                	sd	ra,72(sp)
    800163a8:	e0a2                	sd	s0,64(sp)
    800163aa:	fc26                	sd	s1,56(sp)
    800163ac:	0880                	addi	s0,sp,80
    800163ae:	faa43c23          	sd	a0,-72(s0)
    800163b2:	fab43823          	sd	a1,-80(s0)
    uint32_t i;
    uint32_t j;
    uint32_t min_idx;
    uint64_t tmp;

    for (i = 0;i < vector_size(vec);i++) {
    800163b6:	fc042e23          	sw	zero,-36(s0)
    800163ba:	a0d1                	j	8001647e <vector_selection_sort+0xda>
        min_idx = i;
    800163bc:	fdc42783          	lw	a5,-36(s0)
    800163c0:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    800163c4:	fdc42783          	lw	a5,-36(s0)
    800163c8:	2785                	addiw	a5,a5,1
    800163ca:	fcf42c23          	sw	a5,-40(s0)
    800163ce:	a0a9                	j	80016418 <vector_selection_sort+0x74>
            if (!comp(vector_get_unchecked(vec, min_idx), vector_get_unchecked(vec, j))) {
    800163d0:	fd442783          	lw	a5,-44(s0)
    800163d4:	85be                	mv	a1,a5
    800163d6:	fb843503          	ld	a0,-72(s0)
    800163da:	aa9ff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    800163de:	84aa                	mv	s1,a0
    800163e0:	fd842783          	lw	a5,-40(s0)
    800163e4:	85be                	mv	a1,a5
    800163e6:	fb843503          	ld	a0,-72(s0)
    800163ea:	a99ff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    800163ee:	87aa                	mv	a5,a0
    800163f0:	fb043703          	ld	a4,-80(s0)
    800163f4:	85be                	mv	a1,a5
    800163f6:	8526                	mv	a0,s1
    800163f8:	9702                	jalr	a4
    800163fa:	87aa                	mv	a5,a0
    800163fc:	0017c793          	xori	a5,a5,1
    80016400:	0ff7f793          	andi	a5,a5,255
    80016404:	c789                	beqz	a5,8001640e <vector_selection_sort+0x6a>
                min_idx = j;
    80016406:	fd842783          	lw	a5,-40(s0)
    8001640a:	fcf42a23          	sw	a5,-44(s0)
        for (j = i + 1;j < vector_size(vec);j++) {
    8001640e:	fd842783          	lw	a5,-40(s0)
    80016412:	2785                	addiw	a5,a5,1
    80016414:	fcf42c23          	sw	a5,-40(s0)
    80016418:	fb843503          	ld	a0,-72(s0)
    8001641c:	178000ef          	jal	ra,80016594 <vector_size>
    80016420:	87aa                	mv	a5,a0
    80016422:	0007871b          	sext.w	a4,a5
    80016426:	fd842783          	lw	a5,-40(s0)
    8001642a:	2781                	sext.w	a5,a5
    8001642c:	fae7e2e3          	bltu	a5,a4,800163d0 <vector_selection_sort+0x2c>
            }
        }
        tmp = vector_get_unchecked(vec, i);
    80016430:	fdc42783          	lw	a5,-36(s0)
    80016434:	85be                	mv	a1,a5
    80016436:	fb843503          	ld	a0,-72(s0)
    8001643a:	a49ff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    8001643e:	fca43423          	sd	a0,-56(s0)
        vector_set(vec, i, vector_get_unchecked(vec, min_idx));
    80016442:	fd442783          	lw	a5,-44(s0)
    80016446:	85be                	mv	a1,a5
    80016448:	fb843503          	ld	a0,-72(s0)
    8001644c:	a37ff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    80016450:	872a                	mv	a4,a0
    80016452:	fdc42783          	lw	a5,-36(s0)
    80016456:	863a                	mv	a2,a4
    80016458:	85be                	mv	a1,a5
    8001645a:	fb843503          	ld	a0,-72(s0)
    8001645e:	991ff0ef          	jal	ra,80015dee <vector_set>
        vector_set(vec, min_idx, tmp);
    80016462:	fd442783          	lw	a5,-44(s0)
    80016466:	fc843603          	ld	a2,-56(s0)
    8001646a:	85be                	mv	a1,a5
    8001646c:	fb843503          	ld	a0,-72(s0)
    80016470:	97fff0ef          	jal	ra,80015dee <vector_set>
    for (i = 0;i < vector_size(vec);i++) {
    80016474:	fdc42783          	lw	a5,-36(s0)
    80016478:	2785                	addiw	a5,a5,1
    8001647a:	fcf42e23          	sw	a5,-36(s0)
    8001647e:	fb843503          	ld	a0,-72(s0)
    80016482:	112000ef          	jal	ra,80016594 <vector_size>
    80016486:	87aa                	mv	a5,a0
    80016488:	0007871b          	sext.w	a4,a5
    8001648c:	fdc42783          	lw	a5,-36(s0)
    80016490:	2781                	sext.w	a5,a5
    80016492:	f2e7e5e3          	bltu	a5,a4,800163bc <vector_selection_sort+0x18>
    }
}
    80016496:	0001                	nop
    80016498:	0001                	nop
    8001649a:	60a6                	ld	ra,72(sp)
    8001649c:	6406                	ld	s0,64(sp)
    8001649e:	74e2                	ld	s1,56(sp)
    800164a0:	6161                	addi	sp,sp,80
    800164a2:	8082                	ret

00000000800164a4 <vector_insertion_sort>:

void vector_insertion_sort(Vector *vec, VECTOR_COMPARATOR_PARAM(comp)) {
    800164a4:	715d                	addi	sp,sp,-80
    800164a6:	e486                	sd	ra,72(sp)
    800164a8:	e0a2                	sd	s0,64(sp)
    800164aa:	fc26                	sd	s1,56(sp)
    800164ac:	0880                	addi	s0,sp,80
    800164ae:	faa43c23          	sd	a0,-72(s0)
    800164b2:	fab43823          	sd	a1,-80(s0)
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    800164b6:	4785                	li	a5,1
    800164b8:	fcf42e23          	sw	a5,-36(s0)
    800164bc:	a84d                	j	8001656e <vector_insertion_sort+0xca>
        uint32_t j = i;
    800164be:	fdc42783          	lw	a5,-36(s0)
    800164c2:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    800164c6:	a8b1                	j	80016522 <vector_insertion_sort+0x7e>
            uint64_t left = vector_get_unchecked(vec, j - 1);
    800164c8:	fd842783          	lw	a5,-40(s0)
    800164cc:	37fd                	addiw	a5,a5,-1
    800164ce:	2781                	sext.w	a5,a5
    800164d0:	85be                	mv	a1,a5
    800164d2:	fb843503          	ld	a0,-72(s0)
    800164d6:	9adff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    800164da:	fca43823          	sd	a0,-48(s0)
            uint64_t right = vector_get_unchecked(vec, j);
    800164de:	fd842783          	lw	a5,-40(s0)
    800164e2:	85be                	mv	a1,a5
    800164e4:	fb843503          	ld	a0,-72(s0)
    800164e8:	99bff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    800164ec:	fca43423          	sd	a0,-56(s0)

            vector_set(vec, j, left);
    800164f0:	fd842783          	lw	a5,-40(s0)
    800164f4:	fd043603          	ld	a2,-48(s0)
    800164f8:	85be                	mv	a1,a5
    800164fa:	fb843503          	ld	a0,-72(s0)
    800164fe:	8f1ff0ef          	jal	ra,80015dee <vector_set>
            vector_set(vec, j - 1, right);
    80016502:	fd842783          	lw	a5,-40(s0)
    80016506:	37fd                	addiw	a5,a5,-1
    80016508:	2781                	sext.w	a5,a5
    8001650a:	fc843603          	ld	a2,-56(s0)
    8001650e:	85be                	mv	a1,a5
    80016510:	fb843503          	ld	a0,-72(s0)
    80016514:	8dbff0ef          	jal	ra,80015dee <vector_set>

            j -= 1;
    80016518:	fd842783          	lw	a5,-40(s0)
    8001651c:	37fd                	addiw	a5,a5,-1
    8001651e:	fcf42c23          	sw	a5,-40(s0)
        while (j > 0 && !comp(vector_get_unchecked(vec, j - 1), vector_get_unchecked(vec, j))) {
    80016522:	fd842783          	lw	a5,-40(s0)
    80016526:	2781                	sext.w	a5,a5
    80016528:	cf95                	beqz	a5,80016564 <vector_insertion_sort+0xc0>
    8001652a:	fd842783          	lw	a5,-40(s0)
    8001652e:	37fd                	addiw	a5,a5,-1
    80016530:	2781                	sext.w	a5,a5
    80016532:	85be                	mv	a1,a5
    80016534:	fb843503          	ld	a0,-72(s0)
    80016538:	94bff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    8001653c:	84aa                	mv	s1,a0
    8001653e:	fd842783          	lw	a5,-40(s0)
    80016542:	85be                	mv	a1,a5
    80016544:	fb843503          	ld	a0,-72(s0)
    80016548:	93bff0ef          	jal	ra,80015e82 <vector_get_unchecked>
    8001654c:	87aa                	mv	a5,a0
    8001654e:	fb043703          	ld	a4,-80(s0)
    80016552:	85be                	mv	a1,a5
    80016554:	8526                	mv	a0,s1
    80016556:	9702                	jalr	a4
    80016558:	87aa                	mv	a5,a0
    8001655a:	0017c793          	xori	a5,a5,1
    8001655e:	0ff7f793          	andi	a5,a5,255
    80016562:	f3bd                	bnez	a5,800164c8 <vector_insertion_sort+0x24>
    for (uint32_t i = 1;i < vector_size(vec);i++) {
    80016564:	fdc42783          	lw	a5,-36(s0)
    80016568:	2785                	addiw	a5,a5,1
    8001656a:	fcf42e23          	sw	a5,-36(s0)
    8001656e:	fb843503          	ld	a0,-72(s0)
    80016572:	022000ef          	jal	ra,80016594 <vector_size>
    80016576:	87aa                	mv	a5,a0
    80016578:	0007871b          	sext.w	a4,a5
    8001657c:	fdc42783          	lw	a5,-36(s0)
    80016580:	2781                	sext.w	a5,a5
    80016582:	f2e7eee3          	bltu	a5,a4,800164be <vector_insertion_sort+0x1a>
        }
    }
}
    80016586:	0001                	nop
    80016588:	0001                	nop
    8001658a:	60a6                	ld	ra,72(sp)
    8001658c:	6406                	ld	s0,64(sp)
    8001658e:	74e2                	ld	s1,56(sp)
    80016590:	6161                	addi	sp,sp,80
    80016592:	8082                	ret

0000000080016594 <vector_size>:

uint32_t vector_size(Vector *vec) {
    80016594:	1101                	addi	sp,sp,-32
    80016596:	ec22                	sd	s0,24(sp)
    80016598:	1000                	addi	s0,sp,32
    8001659a:	fea43423          	sd	a0,-24(s0)
    return vec->size;
    8001659e:	fe843783          	ld	a5,-24(s0)
    800165a2:	439c                	lw	a5,0(a5)
}
    800165a4:	853e                	mv	a0,a5
    800165a6:	6462                	ld	s0,24(sp)
    800165a8:	6105                	addi	sp,sp,32
    800165aa:	8082                	ret

00000000800165ac <vector_capacity>:

uint32_t vector_capacity(Vector *vec) {
    800165ac:	1101                	addi	sp,sp,-32
    800165ae:	ec22                	sd	s0,24(sp)
    800165b0:	1000                	addi	s0,sp,32
    800165b2:	fea43423          	sd	a0,-24(s0)
    return vec->capacity;
    800165b6:	fe843783          	ld	a5,-24(s0)
    800165ba:	43dc                	lw	a5,4(a5)
}
    800165bc:	853e                	mv	a0,a5
    800165be:	6462                	ld	s0,24(sp)
    800165c0:	6105                	addi	sp,sp,32
    800165c2:	8082                	ret

00000000800165c4 <vector_free>:

void vector_free(Vector *vec) {
    800165c4:	1101                	addi	sp,sp,-32
    800165c6:	ec06                	sd	ra,24(sp)
    800165c8:	e822                	sd	s0,16(sp)
    800165ca:	1000                	addi	s0,sp,32
    800165cc:	fea43423          	sd	a0,-24(s0)
    g_kfree(vec->values);
    800165d0:	fe843783          	ld	a5,-24(s0)
    800165d4:	679c                	ld	a5,8(a5)
    800165d6:	853e                	mv	a0,a5
    800165d8:	1d4000ef          	jal	ra,800167ac <g_kfree>
    vec->size = 0;
    800165dc:	fe843783          	ld	a5,-24(s0)
    800165e0:	0007a023          	sw	zero,0(a5)
    vec->capacity = 0;
    800165e4:	fe843783          	ld	a5,-24(s0)
    800165e8:	0007a223          	sw	zero,4(a5)
    g_kfree(vec);
    800165ec:	fe843503          	ld	a0,-24(s0)
    800165f0:	1bc000ef          	jal	ra,800167ac <g_kfree>
}
    800165f4:	0001                	nop
    800165f6:	60e2                	ld	ra,24(sp)
    800165f8:	6442                	ld	s0,16(sp)
    800165fa:	6105                	addi	sp,sp,32
    800165fc:	8082                	ret

00000000800165fe <vector_sort_signed_long_comparator_ascending>:

VECTOR_COMPARATOR(vector_sort_signed_long_comparator_ascending) {
    800165fe:	1101                	addi	sp,sp,-32
    80016600:	ec22                	sd	s0,24(sp)
    80016602:	1000                	addi	s0,sp,32
    80016604:	fea43423          	sd	a0,-24(s0)
    80016608:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left <= (int64_t)right;
    8001660c:	fe843703          	ld	a4,-24(s0)
    80016610:	fe043783          	ld	a5,-32(s0)
    80016614:	00e7a7b3          	slt	a5,a5,a4
    80016618:	0017c793          	xori	a5,a5,1
    8001661c:	0ff7f793          	andi	a5,a5,255
}
    80016620:	853e                	mv	a0,a5
    80016622:	6462                	ld	s0,24(sp)
    80016624:	6105                	addi	sp,sp,32
    80016626:	8082                	ret

0000000080016628 <vector_sort_signed_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_signed_long_comparator_descending) {
    80016628:	1101                	addi	sp,sp,-32
    8001662a:	ec22                	sd	s0,24(sp)
    8001662c:	1000                	addi	s0,sp,32
    8001662e:	fea43423          	sd	a0,-24(s0)
    80016632:	feb43023          	sd	a1,-32(s0)
    return (int64_t)left >= (int64_t)right;
    80016636:	fe843703          	ld	a4,-24(s0)
    8001663a:	fe043783          	ld	a5,-32(s0)
    8001663e:	00f727b3          	slt	a5,a4,a5
    80016642:	0017c793          	xori	a5,a5,1
    80016646:	0ff7f793          	andi	a5,a5,255
}
    8001664a:	853e                	mv	a0,a5
    8001664c:	6462                	ld	s0,24(sp)
    8001664e:	6105                	addi	sp,sp,32
    80016650:	8082                	ret

0000000080016652 <vector_sort_unsigned_long_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_ascending) {
    80016652:	1101                	addi	sp,sp,-32
    80016654:	ec22                	sd	s0,24(sp)
    80016656:	1000                	addi	s0,sp,32
    80016658:	fea43423          	sd	a0,-24(s0)
    8001665c:	feb43023          	sd	a1,-32(s0)
    return left <= right;
    80016660:	fe843703          	ld	a4,-24(s0)
    80016664:	fe043783          	ld	a5,-32(s0)
    80016668:	00e7b7b3          	sltu	a5,a5,a4
    8001666c:	0017c793          	xori	a5,a5,1
    80016670:	0ff7f793          	andi	a5,a5,255
}
    80016674:	853e                	mv	a0,a5
    80016676:	6462                	ld	s0,24(sp)
    80016678:	6105                	addi	sp,sp,32
    8001667a:	8082                	ret

000000008001667c <vector_sort_unsigned_long_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_unsigned_long_comparator_descending) {
    8001667c:	1101                	addi	sp,sp,-32
    8001667e:	ec22                	sd	s0,24(sp)
    80016680:	1000                	addi	s0,sp,32
    80016682:	fea43423          	sd	a0,-24(s0)
    80016686:	feb43023          	sd	a1,-32(s0)
    return left >= right;
    8001668a:	fe843703          	ld	a4,-24(s0)
    8001668e:	fe043783          	ld	a5,-32(s0)
    80016692:	00f737b3          	sltu	a5,a4,a5
    80016696:	0017c793          	xori	a5,a5,1
    8001669a:	0ff7f793          	andi	a5,a5,255
}
    8001669e:	853e                	mv	a0,a5
    800166a0:	6462                	ld	s0,24(sp)
    800166a2:	6105                	addi	sp,sp,32
    800166a4:	8082                	ret

00000000800166a6 <vector_sort_string_comparator_ascending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_ascending) {
    800166a6:	1101                	addi	sp,sp,-32
    800166a8:	ec06                	sd	ra,24(sp)
    800166aa:	e822                	sd	s0,16(sp)
    800166ac:	1000                	addi	s0,sp,32
    800166ae:	fea43423          	sd	a0,-24(s0)
    800166b2:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) <= 0;
    800166b6:	fe843783          	ld	a5,-24(s0)
    800166ba:	fe043703          	ld	a4,-32(s0)
    800166be:	85ba                	mv	a1,a4
    800166c0:	853e                	mv	a0,a5
    800166c2:	fb1fe0ef          	jal	ra,80015672 <strcmp>
    800166c6:	87aa                	mv	a5,a0
    800166c8:	0017a793          	slti	a5,a5,1
    800166cc:	0ff7f793          	andi	a5,a5,255
}
    800166d0:	853e                	mv	a0,a5
    800166d2:	60e2                	ld	ra,24(sp)
    800166d4:	6442                	ld	s0,16(sp)
    800166d6:	6105                	addi	sp,sp,32
    800166d8:	8082                	ret

00000000800166da <vector_sort_string_comparator_descending>:
VECTOR_COMPARATOR(vector_sort_string_comparator_descending) {
    800166da:	1101                	addi	sp,sp,-32
    800166dc:	ec06                	sd	ra,24(sp)
    800166de:	e822                	sd	s0,16(sp)
    800166e0:	1000                	addi	s0,sp,32
    800166e2:	fea43423          	sd	a0,-24(s0)
    800166e6:	feb43023          	sd	a1,-32(s0)
    return strcmp((const char *)left, (const char *)right) >= 0;
    800166ea:	fe843783          	ld	a5,-24(s0)
    800166ee:	fe043703          	ld	a4,-32(s0)
    800166f2:	85ba                	mv	a1,a4
    800166f4:	853e                	mv	a0,a5
    800166f6:	f7dfe0ef          	jal	ra,80015672 <strcmp>
    800166fa:	87aa                	mv	a5,a0
    800166fc:	fff7c793          	not	a5,a5
    80016700:	01f7d79b          	srliw	a5,a5,0x1f
    80016704:	0ff7f793          	andi	a5,a5,255
}
    80016708:	853e                	mv	a0,a5
    8001670a:	60e2                	ld	ra,24(sp)
    8001670c:	6442                	ld	s0,16(sp)
    8001670e:	6105                	addi	sp,sp,32
    80016710:	8082                	ret

0000000080016712 <g_kmalloc>:
void *(*__global_kmalloc)(uint64_t size);
void *(*__global_kcalloc)(uint64_t num, uint64_t size);
void (*__global_kfree)(void *ptr);

void *g_kmalloc(uint64_t size)
{
    80016712:	1101                	addi	sp,sp,-32
    80016714:	ec06                	sd	ra,24(sp)
    80016716:	e822                	sd	s0,16(sp)
    80016718:	1000                	addi	s0,sp,32
    8001671a:	fea43423          	sd	a0,-24(s0)
    if (__global_kmalloc == NULL) {
    8001671e:	00002797          	auipc	a5,0x2
    80016722:	8f278793          	addi	a5,a5,-1806 # 80018010 <__global_kmalloc>
    80016726:	639c                	ld	a5,0(a5)
    80016728:	e399                	bnez	a5,8001672e <g_kmalloc+0x1c>
        return NULL;
    8001672a:	4781                	li	a5,0
    8001672c:	a811                	j	80016740 <g_kmalloc+0x2e>
    }
    return __global_kmalloc(size);
    8001672e:	00002797          	auipc	a5,0x2
    80016732:	8e278793          	addi	a5,a5,-1822 # 80018010 <__global_kmalloc>
    80016736:	639c                	ld	a5,0(a5)
    80016738:	fe843503          	ld	a0,-24(s0)
    8001673c:	9782                	jalr	a5
    8001673e:	87aa                	mv	a5,a0
}
    80016740:	853e                	mv	a0,a5
    80016742:	60e2                	ld	ra,24(sp)
    80016744:	6442                	ld	s0,16(sp)
    80016746:	6105                	addi	sp,sp,32
    80016748:	8082                	ret

000000008001674a <g_kcalloc>:
void *g_kcalloc(uint64_t num, uint64_t size)
{
    8001674a:	1101                	addi	sp,sp,-32
    8001674c:	ec06                	sd	ra,24(sp)
    8001674e:	e822                	sd	s0,16(sp)
    80016750:	1000                	addi	s0,sp,32
    80016752:	fea43423          	sd	a0,-24(s0)
    80016756:	feb43023          	sd	a1,-32(s0)
    if (__global_kcalloc == NULL) {
    8001675a:	00002797          	auipc	a5,0x2
    8001675e:	8be78793          	addi	a5,a5,-1858 # 80018018 <__global_kcalloc>
    80016762:	639c                	ld	a5,0(a5)
    80016764:	e399                	bnez	a5,8001676a <g_kcalloc+0x20>
        return NULL;
    80016766:	4781                	li	a5,0
    80016768:	a821                	j	80016780 <g_kcalloc+0x36>
    }
    return __global_kcalloc(num, size);
    8001676a:	00002797          	auipc	a5,0x2
    8001676e:	8ae78793          	addi	a5,a5,-1874 # 80018018 <__global_kcalloc>
    80016772:	639c                	ld	a5,0(a5)
    80016774:	fe043583          	ld	a1,-32(s0)
    80016778:	fe843503          	ld	a0,-24(s0)
    8001677c:	9782                	jalr	a5
    8001677e:	87aa                	mv	a5,a0
}
    80016780:	853e                	mv	a0,a5
    80016782:	60e2                	ld	ra,24(sp)
    80016784:	6442                	ld	s0,16(sp)
    80016786:	6105                	addi	sp,sp,32
    80016788:	8082                	ret

000000008001678a <g_kzalloc>:
void *g_kzalloc(uint64_t size)
{
    8001678a:	1101                	addi	sp,sp,-32
    8001678c:	ec06                	sd	ra,24(sp)
    8001678e:	e822                	sd	s0,16(sp)
    80016790:	1000                	addi	s0,sp,32
    80016792:	fea43423          	sd	a0,-24(s0)
    return g_kcalloc(1, size);
    80016796:	fe843583          	ld	a1,-24(s0)
    8001679a:	4505                	li	a0,1
    8001679c:	fafff0ef          	jal	ra,8001674a <g_kcalloc>
    800167a0:	87aa                	mv	a5,a0
}
    800167a2:	853e                	mv	a0,a5
    800167a4:	60e2                	ld	ra,24(sp)
    800167a6:	6442                	ld	s0,16(sp)
    800167a8:	6105                	addi	sp,sp,32
    800167aa:	8082                	ret

00000000800167ac <g_kfree>:
void g_kfree(void *ptr)
{
    800167ac:	1101                	addi	sp,sp,-32
    800167ae:	ec06                	sd	ra,24(sp)
    800167b0:	e822                	sd	s0,16(sp)
    800167b2:	1000                	addi	s0,sp,32
    800167b4:	fea43423          	sd	a0,-24(s0)
    if (__global_kfree != NULL) {
    800167b8:	00002797          	auipc	a5,0x2
    800167bc:	86878793          	addi	a5,a5,-1944 # 80018020 <__global_kfree>
    800167c0:	639c                	ld	a5,0(a5)
    800167c2:	cb89                	beqz	a5,800167d4 <g_kfree+0x28>
        __global_kfree(ptr);
    800167c4:	00002797          	auipc	a5,0x2
    800167c8:	85c78793          	addi	a5,a5,-1956 # 80018020 <__global_kfree>
    800167cc:	639c                	ld	a5,0(a5)
    800167ce:	fe843503          	ld	a0,-24(s0)
    800167d2:	9782                	jalr	a5
    }
}
    800167d4:	0001                	nop
    800167d6:	60e2                	ld	ra,24(sp)
    800167d8:	6442                	ld	s0,16(sp)
    800167da:	6105                	addi	sp,sp,32
    800167dc:	8082                	ret

00000000800167de <util_connect_galloc>:

void util_connect_galloc(void *(*malloc)(uint64_t size),
                         void *(*calloc)(uint64_t elem, uint64_t size), void (*free)(void *ptr))
{
    800167de:	7179                	addi	sp,sp,-48
    800167e0:	f422                	sd	s0,40(sp)
    800167e2:	1800                	addi	s0,sp,48
    800167e4:	fea43423          	sd	a0,-24(s0)
    800167e8:	feb43023          	sd	a1,-32(s0)
    800167ec:	fcc43c23          	sd	a2,-40(s0)
    __global_kmalloc = malloc;
    800167f0:	00002797          	auipc	a5,0x2
    800167f4:	82078793          	addi	a5,a5,-2016 # 80018010 <__global_kmalloc>
    800167f8:	fe843703          	ld	a4,-24(s0)
    800167fc:	e398                	sd	a4,0(a5)
    __global_kcalloc = calloc;
    800167fe:	00002797          	auipc	a5,0x2
    80016802:	81a78793          	addi	a5,a5,-2022 # 80018018 <__global_kcalloc>
    80016806:	fe043703          	ld	a4,-32(s0)
    8001680a:	e398                	sd	a4,0(a5)
    __global_kfree   = free;
    8001680c:	00002797          	auipc	a5,0x2
    80016810:	81478793          	addi	a5,a5,-2028 # 80018020 <__global_kfree>
    80016814:	fd843703          	ld	a4,-40(s0)
    80016818:	e398                	sd	a4,0(a5)
}
    8001681a:	0001                	nop
    8001681c:	7422                	ld	s0,40(sp)
    8001681e:	6145                	addi	sp,sp,48
    80016820:	8082                	ret
